
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001065c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d0  080107fc  080107fc  000207fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080111cc  080111cc  00030700  2**0
                  CONTENTS
  4 .ARM          00000008  080111cc  080111cc  000211cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080111d4  080111d4  00030700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080111d4  080111d4  000211d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080111d8  080111d8  000211d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000700  20000000  080111dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b68  20000700  080118dc  00030700  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009268  080118dc  00039268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030700  2**0
                  CONTENTS, READONLY
 12 .debug_info   000287c0  00000000  00000000  00030730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a52  00000000  00000000  00058ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002160  00000000  00000000  0005e948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f20  00000000  00000000  00060aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8f4  00000000  00000000  000629c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027ae5  00000000  00000000  000802bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f0aa  00000000  00000000  000a7da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146e4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091cc  00000000  00000000  00146e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000700 	.word	0x20000700
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080107e4 	.word	0x080107e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000704 	.word	0x20000704
 80001dc:	080107e4 	.word	0x080107e4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af04      	add	r7, sp, #16
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460a      	mov	r2, r1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	4613      	mov	r3, r2
 8000bae:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 8000bb0:	79bb      	ldrb	r3, [r7, #6]
 8000bb2:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	2364      	movs	r3, #100	; 0x64
 8000bba:	9302      	str	r3, [sp, #8]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	f107 030f 	add.w	r3, r7, #15
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	2150      	movs	r1, #80	; 0x50
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <MFRC_REGW+0x44>)
 8000bcc:	f003 feac 	bl	8004928 <HAL_I2C_Mem_Write>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 8000bd6:	23bb      	movs	r3, #187	; 0xbb
 8000bd8:	e000      	b.n	8000bdc <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 8000bda:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000071c 	.word	0x2000071c

08000be8 <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af04      	add	r7, sp, #16
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	2364      	movs	r3, #100	; 0x64
 8000bfa:	9302      	str	r3, [sp, #8]
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2301      	movs	r3, #1
 8000c06:	2150      	movs	r1, #80	; 0x50
 8000c08:	4806      	ldr	r0, [pc, #24]	; (8000c24 <MFRC_REGR+0x3c>)
 8000c0a:	f003 ff87 	bl	8004b1c <HAL_I2C_Mem_Read>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000c14:	23bb      	movs	r3, #187	; 0xbb
 8000c16:	e000      	b.n	8000c1a <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 8000c18:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000071c 	.word	0x2000071c

08000c28 <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af04      	add	r7, sp, #16
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e018      	b.n	8000c6c <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	4413      	add	r3, r2
 8000c40:	2264      	movs	r2, #100	; 0x64
 8000c42:	9202      	str	r2, [sp, #8]
 8000c44:	2201      	movs	r2, #1
 8000c46:	9201      	str	r2, [sp, #4]
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	2209      	movs	r2, #9
 8000c4e:	2150      	movs	r1, #80	; 0x50
 8000c50:	480b      	ldr	r0, [pc, #44]	; (8000c80 <MFRC_FIFOW+0x58>)
 8000c52:	f003 fe69 	bl	8004928 <HAL_I2C_Mem_Write>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000c5c:	23bb      	movs	r3, #187	; 0xbb
 8000c5e:	e00a      	b.n	8000c76 <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f003 fa49 	bl	80040f8 <HAL_Delay>
	for(int i=0;i<size;i++){
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dbe2      	blt.n	8000c3a <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000c74:	23cc      	movs	r3, #204	; 0xcc
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000071c 	.word	0x2000071c

08000c84 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af04      	add	r7, sp, #16
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	e018      	b.n	8000cc8 <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	2264      	movs	r2, #100	; 0x64
 8000c9e:	9202      	str	r2, [sp, #8]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	9201      	str	r2, [sp, #4]
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	2209      	movs	r2, #9
 8000caa:	2150      	movs	r1, #80	; 0x50
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <MFRC_FIFOR+0x58>)
 8000cae:	f003 ff35 	bl	8004b1c <HAL_I2C_Mem_Read>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 8000cb8:	23bb      	movs	r3, #187	; 0xbb
 8000cba:	e00a      	b.n	8000cd2 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f003 fa1b 	bl	80040f8 <HAL_Delay>
	for(int i=0;i<size;i++){
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbe2      	blt.n	8000c96 <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 8000cd0:	23cc      	movs	r3, #204	; 0xcc
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000071c 	.word	0x2000071c

08000ce0 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	4619      	mov	r1, r3
 8000cea:	2014      	movs	r0, #20
 8000cec:	f7ff ff7c 	bl	8000be8 <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d007      	beq.n	8000d0a <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f043 0303 	orr.w	r3, r3, #3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	4619      	mov	r1, r3
 8000d04:	2014      	movs	r0, #20
 8000d06:	f7ff ff4b 	bl	8000ba0 <MFRC_REGW>
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	460a      	mov	r2, r1
 8000d1c:	71fb      	strb	r3, [r7, #7]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000d22:	f107 020f 	add.w	r2, r7, #15
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff5c 	bl	8000be8 <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000d30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	b25a      	sxtb	r2, r3
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	b25b      	sxtb	r3, r3
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	b25b      	sxtb	r3, r3
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff2a 	bl	8000ba0 <MFRC_REGW>
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 8000d58:	2103      	movs	r1, #3
 8000d5a:	2014      	movs	r0, #20
 8000d5c:	f7ff ffd9 	bl	8000d12 <ClearBitMask>
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000d72:	2100      	movs	r1, #0
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff ff13 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	2005      	movs	r0, #5
 8000d7e:	f7ff ff0f 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000d82:	2180      	movs	r1, #128	; 0x80
 8000d84:	200a      	movs	r0, #10
 8000d86:	f7ff ff0b 	bl	8000ba0 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 8000d8a:	7afb      	ldrb	r3, [r7, #11]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f7ff ff4a 	bl	8000c28 <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000d94:	2103      	movs	r1, #3
 8000d96:	2001      	movs	r0, #1
 8000d98:	f7ff ff02 	bl	8000ba0 <MFRC_REGW>
	HAL_Delay(100);
 8000d9c:	2064      	movs	r0, #100	; 0x64
 8000d9e:	f003 f9ab 	bl	80040f8 <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000da2:	f107 0317 	add.w	r3, r7, #23
 8000da6:	4619      	mov	r1, r3
 8000da8:	2005      	movs	r0, #5
 8000daa:	f7ff ff1d 	bl	8000be8 <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 8000dae:	7dfb      	ldrb	r3, [r7, #23]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 8000db8:	23ee      	movs	r3, #238	; 0xee
 8000dba:	e00e      	b.n	8000dda <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff feee 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	2022      	movs	r0, #34	; 0x22
 8000dc8:	f7ff ff0e 	bl	8000be8 <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	2021      	movs	r0, #33	; 0x21
 8000dd4:	f7ff ff08 	bl	8000be8 <MFRC_REGR>
	return(PCD_OK);
 8000dd8:	23cc      	movs	r3, #204	; 0xcc

}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 8000de8:	2201      	movs	r2, #1
 8000dea:	2120      	movs	r1, #32
 8000dec:	4815      	ldr	r0, [pc, #84]	; (8000e44 <MFRC_INIT+0x60>)
 8000dee:	f003 fc25 	bl	800463c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2120      	movs	r1, #32
 8000df6:	4813      	ldr	r0, [pc, #76]	; (8000e44 <MFRC_INIT+0x60>)
 8000df8:	f003 fc20 	bl	800463c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f003 f97b 	bl	80040f8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2120      	movs	r1, #32
 8000e06:	480f      	ldr	r0, [pc, #60]	; (8000e44 <MFRC_INIT+0x60>)
 8000e08:	f003 fc18 	bl	800463c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000e0c:	2032      	movs	r0, #50	; 0x32
 8000e0e:	f003 f973 	bl	80040f8 <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000e12:	2100      	movs	r1, #0
 8000e14:	2012      	movs	r0, #18
 8000e16:	f7ff fec3 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2013      	movs	r0, #19
 8000e1e:	f7ff febf 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000e22:	2126      	movs	r1, #38	; 0x26
 8000e24:	2024      	movs	r0, #36	; 0x24
 8000e26:	f7ff febb 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 8000e2a:	2140      	movs	r1, #64	; 0x40
 8000e2c:	2015      	movs	r0, #21
 8000e2e:	f7ff feb7 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000e32:	213d      	movs	r1, #61	; 0x3d
 8000e34:	2011      	movs	r0, #17
 8000e36:	f7ff feb3 	bl	8000ba0 <MFRC_REGW>
	MFRC_ANTON();
 8000e3a:	f7ff ff51 	bl	8000ce0 <MFRC_ANTON>
	return(PCD_OK);
 8000e3e:	23cc      	movs	r3, #204	; 0xcc



}
 8000e40:	4618      	mov	r0, r3
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40020400 	.word	0x40020400

08000e48 <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	461a      	mov	r2, r3
 8000e54:	460b      	mov	r3, r1
 8000e56:	72fb      	strb	r3, [r7, #11]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000e64:	2100      	movs	r1, #0
 8000e66:	2001      	movs	r0, #1
 8000e68:	f7ff fe9a 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000e6c:	217f      	movs	r1, #127	; 0x7f
 8000e6e:	2004      	movs	r0, #4
 8000e70:	f7ff fe96 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	200a      	movs	r0, #10
 8000e78:	f7ff fe92 	bl	8000ba0 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000e7c:	7afb      	ldrb	r3, [r7, #11]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	f7ff fed1 	bl	8000c28 <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 8000e86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	200d      	movs	r0, #13
 8000e8e:	f7ff fe87 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000e92:	210c      	movs	r1, #12
 8000e94:	2001      	movs	r0, #1
 8000e96:	f7ff fe83 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 8000e9a:	f107 0316 	add.w	r3, r7, #22
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	200d      	movs	r0, #13
 8000ea2:	f7ff fea1 	bl	8000be8 <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 8000ea6:	7dbb      	ldrb	r3, [r7, #22]
 8000ea8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4619      	mov	r1, r3
 8000eb0:	200d      	movs	r0, #13
 8000eb2:	f7ff fe75 	bl	8000ba0 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 8000eb6:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f003 f91d 	bl	80040f8 <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 8000ebe:	7abb      	ldrb	r3, [r7, #10]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fede 	bl	8000c84 <MFRC_FIFOR>


	return(PCD_OK);
 8000ec8:	23cc      	movs	r3, #204	; 0xcc
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <MFRC_WUPA>:
 * Function to issue the WUPA command to PICC (We use this to go from HALT to READY state check ISO standard)
 *
 * @param reponse: PICC reponse to WUPA (Expect 0x44, 0x00 for ULTRALIGHT
 * */

PCD_StatusTypeDef MFRC_WUPA(uint8_t* response){
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af02      	add	r7, sp, #8
 8000ed8:	6078      	str	r0, [r7, #4]
	uint8_t WUPA=0x52;
 8000eda:	2352      	movs	r3, #82	; 0x52
 8000edc:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 8000ede:	2180      	movs	r1, #128	; 0x80
 8000ee0:	200e      	movs	r0, #14
 8000ee2:	f7ff ff16 	bl	8000d12 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&WUPA,1, response, 2, 7)!=PCD_OK){//WUPA is a 7-bit command
 8000ee6:	f107 000f 	add.w	r0, r7, #15
 8000eea:	2307      	movs	r3, #7
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2302      	movs	r3, #2
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	f7ff ffa8 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2bcc      	cmp	r3, #204	; 0xcc
 8000efc:	d001      	beq.n	8000f02 <MFRC_WUPA+0x30>
		return(PCD_COMM_ERR);
 8000efe:	23aa      	movs	r3, #170	; 0xaa
 8000f00:	e000      	b.n	8000f04 <MFRC_WUPA+0x32>
	}

	else{
		return(PCD_OK);
 8000f02:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <MFRC_HALTA>:

/*
 * Function to issue HALTA command to PICC (Change from READY to HALT state) Send WUPA and select sequence to re-select PICC
 * */

PCD_StatusTypeDef MFRC_HALTA(void){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af02      	add	r7, sp, #8
	uint8_t transaction[4]={ULTRA_HALTA,0x00};
 8000f12:	2350      	movs	r3, #80	; 0x50
 8000f14:	60fb      	str	r3, [r7, #12]
	uint8_t CRC_val[2];
	uint8_t ack;

	if(CALC_CRC(transaction, 2, CRC_val)!=PCD_OK){
 8000f16:	f107 0208 	add.w	r2, r7, #8
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	2102      	movs	r1, #2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff1f 	bl	8000d64 <CALC_CRC>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2bcc      	cmp	r3, #204	; 0xcc
 8000f2a:	d001      	beq.n	8000f30 <MFRC_HALTA+0x24>
		return(CRC_ERR);
 8000f2c:	23ee      	movs	r3, #238	; 0xee
 8000f2e:	e013      	b.n	8000f58 <MFRC_HALTA+0x4c>
	}
	memcpy(transaction+2,CRC_val,2);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	3302      	adds	r3, #2
 8000f36:	893a      	ldrh	r2, [r7, #8]
 8000f38:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, &ack, 1, 0)!=PCD_OK){
 8000f3a:	1dfa      	adds	r2, r7, #7
 8000f3c:	f107 000c 	add.w	r0, r7, #12
 8000f40:	2300      	movs	r3, #0
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2301      	movs	r3, #1
 8000f46:	2104      	movs	r1, #4
 8000f48:	f7ff ff7e 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2bcc      	cmp	r3, #204	; 0xcc
 8000f50:	d001      	beq.n	8000f56 <MFRC_HALTA+0x4a>
		return(PCD_COMM_ERR);
 8000f52:	23aa      	movs	r3, #170	; 0xaa
 8000f54:	e000      	b.n	8000f58 <MFRC_HALTA+0x4c>
	}

	else{
		return(PCD_OK);
 8000f56:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000f68:	f242 0393 	movw	r3, #8339	; 0x2093
 8000f6c:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000f6e:	2180      	movs	r1, #128	; 0x80
 8000f70:	200e      	movs	r0, #14
 8000f72:	f7ff fece 	bl	8000d12 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000f76:	f107 000c 	add.w	r0, r7, #12
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2305      	movs	r3, #5
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	2102      	movs	r1, #2
 8000f84:	f7ff ff60 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2bcc      	cmp	r3, #204	; 0xcc
 8000f8c:	d001      	beq.n	8000f92 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 8000f8e:	23aa      	movs	r3, #170	; 0xaa
 8000f90:	e000      	b.n	8000f94 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 8000f92:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 8000fa6:	f247 0393 	movw	r3, #28819	; 0x7093
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	3302      	adds	r3, #2
 8000fbc:	2205      	movs	r2, #5
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f00e ff77 	bl	800feb4 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000fc6:	f107 0208 	add.w	r2, r7, #8
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2107      	movs	r1, #7
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fec7 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	3307      	adds	r3, #7
 8000fdc:	893a      	ldrh	r2, [r7, #8]
 8000fde:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000fe0:	f107 000c 	add.w	r0, r7, #12
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2303      	movs	r3, #3
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	2109      	movs	r1, #9
 8000fee:	f7ff ff2b 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2bcc      	cmp	r3, #204	; 0xcc
 8000ff6:	d001      	beq.n	8000ffc <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000ff8:	23aa      	movs	r3, #170	; 0xaa
 8000ffa:	e000      	b.n	8000ffe <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 8000ffc:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af02      	add	r7, sp, #8
 800100c:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 800100e:	f242 0395 	movw	r3, #8341	; 0x2095
 8001012:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	200e      	movs	r0, #14
 8001018:	f7ff fe7b 	bl	8000d12 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 800101c:	f107 000c 	add.w	r0, r7, #12
 8001020:	2300      	movs	r3, #0
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2305      	movs	r3, #5
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	2102      	movs	r1, #2
 800102a:	f7ff ff0d 	bl	8000e48 <MFRC_TRANSCEIVE>
 800102e:	4603      	mov	r3, r0
 8001030:	2bcc      	cmp	r3, #204	; 0xcc
 8001032:	d001      	beq.n	8001038 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 8001034:	23aa      	movs	r3, #170	; 0xaa
 8001036:	e000      	b.n	800103a <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 8001038:	23cc      	movs	r3, #204	; 0xcc
	}
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 8001042:	b580      	push	{r7, lr}
 8001044:	b088      	sub	sp, #32
 8001046:	af02      	add	r7, sp, #8
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 800104c:	f247 0395 	movw	r3, #28821	; 0x7095
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	3302      	adds	r3, #2
 8001062:	2205      	movs	r2, #5
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4618      	mov	r0, r3
 8001068:	f00e ff24 	bl	800feb4 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 800106c:	f107 0208 	add.w	r2, r7, #8
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2107      	movs	r1, #7
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fe74 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	3307      	adds	r3, #7
 8001082:	893a      	ldrh	r2, [r7, #8]
 8001084:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8001086:	f107 000c 	add.w	r0, r7, #12
 800108a:	2300      	movs	r3, #0
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2303      	movs	r3, #3
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	2109      	movs	r1, #9
 8001094:	f7ff fed8 	bl	8000e48 <MFRC_TRANSCEIVE>
 8001098:	4603      	mov	r3, r0
 800109a:	2bcc      	cmp	r3, #204	; 0xcc
 800109c:	d001      	beq.n	80010a2 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 800109e:	23aa      	movs	r3, #170	; 0xaa
 80010a0:	e000      	b.n	80010a4 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 80010a2:	23cc      	movs	r3, #204	; 0xcc
	}

}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];
	  uint8_t ATQA[2];

	  if (PICC_CHECK() != PCD_OK) {
 80010b2:	f000 f839 	bl	8001128 <PICC_CHECK>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2bcc      	cmp	r3, #204	; 0xcc
 80010ba:	d001      	beq.n	80010c0 <PICC_Select+0x14>
		  return PCD_COMM_ERR;
 80010bc:	23aa      	movs	r3, #170	; 0xaa
 80010be:	e02f      	b.n	8001120 <PICC_Select+0x74>
	  }
	  MFRC_WUPA(ATQA);
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff05 	bl	8000ed2 <MFRC_WUPA>
	  MFRC_ANTICOL1(ANTICOL1);
 80010c8:	f107 0318 	add.w	r3, r7, #24
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff47 	bl	8000f60 <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 80010d2:	7e3b      	ldrb	r3, [r7, #24]
 80010d4:	2b88      	cmp	r3, #136	; 0x88
 80010d6:	d001      	beq.n	80010dc <PICC_Select+0x30>
		  return(PCD_COMM_ERR);
 80010d8:	23aa      	movs	r3, #170	; 0xaa
 80010da:	e021      	b.n	8001120 <PICC_Select+0x74>
	  }
	  HAL_Delay(10);
 80010dc:	200a      	movs	r0, #10
 80010de:	f003 f80b 	bl	80040f8 <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 80010e2:	f107 0214 	add.w	r2, r7, #20
 80010e6:	f107 0318 	add.w	r3, r7, #24
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff55 	bl	8000f9c <MFRC_SEL1>
	  HAL_Delay(10);
 80010f2:	200a      	movs	r0, #10
 80010f4:	f003 f800 	bl	80040f8 <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff82 	bl	8001006 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8001102:	200a      	movs	r0, #10
 8001104:	f002 fff8 	bl	80040f8 <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8001108:	f107 0208 	add.w	r2, r7, #8
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff95 	bl	8001042 <MFRC_SEL2>
	  HAL_Delay(10);
 8001118:	200a      	movs	r0, #10
 800111a:	f002 ffed 	bl	80040f8 <HAL_Delay>
	  return(PCD_OK);
 800111e:	23cc      	movs	r3, #204	; 0xcc
}
 8001120:	4618      	mov	r0, r3
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_WUPA(ATQA)!=PCD_OK){
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fece 	bl	8000ed2 <MFRC_WUPA>
 8001136:	4603      	mov	r3, r0
 8001138:	2bcc      	cmp	r3, #204	; 0xcc
 800113a:	d001      	beq.n	8001140 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 800113c:	23aa      	movs	r3, #170	; 0xaa
 800113e:	e00a      	b.n	8001156 <PICC_CHECK+0x2e>
	}

	else{
		if((ATQA[0]!=ULTRA_ATQA0) || (ATQA[1] != ULTRA_ATQA1)){
 8001140:	793b      	ldrb	r3, [r7, #4]
 8001142:	2b44      	cmp	r3, #68	; 0x44
 8001144:	d102      	bne.n	800114c <PICC_CHECK+0x24>
 8001146:	797b      	ldrb	r3, [r7, #5]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <PICC_CHECK+0x28>
			return(PCD_COMM_ERR);
 800114c:	23aa      	movs	r3, #170	; 0xaa
 800114e:	e002      	b.n	8001156 <PICC_CHECK+0x2e>
		}
		else{
			MFRC_HALTA();
 8001150:	f7ff fedc 	bl	8000f0c <MFRC_HALTA>
			return(PCD_OK);
 8001154:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af02      	add	r7, sp, #8
 8001164:	4603      	mov	r3, r0
 8001166:	6039      	str	r1, [r7, #0]
 8001168:	71fb      	strb	r3, [r7, #7]

	uint8_t transaction[4]={ULTRA_READ,addr};
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	2330      	movs	r3, #48	; 0x30
 8001170:	733b      	strb	r3, [r7, #12]
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	737b      	strb	r3, [r7, #13]
	uint8_t CRC_val[2];

	CALC_CRC(transaction, 2, CRC_val);
 8001176:	f107 0208 	add.w	r2, r7, #8
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	2102      	movs	r1, #2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fdef 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+2,CRC_val,2);
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	3302      	adds	r3, #2
 800118c:	893a      	ldrh	r2, [r7, #8]
 800118e:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, data, UL_READSIZE, 0)!=PCD_OK){
 8001190:	f107 000c 	add.w	r0, r7, #12
 8001194:	2300      	movs	r3, #0
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2310      	movs	r3, #16
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	2104      	movs	r1, #4
 800119e:	f7ff fe53 	bl	8000e48 <MFRC_TRANSCEIVE>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2bcc      	cmp	r3, #204	; 0xcc
 80011a6:	d001      	beq.n	80011ac <UL_READ+0x4e>
		return(PCD_COMM_ERR);
 80011a8:	23aa      	movs	r3, #170	; 0xaa
 80011aa:	e000      	b.n	80011ae <UL_READ+0x50>
	}

	else{
		return(PCD_OK);
 80011ac:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <UL_WRITE>:
 *
 * @param data: Array of 4 bytes to write
 *
 * */

PCD_StatusTypeDef UL_WRITE(uint8_t addr,uint8_t* data){
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b088      	sub	sp, #32
 80011ba:	af02      	add	r7, sp, #8
 80011bc:	4603      	mov	r3, r0
 80011be:	6039      	str	r1, [r7, #0]
 80011c0:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[8]={ULTRA_WRITE,addr};
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	23a2      	movs	r3, #162	; 0xa2
 80011ce:	743b      	strb	r3, [r7, #16]
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	747b      	strb	r3, [r7, #17]
	uint8_t ack;
	uint8_t CRC_val[2];

	//Safety check to see if we're trying to write to any of the first four pages which contain sensitive data (uid, OTP etc)
	if (addr <= 3) {
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d801      	bhi.n	80011de <UL_WRITE+0x28>
		return PCD_PROTECTED_ERR;
 80011da:	2302      	movs	r3, #2
 80011dc:	e022      	b.n	8001224 <UL_WRITE+0x6e>
	}

	memcpy(transaction+2,data,4);
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	3302      	adds	r3, #2
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	601a      	str	r2, [r3, #0]

	CALC_CRC(transaction, 6, CRC_val);
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	2106      	movs	r1, #6
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fdb5 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+6,CRC_val,2);
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	3306      	adds	r3, #6
 8001200:	89ba      	ldrh	r2, [r7, #12]
 8001202:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 8, &ack, 1, 0)!=PCD_OK){
 8001204:	f107 020f 	add.w	r2, r7, #15
 8001208:	f107 0010 	add.w	r0, r7, #16
 800120c:	2300      	movs	r3, #0
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	2108      	movs	r1, #8
 8001214:	f7ff fe18 	bl	8000e48 <MFRC_TRANSCEIVE>
 8001218:	4603      	mov	r3, r0
 800121a:	2bcc      	cmp	r3, #204	; 0xcc
 800121c:	d001      	beq.n	8001222 <UL_WRITE+0x6c>
		return(PCD_COMM_ERR);
 800121e:	23aa      	movs	r3, #170	; 0xaa
 8001220:	e000      	b.n	8001224 <UL_WRITE+0x6e>
	}

	else{
		return(PCD_OK);
 8001222:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <UL_getuid>:
 * Read the 7 byte uid of MIFARE Ultralight card
 *
 * @param uid - Array to store uid
 * @return PCD_OK if uid was successfully read
 * */
PCD_StatusTypeDef UL_getuid(uint8_t* uid) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	uint8_t read[UL_READSIZE];

	if (UL_READ(0x00, read) != PCD_OK) {
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	4619      	mov	r1, r3
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff ff8f 	bl	800115e <UL_READ>
 8001240:	4603      	mov	r3, r0
 8001242:	2bcc      	cmp	r3, #204	; 0xcc
 8001244:	d001      	beq.n	800124a <UL_getuid+0x1e>
		return PCD_COMM_ERR;
 8001246:	23aa      	movs	r3, #170	; 0xaa
 8001248:	e007      	b.n	800125a <UL_getuid+0x2e>
	}

	memcpy(uid, read, UL_UIDSIZE);
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	2207      	movs	r2, #7
 8001250:	4619      	mov	r1, r3
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f00e fe2e 	bl	800feb4 <memcpy>
	return PCD_OK;
 8001258:	23cc      	movs	r3, #204	; 0xcc
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <UL_getalldata>:
 * Get all 64 bytes of user data from card
 *
 * @param data - Array to store data
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_getalldata(uint8_t* data) {
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	e010      	b.n	8001292 <UL_getalldata+0x30>
		if (UL_READ(i, data) != PCD_OK) {
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff71 	bl	800115e <UL_READ>
 800127c:	4603      	mov	r3, r0
 800127e:	2bcc      	cmp	r3, #204	; 0xcc
 8001280:	d001      	beq.n	8001286 <UL_getalldata+0x24>
			return PCD_COMM_ERR;
 8001282:	23aa      	movs	r3, #170	; 0xaa
 8001284:	e009      	b.n	800129a <UL_getalldata+0x38>
		}
		data += UL_READSIZE; //increment pointer
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3310      	adds	r3, #16
 800128a:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3304      	adds	r3, #4
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b0e      	cmp	r3, #14
 8001296:	ddeb      	ble.n	8001270 <UL_getalldata+0xe>
	}

	return PCD_OK;
 8001298:	23cc      	movs	r3, #204	; 0xcc
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <UL_readcard>:
 * !!Name of card is set by user after being read!!
 *
 * @param result - Card to store data into
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_readcard(Card* result) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

	result->type = "MIFARE Ultralight";
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a14      	ldr	r2, [pc, #80]	; (8001300 <UL_readcard+0x5c>)
 80012b0:	60da      	str	r2, [r3, #12]
	result->uidsize = UL_UIDSIZE;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2207      	movs	r2, #7
 80012b6:	711a      	strb	r2, [r3, #4]
	result->contents_size = UL_MEMSIZE;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2240      	movs	r2, #64	; 0x40
 80012bc:	831a      	strh	r2, [r3, #24]
	result->read_protected = 0;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	741a      	strb	r2, [r3, #16]

	if (PICC_Select() != PCD_OK) { //Select PICC if available
 80012c4:	f7ff fef2 	bl	80010ac <PICC_Select>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2bcc      	cmp	r3, #204	; 0xcc
 80012cc:	d001      	beq.n	80012d2 <UL_readcard+0x2e>
		return PCD_NO_PICC;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e012      	b.n	80012f8 <UL_readcard+0x54>
	}
	if ((UL_getuid(result->uid) != PCD_OK) || (UL_getalldata(result->contents) !=  PCD_OK)) {
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ffa8 	bl	800122c <UL_getuid>
 80012dc:	4603      	mov	r3, r0
 80012de:	2bcc      	cmp	r3, #204	; 0xcc
 80012e0:	d107      	bne.n	80012f2 <UL_readcard+0x4e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ffbb 	bl	8001262 <UL_getalldata>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2bcc      	cmp	r3, #204	; 0xcc
 80012f0:	d001      	beq.n	80012f6 <UL_readcard+0x52>
		return PCD_COMM_ERR;
 80012f2:	23aa      	movs	r3, #170	; 0xaa
 80012f4:	e000      	b.n	80012f8 <UL_readcard+0x54>
	}
	return PCD_OK;
 80012f6:	23cc      	movs	r3, #204	; 0xcc
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	0801085c 	.word	0x0801085c

08001304 <UL_writecard>:
/**
 * Write a card object to a physical card
 * @param towrite - Card instance to write
 * @return PCD_OK if card was successfully written to and verified.
 * */
PCD_StatusTypeDef UL_writecard(Card* towrite) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	uint8_t* data_to_write = malloc(UL_DATASIZE * sizeof(uint8_t));
 800130c:	2030      	movs	r0, #48	; 0x30
 800130e:	f00e fdc1 	bl	800fe94 <malloc>
 8001312:	4603      	mov	r3, r0
 8001314:	60bb      	str	r3, [r7, #8]
	memcpy(data_to_write, towrite->contents + (UL_MEMSIZE - UL_DATASIZE), UL_DATASIZE);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	3310      	adds	r3, #16
 800131c:	2230      	movs	r2, #48	; 0x30
 800131e:	4619      	mov	r1, r3
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	f00e fdc7 	bl	800feb4 <memcpy>

	if (PICC_Select() != PCD_OK) {
 8001326:	f7ff fec1 	bl	80010ac <PICC_Select>
 800132a:	4603      	mov	r3, r0
 800132c:	2bcc      	cmp	r3, #204	; 0xcc
 800132e:	d004      	beq.n	800133a <UL_writecard+0x36>
		free(data_to_write);
 8001330:	68b8      	ldr	r0, [r7, #8]
 8001332:	f00e fdb7 	bl	800fea4 <free>
		return PCD_NO_PICC;
 8001336:	2301      	movs	r3, #1
 8001338:	e020      	b.n	800137c <UL_writecard+0x78>
	}

	for (int addr = UL_DATASTART; addr <= UL_DATAEND; addr++) {
 800133a:	2304      	movs	r3, #4
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	e016      	b.n	800136e <UL_writecard+0x6a>
		if (UL_WRITE(addr, data_to_write + (UL_PAGESIZE * (addr - UL_DATASTART))) != PCD_OK) {
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	b2da      	uxtb	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3b04      	subs	r3, #4
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4619      	mov	r1, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	440b      	add	r3, r1
 8001350:	4619      	mov	r1, r3
 8001352:	4610      	mov	r0, r2
 8001354:	f7ff ff2f 	bl	80011b6 <UL_WRITE>
 8001358:	4603      	mov	r3, r0
 800135a:	2bcc      	cmp	r3, #204	; 0xcc
 800135c:	d004      	beq.n	8001368 <UL_writecard+0x64>
			free(data_to_write);
 800135e:	68b8      	ldr	r0, [r7, #8]
 8001360:	f00e fda0 	bl	800fea4 <free>
			return PCD_COMM_ERR;
 8001364:	23aa      	movs	r3, #170	; 0xaa
 8001366:	e009      	b.n	800137c <UL_writecard+0x78>
	for (int addr = UL_DATASTART; addr <= UL_DATAEND; addr++) {
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3301      	adds	r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2b0f      	cmp	r3, #15
 8001372:	dde5      	ble.n	8001340 <UL_writecard+0x3c>
		}
	}
	free(data_to_write);
 8001374:	68b8      	ldr	r0, [r7, #8]
 8001376:	f00e fd95 	bl	800fea4 <free>
	return PCD_OK;
 800137a:	23cc      	movs	r3, #204	; 0xcc
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <uid_tostring>:
 *
 * @param uid - Uid
 * @param size - Size of uid
 * @return pointer to string of uid
 * */
char* uid_tostring(uint8_t* uid, uint8_t size) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	70fb      	strb	r3, [r7, #3]
	char* result = malloc((2 * size * sizeof(char)) + 1); //multiply by 2 since 1 byte is two hex digits
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	3301      	adds	r3, #1
 8001396:	4618      	mov	r0, r3
 8001398:	f00e fd7c 	bl	800fe94 <malloc>
 800139c:	4603      	mov	r3, r0
 800139e:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < size; i++) {
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e023      	b.n	80013ee <uid_tostring+0x6a>
		if (uid[i] <= 0x0F) { //Only one hex character
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b0f      	cmp	r3, #15
 80013b0:	d80d      	bhi.n	80013ce <uid_tostring+0x4a>
			sprintf(result + (2 * i), "0%X", uid[i]);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	461a      	mov	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1898      	adds	r0, r3, r2
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4912      	ldr	r1, [pc, #72]	; (8001410 <uid_tostring+0x8c>)
 80013c8:	f00e fe82 	bl	80100d0 <siprintf>
 80013cc:	e00c      	b.n	80013e8 <uid_tostring+0x64>
		} else {
			sprintf(result + (2 * i), "%X", uid[i]);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	461a      	mov	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	1898      	adds	r0, r3, r2
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	490c      	ldr	r1, [pc, #48]	; (8001414 <uid_tostring+0x90>)
 80013e4:	f00e fe74 	bl	80100d0 <siprintf>
	for (int i = 0; i < size; i++) {
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3301      	adds	r3, #1
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	dbd7      	blt.n	80013a6 <uid_tostring+0x22>
		}
	}
	result[2 * size] = '\0'; //Add null
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	461a      	mov	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	4413      	add	r3, r2
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
	return result;
 8001404:	68bb      	ldr	r3, [r7, #8]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	08010870 	.word	0x08010870
 8001414:	08010874 	.word	0x08010874

08001418 <UL_verify>:
/**
 * Verify that a phyiscal card's contents matches what was intended to be written
 * @param check - Card to check phyiscal card data against
 * @return PCD_OK if contents is correct
 * */
PCD_StatusTypeDef UL_verify(Card* check) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	Card* read = malloc(sizeof(Card));
 8001420:	201c      	movs	r0, #28
 8001422:	f00e fd37 	bl	800fe94 <malloc>
 8001426:	4603      	mov	r3, r0
 8001428:	60bb      	str	r3, [r7, #8]
	read->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 800142a:	2040      	movs	r0, #64	; 0x40
 800142c:	f00e fd32 	bl	800fe94 <malloc>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	615a      	str	r2, [r3, #20]
	read->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8001438:	2007      	movs	r0, #7
 800143a:	f00e fd2b 	bl	800fe94 <malloc>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	601a      	str	r2, [r3, #0]

	if (UL_readcard(read) != PCD_OK) {
 8001446:	68b8      	ldr	r0, [r7, #8]
 8001448:	f7ff ff2c 	bl	80012a4 <UL_readcard>
 800144c:	4603      	mov	r3, r0
 800144e:	2bcc      	cmp	r3, #204	; 0xcc
 8001450:	d001      	beq.n	8001456 <UL_verify+0x3e>
		return PCD_COMM_ERR;
 8001452:	23aa      	movs	r3, #170	; 0xaa
 8001454:	e031      	b.n	80014ba <UL_verify+0xa2>
	}

	for (int byte = 0; byte < UL_MEMSIZE; byte++) {
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	e01d      	b.n	8001498 <UL_verify+0x80>
		if (read->contents[byte] != check->contents[byte]) {
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	695a      	ldr	r2, [r3, #20]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6959      	ldr	r1, [r3, #20]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	440b      	add	r3, r1
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d00e      	beq.n	8001492 <UL_verify+0x7a>
			free(read->contents);
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	4618      	mov	r0, r3
 800147a:	f00e fd13 	bl	800fea4 <free>
			free(read->uid);
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f00e fd0e 	bl	800fea4 <free>
			free(read);
 8001488:	68b8      	ldr	r0, [r7, #8]
 800148a:	f00e fd0b 	bl	800fea4 <free>
			return PCD_VERIFY_ERR;
 800148e:	2303      	movs	r3, #3
 8001490:	e013      	b.n	80014ba <UL_verify+0xa2>
	for (int byte = 0; byte < UL_MEMSIZE; byte++) {
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3301      	adds	r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b3f      	cmp	r3, #63	; 0x3f
 800149c:	ddde      	ble.n	800145c <UL_verify+0x44>
		}
	}
	free(read->contents);
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f00e fcfe 	bl	800fea4 <free>
	free(read->uid);
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00e fcf9 	bl	800fea4 <free>
	free(read);
 80014b2:	68b8      	ldr	r0, [r7, #8]
 80014b4:	f00e fcf6 	bl	800fea4 <free>
	return PCD_OK;
 80014b8:	23cc      	movs	r3, #204	; 0xcc
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 80014c2:	b580      	push	{r7, lr}
 80014c4:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80014c8:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 80014ca:	463b      	mov	r3, r7
 80014cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f00e fcfc 	bl	800fed0 <memset>
	OLED_FLUSH(zeros);
 80014d8:	463b      	mov	r3, r7
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f87c 	bl	80015d8 <OLED_FLUSH>

}
 80014e0:	bf00      	nop
 80014e2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2110      	movs	r1, #16
 80014fe:	4815      	ldr	r0, [pc, #84]	; (8001554 <OLED_cmd+0x68>)
 8001500:	f003 f89c 	bl	800463c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2102      	movs	r1, #2
 8001508:	4813      	ldr	r0, [pc, #76]	; (8001558 <OLED_cmd+0x6c>)
 800150a:	f003 f897 	bl	800463c <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 800150e:	f107 010f 	add.w	r1, r7, #15
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
 8001516:	2201      	movs	r2, #1
 8001518:	4810      	ldr	r0, [pc, #64]	; (800155c <OLED_cmd+0x70>)
 800151a:	f006 f83a 	bl	8007592 <HAL_SPI_Transmit>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d009      	beq.n	8001538 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8001524:	2201      	movs	r2, #1
 8001526:	2110      	movs	r1, #16
 8001528:	480a      	ldr	r0, [pc, #40]	; (8001554 <OLED_cmd+0x68>)
 800152a:	f003 f887 	bl	800463c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800152e:	2001      	movs	r0, #1
 8001530:	f002 fde2 	bl	80040f8 <HAL_Delay>
		return(HAL_ERROR);
 8001534:	2301      	movs	r3, #1
 8001536:	e008      	b.n	800154a <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8001538:	2201      	movs	r2, #1
 800153a:	2110      	movs	r1, #16
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <OLED_cmd+0x68>)
 800153e:	f003 f87d 	bl	800463c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001542:	2001      	movs	r0, #1
 8001544:	f002 fdd8 	bl	80040f8 <HAL_Delay>
		return(HAL_OK);
 8001548:	2300      	movs	r3, #0
	}

}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40020000 	.word	0x40020000
 8001558:	40020400 	.word	0x40020400
 800155c:	20000770 	.word	0x20000770

08001560 <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	2110      	movs	r1, #16
 8001570:	4816      	ldr	r0, [pc, #88]	; (80015cc <OLED_data+0x6c>)
 8001572:	f003 f863 	bl	800463c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8001576:	2201      	movs	r2, #1
 8001578:	2102      	movs	r1, #2
 800157a:	4815      	ldr	r0, [pc, #84]	; (80015d0 <OLED_data+0x70>)
 800157c:	f003 f85e 	bl	800463c <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	b29a      	uxth	r2, r3
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4812      	ldr	r0, [pc, #72]	; (80015d4 <OLED_data+0x74>)
 800158c:	f006 f801 	bl	8007592 <HAL_SPI_Transmit>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00b      	beq.n	80015ae <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2102      	movs	r1, #2
 800159a:	480d      	ldr	r0, [pc, #52]	; (80015d0 <OLED_data+0x70>)
 800159c:	f003 f84e 	bl	800463c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2110      	movs	r1, #16
 80015a4:	4809      	ldr	r0, [pc, #36]	; (80015cc <OLED_data+0x6c>)
 80015a6:	f003 f849 	bl	800463c <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00a      	b.n	80015c4 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2102      	movs	r1, #2
 80015b2:	4807      	ldr	r0, [pc, #28]	; (80015d0 <OLED_data+0x70>)
 80015b4:	f003 f842 	bl	800463c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 80015b8:	2201      	movs	r2, #1
 80015ba:	2110      	movs	r1, #16
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <OLED_data+0x6c>)
 80015be:	f003 f83d 	bl	800463c <HAL_GPIO_WritePin>
		return(HAL_OK);
 80015c2:	2300      	movs	r3, #0
	}



}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40020000 	.word	0x40020000
 80015d0:	40020400 	.word	0x40020400
 80015d4:	20000770 	.word	0x20000770

080015d8 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	e023      	b.n	800162e <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	3b50      	subs	r3, #80	; 0x50
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff7c 	bl	80014ec <OLED_cmd>
		OLED_cmd(LOWER_COL);
 80015f4:	2002      	movs	r0, #2
 80015f6:	f7ff ff79 	bl	80014ec <OLED_cmd>
		OLED_cmd(UPPER_COL);
 80015fa:	2010      	movs	r0, #16
 80015fc:	f7ff ff76 	bl	80014ec <OLED_cmd>
		for(int i=0;i<128;i++){
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	e00d      	b.n	8001622 <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	01da      	lsls	r2, r3, #7
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	4413      	add	r3, r2
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	2101      	movs	r1, #1
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ffa2 	bl	8001560 <OLED_data>
		for(int i=0;i<128;i++){
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	3301      	adds	r3, #1
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	2b7f      	cmp	r3, #127	; 0x7f
 8001626:	ddee      	ble.n	8001606 <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3301      	adds	r3, #1
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b07      	cmp	r3, #7
 8001632:	ddd8      	ble.n	80015e6 <OLED_FLUSH+0xe>
		}


	}
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8001646:	2201      	movs	r2, #1
 8001648:	2110      	movs	r1, #16
 800164a:	482f      	ldr	r0, [pc, #188]	; (8001708 <OLED_INIT+0xc8>)
 800164c:	f002 fff6 	bl	800463c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8001650:	2201      	movs	r2, #1
 8001652:	2108      	movs	r1, #8
 8001654:	482c      	ldr	r0, [pc, #176]	; (8001708 <OLED_INIT+0xc8>)
 8001656:	f002 fff1 	bl	800463c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2102      	movs	r1, #2
 800165e:	482b      	ldr	r0, [pc, #172]	; (800170c <OLED_INIT+0xcc>)
 8001660:	f002 ffec 	bl	800463c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001664:	2064      	movs	r0, #100	; 0x64
 8001666:	f002 fd47 	bl	80040f8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2108      	movs	r1, #8
 800166e:	4826      	ldr	r0, [pc, #152]	; (8001708 <OLED_INIT+0xc8>)
 8001670:	f002 ffe4 	bl	800463c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001674:	2064      	movs	r0, #100	; 0x64
 8001676:	f002 fd3f 	bl	80040f8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 800167a:	2201      	movs	r2, #1
 800167c:	2108      	movs	r1, #8
 800167e:	4822      	ldr	r0, [pc, #136]	; (8001708 <OLED_INIT+0xc8>)
 8001680:	f002 ffdc 	bl	800463c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001684:	2064      	movs	r0, #100	; 0x64
 8001686:	f002 fd37 	bl	80040f8 <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 800168a:	4b21      	ldr	r3, [pc, #132]	; (8001710 <OLED_INIT+0xd0>)
 800168c:	463c      	mov	r4, r7
 800168e:	461d      	mov	r5, r3
 8001690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001694:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001698:	c403      	stmia	r4!, {r0, r1}
 800169a:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i = 0; i < 25; i++){
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
 80016a0:	e00c      	b.n	80016bc <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 80016a2:	463a      	mov	r2, r7
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	4413      	add	r3, r2
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff1e 	bl	80014ec <OLED_cmd>
		HAL_Delay(1);
 80016b0:	2001      	movs	r0, #1
 80016b2:	f002 fd21 	bl	80040f8 <HAL_Delay>
	for(int i = 0; i < 25; i++){
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3301      	adds	r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	2b18      	cmp	r3, #24
 80016c0:	ddef      	ble.n	80016a2 <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 80016c2:	20a7      	movs	r0, #167	; 0xa7
 80016c4:	f7ff ff12 	bl	80014ec <OLED_cmd>
	OLED_FLUSH(HVE);
 80016c8:	4812      	ldr	r0, [pc, #72]	; (8001714 <OLED_INIT+0xd4>)
 80016ca:	f7ff ff85 	bl	80015d8 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 80016ce:	20af      	movs	r0, #175	; 0xaf
 80016d0:	f7ff ff0c 	bl	80014ec <OLED_cmd>
	HAL_Delay(1000);
 80016d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016d8:	f002 fd0e 	bl	80040f8 <HAL_Delay>
	OLED_cmd(DISP_OFF);
 80016dc:	20ae      	movs	r0, #174	; 0xae
 80016de:	f7ff ff05 	bl	80014ec <OLED_cmd>
	HAL_Delay(10);
 80016e2:	200a      	movs	r0, #10
 80016e4:	f002 fd08 	bl	80040f8 <HAL_Delay>
	OLED_cmd(DISP_NORM);
 80016e8:	20a6      	movs	r0, #166	; 0xa6
 80016ea:	f7ff feff 	bl	80014ec <OLED_cmd>
	HAL_Delay(10);
 80016ee:	200a      	movs	r0, #10
 80016f0:	f002 fd02 	bl	80040f8 <HAL_Delay>
	OLED_cmd(DISP_ON);
 80016f4:	20af      	movs	r0, #175	; 0xaf
 80016f6:	f7ff fef9 	bl	80014ec <OLED_cmd>
	OLED_Clear();
 80016fa:	f7ff fee2 	bl	80014c2 <OLED_Clear>
	return HAL_OK;
 80016fe:	2300      	movs	r3, #0

}
 8001700:	4618      	mov	r0, r3
 8001702:	3720      	adds	r7, #32
 8001704:	46bd      	mov	sp, r7
 8001706:	bdb0      	pop	{r4, r5, r7, pc}
 8001708:	40020000 	.word	0x40020000
 800170c:	40020400 	.word	0x40020400
 8001710:	08010878 	.word	0x08010878
 8001714:	20000000 	.word	0x20000000

08001718 <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 8001718:	b480      	push	{r7}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[OLED_CHARSIZE];

	for(int i=0;i<=OLED_CHARSIZE;i++){
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e015      	b.n	8001756 <OLED_InvChar+0x3e>
			temp[i]=~(ASCII[(uint8_t)character-ASCII_START][i]);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	f1a3 0220 	sub.w	r2, r3, #32
 8001730:	4911      	ldr	r1, [pc, #68]	; (8001778 <OLED_InvChar+0x60>)
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	18ca      	adds	r2, r1, r3
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	4413      	add	r3, r2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	43db      	mvns	r3, r3
 8001742:	b2d9      	uxtb	r1, r3
 8001744:	f107 020c 	add.w	r2, r7, #12
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	4413      	add	r3, r2
 800174c:	460a      	mov	r2, r1
 800174e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<=OLED_CHARSIZE;i++){
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	3301      	adds	r3, #1
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	2b05      	cmp	r3, #5
 800175a:	dde6      	ble.n	800172a <OLED_InvChar+0x12>
	}
	memcpy(result,temp,OLED_CHARSIZE);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	6010      	str	r0, [r2, #0]
 8001768:	791b      	ldrb	r3, [r3, #4]
 800176a:	7113      	strb	r3, [r2, #4]
}
 800176c:	bf00      	nop
 800176e:	371c      	adds	r7, #28
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	08010c70 	.word	0x08010c70

0800177c <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	4604      	mov	r4, r0
 8001784:	4608      	mov	r0, r1
 8001786:	4611      	mov	r1, r2
 8001788:	461a      	mov	r2, r3
 800178a:	4623      	mov	r3, r4
 800178c:	71fb      	strb	r3, [r7, #7]
 800178e:	4603      	mov	r3, r0
 8001790:	71bb      	strb	r3, [r7, #6]
 8001792:	460b      	mov	r3, r1
 8001794:	717b      	strb	r3, [r7, #5]
 8001796:	4613      	mov	r3, r2
 8001798:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	3b50      	subs	r3, #80	; 0x50
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fea3 	bl	80014ec <OLED_cmd>
	OLED_cmd(col&0x0F);
 80017a6:	79bb      	ldrb	r3, [r7, #6]
 80017a8:	f003 030f 	and.w	r3, r3, #15
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fe9c 	bl	80014ec <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 80017b4:	79bb      	ldrb	r3, [r7, #6]
 80017b6:	091b      	lsrs	r3, r3, #4
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f043 0310 	orr.w	r3, r3, #16
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fe93 	bl	80014ec <OLED_cmd>
	uint8_t data[6];

	if(invert==NORMAL){
 80017c6:	793b      	ldrb	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d110      	bne.n	80017ee <OLED_drawChar+0x72>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 80017cc:	797b      	ldrb	r3, [r7, #5]
 80017ce:	f1a3 0220 	sub.w	r2, r3, #32
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <OLED_drawChar+0x9c>)
 80017da:	1899      	adds	r1, r3, r2
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	2205      	movs	r2, #5
 80017e2:	4618      	mov	r0, r3
 80017e4:	f00e fb66 	bl	800feb4 <memcpy>
		data[5]=0x00;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]
 80017ec:	e009      	b.n	8001802 <OLED_drawChar+0x86>
	}
	else{
		data[0]=0xFF;
 80017ee:	23ff      	movs	r3, #255	; 0xff
 80017f0:	723b      	strb	r3, [r7, #8]
		OLED_InvChar(character,data + 1);
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	3301      	adds	r3, #1
 80017f8:	797a      	ldrb	r2, [r7, #5]
 80017fa:	4619      	mov	r1, r3
 80017fc:	4610      	mov	r0, r2
 80017fe:	f7ff ff8b 	bl	8001718 <OLED_InvChar>

	}

	OLED_data(data, 6);
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	2106      	movs	r1, #6
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fea9 	bl	8001560 <OLED_data>

	}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	bd90      	pop	{r4, r7, pc}
 8001816:	bf00      	nop
 8001818:	08010c70 	.word	0x08010c70

0800181c <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	603a      	str	r2, [r7, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
 800182a:	460b      	mov	r3, r1
 800182c:	71bb      	strb	r3, [r7, #6]
 800182e:	4613      	mov	r3, r2
 8001830:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	e014      	b.n	8001862 <OLED_Printlin+0x46>
		OLED_drawChar(page, col+(i*6), string[i],invert);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	461a      	mov	r2, r3
 800183e:	0052      	lsls	r2, r2, #1
 8001840:	4413      	add	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	b2da      	uxtb	r2, r3
 8001846:	79bb      	ldrb	r3, [r7, #6]
 8001848:	4413      	add	r3, r2
 800184a:	b2d9      	uxtb	r1, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	4413      	add	r3, r2
 8001852:	781a      	ldrb	r2, [r3, #0]
 8001854:	797b      	ldrb	r3, [r7, #5]
 8001856:	79f8      	ldrb	r0, [r7, #7]
 8001858:	f7ff ff90 	bl	800177c <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3301      	adds	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	6838      	ldr	r0, [r7, #0]
 8001864:	f7fe fcbc 	bl	80001e0 <strlen>
 8001868:	4602      	mov	r2, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d8e3      	bhi.n	8001838 <OLED_Printlin+0x1c>
	}
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	6039      	str	r1, [r7, #0]
 8001884:	71fb      	strb	r3, [r7, #7]
 8001886:	4613      	mov	r3, r2
 8001888:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 800188a:	6838      	ldr	r0, [r7, #0]
 800188c:	f7fe fca8 	bl	80001e0 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	0fda      	lsrs	r2, r3, #31
 8001898:	4413      	add	r3, r2
 800189a:	105b      	asrs	r3, r3, #1
 800189c:	425b      	negs	r3, r3
 800189e:	461a      	mov	r2, r3
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	3340      	adds	r3, #64	; 0x40
 80018aa:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	b2d9      	uxtb	r1, r3
 80018b0:	79bb      	ldrb	r3, [r7, #6]
 80018b2:	79f8      	ldrb	r0, [r7, #7]
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	f7ff ffb1 	bl	800181c <OLED_Printlin>
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b094      	sub	sp, #80	; 0x50
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 80018ca:	2320      	movs	r3, #32
 80018cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 80018d8:	2300      	movs	r3, #0
 80018da:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 80018dc:	2300      	movs	r3, #0
 80018de:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 80018e0:	2300      	movs	r3, #0
 80018e2:	643b      	str	r3, [r7, #64]	; 0x40
 80018e4:	e018      	b.n	8001918 <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 80018e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ea:	4413      	add	r3, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b20      	cmp	r3, #32
 80018f6:	d10b      	bne.n	8001910 <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 80018f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018fa:	b2d9      	uxtb	r1, r3
 80018fc:	f107 020c 	add.w	r2, r7, #12
 8001900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001902:	4413      	add	r3, r2
 8001904:	460a      	mov	r2, r1
 8001906:	701a      	strb	r2, [r3, #0]
	                i++;
 8001908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800190a:	3301      	adds	r3, #1
 800190c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800190e:	e000      	b.n	8001912 <OLED_Print+0x50>
	            }
	            else{
	                continue;
 8001910:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 8001912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001914:	3301      	adds	r3, #1
 8001916:	643b      	str	r3, [r7, #64]	; 0x40
 8001918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800191a:	2b15      	cmp	r3, #21
 800191c:	dde3      	ble.n	80018e6 <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 800191e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	4413      	add	r3, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b20      	cmp	r3, #32
 8001928:	d102      	bne.n	8001930 <OLED_Print+0x6e>
	            last_ind++;
 800192a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800192c:	3301      	adds	r3, #1
 800192e:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 8001930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fc52 	bl	80001e0 <strlen>
 800193c:	4603      	mov	r3, r0
 800193e:	2b15      	cmp	r3, #21
 8001940:	d828      	bhi.n	8001994 <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 8001942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	4413      	add	r3, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fc49 	bl	80001e0 <strlen>
 800194e:	4603      	mov	r3, r0
 8001950:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	18d1      	adds	r1, r2, r3
 8001958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800195a:	f107 0320 	add.w	r3, r7, #32
 800195e:	4618      	mov	r0, r3
 8001960:	f00e fbde 	bl	8010120 <strncpy>
	            memset(thisline+linend,fill,21-linend);
 8001964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001966:	f107 0220 	add.w	r2, r7, #32
 800196a:	18d0      	adds	r0, r2, r3
 800196c:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001972:	f1c3 0315 	rsb	r3, r3, #21
 8001976:	461a      	mov	r2, r3
 8001978:	f00e faaa 	bl	800fed0 <memset>
	            thisline[21]=' ';
 800197c:	2320      	movs	r3, #32
 800197e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 8001982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001984:	b2d8      	uxtb	r0, r3
 8001986:	f107 0220 	add.w	r2, r7, #32
 800198a:	2300      	movs	r3, #0
 800198c:	2102      	movs	r1, #2
 800198e:	f7ff ff45 	bl	800181c <OLED_Printlin>




	    }
}
 8001992:	e05e      	b.n	8001a52 <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 8001994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001996:	3314      	adds	r3, #20
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	4413      	add	r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b20      	cmp	r3, #32
 80019a0:	d03a      	beq.n	8001a18 <OLED_Print+0x156>
 80019a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019a4:	3315      	adds	r3, #21
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b20      	cmp	r3, #32
 80019ae:	d033      	beq.n	8001a18 <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 80019b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	18d1      	adds	r1, r2, r3
 80019b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019b8:	3b01      	subs	r3, #1
 80019ba:	3350      	adds	r3, #80	; 0x50
 80019bc:	443b      	add	r3, r7
 80019be:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80019c2:	461a      	mov	r2, r3
 80019c4:	f107 0320 	add.w	r3, r7, #32
 80019c8:	4618      	mov	r0, r3
 80019ca:	f00e fba9 	bl	8010120 <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 80019ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019d0:	3b01      	subs	r3, #1
 80019d2:	3350      	adds	r3, #80	; 0x50
 80019d4:	443b      	add	r3, r7
 80019d6:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80019da:	461a      	mov	r2, r3
 80019dc:	f107 0320 	add.w	r3, r7, #32
 80019e0:	1898      	adds	r0, r3, r2
 80019e2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80019e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019e8:	3b01      	subs	r3, #1
 80019ea:	3350      	adds	r3, #80	; 0x50
 80019ec:	443b      	add	r3, r7
 80019ee:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80019f2:	f1c3 0315 	rsb	r3, r3, #21
 80019f6:	461a      	mov	r2, r3
 80019f8:	f00e fa6a 	bl	800fed0 <memset>
	            thisline[21]=' ';
 80019fc:	2320      	movs	r3, #32
 80019fe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 8001a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a04:	3b01      	subs	r3, #1
 8001a06:	3350      	adds	r3, #80	; 0x50
 8001a08:	443b      	add	r3, r7
 8001a0a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a12:	4413      	add	r3, r2
 8001a14:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a16:	e00e      	b.n	8001a36 <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 8001a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	18d1      	adds	r1, r2, r3
 8001a1e:	f107 0320 	add.w	r3, r7, #32
 8001a22:	2215      	movs	r2, #21
 8001a24:	4618      	mov	r0, r3
 8001a26:	f00e fb7b 	bl	8010120 <strncpy>
	            thisline[21]=' ';
 8001a2a:	2320      	movs	r3, #32
 8001a2c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 8001a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a32:	3315      	adds	r3, #21
 8001a34:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 8001a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a3c:	b2d8      	uxtb	r0, r3
 8001a3e:	f107 0220 	add.w	r2, r7, #32
 8001a42:	2300      	movs	r3, #0
 8001a44:	2102      	movs	r1, #2
 8001a46:	f7ff fee9 	bl	800181c <OLED_Printlin>
	        line++;
 8001a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001a50:	e746      	b.n	80018e0 <OLED_Print+0x1e>
}
 8001a52:	3750      	adds	r7, #80	; 0x50
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 8001a64:	f7ff fd2d 	bl	80014c2 <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	4619      	mov	r1, r3
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff ff01 	bl	800187a <OLED_PrintCent>

	for(int i = 0; i < screen->datsize - 1; i++) {
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e01a      	b.n	8001ab4 <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	3301      	adds	r3, #1
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	7818      	ldrb	r0, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	3301      	adds	r3, #1
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	7859      	ldrb	r1, [r3, #1]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	f7ff feb7 	bl	800181c <OLED_Printlin>
	for(int i = 0; i < screen->datsize - 1; i++) {
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dbde      	blt.n	8001a7e <OLED_SCREEN+0x26>
	}
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	7afb      	ldrb	r3, [r7, #11]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fb7b 	bl	80001e0 <strlen>
 8001aea:	4603      	mov	r3, r0
 8001aec:	617b      	str	r3, [r7, #20]
	int start_col=screen->dataloc[dataindx][1]+((len)*6);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	7afb      	ldrb	r3, [r7, #11]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	785b      	ldrb	r3, [r3, #1]
 8001afa:	4619      	mov	r1, r3
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	440b      	add	r3, r1
 8001b08:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	7818      	ldrb	r0, [r3, #0]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	b2d9      	uxtb	r1, r3
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	f7ff fe7d 	bl	800181c <OLED_Printlin>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	460b      	mov	r3, r1
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 8001b3a:	4a35      	ldr	r2, [pc, #212]	; (8001c10 <OLED_SELECT+0xe4>)
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	4611      	mov	r1, r2
 8001b44:	8019      	strh	r1, [r3, #0]
 8001b46:	3302      	adds	r3, #2
 8001b48:	0c12      	lsrs	r2, r2, #16
 8001b4a:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol,index;
	char* rest;

	if(selopt == 0){
 8001b4c:	7afb      	ldrb	r3, [r7, #11]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d105      	bne.n	8001b5e <OLED_SELECT+0x32>
	    index = screen->selsize - 1;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	77fb      	strb	r3, [r7, #31]
 8001b5c:	e002      	b.n	8001b64 <OLED_SELECT+0x38>
	} else {
		index = selopt - 1;
 8001b5e:	7afb      	ldrb	r3, [r7, #11]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	77fb      	strb	r3, [r7, #31]
	}

	prevpage=screen->seldata[index][0];
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	7ffb      	ldrb	r3, [r7, #31]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	75fb      	strb	r3, [r7, #23]
	prevcol=screen->seldata[index][1];
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	7ffb      	ldrb	r3, [r7, #31]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	785b      	ldrb	r3, [r3, #1]
 8001b7e:	75bb      	strb	r3, [r7, #22]
	thispage=screen->seldata[selopt][0];
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	7afb      	ldrb	r3, [r7, #11]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	757b      	strb	r3, [r7, #21]
	thiscol=screen->seldata[selopt][1];
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	691a      	ldr	r2, [r3, #16]
 8001b92:	7afb      	ldrb	r3, [r7, #11]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	785b      	ldrb	r3, [r3, #1]
 8001b9a:	753b      	strb	r3, [r7, #20]

	if(restore == OLED_RESTORE){
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d122      	bne.n	8001be8 <OLED_SELECT+0xbc>
	    if (selopt == 0) {
 8001ba2:	7afb      	ldrb	r3, [r7, #11]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d110      	bne.n	8001bca <OLED_SELECT+0x9e>
	    	rest=(char*)screen->data[find_restore_string(screen, screen->selsize - 1)]; //Here we may be wrapping around so we must restore the last select option
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	689c      	ldr	r4, [r3, #8]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f911 	bl	8001de0 <find_restore_string>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4423      	add	r3, r4
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	61bb      	str	r3, [r7, #24]
 8001bc8:	e010      	b.n	8001bec <OLED_SELECT+0xc0>
	    } else {
	    	rest=(char*)screen->data[find_restore_string(screen, selopt - 1)];
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	689c      	ldr	r4, [r3, #8]
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 f902 	bl	8001de0 <find_restore_string>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4423      	add	r3, r4
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	e001      	b.n	8001bec <OLED_SELECT+0xc0>
	    }
	} else {
	    rest = "  ";
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <OLED_SELECT+0xe8>)
 8001bea:	61bb      	str	r3, [r7, #24]
	}

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 8001bec:	7db9      	ldrb	r1, [r7, #22]
 8001bee:	7df8      	ldrb	r0, [r7, #23]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	f7ff fe12 	bl	800181c <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 8001bf8:	f107 0210 	add.w	r2, r7, #16
 8001bfc:	7d39      	ldrb	r1, [r7, #20]
 8001bfe:	7d78      	ldrb	r0, [r7, #21]
 8001c00:	2300      	movs	r3, #0
 8001c02:	f7ff fe0b 	bl	800181c <OLED_Printlin>

}
 8001c06:	bf00      	nop
 8001c08:	3724      	adds	r7, #36	; 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd90      	pop	{r4, r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	08010898 	.word	0x08010898
 8001c14:	08010894 	.word	0x08010894

08001c18 <OLED_select_inv>:
/**
 * Select option by inverting the character which is selected
 * @param screen - Screen currently displayed
 * @param selopt - Selected select option
 * */
void OLED_select_inv(const Screen* screen, uint8_t selopt) {
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	70fb      	strb	r3, [r7, #3]
	uint8_t index, prevpage, prevcol, thispage, thiscol;
	char* restore;

	if(selopt == 0){
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d105      	bne.n	8001c36 <OLED_select_inv+0x1e>
		index = screen->selsize - 1;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	75fb      	strb	r3, [r7, #23]
 8001c34:	e002      	b.n	8001c3c <OLED_select_inv+0x24>
	} else {
		index = selopt - 1;
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	75fb      	strb	r3, [r7, #23]
	}

	prevpage=screen->seldata[index][0];
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	73fb      	strb	r3, [r7, #15]
	prevcol=screen->seldata[index][1];
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	785b      	ldrb	r3, [r3, #1]
 8001c56:	73bb      	strb	r3, [r7, #14]
	thispage=screen->seldata[selopt][0];
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	737b      	strb	r3, [r7, #13]
	thiscol=screen->seldata[selopt][1];
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691a      	ldr	r2, [r3, #16]
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	785b      	ldrb	r3, [r3, #1]
 8001c72:	733b      	strb	r3, [r7, #12]

	if (selopt == 0) {
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d110      	bne.n	8001c9c <OLED_select_inv+0x84>
		restore=(char*)screen->data[find_restore_string(screen, screen->selsize - 1)]; //Here we may be wrapping around so we must restore the last select option
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689c      	ldr	r4, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	4619      	mov	r1, r3
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8a8 	bl	8001de0 <find_restore_string>
 8001c90:	4603      	mov	r3, r0
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4423      	add	r3, r4
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	e00d      	b.n	8001cb8 <OLED_select_inv+0xa0>
	} else {
		restore=(char*)screen->data[find_restore_string(screen, selopt - 1)];
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689c      	ldr	r4, [r3, #8]
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f899 	bl	8001de0 <find_restore_string>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4423      	add	r3, r4
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	613b      	str	r3, [r7, #16]
	}

	OLED_Printlin(prevpage, prevcol, restore, NORMAL);
 8001cb8:	7bb9      	ldrb	r1, [r7, #14]
 8001cba:	7bf8      	ldrb	r0, [r7, #15]
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	f7ff fdac 	bl	800181c <OLED_Printlin>
	OLED_Printlin(thispage, thiscol, screen->data[selopt + 1], INVERT);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	7b39      	ldrb	r1, [r7, #12]
 8001cd4:	7b78      	ldrb	r0, [r7, #13]
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f7ff fda0 	bl	800181c <OLED_Printlin>
}
 8001cdc:	bf00      	nop
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd90      	pop	{r4, r7, pc}

08001ce4 <OLED_display_files>:
 * Display filenames to OLED display (used in show files task)
 *
 * @param page - Page of files to display (page count is increased as user scrolls through files)
 * @return HAL_OK if files were successfully displayed
 * */
HAL_StatusTypeDef OLED_display_files(const Screen* screen, uint8_t page) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	70fb      	strb	r3, [r7, #3]
	if (get_number_files() == 0) {
 8001cf0:	f001 fe24 	bl	800393c <get_number_files>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <OLED_display_files+0x1a>
		return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e04c      	b.n	8001d98 <OLED_display_files+0xb4>
	}
	uint16_t file_count = get_number_files();
 8001cfe:	f001 fe1d 	bl	800393c <get_number_files>
 8001d02:	4603      	mov	r3, r0
 8001d04:	847b      	strh	r3, [r7, #34]	; 0x22

	char** file_names = malloc(file_count * sizeof(char*));
 8001d06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f00e f8c2 	bl	800fe94 <malloc>
 8001d10:	4603      	mov	r3, r0
 8001d12:	61fb      	str	r3, [r7, #28]
	char used[5];
	char free[5];

	get_free_size_str(free);
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f001 ff19 	bl	8003b50 <get_free_size_str>
	get_used_size_str(used);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4618      	mov	r0, r3
 8001d24:	f001 ff02 	bl	8003b2c <get_used_size_str>

	OLED_SCRNREF(&SCRN_ShowFiles, 4, free);
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	2104      	movs	r1, #4
 8001d30:	481b      	ldr	r0, [pc, #108]	; (8001da0 <OLED_display_files+0xbc>)
 8001d32:	f7ff feca 	bl	8001aca <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_ShowFiles, 5, used);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2105      	movs	r1, #5
 8001d3e:	4818      	ldr	r0, [pc, #96]	; (8001da0 <OLED_display_files+0xbc>)
 8001d40:	f7ff fec3 	bl	8001aca <OLED_SCRNREF>

	if (get_all_files(file_names) != RFS_OK) {
 8001d44:	69f8      	ldr	r0, [r7, #28]
 8001d46:	f001 fe1a 	bl	800397e <get_all_files>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <OLED_display_files+0x7a>
		free_filenames(file_names, file_count);
 8001d50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d52:	4619      	mov	r1, r3
 8001d54:	69f8      	ldr	r0, [r7, #28]
 8001d56:	f000 f825 	bl	8001da4 <free_filenames>
		return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e01c      	b.n	8001d98 <OLED_display_files+0xb4>
	}

	for (int i = 0; i < file_count; i++) {
 8001d5e:	2300      	movs	r3, #0
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
 8001d62:	e00f      	b.n	8001d84 <OLED_display_files+0xa0>
		OLED_SCRNREF(&SCRN_ShowFiles, i + 1, file_names[i]);
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	b2d9      	uxtb	r1, r3
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	4413      	add	r3, r2
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	4809      	ldr	r0, [pc, #36]	; (8001da0 <OLED_display_files+0xbc>)
 8001d7a:	f7ff fea6 	bl	8001aca <OLED_SCRNREF>
	for (int i = 0; i < file_count; i++) {
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	3301      	adds	r3, #1
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
 8001d84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	dbeb      	blt.n	8001d64 <OLED_display_files+0x80>
	}

	free_filenames(file_names, file_count);
 8001d8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d8e:	4619      	mov	r1, r3
 8001d90:	69f8      	ldr	r0, [r7, #28]
 8001d92:	f000 f807 	bl	8001da4 <free_filenames>
	return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3728      	adds	r7, #40	; 0x28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	08011130 	.word	0x08011130

08001da4 <free_filenames>:
/**
 * Free list of file names
 * @param file_names - File names
 * @param size -  Number of file names
 * */
void free_filenames(char** file_names, int size) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++) {
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	e00a      	b.n	8001dca <free_filenames+0x26>
		free(file_names[i]);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	4413      	add	r3, r2
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f00e f870 	bl	800fea4 <free>
	for (int i = 0; i < size; i++) {
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	dbf0      	blt.n	8001db4 <free_filenames+0x10>
	}
	free(file_names);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f00e f866 	bl	800fea4 <free>
}
 8001dd8:	bf00      	nop
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <find_restore_string>:
 *
 * @param screen - Screen to update
 * @param prev_sel_opt - Previous selected option
 * @return index of string in screen->data to be used as replacement
 * */
uint8_t find_restore_string(const Screen* screen, uint8_t prev_sel_opt) {
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	70fb      	strb	r3, [r7, #3]
	uint8_t index_of_string;

	for (int i = 1; i < screen->datsize; i++) {
 8001dec:	2301      	movs	r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	e021      	b.n	8001e36 <find_restore_string+0x56>
		if((screen->dataloc[i][0] == screen->seldata[prev_sel_opt][0]) && (screen->dataloc[i][1] == screen->seldata[prev_sel_opt][1])) {
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	781a      	ldrb	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6919      	ldr	r1, [r3, #16]
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	440b      	add	r3, r1
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d110      	bne.n	8001e30 <find_restore_string+0x50>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	785a      	ldrb	r2, [r3, #1]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6919      	ldr	r1, [r3, #16]
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	440b      	add	r3, r1
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d102      	bne.n	8001e30 <find_restore_string+0x50>
			index_of_string = i;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	73fb      	strb	r3, [r7, #15]
			break;
 8001e2e:	e007      	b.n	8001e40 <find_restore_string+0x60>
	for (int i = 1; i < screen->datsize; i++) {
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	3301      	adds	r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	dbd8      	blt.n	8001df2 <find_restore_string+0x12>
		}
	}

	return index_of_string;
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <oled_show_file>:

/**
 * Show the file data of given file entry number
 * @param entry - Entry to show data of
 * */
void oled_show_file(uint16_t entry) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f001 fde4 	bl	8003a2a <entry_present>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d12d      	bne.n	8001ec4 <oled_show_file+0x74>
		return; //No card entry present
	}

	work = read_card_entry(entry);
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f001 fc0d 	bl	800368a <read_card_entry>
 8001e70:	60f8      	str	r0, [r7, #12]

	OLED_SCREEN(&SCRN_FileData, NORMAL);
 8001e72:	2100      	movs	r1, #0
 8001e74:	4815      	ldr	r0, [pc, #84]	; (8001ecc <oled_show_file+0x7c>)
 8001e76:	f7ff fdef 	bl	8001a58 <OLED_SCREEN>
	OLED_SCRNREF(&SCRN_FileData, 0, work->name);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2100      	movs	r1, #0
 8001e82:	4812      	ldr	r0, [pc, #72]	; (8001ecc <oled_show_file+0x7c>)
 8001e84:	f7ff fe21 	bl	8001aca <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_TYPE_LOC, work->type);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2101      	movs	r1, #1
 8001e90:	480e      	ldr	r0, [pc, #56]	; (8001ecc <oled_show_file+0x7c>)
 8001e92:	f7ff fe1a 	bl	8001aca <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_UID_LOC, uid_tostring(work->uid, work->uidsize));
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	791b      	ldrb	r3, [r3, #4]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	f7ff fa6f 	bl	8001384 <uid_tostring>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2102      	movs	r1, #2
 8001eac:	4807      	ldr	r0, [pc, #28]	; (8001ecc <oled_show_file+0x7c>)
 8001eae:	f7ff fe0c 	bl	8001aca <OLED_SCRNREF>
	OLED_SELECT(&SCRN_FileData, 0, OLED_NORESTORE);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4805      	ldr	r0, [pc, #20]	; (8001ecc <oled_show_file+0x7c>)
 8001eb8:	f7ff fe38 	bl	8001b2c <OLED_SELECT>

	free(work);
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f00d fff1 	bl	800fea4 <free>
 8001ec2:	e000      	b.n	8001ec6 <oled_show_file+0x76>
		return; //No card entry present
 8001ec4:	bf00      	nop
}
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	08011144 	.word	0x08011144

08001ed0 <oled_move_selection>:
 * Move selection arrow for given screen
 * @param screen - Screen to be modified
 * @param arrow_index - Pointer to variable which keeps track of arrow index
 * @param restore - Option to restore previous text or not
 * */
void oled_move_selection(const Screen* screen, uint8_t* arrow_index, uint8_t restore) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	4613      	mov	r3, r2
 8001edc:	71fb      	strb	r3, [r7, #7]
	uint8_t max_index = screen->selsize;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	75fb      	strb	r3, [r7, #23]

	if (*arrow_index >= max_index - 1) {
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	7dfb      	ldrb	r3, [r7, #23]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	db03      	blt.n	8001efa <oled_move_selection+0x2a>
		*arrow_index = 0;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
 8001ef8:	e005      	b.n	8001f06 <oled_move_selection+0x36>
	} else {
		*arrow_index += 1;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	3301      	adds	r3, #1
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	701a      	strb	r2, [r3, #0]

	}
	OLED_SELECT(screen, *arrow_index, restore);
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	79fa      	ldrb	r2, [r7, #7]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f7ff fe0c 	bl	8001b2c <OLED_SELECT>
}
 8001f14:	bf00      	nop
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <oled_move_selection_inv>:
/**
 * Select by inverting the text on the screen
 * @param screen - Screen to modify
 * @param select_index - Pointer to variable that keeps track of selection index
 * */
void oled_move_selection_inv(const Screen* screen, uint8_t* select_index) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
	uint8_t max_index = screen->selsize;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	73fb      	strb	r3, [r7, #15]

	if (*select_index >= max_index - 1) {
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	429a      	cmp	r2, r3
 8001f38:	db03      	blt.n	8001f42 <oled_move_selection_inv+0x26>
		*select_index = 0;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	e005      	b.n	8001f4e <oled_move_selection_inv+0x32>
	} else {
		*select_index += 1;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	701a      	strb	r2, [r3, #0]
	}

	OLED_select_inv(screen, *select_index);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	4619      	mov	r1, r3
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff fe5f 	bl	8001c18 <OLED_select_inv>
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <oled_keyboard_insertChar>:
 * Update string displayed displayed in keyboard task as it's being written
 * @param char_index - Index of selected character on keyboard
 * @param curr_name - Pointer to pointer that stores the current name which has been created by the user.
 * 					  This name will grow as the user continues to write characters
 * */
void oled_keyboard_insertChar (uint8_t char_index, char** curr_name) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	71fb      	strb	r3, [r7, #7]
	uint8_t length;

	if (*curr_name == NULL) {
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d102      	bne.n	8001f7e <oled_keyboard_insertChar+0x1a>
		length = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	73fb      	strb	r3, [r7, #15]
 8001f7c:	e006      	b.n	8001f8c <oled_keyboard_insertChar+0x28>
	} else {
		length = strlen(*curr_name);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe f92c 	bl	80001e0 <strlen>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	73fb      	strb	r3, [r7, #15]
	}

	*curr_name = realloc(*curr_name, (length + 2) * sizeof(char)); //Increment by 2 since we want to store a new character as well as null
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	3302      	adds	r3, #2
 8001f94:	4619      	mov	r1, r3
 8001f96:	4610      	mov	r0, r2
 8001f98:	f00e f882 	bl	80100a0 <realloc>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	601a      	str	r2, [r3, #0]
	(*curr_name)[length] = KEYBOARD_LUT[char_index];
 8001fa2:	79fa      	ldrb	r2, [r7, #7]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	6819      	ldr	r1, [r3, #0]
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	440b      	add	r3, r1
 8001fac:	490a      	ldr	r1, [pc, #40]	; (8001fd8 <oled_keyboard_insertChar+0x74>)
 8001fae:	5c8a      	ldrb	r2, [r1, r2]
 8001fb0:	701a      	strb	r2, [r3, #0]
	(*curr_name)[length + 1] = '\0';
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
	OLED_SCRNREF(&SCRN_Keyboard, 0, *curr_name);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4804      	ldr	r0, [pc, #16]	; (8001fdc <oled_keyboard_insertChar+0x78>)
 8001fca:	f7ff fd7e 	bl	8001aca <OLED_SCRNREF>
}
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	08010c54 	.word	0x08010c54
 8001fdc:	0801116c 	.word	0x0801116c

08001fe0 <oled_keyboard_removeChar>:

/**
 * Remove character from user inputted string
 * @param curr_name - Current state of user string
 * */
void oled_keyboard_removeChar (char** curr_name) {
 8001fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fe4:	b087      	sub	sp, #28
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	466b      	mov	r3, sp
 8001fec:	461e      	mov	r6, r3
	uint8_t length;

	if (*curr_name == NULL) {
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <oled_keyboard_removeChar+0x1a>
 8001ff6:	46b5      	mov	sp, r6
 8001ff8:	e055      	b.n	80020a6 <oled_keyboard_removeChar+0xc6>
		return; //No name, don't do anything
	}

	length = strlen(*curr_name);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe f8ee 	bl	80001e0 <strlen>
 8002004:	4603      	mov	r3, r0
 8002006:	75fb      	strb	r3, [r7, #23]

	*curr_name = realloc(*curr_name, length * sizeof(char));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	7dfa      	ldrb	r2, [r7, #23]
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f00e f845 	bl	80100a0 <realloc>
 8002016:	4602      	mov	r2, r0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	601a      	str	r2, [r3, #0]
	(*curr_name)[length - 1] = '\0';
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	7dfb      	ldrb	r3, [r7, #23]
 8002022:	3b01      	subs	r3, #1
 8002024:	4413      	add	r3, r2
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]

	char clear[length + 1];
 800202a:	7dfb      	ldrb	r3, [r7, #23]
 800202c:	1c59      	adds	r1, r3, #1
 800202e:	1e4b      	subs	r3, r1, #1
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	460a      	mov	r2, r1
 8002034:	2300      	movs	r3, #0
 8002036:	4690      	mov	r8, r2
 8002038:	4699      	mov	r9, r3
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002046:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800204a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800204e:	460a      	mov	r2, r1
 8002050:	2300      	movs	r3, #0
 8002052:	4614      	mov	r4, r2
 8002054:	461d      	mov	r5, r3
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	00eb      	lsls	r3, r5, #3
 8002060:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002064:	00e2      	lsls	r2, r4, #3
 8002066:	460b      	mov	r3, r1
 8002068:	3307      	adds	r3, #7
 800206a:	08db      	lsrs	r3, r3, #3
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	ebad 0d03 	sub.w	sp, sp, r3
 8002072:	466b      	mov	r3, sp
 8002074:	3300      	adds	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
	memset(clear, ' ', length);
 8002078:	7dfb      	ldrb	r3, [r7, #23]
 800207a:	461a      	mov	r2, r3
 800207c:	2120      	movs	r1, #32
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f00d ff26 	bl	800fed0 <memset>
	clear[length] = '\0';
 8002084:	7dfb      	ldrb	r3, [r7, #23]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	2100      	movs	r1, #0
 800208a:	54d1      	strb	r1, [r2, r3]

	OLED_SCRNREF(&SCRN_Keyboard, 0 ,clear);
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	2100      	movs	r1, #0
 8002090:	4807      	ldr	r0, [pc, #28]	; (80020b0 <oled_keyboard_removeChar+0xd0>)
 8002092:	f7ff fd1a 	bl	8001aca <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_Keyboard, 0, *curr_name);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	2100      	movs	r1, #0
 800209e:	4804      	ldr	r0, [pc, #16]	; (80020b0 <oled_keyboard_removeChar+0xd0>)
 80020a0:	f7ff fd13 	bl	8001aca <OLED_SCRNREF>
 80020a4:	46b5      	mov	sp, r6
}
 80020a6:	371c      	adds	r7, #28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020ae:	bf00      	nop
 80020b0:	0801116c 	.word	0x0801116c

080020b4 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT, addr, DUMMY};
 80020be:	230f      	movs	r3, #15
 80020c0:	733b      	strb	r3, [r7, #12]
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	737b      	strb	r3, [r7, #13]
 80020c6:	2300      	movs	r3, #0
 80020c8:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020d0:	480d      	ldr	r0, [pc, #52]	; (8002108 <STAT_READ+0x54>)
 80020d2:	f002 fab3 	bl	800463c <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 80020d6:	bf00      	nop
 80020d8:	f107 0208 	add.w	r2, r7, #8
 80020dc:	f107 010c 	add.w	r1, r7, #12
 80020e0:	2364      	movs	r3, #100	; 0x64
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	2303      	movs	r3, #3
 80020e6:	4809      	ldr	r0, [pc, #36]	; (800210c <STAT_READ+0x58>)
 80020e8:	f005 fb8f 	bl	800780a <HAL_SPI_TransmitReceive>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f2      	bne.n	80020d8 <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80020f2:	2201      	movs	r2, #1
 80020f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020f8:	4803      	ldr	r0, [pc, #12]	; (8002108 <STAT_READ+0x54>)
 80020fa:	f002 fa9f 	bl	800463c <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 80020fe:	7abb      	ldrb	r3, [r7, #10]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40020000 	.word	0x40020000
 800210c:	200007c8 	.word	0x200007c8

08002110 <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	460a      	mov	r2, r1
 800211a:	71fb      	strb	r3, [r7, #7]
 800211c:	4613      	mov	r3, r2
 800211e:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 8002120:	231f      	movs	r3, #31
 8002122:	733b      	strb	r3, [r7, #12]
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	737b      	strb	r3, [r7, #13]
 8002128:	79bb      	ldrb	r3, [r7, #6]
 800212a:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800212c:	2200      	movs	r2, #0
 800212e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002132:	480a      	ldr	r0, [pc, #40]	; (800215c <STAT_WRITE+0x4c>)
 8002134:	f002 fa82 	bl	800463c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 8002138:	f107 010c 	add.w	r1, r7, #12
 800213c:	2364      	movs	r3, #100	; 0x64
 800213e:	2203      	movs	r2, #3
 8002140:	4807      	ldr	r0, [pc, #28]	; (8002160 <STAT_WRITE+0x50>)
 8002142:	f005 fa26 	bl	8007592 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002146:	2201      	movs	r2, #1
 8002148:	f44f 7180 	mov.w	r1, #256	; 0x100
 800214c:	4803      	ldr	r0, [pc, #12]	; (800215c <STAT_WRITE+0x4c>)
 800214e:	f002 fa75 	bl	800463c <HAL_GPIO_WritePin>

	return(HAL_OK);
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40020000 	.word	0x40020000
 8002160:	200007c8 	.word	0x200007c8

08002164 <WRIT_EN>:
 * 		Bad block manage
 *
 * The Write Enable bit in status register 3 will be reset to 0 after any of these instructions
 * */

void WRIT_EN(void){
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
	uint8_t write_en=W_EN;
 800216a:	2306      	movs	r3, #6
 800216c:	71fb      	strb	r3, [r7, #7]
	WRITE_DIS();
 800216e:	f000 f825 	bl	80021bc <WRITE_DIS>

	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 8002172:	e011      	b.n	8002198 <WRIT_EN+0x34>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002174:	2200      	movs	r2, #0
 8002176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800217a:	480e      	ldr	r0, [pc, #56]	; (80021b4 <WRIT_EN+0x50>)
 800217c:	f002 fa5e 	bl	800463c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &write_en, 1, 100);
 8002180:	1df9      	adds	r1, r7, #7
 8002182:	2364      	movs	r3, #100	; 0x64
 8002184:	2201      	movs	r2, #1
 8002186:	480c      	ldr	r0, [pc, #48]	; (80021b8 <WRIT_EN+0x54>)
 8002188:	f005 fa03 	bl	8007592 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800218c:	2201      	movs	r2, #1
 800218e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002192:	4808      	ldr	r0, [pc, #32]	; (80021b4 <WRIT_EN+0x50>)
 8002194:	f002 fa52 	bl	800463c <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 8002198:	20c0      	movs	r0, #192	; 0xc0
 800219a:	f7ff ff8b 	bl	80020b4 <STAT_READ>
 800219e:	4603      	mov	r3, r0
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d1e5      	bne.n	8002174 <WRIT_EN+0x10>
	}


}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40020000 	.word	0x40020000
 80021b8:	200007c8 	.word	0x200007c8

080021bc <WRITE_DIS>:

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 80021c2:	2304      	movs	r3, #4
 80021c4:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 80021c6:	e011      	b.n	80021ec <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80021c8:	2200      	movs	r2, #0
 80021ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ce:	480e      	ldr	r0, [pc, #56]	; (8002208 <WRITE_DIS+0x4c>)
 80021d0:	f002 fa34 	bl	800463c <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 80021d4:	1df9      	adds	r1, r7, #7
 80021d6:	2364      	movs	r3, #100	; 0x64
 80021d8:	2201      	movs	r2, #1
 80021da:	480c      	ldr	r0, [pc, #48]	; (800220c <WRITE_DIS+0x50>)
 80021dc:	f005 f9d9 	bl	8007592 <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80021e0:	2201      	movs	r2, #1
 80021e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021e6:	4808      	ldr	r0, [pc, #32]	; (8002208 <WRITE_DIS+0x4c>)
 80021e8:	f002 fa28 	bl	800463c <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 80021ec:	20c0      	movs	r0, #192	; 0xc0
 80021ee:	f7ff ff61 	bl	80020b4 <STAT_READ>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d0e5      	beq.n	80021c8 <WRITE_DIS+0xc>
		}
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40020000 	.word	0x40020000
 800220c:	200007c8 	.word	0x200007c8

08002210 <block_erase>:
/**
 * Erase a 128kB (64 pages) block to 0xFF
 *
 * @param block_num - Block number to erase
 * */
void block_erase(uint16_t block_num) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	80fb      	strh	r3, [r7, #6]
	uint16_t page_addr = block_num * BLOCK_PAGECOUNT;
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	019b      	lsls	r3, r3, #6
 800221e:	81fb      	strh	r3, [r7, #14]
	uint8_t transaction [] = {BLOCK_ERS, DUMMY, page_addr>>8, page_addr};
 8002220:	23d8      	movs	r3, #216	; 0xd8
 8002222:	723b      	strb	r3, [r7, #8]
 8002224:	2300      	movs	r3, #0
 8002226:	727b      	strb	r3, [r7, #9]
 8002228:	89fb      	ldrh	r3, [r7, #14]
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	b29b      	uxth	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	72bb      	strb	r3, [r7, #10]
 8002232:	89fb      	ldrh	r3, [r7, #14]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	72fb      	strb	r3, [r7, #11]
	WRIT_EN();
 8002238:	f7ff ff94 	bl	8002164 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800223c:	2200      	movs	r2, #0
 800223e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002242:	480f      	ldr	r0, [pc, #60]	; (8002280 <block_erase+0x70>)
 8002244:	f002 f9fa 	bl	800463c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, transaction, sizeof(transaction)/sizeof(transaction[0]), 100);
 8002248:	f107 0108 	add.w	r1, r7, #8
 800224c:	2364      	movs	r3, #100	; 0x64
 800224e:	2204      	movs	r2, #4
 8002250:	480c      	ldr	r0, [pc, #48]	; (8002284 <block_erase+0x74>)
 8002252:	f005 f99e 	bl	8007592 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002256:	2201      	movs	r2, #1
 8002258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800225c:	4808      	ldr	r0, [pc, #32]	; (8002280 <block_erase+0x70>)
 800225e:	f002 f9ed 	bl	800463c <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8002262:	bf00      	nop
 8002264:	20c0      	movs	r0, #192	; 0xc0
 8002266:	f7ff ff25 	bl	80020b4 <STAT_READ>
 800226a:	4603      	mov	r3, r0
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b01      	cmp	r3, #1
 8002272:	d0f7      	beq.n	8002264 <block_erase+0x54>
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40020000 	.word	0x40020000
 8002284:	200007c8 	.word	0x200007c8

08002288 <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800228c:	2201      	movs	r2, #1
 800228e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002292:	480a      	ldr	r0, [pc, #40]	; (80022bc <MEM_INIT+0x34>)
 8002294:	f002 f9d2 	bl	800463c <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 8002298:	2100      	movs	r1, #0
 800229a:	20a0      	movs	r0, #160	; 0xa0
 800229c:	f7ff ff38 	bl	8002110 <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 80022a0:	20a0      	movs	r0, #160	; 0xa0
 80022a2:	f7ff ff07 	bl	80020b4 <STAT_READ>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MEM_INIT+0x28>
		return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e002      	b.n	80022b6 <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 80022b0:	f7ff ff84 	bl	80021bc <WRITE_DIS>
	return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40020000 	.word	0x40020000

080022c0 <MEM_WRITE>:
 * @param data: data to write
 *
 * @param bytes: Number of bytes to write to page
 * */

HAL_StatusTypeDef MEM_WRITE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60ba      	str	r2, [r7, #8]
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	4603      	mov	r3, r0
 80022cc:	81fb      	strh	r3, [r7, #14]
 80022ce:	460b      	mov	r3, r1
 80022d0:	81bb      	strh	r3, [r7, #12]
	uint8_t* setup = malloc((bytes+3)*sizeof(uint8_t)); //Extra 3 bytes for write opcode and column address
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3303      	adds	r3, #3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f00d fddc 	bl	800fe94 <malloc>
 80022dc:	4603      	mov	r3, r0
 80022de:	617b      	str	r3, [r7, #20]
	uint8_t execute[]={WRIT_EXE, DUMMY, page_addr>>8, page_addr};
 80022e0:	2310      	movs	r3, #16
 80022e2:	743b      	strb	r3, [r7, #16]
 80022e4:	2300      	movs	r3, #0
 80022e6:	747b      	strb	r3, [r7, #17]
 80022e8:	89fb      	ldrh	r3, [r7, #14]
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	74bb      	strb	r3, [r7, #18]
 80022f2:	89fb      	ldrh	r3, [r7, #14]
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	74fb      	strb	r3, [r7, #19]

	setup[0] = WRIT_LOAD;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2202      	movs	r2, #2
 80022fc:	701a      	strb	r2, [r3, #0]
	setup[1] = col_addr>>8;
 80022fe:	89bb      	ldrh	r3, [r7, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	b29a      	uxth	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3301      	adds	r3, #1
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	701a      	strb	r2, [r3, #0]
	setup[2] = col_addr;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	3302      	adds	r3, #2
 8002310:	89ba      	ldrh	r2, [r7, #12]
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]
	memcpy(&setup[3], data, bytes);
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	3303      	adds	r3, #3
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	4618      	mov	r0, r3
 8002320:	f00d fdc8 	bl	800feb4 <memcpy>

	WRIT_EN();
 8002324:	f7ff ff1e 	bl	8002164 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002328:	2200      	movs	r2, #0
 800232a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800232e:	482d      	ldr	r0, [pc, #180]	; (80023e4 <MEM_WRITE+0x124>)
 8002330:	f002 f984 	bl	800463c <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, setup, bytes+3, 100)!=HAL_OK){ //load data to internal buffer
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	b29b      	uxth	r3, r3
 8002338:	3303      	adds	r3, #3
 800233a:	b29a      	uxth	r2, r3
 800233c:	2364      	movs	r3, #100	; 0x64
 800233e:	6979      	ldr	r1, [r7, #20]
 8002340:	4829      	ldr	r0, [pc, #164]	; (80023e8 <MEM_WRITE+0x128>)
 8002342:	f005 f926 	bl	8007592 <HAL_SPI_Transmit>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00a      	beq.n	8002362 <MEM_WRITE+0xa2>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800234c:	2201      	movs	r2, #1
 800234e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002352:	4824      	ldr	r0, [pc, #144]	; (80023e4 <MEM_WRITE+0x124>)
 8002354:	f002 f972 	bl	800463c <HAL_GPIO_WritePin>
		free(setup);
 8002358:	6978      	ldr	r0, [r7, #20]
 800235a:	f00d fda3 	bl	800fea4 <free>
		return(HAL_ERROR);
 800235e:	2301      	movs	r3, #1
 8002360:	e03c      	b.n	80023dc <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002362:	2201      	movs	r2, #1
 8002364:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002368:	481e      	ldr	r0, [pc, #120]	; (80023e4 <MEM_WRITE+0x124>)
 800236a:	f002 f967 	bl	800463c <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until busy bit is cleared
 800236e:	bf00      	nop
 8002370:	20c0      	movs	r0, #192	; 0xc0
 8002372:	f7ff fe9f 	bl	80020b4 <STAT_READ>
 8002376:	4603      	mov	r3, r0
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b01      	cmp	r3, #1
 800237e:	d0f7      	beq.n	8002370 <MEM_WRITE+0xb0>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002380:	2200      	movs	r2, #0
 8002382:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002386:	4817      	ldr	r0, [pc, #92]	; (80023e4 <MEM_WRITE+0x124>)
 8002388:	f002 f958 	bl	800463c <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, execute, 4, 100)!=HAL_OK){ //Send command to dump internal buffer data to memory array
 800238c:	f107 0110 	add.w	r1, r7, #16
 8002390:	2364      	movs	r3, #100	; 0x64
 8002392:	2204      	movs	r2, #4
 8002394:	4814      	ldr	r0, [pc, #80]	; (80023e8 <MEM_WRITE+0x128>)
 8002396:	f005 f8fc 	bl	8007592 <HAL_SPI_Transmit>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <MEM_WRITE+0xf6>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80023a0:	2201      	movs	r2, #1
 80023a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023a6:	480f      	ldr	r0, [pc, #60]	; (80023e4 <MEM_WRITE+0x124>)
 80023a8:	f002 f948 	bl	800463c <HAL_GPIO_WritePin>
		free(setup);
 80023ac:	6978      	ldr	r0, [r7, #20]
 80023ae:	f00d fd79 	bl	800fea4 <free>
		return(HAL_ERROR);
 80023b2:	2301      	movs	r3, #1
 80023b4:	e012      	b.n	80023dc <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80023b6:	2201      	movs	r2, #1
 80023b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023bc:	4809      	ldr	r0, [pc, #36]	; (80023e4 <MEM_WRITE+0x124>)
 80023be:	f002 f93d 	bl	800463c <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 80023c2:	bf00      	nop
 80023c4:	20c0      	movs	r0, #192	; 0xc0
 80023c6:	f7ff fe75 	bl	80020b4 <STAT_READ>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d0f7      	beq.n	80023c4 <MEM_WRITE+0x104>
	free(setup);
 80023d4:	6978      	ldr	r0, [r7, #20]
 80023d6:	f00d fd65 	bl	800fea4 <free>
	return(HAL_OK);
 80023da:	2300      	movs	r3, #0

}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40020000 	.word	0x40020000
 80023e8:	200007c8 	.word	0x200007c8

080023ec <MEM_READPAGE>:
 * @param bytes: Number of bytes to read from data buffer
 *
 * !!Note data must first be shifted from memory array into internal data buffer and then can be read!!
 * */

HAL_StatusTypeDef MEM_READPAGE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){ //Read one 2KiB page. Data will be put into internal buffer which can then be read. Wait at least tDR or until busy bit is clear
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08c      	sub	sp, #48	; 0x30
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	60ba      	str	r2, [r7, #8]
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	4603      	mov	r3, r0
 80023f8:	81fb      	strh	r3, [r7, #14]
 80023fa:	460b      	mov	r3, r1
 80023fc:	81bb      	strh	r3, [r7, #12]
	uint8_t transaction[]={READ_PAGE, DUMMY, page_addr>>8, page_addr};
 80023fe:	2313      	movs	r3, #19
 8002400:	753b      	strb	r3, [r7, #20]
 8002402:	2300      	movs	r3, #0
 8002404:	757b      	strb	r3, [r7, #21]
 8002406:	89fb      	ldrh	r3, [r7, #14]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	b29b      	uxth	r3, r3
 800240c:	b2db      	uxtb	r3, r3
 800240e:	75bb      	strb	r3, [r7, #22]
 8002410:	89fb      	ldrh	r3, [r7, #14]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	75fb      	strb	r3, [r7, #23]
	uint8_t transaction_size = sizeof(transaction)/sizeof(transaction[0]);
 8002416:	2304      	movs	r3, #4
 8002418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t* read_command = malloc(bytes+transaction_size); //Must allocate here since array may be too big for FreeRTOS task stack
 800241c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4413      	add	r3, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f00d fd35 	bl	800fe94 <malloc>
 800242a:	4603      	mov	r3, r0
 800242c:	61fb      	str	r3, [r7, #28]
	uint8_t* rec_data = malloc(bytes+transaction_size);
 800242e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f00d fd2c 	bl	800fe94 <malloc>
 800243c:	4603      	mov	r3, r0
 800243e:	61bb      	str	r3, [r7, #24]

	memset(read_command, 0, bytes+transaction_size);
 8002440:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4413      	add	r3, r2
 8002448:	461a      	mov	r2, r3
 800244a:	2100      	movs	r1, #0
 800244c:	69f8      	ldr	r0, [r7, #28]
 800244e:	f00d fd3f 	bl	800fed0 <memset>
	read_command[0]=READ_BUF;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	2203      	movs	r2, #3
 8002456:	701a      	strb	r2, [r3, #0]
	read_command[1]= col_addr>>8;
 8002458:	89bb      	ldrh	r3, [r7, #12]
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	b29a      	uxth	r2, r3
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3301      	adds	r3, #1
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]
	read_command[2] = col_addr;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3302      	adds	r3, #2
 800246a:	89ba      	ldrh	r2, [r7, #12]
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	701a      	strb	r2, [r3, #0]
	read_command[3] = DUMMY;
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	3303      	adds	r3, #3
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002478:	2200      	movs	r2, #0
 800247a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800247e:	4842      	ldr	r0, [pc, #264]	; (8002588 <MEM_READPAGE+0x19c>)
 8002480:	f002 f8dc 	bl	800463c <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, transaction, 4, 100)!=HAL_OK){ //load data to internal buffer
 8002484:	f107 0114 	add.w	r1, r7, #20
 8002488:	2364      	movs	r3, #100	; 0x64
 800248a:	2204      	movs	r2, #4
 800248c:	483f      	ldr	r0, [pc, #252]	; (800258c <MEM_READPAGE+0x1a0>)
 800248e:	f005 f880 	bl	8007592 <HAL_SPI_Transmit>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00d      	beq.n	80024b4 <MEM_READPAGE+0xc8>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002498:	2201      	movs	r2, #1
 800249a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800249e:	483a      	ldr	r0, [pc, #232]	; (8002588 <MEM_READPAGE+0x19c>)
 80024a0:	f002 f8cc 	bl	800463c <HAL_GPIO_WritePin>
		free(read_command);
 80024a4:	69f8      	ldr	r0, [r7, #28]
 80024a6:	f00d fcfd 	bl	800fea4 <free>
		free(rec_data);
 80024aa:	69b8      	ldr	r0, [r7, #24]
 80024ac:	f00d fcfa 	bl	800fea4 <free>
		return(HAL_ERROR);
 80024b0:	2301      	movs	r3, #1
 80024b2:	e064      	b.n	800257e <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80024b4:	2201      	movs	r2, #1
 80024b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ba:	4833      	ldr	r0, [pc, #204]	; (8002588 <MEM_READPAGE+0x19c>)
 80024bc:	f002 f8be 	bl	800463c <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until BUSY bit is cleared
 80024c0:	bf00      	nop
 80024c2:	20c0      	movs	r0, #192	; 0xc0
 80024c4:	f7ff fdf6 	bl	80020b4 <STAT_READ>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d0f7      	beq.n	80024c2 <MEM_READPAGE+0xd6>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024d8:	482b      	ldr	r0, [pc, #172]	; (8002588 <MEM_READPAGE+0x19c>)
 80024da:	f002 f8af 	bl	800463c <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, read_command, rec_data, bytes+transaction_size, 100)!=HAL_OK){ //Send command to flush buffer to memory array
 80024de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	4413      	add	r3, r2
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2264      	movs	r2, #100	; 0x64
 80024ee:	9200      	str	r2, [sp, #0]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	69f9      	ldr	r1, [r7, #28]
 80024f4:	4825      	ldr	r0, [pc, #148]	; (800258c <MEM_READPAGE+0x1a0>)
 80024f6:	f005 f988 	bl	800780a <HAL_SPI_TransmitReceive>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00d      	beq.n	800251c <MEM_READPAGE+0x130>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002500:	2201      	movs	r2, #1
 8002502:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002506:	4820      	ldr	r0, [pc, #128]	; (8002588 <MEM_READPAGE+0x19c>)
 8002508:	f002 f898 	bl	800463c <HAL_GPIO_WritePin>
		free(read_command);
 800250c:	69f8      	ldr	r0, [r7, #28]
 800250e:	f00d fcc9 	bl	800fea4 <free>
		free(rec_data);
 8002512:	69b8      	ldr	r0, [r7, #24]
 8002514:	f00d fcc6 	bl	800fea4 <free>
		return(HAL_ERROR);
 8002518:	2301      	movs	r3, #1
 800251a:	e030      	b.n	800257e <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800251c:	2201      	movs	r2, #1
 800251e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002522:	4819      	ldr	r0, [pc, #100]	; (8002588 <MEM_READPAGE+0x19c>)
 8002524:	f002 f88a 	bl	800463c <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8002528:	bf00      	nop
 800252a:	20c0      	movs	r0, #192	; 0xc0
 800252c:	f7ff fdc2 	bl	80020b4 <STAT_READ>
 8002530:	4603      	mov	r3, r0
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b01      	cmp	r3, #1
 8002538:	d0f7      	beq.n	800252a <MEM_READPAGE+0x13e>

	if (bytes == 1) {
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d104      	bne.n	800254a <MEM_READPAGE+0x15e>
		*data = rec_data[4];
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	791a      	ldrb	r2, [r3, #4]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	e012      	b.n	8002570 <MEM_READPAGE+0x184>
	} else {
		for(int i = 0; i < bytes; i++){
 800254a:	2300      	movs	r3, #0
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
 800254e:	e00b      	b.n	8002568 <MEM_READPAGE+0x17c>
				data[i] = rec_data[i+4]; //+4 as first four elements of rec_data are meaningless
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	3304      	adds	r3, #4
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	441a      	add	r2, r3
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	68b9      	ldr	r1, [r7, #8]
 800255c:	440b      	add	r3, r1
 800255e:	7812      	ldrb	r2, [r2, #0]
 8002560:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < bytes; i++){
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	3301      	adds	r3, #1
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	429a      	cmp	r2, r3
 800256e:	d8ef      	bhi.n	8002550 <MEM_READPAGE+0x164>
		}
	}
	free(read_command);
 8002570:	69f8      	ldr	r0, [r7, #28]
 8002572:	f00d fc97 	bl	800fea4 <free>
	free(rec_data);
 8002576:	69b8      	ldr	r0, [r7, #24]
 8002578:	f00d fc94 	bl	800fea4 <free>
	return(HAL_OK);
 800257c:	2300      	movs	r3, #0

}
 800257e:	4618      	mov	r0, r3
 8002580:	3728      	adds	r7, #40	; 0x28
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40020000 	.word	0x40020000
 800258c:	200007c8 	.word	0x200007c8

08002590 <mem_find_free_block>:
/**
 * Find the next free/empty block
 *
 * @return address of free block or -1 if no blocks available
 * */
int mem_find_free_block(void) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	e016      	b.n	80025ca <mem_find_free_block+0x3a>
		uint8_t first_byte;
		if (MEM_READPAGE(i * BLOCK_PAGECOUNT, 0x0000, &first_byte, 1) != HAL_OK) {
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	019b      	lsls	r3, r3, #6
 80025a2:	b298      	uxth	r0, r3
 80025a4:	1cfa      	adds	r2, r7, #3
 80025a6:	2301      	movs	r3, #1
 80025a8:	2100      	movs	r1, #0
 80025aa:	f7ff ff1f 	bl	80023ec <MEM_READPAGE>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <mem_find_free_block+0x2a>
			return -1;
 80025b4:	f04f 33ff 	mov.w	r3, #4294967295
 80025b8:	e00d      	b.n	80025d6 <mem_find_free_block+0x46>
		}

		if (first_byte == 0xFF) {
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	2bff      	cmp	r3, #255	; 0xff
 80025be:	d101      	bne.n	80025c4 <mem_find_free_block+0x34>
			return i;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	e008      	b.n	80025d6 <mem_find_free_block+0x46>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3301      	adds	r3, #1
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d0:	dbe4      	blt.n	800259c <mem_find_free_block+0xc>
		}
	}
	return -1;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <memory_reset>:

/**
 * Clear entire memory array to 0xFF
 * */
void memory_reset(void) {
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 80025e4:	2300      	movs	r3, #0
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	e007      	b.n	80025fa <memory_reset+0x1c>
		block_erase(i);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fe0e 	bl	8002210 <block_erase>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3301      	adds	r3, #1
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002600:	dbf3      	blt.n	80025ea <memory_reset+0xc>
	}
}
 8002602:	bf00      	nop
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_GPIO_EXTI_Callback>:

/****************************************Button Interrupt Handler**************************************
 * Interrupt is triggered on falling (button pressed) and rising (button released) edges. On release the
 * value of timer 3 is checked to see if the time elapsed makes the press a short or long press
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	80fb      	strh	r3, [r7, #6]
	uint16_t tim_val = __HAL_TIM_GET_COUNTER(&htim3);
 8002616:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_GPIO_EXTI_Callback+0x78>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	81fb      	strh	r3, [r7, #14]
	uint8_t button_state = NO_PRESS;
 800261e:	2300      	movs	r3, #0
 8002620:	737b      	strb	r3, [r7, #13]

	if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1) && (tim_val > 0)) {
 8002622:	2102      	movs	r1, #2
 8002624:	4818      	ldr	r0, [pc, #96]	; (8002688 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002626:	f001 fff1 	bl	800460c <HAL_GPIO_ReadPin>
 800262a:	4603      	mov	r3, r0
 800262c:	2b01      	cmp	r3, #1
 800262e:	d11b      	bne.n	8002668 <HAL_GPIO_EXTI_Callback+0x5c>
 8002630:	89fb      	ldrh	r3, [r7, #14]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d018      	beq.n	8002668 <HAL_GPIO_EXTI_Callback+0x5c>
		HAL_TIM_Base_Stop(&htim3);
 8002636:	4813      	ldr	r0, [pc, #76]	; (8002684 <HAL_GPIO_EXTI_Callback+0x78>)
 8002638:	f005 fbfe 	bl	8007e38 <HAL_TIM_Base_Stop>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 800263c:	4b11      	ldr	r3, [pc, #68]	; (8002684 <HAL_GPIO_EXTI_Callback+0x78>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2200      	movs	r2, #0
 8002642:	625a      	str	r2, [r3, #36]	; 0x24

		if (tim_val > LONG_PRESS_THRESH) {
 8002644:	89fb      	ldrh	r3, [r7, #14]
 8002646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800264a:	d902      	bls.n	8002652 <HAL_GPIO_EXTI_Callback+0x46>
			button_state = LONG_PRESS;
 800264c:	2301      	movs	r3, #1
 800264e:	737b      	strb	r3, [r7, #13]
 8002650:	e001      	b.n	8002656 <HAL_GPIO_EXTI_Callback+0x4a>
		} else {
			button_state = SHORT_PRESS;
 8002652:	2302      	movs	r3, #2
 8002654:	737b      	strb	r3, [r7, #13]
		}
		xQueueSendFromISR(UserInputHandle, &button_state, 0);
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <HAL_GPIO_EXTI_Callback+0x80>)
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	f107 010d 	add.w	r1, r7, #13
 800265e:	2300      	movs	r3, #0
 8002660:	2200      	movs	r2, #0
 8002662:	f00a fc8d 	bl	800cf80 <xQueueGenericSendFromISR>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
		HAL_TIM_Base_Start(&htim3);
	}
}
 8002666:	e009      	b.n	800267c <HAL_GPIO_EXTI_Callback+0x70>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
 8002668:	2102      	movs	r1, #2
 800266a:	4807      	ldr	r0, [pc, #28]	; (8002688 <HAL_GPIO_EXTI_Callback+0x7c>)
 800266c:	f001 ffce 	bl	800460c <HAL_GPIO_ReadPin>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d102      	bne.n	800267c <HAL_GPIO_EXTI_Callback+0x70>
		HAL_TIM_Base_Start(&htim3);
 8002676:	4803      	ldr	r0, [pc, #12]	; (8002684 <HAL_GPIO_EXTI_Callback+0x78>)
 8002678:	f005 fb84 	bl	8007d84 <HAL_TIM_Base_Start>
}
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000868 	.word	0x20000868
 8002688:	40020000 	.word	0x40020000
 800268c:	200008d8 	.word	0x200008d8

08002690 <BUZZ>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void BUZZ(void){
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002694:	2108      	movs	r1, #8
 8002696:	4806      	ldr	r0, [pc, #24]	; (80026b0 <BUZZ+0x20>)
 8002698:	f005 fcb2 	bl	8008000 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 800269c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026a0:	f001 fd2a 	bl	80040f8 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80026a4:	2108      	movs	r1, #8
 80026a6:	4802      	ldr	r0, [pc, #8]	; (80026b0 <BUZZ+0x20>)
 80026a8:	f005 fd5a 	bl	8008160 <HAL_TIM_PWM_Stop>
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000820 	.word	0x20000820

080026b4 <write_card>:

void write_card(Card* towrite) {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	OLED_Clear();
 80026bc:	f7fe ff01 	bl	80014c2 <OLED_Clear>
	MFRC_ANTON();
 80026c0:	f7fe fb0e 	bl	8000ce0 <MFRC_ANTON>
	OLED_PrintCent(2, "Writing...", NORMAL);
 80026c4:	2200      	movs	r2, #0
 80026c6:	4926      	ldr	r1, [pc, #152]	; (8002760 <write_card+0xac>)
 80026c8:	2002      	movs	r0, #2
 80026ca:	f7ff f8d6 	bl	800187a <OLED_PrintCent>
	if (UL_writecard(towrite) == PCD_NO_PICC) {
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe fe18 	bl	8001304 <UL_writecard>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d118      	bne.n	800270c <write_card+0x58>
		OLED_PrintCent(4, "ERROR: Couldn't find", NORMAL);
 80026da:	2200      	movs	r2, #0
 80026dc:	4921      	ldr	r1, [pc, #132]	; (8002764 <write_card+0xb0>)
 80026de:	2004      	movs	r0, #4
 80026e0:	f7ff f8cb 	bl	800187a <OLED_PrintCent>
		OLED_PrintCent(6, "Card", NORMAL);
 80026e4:	2200      	movs	r2, #0
 80026e6:	4920      	ldr	r1, [pc, #128]	; (8002768 <write_card+0xb4>)
 80026e8:	2006      	movs	r0, #6
 80026ea:	f7ff f8c6 	bl	800187a <OLED_PrintCent>
		MFRC_ANTOFF();
 80026ee:	f7fe fb31 	bl	8000d54 <MFRC_ANTOFF>
		osDelay(2000);
 80026f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026f6:	f00a f890 	bl	800c81a <osDelay>
		vTaskResume(HomeHandle);
 80026fa:	4b1c      	ldr	r3, [pc, #112]	; (800276c <write_card+0xb8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f00b f9a6 	bl	800da50 <vTaskResume>
		vTaskSuspend(NULL);
 8002704:	2000      	movs	r0, #0
 8002706:	f00b f8fb 	bl	800d900 <vTaskSuspend>
		MFRC_ANTOFF();
		osDelay(1000);
		vTaskResume(HomeHandle);
		vTaskSuspend(NULL);
	}
}
 800270a:	e025      	b.n	8002758 <write_card+0xa4>
		MFRC_HALTA(); //Deselect card
 800270c:	f7fe fbfe 	bl	8000f0c <MFRC_HALTA>
		OLED_PrintCent(4,"Verifying...", NORMAL);
 8002710:	2200      	movs	r2, #0
 8002712:	4917      	ldr	r1, [pc, #92]	; (8002770 <write_card+0xbc>)
 8002714:	2004      	movs	r0, #4
 8002716:	f7ff f8b0 	bl	800187a <OLED_PrintCent>
		if (UL_verify(towrite) == PCD_OK) {
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7fe fe7c 	bl	8001418 <UL_verify>
 8002720:	4603      	mov	r3, r0
 8002722:	2bcc      	cmp	r3, #204	; 0xcc
 8002724:	d105      	bne.n	8002732 <write_card+0x7e>
			OLED_PrintCent(6, "Write verified :)", NORMAL);
 8002726:	2200      	movs	r2, #0
 8002728:	4912      	ldr	r1, [pc, #72]	; (8002774 <write_card+0xc0>)
 800272a:	2006      	movs	r0, #6
 800272c:	f7ff f8a5 	bl	800187a <OLED_PrintCent>
 8002730:	e004      	b.n	800273c <write_card+0x88>
			OLED_PrintCent(6, "COULDN'T VERIFY", NORMAL);
 8002732:	2200      	movs	r2, #0
 8002734:	4910      	ldr	r1, [pc, #64]	; (8002778 <write_card+0xc4>)
 8002736:	2006      	movs	r0, #6
 8002738:	f7ff f89f 	bl	800187a <OLED_PrintCent>
		MFRC_ANTOFF();
 800273c:	f7fe fb0a 	bl	8000d54 <MFRC_ANTOFF>
		osDelay(1000);
 8002740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002744:	f00a f869 	bl	800c81a <osDelay>
		vTaskResume(HomeHandle);
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <write_card+0xb8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f00b f97f 	bl	800da50 <vTaskResume>
		vTaskSuspend(NULL);
 8002752:	2000      	movs	r0, #0
 8002754:	f00b f8d4 	bl	800d900 <vTaskSuspend>
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	08010934 	.word	0x08010934
 8002764:	08010940 	.word	0x08010940
 8002768:	08010958 	.word	0x08010958
 800276c:	200008bc 	.word	0x200008bc
 8002770:	08010960 	.word	0x08010960
 8002774:	08010970 	.word	0x08010970
 8002778:	08010984 	.word	0x08010984

0800277c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002780:	f001 fc78 	bl	8004074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002784:	f000 f8c0 	bl	8002908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002788:	f000 fa88 	bl	8002c9c <MX_GPIO_Init>
  MX_I2C1_Init();
 800278c:	f000 f926 	bl	80029dc <MX_I2C1_Init>
  MX_SPI1_Init();
 8002790:	f000 f952 	bl	8002a38 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002794:	f000 f988 	bl	8002aa8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8002798:	f000 f9bc 	bl	8002b14 <MX_TIM2_Init>
  MX_TIM3_Init();
 800279c:	f000 fa30 	bl	8002c00 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80027a0:	f009 ff5e 	bl	800c660 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(Card*), &UidtoFound_attributes);
 80027a4:	4a35      	ldr	r2, [pc, #212]	; (800287c <main+0x100>)
 80027a6:	2104      	movs	r1, #4
 80027a8:	2001      	movs	r0, #1
 80027aa:	f00a f851 	bl	800c850 <osMessageQueueNew>
 80027ae:	4603      	mov	r3, r0
 80027b0:	4a33      	ldr	r2, [pc, #204]	; (8002880 <main+0x104>)
 80027b2:	6013      	str	r3, [r2, #0]

  /* creation of UserInput */
  UserInputHandle = osMessageQueueNew (1, sizeof(uint8_t), &UserInput_attributes);
 80027b4:	4a33      	ldr	r2, [pc, #204]	; (8002884 <main+0x108>)
 80027b6:	2101      	movs	r1, #1
 80027b8:	2001      	movs	r0, #1
 80027ba:	f00a f849 	bl	800c850 <osMessageQueueNew>
 80027be:	4603      	mov	r3, r0
 80027c0:	4a31      	ldr	r2, [pc, #196]	; (8002888 <main+0x10c>)
 80027c2:	6013      	str	r3, [r2, #0]

  /* creation of FileEntry */
  FileEntryHandle = osMessageQueueNew (1, sizeof(uint16_t), &FileEntry_attributes);
 80027c4:	4a31      	ldr	r2, [pc, #196]	; (800288c <main+0x110>)
 80027c6:	2102      	movs	r1, #2
 80027c8:	2001      	movs	r0, #1
 80027ca:	f00a f841 	bl	800c850 <osMessageQueueNew>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4a2f      	ldr	r2, [pc, #188]	; (8002890 <main+0x114>)
 80027d2:	6013      	str	r3, [r2, #0]

  /* creation of KeyboardOut */
  KeyboardOutHandle = osMessageQueueNew (1, sizeof(char*), &KeyboardOut_attributes);
 80027d4:	4a2f      	ldr	r2, [pc, #188]	; (8002894 <main+0x118>)
 80027d6:	2104      	movs	r1, #4
 80027d8:	2001      	movs	r0, #1
 80027da:	f00a f839 	bl	800c850 <osMessageQueueNew>
 80027de:	4603      	mov	r3, r0
 80027e0:	4a2d      	ldr	r2, [pc, #180]	; (8002898 <main+0x11c>)
 80027e2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 80027e4:	4a2d      	ldr	r2, [pc, #180]	; (800289c <main+0x120>)
 80027e6:	2100      	movs	r1, #0
 80027e8:	482d      	ldr	r0, [pc, #180]	; (80028a0 <main+0x124>)
 80027ea:	f009 ff83 	bl	800c6f4 <osThreadNew>
 80027ee:	4603      	mov	r3, r0
 80027f0:	4a2c      	ldr	r2, [pc, #176]	; (80028a4 <main+0x128>)
 80027f2:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 80027f4:	4a2c      	ldr	r2, [pc, #176]	; (80028a8 <main+0x12c>)
 80027f6:	2100      	movs	r1, #0
 80027f8:	482c      	ldr	r0, [pc, #176]	; (80028ac <main+0x130>)
 80027fa:	f009 ff7b 	bl	800c6f4 <osThreadNew>
 80027fe:	4603      	mov	r3, r0
 8002800:	4a2b      	ldr	r2, [pc, #172]	; (80028b0 <main+0x134>)
 8002802:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 8002804:	4a2b      	ldr	r2, [pc, #172]	; (80028b4 <main+0x138>)
 8002806:	2100      	movs	r1, #0
 8002808:	482b      	ldr	r0, [pc, #172]	; (80028b8 <main+0x13c>)
 800280a:	f009 ff73 	bl	800c6f4 <osThreadNew>
 800280e:	4603      	mov	r3, r0
 8002810:	4a2a      	ldr	r2, [pc, #168]	; (80028bc <main+0x140>)
 8002812:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 8002814:	4a2a      	ldr	r2, [pc, #168]	; (80028c0 <main+0x144>)
 8002816:	2100      	movs	r1, #0
 8002818:	482a      	ldr	r0, [pc, #168]	; (80028c4 <main+0x148>)
 800281a:	f009 ff6b 	bl	800c6f4 <osThreadNew>
 800281e:	4603      	mov	r3, r0
 8002820:	4a29      	ldr	r2, [pc, #164]	; (80028c8 <main+0x14c>)
 8002822:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 8002824:	4a29      	ldr	r2, [pc, #164]	; (80028cc <main+0x150>)
 8002826:	2100      	movs	r1, #0
 8002828:	4829      	ldr	r0, [pc, #164]	; (80028d0 <main+0x154>)
 800282a:	f009 ff63 	bl	800c6f4 <osThreadNew>
 800282e:	4603      	mov	r3, r0
 8002830:	4a28      	ldr	r2, [pc, #160]	; (80028d4 <main+0x158>)
 8002832:	6013      	str	r3, [r2, #0]

  /* creation of ShowFiles */
  ShowFilesHandle = osThreadNew(StartShowFiles, NULL, &ShowFiles_attributes);
 8002834:	4a28      	ldr	r2, [pc, #160]	; (80028d8 <main+0x15c>)
 8002836:	2100      	movs	r1, #0
 8002838:	4828      	ldr	r0, [pc, #160]	; (80028dc <main+0x160>)
 800283a:	f009 ff5b 	bl	800c6f4 <osThreadNew>
 800283e:	4603      	mov	r3, r0
 8002840:	4a27      	ldr	r2, [pc, #156]	; (80028e0 <main+0x164>)
 8002842:	6013      	str	r3, [r2, #0]

  /* creation of ShowFileData */
  ShowFileDataHandle = osThreadNew(StartShowFileData, NULL, &ShowFileData_attributes);
 8002844:	4a27      	ldr	r2, [pc, #156]	; (80028e4 <main+0x168>)
 8002846:	2100      	movs	r1, #0
 8002848:	4827      	ldr	r0, [pc, #156]	; (80028e8 <main+0x16c>)
 800284a:	f009 ff53 	bl	800c6f4 <osThreadNew>
 800284e:	4603      	mov	r3, r0
 8002850:	4a26      	ldr	r2, [pc, #152]	; (80028ec <main+0x170>)
 8002852:	6013      	str	r3, [r2, #0]

  /* creation of Clone */
  CloneHandle = osThreadNew(StartClone, NULL, &Clone_attributes);
 8002854:	4a26      	ldr	r2, [pc, #152]	; (80028f0 <main+0x174>)
 8002856:	2100      	movs	r1, #0
 8002858:	4826      	ldr	r0, [pc, #152]	; (80028f4 <main+0x178>)
 800285a:	f009 ff4b 	bl	800c6f4 <osThreadNew>
 800285e:	4603      	mov	r3, r0
 8002860:	4a25      	ldr	r2, [pc, #148]	; (80028f8 <main+0x17c>)
 8002862:	6013      	str	r3, [r2, #0]

  /* creation of Keyboard */
  KeyboardHandle = osThreadNew(StartKeyboard, NULL, &Keyboard_attributes);
 8002864:	4a25      	ldr	r2, [pc, #148]	; (80028fc <main+0x180>)
 8002866:	2100      	movs	r1, #0
 8002868:	4825      	ldr	r0, [pc, #148]	; (8002900 <main+0x184>)
 800286a:	f009 ff43 	bl	800c6f4 <osThreadNew>
 800286e:	4603      	mov	r3, r0
 8002870:	4a24      	ldr	r2, [pc, #144]	; (8002904 <main+0x188>)
 8002872:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002874:	f009 ff18 	bl	800c6a8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002878:	e7fe      	b.n	8002878 <main+0xfc>
 800287a:	bf00      	nop
 800287c:	08010f94 	.word	0x08010f94
 8002880:	200008d4 	.word	0x200008d4
 8002884:	08010fac 	.word	0x08010fac
 8002888:	200008d8 	.word	0x200008d8
 800288c:	08010fc4 	.word	0x08010fc4
 8002890:	200008dc 	.word	0x200008dc
 8002894:	08010fdc 	.word	0x08010fdc
 8002898:	200008e0 	.word	0x200008e0
 800289c:	08010e50 	.word	0x08010e50
 80028a0:	08002d95 	.word	0x08002d95
 80028a4:	200008b0 	.word	0x200008b0
 80028a8:	08010e74 	.word	0x08010e74
 80028ac:	08002eed 	.word	0x08002eed
 80028b0:	200008b4 	.word	0x200008b4
 80028b4:	08010e98 	.word	0x08010e98
 80028b8:	08002f7d 	.word	0x08002f7d
 80028bc:	200008b8 	.word	0x200008b8
 80028c0:	08010ebc 	.word	0x08010ebc
 80028c4:	0800301d 	.word	0x0800301d
 80028c8:	200008bc 	.word	0x200008bc
 80028cc:	08010ee0 	.word	0x08010ee0
 80028d0:	080030f1 	.word	0x080030f1
 80028d4:	200008c0 	.word	0x200008c0
 80028d8:	08010f04 	.word	0x08010f04
 80028dc:	08003219 	.word	0x08003219
 80028e0:	200008c4 	.word	0x200008c4
 80028e4:	08010f28 	.word	0x08010f28
 80028e8:	080032e5 	.word	0x080032e5
 80028ec:	200008c8 	.word	0x200008c8
 80028f0:	08010f4c 	.word	0x08010f4c
 80028f4:	08003389 	.word	0x08003389
 80028f8:	200008cc 	.word	0x200008cc
 80028fc:	08010f70 	.word	0x08010f70
 8002900:	08003431 	.word	0x08003431
 8002904:	200008d0 	.word	0x200008d0

08002908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b094      	sub	sp, #80	; 0x50
 800290c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800290e:	f107 0320 	add.w	r3, r7, #32
 8002912:	2230      	movs	r2, #48	; 0x30
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f00d fada 	bl	800fed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800291c:	f107 030c 	add.w	r3, r7, #12
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800292c:	2300      	movs	r3, #0
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <SystemClock_Config+0xcc>)
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	4a27      	ldr	r2, [pc, #156]	; (80029d4 <SystemClock_Config+0xcc>)
 8002936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293a:	6413      	str	r3, [r2, #64]	; 0x40
 800293c:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <SystemClock_Config+0xcc>)
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002948:	2300      	movs	r3, #0
 800294a:	607b      	str	r3, [r7, #4]
 800294c:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <SystemClock_Config+0xd0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002954:	4a20      	ldr	r2, [pc, #128]	; (80029d8 <SystemClock_Config+0xd0>)
 8002956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <SystemClock_Config+0xd0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002964:	607b      	str	r3, [r7, #4]
 8002966:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002968:	2301      	movs	r3, #1
 800296a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800296c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002972:	2302      	movs	r3, #2
 8002974:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002976:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800297a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800297c:	2308      	movs	r3, #8
 800297e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002980:	23a8      	movs	r3, #168	; 0xa8
 8002982:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002984:	2304      	movs	r3, #4
 8002986:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002988:	2307      	movs	r3, #7
 800298a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800298c:	f107 0320 	add.w	r3, r7, #32
 8002990:	4618      	mov	r0, r3
 8002992:	f004 f8c1 	bl	8006b18 <HAL_RCC_OscConfig>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800299c:	f000 fdb8 	bl	8003510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029a0:	230f      	movs	r3, #15
 80029a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029a4:	2302      	movs	r3, #2
 80029a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	2102      	movs	r1, #2
 80029bc:	4618      	mov	r0, r3
 80029be:	f004 fb23 	bl	8007008 <HAL_RCC_ClockConfig>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80029c8:	f000 fda2 	bl	8003510 <Error_Handler>
  }
}
 80029cc:	bf00      	nop
 80029ce:	3750      	adds	r7, #80	; 0x50
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40007000 	.word	0x40007000

080029dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029e0:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <MX_I2C1_Init+0x50>)
 80029e2:	4a13      	ldr	r2, [pc, #76]	; (8002a30 <MX_I2C1_Init+0x54>)
 80029e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <MX_I2C1_Init+0x50>)
 80029e8:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <MX_I2C1_Init+0x58>)
 80029ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029ec:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <MX_I2C1_Init+0x50>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029f2:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <MX_I2C1_Init+0x50>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <MX_I2C1_Init+0x50>)
 80029fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <MX_I2C1_Init+0x50>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <MX_I2C1_Init+0x50>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <MX_I2C1_Init+0x50>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <MX_I2C1_Init+0x50>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a18:	4804      	ldr	r0, [pc, #16]	; (8002a2c <MX_I2C1_Init+0x50>)
 8002a1a:	f001 fe41 	bl	80046a0 <HAL_I2C_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a24:	f000 fd74 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	2000071c 	.word	0x2000071c
 8002a30:	40005400 	.word	0x40005400
 8002a34:	000186a0 	.word	0x000186a0

08002a38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a3c:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <MX_SPI1_Init+0x68>)
 8002a3e:	4a19      	ldr	r2, [pc, #100]	; (8002aa4 <MX_SPI1_Init+0x6c>)
 8002a40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a42:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <MX_SPI1_Init+0x68>)
 8002a44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <MX_SPI1_Init+0x68>)
 8002a4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a50:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <MX_SPI1_Init+0x68>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a58:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <MX_SPI1_Init+0x68>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <MX_SPI1_Init+0x68>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a64:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <MX_SPI1_Init+0x68>)
 8002a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <MX_SPI1_Init+0x68>)
 8002a6e:	2218      	movs	r2, #24
 8002a70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <MX_SPI1_Init+0x68>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <MX_SPI1_Init+0x68>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <MX_SPI1_Init+0x68>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <MX_SPI1_Init+0x68>)
 8002a86:	220a      	movs	r2, #10
 8002a88:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a8a:	4805      	ldr	r0, [pc, #20]	; (8002aa0 <MX_SPI1_Init+0x68>)
 8002a8c:	f004 fcf8 	bl	8007480 <HAL_SPI_Init>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002a96:	f000 fd3b 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000770 	.word	0x20000770
 8002aa4:	40013000 	.word	0x40013000

08002aa8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002aac:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <MX_SPI2_Init+0x64>)
 8002aae:	4a18      	ldr	r2, [pc, #96]	; (8002b10 <MX_SPI2_Init+0x68>)
 8002ab0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ab2:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <MX_SPI2_Init+0x64>)
 8002ab4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ab8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002aba:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <MX_SPI2_Init+0x64>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ac0:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <MX_SPI2_Init+0x64>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ac6:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <MX_SPI2_Init+0x64>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002acc:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <MX_SPI2_Init+0x64>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <MX_SPI2_Init+0x64>)
 8002ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <MX_SPI2_Init+0x64>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <MX_SPI2_Init+0x64>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ae6:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <MX_SPI2_Init+0x64>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <MX_SPI2_Init+0x64>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <MX_SPI2_Init+0x64>)
 8002af4:	220a      	movs	r2, #10
 8002af6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002af8:	4804      	ldr	r0, [pc, #16]	; (8002b0c <MX_SPI2_Init+0x64>)
 8002afa:	f004 fcc1 	bl	8007480 <HAL_SPI_Init>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002b04:	f000 fd04 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	200007c8 	.word	0x200007c8
 8002b10:	40003800 	.word	0x40003800

08002b14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08e      	sub	sp, #56	; 0x38
 8002b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	605a      	str	r2, [r3, #4]
 8002b24:	609a      	str	r2, [r3, #8]
 8002b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b28:	f107 0320 	add.w	r3, r7, #32
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
 8002b40:	615a      	str	r2, [r3, #20]
 8002b42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b44:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <MX_TIM2_Init+0xe8>)
 8002b46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8002b4c:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <MX_TIM2_Init+0xe8>)
 8002b4e:	f240 12a3 	movw	r2, #419	; 0x1a3
 8002b52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b54:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <MX_TIM2_Init+0xe8>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8002b5a:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <MX_TIM2_Init+0xe8>)
 8002b5c:	2231      	movs	r2, #49	; 0x31
 8002b5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b60:	4b26      	ldr	r3, [pc, #152]	; (8002bfc <MX_TIM2_Init+0xe8>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b66:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <MX_TIM2_Init+0xe8>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b6c:	4823      	ldr	r0, [pc, #140]	; (8002bfc <MX_TIM2_Init+0xe8>)
 8002b6e:	f005 f8b9 	bl	8007ce4 <HAL_TIM_Base_Init>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002b78:	f000 fcca 	bl	8003510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b86:	4619      	mov	r1, r3
 8002b88:	481c      	ldr	r0, [pc, #112]	; (8002bfc <MX_TIM2_Init+0xe8>)
 8002b8a:	f005 fd17 	bl	80085bc <HAL_TIM_ConfigClockSource>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002b94:	f000 fcbc 	bl	8003510 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b98:	4818      	ldr	r0, [pc, #96]	; (8002bfc <MX_TIM2_Init+0xe8>)
 8002b9a:	f005 f9d7 	bl	8007f4c <HAL_TIM_PWM_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002ba4:	f000 fcb4 	bl	8003510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bb0:	f107 0320 	add.w	r3, r7, #32
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4811      	ldr	r0, [pc, #68]	; (8002bfc <MX_TIM2_Init+0xe8>)
 8002bb8:	f006 f8bc 	bl	8008d34 <HAL_TIMEx_MasterConfigSynchronization>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002bc2:	f000 fca5 	bl	8003510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bc6:	2360      	movs	r3, #96	; 0x60
 8002bc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8002bca:	2318      	movs	r3, #24
 8002bcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	2208      	movs	r2, #8
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4807      	ldr	r0, [pc, #28]	; (8002bfc <MX_TIM2_Init+0xe8>)
 8002bde:	f005 fc2b 	bl	8008438 <HAL_TIM_PWM_ConfigChannel>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002be8:	f000 fc92 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002bec:	4803      	ldr	r0, [pc, #12]	; (8002bfc <MX_TIM2_Init+0xe8>)
 8002bee:	f001 f8e9 	bl	8003dc4 <HAL_TIM_MspPostInit>

}
 8002bf2:	bf00      	nop
 8002bf4:	3738      	adds	r7, #56	; 0x38
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000820 	.word	0x20000820

08002c00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c06:	f107 0308 	add.w	r3, r7, #8
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	609a      	str	r2, [r3, #8]
 8002c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c14:	463b      	mov	r3, r7
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <MX_TIM3_Init+0x94>)
 8002c1e:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <MX_TIM3_Init+0x98>)
 8002c20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 8002c22:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <MX_TIM3_Init+0x94>)
 8002c24:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002c28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <MX_TIM3_Init+0x94>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8002c30:	4b18      	ldr	r3, [pc, #96]	; (8002c94 <MX_TIM3_Init+0x94>)
 8002c32:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002c36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c38:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <MX_TIM3_Init+0x94>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c3e:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <MX_TIM3_Init+0x94>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c44:	4813      	ldr	r0, [pc, #76]	; (8002c94 <MX_TIM3_Init+0x94>)
 8002c46:	f005 f84d 	bl	8007ce4 <HAL_TIM_Base_Init>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002c50:	f000 fc5e 	bl	8003510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c5a:	f107 0308 	add.w	r3, r7, #8
 8002c5e:	4619      	mov	r1, r3
 8002c60:	480c      	ldr	r0, [pc, #48]	; (8002c94 <MX_TIM3_Init+0x94>)
 8002c62:	f005 fcab 	bl	80085bc <HAL_TIM_ConfigClockSource>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002c6c:	f000 fc50 	bl	8003510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c70:	2300      	movs	r3, #0
 8002c72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c78:	463b      	mov	r3, r7
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4805      	ldr	r0, [pc, #20]	; (8002c94 <MX_TIM3_Init+0x94>)
 8002c7e:	f006 f859 	bl	8008d34 <HAL_TIMEx_MasterConfigSynchronization>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002c88:	f000 fc42 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c8c:	bf00      	nop
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000868 	.word	0x20000868
 8002c98:	40000400 	.word	0x40000400

08002c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca2:	f107 030c 	add.w	r3, r7, #12
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	609a      	str	r2, [r3, #8]
 8002cae:	60da      	str	r2, [r3, #12]
 8002cb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	4b34      	ldr	r3, [pc, #208]	; (8002d88 <MX_GPIO_Init+0xec>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	4a33      	ldr	r2, [pc, #204]	; (8002d88 <MX_GPIO_Init+0xec>)
 8002cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc2:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <MX_GPIO_Init+0xec>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]
 8002cd2:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <MX_GPIO_Init+0xec>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	4a2c      	ldr	r2, [pc, #176]	; (8002d88 <MX_GPIO_Init+0xec>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cde:	4b2a      	ldr	r3, [pc, #168]	; (8002d88 <MX_GPIO_Init+0xec>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	607b      	str	r3, [r7, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	4b26      	ldr	r3, [pc, #152]	; (8002d88 <MX_GPIO_Init+0xec>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4a25      	ldr	r2, [pc, #148]	; (8002d88 <MX_GPIO_Init+0xec>)
 8002cf4:	f043 0302 	orr.w	r3, r3, #2
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4b23      	ldr	r3, [pc, #140]	; (8002d88 <MX_GPIO_Init+0xec>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 8002d06:	2200      	movs	r2, #0
 8002d08:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002d0c:	481f      	ldr	r0, [pc, #124]	; (8002d8c <MX_GPIO_Init+0xf0>)
 8002d0e:	f001 fc95 	bl	800463c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 8002d12:	2200      	movs	r2, #0
 8002d14:	2122      	movs	r1, #34	; 0x22
 8002d16:	481e      	ldr	r0, [pc, #120]	; (8002d90 <MX_GPIO_Init+0xf4>)
 8002d18:	f001 fc90 	bl	800463c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002d20:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002d24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002d2a:	f107 030c 	add.w	r3, r7, #12
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4816      	ldr	r0, [pc, #88]	; (8002d8c <MX_GPIO_Init+0xf0>)
 8002d32:	f001 fae7 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 8002d36:	f44f 738c 	mov.w	r3, #280	; 0x118
 8002d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d48:	f107 030c 	add.w	r3, r7, #12
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	480f      	ldr	r0, [pc, #60]	; (8002d8c <MX_GPIO_Init+0xf0>)
 8002d50:	f001 fad8 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 8002d54:	2322      	movs	r3, #34	; 0x22
 8002d56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d64:	f107 030c 	add.w	r3, r7, #12
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4809      	ldr	r0, [pc, #36]	; (8002d90 <MX_GPIO_Init+0xf4>)
 8002d6c:	f001 faca 	bl	8004304 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002d70:	2200      	movs	r2, #0
 8002d72:	2105      	movs	r1, #5
 8002d74:	2007      	movs	r0, #7
 8002d76:	f001 fa9b 	bl	80042b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002d7a:	2007      	movs	r0, #7
 8002d7c:	f001 fab4 	bl	80042e8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d80:	bf00      	nop
 8002d82:	3720      	adds	r7, #32
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40020000 	.word	0x40020000
 8002d90:	40020400 	.word	0x40020400

08002d94 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b09c      	sub	sp, #112	; 0x70
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002d9c:	f00c fb66 	bl	800f46c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(ReadCardHandle);
 8002da0:	4b43      	ldr	r3, [pc, #268]	; (8002eb0 <Start_Init+0x11c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f00a fdab 	bl	800d900 <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 8002daa:	4b42      	ldr	r3, [pc, #264]	; (8002eb4 <Start_Init+0x120>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f00a fda6 	bl	800d900 <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 8002db4:	4b40      	ldr	r3, [pc, #256]	; (8002eb8 <Start_Init+0x124>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f00a fda1 	bl	800d900 <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 8002dbe:	4b3f      	ldr	r3, [pc, #252]	; (8002ebc <Start_Init+0x128>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f00a fd9c 	bl	800d900 <vTaskSuspend>
    vTaskSuspend(ShowFilesHandle);
 8002dc8:	4b3d      	ldr	r3, [pc, #244]	; (8002ec0 <Start_Init+0x12c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f00a fd97 	bl	800d900 <vTaskSuspend>
    vTaskSuspend(ShowFileDataHandle);
 8002dd2:	4b3c      	ldr	r3, [pc, #240]	; (8002ec4 <Start_Init+0x130>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f00a fd92 	bl	800d900 <vTaskSuspend>
    vTaskSuspend(CloneHandle);
 8002ddc:	4b3a      	ldr	r3, [pc, #232]	; (8002ec8 <Start_Init+0x134>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f00a fd8d 	bl	800d900 <vTaskSuspend>
    vTaskSuspend(KeyboardHandle);
 8002de6:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <Start_Init+0x138>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f00a fd88 	bl	800d900 <vTaskSuspend>

    MFRC_INIT();
 8002df0:	f7fd fff8 	bl	8000de4 <MFRC_INIT>
    MFRC_ANTOFF();
 8002df4:	f7fd ffae 	bl	8000d54 <MFRC_ANTOFF>
    OLED_INIT();
 8002df8:	f7fe fc22 	bl	8001640 <OLED_INIT>
    OLED_Print(TC);
 8002dfc:	4834      	ldr	r0, [pc, #208]	; (8002ed0 <Start_Init+0x13c>)
 8002dfe:	f7fe fd60 	bl	80018c2 <OLED_Print>
    MEM_INIT();
 8002e02:	f7ff fa41 	bl	8002288 <MEM_INIT>
    memory_reset();
 8002e06:	f7ff fbea 	bl	80025de <memory_reset>

    uint8_t fake_contents[64] = {0x04, 0x41, 0xBF, 0x72,
 8002e0a:	4b32      	ldr	r3, [pc, #200]	; (8002ed4 <Start_Init+0x140>)
 8002e0c:	f107 0408 	add.w	r4, r7, #8
 8002e10:	461d      	mov	r5, r3
 8002e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e1e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002e22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    							0x00, 0x01, 0x00, 0x01,
    							0x00, 0x01, 0x00, 0x01,
    							0x00, 0x00, 0x00, 0x00,
    							0x00, 0x00, 0x00, 0x00,
    							0x00, 0x00, 0x00, 0x63};
    uint8_t uid[7] = {0x04, 0x41, 0xBF, 0x72, 0x1A, 0x06, 0x6C};
 8002e26:	4a2c      	ldr	r2, [pc, #176]	; (8002ed8 <Start_Init+0x144>)
 8002e28:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e30:	6018      	str	r0, [r3, #0]
 8002e32:	3304      	adds	r3, #4
 8002e34:	8019      	strh	r1, [r3, #0]
 8002e36:	3302      	adds	r3, #2
 8002e38:	0c0a      	lsrs	r2, r1, #16
 8002e3a:	701a      	strb	r2, [r3, #0]

    Card fake_card = {
 8002e3c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e42:	2307      	movs	r3, #7
 8002e44:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8002e48:	4b24      	ldr	r3, [pc, #144]	; (8002edc <Start_Init+0x148>)
 8002e4a:	657b      	str	r3, [r7, #84]	; 0x54
 8002e4c:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <Start_Init+0x14c>)
 8002e4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e50:	2300      	movs	r3, #0
 8002e52:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8002e56:	f107 0308 	add.w	r3, r7, #8
 8002e5a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e5c:	2340      	movs	r3, #64	; 0x40
 8002e5e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    	.uidsize = 7,
		.name = "fake",
		.type = "MIFARE Ultralight",
		.read_protected = 0
    };
    enter_card(&fake_card, 0, "fake");
 8002e62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e66:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <Start_Init+0x148>)
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fb55 	bl	800351a <enter_card>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) != 0);
 8002e70:	bf00      	nop
 8002e72:	2102      	movs	r1, #2
 8002e74:	481b      	ldr	r0, [pc, #108]	; (8002ee4 <Start_Init+0x150>)
 8002e76:	f001 fbc9 	bl	800460c <HAL_GPIO_ReadPin>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f8      	bne.n	8002e72 <Start_Init+0xde>
    osDelay(10);
 8002e80:	200a      	movs	r0, #10
 8002e82:	f009 fcca 	bl	800c81a <osDelay>
    uint8_t clear = NO_PRESS;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    xQueueSend(UserInputHandle, &clear, 0);
 8002e8c:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <Start_Init+0x154>)
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8002e94:	2300      	movs	r3, #0
 8002e96:	2200      	movs	r2, #0
 8002e98:	f009 ff74 	bl	800cd84 <xQueueGenericSend>
    vTaskResume(HomeHandle);
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <Start_Init+0x124>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f00a fdd5 	bl	800da50 <vTaskResume>
    vTaskSuspend(NULL);
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	f00a fd2a 	bl	800d900 <vTaskSuspend>
  {
 8002eac:	e778      	b.n	8002da0 <Start_Init+0xc>
 8002eae:	bf00      	nop
 8002eb0:	200008b4 	.word	0x200008b4
 8002eb4:	200008b8 	.word	0x200008b8
 8002eb8:	200008bc 	.word	0x200008bc
 8002ebc:	200008c0 	.word	0x200008c0
 8002ec0:	200008c4 	.word	0x200008c4
 8002ec4:	200008c8 	.word	0x200008c8
 8002ec8:	200008cc 	.word	0x200008cc
 8002ecc:	200008d0 	.word	0x200008d0
 8002ed0:	20000400 	.word	0x20000400
 8002ed4:	080109b0 	.word	0x080109b0
 8002ed8:	080109f0 	.word	0x080109f0
 8002edc:	08010994 	.word	0x08010994
 8002ee0:	0801099c 	.word	0x0801099c
 8002ee4:	40020000 	.word	0x40020000
 8002ee8:	200008d8 	.word	0x200008d8

08002eec <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 8002eec:	b590      	push	{r4, r7, lr}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 8002ef4:	201c      	movs	r0, #28
 8002ef6:	f00c ffcd 	bl	800fe94 <malloc>
 8002efa:	4603      	mov	r3, r0
 8002efc:	60bb      	str	r3, [r7, #8]
	read_card->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 8002efe:	68bc      	ldr	r4, [r7, #8]
 8002f00:	2040      	movs	r0, #64	; 0x40
 8002f02:	f00c ffc7 	bl	800fe94 <malloc>
 8002f06:	4603      	mov	r3, r0
 8002f08:	6163      	str	r3, [r4, #20]
	read_card->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8002f0a:	68bc      	ldr	r4, [r7, #8]
 8002f0c:	2007      	movs	r0, #7
 8002f0e:	f00c ffc1 	bl	800fe94 <malloc>
 8002f12:	4603      	mov	r3, r0
 8002f14:	6023      	str	r3, [r4, #0]
	int ranonce = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	MFRC_ANTON();
 8002f1a:	f7fd fee1 	bl	8000ce0 <MFRC_ANTON>
	if (ranonce == 0){
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d106      	bne.n	8002f32 <StartReadCard+0x46>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 8002f24:	2100      	movs	r1, #0
 8002f26:	4812      	ldr	r0, [pc, #72]	; (8002f70 <StartReadCard+0x84>)
 8002f28:	f7fe fd96 	bl	8001a58 <OLED_SCREEN>
		ranonce++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	60fb      	str	r3, [r7, #12]
	}
	if(UL_readcard(read_card) == PCD_OK){
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe f9b5 	bl	80012a4 <UL_readcard>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2bcc      	cmp	r3, #204	; 0xcc
 8002f3e:	d1ec      	bne.n	8002f1a <StartReadCard+0x2e>
			BUZZ();
 8002f40:	f7ff fba6 	bl	8002690 <BUZZ>
			MFRC_ANTOFF();
 8002f44:	f7fd ff06 	bl	8000d54 <MFRC_ANTOFF>
			xQueueSend(UidtoFoundHandle,&read_card,0);
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <StartReadCard+0x88>)
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	f107 0108 	add.w	r1, r7, #8
 8002f50:	2300      	movs	r3, #0
 8002f52:	2200      	movs	r2, #0
 8002f54:	f009 ff16 	bl	800cd84 <xQueueGenericSend>
			vTaskResume(CardFoundHandle);
 8002f58:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <StartReadCard+0x8c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f00a fd77 	bl	800da50 <vTaskResume>
			ranonce = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
			vTaskSuspend(NULL);
 8002f66:	2000      	movs	r0, #0
 8002f68:	f00a fcca 	bl	800d900 <vTaskSuspend>
	MFRC_ANTON();
 8002f6c:	e7d5      	b.n	8002f1a <StartReadCard+0x2e>
 8002f6e:	bf00      	nop
 8002f70:	080110f4 	.word	0x080110f4
 8002f74:	200008d4 	.word	0x200008d4
 8002f78:	200008c0 	.word	0x200008c0

08002f7c <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
	uint8_t file_select_count = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	75fb      	strb	r3, [r7, #23]
	int ranonce = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61fb      	str	r3, [r7, #28]
	Button_StateTypeDef button_state;
	Card* towrite = NULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <StartWriteCard+0x28>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 8002f96:	2100      	movs	r1, #0
 8002f98:	481e      	ldr	r0, [pc, #120]	; (8003014 <StartWriteCard+0x98>)
 8002f9a:	f7fe fd5d 	bl	8001a58 <OLED_SCREEN>
	  	ranonce++;
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	61fb      	str	r3, [r7, #28]

	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8002fa4:	4b1c      	ldr	r3, [pc, #112]	; (8003018 <StartWriteCard+0x9c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f107 010f 	add.w	r1, r7, #15
 8002fac:	2200      	movs	r2, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f00a f882 	bl	800d0b8 <xQueueReceive>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d1ea      	bne.n	8002f90 <StartWriteCard+0x14>
		  if (button_state == SHORT_PRESS) {
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d11c      	bne.n	8002ffa <StartWriteCard+0x7e>
			  if (entry_present(file_select_count) == RFS_OK) {
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fd30 	bl	8003a2a <entry_present>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1df      	bne.n	8002f90 <StartWriteCard+0x14>
				  towrite = read_card_entry(file_select_count);
 8002fd0:	7dfb      	ldrb	r3, [r7, #23]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fb58 	bl	800368a <read_card_entry>
 8002fda:	61b8      	str	r0, [r7, #24]
				  char* file_name = get_file_name(file_select_count);
 8002fdc:	7dfb      	ldrb	r3, [r7, #23]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fd3f 	bl	8003a64 <get_file_name>
 8002fe6:	6138      	str	r0, [r7, #16]
				  OLED_SCRNREF(&SCRN_WriteCard, WRITE_SRC_LOC, file_name);
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	2102      	movs	r1, #2
 8002fec:	4809      	ldr	r0, [pc, #36]	; (8003014 <StartWriteCard+0x98>)
 8002fee:	f7fe fd6c 	bl	8001aca <OLED_SCRNREF>
				  free(file_name);
 8002ff2:	6938      	ldr	r0, [r7, #16]
 8002ff4:	f00c ff56 	bl	800fea4 <free>
 8002ff8:	e7ca      	b.n	8002f90 <StartWriteCard+0x14>
			  }

		  } else if ((button_state == LONG_PRESS) && (towrite != NULL)) {
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d1c7      	bne.n	8002f90 <StartWriteCard+0x14>
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0c4      	beq.n	8002f90 <StartWriteCard+0x14>
			  	ranonce= 0;
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
			  	write_card(towrite);
 800300a:	69b8      	ldr	r0, [r7, #24]
 800300c:	f7ff fb52 	bl	80026b4 <write_card>
	  if (ranonce == 0){
 8003010:	e7be      	b.n	8002f90 <StartWriteCard+0x14>
 8003012:	bf00      	nop
 8003014:	0801111c 	.word	0x0801111c
 8003018:	200008d8 	.word	0x200008d8

0800301c <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint8_t select_index = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0) {
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10c      	bne.n	800304c <StartHome+0x30>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 8003032:	2100      	movs	r1, #0
 8003034:	4828      	ldr	r0, [pc, #160]	; (80030d8 <StartHome+0xbc>)
 8003036:	f7fe fd0f 	bl	8001a58 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, select_index, OLED_RESTORE);
 800303a:	7afb      	ldrb	r3, [r7, #11]
 800303c:	2201      	movs	r2, #1
 800303e:	4619      	mov	r1, r3
 8003040:	4825      	ldr	r0, [pc, #148]	; (80030d8 <StartHome+0xbc>)
 8003042:	f7fe fd73 	bl	8001b2c <OLED_SELECT>
		  ranonce++;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3301      	adds	r3, #1
 800304a:	60fb      	str	r3, [r7, #12]
	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 800304c:	4b23      	ldr	r3, [pc, #140]	; (80030dc <StartHome+0xc0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f107 010a 	add.w	r1, r7, #10
 8003054:	2200      	movs	r2, #0
 8003056:	4618      	mov	r0, r3
 8003058:	f00a f82e 	bl	800d0b8 <xQueueReceive>
 800305c:	4603      	mov	r3, r0
 800305e:	2b01      	cmp	r3, #1
 8003060:	d1e4      	bne.n	800302c <StartHome+0x10>
		  if (button_state == SHORT_PRESS) {
 8003062:	7abb      	ldrb	r3, [r7, #10]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d107      	bne.n	8003078 <StartHome+0x5c>
			  oled_move_selection(&SCRN_Home, &select_index, OLED_RESTORE);
 8003068:	f107 030b 	add.w	r3, r7, #11
 800306c:	2201      	movs	r2, #1
 800306e:	4619      	mov	r1, r3
 8003070:	4819      	ldr	r0, [pc, #100]	; (80030d8 <StartHome+0xbc>)
 8003072:	f7fe ff2d 	bl	8001ed0 <oled_move_selection>
 8003076:	e7d9      	b.n	800302c <StartHome+0x10>
		  } else if (button_state == LONG_PRESS) {
 8003078:	7abb      	ldrb	r3, [r7, #10]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d1d6      	bne.n	800302c <StartHome+0x10>
			  switch(select_index) {
 800307e:	7afb      	ldrb	r3, [r7, #11]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d823      	bhi.n	80030cc <StartHome+0xb0>
 8003084:	a201      	add	r2, pc, #4	; (adr r2, 800308c <StartHome+0x70>)
 8003086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308a:	bf00      	nop
 800308c:	0800309d 	.word	0x0800309d
 8003090:	080030a9 	.word	0x080030a9
 8003094:	080030b5 	.word	0x080030b5
 8003098:	080030c1 	.word	0x080030c1
			  	  case 0:
			  		  vTaskResume(ReadCardHandle);
 800309c:	4b10      	ldr	r3, [pc, #64]	; (80030e0 <StartHome+0xc4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f00a fcd5 	bl	800da50 <vTaskResume>
			  		  break;
 80030a6:	e011      	b.n	80030cc <StartHome+0xb0>
			  	  case 1:
			  		  vTaskResume(WriteCardHandle);
 80030a8:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <StartHome+0xc8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f00a fccf 	bl	800da50 <vTaskResume>
			  		  break;
 80030b2:	e00b      	b.n	80030cc <StartHome+0xb0>
			  	  case 2:
			  		  vTaskResume(ShowFilesHandle);
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <StartHome+0xcc>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f00a fcc9 	bl	800da50 <vTaskResume>
			  		  break;
 80030be:	e005      	b.n	80030cc <StartHome+0xb0>
			  	  case 3:
			  		  vTaskResume(CloneHandle);
 80030c0:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <StartHome+0xd0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f00a fcc3 	bl	800da50 <vTaskResume>
			  		  break;
 80030ca:	bf00      	nop
			  }
			  ranonce = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	60fb      	str	r3, [r7, #12]
			  vTaskSuspend(NULL);
 80030d0:	2000      	movs	r0, #0
 80030d2:	f00a fc15 	bl	800d900 <vTaskSuspend>
	  if (ranonce == 0) {
 80030d6:	e7a9      	b.n	800302c <StartHome+0x10>
 80030d8:	080110e0 	.word	0x080110e0
 80030dc:	200008d8 	.word	0x200008d8
 80030e0:	200008b4 	.word	0x200008b4
 80030e4:	200008b8 	.word	0x200008b8
 80030e8:	200008c4 	.word	0x200008c4
 80030ec:	200008cc 	.word	0x200008cc

080030f0 <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b089      	sub	sp, #36	; 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	uint8_t select_index = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	75fb      	strb	r3, [r7, #23]
	int ranonce = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61fb      	str	r3, [r7, #28]
	Button_StateTypeDef button_state;
	Card* read_card;
	char* card_name = NULL;
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	if (ranonce == 0) {
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d130      	bne.n	800316c <CardFoundStart+0x7c>
		while(xQueueReceive(UidtoFoundHandle, &read_card, 0) != pdTRUE);
 800310a:	bf00      	nop
 800310c:	4b3c      	ldr	r3, [pc, #240]	; (8003200 <CardFoundStart+0x110>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f107 0110 	add.w	r1, r7, #16
 8003114:	2200      	movs	r2, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f009 ffce 	bl	800d0b8 <xQueueReceive>
 800311c:	4603      	mov	r3, r0
 800311e:	2b01      	cmp	r3, #1
 8003120:	d1f4      	bne.n	800310c <CardFoundStart+0x1c>
		char* uid_str = uid_tostring(read_card->uid, read_card->uidsize);
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	791b      	ldrb	r3, [r3, #4]
 800312a:	4619      	mov	r1, r3
 800312c:	4610      	mov	r0, r2
 800312e:	f7fe f929 	bl	8001384 <uid_tostring>
 8003132:	61b8      	str	r0, [r7, #24]
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 8003134:	2100      	movs	r1, #0
 8003136:	4833      	ldr	r0, [pc, #204]	; (8003204 <CardFoundStart+0x114>)
 8003138:	f7fe fc8e 	bl	8001a58 <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_UID_LOC, uid_str);
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	2101      	movs	r1, #1
 8003140:	4830      	ldr	r0, [pc, #192]	; (8003204 <CardFoundStart+0x114>)
 8003142:	f7fe fcc2 	bl	8001aca <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_CARDTYPE_LOC, read_card->type);
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	461a      	mov	r2, r3
 800314c:	2102      	movs	r1, #2
 800314e:	482d      	ldr	r0, [pc, #180]	; (8003204 <CardFoundStart+0x114>)
 8003150:	f7fe fcbb 	bl	8001aca <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, select_index, OLED_NORESTORE);
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	2200      	movs	r2, #0
 8003158:	4619      	mov	r1, r3
 800315a:	482a      	ldr	r0, [pc, #168]	; (8003204 <CardFoundStart+0x114>)
 800315c:	f7fe fce6 	bl	8001b2c <OLED_SELECT>
		ranonce++;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	3301      	adds	r3, #1
 8003164:	61fb      	str	r3, [r7, #28]
		free(uid_str);
 8003166:	69b8      	ldr	r0, [r7, #24]
 8003168:	f00c fe9c 	bl	800fea4 <free>
	}

 	if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 800316c:	4b26      	ldr	r3, [pc, #152]	; (8003208 <CardFoundStart+0x118>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f107 0116 	add.w	r1, r7, #22
 8003174:	2200      	movs	r2, #0
 8003176:	4618      	mov	r0, r3
 8003178:	f009 ff9e 	bl	800d0b8 <xQueueReceive>
 800317c:	4603      	mov	r3, r0
 800317e:	2b01      	cmp	r3, #1
 8003180:	d1c0      	bne.n	8003104 <CardFoundStart+0x14>
 		if (button_state == SHORT_PRESS) {
 8003182:	7dbb      	ldrb	r3, [r7, #22]
 8003184:	2b02      	cmp	r3, #2
 8003186:	d107      	bne.n	8003198 <CardFoundStart+0xa8>
 			oled_move_selection(&SCRN_CardFound, &select_index, OLED_NORESTORE);
 8003188:	f107 0317 	add.w	r3, r7, #23
 800318c:	2200      	movs	r2, #0
 800318e:	4619      	mov	r1, r3
 8003190:	481c      	ldr	r0, [pc, #112]	; (8003204 <CardFoundStart+0x114>)
 8003192:	f7fe fe9d 	bl	8001ed0 <oled_move_selection>
 8003196:	e7b5      	b.n	8003104 <CardFoundStart+0x14>
 		} else if (button_state == LONG_PRESS) {
 8003198:	7dbb      	ldrb	r3, [r7, #22]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d1b2      	bne.n	8003104 <CardFoundStart+0x14>
 			if (select_index == 0) {
 800319e:	7dfb      	ldrb	r3, [r7, #23]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d121      	bne.n	80031e8 <CardFoundStart+0xf8>

 				vTaskResume(KeyboardHandle);
 80031a4:	4b19      	ldr	r3, [pc, #100]	; (800320c <CardFoundStart+0x11c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f00a fc51 	bl	800da50 <vTaskResume>

 				while(xQueueReceive(KeyboardOutHandle, &card_name, 0) != pdTRUE) {
 80031ae:	e002      	b.n	80031b6 <CardFoundStart+0xc6>
 					osDelay(1); //wait until keyboard is finished
 80031b0:	2001      	movs	r0, #1
 80031b2:	f009 fb32 	bl	800c81a <osDelay>
 				while(xQueueReceive(KeyboardOutHandle, &card_name, 0) != pdTRUE) {
 80031b6:	4b16      	ldr	r3, [pc, #88]	; (8003210 <CardFoundStart+0x120>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f107 010c 	add.w	r1, r7, #12
 80031be:	2200      	movs	r2, #0
 80031c0:	4618      	mov	r0, r3
 80031c2:	f009 ff79 	bl	800d0b8 <xQueueReceive>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d1f1      	bne.n	80031b0 <CardFoundStart+0xc0>
 				}
 				enter_card(read_card, mem_find_free_block(), card_name);
 80031cc:	693c      	ldr	r4, [r7, #16]
 80031ce:	f7ff f9df 	bl	8002590 <mem_find_free_block>
 80031d2:	4603      	mov	r3, r0
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4619      	mov	r1, r3
 80031da:	4620      	mov	r0, r4
 80031dc:	f000 f99d 	bl	800351a <enter_card>
 				free(card_name);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f00c fe5e 	bl	800fea4 <free>
 			}
 			vTaskResume(HomeHandle);
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <CardFoundStart+0x124>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f00a fc2f 	bl	800da50 <vTaskResume>
 			ranonce = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
 			vTaskSuspend(NULL);
 80031f6:	2000      	movs	r0, #0
 80031f8:	f00a fb82 	bl	800d900 <vTaskSuspend>
	if (ranonce == 0) {
 80031fc:	e782      	b.n	8003104 <CardFoundStart+0x14>
 80031fe:	bf00      	nop
 8003200:	200008d4 	.word	0x200008d4
 8003204:	08011108 	.word	0x08011108
 8003208:	200008d8 	.word	0x200008d8
 800320c:	200008d0 	.word	0x200008d0
 8003210:	200008e0 	.word	0x200008e0
 8003214:	200008bc 	.word	0x200008bc

08003218 <StartShowFiles>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFiles */
void StartShowFiles(void *argument)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFiles */
	uint8_t select_index = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
	/* Infinite loop */
  for(;;)
  {

	  if (ranonce == 0) {
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d110      	bne.n	8003250 <StartShowFiles+0x38>
		  OLED_SCREEN(&SCRN_ShowFiles, NORMAL);
 800322e:	2100      	movs	r1, #0
 8003230:	4827      	ldr	r0, [pc, #156]	; (80032d0 <StartShowFiles+0xb8>)
 8003232:	f7fe fc11 	bl	8001a58 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_ShowFiles, select_index, OLED_RESTORE);
 8003236:	7afb      	ldrb	r3, [r7, #11]
 8003238:	2201      	movs	r2, #1
 800323a:	4619      	mov	r1, r3
 800323c:	4824      	ldr	r0, [pc, #144]	; (80032d0 <StartShowFiles+0xb8>)
 800323e:	f7fe fc75 	bl	8001b2c <OLED_SELECT>
		  OLED_display_files(&SCRN_ShowFiles, 0);
 8003242:	2100      	movs	r1, #0
 8003244:	4822      	ldr	r0, [pc, #136]	; (80032d0 <StartShowFiles+0xb8>)
 8003246:	f7fe fd4d 	bl	8001ce4 <OLED_display_files>
		  ranonce++;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3301      	adds	r3, #1
 800324e:	60fb      	str	r3, [r7, #12]
	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003250:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <StartShowFiles+0xbc>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f107 010a 	add.w	r1, r7, #10
 8003258:	2200      	movs	r2, #0
 800325a:	4618      	mov	r0, r3
 800325c:	f009 ff2c 	bl	800d0b8 <xQueueReceive>
 8003260:	4603      	mov	r3, r0
 8003262:	2b01      	cmp	r3, #1
 8003264:	d1e0      	bne.n	8003228 <StartShowFiles+0x10>
		  if (button_state == SHORT_PRESS) {
 8003266:	7abb      	ldrb	r3, [r7, #10]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d107      	bne.n	800327c <StartShowFiles+0x64>

			  oled_move_selection(&SCRN_ShowFiles, &select_index, OLED_RESTORE);
 800326c:	f107 030b 	add.w	r3, r7, #11
 8003270:	2201      	movs	r2, #1
 8003272:	4619      	mov	r1, r3
 8003274:	4816      	ldr	r0, [pc, #88]	; (80032d0 <StartShowFiles+0xb8>)
 8003276:	f7fe fe2b 	bl	8001ed0 <oled_move_selection>
 800327a:	e7d5      	b.n	8003228 <StartShowFiles+0x10>

		  } else if (button_state == LONG_PRESS) {
 800327c:	7abb      	ldrb	r3, [r7, #10]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d1d2      	bne.n	8003228 <StartShowFiles+0x10>

			  if (select_index == SHOWFILES_EXIT_LOC) {
 8003282:	7afb      	ldrb	r3, [r7, #11]
 8003284:	2b03      	cmp	r3, #3
 8003286:	d105      	bne.n	8003294 <StartShowFiles+0x7c>
				  vTaskResume(HomeHandle);
 8003288:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <StartShowFiles+0xc0>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f00a fbdf 	bl	800da50 <vTaskResume>
 8003292:	e017      	b.n	80032c4 <StartShowFiles+0xac>

			  } else if ((entry_present(select_index) == RFS_OK)) {
 8003294:	7afb      	ldrb	r3, [r7, #11]
 8003296:	b29b      	uxth	r3, r3
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fbc6 	bl	8003a2a <entry_present>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10f      	bne.n	80032c4 <StartShowFiles+0xac>
				  uint16_t entry = select_index;
 80032a4:	7afb      	ldrb	r3, [r7, #11]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	813b      	strh	r3, [r7, #8]
				  xQueueSend(FileEntryHandle, &entry, 0);
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <StartShowFiles+0xc4>)
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	f107 0108 	add.w	r1, r7, #8
 80032b2:	2300      	movs	r3, #0
 80032b4:	2200      	movs	r2, #0
 80032b6:	f009 fd65 	bl	800cd84 <xQueueGenericSend>
				  vTaskResume(ShowFileDataHandle);
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <StartShowFiles+0xc8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f00a fbc6 	bl	800da50 <vTaskResume>

			  }
			  ranonce = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
			  vTaskSuspend(NULL);
 80032c8:	2000      	movs	r0, #0
 80032ca:	f00a fb19 	bl	800d900 <vTaskSuspend>
	  if (ranonce == 0) {
 80032ce:	e7ab      	b.n	8003228 <StartShowFiles+0x10>
 80032d0:	08011130 	.word	0x08011130
 80032d4:	200008d8 	.word	0x200008d8
 80032d8:	200008bc 	.word	0x200008bc
 80032dc:	200008dc 	.word	0x200008dc
 80032e0:	200008c8 	.word	0x200008c8

080032e4 <StartShowFileData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFileData */
void StartShowFileData(void *argument)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFileData */
	uint8_t select_index = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
	uint16_t entry_to_show;
  /* Infinite loop */
  for(;;)
  {

    if (ranonce == 0) {
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d112      	bne.n	8003320 <StartShowFileData+0x3c>
    	while(xQueueReceive(FileEntryHandle, &entry_to_show, 0) != pdTRUE);
 80032fa:	bf00      	nop
 80032fc:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <StartShowFileData+0x94>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f107 0108 	add.w	r1, r7, #8
 8003304:	2200      	movs	r2, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f009 fed6 	bl	800d0b8 <xQueueReceive>
 800330c:	4603      	mov	r3, r0
 800330e:	2b01      	cmp	r3, #1
 8003310:	d1f4      	bne.n	80032fc <StartShowFileData+0x18>
    	oled_show_file(entry_to_show);
 8003312:	893b      	ldrh	r3, [r7, #8]
 8003314:	4618      	mov	r0, r3
 8003316:	f7fe fd9b 	bl	8001e50 <oled_show_file>
    	ranonce++;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3301      	adds	r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003320:	4b16      	ldr	r3, [pc, #88]	; (800337c <StartShowFileData+0x98>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f107 010a 	add.w	r1, r7, #10
 8003328:	2200      	movs	r2, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f009 fec4 	bl	800d0b8 <xQueueReceive>
 8003330:	4603      	mov	r3, r0
 8003332:	2b01      	cmp	r3, #1
 8003334:	d1de      	bne.n	80032f4 <StartShowFileData+0x10>
    	if (button_state == SHORT_PRESS) {
 8003336:	7abb      	ldrb	r3, [r7, #10]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d107      	bne.n	800334c <StartShowFileData+0x68>
    		oled_move_selection(&SCRN_FileData, &select_index, OLED_NORESTORE);
 800333c:	f107 030b 	add.w	r3, r7, #11
 8003340:	2200      	movs	r2, #0
 8003342:	4619      	mov	r1, r3
 8003344:	480e      	ldr	r0, [pc, #56]	; (8003380 <StartShowFileData+0x9c>)
 8003346:	f7fe fdc3 	bl	8001ed0 <oled_move_selection>
 800334a:	e7d3      	b.n	80032f4 <StartShowFileData+0x10>
    	} else if (button_state == LONG_PRESS) {
 800334c:	7abb      	ldrb	r3, [r7, #10]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d1d0      	bne.n	80032f4 <StartShowFileData+0x10>
    		if (select_index == SHOWFILE_DELETE_LOC) {
 8003352:	7afb      	ldrb	r3, [r7, #11]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d103      	bne.n	8003360 <StartShowFileData+0x7c>
    			remove_card(entry_to_show);
 8003358:	893b      	ldrh	r3, [r7, #8]
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fbaf 	bl	8003abe <remove_card>
    		}
    		vTaskResume(ShowFilesHandle);
 8003360:	4b08      	ldr	r3, [pc, #32]	; (8003384 <StartShowFileData+0xa0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f00a fb73 	bl	800da50 <vTaskResume>
    		ranonce = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
    		vTaskSuspend(NULL);
 800336e:	2000      	movs	r0, #0
 8003370:	f00a fac6 	bl	800d900 <vTaskSuspend>
    if (ranonce == 0) {
 8003374:	e7be      	b.n	80032f4 <StartShowFileData+0x10>
 8003376:	bf00      	nop
 8003378:	200008dc 	.word	0x200008dc
 800337c:	200008d8 	.word	0x200008d8
 8003380:	08011144 	.word	0x08011144
 8003384:	200008c4 	.word	0x200008c4

08003388 <StartClone>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClone */
void StartClone(void *argument)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartClone */
	int ranonce = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 8003394:	201c      	movs	r0, #28
 8003396:	f00c fd7d 	bl	800fe94 <malloc>
 800339a:	4603      	mov	r3, r0
 800339c:	60bb      	str	r3, [r7, #8]
	read_card->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 800339e:	2040      	movs	r0, #64	; 0x40
 80033a0:	f00c fd78 	bl	800fe94 <malloc>
 80033a4:	4603      	mov	r3, r0
 80033a6:	461a      	mov	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	615a      	str	r2, [r3, #20]
	read_card->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 80033ac:	2007      	movs	r0, #7
 80033ae:	f00c fd71 	bl	800fe94 <malloc>
 80033b2:	4603      	mov	r3, r0
 80033b4:	461a      	mov	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	MFRC_ANTON();
 80033ba:	f7fd fc91 	bl	8000ce0 <MFRC_ANTON>
    if (ranonce == 0) {
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d106      	bne.n	80033d2 <StartClone+0x4a>
    	OLED_SCREEN(&SCRN_Clone, NORMAL);
 80033c4:	2100      	movs	r1, #0
 80033c6:	4817      	ldr	r0, [pc, #92]	; (8003424 <StartClone+0x9c>)
 80033c8:	f7fe fb46 	bl	8001a58 <OLED_SCREEN>
    	ranonce++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3301      	adds	r3, #1
 80033d0:	60fb      	str	r3, [r7, #12]
    }

    if (UL_readcard(read_card) == PCD_OK) {
 80033d2:	68b8      	ldr	r0, [r7, #8]
 80033d4:	f7fd ff66 	bl	80012a4 <UL_readcard>
 80033d8:	4603      	mov	r3, r0
 80033da:	2bcc      	cmp	r3, #204	; 0xcc
 80033dc:	d1ed      	bne.n	80033ba <StartClone+0x32>
    	MFRC_HALTA(); //De-select card
 80033de:	f7fd fd95 	bl	8000f0c <MFRC_HALTA>
    	BUZZ();
 80033e2:	f7ff f955 	bl	8002690 <BUZZ>
    	OLED_Clear();
 80033e6:	f7fe f86c 	bl	80014c2 <OLED_Clear>
    	OLED_PrintCent(2, "PLACE CARD YOU WISH", NORMAL);
 80033ea:	2200      	movs	r2, #0
 80033ec:	490e      	ldr	r1, [pc, #56]	; (8003428 <StartClone+0xa0>)
 80033ee:	2002      	movs	r0, #2
 80033f0:	f7fe fa43 	bl	800187a <OLED_PrintCent>
    	OLED_PrintCent(4, "TO COPY TO", NORMAL);
 80033f4:	2200      	movs	r2, #0
 80033f6:	490d      	ldr	r1, [pc, #52]	; (800342c <StartClone+0xa4>)
 80033f8:	2004      	movs	r0, #4
 80033fa:	f7fe fa3e 	bl	800187a <OLED_PrintCent>
    	while(PICC_CHECK() == PCD_OK); //Hang until read card is removed
 80033fe:	bf00      	nop
 8003400:	f7fd fe92 	bl	8001128 <PICC_CHECK>
 8003404:	4603      	mov	r3, r0
 8003406:	2bcc      	cmp	r3, #204	; 0xcc
 8003408:	d0fa      	beq.n	8003400 <StartClone+0x78>
    	while(PICC_CHECK() != PCD_OK); //Hang until new card is placed
 800340a:	bf00      	nop
 800340c:	f7fd fe8c 	bl	8001128 <PICC_CHECK>
 8003410:	4603      	mov	r3, r0
 8003412:	2bcc      	cmp	r3, #204	; 0xcc
 8003414:	d1fa      	bne.n	800340c <StartClone+0x84>
    	ranonce = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
    	write_card(read_card);
 800341a:	68b8      	ldr	r0, [r7, #8]
 800341c:	f7ff f94a 	bl	80026b4 <write_card>
	MFRC_ANTON();
 8003420:	e7cb      	b.n	80033ba <StartClone+0x32>
 8003422:	bf00      	nop
 8003424:	08011158 	.word	0x08011158
 8003428:	080109f8 	.word	0x080109f8
 800342c:	08010a0c 	.word	0x08010a0c

08003430 <StartKeyboard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKeyboard */
void StartKeyboard(void *argument)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKeyboard */
	uint8_t select_index = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	74fb      	strb	r3, [r7, #19]
	int ranonce = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
	Button_StateTypeDef button_state;
	char* input = NULL;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    if (ranonce == 0) {
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10d      	bne.n	8003466 <StartKeyboard+0x36>
    	OLED_Clear();
 800344a:	f7fe f83a 	bl	80014c2 <OLED_Clear>
    	OLED_SCREEN(&SCRN_Keyboard, NORMAL);
 800344e:	2100      	movs	r1, #0
 8003450:	4823      	ldr	r0, [pc, #140]	; (80034e0 <StartKeyboard+0xb0>)
 8003452:	f7fe fb01 	bl	8001a58 <OLED_SCREEN>
    	OLED_select_inv(&SCRN_Keyboard, select_index);
 8003456:	7cfb      	ldrb	r3, [r7, #19]
 8003458:	4619      	mov	r1, r3
 800345a:	4821      	ldr	r0, [pc, #132]	; (80034e0 <StartKeyboard+0xb0>)
 800345c:	f7fe fbdc 	bl	8001c18 <OLED_select_inv>
    	ranonce++;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3301      	adds	r3, #1
 8003464:	617b      	str	r3, [r7, #20]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003466:	4b1f      	ldr	r3, [pc, #124]	; (80034e4 <StartKeyboard+0xb4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f107 0112 	add.w	r1, r7, #18
 800346e:	2200      	movs	r2, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f009 fe21 	bl	800d0b8 <xQueueReceive>
 8003476:	4603      	mov	r3, r0
 8003478:	2b01      	cmp	r3, #1
 800347a:	d1e3      	bne.n	8003444 <StartKeyboard+0x14>
    	if (button_state == SHORT_PRESS) {
 800347c:	7cbb      	ldrb	r3, [r7, #18]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d106      	bne.n	8003490 <StartKeyboard+0x60>
    		oled_move_selection_inv(&SCRN_Keyboard, &select_index);
 8003482:	f107 0313 	add.w	r3, r7, #19
 8003486:	4619      	mov	r1, r3
 8003488:	4815      	ldr	r0, [pc, #84]	; (80034e0 <StartKeyboard+0xb0>)
 800348a:	f7fe fd47 	bl	8001f1c <oled_move_selection_inv>
 800348e:	e7d9      	b.n	8003444 <StartKeyboard+0x14>
    	} else if (button_state == LONG_PRESS) {
 8003490:	7cbb      	ldrb	r3, [r7, #18]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d1d6      	bne.n	8003444 <StartKeyboard+0x14>
    		if ((select_index <= 25) && (select_index >= 0)) {
 8003496:	7cfb      	ldrb	r3, [r7, #19]
 8003498:	2b19      	cmp	r3, #25
 800349a:	d807      	bhi.n	80034ac <StartKeyboard+0x7c>
    			oled_keyboard_insertChar(select_index, &input);
 800349c:	7cfb      	ldrb	r3, [r7, #19]
 800349e:	f107 020c 	add.w	r2, r7, #12
 80034a2:	4611      	mov	r1, r2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fe fd5d 	bl	8001f64 <oled_keyboard_insertChar>
 80034aa:	e7cb      	b.n	8003444 <StartKeyboard+0x14>
    		} else if (select_index == 26) {
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	2b1a      	cmp	r3, #26
 80034b0:	d105      	bne.n	80034be <StartKeyboard+0x8e>
    			oled_keyboard_removeChar(&input);
 80034b2:	f107 030c 	add.w	r3, r7, #12
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe fd92 	bl	8001fe0 <oled_keyboard_removeChar>
 80034bc:	e7c2      	b.n	8003444 <StartKeyboard+0x14>
    		} else if (select_index == 27) {
 80034be:	7cfb      	ldrb	r3, [r7, #19]
 80034c0:	2b1b      	cmp	r3, #27
 80034c2:	d1bf      	bne.n	8003444 <StartKeyboard+0x14>
    			xQueueSend(KeyboardOutHandle, &input, 0); //See the name user has inputted to queue for other tasks to use
 80034c4:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <StartKeyboard+0xb8>)
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	f107 010c 	add.w	r1, r7, #12
 80034cc:	2300      	movs	r3, #0
 80034ce:	2200      	movs	r2, #0
 80034d0:	f009 fc58 	bl	800cd84 <xQueueGenericSend>
    			ranonce = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
    			vTaskSuspend(NULL); //exit task
 80034d8:	2000      	movs	r0, #0
 80034da:	f00a fa11 	bl	800d900 <vTaskSuspend>
    if (ranonce == 0) {
 80034de:	e7b1      	b.n	8003444 <StartKeyboard+0x14>
 80034e0:	0801116c 	.word	0x0801116c
 80034e4:	200008d8 	.word	0x200008d8
 80034e8:	200008e0 	.word	0x200008e0

080034ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a04      	ldr	r2, [pc, #16]	; (800350c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d101      	bne.n	8003502 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80034fe:	f000 fddb 	bl	80040b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40000c00 	.word	0x40000c00

08003510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003514:	b672      	cpsid	i
}
 8003516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003518:	e7fe      	b.n	8003518 <Error_Handler+0x8>

0800351a <enter_card>:
 *
 * @param card - Card to store
 * @param entry - Entry (Block number) to store card
 * @return RFS_OK if card was successfully stored
 * */
RFS_StatusTypeDef enter_card(Card* card, uint16_t entry, char* name) {
 800351a:	b5b0      	push	{r4, r5, r7, lr}
 800351c:	b086      	sub	sp, #24
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	460b      	mov	r3, r1
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	817b      	strh	r3, [r7, #10]
	uint16_t block_startaddr = entry * BLOCK_PAGECOUNT;
 8003528:	897b      	ldrh	r3, [r7, #10]
 800352a:	019b      	lsls	r3, r3, #6
 800352c:	82fb      	strh	r3, [r7, #22]
	block_erase(entry); //Erase entire block ready for new data
 800352e:	897b      	ldrh	r3, [r7, #10]
 8003530:	4618      	mov	r0, r3
 8003532:	f7fe fe6d 	bl	8002210 <block_erase>
	enter_metadata(card, entry);
 8003536:	897b      	ldrh	r3, [r7, #10]
 8003538:	4619      	mov	r1, r3
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 f842 	bl	80035c4 <enter_metadata>
	card->name = name;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	609a      	str	r2, [r3, #8]

	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000, (uint8_t*)card->name, strlen(card->name)) != HAL_OK) {
 8003546:	8afb      	ldrh	r3, [r7, #22]
 8003548:	3301      	adds	r3, #1
 800354a:	b29c      	uxth	r4, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689d      	ldr	r5, [r3, #8]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4618      	mov	r0, r3
 8003556:	f7fc fe43 	bl	80001e0 <strlen>
 800355a:	4603      	mov	r3, r0
 800355c:	462a      	mov	r2, r5
 800355e:	2100      	movs	r1, #0
 8003560:	4620      	mov	r0, r4
 8003562:	f7fe fead 	bl	80022c0 <MEM_WRITE>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <enter_card+0x56>
		return RFS_WRITE_ERROR;
 800356c:	2304      	movs	r3, #4
 800356e:	e025      	b.n	80035bc <enter_card+0xa2>
	}
	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000 + strlen(card->name),card->uid ,card->uidsize) != HAL_OK) {
 8003570:	8afb      	ldrh	r3, [r7, #22]
 8003572:	3301      	adds	r3, #1
 8003574:	b29c      	uxth	r4, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	4618      	mov	r0, r3
 800357c:	f7fc fe30 	bl	80001e0 <strlen>
 8003580:	4603      	mov	r3, r0
 8003582:	b299      	uxth	r1, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	791b      	ldrb	r3, [r3, #4]
 800358c:	4620      	mov	r0, r4
 800358e:	f7fe fe97 	bl	80022c0 <MEM_WRITE>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <enter_card+0x82>
		return RFS_WRITE_ERROR;
 8003598:	2304      	movs	r3, #4
 800359a:	e00f      	b.n	80035bc <enter_card+0xa2>
	}
	if (MEM_WRITE(block_startaddr + DATAPAGE_OFFSET, 0x0000, card->contents, card->contents_size) != HAL_OK) {
 800359c:	8afb      	ldrh	r3, [r7, #22]
 800359e:	3302      	adds	r3, #2
 80035a0:	b298      	uxth	r0, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8b1b      	ldrh	r3, [r3, #24]
 80035aa:	2100      	movs	r1, #0
 80035ac:	f7fe fe88 	bl	80022c0 <MEM_WRITE>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <enter_card+0xa0>
		return RFS_WRITE_ERROR;
 80035b6:	2304      	movs	r3, #4
 80035b8:	e000      	b.n	80035bc <enter_card+0xa2>
	}

	return RFS_OK;
 80035ba:	2300      	movs	r3, #0

}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bdb0      	pop	{r4, r5, r7, pc}

080035c4 <enter_metadata>:
 * Write the card metadata into a block
 *
 * @param card - Card to write
 * @param block_num - Block number
 * */
RFS_StatusTypeDef enter_metadata(Card* card, uint16_t block_num) {
 80035c4:	b590      	push	{r4, r7, lr}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	807b      	strh	r3, [r7, #2]
	uint8_t card_size = card->contents_size; //Card contents is uint8_t
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8b1b      	ldrh	r3, [r3, #24]
 80035d4:	73fb      	strb	r3, [r7, #15]
	uint8_t read_protected = card->read_protected;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	7c1b      	ldrb	r3, [r3, #16]
 80035da:	73bb      	strb	r3, [r7, #14]
	uint8_t uid_size = card->uidsize;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	791b      	ldrb	r3, [r3, #4]
 80035e0:	737b      	strb	r3, [r7, #13]
	uint8_t metasize = sizeof(card_size) + sizeof(uid_size) + sizeof(read_protected) + strlen(card->type);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fc fdfa 	bl	80001e0 <strlen>
 80035ec:	4603      	mov	r3, r0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	3303      	adds	r3, #3
 80035f2:	733b      	strb	r3, [r7, #12]
	uint8_t* metadata = malloc(metasize);
 80035f4:	7b3b      	ldrb	r3, [r7, #12]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f00c fc4c 	bl	800fe94 <malloc>
 80035fc:	4603      	mov	r3, r0
 80035fe:	60bb      	str	r3, [r7, #8]

	memcpy(metadata, (uint8_t*) card->type, strlen(card->type));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68dc      	ldr	r4, [r3, #12]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4618      	mov	r0, r3
 800360a:	f7fc fde9 	bl	80001e0 <strlen>
 800360e:	4603      	mov	r3, r0
 8003610:	461a      	mov	r2, r3
 8003612:	4621      	mov	r1, r4
 8003614:	68b8      	ldr	r0, [r7, #8]
 8003616:	f00c fc4d 	bl	800feb4 <memcpy>
	metadata[strlen(card->type) + 0] = card_size;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	4618      	mov	r0, r3
 8003620:	f7fc fdde 	bl	80001e0 <strlen>
 8003624:	4602      	mov	r2, r0
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4413      	add	r3, r2
 800362a:	7bfa      	ldrb	r2, [r7, #15]
 800362c:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 1] = uid_size;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	4618      	mov	r0, r3
 8003634:	f7fc fdd4 	bl	80001e0 <strlen>
 8003638:	4603      	mov	r3, r0
 800363a:	3301      	adds	r3, #1
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	4413      	add	r3, r2
 8003640:	7b7a      	ldrb	r2, [r7, #13]
 8003642:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 2] = read_protected;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4618      	mov	r0, r3
 800364a:	f7fc fdc9 	bl	80001e0 <strlen>
 800364e:	4603      	mov	r3, r0
 8003650:	3302      	adds	r3, #2
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	4413      	add	r3, r2
 8003656:	7bba      	ldrb	r2, [r7, #14]
 8003658:	701a      	strb	r2, [r3, #0]

	if (MEM_WRITE(block_num * BLOCK_PAGECOUNT, 0x0000, metadata, metasize) != HAL_OK) {
 800365a:	887b      	ldrh	r3, [r7, #2]
 800365c:	019b      	lsls	r3, r3, #6
 800365e:	b298      	uxth	r0, r3
 8003660:	7b3b      	ldrb	r3, [r7, #12]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	2100      	movs	r1, #0
 8003666:	f7fe fe2b 	bl	80022c0 <MEM_WRITE>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <enter_metadata+0xb6>
		free(metadata);
 8003670:	68b8      	ldr	r0, [r7, #8]
 8003672:	f00c fc17 	bl	800fea4 <free>
		return RFS_WRITE_ERROR;
 8003676:	2304      	movs	r3, #4
 8003678:	e003      	b.n	8003682 <enter_metadata+0xbe>
	}
	free(metadata);
 800367a:	68b8      	ldr	r0, [r7, #8]
 800367c:	f00c fc12 	bl	800fea4 <free>
	return RFS_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	bd90      	pop	{r4, r7, pc}

0800368a <read_card_entry>:
 * Get card from entry number
 *
 * @param entry - Entry number of card
 * @return a new Card instance with read data
 * */
Card* read_card_entry(uint16_t entry) {
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	4603      	mov	r3, r0
 8003692:	80fb      	strh	r3, [r7, #6]
	Card* result = malloc(sizeof(Card));
 8003694:	201c      	movs	r0, #28
 8003696:	f00c fbfd 	bl	800fe94 <malloc>
 800369a:	4603      	mov	r3, r0
 800369c:	60fb      	str	r3, [r7, #12]

	if (read_metadata(result, entry) != RFS_OK) {
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	4619      	mov	r1, r3
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f81e 	bl	80036e4 <read_metadata>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <read_card_entry+0x28>
		return NULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	e014      	b.n	80036dc <read_card_entry+0x52>
	}

	if (read_nameuid(result, entry) != RFS_OK) {
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	4619      	mov	r1, r3
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f881 	bl	80037be <read_nameuid>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <read_card_entry+0x3c>
		return NULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e00a      	b.n	80036dc <read_card_entry+0x52>
	}

	if(read_cardcontents(result, entry) != RFS_OK) {
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	4619      	mov	r1, r3
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f8e2 	bl	8003894 <read_cardcontents>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <read_card_entry+0x50>
		return NULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e000      	b.n	80036dc <read_card_entry+0x52>
	}

	return result;
 80036da:	68fb      	ldr	r3, [r7, #12]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <read_metadata>:
 *
 * @param result - Card to store data to
 * @param entry - entry to read from
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_metadata(Card* result, uint16_t entry) {
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	807b      	strh	r3, [r7, #2]
	uint16_t metadata_size = get_datasize(entry, METAPAGE_OFFSET);
 80036f0:	887b      	ldrh	r3, [r7, #2]
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 f8f5 	bl	80038e4 <get_datasize>
 80036fa:	4603      	mov	r3, r0
 80036fc:	82fb      	strh	r3, [r7, #22]
	uint8_t* metadata = malloc(metadata_size * sizeof(uint8_t));
 80036fe:	8afb      	ldrh	r3, [r7, #22]
 8003700:	4618      	mov	r0, r3
 8003702:	f00c fbc7 	bl	800fe94 <malloc>
 8003706:	4603      	mov	r3, r0
 8003708:	613b      	str	r3, [r7, #16]
	char* type = malloc(((metadata_size - 3) + 1) * sizeof(char)); //+1 for null
 800370a:	8afb      	ldrh	r3, [r7, #22]
 800370c:	3b02      	subs	r3, #2
 800370e:	4618      	mov	r0, r3
 8003710:	f00c fbc0 	bl	800fe94 <malloc>
 8003714:	4603      	mov	r3, r0
 8003716:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, metadata, metadata_size) != HAL_OK) {
 8003718:	887b      	ldrh	r3, [r7, #2]
 800371a:	019b      	lsls	r3, r3, #6
 800371c:	b298      	uxth	r0, r3
 800371e:	8afb      	ldrh	r3, [r7, #22]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	2100      	movs	r1, #0
 8003724:	f7fe fe62 	bl	80023ec <MEM_READPAGE>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d004      	beq.n	8003738 <read_metadata+0x54>
		free(metadata);
 800372e:	6938      	ldr	r0, [r7, #16]
 8003730:	f00c fbb8 	bl	800fea4 <free>
		return RFS_READ_ERROR;
 8003734:	2305      	movs	r3, #5
 8003736:	e03e      	b.n	80037b6 <read_metadata+0xd2>
	}

	if ((uint8_t)type[0] == 0xFF) { //Simple check to see if we read an empty entry
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2bff      	cmp	r3, #255	; 0xff
 800373e:	d104      	bne.n	800374a <read_metadata+0x66>
		free(metadata);
 8003740:	6938      	ldr	r0, [r7, #16]
 8003742:	f00c fbaf 	bl	800fea4 <free>
		return RFS_NO_CARD;
 8003746:	2301      	movs	r3, #1
 8003748:	e035      	b.n	80037b6 <read_metadata+0xd2>
	}

	memcpy(type, metadata, metadata_size - 3);
 800374a:	8afb      	ldrh	r3, [r7, #22]
 800374c:	3b03      	subs	r3, #3
 800374e:	461a      	mov	r2, r3
 8003750:	6939      	ldr	r1, [r7, #16]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f00c fbae 	bl	800feb4 <memcpy>
	type[metadata_size - 3] = '\0';
 8003758:	8afb      	ldrh	r3, [r7, #22]
 800375a:	3b03      	subs	r3, #3
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4413      	add	r3, r2
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]
	result->type = type;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	60da      	str	r2, [r3, #12]
	result->contents_size = metadata[metadata_size - 3];
 800376a:	8afb      	ldrh	r3, [r7, #22]
 800376c:	3b03      	subs	r3, #3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4413      	add	r3, r2
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	b29a      	uxth	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	831a      	strh	r2, [r3, #24]
	result->uidsize = metadata[metadata_size - 2];
 800377a:	8afb      	ldrh	r3, [r7, #22]
 800377c:	3b02      	subs	r3, #2
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4413      	add	r3, r2
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	711a      	strb	r2, [r3, #4]
	if (metadata[metadata_size - 1] == READ_PROTECTED) { //Card is read protected
 8003788:	8afb      	ldrh	r3, [r7, #22]
 800378a:	3b01      	subs	r3, #1
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d104      	bne.n	80037a0 <read_metadata+0xbc>
		free(metadata);
 8003796:	6938      	ldr	r0, [r7, #16]
 8003798:	f00c fb84 	bl	800fea4 <free>
		return RFS_CARD_PROTECTED;
 800379c:	2303      	movs	r3, #3
 800379e:	e00a      	b.n	80037b6 <read_metadata+0xd2>
	}
	result->read_protected = metadata[metadata_size - 1];
 80037a0:	8afb      	ldrh	r3, [r7, #22]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4413      	add	r3, r2
 80037a8:	781a      	ldrb	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	741a      	strb	r2, [r3, #16]
	free(metadata);
 80037ae:	6938      	ldr	r0, [r7, #16]
 80037b0:	f00c fb78 	bl	800fea4 <free>

	return RFS_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <read_nameuid>:
 * Read the name and uid of card entry. Note that metadata must be read before name and uid can be read
 * @param result - Result to store data to
 * @param entry - Entry to read from
 * @return RFS_OK if name and uid was successfully read
 * */
RFS_StatusTypeDef read_nameuid(Card* result, uint16_t entry) {
 80037be:	b580      	push	{r7, lr}
 80037c0:	b086      	sub	sp, #24
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	460b      	mov	r3, r1
 80037c8:	807b      	strh	r3, [r7, #2]
	uint16_t datasize = get_datasize(entry, NAMEPAGE_OFFSET);
 80037ca:	887b      	ldrh	r3, [r7, #2]
 80037cc:	2101      	movs	r1, #1
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 f888 	bl	80038e4 <get_datasize>
 80037d4:	4603      	mov	r3, r0
 80037d6:	82fb      	strh	r3, [r7, #22]
	uint8_t* raw_data = malloc(datasize*sizeof(uint8_t));
 80037d8:	8afb      	ldrh	r3, [r7, #22]
 80037da:	4618      	mov	r0, r3
 80037dc:	f00c fb5a 	bl	800fe94 <malloc>
 80037e0:	4603      	mov	r3, r0
 80037e2:	613b      	str	r3, [r7, #16]
	char* name = malloc((datasize - result->uidsize + 1) * sizeof(char)); //+1 for null
 80037e4:	8afb      	ldrh	r3, [r7, #22]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	7912      	ldrb	r2, [r2, #4]
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	3301      	adds	r3, #1
 80037ee:	4618      	mov	r0, r3
 80037f0:	f00c fb50 	bl	800fe94 <malloc>
 80037f4:	4603      	mov	r3, r0
 80037f6:	60fb      	str	r3, [r7, #12]
	uint8_t* uid = malloc((result->uidsize) * sizeof(uint8_t));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	791b      	ldrb	r3, [r3, #4]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f00c fb49 	bl	800fe94 <malloc>
 8003802:	4603      	mov	r3, r0
 8003804:	60bb      	str	r3, [r7, #8]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + NAMEPAGE_OFFSET, 0x0000, raw_data, datasize) != HAL_OK) {
 8003806:	887b      	ldrh	r3, [r7, #2]
 8003808:	019b      	lsls	r3, r3, #6
 800380a:	b29b      	uxth	r3, r3
 800380c:	3301      	adds	r3, #1
 800380e:	b298      	uxth	r0, r3
 8003810:	8afb      	ldrh	r3, [r7, #22]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	2100      	movs	r1, #0
 8003816:	f7fe fde9 	bl	80023ec <MEM_READPAGE>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d004      	beq.n	800382a <read_nameuid+0x6c>
		free(raw_data);
 8003820:	6938      	ldr	r0, [r7, #16]
 8003822:	f00c fb3f 	bl	800fea4 <free>
		return RFS_READ_ERROR;
 8003826:	2305      	movs	r3, #5
 8003828:	e030      	b.n	800388c <read_nameuid+0xce>
	}

	if ((uint8_t)name[0] == 0xFF) { //Simple check to see if we read an empty entry
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2bff      	cmp	r3, #255	; 0xff
 8003830:	d104      	bne.n	800383c <read_nameuid+0x7e>
		free(raw_data);
 8003832:	6938      	ldr	r0, [r7, #16]
 8003834:	f00c fb36 	bl	800fea4 <free>
		return RFS_NO_CARD;
 8003838:	2301      	movs	r3, #1
 800383a:	e027      	b.n	800388c <read_nameuid+0xce>
	}

	memcpy(name, raw_data, datasize - result->uidsize);
 800383c:	8afb      	ldrh	r3, [r7, #22]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	7912      	ldrb	r2, [r2, #4]
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	461a      	mov	r2, r3
 8003846:	6939      	ldr	r1, [r7, #16]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f00c fb33 	bl	800feb4 <memcpy>
	name[datasize - result->uidsize] = '\0';
 800384e:	8afb      	ldrh	r3, [r7, #22]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	7912      	ldrb	r2, [r2, #4]
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	461a      	mov	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4413      	add	r3, r2
 800385c:	2200      	movs	r2, #0
 800385e:	701a      	strb	r2, [r3, #0]
	result->name = name;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	609a      	str	r2, [r3, #8]

	memcpy(uid, raw_data + strlen(name), result->uidsize);
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f7fc fcba 	bl	80001e0 <strlen>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1899      	adds	r1, r3, r2
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	791b      	ldrb	r3, [r3, #4]
 8003876:	461a      	mov	r2, r3
 8003878:	68b8      	ldr	r0, [r7, #8]
 800387a:	f00c fb1b 	bl	800feb4 <memcpy>
	result->uid = uid;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	601a      	str	r2, [r3, #0]
	free(raw_data);
 8003884:	6938      	ldr	r0, [r7, #16]
 8003886:	f00c fb0d 	bl	800fea4 <free>

	return RFS_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <read_cardcontents>:
/**
 * Read the contents of a card entry
 * @param entry - Entry to read contents of
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_cardcontents(Card* result, uint16_t entry) {
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	807b      	strh	r3, [r7, #2]
	uint8_t* contents = malloc(result->contents_size * sizeof(uint8_t));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8b1b      	ldrh	r3, [r3, #24]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f00c faf5 	bl	800fe94 <malloc>
 80038aa:	4603      	mov	r3, r0
 80038ac:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + DATAPAGE_OFFSET, 0x0000, contents, result->contents_size) != HAL_OK) {
 80038ae:	887b      	ldrh	r3, [r7, #2]
 80038b0:	019b      	lsls	r3, r3, #6
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3302      	adds	r3, #2
 80038b6:	b298      	uxth	r0, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8b1b      	ldrh	r3, [r3, #24]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	2100      	movs	r1, #0
 80038c0:	f7fe fd94 	bl	80023ec <MEM_READPAGE>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d004      	beq.n	80038d4 <read_cardcontents+0x40>
		free(contents);
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f00c faea 	bl	800fea4 <free>
		return RFS_READ_ERROR;
 80038d0:	2305      	movs	r3, #5
 80038d2:	e003      	b.n	80038dc <read_cardcontents+0x48>
	}

	result->contents = contents;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	615a      	str	r2, [r3, #20]
	return RFS_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <get_datasize>:
 * Get the size of a chunk of data from specific block and page
 * @param entry - Entry to read from
 * @param page - Page to begin reading from
 * @return size of data in bytes
 * */
uint16_t get_datasize(uint16_t entry, uint8_t page) {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	460a      	mov	r2, r1
 80038ee:	80fb      	strh	r3, [r7, #6]
 80038f0:	4613      	mov	r3, r2
 80038f2:	717b      	strb	r3, [r7, #5]
	uint16_t size = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	81fb      	strh	r3, [r7, #14]
	uint8_t byte_read = 0x00;
 80038f8:	2300      	movs	r3, #0
 80038fa:	737b      	strb	r3, [r7, #13]

	while(byte_read != 0xFF) {
 80038fc:	e014      	b.n	8003928 <get_datasize+0x44>
		if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + page, size, &byte_read, 1) != HAL_OK) {
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	019b      	lsls	r3, r3, #6
 8003902:	b29a      	uxth	r2, r3
 8003904:	797b      	ldrb	r3, [r7, #5]
 8003906:	b29b      	uxth	r3, r3
 8003908:	4413      	add	r3, r2
 800390a:	b298      	uxth	r0, r3
 800390c:	f107 020d 	add.w	r2, r7, #13
 8003910:	89f9      	ldrh	r1, [r7, #14]
 8003912:	2301      	movs	r3, #1
 8003914:	f7fe fd6a 	bl	80023ec <MEM_READPAGE>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <get_datasize+0x3e>
			return 0; //Error occured whilst reading
 800391e:	2300      	movs	r3, #0
 8003920:	e008      	b.n	8003934 <get_datasize+0x50>
		}
		size++;
 8003922:	89fb      	ldrh	r3, [r7, #14]
 8003924:	3301      	adds	r3, #1
 8003926:	81fb      	strh	r3, [r7, #14]
	while(byte_read != 0xFF) {
 8003928:	7b7b      	ldrb	r3, [r7, #13]
 800392a:	2bff      	cmp	r3, #255	; 0xff
 800392c:	d1e7      	bne.n	80038fe <get_datasize+0x1a>
	}

	return size - 1; //Last iteration will add 1 to true size so -1
 800392e:	89fb      	ldrh	r3, [r7, #14]
 8003930:	3b01      	subs	r3, #1
 8003932:	b29b      	uxth	r3, r3
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <get_number_files>:

/**
 * Get number of files currently stored
 * @return number of files stored
 * */
int get_number_files(void) {
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
	int count = 0;
 8003942:	2300      	movs	r3, #0
 8003944:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < BLOCK_COUNT; i++) {
 8003946:	2300      	movs	r3, #0
 8003948:	603b      	str	r3, [r7, #0]
 800394a:	e00d      	b.n	8003968 <get_number_files+0x2c>
		if (entry_present(i) == RFS_OK) {
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	b29b      	uxth	r3, r3
 8003950:	4618      	mov	r0, r3
 8003952:	f000 f86a 	bl	8003a2a <entry_present>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10a      	bne.n	8003972 <get_number_files+0x36>
			count++;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3301      	adds	r3, #1
 8003960:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	3301      	adds	r3, #1
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396e:	dbed      	blt.n	800394c <get_number_files+0x10>
 8003970:	e000      	b.n	8003974 <get_number_files+0x38>
		} else {
			break;
 8003972:	bf00      	nop
		}

	}

	return count;
 8003974:	687b      	ldr	r3, [r7, #4]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <get_all_files>:
 * Get the names of all currently stored cards
 *
 * @param result - Array to store file names
 * @return RFS_OK if all file names were read correctly
 * */
RFS_StatusTypeDef get_all_files(char** result) {
 800397e:	b5b0      	push	{r4, r5, r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
	Card* work;

	for (int i = 0; i < BLOCK_COUNT; i++) {
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	e040      	b.n	8003a0e <get_all_files+0x90>
		if (entry_present(i) == RFS_OK) {
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	b29b      	uxth	r3, r3
 8003990:	4618      	mov	r0, r3
 8003992:	f000 f84a 	bl	8003a2a <entry_present>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d13d      	bne.n	8003a18 <get_all_files+0x9a>
			work = read_card_entry(i);
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff fe72 	bl	800368a <read_card_entry>
 80039a6:	60f8      	str	r0, [r7, #12]
			result[i] = malloc(strlen(work->name) + 1);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fc fc17 	bl	80001e0 <strlen>
 80039b2:	4603      	mov	r3, r0
 80039b4:	1c59      	adds	r1, r3, #1
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	18d4      	adds	r4, r2, r3
 80039be:	4608      	mov	r0, r1
 80039c0:	f00c fa68 	bl	800fe94 <malloc>
 80039c4:	4603      	mov	r3, r0
 80039c6:	6023      	str	r3, [r4, #0]
			memcpy(result[i], work->name, strlen(work->name));
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	4413      	add	r3, r2
 80039d0:	681c      	ldr	r4, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689d      	ldr	r5, [r3, #8]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fc fc00 	bl	80001e0 <strlen>
 80039e0:	4603      	mov	r3, r0
 80039e2:	461a      	mov	r2, r3
 80039e4:	4629      	mov	r1, r5
 80039e6:	4620      	mov	r0, r4
 80039e8:	f00c fa64 	bl	800feb4 <memcpy>
			result[i][strlen(work->name)] = '\0';
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	4413      	add	r3, r2
 80039f4:	681c      	ldr	r4, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fc fbf0 	bl	80001e0 <strlen>
 8003a00:	4603      	mov	r3, r0
 8003a02:	4423      	add	r3, r4
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a14:	dbba      	blt.n	800398c <get_all_files+0xe>
 8003a16:	e000      	b.n	8003a1a <get_all_files+0x9c>
		} else {
			break;
 8003a18:	bf00      	nop
		}
	}

	free(work);
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f00c fa42 	bl	800fea4 <free>
	return RFS_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bdb0      	pop	{r4, r5, r7, pc}

08003a2a <entry_present>:
 * Check if entry is present
 *
 * @param entry - Entry to check
 * @return RFS_OK if entry is present
 * */
RFS_StatusTypeDef entry_present(uint16_t entry) {
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	4603      	mov	r3, r0
 8003a32:	80fb      	strh	r3, [r7, #6]
	uint8_t byte_read;

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, &byte_read, 1) != HAL_OK) {
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	019b      	lsls	r3, r3, #6
 8003a38:	b298      	uxth	r0, r3
 8003a3a:	f107 020f 	add.w	r2, r7, #15
 8003a3e:	2301      	movs	r3, #1
 8003a40:	2100      	movs	r1, #0
 8003a42:	f7fe fcd3 	bl	80023ec <MEM_READPAGE>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <entry_present+0x26>
		return RFS_READ_ERROR;
 8003a4c:	2305      	movs	r3, #5
 8003a4e:	e005      	b.n	8003a5c <entry_present+0x32>
	}

	if (byte_read == 0xFF) {
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2bff      	cmp	r3, #255	; 0xff
 8003a54:	d101      	bne.n	8003a5a <entry_present+0x30>
		return RFS_NO_CARD;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <entry_present+0x32>
	}

	return RFS_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <get_file_name>:
/**
 * Get the file name of a given entry
 * @param entry - Entry to get name of
 * @return pointer to name
 * */
char* get_file_name(uint16_t entry) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff ffda 	bl	8003a2a <entry_present>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <get_file_name+0x1c>
		return NULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e01a      	b.n	8003ab6 <get_file_name+0x52>
	}

	work = read_card_entry(entry);
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff fe01 	bl	800368a <read_card_entry>
 8003a88:	60f8      	str	r0, [r7, #12]

	char* name = malloc((strlen(work->name) + 1) * sizeof(char));
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fc fba6 	bl	80001e0 <strlen>
 8003a94:	4603      	mov	r3, r0
 8003a96:	3301      	adds	r3, #1
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f00c f9fb 	bl	800fe94 <malloc>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	60bb      	str	r3, [r7, #8]
	strcpy(name, work->name);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	68b8      	ldr	r0, [r7, #8]
 8003aaa:	f00c fb31 	bl	8010110 <strcpy>
	free(work);
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f00c f9f8 	bl	800fea4 <free>

	return name;
 8003ab4:	68bb      	ldr	r3, [r7, #8]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <remove_card>:

/**
 * Remove card from file system
 * @param entry - Entry to remove
 * */
void remove_card(uint16_t entry) {
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	80fb      	strh	r3, [r7, #6]
	block_erase(entry);
 8003ac8:	88fb      	ldrh	r3, [r7, #6]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe fba0 	bl	8002210 <block_erase>
}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <get_used_size>:

/**
 * Calculate the used size of memory in MiB
 * @return size of memory used in MiB
 * */
uint32_t get_used_size(void) {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
	int file_count = get_number_files();
 8003ade:	f7ff ff2d 	bl	800393c <get_number_files>
 8003ae2:	6078      	str	r0, [r7, #4]

	return (BLOCK_SIZE * file_count);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7fc fe4f 	bl	8000788 <__aeabi_i2d>
 8003aea:	a309      	add	r3, pc, #36	; (adr r3, 8003b10 <get_used_size+0x38>)
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	f7fc fbce 	bl	8000290 <__aeabi_dmul>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4610      	mov	r0, r2
 8003afa:	4619      	mov	r1, r3
 8003afc:	f7fc feae 	bl	800085c <__aeabi_d2uiz>
 8003b00:	4603      	mov	r3, r0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	f3af 8000 	nop.w
 8003b10:	d2f1a9fc 	.word	0xd2f1a9fc
 8003b14:	3fc0624d 	.word	0x3fc0624d

08003b18 <get_free_size>:

/**
 * Get size of memory that is free
 * @return size of memory that is free in MiB
 * */
uint32_t get_free_size(void) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
	return MEM_SIZE - get_used_size();
 8003b1c:	f7ff ffdc 	bl	8003ad8 <get_used_size>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <get_used_size_str>:

/**
 * Get used size as a string (Useful for printing to OLED)
 * @param result - Pointer to string to write to
 * */
void get_used_size_str(char* result) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	uint32_t used = get_used_size();
 8003b34:	f7ff ffd0 	bl	8003ad8 <get_used_size>
 8003b38:	60f8      	str	r0, [r7, #12]
	sprintf(result,"%i", used);
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4903      	ldr	r1, [pc, #12]	; (8003b4c <get_used_size_str+0x20>)
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f00c fac6 	bl	80100d0 <siprintf>
}
 8003b44:	bf00      	nop
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	08010a50 	.word	0x08010a50

08003b50 <get_free_size_str>:

/**
 * Get free size as a string
 * @param result - Pointer to string to write to
 * */
void get_free_size_str(char* result) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
	uint32_t free = get_free_size();
 8003b58:	f7ff ffde 	bl	8003b18 <get_free_size>
 8003b5c:	60f8      	str	r0, [r7, #12]
	sprintf(result, "%i", free);
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4903      	ldr	r1, [pc, #12]	; (8003b70 <get_free_size_str+0x20>)
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f00c fab4 	bl	80100d0 <siprintf>
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	08010a50 	.word	0x08010a50

08003b74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	607b      	str	r3, [r7, #4]
 8003b7e:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <HAL_MspInit+0x54>)
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	4a11      	ldr	r2, [pc, #68]	; (8003bc8 <HAL_MspInit+0x54>)
 8003b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b88:	6453      	str	r3, [r2, #68]	; 0x44
 8003b8a:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <HAL_MspInit+0x54>)
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b92:	607b      	str	r3, [r7, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	603b      	str	r3, [r7, #0]
 8003b9a:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_MspInit+0x54>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	; (8003bc8 <HAL_MspInit+0x54>)
 8003ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba6:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <HAL_MspInit+0x54>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	210f      	movs	r1, #15
 8003bb6:	f06f 0001 	mvn.w	r0, #1
 8003bba:	f000 fb79 	bl	80042b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40023800 	.word	0x40023800

08003bcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	; 0x28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd4:	f107 0314 	add.w	r3, r7, #20
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	60da      	str	r2, [r3, #12]
 8003be2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a19      	ldr	r2, [pc, #100]	; (8003c50 <HAL_I2C_MspInit+0x84>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d12b      	bne.n	8003c46 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	4b18      	ldr	r3, [pc, #96]	; (8003c54 <HAL_I2C_MspInit+0x88>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <HAL_I2C_MspInit+0x88>)
 8003bf8:	f043 0302 	orr.w	r3, r3, #2
 8003bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfe:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <HAL_I2C_MspInit+0x88>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c0a:	23c0      	movs	r3, #192	; 0xc0
 8003c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c0e:	2312      	movs	r3, #18
 8003c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c16:	2303      	movs	r3, #3
 8003c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c1a:	2304      	movs	r3, #4
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c1e:	f107 0314 	add.w	r3, r7, #20
 8003c22:	4619      	mov	r1, r3
 8003c24:	480c      	ldr	r0, [pc, #48]	; (8003c58 <HAL_I2C_MspInit+0x8c>)
 8003c26:	f000 fb6d 	bl	8004304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <HAL_I2C_MspInit+0x88>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	4a08      	ldr	r2, [pc, #32]	; (8003c54 <HAL_I2C_MspInit+0x88>)
 8003c34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c38:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3a:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <HAL_I2C_MspInit+0x88>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003c46:	bf00      	nop
 8003c48:	3728      	adds	r7, #40	; 0x28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40005400 	.word	0x40005400
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40020400 	.word	0x40020400

08003c5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08c      	sub	sp, #48	; 0x30
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c64:	f107 031c 	add.w	r3, r7, #28
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	605a      	str	r2, [r3, #4]
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	60da      	str	r2, [r3, #12]
 8003c72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a32      	ldr	r2, [pc, #200]	; (8003d44 <HAL_SPI_MspInit+0xe8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d12c      	bne.n	8003cd8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	4b31      	ldr	r3, [pc, #196]	; (8003d48 <HAL_SPI_MspInit+0xec>)
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	4a30      	ldr	r2, [pc, #192]	; (8003d48 <HAL_SPI_MspInit+0xec>)
 8003c88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c8e:	4b2e      	ldr	r3, [pc, #184]	; (8003d48 <HAL_SPI_MspInit+0xec>)
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	4b2a      	ldr	r3, [pc, #168]	; (8003d48 <HAL_SPI_MspInit+0xec>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	4a29      	ldr	r2, [pc, #164]	; (8003d48 <HAL_SPI_MspInit+0xec>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8003caa:	4b27      	ldr	r3, [pc, #156]	; (8003d48 <HAL_SPI_MspInit+0xec>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003cb6:	23a0      	movs	r3, #160	; 0xa0
 8003cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003cc6:	2305      	movs	r3, #5
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cca:	f107 031c 	add.w	r3, r7, #28
 8003cce:	4619      	mov	r1, r3
 8003cd0:	481e      	ldr	r0, [pc, #120]	; (8003d4c <HAL_SPI_MspInit+0xf0>)
 8003cd2:	f000 fb17 	bl	8004304 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003cd6:	e031      	b.n	8003d3c <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <HAL_SPI_MspInit+0xf4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d12c      	bne.n	8003d3c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	4b18      	ldr	r3, [pc, #96]	; (8003d48 <HAL_SPI_MspInit+0xec>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	4a17      	ldr	r2, [pc, #92]	; (8003d48 <HAL_SPI_MspInit+0xec>)
 8003cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf2:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <HAL_SPI_MspInit+0xec>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cfa:	613b      	str	r3, [r7, #16]
 8003cfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	4b11      	ldr	r3, [pc, #68]	; (8003d48 <HAL_SPI_MspInit+0xec>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	4a10      	ldr	r2, [pc, #64]	; (8003d48 <HAL_SPI_MspInit+0xec>)
 8003d08:	f043 0302 	orr.w	r3, r3, #2
 8003d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0e:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <HAL_SPI_MspInit+0xec>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003d1a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8003d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d20:	2302      	movs	r3, #2
 8003d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003d2c:	2305      	movs	r3, #5
 8003d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d30:	f107 031c 	add.w	r3, r7, #28
 8003d34:	4619      	mov	r1, r3
 8003d36:	4807      	ldr	r0, [pc, #28]	; (8003d54 <HAL_SPI_MspInit+0xf8>)
 8003d38:	f000 fae4 	bl	8004304 <HAL_GPIO_Init>
}
 8003d3c:	bf00      	nop
 8003d3e:	3730      	adds	r7, #48	; 0x30
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40013000 	.word	0x40013000
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	40020000 	.word	0x40020000
 8003d50:	40003800 	.word	0x40003800
 8003d54:	40020400 	.word	0x40020400

08003d58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d68:	d10e      	bne.n	8003d88 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <HAL_TIM_Base_MspInit+0x64>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	4a12      	ldr	r2, [pc, #72]	; (8003dbc <HAL_TIM_Base_MspInit+0x64>)
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	6413      	str	r3, [r2, #64]	; 0x40
 8003d7a:	4b10      	ldr	r3, [pc, #64]	; (8003dbc <HAL_TIM_Base_MspInit+0x64>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003d86:	e012      	b.n	8003dae <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a0c      	ldr	r2, [pc, #48]	; (8003dc0 <HAL_TIM_Base_MspInit+0x68>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d10d      	bne.n	8003dae <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <HAL_TIM_Base_MspInit+0x64>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	4a08      	ldr	r2, [pc, #32]	; (8003dbc <HAL_TIM_Base_MspInit+0x64>)
 8003d9c:	f043 0302 	orr.w	r3, r3, #2
 8003da0:	6413      	str	r3, [r2, #64]	; 0x40
 8003da2:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <HAL_TIM_Base_MspInit+0x64>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	68bb      	ldr	r3, [r7, #8]
}
 8003dae:	bf00      	nop
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	40000400 	.word	0x40000400

08003dc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dcc:	f107 030c 	add.w	r3, r7, #12
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	60da      	str	r2, [r3, #12]
 8003dda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de4:	d11d      	bne.n	8003e22 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <HAL_TIM_MspPostInit+0x68>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	4a0f      	ldr	r2, [pc, #60]	; (8003e2c <HAL_TIM_MspPostInit+0x68>)
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	6313      	str	r3, [r2, #48]	; 0x30
 8003df6:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <HAL_TIM_MspPostInit+0x68>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e02:	2304      	movs	r3, #4
 8003e04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e06:	2302      	movs	r3, #2
 8003e08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e12:	2301      	movs	r3, #1
 8003e14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e16:	f107 030c 	add.w	r3, r7, #12
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4804      	ldr	r0, [pc, #16]	; (8003e30 <HAL_TIM_MspPostInit+0x6c>)
 8003e1e:	f000 fa71 	bl	8004304 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003e22:	bf00      	nop
 8003e24:	3720      	adds	r7, #32
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	40020000 	.word	0x40020000

08003e34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08e      	sub	sp, #56	; 0x38
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	4b33      	ldr	r3, [pc, #204]	; (8003f18 <HAL_InitTick+0xe4>)
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	4a32      	ldr	r2, [pc, #200]	; (8003f18 <HAL_InitTick+0xe4>)
 8003e4e:	f043 0308 	orr.w	r3, r3, #8
 8003e52:	6413      	str	r3, [r2, #64]	; 0x40
 8003e54:	4b30      	ldr	r3, [pc, #192]	; (8003f18 <HAL_InitTick+0xe4>)
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003e60:	f107 0210 	add.w	r2, r7, #16
 8003e64:	f107 0314 	add.w	r3, r7, #20
 8003e68:	4611      	mov	r1, r2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f003 fad6 	bl	800741c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d103      	bne.n	8003e82 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003e7a:	f003 fabb 	bl	80073f4 <HAL_RCC_GetPCLK1Freq>
 8003e7e:	6378      	str	r0, [r7, #52]	; 0x34
 8003e80:	e004      	b.n	8003e8c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003e82:	f003 fab7 	bl	80073f4 <HAL_RCC_GetPCLK1Freq>
 8003e86:	4603      	mov	r3, r0
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8e:	4a23      	ldr	r2, [pc, #140]	; (8003f1c <HAL_InitTick+0xe8>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	0c9b      	lsrs	r3, r3, #18
 8003e96:	3b01      	subs	r3, #1
 8003e98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8003e9a:	4b21      	ldr	r3, [pc, #132]	; (8003f20 <HAL_InitTick+0xec>)
 8003e9c:	4a21      	ldr	r2, [pc, #132]	; (8003f24 <HAL_InitTick+0xf0>)
 8003e9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8003ea0:	4b1f      	ldr	r3, [pc, #124]	; (8003f20 <HAL_InitTick+0xec>)
 8003ea2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ea6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8003ea8:	4a1d      	ldr	r2, [pc, #116]	; (8003f20 <HAL_InitTick+0xec>)
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8003eae:	4b1c      	ldr	r3, [pc, #112]	; (8003f20 <HAL_InitTick+0xec>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eb4:	4b1a      	ldr	r3, [pc, #104]	; (8003f20 <HAL_InitTick+0xec>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eba:	4b19      	ldr	r3, [pc, #100]	; (8003f20 <HAL_InitTick+0xec>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8003ec0:	4817      	ldr	r0, [pc, #92]	; (8003f20 <HAL_InitTick+0xec>)
 8003ec2:	f003 ff0f 	bl	8007ce4 <HAL_TIM_Base_Init>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003ecc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d11b      	bne.n	8003f0c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8003ed4:	4812      	ldr	r0, [pc, #72]	; (8003f20 <HAL_InitTick+0xec>)
 8003ed6:	f003 ffd7 	bl	8007e88 <HAL_TIM_Base_Start_IT>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003ee0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d111      	bne.n	8003f0c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003ee8:	2032      	movs	r0, #50	; 0x32
 8003eea:	f000 f9fd 	bl	80042e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b0f      	cmp	r3, #15
 8003ef2:	d808      	bhi.n	8003f06 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	2032      	movs	r0, #50	; 0x32
 8003efa:	f000 f9d9 	bl	80042b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003efe:	4a0a      	ldr	r2, [pc, #40]	; (8003f28 <HAL_InitTick+0xf4>)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	e002      	b.n	8003f0c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003f0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3738      	adds	r7, #56	; 0x38
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	431bde83 	.word	0x431bde83
 8003f20:	200008e4 	.word	0x200008e4
 8003f24:	40000c00 	.word	0x40000c00
 8003f28:	200005a0 	.word	0x200005a0

08003f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f30:	e7fe      	b.n	8003f30 <NMI_Handler+0x4>

08003f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f32:	b480      	push	{r7}
 8003f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f36:	e7fe      	b.n	8003f36 <HardFault_Handler+0x4>

08003f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f3c:	e7fe      	b.n	8003f3c <MemManage_Handler+0x4>

08003f3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f42:	e7fe      	b.n	8003f42 <BusFault_Handler+0x4>

08003f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f48:	e7fe      	b.n	8003f48 <UsageFault_Handler+0x4>

08003f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003f5c:	2002      	movs	r0, #2
 8003f5e:	f000 fb87 	bl	8004670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003f6c:	4802      	ldr	r0, [pc, #8]	; (8003f78 <TIM5_IRQHandler+0x10>)
 8003f6e:	f004 f95b 	bl	8008228 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	200008e4 	.word	0x200008e4

08003f7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003f80:	4802      	ldr	r0, [pc, #8]	; (8003f8c <OTG_FS_IRQHandler+0x10>)
 8003f82:	f001 fc9c 	bl	80058be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003f86:	bf00      	nop
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20008b2c 	.word	0x20008b2c

08003f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f98:	4a14      	ldr	r2, [pc, #80]	; (8003fec <_sbrk+0x5c>)
 8003f9a:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <_sbrk+0x60>)
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fa4:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <_sbrk+0x64>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d102      	bne.n	8003fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fac:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <_sbrk+0x64>)
 8003fae:	4a12      	ldr	r2, [pc, #72]	; (8003ff8 <_sbrk+0x68>)
 8003fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fb2:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <_sbrk+0x64>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4413      	add	r3, r2
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d207      	bcs.n	8003fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fc0:	f00b ff3e 	bl	800fe40 <__errno>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	220c      	movs	r2, #12
 8003fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fca:	f04f 33ff 	mov.w	r3, #4294967295
 8003fce:	e009      	b.n	8003fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fd0:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <_sbrk+0x64>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fd6:	4b07      	ldr	r3, [pc, #28]	; (8003ff4 <_sbrk+0x64>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4413      	add	r3, r2
 8003fde:	4a05      	ldr	r2, [pc, #20]	; (8003ff4 <_sbrk+0x64>)
 8003fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20010000 	.word	0x20010000
 8003ff0:	00000400 	.word	0x00000400
 8003ff4:	2000092c 	.word	0x2000092c
 8003ff8:	20009268 	.word	0x20009268

08003ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <SystemInit+0x20>)
 8004002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004006:	4a05      	ldr	r2, [pc, #20]	; (800401c <SystemInit+0x20>)
 8004008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800400c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004058 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004024:	480d      	ldr	r0, [pc, #52]	; (800405c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004026:	490e      	ldr	r1, [pc, #56]	; (8004060 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004028:	4a0e      	ldr	r2, [pc, #56]	; (8004064 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800402a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800402c:	e002      	b.n	8004034 <LoopCopyDataInit>

0800402e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800402e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004032:	3304      	adds	r3, #4

08004034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004038:	d3f9      	bcc.n	800402e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800403a:	4a0b      	ldr	r2, [pc, #44]	; (8004068 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800403c:	4c0b      	ldr	r4, [pc, #44]	; (800406c <LoopFillZerobss+0x26>)
  movs r3, #0
 800403e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004040:	e001      	b.n	8004046 <LoopFillZerobss>

08004042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004044:	3204      	adds	r2, #4

08004046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004048:	d3fb      	bcc.n	8004042 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800404a:	f7ff ffd7 	bl	8003ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800404e:	f00b fefd 	bl	800fe4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004052:	f7fe fb93 	bl	800277c <main>
  bx  lr    
 8004056:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004058:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800405c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004060:	20000700 	.word	0x20000700
  ldr r2, =_sidata
 8004064:	080111dc 	.word	0x080111dc
  ldr r2, =_sbss
 8004068:	20000700 	.word	0x20000700
  ldr r4, =_ebss
 800406c:	20009268 	.word	0x20009268

08004070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004070:	e7fe      	b.n	8004070 <ADC_IRQHandler>
	...

08004074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004078:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <HAL_Init+0x40>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a0d      	ldr	r2, [pc, #52]	; (80040b4 <HAL_Init+0x40>)
 800407e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <HAL_Init+0x40>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <HAL_Init+0x40>)
 800408a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800408e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004090:	4b08      	ldr	r3, [pc, #32]	; (80040b4 <HAL_Init+0x40>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a07      	ldr	r2, [pc, #28]	; (80040b4 <HAL_Init+0x40>)
 8004096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800409c:	2003      	movs	r0, #3
 800409e:	f000 f8fc 	bl	800429a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040a2:	200f      	movs	r0, #15
 80040a4:	f7ff fec6 	bl	8003e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040a8:	f7ff fd64 	bl	8003b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40023c00 	.word	0x40023c00

080040b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_IncTick+0x20>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <HAL_IncTick+0x24>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4413      	add	r3, r2
 80040c8:	4a04      	ldr	r2, [pc, #16]	; (80040dc <HAL_IncTick+0x24>)
 80040ca:	6013      	str	r3, [r2, #0]
}
 80040cc:	bf00      	nop
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	200005a4 	.word	0x200005a4
 80040dc:	20000930 	.word	0x20000930

080040e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  return uwTick;
 80040e4:	4b03      	ldr	r3, [pc, #12]	; (80040f4 <HAL_GetTick+0x14>)
 80040e6:	681b      	ldr	r3, [r3, #0]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	20000930 	.word	0x20000930

080040f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004100:	f7ff ffee 	bl	80040e0 <HAL_GetTick>
 8004104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004110:	d005      	beq.n	800411e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004112:	4b0a      	ldr	r3, [pc, #40]	; (800413c <HAL_Delay+0x44>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800411e:	bf00      	nop
 8004120:	f7ff ffde 	bl	80040e0 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	429a      	cmp	r2, r3
 800412e:	d8f7      	bhi.n	8004120 <HAL_Delay+0x28>
  {
  }
}
 8004130:	bf00      	nop
 8004132:	bf00      	nop
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	200005a4 	.word	0x200005a4

08004140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004150:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <__NVIC_SetPriorityGrouping+0x44>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800415c:	4013      	ands	r3, r2
 800415e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800416c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004172:	4a04      	ldr	r2, [pc, #16]	; (8004184 <__NVIC_SetPriorityGrouping+0x44>)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	60d3      	str	r3, [r2, #12]
}
 8004178:	bf00      	nop
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	e000ed00 	.word	0xe000ed00

08004188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800418c:	4b04      	ldr	r3, [pc, #16]	; (80041a0 <__NVIC_GetPriorityGrouping+0x18>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	0a1b      	lsrs	r3, r3, #8
 8004192:	f003 0307 	and.w	r3, r3, #7
}
 8004196:	4618      	mov	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	e000ed00 	.word	0xe000ed00

080041a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	db0b      	blt.n	80041ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	f003 021f 	and.w	r2, r3, #31
 80041bc:	4907      	ldr	r1, [pc, #28]	; (80041dc <__NVIC_EnableIRQ+0x38>)
 80041be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	2001      	movs	r0, #1
 80041c6:	fa00 f202 	lsl.w	r2, r0, r2
 80041ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	e000e100 	.word	0xe000e100

080041e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	6039      	str	r1, [r7, #0]
 80041ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	db0a      	blt.n	800420a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	490c      	ldr	r1, [pc, #48]	; (800422c <__NVIC_SetPriority+0x4c>)
 80041fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fe:	0112      	lsls	r2, r2, #4
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	440b      	add	r3, r1
 8004204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004208:	e00a      	b.n	8004220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	b2da      	uxtb	r2, r3
 800420e:	4908      	ldr	r1, [pc, #32]	; (8004230 <__NVIC_SetPriority+0x50>)
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	3b04      	subs	r3, #4
 8004218:	0112      	lsls	r2, r2, #4
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	440b      	add	r3, r1
 800421e:	761a      	strb	r2, [r3, #24]
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	e000e100 	.word	0xe000e100
 8004230:	e000ed00 	.word	0xe000ed00

08004234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004234:	b480      	push	{r7}
 8004236:	b089      	sub	sp, #36	; 0x24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f1c3 0307 	rsb	r3, r3, #7
 800424e:	2b04      	cmp	r3, #4
 8004250:	bf28      	it	cs
 8004252:	2304      	movcs	r3, #4
 8004254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	3304      	adds	r3, #4
 800425a:	2b06      	cmp	r3, #6
 800425c:	d902      	bls.n	8004264 <NVIC_EncodePriority+0x30>
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	3b03      	subs	r3, #3
 8004262:	e000      	b.n	8004266 <NVIC_EncodePriority+0x32>
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004268:	f04f 32ff 	mov.w	r2, #4294967295
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	43da      	mvns	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	401a      	ands	r2, r3
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800427c:	f04f 31ff 	mov.w	r1, #4294967295
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	fa01 f303 	lsl.w	r3, r1, r3
 8004286:	43d9      	mvns	r1, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800428c:	4313      	orrs	r3, r2
         );
}
 800428e:	4618      	mov	r0, r3
 8004290:	3724      	adds	r7, #36	; 0x24
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7ff ff4c 	bl	8004140 <__NVIC_SetPriorityGrouping>
}
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042c2:	f7ff ff61 	bl	8004188 <__NVIC_GetPriorityGrouping>
 80042c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	6978      	ldr	r0, [r7, #20]
 80042ce:	f7ff ffb1 	bl	8004234 <NVIC_EncodePriority>
 80042d2:	4602      	mov	r2, r0
 80042d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042d8:	4611      	mov	r1, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff ff80 	bl	80041e0 <__NVIC_SetPriority>
}
 80042e0:	bf00      	nop
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff ff54 	bl	80041a4 <__NVIC_EnableIRQ>
}
 80042fc:	bf00      	nop
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004304:	b480      	push	{r7}
 8004306:	b089      	sub	sp, #36	; 0x24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004312:	2300      	movs	r3, #0
 8004314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800431a:	2300      	movs	r3, #0
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	e159      	b.n	80045d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004320:	2201      	movs	r2, #1
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4013      	ands	r3, r2
 8004332:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	429a      	cmp	r2, r3
 800433a:	f040 8148 	bne.w	80045ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b01      	cmp	r3, #1
 8004348:	d005      	beq.n	8004356 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004352:	2b02      	cmp	r3, #2
 8004354:	d130      	bne.n	80043b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	2203      	movs	r2, #3
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4013      	ands	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	4313      	orrs	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800438c:	2201      	movs	r2, #1
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4013      	ands	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	091b      	lsrs	r3, r3, #4
 80043a2:	f003 0201 	and.w	r2, r3, #1
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d017      	beq.n	80043f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	2203      	movs	r2, #3
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	43db      	mvns	r3, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4013      	ands	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f003 0303 	and.w	r3, r3, #3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d123      	bne.n	8004448 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	08da      	lsrs	r2, r3, #3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3208      	adds	r2, #8
 8004408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800440c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	220f      	movs	r2, #15
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4013      	ands	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4313      	orrs	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	08da      	lsrs	r2, r3, #3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3208      	adds	r2, #8
 8004442:	69b9      	ldr	r1, [r7, #24]
 8004444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	2203      	movs	r2, #3
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	43db      	mvns	r3, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4013      	ands	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f003 0203 	and.w	r2, r3, #3
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4313      	orrs	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80a2 	beq.w	80045ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	4b57      	ldr	r3, [pc, #348]	; (80045ec <HAL_GPIO_Init+0x2e8>)
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	4a56      	ldr	r2, [pc, #344]	; (80045ec <HAL_GPIO_Init+0x2e8>)
 8004494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004498:	6453      	str	r3, [r2, #68]	; 0x44
 800449a:	4b54      	ldr	r3, [pc, #336]	; (80045ec <HAL_GPIO_Init+0x2e8>)
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044a6:	4a52      	ldr	r2, [pc, #328]	; (80045f0 <HAL_GPIO_Init+0x2ec>)
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	089b      	lsrs	r3, r3, #2
 80044ac:	3302      	adds	r3, #2
 80044ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	220f      	movs	r2, #15
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43db      	mvns	r3, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4013      	ands	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a49      	ldr	r2, [pc, #292]	; (80045f4 <HAL_GPIO_Init+0x2f0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d019      	beq.n	8004506 <HAL_GPIO_Init+0x202>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a48      	ldr	r2, [pc, #288]	; (80045f8 <HAL_GPIO_Init+0x2f4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d013      	beq.n	8004502 <HAL_GPIO_Init+0x1fe>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a47      	ldr	r2, [pc, #284]	; (80045fc <HAL_GPIO_Init+0x2f8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00d      	beq.n	80044fe <HAL_GPIO_Init+0x1fa>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a46      	ldr	r2, [pc, #280]	; (8004600 <HAL_GPIO_Init+0x2fc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d007      	beq.n	80044fa <HAL_GPIO_Init+0x1f6>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a45      	ldr	r2, [pc, #276]	; (8004604 <HAL_GPIO_Init+0x300>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d101      	bne.n	80044f6 <HAL_GPIO_Init+0x1f2>
 80044f2:	2304      	movs	r3, #4
 80044f4:	e008      	b.n	8004508 <HAL_GPIO_Init+0x204>
 80044f6:	2307      	movs	r3, #7
 80044f8:	e006      	b.n	8004508 <HAL_GPIO_Init+0x204>
 80044fa:	2303      	movs	r3, #3
 80044fc:	e004      	b.n	8004508 <HAL_GPIO_Init+0x204>
 80044fe:	2302      	movs	r3, #2
 8004500:	e002      	b.n	8004508 <HAL_GPIO_Init+0x204>
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <HAL_GPIO_Init+0x204>
 8004506:	2300      	movs	r3, #0
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	f002 0203 	and.w	r2, r2, #3
 800450e:	0092      	lsls	r2, r2, #2
 8004510:	4093      	lsls	r3, r2
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4313      	orrs	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004518:	4935      	ldr	r1, [pc, #212]	; (80045f0 <HAL_GPIO_Init+0x2ec>)
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	089b      	lsrs	r3, r3, #2
 800451e:	3302      	adds	r3, #2
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004526:	4b38      	ldr	r3, [pc, #224]	; (8004608 <HAL_GPIO_Init+0x304>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	43db      	mvns	r3, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4013      	ands	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800454a:	4a2f      	ldr	r2, [pc, #188]	; (8004608 <HAL_GPIO_Init+0x304>)
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004550:	4b2d      	ldr	r3, [pc, #180]	; (8004608 <HAL_GPIO_Init+0x304>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004574:	4a24      	ldr	r2, [pc, #144]	; (8004608 <HAL_GPIO_Init+0x304>)
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800457a:	4b23      	ldr	r3, [pc, #140]	; (8004608 <HAL_GPIO_Init+0x304>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	43db      	mvns	r3, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	4013      	ands	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800459e:	4a1a      	ldr	r2, [pc, #104]	; (8004608 <HAL_GPIO_Init+0x304>)
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045a4:	4b18      	ldr	r3, [pc, #96]	; (8004608 <HAL_GPIO_Init+0x304>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	43db      	mvns	r3, r3
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4013      	ands	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045c8:	4a0f      	ldr	r2, [pc, #60]	; (8004608 <HAL_GPIO_Init+0x304>)
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3301      	adds	r3, #1
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2b0f      	cmp	r3, #15
 80045d8:	f67f aea2 	bls.w	8004320 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045dc:	bf00      	nop
 80045de:	bf00      	nop
 80045e0:	3724      	adds	r7, #36	; 0x24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40023800 	.word	0x40023800
 80045f0:	40013800 	.word	0x40013800
 80045f4:	40020000 	.word	0x40020000
 80045f8:	40020400 	.word	0x40020400
 80045fc:	40020800 	.word	0x40020800
 8004600:	40020c00 	.word	0x40020c00
 8004604:	40021000 	.word	0x40021000
 8004608:	40013c00 	.word	0x40013c00

0800460c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	887b      	ldrh	r3, [r7, #2]
 800461e:	4013      	ands	r3, r2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004624:	2301      	movs	r3, #1
 8004626:	73fb      	strb	r3, [r7, #15]
 8004628:	e001      	b.n	800462e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800462a:	2300      	movs	r3, #0
 800462c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800462e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	807b      	strh	r3, [r7, #2]
 8004648:	4613      	mov	r3, r2
 800464a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800464c:	787b      	ldrb	r3, [r7, #1]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004652:	887a      	ldrh	r2, [r7, #2]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004658:	e003      	b.n	8004662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800465a:	887b      	ldrh	r3, [r7, #2]
 800465c:	041a      	lsls	r2, r3, #16
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	619a      	str	r2, [r3, #24]
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
	...

08004670 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800467a:	4b08      	ldr	r3, [pc, #32]	; (800469c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800467c:	695a      	ldr	r2, [r3, #20]
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	4013      	ands	r3, r2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d006      	beq.n	8004694 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004686:	4a05      	ldr	r2, [pc, #20]	; (800469c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800468c:	88fb      	ldrh	r3, [r7, #6]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fd ffbc 	bl	800260c <HAL_GPIO_EXTI_Callback>
  }
}
 8004694:	bf00      	nop
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40013c00 	.word	0x40013c00

080046a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e12b      	b.n	800490a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d106      	bne.n	80046cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff fa80 	bl	8003bcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2224      	movs	r2, #36	; 0x24
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0201 	bic.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004702:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004704:	f002 fe76 	bl	80073f4 <HAL_RCC_GetPCLK1Freq>
 8004708:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	4a81      	ldr	r2, [pc, #516]	; (8004914 <HAL_I2C_Init+0x274>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d807      	bhi.n	8004724 <HAL_I2C_Init+0x84>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4a80      	ldr	r2, [pc, #512]	; (8004918 <HAL_I2C_Init+0x278>)
 8004718:	4293      	cmp	r3, r2
 800471a:	bf94      	ite	ls
 800471c:	2301      	movls	r3, #1
 800471e:	2300      	movhi	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	e006      	b.n	8004732 <HAL_I2C_Init+0x92>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4a7d      	ldr	r2, [pc, #500]	; (800491c <HAL_I2C_Init+0x27c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	bf94      	ite	ls
 800472c:	2301      	movls	r3, #1
 800472e:	2300      	movhi	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e0e7      	b.n	800490a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4a78      	ldr	r2, [pc, #480]	; (8004920 <HAL_I2C_Init+0x280>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	0c9b      	lsrs	r3, r3, #18
 8004744:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	430a      	orrs	r2, r1
 8004758:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	4a6a      	ldr	r2, [pc, #424]	; (8004914 <HAL_I2C_Init+0x274>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d802      	bhi.n	8004774 <HAL_I2C_Init+0xd4>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	3301      	adds	r3, #1
 8004772:	e009      	b.n	8004788 <HAL_I2C_Init+0xe8>
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800477a:	fb02 f303 	mul.w	r3, r2, r3
 800477e:	4a69      	ldr	r2, [pc, #420]	; (8004924 <HAL_I2C_Init+0x284>)
 8004780:	fba2 2303 	umull	r2, r3, r2, r3
 8004784:	099b      	lsrs	r3, r3, #6
 8004786:	3301      	adds	r3, #1
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6812      	ldr	r2, [r2, #0]
 800478c:	430b      	orrs	r3, r1
 800478e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800479a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	495c      	ldr	r1, [pc, #368]	; (8004914 <HAL_I2C_Init+0x274>)
 80047a4:	428b      	cmp	r3, r1
 80047a6:	d819      	bhi.n	80047dc <HAL_I2C_Init+0x13c>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1e59      	subs	r1, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80047b6:	1c59      	adds	r1, r3, #1
 80047b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047bc:	400b      	ands	r3, r1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_I2C_Init+0x138>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	1e59      	subs	r1, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80047d0:	3301      	adds	r3, #1
 80047d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d6:	e051      	b.n	800487c <HAL_I2C_Init+0x1dc>
 80047d8:	2304      	movs	r3, #4
 80047da:	e04f      	b.n	800487c <HAL_I2C_Init+0x1dc>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d111      	bne.n	8004808 <HAL_I2C_Init+0x168>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	1e58      	subs	r0, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6859      	ldr	r1, [r3, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	440b      	add	r3, r1
 80047f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f6:	3301      	adds	r3, #1
 80047f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	bf0c      	ite	eq
 8004800:	2301      	moveq	r3, #1
 8004802:	2300      	movne	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	e012      	b.n	800482e <HAL_I2C_Init+0x18e>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	1e58      	subs	r0, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6859      	ldr	r1, [r3, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	0099      	lsls	r1, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	fbb0 f3f3 	udiv	r3, r0, r3
 800481e:	3301      	adds	r3, #1
 8004820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004824:	2b00      	cmp	r3, #0
 8004826:	bf0c      	ite	eq
 8004828:	2301      	moveq	r3, #1
 800482a:	2300      	movne	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_I2C_Init+0x196>
 8004832:	2301      	movs	r3, #1
 8004834:	e022      	b.n	800487c <HAL_I2C_Init+0x1dc>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10e      	bne.n	800485c <HAL_I2C_Init+0x1bc>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1e58      	subs	r0, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6859      	ldr	r1, [r3, #4]
 8004846:	460b      	mov	r3, r1
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	440b      	add	r3, r1
 800484c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004850:	3301      	adds	r3, #1
 8004852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800485a:	e00f      	b.n	800487c <HAL_I2C_Init+0x1dc>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	1e58      	subs	r0, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6859      	ldr	r1, [r3, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	0099      	lsls	r1, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004872:	3301      	adds	r3, #1
 8004874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004878:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	6809      	ldr	r1, [r1, #0]
 8004880:	4313      	orrs	r3, r2
 8004882:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69da      	ldr	r2, [r3, #28]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6911      	ldr	r1, [r2, #16]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	68d2      	ldr	r2, [r2, #12]
 80048b6:	4311      	orrs	r1, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6812      	ldr	r2, [r2, #0]
 80048bc:	430b      	orrs	r3, r1
 80048be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695a      	ldr	r2, [r3, #20]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2220      	movs	r2, #32
 80048f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	000186a0 	.word	0x000186a0
 8004918:	001e847f 	.word	0x001e847f
 800491c:	003d08ff 	.word	0x003d08ff
 8004920:	431bde83 	.word	0x431bde83
 8004924:	10624dd3 	.word	0x10624dd3

08004928 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af02      	add	r7, sp, #8
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	4608      	mov	r0, r1
 8004932:	4611      	mov	r1, r2
 8004934:	461a      	mov	r2, r3
 8004936:	4603      	mov	r3, r0
 8004938:	817b      	strh	r3, [r7, #10]
 800493a:	460b      	mov	r3, r1
 800493c:	813b      	strh	r3, [r7, #8]
 800493e:	4613      	mov	r3, r2
 8004940:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004942:	f7ff fbcd 	bl	80040e0 <HAL_GetTick>
 8004946:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b20      	cmp	r3, #32
 8004952:	f040 80d9 	bne.w	8004b08 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	2319      	movs	r3, #25
 800495c:	2201      	movs	r2, #1
 800495e:	496d      	ldr	r1, [pc, #436]	; (8004b14 <HAL_I2C_Mem_Write+0x1ec>)
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fc7f 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800496c:	2302      	movs	r3, #2
 800496e:	e0cc      	b.n	8004b0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_I2C_Mem_Write+0x56>
 800497a:	2302      	movs	r3, #2
 800497c:	e0c5      	b.n	8004b0a <HAL_I2C_Mem_Write+0x1e2>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b01      	cmp	r3, #1
 8004992:	d007      	beq.n	80049a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2221      	movs	r2, #33	; 0x21
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2240      	movs	r2, #64	; 0x40
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a3a      	ldr	r2, [r7, #32]
 80049ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4a4d      	ldr	r2, [pc, #308]	; (8004b18 <HAL_I2C_Mem_Write+0x1f0>)
 80049e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049e6:	88f8      	ldrh	r0, [r7, #6]
 80049e8:	893a      	ldrh	r2, [r7, #8]
 80049ea:	8979      	ldrh	r1, [r7, #10]
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	4603      	mov	r3, r0
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fab6 	bl	8004f68 <I2C_RequestMemoryWrite>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d052      	beq.n	8004aa8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e081      	b.n	8004b0a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 fd00 	bl	8005410 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00d      	beq.n	8004a32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d107      	bne.n	8004a2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e06b      	b.n	8004b0a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	781a      	ldrb	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d11b      	bne.n	8004aa8 <HAL_I2C_Mem_Write+0x180>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d017      	beq.n	8004aa8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	781a      	ldrb	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1aa      	bne.n	8004a06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 fcec 	bl	8005492 <I2C_WaitOnBTFFlagUntilTimeout>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00d      	beq.n	8004adc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d107      	bne.n	8004ad8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e016      	b.n	8004b0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	e000      	b.n	8004b0a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b08:	2302      	movs	r3, #2
  }
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	00100002 	.word	0x00100002
 8004b18:	ffff0000 	.word	0xffff0000

08004b1c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08c      	sub	sp, #48	; 0x30
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	4608      	mov	r0, r1
 8004b26:	4611      	mov	r1, r2
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	817b      	strh	r3, [r7, #10]
 8004b2e:	460b      	mov	r3, r1
 8004b30:	813b      	strh	r3, [r7, #8]
 8004b32:	4613      	mov	r3, r2
 8004b34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b36:	f7ff fad3 	bl	80040e0 <HAL_GetTick>
 8004b3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	f040 8208 	bne.w	8004f5a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	2319      	movs	r3, #25
 8004b50:	2201      	movs	r2, #1
 8004b52:	497b      	ldr	r1, [pc, #492]	; (8004d40 <HAL_I2C_Mem_Read+0x224>)
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f000 fb85 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b60:	2302      	movs	r3, #2
 8004b62:	e1fb      	b.n	8004f5c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d101      	bne.n	8004b72 <HAL_I2C_Mem_Read+0x56>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	e1f4      	b.n	8004f5c <HAL_I2C_Mem_Read+0x440>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d007      	beq.n	8004b98 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ba6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2222      	movs	r2, #34	; 0x22
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2240      	movs	r2, #64	; 0x40
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4a5b      	ldr	r2, [pc, #364]	; (8004d44 <HAL_I2C_Mem_Read+0x228>)
 8004bd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bda:	88f8      	ldrh	r0, [r7, #6]
 8004bdc:	893a      	ldrh	r2, [r7, #8]
 8004bde:	8979      	ldrh	r1, [r7, #10]
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	9301      	str	r3, [sp, #4]
 8004be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	4603      	mov	r3, r0
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 fa52 	bl	8005094 <I2C_RequestMemoryRead>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e1b0      	b.n	8004f5c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d113      	bne.n	8004c2a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c02:	2300      	movs	r3, #0
 8004c04:	623b      	str	r3, [r7, #32]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	623b      	str	r3, [r7, #32]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	623b      	str	r3, [r7, #32]
 8004c16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	e184      	b.n	8004f34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d11b      	bne.n	8004c6a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	61fb      	str	r3, [r7, #28]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	61fb      	str	r3, [r7, #28]
 8004c56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	e164      	b.n	8004f34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d11b      	bne.n	8004caa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c92:	2300      	movs	r3, #0
 8004c94:	61bb      	str	r3, [r7, #24]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	61bb      	str	r3, [r7, #24]
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	e144      	b.n	8004f34 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	617b      	str	r3, [r7, #20]
 8004cbe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004cc0:	e138      	b.n	8004f34 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	f200 80f1 	bhi.w	8004eae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d123      	bne.n	8004d1c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 fc1b 	bl	8005514 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e139      	b.n	8004f5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d1a:	e10b      	b.n	8004f34 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d14e      	bne.n	8004dc2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	4906      	ldr	r1, [pc, #24]	; (8004d48 <HAL_I2C_Mem_Read+0x22c>)
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 fa98 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d008      	beq.n	8004d4c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e10e      	b.n	8004f5c <HAL_I2C_Mem_Read+0x440>
 8004d3e:	bf00      	nop
 8004d40:	00100002 	.word	0x00100002
 8004d44:	ffff0000 	.word	0xffff0000
 8004d48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dc0:	e0b8      	b.n	8004f34 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc8:	2200      	movs	r2, #0
 8004dca:	4966      	ldr	r1, [pc, #408]	; (8004f64 <HAL_I2C_Mem_Read+0x448>)
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 fa49 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e0bf      	b.n	8004f5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691a      	ldr	r2, [r3, #16]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	2200      	movs	r2, #0
 8004e26:	494f      	ldr	r1, [pc, #316]	; (8004f64 <HAL_I2C_Mem_Read+0x448>)
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fa1b 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e091      	b.n	8004f5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691a      	ldr	r2, [r3, #16]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004eac:	e042      	b.n	8004f34 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 fb2e 	bl	8005514 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e04c      	b.n	8004f5c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d118      	bne.n	8004f34 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f47f aec2 	bne.w	8004cc2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	e000      	b.n	8004f5c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f5a:	2302      	movs	r3, #2
  }
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3728      	adds	r7, #40	; 0x28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	00010004 	.word	0x00010004

08004f68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	4608      	mov	r0, r1
 8004f72:	4611      	mov	r1, r2
 8004f74:	461a      	mov	r2, r3
 8004f76:	4603      	mov	r3, r0
 8004f78:	817b      	strh	r3, [r7, #10]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	813b      	strh	r3, [r7, #8]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 f960 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00d      	beq.n	8004fc6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb8:	d103      	bne.n	8004fc2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e05f      	b.n	8005086 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fc6:	897b      	ldrh	r3, [r7, #10]
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	6a3a      	ldr	r2, [r7, #32]
 8004fda:	492d      	ldr	r1, [pc, #180]	; (8005090 <I2C_RequestMemoryWrite+0x128>)
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 f998 	bl	8005312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e04c      	b.n	8005086 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fec:	2300      	movs	r3, #0
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005004:	6a39      	ldr	r1, [r7, #32]
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fa02 	bl	8005410 <I2C_WaitOnTXEFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00d      	beq.n	800502e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	2b04      	cmp	r3, #4
 8005018:	d107      	bne.n	800502a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005028:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e02b      	b.n	8005086 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800502e:	88fb      	ldrh	r3, [r7, #6]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d105      	bne.n	8005040 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005034:	893b      	ldrh	r3, [r7, #8]
 8005036:	b2da      	uxtb	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	611a      	str	r2, [r3, #16]
 800503e:	e021      	b.n	8005084 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005040:	893b      	ldrh	r3, [r7, #8]
 8005042:	0a1b      	lsrs	r3, r3, #8
 8005044:	b29b      	uxth	r3, r3
 8005046:	b2da      	uxtb	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800504e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005050:	6a39      	ldr	r1, [r7, #32]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f9dc 	bl	8005410 <I2C_WaitOnTXEFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00d      	beq.n	800507a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	2b04      	cmp	r3, #4
 8005064:	d107      	bne.n	8005076 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005074:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e005      	b.n	8005086 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800507a:	893b      	ldrh	r3, [r7, #8]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	00010002 	.word	0x00010002

08005094 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af02      	add	r7, sp, #8
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	4608      	mov	r0, r1
 800509e:	4611      	mov	r1, r2
 80050a0:	461a      	mov	r2, r3
 80050a2:	4603      	mov	r3, r0
 80050a4:	817b      	strh	r3, [r7, #10]
 80050a6:	460b      	mov	r3, r1
 80050a8:	813b      	strh	r3, [r7, #8]
 80050aa:	4613      	mov	r3, r2
 80050ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 f8c2 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00d      	beq.n	8005102 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f4:	d103      	bne.n	80050fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e0aa      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005102:	897b      	ldrh	r3, [r7, #10]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	461a      	mov	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005110:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	6a3a      	ldr	r2, [r7, #32]
 8005116:	4952      	ldr	r1, [pc, #328]	; (8005260 <I2C_RequestMemoryRead+0x1cc>)
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 f8fa 	bl	8005312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e097      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800513e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005140:	6a39      	ldr	r1, [r7, #32]
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 f964 	bl	8005410 <I2C_WaitOnTXEFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00d      	beq.n	800516a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	2b04      	cmp	r3, #4
 8005154:	d107      	bne.n	8005166 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005164:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e076      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800516a:	88fb      	ldrh	r3, [r7, #6]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d105      	bne.n	800517c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005170:	893b      	ldrh	r3, [r7, #8]
 8005172:	b2da      	uxtb	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	611a      	str	r2, [r3, #16]
 800517a:	e021      	b.n	80051c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800517c:	893b      	ldrh	r3, [r7, #8]
 800517e:	0a1b      	lsrs	r3, r3, #8
 8005180:	b29b      	uxth	r3, r3
 8005182:	b2da      	uxtb	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800518a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518c:	6a39      	ldr	r1, [r7, #32]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f93e 	bl	8005410 <I2C_WaitOnTXEFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00d      	beq.n	80051b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d107      	bne.n	80051b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e050      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051b6:	893b      	ldrh	r3, [r7, #8]
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c2:	6a39      	ldr	r1, [r7, #32]
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f923 	bl	8005410 <I2C_WaitOnTXEFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00d      	beq.n	80051ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d107      	bne.n	80051e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e035      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	2200      	movs	r2, #0
 8005204:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f82b 	bl	8005264 <I2C_WaitOnFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00d      	beq.n	8005230 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005222:	d103      	bne.n	800522c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800522a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e013      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005230:	897b      	ldrh	r3, [r7, #10]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f043 0301 	orr.w	r3, r3, #1
 8005238:	b2da      	uxtb	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	6a3a      	ldr	r2, [r7, #32]
 8005244:	4906      	ldr	r1, [pc, #24]	; (8005260 <I2C_RequestMemoryRead+0x1cc>)
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 f863 	bl	8005312 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	00010002 	.word	0x00010002

08005264 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	4613      	mov	r3, r2
 8005272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005274:	e025      	b.n	80052c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527c:	d021      	beq.n	80052c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527e:	f7fe ff2f 	bl	80040e0 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d302      	bcc.n	8005294 <I2C_WaitOnFlagUntilTimeout+0x30>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d116      	bne.n	80052c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	f043 0220 	orr.w	r2, r3, #32
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e023      	b.n	800530a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	0c1b      	lsrs	r3, r3, #16
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d10d      	bne.n	80052e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	43da      	mvns	r2, r3
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4013      	ands	r3, r2
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	bf0c      	ite	eq
 80052de:	2301      	moveq	r3, #1
 80052e0:	2300      	movne	r3, #0
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	461a      	mov	r2, r3
 80052e6:	e00c      	b.n	8005302 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	43da      	mvns	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4013      	ands	r3, r2
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bf0c      	ite	eq
 80052fa:	2301      	moveq	r3, #1
 80052fc:	2300      	movne	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	461a      	mov	r2, r3
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	429a      	cmp	r2, r3
 8005306:	d0b6      	beq.n	8005276 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	607a      	str	r2, [r7, #4]
 800531e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005320:	e051      	b.n	80053c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800532c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005330:	d123      	bne.n	800537a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005340:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800534a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	f043 0204 	orr.w	r2, r3, #4
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e046      	b.n	8005408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005380:	d021      	beq.n	80053c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005382:	f7fe fead 	bl	80040e0 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	429a      	cmp	r2, r3
 8005390:	d302      	bcc.n	8005398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d116      	bne.n	80053c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	f043 0220 	orr.w	r2, r3, #32
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e020      	b.n	8005408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	0c1b      	lsrs	r3, r3, #16
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d10c      	bne.n	80053ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	43da      	mvns	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4013      	ands	r3, r2
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	bf14      	ite	ne
 80053e2:	2301      	movne	r3, #1
 80053e4:	2300      	moveq	r3, #0
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	e00b      	b.n	8005402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	43da      	mvns	r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	4013      	ands	r3, r2
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bf14      	ite	ne
 80053fc:	2301      	movne	r3, #1
 80053fe:	2300      	moveq	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d18d      	bne.n	8005322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800541c:	e02d      	b.n	800547a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 f8ce 	bl	80055c0 <I2C_IsAcknowledgeFailed>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e02d      	b.n	800548a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005434:	d021      	beq.n	800547a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005436:	f7fe fe53 	bl	80040e0 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	429a      	cmp	r2, r3
 8005444:	d302      	bcc.n	800544c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d116      	bne.n	800547a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	f043 0220 	orr.w	r2, r3, #32
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e007      	b.n	800548a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005484:	2b80      	cmp	r3, #128	; 0x80
 8005486:	d1ca      	bne.n	800541e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b084      	sub	sp, #16
 8005496:	af00      	add	r7, sp, #0
 8005498:	60f8      	str	r0, [r7, #12]
 800549a:	60b9      	str	r1, [r7, #8]
 800549c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800549e:	e02d      	b.n	80054fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 f88d 	bl	80055c0 <I2C_IsAcknowledgeFailed>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e02d      	b.n	800550c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b6:	d021      	beq.n	80054fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b8:	f7fe fe12 	bl	80040e0 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d302      	bcc.n	80054ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d116      	bne.n	80054fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	f043 0220 	orr.w	r2, r3, #32
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e007      	b.n	800550c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	2b04      	cmp	r3, #4
 8005508:	d1ca      	bne.n	80054a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005520:	e042      	b.n	80055a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	2b10      	cmp	r3, #16
 800552e:	d119      	bne.n	8005564 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0210 	mvn.w	r2, #16
 8005538:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e029      	b.n	80055b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005564:	f7fe fdbc 	bl	80040e0 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	429a      	cmp	r2, r3
 8005572:	d302      	bcc.n	800557a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d116      	bne.n	80055a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	f043 0220 	orr.w	r2, r3, #32
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e007      	b.n	80055b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b2:	2b40      	cmp	r3, #64	; 0x40
 80055b4:	d1b5      	bne.n	8005522 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d6:	d11b      	bne.n	8005610 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fc:	f043 0204 	orr.w	r2, r3, #4
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e000      	b.n	8005612 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800561e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005620:	b08f      	sub	sp, #60	; 0x3c
 8005622:	af0a      	add	r7, sp, #40	; 0x28
 8005624:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e10f      	b.n	8005850 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d106      	bne.n	8005650 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f00a f8ee 	bl	800f82c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2203      	movs	r2, #3
 8005654:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005660:	2b00      	cmp	r3, #0
 8005662:	d102      	bne.n	800566a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f003 fcf7 	bl	8009062 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	687e      	ldr	r6, [r7, #4]
 800567c:	466d      	mov	r5, sp
 800567e:	f106 0410 	add.w	r4, r6, #16
 8005682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800568a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800568e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005692:	1d33      	adds	r3, r6, #4
 8005694:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005696:	6838      	ldr	r0, [r7, #0]
 8005698:	f003 fbce 	bl	8008e38 <USB_CoreInit>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d005      	beq.n	80056ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2202      	movs	r2, #2
 80056a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e0d0      	b.n	8005850 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2100      	movs	r1, #0
 80056b4:	4618      	mov	r0, r3
 80056b6:	f003 fce5 	bl	8009084 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ba:	2300      	movs	r3, #0
 80056bc:	73fb      	strb	r3, [r7, #15]
 80056be:	e04a      	b.n	8005756 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80056c0:	7bfa      	ldrb	r2, [r7, #15]
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	4613      	mov	r3, r2
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	333d      	adds	r3, #61	; 0x3d
 80056d0:	2201      	movs	r2, #1
 80056d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80056d4:	7bfa      	ldrb	r2, [r7, #15]
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	4613      	mov	r3, r2
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	333c      	adds	r3, #60	; 0x3c
 80056e4:	7bfa      	ldrb	r2, [r7, #15]
 80056e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80056e8:	7bfa      	ldrb	r2, [r7, #15]
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	b298      	uxth	r0, r3
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	4613      	mov	r3, r2
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	3344      	adds	r3, #68	; 0x44
 80056fc:	4602      	mov	r2, r0
 80056fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005700:	7bfa      	ldrb	r2, [r7, #15]
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	4613      	mov	r3, r2
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	4413      	add	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	440b      	add	r3, r1
 800570e:	3340      	adds	r3, #64	; 0x40
 8005710:	2200      	movs	r2, #0
 8005712:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005714:	7bfa      	ldrb	r2, [r7, #15]
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	3348      	adds	r3, #72	; 0x48
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005728:	7bfa      	ldrb	r2, [r7, #15]
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	4613      	mov	r3, r2
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	440b      	add	r3, r1
 8005736:	334c      	adds	r3, #76	; 0x4c
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800573c:	7bfa      	ldrb	r2, [r7, #15]
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	4413      	add	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	3354      	adds	r3, #84	; 0x54
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	3301      	adds	r3, #1
 8005754:	73fb      	strb	r3, [r7, #15]
 8005756:	7bfa      	ldrb	r2, [r7, #15]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	429a      	cmp	r2, r3
 800575e:	d3af      	bcc.n	80056c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005760:	2300      	movs	r3, #0
 8005762:	73fb      	strb	r3, [r7, #15]
 8005764:	e044      	b.n	80057f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005766:	7bfa      	ldrb	r2, [r7, #15]
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	4413      	add	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005778:	2200      	movs	r2, #0
 800577a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800577c:	7bfa      	ldrb	r2, [r7, #15]
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	4613      	mov	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	4413      	add	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800578e:	7bfa      	ldrb	r2, [r7, #15]
 8005790:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005792:	7bfa      	ldrb	r2, [r7, #15]
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	4613      	mov	r3, r2
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	440b      	add	r3, r1
 80057a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80057a4:	2200      	movs	r2, #0
 80057a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057a8:	7bfa      	ldrb	r2, [r7, #15]
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	4613      	mov	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	4413      	add	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	440b      	add	r3, r1
 80057b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80057be:	7bfa      	ldrb	r2, [r7, #15]
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057d4:	7bfa      	ldrb	r2, [r7, #15]
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	4613      	mov	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	4413      	add	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	440b      	add	r3, r1
 80057e2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	3301      	adds	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
 80057f0:	7bfa      	ldrb	r2, [r7, #15]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d3b5      	bcc.n	8005766 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	687e      	ldr	r6, [r7, #4]
 8005802:	466d      	mov	r5, sp
 8005804:	f106 0410 	add.w	r4, r6, #16
 8005808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800580a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800580c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800580e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005810:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005814:	e885 0003 	stmia.w	r5, {r0, r1}
 8005818:	1d33      	adds	r3, r6, #4
 800581a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800581c:	6838      	ldr	r0, [r7, #0]
 800581e:	f003 fc7d 	bl	800911c <USB_DevInit>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e00d      	b.n	8005850 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f004 fdcc 	bl	800a3e6 <USB_DevDisconnect>

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005858 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_PCD_Start+0x1c>
 8005870:	2302      	movs	r3, #2
 8005872:	e020      	b.n	80058b6 <HAL_PCD_Start+0x5e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	2b01      	cmp	r3, #1
 8005882:	d109      	bne.n	8005898 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005888:	2b01      	cmp	r3, #1
 800588a:	d005      	beq.n	8005898 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4618      	mov	r0, r3
 800589e:	f003 fbcf 	bl	8009040 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f004 fd7c 	bl	800a3a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80058be:	b590      	push	{r4, r7, lr}
 80058c0:	b08d      	sub	sp, #52	; 0x34
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f004 fe3a 	bl	800a54e <USB_GetMode>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f040 848a 	bne.w	80061f6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f004 fd9e 	bl	800a428 <USB_ReadInterrupts>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 8480 	beq.w	80061f4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	0a1b      	lsrs	r3, r3, #8
 80058fe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4618      	mov	r0, r3
 800590e:	f004 fd8b 	bl	800a428 <USB_ReadInterrupts>
 8005912:	4603      	mov	r3, r0
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b02      	cmp	r3, #2
 800591a:	d107      	bne.n	800592c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695a      	ldr	r2, [r3, #20]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f002 0202 	and.w	r2, r2, #2
 800592a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f004 fd79 	bl	800a428 <USB_ReadInterrupts>
 8005936:	4603      	mov	r3, r0
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	2b10      	cmp	r3, #16
 800593e:	d161      	bne.n	8005a04 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0210 	bic.w	r2, r2, #16
 800594e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	f003 020f 	and.w	r2, r3, #15
 800595c:	4613      	mov	r3, r2
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	4413      	add	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	4413      	add	r3, r2
 800596c:	3304      	adds	r3, #4
 800596e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	0c5b      	lsrs	r3, r3, #17
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	2b02      	cmp	r3, #2
 800597a:	d124      	bne.n	80059c6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005982:	4013      	ands	r3, r2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d035      	beq.n	80059f4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	091b      	lsrs	r3, r3, #4
 8005990:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005992:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005996:	b29b      	uxth	r3, r3
 8005998:	461a      	mov	r2, r3
 800599a:	6a38      	ldr	r0, [r7, #32]
 800599c:	f004 fbb0 	bl	800a100 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	091b      	lsrs	r3, r3, #4
 80059a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059ac:	441a      	add	r2, r3
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	6a1a      	ldr	r2, [r3, #32]
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	091b      	lsrs	r3, r3, #4
 80059ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059be:	441a      	add	r2, r3
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	621a      	str	r2, [r3, #32]
 80059c4:	e016      	b.n	80059f4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	0c5b      	lsrs	r3, r3, #17
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	2b06      	cmp	r3, #6
 80059d0:	d110      	bne.n	80059f4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80059d8:	2208      	movs	r2, #8
 80059da:	4619      	mov	r1, r3
 80059dc:	6a38      	ldr	r0, [r7, #32]
 80059de:	f004 fb8f 	bl	800a100 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	6a1a      	ldr	r2, [r3, #32]
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	091b      	lsrs	r3, r3, #4
 80059ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059ee:	441a      	add	r2, r3
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0210 	orr.w	r2, r2, #16
 8005a02:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f004 fd0d 	bl	800a428 <USB_ReadInterrupts>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a18:	f040 80a7 	bne.w	8005b6a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f004 fd12 	bl	800a44e <USB_ReadDevAllOutEpInterrupt>
 8005a2a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005a2c:	e099      	b.n	8005b62 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 808e 	beq.w	8005b56 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	4611      	mov	r1, r2
 8005a44:	4618      	mov	r0, r3
 8005a46:	f004 fd36 	bl	800a4b6 <USB_ReadDevOutEPInterrupt>
 8005a4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00c      	beq.n	8005a70 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	461a      	mov	r2, r3
 8005a64:	2301      	movs	r3, #1
 8005a66:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005a68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fec2 	bl	80067f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00c      	beq.n	8005a94 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a86:	461a      	mov	r2, r3
 8005a88:	2308      	movs	r3, #8
 8005a8a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005a8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 ff98 	bl	80069c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d008      	beq.n	8005ab0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aaa:	461a      	mov	r2, r3
 8005aac:	2310      	movs	r3, #16
 8005aae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d030      	beq.n	8005b1c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac2:	2b80      	cmp	r3, #128	; 0x80
 8005ac4:	d109      	bne.n	8005ada <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	69fa      	ldr	r2, [r7, #28]
 8005ad0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ad4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ad8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005adc:	4613      	mov	r3, r2
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	4413      	add	r3, r2
 8005aec:	3304      	adds	r3, #4
 8005aee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	78db      	ldrb	r3, [r3, #3]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d108      	bne.n	8005b0a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	2200      	movs	r2, #0
 8005afc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f009 ff8d 	bl	800fa24 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b16:	461a      	mov	r2, r3
 8005b18:	2302      	movs	r3, #2
 8005b1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d008      	beq.n	8005b38 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b32:	461a      	mov	r2, r3
 8005b34:	2320      	movs	r3, #32
 8005b36:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d009      	beq.n	8005b56 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b54:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	3301      	adds	r3, #1
 8005b5a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5e:	085b      	lsrs	r3, r3, #1
 8005b60:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f47f af62 	bne.w	8005a2e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f004 fc5a 	bl	800a428 <USB_ReadInterrupts>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b7e:	f040 80db 	bne.w	8005d38 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f004 fc7b 	bl	800a482 <USB_ReadDevAllInEpInterrupt>
 8005b8c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005b92:	e0cd      	b.n	8005d30 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 80c2 	beq.w	8005d24 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	4611      	mov	r1, r2
 8005baa:	4618      	mov	r0, r3
 8005bac:	f004 fca1 	bl	800a4f2 <USB_ReadDevInEPInterrupt>
 8005bb0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d057      	beq.n	8005c6c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	43db      	mvns	r3, r3
 8005bd6:	69f9      	ldr	r1, [r7, #28]
 8005bd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bdc:	4013      	ands	r3, r2
 8005bde:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bec:	461a      	mov	r2, r3
 8005bee:	2301      	movs	r3, #1
 8005bf0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d132      	bne.n	8005c60 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfe:	4613      	mov	r3, r2
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	4413      	add	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	440b      	add	r3, r1
 8005c08:	334c      	adds	r3, #76	; 0x4c
 8005c0a:	6819      	ldr	r1, [r3, #0]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c10:	4613      	mov	r3, r2
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4403      	add	r3, r0
 8005c1a:	3348      	adds	r3, #72	; 0x48
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4419      	add	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c24:	4613      	mov	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4403      	add	r3, r0
 8005c2e:	334c      	adds	r3, #76	; 0x4c
 8005c30:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d113      	bne.n	8005c60 <HAL_PCD_IRQHandler+0x3a2>
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	4413      	add	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	440b      	add	r3, r1
 8005c46:	3354      	adds	r3, #84	; 0x54
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d108      	bne.n	8005c60 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c58:	461a      	mov	r2, r3
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	f004 fca8 	bl	800a5b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f009 fe61 	bl	800f92e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f003 0308 	and.w	r3, r3, #8
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d008      	beq.n	8005c88 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c82:	461a      	mov	r2, r3
 8005c84:	2308      	movs	r3, #8
 8005c86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f003 0310 	and.w	r3, r3, #16
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d008      	beq.n	8005ca4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	2310      	movs	r3, #16
 8005ca2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d008      	beq.n	8005cc0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cba:	461a      	mov	r2, r3
 8005cbc:	2340      	movs	r3, #64	; 0x40
 8005cbe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d023      	beq.n	8005d12 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005cca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ccc:	6a38      	ldr	r0, [r7, #32]
 8005cce:	f003 fb89 	bl	80093e4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	4413      	add	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	3338      	adds	r3, #56	; 0x38
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	78db      	ldrb	r3, [r3, #3]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d108      	bne.n	8005d00 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f009 fea4 	bl	800fa48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2302      	movs	r3, #2
 8005d10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fcdb 	bl	80066da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	3301      	adds	r3, #1
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2c:	085b      	lsrs	r3, r3, #1
 8005d2e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f47f af2e 	bne.w	8005b94 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f004 fb73 	bl	800a428 <USB_ReadInterrupts>
 8005d42:	4603      	mov	r3, r0
 8005d44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d4c:	d122      	bne.n	8005d94 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d5c:	f023 0301 	bic.w	r3, r3, #1
 8005d60:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d108      	bne.n	8005d7e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005d74:	2100      	movs	r1, #0
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fec2 	bl	8006b00 <HAL_PCDEx_LPM_Callback>
 8005d7c:	e002      	b.n	8005d84 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f009 fe42 	bl	800fa08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	695a      	ldr	r2, [r3, #20]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005d92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f004 fb45 	bl	800a428 <USB_ReadInterrupts>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005da8:	d112      	bne.n	8005dd0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d102      	bne.n	8005dc0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f009 fdfe 	bl	800f9bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	695a      	ldr	r2, [r3, #20]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005dce:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f004 fb27 	bl	800a428 <USB_ReadInterrupts>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de4:	f040 80b7 	bne.w	8005f56 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005df6:	f023 0301 	bic.w	r3, r3, #1
 8005dfa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2110      	movs	r1, #16
 8005e02:	4618      	mov	r0, r3
 8005e04:	f003 faee 	bl	80093e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e08:	2300      	movs	r3, #0
 8005e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e0c:	e046      	b.n	8005e9c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e20:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e32:	0151      	lsls	r1, r2, #5
 8005e34:	69fa      	ldr	r2, [r7, #28]
 8005e36:	440a      	add	r2, r1
 8005e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e54:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	69fa      	ldr	r2, [r7, #28]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e86:	0151      	lsls	r1, r2, #5
 8005e88:	69fa      	ldr	r2, [r7, #28]
 8005e8a:	440a      	add	r2, r1
 8005e8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e94:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e98:	3301      	adds	r3, #1
 8005e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d3b3      	bcc.n	8005e0e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	69fa      	ldr	r2, [r7, #28]
 8005eb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eb4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005eb8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d016      	beq.n	8005ef0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ecc:	69fa      	ldr	r2, [r7, #28]
 8005ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ed2:	f043 030b 	orr.w	r3, r3, #11
 8005ed6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ee8:	f043 030b 	orr.w	r3, r3, #11
 8005eec:	6453      	str	r3, [r2, #68]	; 0x44
 8005eee:	e015      	b.n	8005f1c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	69fa      	ldr	r2, [r7, #28]
 8005efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005efe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f02:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005f06:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	69fa      	ldr	r2, [r7, #28]
 8005f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f16:	f043 030b 	orr.w	r3, r3, #11
 8005f1a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005f2e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f40:	461a      	mov	r2, r3
 8005f42:	f004 fb35 	bl	800a5b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	695a      	ldr	r2, [r3, #20]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005f54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f004 fa64 	bl	800a428 <USB_ReadInterrupts>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f6a:	d124      	bne.n	8005fb6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f004 fafa 	bl	800a56a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f003 faaf 	bl	80094de <USB_GetDevSpeed>
 8005f80:	4603      	mov	r3, r0
 8005f82:	461a      	mov	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681c      	ldr	r4, [r3, #0]
 8005f8c:	f001 fa26 	bl	80073dc <HAL_RCC_GetHCLKFreq>
 8005f90:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f002 ffae 	bl	8008efc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f009 fcec 	bl	800f97e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	695a      	ldr	r2, [r3, #20]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005fb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f004 fa34 	bl	800a428 <USB_ReadInterrupts>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b08      	cmp	r3, #8
 8005fc8:	d10a      	bne.n	8005fe0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f009 fcc9 	bl	800f962 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695a      	ldr	r2, [r3, #20]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f002 0208 	and.w	r2, r2, #8
 8005fde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f004 fa1f 	bl	800a428 <USB_ReadInterrupts>
 8005fea:	4603      	mov	r3, r0
 8005fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff0:	2b80      	cmp	r3, #128	; 0x80
 8005ff2:	d122      	bne.n	800603a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006000:	2301      	movs	r3, #1
 8006002:	627b      	str	r3, [r7, #36]	; 0x24
 8006004:	e014      	b.n	8006030 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800600a:	4613      	mov	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	440b      	add	r3, r1
 8006014:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d105      	bne.n	800602a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	b2db      	uxtb	r3, r3
 8006022:	4619      	mov	r1, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fb27 	bl	8006678 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	3301      	adds	r3, #1
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006036:	429a      	cmp	r2, r3
 8006038:	d3e5      	bcc.n	8006006 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f004 f9f2 	bl	800a428 <USB_ReadInterrupts>
 8006044:	4603      	mov	r3, r0
 8006046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800604a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800604e:	d13b      	bne.n	80060c8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006050:	2301      	movs	r3, #1
 8006052:	627b      	str	r3, [r7, #36]	; 0x24
 8006054:	e02b      	b.n	80060ae <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606a:	4613      	mov	r3, r2
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	440b      	add	r3, r1
 8006074:	3340      	adds	r3, #64	; 0x40
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d115      	bne.n	80060a8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800607c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800607e:	2b00      	cmp	r3, #0
 8006080:	da12      	bge.n	80060a8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006086:	4613      	mov	r3, r2
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	4413      	add	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	440b      	add	r3, r1
 8006090:	333f      	adds	r3, #63	; 0x3f
 8006092:	2201      	movs	r2, #1
 8006094:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	b2db      	uxtb	r3, r3
 800609a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fae8 	bl	8006678 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	3301      	adds	r3, #1
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d3ce      	bcc.n	8006056 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	695a      	ldr	r2, [r3, #20]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80060c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f004 f9ab 	bl	800a428 <USB_ReadInterrupts>
 80060d2:	4603      	mov	r3, r0
 80060d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060dc:	d155      	bne.n	800618a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060de:	2301      	movs	r3, #1
 80060e0:	627b      	str	r3, [r7, #36]	; 0x24
 80060e2:	e045      	b.n	8006170 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f8:	4613      	mov	r3, r2
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	4413      	add	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	440b      	add	r3, r1
 8006102:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d12e      	bne.n	800616a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800610c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800610e:	2b00      	cmp	r3, #0
 8006110:	da2b      	bge.n	800616a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800611e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006122:	429a      	cmp	r2, r3
 8006124:	d121      	bne.n	800616a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612a:	4613      	mov	r3, r2
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	440b      	add	r3, r1
 8006134:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006138:	2201      	movs	r2, #1
 800613a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10a      	bne.n	800616a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	69fa      	ldr	r2, [r7, #28]
 800615e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006166:	6053      	str	r3, [r2, #4]
            break;
 8006168:	e007      	b.n	800617a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	3301      	adds	r3, #1
 800616e:	627b      	str	r3, [r7, #36]	; 0x24
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006176:	429a      	cmp	r2, r3
 8006178:	d3b4      	bcc.n	80060e4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695a      	ldr	r2, [r3, #20]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006188:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4618      	mov	r0, r3
 8006190:	f004 f94a 	bl	800a428 <USB_ReadInterrupts>
 8006194:	4603      	mov	r3, r0
 8006196:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800619a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800619e:	d10a      	bne.n	80061b6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f009 fc63 	bl	800fa6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	695a      	ldr	r2, [r3, #20]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80061b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f004 f934 	bl	800a428 <USB_ReadInterrupts>
 80061c0:	4603      	mov	r3, r0
 80061c2:	f003 0304 	and.w	r3, r3, #4
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d115      	bne.n	80061f6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f009 fc53 	bl	800fa88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6859      	ldr	r1, [r3, #4]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	605a      	str	r2, [r3, #4]
 80061f2:	e000      	b.n	80061f6 <HAL_PCD_IRQHandler+0x938>
      return;
 80061f4:	bf00      	nop
    }
  }
}
 80061f6:	3734      	adds	r7, #52	; 0x34
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd90      	pop	{r4, r7, pc}

080061fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_PCD_SetAddress+0x1a>
 8006212:	2302      	movs	r3, #2
 8006214:	e013      	b.n	800623e <HAL_PCD_SetAddress+0x42>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	78fa      	ldrb	r2, [r7, #3]
 8006222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	78fa      	ldrb	r2, [r7, #3]
 800622c:	4611      	mov	r1, r2
 800622e:	4618      	mov	r0, r3
 8006230:	f004 f892 	bl	800a358 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b084      	sub	sp, #16
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	4608      	mov	r0, r1
 8006250:	4611      	mov	r1, r2
 8006252:	461a      	mov	r2, r3
 8006254:	4603      	mov	r3, r0
 8006256:	70fb      	strb	r3, [r7, #3]
 8006258:	460b      	mov	r3, r1
 800625a:	803b      	strh	r3, [r7, #0]
 800625c:	4613      	mov	r3, r2
 800625e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006264:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006268:	2b00      	cmp	r3, #0
 800626a:	da0f      	bge.n	800628c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	f003 020f 	and.w	r2, r3, #15
 8006272:	4613      	mov	r3, r2
 8006274:	00db      	lsls	r3, r3, #3
 8006276:	4413      	add	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	3338      	adds	r3, #56	; 0x38
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	4413      	add	r3, r2
 8006280:	3304      	adds	r3, #4
 8006282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2201      	movs	r2, #1
 8006288:	705a      	strb	r2, [r3, #1]
 800628a:	e00f      	b.n	80062ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	f003 020f 	and.w	r2, r3, #15
 8006292:	4613      	mov	r3, r2
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	4413      	add	r3, r2
 80062a2:	3304      	adds	r3, #4
 80062a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80062ac:	78fb      	ldrb	r3, [r7, #3]
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80062b8:	883a      	ldrh	r2, [r7, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	78ba      	ldrb	r2, [r7, #2]
 80062c2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	785b      	ldrb	r3, [r3, #1]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d004      	beq.n	80062d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80062d6:	78bb      	ldrb	r3, [r7, #2]
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d102      	bne.n	80062e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_PCD_EP_Open+0xaa>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e00e      	b.n	800630e <HAL_PCD_EP_Open+0xc8>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68f9      	ldr	r1, [r7, #12]
 80062fe:	4618      	mov	r0, r3
 8006300:	f003 f912 	bl	8009528 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800630c:	7afb      	ldrb	r3, [r7, #11]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	460b      	mov	r3, r1
 8006320:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006322:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006326:	2b00      	cmp	r3, #0
 8006328:	da0f      	bge.n	800634a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	f003 020f 	and.w	r2, r3, #15
 8006330:	4613      	mov	r3, r2
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	4413      	add	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	3338      	adds	r3, #56	; 0x38
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	4413      	add	r3, r2
 800633e:	3304      	adds	r3, #4
 8006340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2201      	movs	r2, #1
 8006346:	705a      	strb	r2, [r3, #1]
 8006348:	e00f      	b.n	800636a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800634a:	78fb      	ldrb	r3, [r7, #3]
 800634c:	f003 020f 	and.w	r2, r3, #15
 8006350:	4613      	mov	r3, r2
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	4413      	add	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	4413      	add	r3, r2
 8006360:	3304      	adds	r3, #4
 8006362:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800636a:	78fb      	ldrb	r3, [r7, #3]
 800636c:	f003 030f 	and.w	r3, r3, #15
 8006370:	b2da      	uxtb	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <HAL_PCD_EP_Close+0x6e>
 8006380:	2302      	movs	r3, #2
 8006382:	e00e      	b.n	80063a2 <HAL_PCD_EP_Close+0x8c>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68f9      	ldr	r1, [r7, #12]
 8006392:	4618      	mov	r0, r3
 8006394:	f003 f950 	bl	8009638 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b086      	sub	sp, #24
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]
 80063b6:	460b      	mov	r3, r1
 80063b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063ba:	7afb      	ldrb	r3, [r7, #11]
 80063bc:	f003 020f 	and.w	r2, r3, #15
 80063c0:	4613      	mov	r3, r2
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	4413      	add	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	3304      	adds	r3, #4
 80063d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2200      	movs	r2, #0
 80063e4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2200      	movs	r2, #0
 80063ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063ec:	7afb      	ldrb	r3, [r7, #11]
 80063ee:	f003 030f 	and.w	r3, r3, #15
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d102      	bne.n	8006406 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006406:	7afb      	ldrb	r3, [r7, #11]
 8006408:	f003 030f 	and.w	r3, r3, #15
 800640c:	2b00      	cmp	r3, #0
 800640e:	d109      	bne.n	8006424 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6818      	ldr	r0, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	461a      	mov	r2, r3
 800641c:	6979      	ldr	r1, [r7, #20]
 800641e:	f003 fc2f 	bl	8009c80 <USB_EP0StartXfer>
 8006422:	e008      	b.n	8006436 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6818      	ldr	r0, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	461a      	mov	r2, r3
 8006430:	6979      	ldr	r1, [r7, #20]
 8006432:	f003 f9dd 	bl	80097f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	f003 020f 	and.w	r2, r3, #15
 8006452:	6879      	ldr	r1, [r7, #4]
 8006454:	4613      	mov	r3, r2
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	4413      	add	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	440b      	add	r3, r1
 800645e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006462:	681b      	ldr	r3, [r3, #0]
}
 8006464:	4618      	mov	r0, r3
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	607a      	str	r2, [r7, #4]
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	460b      	mov	r3, r1
 800647e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006480:	7afb      	ldrb	r3, [r7, #11]
 8006482:	f003 020f 	and.w	r2, r3, #15
 8006486:	4613      	mov	r3, r2
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	4413      	add	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	3338      	adds	r3, #56	; 0x38
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4413      	add	r3, r2
 8006494:	3304      	adds	r3, #4
 8006496:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	2200      	movs	r2, #0
 80064a8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	2201      	movs	r2, #1
 80064ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064b0:	7afb      	ldrb	r3, [r7, #11]
 80064b2:	f003 030f 	and.w	r3, r3, #15
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d102      	bne.n	80064ca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80064ca:	7afb      	ldrb	r3, [r7, #11]
 80064cc:	f003 030f 	and.w	r3, r3, #15
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d109      	bne.n	80064e8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6818      	ldr	r0, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	461a      	mov	r2, r3
 80064e0:	6979      	ldr	r1, [r7, #20]
 80064e2:	f003 fbcd 	bl	8009c80 <USB_EP0StartXfer>
 80064e6:	e008      	b.n	80064fa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6818      	ldr	r0, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	461a      	mov	r2, r3
 80064f4:	6979      	ldr	r1, [r7, #20]
 80064f6:	f003 f97b 	bl	80097f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	f003 020f 	and.w	r2, r3, #15
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	429a      	cmp	r2, r3
 800651c:	d901      	bls.n	8006522 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e050      	b.n	80065c4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006522:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006526:	2b00      	cmp	r3, #0
 8006528:	da0f      	bge.n	800654a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800652a:	78fb      	ldrb	r3, [r7, #3]
 800652c:	f003 020f 	and.w	r2, r3, #15
 8006530:	4613      	mov	r3, r2
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	4413      	add	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	3338      	adds	r3, #56	; 0x38
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	4413      	add	r3, r2
 800653e:	3304      	adds	r3, #4
 8006540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	705a      	strb	r2, [r3, #1]
 8006548:	e00d      	b.n	8006566 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800654a:	78fa      	ldrb	r2, [r7, #3]
 800654c:	4613      	mov	r3, r2
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	4413      	add	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	4413      	add	r3, r2
 800655c:	3304      	adds	r3, #4
 800655e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2201      	movs	r2, #1
 800656a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	b2da      	uxtb	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_PCD_EP_SetStall+0x82>
 8006582:	2302      	movs	r3, #2
 8006584:	e01e      	b.n	80065c4 <HAL_PCD_EP_SetStall+0xc0>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68f9      	ldr	r1, [r7, #12]
 8006594:	4618      	mov	r0, r3
 8006596:	f003 fe0b 	bl	800a1b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800659a:	78fb      	ldrb	r3, [r7, #3]
 800659c:	f003 030f 	and.w	r3, r3, #15
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10a      	bne.n	80065ba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6818      	ldr	r0, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	b2d9      	uxtb	r1, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80065b4:	461a      	mov	r2, r3
 80065b6:	f003 fffb 	bl	800a5b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	f003 020f 	and.w	r2, r3, #15
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d901      	bls.n	80065ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e042      	b.n	8006670 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80065ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	da0f      	bge.n	8006612 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065f2:	78fb      	ldrb	r3, [r7, #3]
 80065f4:	f003 020f 	and.w	r2, r3, #15
 80065f8:	4613      	mov	r3, r2
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	4413      	add	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	3338      	adds	r3, #56	; 0x38
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	4413      	add	r3, r2
 8006606:	3304      	adds	r3, #4
 8006608:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2201      	movs	r2, #1
 800660e:	705a      	strb	r2, [r3, #1]
 8006610:	e00f      	b.n	8006632 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006612:	78fb      	ldrb	r3, [r7, #3]
 8006614:	f003 020f 	and.w	r2, r3, #15
 8006618:	4613      	mov	r3, r2
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	4413      	add	r3, r2
 8006628:	3304      	adds	r3, #4
 800662a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006638:	78fb      	ldrb	r3, [r7, #3]
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	b2da      	uxtb	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800664a:	2b01      	cmp	r3, #1
 800664c:	d101      	bne.n	8006652 <HAL_PCD_EP_ClrStall+0x86>
 800664e:	2302      	movs	r3, #2
 8006650:	e00e      	b.n	8006670 <HAL_PCD_EP_ClrStall+0xa4>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68f9      	ldr	r1, [r7, #12]
 8006660:	4618      	mov	r0, r3
 8006662:	f003 fe13 	bl	800a28c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006688:	2b00      	cmp	r3, #0
 800668a:	da0c      	bge.n	80066a6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800668c:	78fb      	ldrb	r3, [r7, #3]
 800668e:	f003 020f 	and.w	r2, r3, #15
 8006692:	4613      	mov	r3, r2
 8006694:	00db      	lsls	r3, r3, #3
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	3338      	adds	r3, #56	; 0x38
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	4413      	add	r3, r2
 80066a0:	3304      	adds	r3, #4
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	e00c      	b.n	80066c0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066a6:	78fb      	ldrb	r3, [r7, #3]
 80066a8:	f003 020f 	and.w	r2, r3, #15
 80066ac:	4613      	mov	r3, r2
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	4413      	add	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	4413      	add	r3, r2
 80066bc:	3304      	adds	r3, #4
 80066be:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68f9      	ldr	r1, [r7, #12]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f003 fc32 	bl	8009f30 <USB_EPStopXfer>
 80066cc:	4603      	mov	r3, r0
 80066ce:	72fb      	strb	r3, [r7, #11]

  return ret;
 80066d0:	7afb      	ldrb	r3, [r7, #11]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b08a      	sub	sp, #40	; 0x28
 80066de:	af02      	add	r7, sp, #8
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	4613      	mov	r3, r2
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	4413      	add	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	3338      	adds	r3, #56	; 0x38
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	4413      	add	r3, r2
 80066fe:	3304      	adds	r3, #4
 8006700:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6a1a      	ldr	r2, [r3, #32]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	429a      	cmp	r2, r3
 800670c:	d901      	bls.n	8006712 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e06c      	b.n	80067ec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	699a      	ldr	r2, [r3, #24]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	429a      	cmp	r2, r3
 8006726:	d902      	bls.n	800672e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	3303      	adds	r3, #3
 8006732:	089b      	lsrs	r3, r3, #2
 8006734:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006736:	e02b      	b.n	8006790 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	699a      	ldr	r2, [r3, #24]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	69fa      	ldr	r2, [r7, #28]
 800674a:	429a      	cmp	r2, r3
 800674c:	d902      	bls.n	8006754 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	3303      	adds	r3, #3
 8006758:	089b      	lsrs	r3, r3, #2
 800675a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6919      	ldr	r1, [r3, #16]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	b2da      	uxtb	r2, r3
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800676c:	b2db      	uxtb	r3, r3
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	4603      	mov	r3, r0
 8006772:	6978      	ldr	r0, [r7, #20]
 8006774:	f003 fc86 	bl	800a084 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	691a      	ldr	r2, [r3, #16]
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	441a      	add	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6a1a      	ldr	r2, [r3, #32]
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	441a      	add	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d809      	bhi.n	80067ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6a1a      	ldr	r2, [r3, #32]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d203      	bcs.n	80067ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1be      	bne.n	8006738 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	699a      	ldr	r2, [r3, #24]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d811      	bhi.n	80067ea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	f003 030f 	and.w	r3, r3, #15
 80067cc:	2201      	movs	r2, #1
 80067ce:	fa02 f303 	lsl.w	r3, r2, r3
 80067d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	43db      	mvns	r3, r3
 80067e0:	6939      	ldr	r1, [r7, #16]
 80067e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067e6:	4013      	ands	r3, r2
 80067e8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3720      	adds	r7, #32
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	333c      	adds	r3, #60	; 0x3c
 800680c:	3304      	adds	r3, #4
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d17b      	bne.n	8006922 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f003 0308 	and.w	r3, r3, #8
 8006830:	2b00      	cmp	r3, #0
 8006832:	d015      	beq.n	8006860 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	4a61      	ldr	r2, [pc, #388]	; (80069bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006838:	4293      	cmp	r3, r2
 800683a:	f240 80b9 	bls.w	80069b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 80b3 	beq.w	80069b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	4413      	add	r3, r2
 8006852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006856:	461a      	mov	r2, r3
 8006858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800685c:	6093      	str	r3, [r2, #8]
 800685e:	e0a7      	b.n	80069b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f003 0320 	and.w	r3, r3, #32
 8006866:	2b00      	cmp	r3, #0
 8006868:	d009      	beq.n	800687e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006876:	461a      	mov	r2, r3
 8006878:	2320      	movs	r3, #32
 800687a:	6093      	str	r3, [r2, #8]
 800687c:	e098      	b.n	80069b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006884:	2b00      	cmp	r3, #0
 8006886:	f040 8093 	bne.w	80069b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	4a4b      	ldr	r2, [pc, #300]	; (80069bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d90f      	bls.n	80068b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a8:	461a      	mov	r2, r3
 80068aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ae:	6093      	str	r3, [r2, #8]
 80068b0:	e07e      	b.n	80069b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	4613      	mov	r3, r2
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	4413      	add	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	4413      	add	r3, r2
 80068c4:	3304      	adds	r3, #4
 80068c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	69da      	ldr	r2, [r3, #28]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	0159      	lsls	r1, r3, #5
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	440b      	add	r3, r1
 80068d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068de:	1ad2      	subs	r2, r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d114      	bne.n	8006914 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d109      	bne.n	8006906 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80068fc:	461a      	mov	r2, r3
 80068fe:	2101      	movs	r1, #1
 8006900:	f003 fe56 	bl	800a5b0 <USB_EP0_OutStart>
 8006904:	e006      	b.n	8006914 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	691a      	ldr	r2, [r3, #16]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	441a      	add	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	b2db      	uxtb	r3, r3
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f008 ffec 	bl	800f8f8 <HAL_PCD_DataOutStageCallback>
 8006920:	e046      	b.n	80069b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	4a26      	ldr	r2, [pc, #152]	; (80069c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d124      	bne.n	8006974 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00a      	beq.n	800694a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006940:	461a      	mov	r2, r3
 8006942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006946:	6093      	str	r3, [r2, #8]
 8006948:	e032      	b.n	80069b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f003 0320 	and.w	r3, r3, #32
 8006950:	2b00      	cmp	r3, #0
 8006952:	d008      	beq.n	8006966 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006960:	461a      	mov	r2, r3
 8006962:	2320      	movs	r3, #32
 8006964:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	b2db      	uxtb	r3, r3
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f008 ffc3 	bl	800f8f8 <HAL_PCD_DataOutStageCallback>
 8006972:	e01d      	b.n	80069b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d114      	bne.n	80069a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	4613      	mov	r3, r2
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	4413      	add	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	440b      	add	r3, r1
 8006988:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d108      	bne.n	80069a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800699c:	461a      	mov	r2, r3
 800699e:	2100      	movs	r1, #0
 80069a0:	f003 fe06 	bl	800a5b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f008 ffa4 	bl	800f8f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3720      	adds	r7, #32
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	4f54300a 	.word	0x4f54300a
 80069c0:	4f54310a 	.word	0x4f54310a

080069c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	333c      	adds	r3, #60	; 0x3c
 80069dc:	3304      	adds	r3, #4
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4a15      	ldr	r2, [pc, #84]	; (8006a4c <PCD_EP_OutSetupPacket_int+0x88>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d90e      	bls.n	8006a18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d009      	beq.n	8006a18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a10:	461a      	mov	r2, r3
 8006a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f008 ff5b 	bl	800f8d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4a0a      	ldr	r2, [pc, #40]	; (8006a4c <PCD_EP_OutSetupPacket_int+0x88>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d90c      	bls.n	8006a40 <PCD_EP_OutSetupPacket_int+0x7c>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d108      	bne.n	8006a40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6818      	ldr	r0, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	f003 fdb8 	bl	800a5b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	4f54300a 	.word	0x4f54300a

08006a50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70fb      	strb	r3, [r7, #3]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006a68:	78fb      	ldrb	r3, [r7, #3]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d107      	bne.n	8006a7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006a6e:	883b      	ldrh	r3, [r7, #0]
 8006a70:	0419      	lsls	r1, r3, #16
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8006a7c:	e028      	b.n	8006ad0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a84:	0c1b      	lsrs	r3, r3, #16
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	4413      	add	r3, r2
 8006a8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	73fb      	strb	r3, [r7, #15]
 8006a90:	e00d      	b.n	8006aae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
 8006a98:	3340      	adds	r3, #64	; 0x40
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	0c1b      	lsrs	r3, r3, #16
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	73fb      	strb	r3, [r7, #15]
 8006aae:	7bfa      	ldrb	r2, [r7, #15]
 8006ab0:	78fb      	ldrb	r3, [r7, #3]
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d3ec      	bcc.n	8006a92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006ab8:	883b      	ldrh	r3, [r7, #0]
 8006aba:	0418      	lsls	r0, r3, #16
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6819      	ldr	r1, [r3, #0]
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	4302      	orrs	r2, r0
 8006ac8:	3340      	adds	r3, #64	; 0x40
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	887a      	ldrh	r2, [r7, #2]
 8006af0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e267      	b.n	8006ffa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d075      	beq.n	8006c22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b36:	4b88      	ldr	r3, [pc, #544]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f003 030c 	and.w	r3, r3, #12
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d00c      	beq.n	8006b5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b42:	4b85      	ldr	r3, [pc, #532]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b4a:	2b08      	cmp	r3, #8
 8006b4c:	d112      	bne.n	8006b74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b4e:	4b82      	ldr	r3, [pc, #520]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b5a:	d10b      	bne.n	8006b74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b5c:	4b7e      	ldr	r3, [pc, #504]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d05b      	beq.n	8006c20 <HAL_RCC_OscConfig+0x108>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d157      	bne.n	8006c20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e242      	b.n	8006ffa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b7c:	d106      	bne.n	8006b8c <HAL_RCC_OscConfig+0x74>
 8006b7e:	4b76      	ldr	r3, [pc, #472]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a75      	ldr	r2, [pc, #468]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b88:	6013      	str	r3, [r2, #0]
 8006b8a:	e01d      	b.n	8006bc8 <HAL_RCC_OscConfig+0xb0>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b94:	d10c      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x98>
 8006b96:	4b70      	ldr	r3, [pc, #448]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a6f      	ldr	r2, [pc, #444]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	4b6d      	ldr	r3, [pc, #436]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a6c      	ldr	r2, [pc, #432]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	e00b      	b.n	8006bc8 <HAL_RCC_OscConfig+0xb0>
 8006bb0:	4b69      	ldr	r3, [pc, #420]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a68      	ldr	r2, [pc, #416]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	4b66      	ldr	r3, [pc, #408]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a65      	ldr	r2, [pc, #404]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d013      	beq.n	8006bf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd0:	f7fd fa86 	bl	80040e0 <HAL_GetTick>
 8006bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bd6:	e008      	b.n	8006bea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bd8:	f7fd fa82 	bl	80040e0 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b64      	cmp	r3, #100	; 0x64
 8006be4:	d901      	bls.n	8006bea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e207      	b.n	8006ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bea:	4b5b      	ldr	r3, [pc, #364]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d0f0      	beq.n	8006bd8 <HAL_RCC_OscConfig+0xc0>
 8006bf6:	e014      	b.n	8006c22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bf8:	f7fd fa72 	bl	80040e0 <HAL_GetTick>
 8006bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bfe:	e008      	b.n	8006c12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c00:	f7fd fa6e 	bl	80040e0 <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	2b64      	cmp	r3, #100	; 0x64
 8006c0c:	d901      	bls.n	8006c12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e1f3      	b.n	8006ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c12:	4b51      	ldr	r3, [pc, #324]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1f0      	bne.n	8006c00 <HAL_RCC_OscConfig+0xe8>
 8006c1e:	e000      	b.n	8006c22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d063      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c2e:	4b4a      	ldr	r3, [pc, #296]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f003 030c 	and.w	r3, r3, #12
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00b      	beq.n	8006c52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c3a:	4b47      	ldr	r3, [pc, #284]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c42:	2b08      	cmp	r3, #8
 8006c44:	d11c      	bne.n	8006c80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c46:	4b44      	ldr	r3, [pc, #272]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d116      	bne.n	8006c80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c52:	4b41      	ldr	r3, [pc, #260]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d005      	beq.n	8006c6a <HAL_RCC_OscConfig+0x152>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d001      	beq.n	8006c6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e1c7      	b.n	8006ffa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c6a:	4b3b      	ldr	r3, [pc, #236]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	4937      	ldr	r1, [pc, #220]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c7e:	e03a      	b.n	8006cf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d020      	beq.n	8006cca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c88:	4b34      	ldr	r3, [pc, #208]	; (8006d5c <HAL_RCC_OscConfig+0x244>)
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c8e:	f7fd fa27 	bl	80040e0 <HAL_GetTick>
 8006c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c94:	e008      	b.n	8006ca8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c96:	f7fd fa23 	bl	80040e0 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d901      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e1a8      	b.n	8006ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ca8:	4b2b      	ldr	r3, [pc, #172]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0f0      	beq.n	8006c96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cb4:	4b28      	ldr	r3, [pc, #160]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	00db      	lsls	r3, r3, #3
 8006cc2:	4925      	ldr	r1, [pc, #148]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	600b      	str	r3, [r1, #0]
 8006cc8:	e015      	b.n	8006cf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cca:	4b24      	ldr	r3, [pc, #144]	; (8006d5c <HAL_RCC_OscConfig+0x244>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd0:	f7fd fa06 	bl	80040e0 <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cd6:	e008      	b.n	8006cea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cd8:	f7fd fa02 	bl	80040e0 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d901      	bls.n	8006cea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e187      	b.n	8006ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cea:	4b1b      	ldr	r3, [pc, #108]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1f0      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0308 	and.w	r3, r3, #8
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d036      	beq.n	8006d70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d016      	beq.n	8006d38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d0a:	4b15      	ldr	r3, [pc, #84]	; (8006d60 <HAL_RCC_OscConfig+0x248>)
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d10:	f7fd f9e6 	bl	80040e0 <HAL_GetTick>
 8006d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d16:	e008      	b.n	8006d2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d18:	f7fd f9e2 	bl	80040e0 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e167      	b.n	8006ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d2a:	4b0b      	ldr	r3, [pc, #44]	; (8006d58 <HAL_RCC_OscConfig+0x240>)
 8006d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d0f0      	beq.n	8006d18 <HAL_RCC_OscConfig+0x200>
 8006d36:	e01b      	b.n	8006d70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d38:	4b09      	ldr	r3, [pc, #36]	; (8006d60 <HAL_RCC_OscConfig+0x248>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d3e:	f7fd f9cf 	bl	80040e0 <HAL_GetTick>
 8006d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d44:	e00e      	b.n	8006d64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d46:	f7fd f9cb 	bl	80040e0 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d907      	bls.n	8006d64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e150      	b.n	8006ffa <HAL_RCC_OscConfig+0x4e2>
 8006d58:	40023800 	.word	0x40023800
 8006d5c:	42470000 	.word	0x42470000
 8006d60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d64:	4b88      	ldr	r3, [pc, #544]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1ea      	bne.n	8006d46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 8097 	beq.w	8006eac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d82:	4b81      	ldr	r3, [pc, #516]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10f      	bne.n	8006dae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60bb      	str	r3, [r7, #8]
 8006d92:	4b7d      	ldr	r3, [pc, #500]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	4a7c      	ldr	r2, [pc, #496]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d9e:	4b7a      	ldr	r3, [pc, #488]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006da6:	60bb      	str	r3, [r7, #8]
 8006da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006daa:	2301      	movs	r3, #1
 8006dac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dae:	4b77      	ldr	r3, [pc, #476]	; (8006f8c <HAL_RCC_OscConfig+0x474>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d118      	bne.n	8006dec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dba:	4b74      	ldr	r3, [pc, #464]	; (8006f8c <HAL_RCC_OscConfig+0x474>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a73      	ldr	r2, [pc, #460]	; (8006f8c <HAL_RCC_OscConfig+0x474>)
 8006dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dc6:	f7fd f98b 	bl	80040e0 <HAL_GetTick>
 8006dca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dcc:	e008      	b.n	8006de0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dce:	f7fd f987 	bl	80040e0 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d901      	bls.n	8006de0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e10c      	b.n	8006ffa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006de0:	4b6a      	ldr	r3, [pc, #424]	; (8006f8c <HAL_RCC_OscConfig+0x474>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0f0      	beq.n	8006dce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d106      	bne.n	8006e02 <HAL_RCC_OscConfig+0x2ea>
 8006df4:	4b64      	ldr	r3, [pc, #400]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df8:	4a63      	ldr	r2, [pc, #396]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006dfa:	f043 0301 	orr.w	r3, r3, #1
 8006dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8006e00:	e01c      	b.n	8006e3c <HAL_RCC_OscConfig+0x324>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	2b05      	cmp	r3, #5
 8006e08:	d10c      	bne.n	8006e24 <HAL_RCC_OscConfig+0x30c>
 8006e0a:	4b5f      	ldr	r3, [pc, #380]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0e:	4a5e      	ldr	r2, [pc, #376]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006e10:	f043 0304 	orr.w	r3, r3, #4
 8006e14:	6713      	str	r3, [r2, #112]	; 0x70
 8006e16:	4b5c      	ldr	r3, [pc, #368]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1a:	4a5b      	ldr	r2, [pc, #364]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006e1c:	f043 0301 	orr.w	r3, r3, #1
 8006e20:	6713      	str	r3, [r2, #112]	; 0x70
 8006e22:	e00b      	b.n	8006e3c <HAL_RCC_OscConfig+0x324>
 8006e24:	4b58      	ldr	r3, [pc, #352]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e28:	4a57      	ldr	r2, [pc, #348]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006e2a:	f023 0301 	bic.w	r3, r3, #1
 8006e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e30:	4b55      	ldr	r3, [pc, #340]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e34:	4a54      	ldr	r2, [pc, #336]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006e36:	f023 0304 	bic.w	r3, r3, #4
 8006e3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d015      	beq.n	8006e70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e44:	f7fd f94c 	bl	80040e0 <HAL_GetTick>
 8006e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e4a:	e00a      	b.n	8006e62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e4c:	f7fd f948 	bl	80040e0 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e0cb      	b.n	8006ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e62:	4b49      	ldr	r3, [pc, #292]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0ee      	beq.n	8006e4c <HAL_RCC_OscConfig+0x334>
 8006e6e:	e014      	b.n	8006e9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e70:	f7fd f936 	bl	80040e0 <HAL_GetTick>
 8006e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e76:	e00a      	b.n	8006e8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e78:	f7fd f932 	bl	80040e0 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e0b5      	b.n	8006ffa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e8e:	4b3e      	ldr	r3, [pc, #248]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1ee      	bne.n	8006e78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d105      	bne.n	8006eac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ea0:	4b39      	ldr	r3, [pc, #228]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea4:	4a38      	ldr	r2, [pc, #224]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eaa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 80a1 	beq.w	8006ff8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006eb6:	4b34      	ldr	r3, [pc, #208]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f003 030c 	and.w	r3, r3, #12
 8006ebe:	2b08      	cmp	r3, #8
 8006ec0:	d05c      	beq.n	8006f7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d141      	bne.n	8006f4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eca:	4b31      	ldr	r3, [pc, #196]	; (8006f90 <HAL_RCC_OscConfig+0x478>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ed0:	f7fd f906 	bl	80040e0 <HAL_GetTick>
 8006ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ed6:	e008      	b.n	8006eea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ed8:	f7fd f902 	bl	80040e0 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d901      	bls.n	8006eea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e087      	b.n	8006ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eea:	4b27      	ldr	r3, [pc, #156]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1f0      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	69da      	ldr	r2, [r3, #28]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	019b      	lsls	r3, r3, #6
 8006f06:	431a      	orrs	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0c:	085b      	lsrs	r3, r3, #1
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	041b      	lsls	r3, r3, #16
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f18:	061b      	lsls	r3, r3, #24
 8006f1a:	491b      	ldr	r1, [pc, #108]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f20:	4b1b      	ldr	r3, [pc, #108]	; (8006f90 <HAL_RCC_OscConfig+0x478>)
 8006f22:	2201      	movs	r2, #1
 8006f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f26:	f7fd f8db 	bl	80040e0 <HAL_GetTick>
 8006f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f2c:	e008      	b.n	8006f40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f2e:	f7fd f8d7 	bl	80040e0 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d901      	bls.n	8006f40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e05c      	b.n	8006ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f40:	4b11      	ldr	r3, [pc, #68]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0f0      	beq.n	8006f2e <HAL_RCC_OscConfig+0x416>
 8006f4c:	e054      	b.n	8006ff8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f4e:	4b10      	ldr	r3, [pc, #64]	; (8006f90 <HAL_RCC_OscConfig+0x478>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f54:	f7fd f8c4 	bl	80040e0 <HAL_GetTick>
 8006f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f5c:	f7fd f8c0 	bl	80040e0 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e045      	b.n	8006ffa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f6e:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <HAL_RCC_OscConfig+0x470>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1f0      	bne.n	8006f5c <HAL_RCC_OscConfig+0x444>
 8006f7a:	e03d      	b.n	8006ff8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d107      	bne.n	8006f94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e038      	b.n	8006ffa <HAL_RCC_OscConfig+0x4e2>
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	40007000 	.word	0x40007000
 8006f90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f94:	4b1b      	ldr	r3, [pc, #108]	; (8007004 <HAL_RCC_OscConfig+0x4ec>)
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d028      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d121      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d11a      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006fca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d111      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fda:	085b      	lsrs	r3, r3, #1
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d107      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d001      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e000      	b.n	8006ffa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	40023800 	.word	0x40023800

08007008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e0cc      	b.n	80071b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800701c:	4b68      	ldr	r3, [pc, #416]	; (80071c0 <HAL_RCC_ClockConfig+0x1b8>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0307 	and.w	r3, r3, #7
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	429a      	cmp	r2, r3
 8007028:	d90c      	bls.n	8007044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800702a:	4b65      	ldr	r3, [pc, #404]	; (80071c0 <HAL_RCC_ClockConfig+0x1b8>)
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	b2d2      	uxtb	r2, r2
 8007030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007032:	4b63      	ldr	r3, [pc, #396]	; (80071c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0307 	and.w	r3, r3, #7
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	429a      	cmp	r2, r3
 800703e:	d001      	beq.n	8007044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e0b8      	b.n	80071b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d020      	beq.n	8007092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b00      	cmp	r3, #0
 800705a:	d005      	beq.n	8007068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800705c:	4b59      	ldr	r3, [pc, #356]	; (80071c4 <HAL_RCC_ClockConfig+0x1bc>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	4a58      	ldr	r2, [pc, #352]	; (80071c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007062:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007066:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b00      	cmp	r3, #0
 8007072:	d005      	beq.n	8007080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007074:	4b53      	ldr	r3, [pc, #332]	; (80071c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	4a52      	ldr	r2, [pc, #328]	; (80071c4 <HAL_RCC_ClockConfig+0x1bc>)
 800707a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800707e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007080:	4b50      	ldr	r3, [pc, #320]	; (80071c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	494d      	ldr	r1, [pc, #308]	; (80071c4 <HAL_RCC_ClockConfig+0x1bc>)
 800708e:	4313      	orrs	r3, r2
 8007090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b00      	cmp	r3, #0
 800709c:	d044      	beq.n	8007128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d107      	bne.n	80070b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070a6:	4b47      	ldr	r3, [pc, #284]	; (80071c4 <HAL_RCC_ClockConfig+0x1bc>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d119      	bne.n	80070e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e07f      	b.n	80071b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d003      	beq.n	80070c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d107      	bne.n	80070d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070c6:	4b3f      	ldr	r3, [pc, #252]	; (80071c4 <HAL_RCC_ClockConfig+0x1bc>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d109      	bne.n	80070e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e06f      	b.n	80071b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070d6:	4b3b      	ldr	r3, [pc, #236]	; (80071c4 <HAL_RCC_ClockConfig+0x1bc>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e067      	b.n	80071b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070e6:	4b37      	ldr	r3, [pc, #220]	; (80071c4 <HAL_RCC_ClockConfig+0x1bc>)
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f023 0203 	bic.w	r2, r3, #3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	4934      	ldr	r1, [pc, #208]	; (80071c4 <HAL_RCC_ClockConfig+0x1bc>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070f8:	f7fc fff2 	bl	80040e0 <HAL_GetTick>
 80070fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070fe:	e00a      	b.n	8007116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007100:	f7fc ffee 	bl	80040e0 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	f241 3288 	movw	r2, #5000	; 0x1388
 800710e:	4293      	cmp	r3, r2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e04f      	b.n	80071b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007116:	4b2b      	ldr	r3, [pc, #172]	; (80071c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f003 020c 	and.w	r2, r3, #12
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	429a      	cmp	r2, r3
 8007126:	d1eb      	bne.n	8007100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007128:	4b25      	ldr	r3, [pc, #148]	; (80071c0 <HAL_RCC_ClockConfig+0x1b8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0307 	and.w	r3, r3, #7
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d20c      	bcs.n	8007150 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007136:	4b22      	ldr	r3, [pc, #136]	; (80071c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800713e:	4b20      	ldr	r3, [pc, #128]	; (80071c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	429a      	cmp	r2, r3
 800714a:	d001      	beq.n	8007150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e032      	b.n	80071b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b00      	cmp	r3, #0
 800715a:	d008      	beq.n	800716e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800715c:	4b19      	ldr	r3, [pc, #100]	; (80071c4 <HAL_RCC_ClockConfig+0x1bc>)
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	4916      	ldr	r1, [pc, #88]	; (80071c4 <HAL_RCC_ClockConfig+0x1bc>)
 800716a:	4313      	orrs	r3, r2
 800716c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0308 	and.w	r3, r3, #8
 8007176:	2b00      	cmp	r3, #0
 8007178:	d009      	beq.n	800718e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800717a:	4b12      	ldr	r3, [pc, #72]	; (80071c4 <HAL_RCC_ClockConfig+0x1bc>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	490e      	ldr	r1, [pc, #56]	; (80071c4 <HAL_RCC_ClockConfig+0x1bc>)
 800718a:	4313      	orrs	r3, r2
 800718c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800718e:	f000 f821 	bl	80071d4 <HAL_RCC_GetSysClockFreq>
 8007192:	4602      	mov	r2, r0
 8007194:	4b0b      	ldr	r3, [pc, #44]	; (80071c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	091b      	lsrs	r3, r3, #4
 800719a:	f003 030f 	and.w	r3, r3, #15
 800719e:	490a      	ldr	r1, [pc, #40]	; (80071c8 <HAL_RCC_ClockConfig+0x1c0>)
 80071a0:	5ccb      	ldrb	r3, [r1, r3]
 80071a2:	fa22 f303 	lsr.w	r3, r2, r3
 80071a6:	4a09      	ldr	r2, [pc, #36]	; (80071cc <HAL_RCC_ClockConfig+0x1c4>)
 80071a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071aa:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <HAL_RCC_ClockConfig+0x1c8>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fc fe40 	bl	8003e34 <HAL_InitTick>

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	40023c00 	.word	0x40023c00
 80071c4:	40023800 	.word	0x40023800
 80071c8:	08011180 	.word	0x08011180
 80071cc:	2000059c 	.word	0x2000059c
 80071d0:	200005a0 	.word	0x200005a0

080071d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071d8:	b094      	sub	sp, #80	; 0x50
 80071da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	647b      	str	r3, [r7, #68]	; 0x44
 80071e0:	2300      	movs	r3, #0
 80071e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071e4:	2300      	movs	r3, #0
 80071e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071ec:	4b79      	ldr	r3, [pc, #484]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f003 030c 	and.w	r3, r3, #12
 80071f4:	2b08      	cmp	r3, #8
 80071f6:	d00d      	beq.n	8007214 <HAL_RCC_GetSysClockFreq+0x40>
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	f200 80e1 	bhi.w	80073c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <HAL_RCC_GetSysClockFreq+0x34>
 8007202:	2b04      	cmp	r3, #4
 8007204:	d003      	beq.n	800720e <HAL_RCC_GetSysClockFreq+0x3a>
 8007206:	e0db      	b.n	80073c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007208:	4b73      	ldr	r3, [pc, #460]	; (80073d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800720a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800720c:	e0db      	b.n	80073c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800720e:	4b72      	ldr	r3, [pc, #456]	; (80073d8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007210:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007212:	e0d8      	b.n	80073c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007214:	4b6f      	ldr	r3, [pc, #444]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800721c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800721e:	4b6d      	ldr	r3, [pc, #436]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d063      	beq.n	80072f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800722a:	4b6a      	ldr	r3, [pc, #424]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	099b      	lsrs	r3, r3, #6
 8007230:	2200      	movs	r2, #0
 8007232:	63bb      	str	r3, [r7, #56]	; 0x38
 8007234:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800723c:	633b      	str	r3, [r7, #48]	; 0x30
 800723e:	2300      	movs	r3, #0
 8007240:	637b      	str	r3, [r7, #52]	; 0x34
 8007242:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007246:	4622      	mov	r2, r4
 8007248:	462b      	mov	r3, r5
 800724a:	f04f 0000 	mov.w	r0, #0
 800724e:	f04f 0100 	mov.w	r1, #0
 8007252:	0159      	lsls	r1, r3, #5
 8007254:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007258:	0150      	lsls	r0, r2, #5
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	4621      	mov	r1, r4
 8007260:	1a51      	subs	r1, r2, r1
 8007262:	6139      	str	r1, [r7, #16]
 8007264:	4629      	mov	r1, r5
 8007266:	eb63 0301 	sbc.w	r3, r3, r1
 800726a:	617b      	str	r3, [r7, #20]
 800726c:	f04f 0200 	mov.w	r2, #0
 8007270:	f04f 0300 	mov.w	r3, #0
 8007274:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007278:	4659      	mov	r1, fp
 800727a:	018b      	lsls	r3, r1, #6
 800727c:	4651      	mov	r1, sl
 800727e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007282:	4651      	mov	r1, sl
 8007284:	018a      	lsls	r2, r1, #6
 8007286:	4651      	mov	r1, sl
 8007288:	ebb2 0801 	subs.w	r8, r2, r1
 800728c:	4659      	mov	r1, fp
 800728e:	eb63 0901 	sbc.w	r9, r3, r1
 8007292:	f04f 0200 	mov.w	r2, #0
 8007296:	f04f 0300 	mov.w	r3, #0
 800729a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800729e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072a6:	4690      	mov	r8, r2
 80072a8:	4699      	mov	r9, r3
 80072aa:	4623      	mov	r3, r4
 80072ac:	eb18 0303 	adds.w	r3, r8, r3
 80072b0:	60bb      	str	r3, [r7, #8]
 80072b2:	462b      	mov	r3, r5
 80072b4:	eb49 0303 	adc.w	r3, r9, r3
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	f04f 0200 	mov.w	r2, #0
 80072be:	f04f 0300 	mov.w	r3, #0
 80072c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80072c6:	4629      	mov	r1, r5
 80072c8:	028b      	lsls	r3, r1, #10
 80072ca:	4621      	mov	r1, r4
 80072cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072d0:	4621      	mov	r1, r4
 80072d2:	028a      	lsls	r2, r1, #10
 80072d4:	4610      	mov	r0, r2
 80072d6:	4619      	mov	r1, r3
 80072d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072da:	2200      	movs	r2, #0
 80072dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80072de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072e4:	f7f9 fada 	bl	800089c <__aeabi_uldivmod>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4613      	mov	r3, r2
 80072ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072f0:	e058      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072f2:	4b38      	ldr	r3, [pc, #224]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	099b      	lsrs	r3, r3, #6
 80072f8:	2200      	movs	r2, #0
 80072fa:	4618      	mov	r0, r3
 80072fc:	4611      	mov	r1, r2
 80072fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007302:	623b      	str	r3, [r7, #32]
 8007304:	2300      	movs	r3, #0
 8007306:	627b      	str	r3, [r7, #36]	; 0x24
 8007308:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800730c:	4642      	mov	r2, r8
 800730e:	464b      	mov	r3, r9
 8007310:	f04f 0000 	mov.w	r0, #0
 8007314:	f04f 0100 	mov.w	r1, #0
 8007318:	0159      	lsls	r1, r3, #5
 800731a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800731e:	0150      	lsls	r0, r2, #5
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	4641      	mov	r1, r8
 8007326:	ebb2 0a01 	subs.w	sl, r2, r1
 800732a:	4649      	mov	r1, r9
 800732c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007330:	f04f 0200 	mov.w	r2, #0
 8007334:	f04f 0300 	mov.w	r3, #0
 8007338:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800733c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007340:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007344:	ebb2 040a 	subs.w	r4, r2, sl
 8007348:	eb63 050b 	sbc.w	r5, r3, fp
 800734c:	f04f 0200 	mov.w	r2, #0
 8007350:	f04f 0300 	mov.w	r3, #0
 8007354:	00eb      	lsls	r3, r5, #3
 8007356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800735a:	00e2      	lsls	r2, r4, #3
 800735c:	4614      	mov	r4, r2
 800735e:	461d      	mov	r5, r3
 8007360:	4643      	mov	r3, r8
 8007362:	18e3      	adds	r3, r4, r3
 8007364:	603b      	str	r3, [r7, #0]
 8007366:	464b      	mov	r3, r9
 8007368:	eb45 0303 	adc.w	r3, r5, r3
 800736c:	607b      	str	r3, [r7, #4]
 800736e:	f04f 0200 	mov.w	r2, #0
 8007372:	f04f 0300 	mov.w	r3, #0
 8007376:	e9d7 4500 	ldrd	r4, r5, [r7]
 800737a:	4629      	mov	r1, r5
 800737c:	028b      	lsls	r3, r1, #10
 800737e:	4621      	mov	r1, r4
 8007380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007384:	4621      	mov	r1, r4
 8007386:	028a      	lsls	r2, r1, #10
 8007388:	4610      	mov	r0, r2
 800738a:	4619      	mov	r1, r3
 800738c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800738e:	2200      	movs	r2, #0
 8007390:	61bb      	str	r3, [r7, #24]
 8007392:	61fa      	str	r2, [r7, #28]
 8007394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007398:	f7f9 fa80 	bl	800089c <__aeabi_uldivmod>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	4613      	mov	r3, r2
 80073a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073a4:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	0c1b      	lsrs	r3, r3, #16
 80073aa:	f003 0303 	and.w	r3, r3, #3
 80073ae:	3301      	adds	r3, #1
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80073b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80073be:	e002      	b.n	80073c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073c0:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80073c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80073c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3750      	adds	r7, #80	; 0x50
 80073cc:	46bd      	mov	sp, r7
 80073ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073d2:	bf00      	nop
 80073d4:	40023800 	.word	0x40023800
 80073d8:	00f42400 	.word	0x00f42400

080073dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073dc:	b480      	push	{r7}
 80073de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073e0:	4b03      	ldr	r3, [pc, #12]	; (80073f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80073e2:	681b      	ldr	r3, [r3, #0]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	2000059c 	.word	0x2000059c

080073f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073f8:	f7ff fff0 	bl	80073dc <HAL_RCC_GetHCLKFreq>
 80073fc:	4602      	mov	r2, r0
 80073fe:	4b05      	ldr	r3, [pc, #20]	; (8007414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	0a9b      	lsrs	r3, r3, #10
 8007404:	f003 0307 	and.w	r3, r3, #7
 8007408:	4903      	ldr	r1, [pc, #12]	; (8007418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800740a:	5ccb      	ldrb	r3, [r1, r3]
 800740c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007410:	4618      	mov	r0, r3
 8007412:	bd80      	pop	{r7, pc}
 8007414:	40023800 	.word	0x40023800
 8007418:	08011190 	.word	0x08011190

0800741c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	220f      	movs	r2, #15
 800742a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800742c:	4b12      	ldr	r3, [pc, #72]	; (8007478 <HAL_RCC_GetClockConfig+0x5c>)
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f003 0203 	and.w	r2, r3, #3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007438:	4b0f      	ldr	r3, [pc, #60]	; (8007478 <HAL_RCC_GetClockConfig+0x5c>)
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007444:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <HAL_RCC_GetClockConfig+0x5c>)
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007450:	4b09      	ldr	r3, [pc, #36]	; (8007478 <HAL_RCC_GetClockConfig+0x5c>)
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	08db      	lsrs	r3, r3, #3
 8007456:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800745e:	4b07      	ldr	r3, [pc, #28]	; (800747c <HAL_RCC_GetClockConfig+0x60>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0207 	and.w	r2, r3, #7
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	601a      	str	r2, [r3, #0]
}
 800746a:	bf00      	nop
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	40023800 	.word	0x40023800
 800747c:	40023c00 	.word	0x40023c00

08007480 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e07b      	b.n	800758a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	2b00      	cmp	r3, #0
 8007498:	d108      	bne.n	80074ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074a2:	d009      	beq.n	80074b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	61da      	str	r2, [r3, #28]
 80074aa:	e005      	b.n	80074b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d106      	bne.n	80074d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7fc fbc2 	bl	8003c5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007500:	431a      	orrs	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800750a:	431a      	orrs	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	431a      	orrs	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	431a      	orrs	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007528:	431a      	orrs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	69db      	ldr	r3, [r3, #28]
 800752e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007532:	431a      	orrs	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753c:	ea42 0103 	orr.w	r1, r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007544:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	0c1b      	lsrs	r3, r3, #16
 8007556:	f003 0104 	and.w	r1, r3, #4
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755e:	f003 0210 	and.w	r2, r3, #16
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	69da      	ldr	r2, [r3, #28]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007578:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b088      	sub	sp, #32
 8007596:	af00      	add	r7, sp, #0
 8007598:	60f8      	str	r0, [r7, #12]
 800759a:	60b9      	str	r1, [r7, #8]
 800759c:	603b      	str	r3, [r7, #0]
 800759e:	4613      	mov	r3, r2
 80075a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d101      	bne.n	80075b4 <HAL_SPI_Transmit+0x22>
 80075b0:	2302      	movs	r3, #2
 80075b2:	e126      	b.n	8007802 <HAL_SPI_Transmit+0x270>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075bc:	f7fc fd90 	bl	80040e0 <HAL_GetTick>
 80075c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80075c2:	88fb      	ldrh	r3, [r7, #6]
 80075c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d002      	beq.n	80075d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80075d2:	2302      	movs	r3, #2
 80075d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075d6:	e10b      	b.n	80077f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d002      	beq.n	80075e4 <HAL_SPI_Transmit+0x52>
 80075de:	88fb      	ldrh	r3, [r7, #6]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d102      	bne.n	80075ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075e8:	e102      	b.n	80077f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2203      	movs	r2, #3
 80075ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	88fa      	ldrh	r2, [r7, #6]
 8007602:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	88fa      	ldrh	r2, [r7, #6]
 8007608:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007630:	d10f      	bne.n	8007652 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007640:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007650:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800765c:	2b40      	cmp	r3, #64	; 0x40
 800765e:	d007      	beq.n	8007670 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800766e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007678:	d14b      	bne.n	8007712 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <HAL_SPI_Transmit+0xf6>
 8007682:	8afb      	ldrh	r3, [r7, #22]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d13e      	bne.n	8007706 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768c:	881a      	ldrh	r2, [r3, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007698:	1c9a      	adds	r2, r3, #2
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80076ac:	e02b      	b.n	8007706 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f003 0302 	and.w	r3, r3, #2
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d112      	bne.n	80076e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c0:	881a      	ldrh	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076cc:	1c9a      	adds	r2, r3, #2
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	3b01      	subs	r3, #1
 80076da:	b29a      	uxth	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	86da      	strh	r2, [r3, #54]	; 0x36
 80076e0:	e011      	b.n	8007706 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076e2:	f7fc fcfd 	bl	80040e0 <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d803      	bhi.n	80076fa <HAL_SPI_Transmit+0x168>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f8:	d102      	bne.n	8007700 <HAL_SPI_Transmit+0x16e>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d102      	bne.n	8007706 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007704:	e074      	b.n	80077f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800770a:	b29b      	uxth	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1ce      	bne.n	80076ae <HAL_SPI_Transmit+0x11c>
 8007710:	e04c      	b.n	80077ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d002      	beq.n	8007720 <HAL_SPI_Transmit+0x18e>
 800771a:	8afb      	ldrh	r3, [r7, #22]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d140      	bne.n	80077a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	330c      	adds	r3, #12
 800772a:	7812      	ldrb	r2, [r2, #0]
 800772c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800773c:	b29b      	uxth	r3, r3
 800773e:	3b01      	subs	r3, #1
 8007740:	b29a      	uxth	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007746:	e02c      	b.n	80077a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b02      	cmp	r3, #2
 8007754:	d113      	bne.n	800777e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	330c      	adds	r3, #12
 8007760:	7812      	ldrb	r2, [r2, #0]
 8007762:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007768:	1c5a      	adds	r2, r3, #1
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007772:	b29b      	uxth	r3, r3
 8007774:	3b01      	subs	r3, #1
 8007776:	b29a      	uxth	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	86da      	strh	r2, [r3, #54]	; 0x36
 800777c:	e011      	b.n	80077a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800777e:	f7fc fcaf 	bl	80040e0 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	429a      	cmp	r2, r3
 800778c:	d803      	bhi.n	8007796 <HAL_SPI_Transmit+0x204>
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007794:	d102      	bne.n	800779c <HAL_SPI_Transmit+0x20a>
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d102      	bne.n	80077a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077a0:	e026      	b.n	80077f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1cd      	bne.n	8007748 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077ac:	69ba      	ldr	r2, [r7, #24]
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 fa55 	bl	8007c60 <SPI_EndRxTxTransaction>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2220      	movs	r2, #32
 80077c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10a      	bne.n	80077e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077ca:	2300      	movs	r3, #0
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	613b      	str	r3, [r7, #16]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	613b      	str	r3, [r7, #16]
 80077de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	77fb      	strb	r3, [r7, #31]
 80077ec:	e000      	b.n	80077f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80077ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007800:	7ffb      	ldrb	r3, [r7, #31]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3720      	adds	r7, #32
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b08c      	sub	sp, #48	; 0x30
 800780e:	af00      	add	r7, sp, #0
 8007810:	60f8      	str	r0, [r7, #12]
 8007812:	60b9      	str	r1, [r7, #8]
 8007814:	607a      	str	r2, [r7, #4]
 8007816:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007818:	2301      	movs	r3, #1
 800781a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007828:	2b01      	cmp	r3, #1
 800782a:	d101      	bne.n	8007830 <HAL_SPI_TransmitReceive+0x26>
 800782c:	2302      	movs	r3, #2
 800782e:	e18a      	b.n	8007b46 <HAL_SPI_TransmitReceive+0x33c>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007838:	f7fc fc52 	bl	80040e0 <HAL_GetTick>
 800783c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800784e:	887b      	ldrh	r3, [r7, #2]
 8007850:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007852:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007856:	2b01      	cmp	r3, #1
 8007858:	d00f      	beq.n	800787a <HAL_SPI_TransmitReceive+0x70>
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007860:	d107      	bne.n	8007872 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d103      	bne.n	8007872 <HAL_SPI_TransmitReceive+0x68>
 800786a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800786e:	2b04      	cmp	r3, #4
 8007870:	d003      	beq.n	800787a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007872:	2302      	movs	r3, #2
 8007874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007878:	e15b      	b.n	8007b32 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d005      	beq.n	800788c <HAL_SPI_TransmitReceive+0x82>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <HAL_SPI_TransmitReceive+0x82>
 8007886:	887b      	ldrh	r3, [r7, #2]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d103      	bne.n	8007894 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007892:	e14e      	b.n	8007b32 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b04      	cmp	r3, #4
 800789e:	d003      	beq.n	80078a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2205      	movs	r2, #5
 80078a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	887a      	ldrh	r2, [r7, #2]
 80078b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	887a      	ldrh	r2, [r7, #2]
 80078be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	887a      	ldrh	r2, [r7, #2]
 80078ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	887a      	ldrh	r2, [r7, #2]
 80078d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e8:	2b40      	cmp	r3, #64	; 0x40
 80078ea:	d007      	beq.n	80078fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007904:	d178      	bne.n	80079f8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d002      	beq.n	8007914 <HAL_SPI_TransmitReceive+0x10a>
 800790e:	8b7b      	ldrh	r3, [r7, #26]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d166      	bne.n	80079e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007918:	881a      	ldrh	r2, [r3, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007924:	1c9a      	adds	r2, r3, #2
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800792e:	b29b      	uxth	r3, r3
 8007930:	3b01      	subs	r3, #1
 8007932:	b29a      	uxth	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007938:	e053      	b.n	80079e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f003 0302 	and.w	r3, r3, #2
 8007944:	2b02      	cmp	r3, #2
 8007946:	d11b      	bne.n	8007980 <HAL_SPI_TransmitReceive+0x176>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800794c:	b29b      	uxth	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d016      	beq.n	8007980 <HAL_SPI_TransmitReceive+0x176>
 8007952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007954:	2b01      	cmp	r3, #1
 8007956:	d113      	bne.n	8007980 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795c:	881a      	ldrh	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007968:	1c9a      	adds	r2, r3, #2
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007972:	b29b      	uxth	r3, r3
 8007974:	3b01      	subs	r3, #1
 8007976:	b29a      	uxth	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b01      	cmp	r3, #1
 800798c:	d119      	bne.n	80079c2 <HAL_SPI_TransmitReceive+0x1b8>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007992:	b29b      	uxth	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	d014      	beq.n	80079c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68da      	ldr	r2, [r3, #12]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a2:	b292      	uxth	r2, r2
 80079a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079aa:	1c9a      	adds	r2, r3, #2
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	3b01      	subs	r3, #1
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079be:	2301      	movs	r3, #1
 80079c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80079c2:	f7fc fb8d 	bl	80040e0 <HAL_GetTick>
 80079c6:	4602      	mov	r2, r0
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d807      	bhi.n	80079e2 <HAL_SPI_TransmitReceive+0x1d8>
 80079d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d8:	d003      	beq.n	80079e2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80079e0:	e0a7      	b.n	8007b32 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1a6      	bne.n	800793a <HAL_SPI_TransmitReceive+0x130>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1a1      	bne.n	800793a <HAL_SPI_TransmitReceive+0x130>
 80079f6:	e07c      	b.n	8007af2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <HAL_SPI_TransmitReceive+0x1fc>
 8007a00:	8b7b      	ldrh	r3, [r7, #26]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d16b      	bne.n	8007ade <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	330c      	adds	r3, #12
 8007a10:	7812      	ldrb	r2, [r2, #0]
 8007a12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a18:	1c5a      	adds	r2, r3, #1
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	3b01      	subs	r3, #1
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a2c:	e057      	b.n	8007ade <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f003 0302 	and.w	r3, r3, #2
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d11c      	bne.n	8007a76 <HAL_SPI_TransmitReceive+0x26c>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d017      	beq.n	8007a76 <HAL_SPI_TransmitReceive+0x26c>
 8007a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d114      	bne.n	8007a76 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	330c      	adds	r3, #12
 8007a56:	7812      	ldrb	r2, [r2, #0]
 8007a58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5e:	1c5a      	adds	r2, r3, #1
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d119      	bne.n	8007ab8 <HAL_SPI_TransmitReceive+0x2ae>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d014      	beq.n	8007ab8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68da      	ldr	r2, [r3, #12]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a98:	b2d2      	uxtb	r2, r2
 8007a9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	3b01      	subs	r3, #1
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ab8:	f7fc fb12 	bl	80040e0 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d803      	bhi.n	8007ad0 <HAL_SPI_TransmitReceive+0x2c6>
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ace:	d102      	bne.n	8007ad6 <HAL_SPI_TransmitReceive+0x2cc>
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d103      	bne.n	8007ade <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007adc:	e029      	b.n	8007b32 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1a2      	bne.n	8007a2e <HAL_SPI_TransmitReceive+0x224>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d19d      	bne.n	8007a2e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007af4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 f8b2 	bl	8007c60 <SPI_EndRxTxTransaction>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d006      	beq.n	8007b10 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b0e:	e010      	b.n	8007b32 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10b      	bne.n	8007b30 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b18:	2300      	movs	r3, #0
 8007b1a:	617b      	str	r3, [r7, #20]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	617b      	str	r3, [r7, #20]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	617b      	str	r3, [r7, #20]
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	e000      	b.n	8007b32 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007b30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3730      	adds	r7, #48	; 0x30
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b60:	f7fc fabe 	bl	80040e0 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b68:	1a9b      	subs	r3, r3, r2
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b70:	f7fc fab6 	bl	80040e0 <HAL_GetTick>
 8007b74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b76:	4b39      	ldr	r3, [pc, #228]	; (8007c5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	015b      	lsls	r3, r3, #5
 8007b7c:	0d1b      	lsrs	r3, r3, #20
 8007b7e:	69fa      	ldr	r2, [r7, #28]
 8007b80:	fb02 f303 	mul.w	r3, r2, r3
 8007b84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b86:	e054      	b.n	8007c32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8e:	d050      	beq.n	8007c32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b90:	f7fc faa6 	bl	80040e0 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	69fa      	ldr	r2, [r7, #28]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d902      	bls.n	8007ba6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d13d      	bne.n	8007c22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007bb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bbe:	d111      	bne.n	8007be4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bc8:	d004      	beq.n	8007bd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bd2:	d107      	bne.n	8007be4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007be2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bec:	d10f      	bne.n	8007c0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e017      	b.n	8007c52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689a      	ldr	r2, [r3, #8]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	bf0c      	ite	eq
 8007c42:	2301      	moveq	r3, #1
 8007c44:	2300      	movne	r3, #0
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	461a      	mov	r2, r3
 8007c4a:	79fb      	ldrb	r3, [r7, #7]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d19b      	bne.n	8007b88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3720      	adds	r7, #32
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	2000059c 	.word	0x2000059c

08007c60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b088      	sub	sp, #32
 8007c64:	af02      	add	r7, sp, #8
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c6c:	4b1b      	ldr	r3, [pc, #108]	; (8007cdc <SPI_EndRxTxTransaction+0x7c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a1b      	ldr	r2, [pc, #108]	; (8007ce0 <SPI_EndRxTxTransaction+0x80>)
 8007c72:	fba2 2303 	umull	r2, r3, r2, r3
 8007c76:	0d5b      	lsrs	r3, r3, #21
 8007c78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c7c:	fb02 f303 	mul.w	r3, r2, r3
 8007c80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c8a:	d112      	bne.n	8007cb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2200      	movs	r2, #0
 8007c94:	2180      	movs	r1, #128	; 0x80
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f7ff ff5a 	bl	8007b50 <SPI_WaitFlagStateUntilTimeout>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d016      	beq.n	8007cd0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca6:	f043 0220 	orr.w	r2, r3, #32
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e00f      	b.n	8007cd2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00a      	beq.n	8007cce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc8:	2b80      	cmp	r3, #128	; 0x80
 8007cca:	d0f2      	beq.n	8007cb2 <SPI_EndRxTxTransaction+0x52>
 8007ccc:	e000      	b.n	8007cd0 <SPI_EndRxTxTransaction+0x70>
        break;
 8007cce:	bf00      	nop
  }

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3718      	adds	r7, #24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	2000059c 	.word	0x2000059c
 8007ce0:	165e9f81 	.word	0x165e9f81

08007ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d101      	bne.n	8007cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e041      	b.n	8007d7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d106      	bne.n	8007d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7fc f824 	bl	8003d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2202      	movs	r2, #2
 8007d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	3304      	adds	r3, #4
 8007d20:	4619      	mov	r1, r3
 8007d22:	4610      	mov	r0, r2
 8007d24:	f000 fd3a 	bl	800879c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
	...

08007d84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d001      	beq.n	8007d9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e03c      	b.n	8007e16 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a1e      	ldr	r2, [pc, #120]	; (8007e24 <HAL_TIM_Base_Start+0xa0>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d018      	beq.n	8007de0 <HAL_TIM_Base_Start+0x5c>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007db6:	d013      	beq.n	8007de0 <HAL_TIM_Base_Start+0x5c>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a1a      	ldr	r2, [pc, #104]	; (8007e28 <HAL_TIM_Base_Start+0xa4>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d00e      	beq.n	8007de0 <HAL_TIM_Base_Start+0x5c>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a19      	ldr	r2, [pc, #100]	; (8007e2c <HAL_TIM_Base_Start+0xa8>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d009      	beq.n	8007de0 <HAL_TIM_Base_Start+0x5c>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a17      	ldr	r2, [pc, #92]	; (8007e30 <HAL_TIM_Base_Start+0xac>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d004      	beq.n	8007de0 <HAL_TIM_Base_Start+0x5c>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a16      	ldr	r2, [pc, #88]	; (8007e34 <HAL_TIM_Base_Start+0xb0>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d111      	bne.n	8007e04 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f003 0307 	and.w	r3, r3, #7
 8007dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2b06      	cmp	r3, #6
 8007df0:	d010      	beq.n	8007e14 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f042 0201 	orr.w	r2, r2, #1
 8007e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e02:	e007      	b.n	8007e14 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f042 0201 	orr.w	r2, r2, #1
 8007e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	40010000 	.word	0x40010000
 8007e28:	40000400 	.word	0x40000400
 8007e2c:	40000800 	.word	0x40000800
 8007e30:	40000c00 	.word	0x40000c00
 8007e34:	40014000 	.word	0x40014000

08007e38 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6a1a      	ldr	r2, [r3, #32]
 8007e46:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10f      	bne.n	8007e70 <HAL_TIM_Base_Stop+0x38>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6a1a      	ldr	r2, [r3, #32]
 8007e56:	f240 4344 	movw	r3, #1092	; 0x444
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d107      	bne.n	8007e70 <HAL_TIM_Base_Stop+0x38>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0201 	bic.w	r2, r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
	...

08007e88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d001      	beq.n	8007ea0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e044      	b.n	8007f2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68da      	ldr	r2, [r3, #12]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f042 0201 	orr.w	r2, r2, #1
 8007eb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a1e      	ldr	r2, [pc, #120]	; (8007f38 <HAL_TIM_Base_Start_IT+0xb0>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d018      	beq.n	8007ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eca:	d013      	beq.n	8007ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a1a      	ldr	r2, [pc, #104]	; (8007f3c <HAL_TIM_Base_Start_IT+0xb4>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d00e      	beq.n	8007ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a19      	ldr	r2, [pc, #100]	; (8007f40 <HAL_TIM_Base_Start_IT+0xb8>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d009      	beq.n	8007ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a17      	ldr	r2, [pc, #92]	; (8007f44 <HAL_TIM_Base_Start_IT+0xbc>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d004      	beq.n	8007ef4 <HAL_TIM_Base_Start_IT+0x6c>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a16      	ldr	r2, [pc, #88]	; (8007f48 <HAL_TIM_Base_Start_IT+0xc0>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d111      	bne.n	8007f18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f003 0307 	and.w	r3, r3, #7
 8007efe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b06      	cmp	r3, #6
 8007f04:	d010      	beq.n	8007f28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f042 0201 	orr.w	r2, r2, #1
 8007f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f16:	e007      	b.n	8007f28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f042 0201 	orr.w	r2, r2, #1
 8007f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	40010000 	.word	0x40010000
 8007f3c:	40000400 	.word	0x40000400
 8007f40:	40000800 	.word	0x40000800
 8007f44:	40000c00 	.word	0x40000c00
 8007f48:	40014000 	.word	0x40014000

08007f4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e041      	b.n	8007fe2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d106      	bne.n	8007f78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f839 	bl	8007fea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	3304      	adds	r3, #4
 8007f88:	4619      	mov	r1, r3
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	f000 fc06 	bl	800879c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b083      	sub	sp, #12
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ff2:	bf00      	nop
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
	...

08008000 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d109      	bne.n	8008024 <HAL_TIM_PWM_Start+0x24>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b01      	cmp	r3, #1
 800801a:	bf14      	ite	ne
 800801c:	2301      	movne	r3, #1
 800801e:	2300      	moveq	r3, #0
 8008020:	b2db      	uxtb	r3, r3
 8008022:	e022      	b.n	800806a <HAL_TIM_PWM_Start+0x6a>
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	2b04      	cmp	r3, #4
 8008028:	d109      	bne.n	800803e <HAL_TIM_PWM_Start+0x3e>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b01      	cmp	r3, #1
 8008034:	bf14      	ite	ne
 8008036:	2301      	movne	r3, #1
 8008038:	2300      	moveq	r3, #0
 800803a:	b2db      	uxtb	r3, r3
 800803c:	e015      	b.n	800806a <HAL_TIM_PWM_Start+0x6a>
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b08      	cmp	r3, #8
 8008042:	d109      	bne.n	8008058 <HAL_TIM_PWM_Start+0x58>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b01      	cmp	r3, #1
 800804e:	bf14      	ite	ne
 8008050:	2301      	movne	r3, #1
 8008052:	2300      	moveq	r3, #0
 8008054:	b2db      	uxtb	r3, r3
 8008056:	e008      	b.n	800806a <HAL_TIM_PWM_Start+0x6a>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b01      	cmp	r3, #1
 8008062:	bf14      	ite	ne
 8008064:	2301      	movne	r3, #1
 8008066:	2300      	moveq	r3, #0
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e068      	b.n	8008144 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d104      	bne.n	8008082 <HAL_TIM_PWM_Start+0x82>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2202      	movs	r2, #2
 800807c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008080:	e013      	b.n	80080aa <HAL_TIM_PWM_Start+0xaa>
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b04      	cmp	r3, #4
 8008086:	d104      	bne.n	8008092 <HAL_TIM_PWM_Start+0x92>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2202      	movs	r2, #2
 800808c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008090:	e00b      	b.n	80080aa <HAL_TIM_PWM_Start+0xaa>
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2b08      	cmp	r3, #8
 8008096:	d104      	bne.n	80080a2 <HAL_TIM_PWM_Start+0xa2>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2202      	movs	r2, #2
 800809c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080a0:	e003      	b.n	80080aa <HAL_TIM_PWM_Start+0xaa>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2202      	movs	r2, #2
 80080a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2201      	movs	r2, #1
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 fe18 	bl	8008ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a23      	ldr	r2, [pc, #140]	; (800814c <HAL_TIM_PWM_Start+0x14c>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d107      	bne.n	80080d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a1d      	ldr	r2, [pc, #116]	; (800814c <HAL_TIM_PWM_Start+0x14c>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d018      	beq.n	800810e <HAL_TIM_PWM_Start+0x10e>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e4:	d013      	beq.n	800810e <HAL_TIM_PWM_Start+0x10e>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a19      	ldr	r2, [pc, #100]	; (8008150 <HAL_TIM_PWM_Start+0x150>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d00e      	beq.n	800810e <HAL_TIM_PWM_Start+0x10e>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a17      	ldr	r2, [pc, #92]	; (8008154 <HAL_TIM_PWM_Start+0x154>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d009      	beq.n	800810e <HAL_TIM_PWM_Start+0x10e>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a16      	ldr	r2, [pc, #88]	; (8008158 <HAL_TIM_PWM_Start+0x158>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d004      	beq.n	800810e <HAL_TIM_PWM_Start+0x10e>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a14      	ldr	r2, [pc, #80]	; (800815c <HAL_TIM_PWM_Start+0x15c>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d111      	bne.n	8008132 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f003 0307 	and.w	r3, r3, #7
 8008118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2b06      	cmp	r3, #6
 800811e:	d010      	beq.n	8008142 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f042 0201 	orr.w	r2, r2, #1
 800812e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008130:	e007      	b.n	8008142 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f042 0201 	orr.w	r2, r2, #1
 8008140:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	40010000 	.word	0x40010000
 8008150:	40000400 	.word	0x40000400
 8008154:	40000800 	.word	0x40000800
 8008158:	40000c00 	.word	0x40000c00
 800815c:	40014000 	.word	0x40014000

08008160 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2200      	movs	r2, #0
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	4618      	mov	r0, r3
 8008174:	f000 fdb8 	bl	8008ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a29      	ldr	r2, [pc, #164]	; (8008224 <HAL_TIM_PWM_Stop+0xc4>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d117      	bne.n	80081b2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	6a1a      	ldr	r2, [r3, #32]
 8008188:	f241 1311 	movw	r3, #4369	; 0x1111
 800818c:	4013      	ands	r3, r2
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10f      	bne.n	80081b2 <HAL_TIM_PWM_Stop+0x52>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6a1a      	ldr	r2, [r3, #32]
 8008198:	f240 4344 	movw	r3, #1092	; 0x444
 800819c:	4013      	ands	r3, r2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d107      	bne.n	80081b2 <HAL_TIM_PWM_Stop+0x52>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	6a1a      	ldr	r2, [r3, #32]
 80081b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80081bc:	4013      	ands	r3, r2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10f      	bne.n	80081e2 <HAL_TIM_PWM_Stop+0x82>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	6a1a      	ldr	r2, [r3, #32]
 80081c8:	f240 4344 	movw	r3, #1092	; 0x444
 80081cc:	4013      	ands	r3, r2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d107      	bne.n	80081e2 <HAL_TIM_PWM_Stop+0x82>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f022 0201 	bic.w	r2, r2, #1
 80081e0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d104      	bne.n	80081f2 <HAL_TIM_PWM_Stop+0x92>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081f0:	e013      	b.n	800821a <HAL_TIM_PWM_Stop+0xba>
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b04      	cmp	r3, #4
 80081f6:	d104      	bne.n	8008202 <HAL_TIM_PWM_Stop+0xa2>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008200:	e00b      	b.n	800821a <HAL_TIM_PWM_Stop+0xba>
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b08      	cmp	r3, #8
 8008206:	d104      	bne.n	8008212 <HAL_TIM_PWM_Stop+0xb2>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008210:	e003      	b.n	800821a <HAL_TIM_PWM_Stop+0xba>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	40010000 	.word	0x40010000

08008228 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	2b02      	cmp	r3, #2
 800823c:	d122      	bne.n	8008284 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b02      	cmp	r3, #2
 800824a:	d11b      	bne.n	8008284 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f06f 0202 	mvn.w	r2, #2
 8008254:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	f003 0303 	and.w	r3, r3, #3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fa77 	bl	800875e <HAL_TIM_IC_CaptureCallback>
 8008270:	e005      	b.n	800827e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fa69 	bl	800874a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fa7a 	bl	8008772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	f003 0304 	and.w	r3, r3, #4
 800828e:	2b04      	cmp	r3, #4
 8008290:	d122      	bne.n	80082d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	f003 0304 	and.w	r3, r3, #4
 800829c:	2b04      	cmp	r3, #4
 800829e:	d11b      	bne.n	80082d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f06f 0204 	mvn.w	r2, #4
 80082a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2202      	movs	r2, #2
 80082ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d003      	beq.n	80082c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fa4d 	bl	800875e <HAL_TIM_IC_CaptureCallback>
 80082c4:	e005      	b.n	80082d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fa3f 	bl	800874a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fa50 	bl	8008772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	f003 0308 	and.w	r3, r3, #8
 80082e2:	2b08      	cmp	r3, #8
 80082e4:	d122      	bne.n	800832c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	f003 0308 	and.w	r3, r3, #8
 80082f0:	2b08      	cmp	r3, #8
 80082f2:	d11b      	bne.n	800832c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f06f 0208 	mvn.w	r2, #8
 80082fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2204      	movs	r2, #4
 8008302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	69db      	ldr	r3, [r3, #28]
 800830a:	f003 0303 	and.w	r3, r3, #3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fa23 	bl	800875e <HAL_TIM_IC_CaptureCallback>
 8008318:	e005      	b.n	8008326 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fa15 	bl	800874a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fa26 	bl	8008772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	f003 0310 	and.w	r3, r3, #16
 8008336:	2b10      	cmp	r3, #16
 8008338:	d122      	bne.n	8008380 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	f003 0310 	and.w	r3, r3, #16
 8008344:	2b10      	cmp	r3, #16
 8008346:	d11b      	bne.n	8008380 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f06f 0210 	mvn.w	r2, #16
 8008350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2208      	movs	r2, #8
 8008356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008362:	2b00      	cmp	r3, #0
 8008364:	d003      	beq.n	800836e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f9f9 	bl	800875e <HAL_TIM_IC_CaptureCallback>
 800836c:	e005      	b.n	800837a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f9eb 	bl	800874a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f9fc 	bl	8008772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	2b01      	cmp	r3, #1
 800838c:	d10e      	bne.n	80083ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	f003 0301 	and.w	r3, r3, #1
 8008398:	2b01      	cmp	r3, #1
 800839a:	d107      	bne.n	80083ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f06f 0201 	mvn.w	r2, #1
 80083a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7fb f8a0 	bl	80034ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083b6:	2b80      	cmp	r3, #128	; 0x80
 80083b8:	d10e      	bne.n	80083d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c4:	2b80      	cmp	r3, #128	; 0x80
 80083c6:	d107      	bne.n	80083d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fd26 	bl	8008e24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e2:	2b40      	cmp	r3, #64	; 0x40
 80083e4:	d10e      	bne.n	8008404 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f0:	2b40      	cmp	r3, #64	; 0x40
 80083f2:	d107      	bne.n	8008404 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f9c1 	bl	8008786 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	f003 0320 	and.w	r3, r3, #32
 800840e:	2b20      	cmp	r3, #32
 8008410:	d10e      	bne.n	8008430 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	f003 0320 	and.w	r3, r3, #32
 800841c:	2b20      	cmp	r3, #32
 800841e:	d107      	bne.n	8008430 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f06f 0220 	mvn.w	r2, #32
 8008428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fcf0 	bl	8008e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008430:	bf00      	nop
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800844e:	2b01      	cmp	r3, #1
 8008450:	d101      	bne.n	8008456 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008452:	2302      	movs	r3, #2
 8008454:	e0ae      	b.n	80085b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2b0c      	cmp	r3, #12
 8008462:	f200 809f 	bhi.w	80085a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008466:	a201      	add	r2, pc, #4	; (adr r2, 800846c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846c:	080084a1 	.word	0x080084a1
 8008470:	080085a5 	.word	0x080085a5
 8008474:	080085a5 	.word	0x080085a5
 8008478:	080085a5 	.word	0x080085a5
 800847c:	080084e1 	.word	0x080084e1
 8008480:	080085a5 	.word	0x080085a5
 8008484:	080085a5 	.word	0x080085a5
 8008488:	080085a5 	.word	0x080085a5
 800848c:	08008523 	.word	0x08008523
 8008490:	080085a5 	.word	0x080085a5
 8008494:	080085a5 	.word	0x080085a5
 8008498:	080085a5 	.word	0x080085a5
 800849c:	08008563 	.word	0x08008563
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68b9      	ldr	r1, [r7, #8]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 f9f8 	bl	800889c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	699a      	ldr	r2, [r3, #24]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f042 0208 	orr.w	r2, r2, #8
 80084ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	699a      	ldr	r2, [r3, #24]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f022 0204 	bic.w	r2, r2, #4
 80084ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6999      	ldr	r1, [r3, #24]
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	691a      	ldr	r2, [r3, #16]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	430a      	orrs	r2, r1
 80084dc:	619a      	str	r2, [r3, #24]
      break;
 80084de:	e064      	b.n	80085aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68b9      	ldr	r1, [r7, #8]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 fa3e 	bl	8008968 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	699a      	ldr	r2, [r3, #24]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	699a      	ldr	r2, [r3, #24]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800850a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6999      	ldr	r1, [r3, #24]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	021a      	lsls	r2, r3, #8
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	430a      	orrs	r2, r1
 800851e:	619a      	str	r2, [r3, #24]
      break;
 8008520:	e043      	b.n	80085aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68b9      	ldr	r1, [r7, #8]
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fa89 	bl	8008a40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	69da      	ldr	r2, [r3, #28]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f042 0208 	orr.w	r2, r2, #8
 800853c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	69da      	ldr	r2, [r3, #28]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 0204 	bic.w	r2, r2, #4
 800854c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	69d9      	ldr	r1, [r3, #28]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	691a      	ldr	r2, [r3, #16]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	430a      	orrs	r2, r1
 800855e:	61da      	str	r2, [r3, #28]
      break;
 8008560:	e023      	b.n	80085aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68b9      	ldr	r1, [r7, #8]
 8008568:	4618      	mov	r0, r3
 800856a:	f000 fad3 	bl	8008b14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	69da      	ldr	r2, [r3, #28]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800857c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	69da      	ldr	r2, [r3, #28]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800858c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	69d9      	ldr	r1, [r3, #28]
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	021a      	lsls	r2, r3, #8
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	61da      	str	r2, [r3, #28]
      break;
 80085a2:	e002      	b.n	80085aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	75fb      	strb	r3, [r7, #23]
      break;
 80085a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3718      	adds	r7, #24
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d101      	bne.n	80085d8 <HAL_TIM_ConfigClockSource+0x1c>
 80085d4:	2302      	movs	r3, #2
 80085d6:	e0b4      	b.n	8008742 <HAL_TIM_ConfigClockSource+0x186>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80085f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008610:	d03e      	beq.n	8008690 <HAL_TIM_ConfigClockSource+0xd4>
 8008612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008616:	f200 8087 	bhi.w	8008728 <HAL_TIM_ConfigClockSource+0x16c>
 800861a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800861e:	f000 8086 	beq.w	800872e <HAL_TIM_ConfigClockSource+0x172>
 8008622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008626:	d87f      	bhi.n	8008728 <HAL_TIM_ConfigClockSource+0x16c>
 8008628:	2b70      	cmp	r3, #112	; 0x70
 800862a:	d01a      	beq.n	8008662 <HAL_TIM_ConfigClockSource+0xa6>
 800862c:	2b70      	cmp	r3, #112	; 0x70
 800862e:	d87b      	bhi.n	8008728 <HAL_TIM_ConfigClockSource+0x16c>
 8008630:	2b60      	cmp	r3, #96	; 0x60
 8008632:	d050      	beq.n	80086d6 <HAL_TIM_ConfigClockSource+0x11a>
 8008634:	2b60      	cmp	r3, #96	; 0x60
 8008636:	d877      	bhi.n	8008728 <HAL_TIM_ConfigClockSource+0x16c>
 8008638:	2b50      	cmp	r3, #80	; 0x50
 800863a:	d03c      	beq.n	80086b6 <HAL_TIM_ConfigClockSource+0xfa>
 800863c:	2b50      	cmp	r3, #80	; 0x50
 800863e:	d873      	bhi.n	8008728 <HAL_TIM_ConfigClockSource+0x16c>
 8008640:	2b40      	cmp	r3, #64	; 0x40
 8008642:	d058      	beq.n	80086f6 <HAL_TIM_ConfigClockSource+0x13a>
 8008644:	2b40      	cmp	r3, #64	; 0x40
 8008646:	d86f      	bhi.n	8008728 <HAL_TIM_ConfigClockSource+0x16c>
 8008648:	2b30      	cmp	r3, #48	; 0x30
 800864a:	d064      	beq.n	8008716 <HAL_TIM_ConfigClockSource+0x15a>
 800864c:	2b30      	cmp	r3, #48	; 0x30
 800864e:	d86b      	bhi.n	8008728 <HAL_TIM_ConfigClockSource+0x16c>
 8008650:	2b20      	cmp	r3, #32
 8008652:	d060      	beq.n	8008716 <HAL_TIM_ConfigClockSource+0x15a>
 8008654:	2b20      	cmp	r3, #32
 8008656:	d867      	bhi.n	8008728 <HAL_TIM_ConfigClockSource+0x16c>
 8008658:	2b00      	cmp	r3, #0
 800865a:	d05c      	beq.n	8008716 <HAL_TIM_ConfigClockSource+0x15a>
 800865c:	2b10      	cmp	r3, #16
 800865e:	d05a      	beq.n	8008716 <HAL_TIM_ConfigClockSource+0x15a>
 8008660:	e062      	b.n	8008728 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6818      	ldr	r0, [r3, #0]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	6899      	ldr	r1, [r3, #8]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	f000 fb19 	bl	8008ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008684:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	609a      	str	r2, [r3, #8]
      break;
 800868e:	e04f      	b.n	8008730 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6818      	ldr	r0, [r3, #0]
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	6899      	ldr	r1, [r3, #8]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	f000 fb02 	bl	8008ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	689a      	ldr	r2, [r3, #8]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086b2:	609a      	str	r2, [r3, #8]
      break;
 80086b4:	e03c      	b.n	8008730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6818      	ldr	r0, [r3, #0]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	6859      	ldr	r1, [r3, #4]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	461a      	mov	r2, r3
 80086c4:	f000 fa76 	bl	8008bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2150      	movs	r1, #80	; 0x50
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 facf 	bl	8008c72 <TIM_ITRx_SetConfig>
      break;
 80086d4:	e02c      	b.n	8008730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6818      	ldr	r0, [r3, #0]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	6859      	ldr	r1, [r3, #4]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	461a      	mov	r2, r3
 80086e4:	f000 fa95 	bl	8008c12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2160      	movs	r1, #96	; 0x60
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 fabf 	bl	8008c72 <TIM_ITRx_SetConfig>
      break;
 80086f4:	e01c      	b.n	8008730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6818      	ldr	r0, [r3, #0]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	6859      	ldr	r1, [r3, #4]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	461a      	mov	r2, r3
 8008704:	f000 fa56 	bl	8008bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2140      	movs	r1, #64	; 0x40
 800870e:	4618      	mov	r0, r3
 8008710:	f000 faaf 	bl	8008c72 <TIM_ITRx_SetConfig>
      break;
 8008714:	e00c      	b.n	8008730 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4619      	mov	r1, r3
 8008720:	4610      	mov	r0, r2
 8008722:	f000 faa6 	bl	8008c72 <TIM_ITRx_SetConfig>
      break;
 8008726:	e003      	b.n	8008730 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	73fb      	strb	r3, [r7, #15]
      break;
 800872c:	e000      	b.n	8008730 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800872e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008740:	7bfb      	ldrb	r3, [r7, #15]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008752:	bf00      	nop
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008766:	bf00      	nop
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008772:	b480      	push	{r7}
 8008774:	b083      	sub	sp, #12
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800877a:	bf00      	nop
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008786:	b480      	push	{r7}
 8008788:	b083      	sub	sp, #12
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
	...

0800879c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a34      	ldr	r2, [pc, #208]	; (8008880 <TIM_Base_SetConfig+0xe4>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d00f      	beq.n	80087d4 <TIM_Base_SetConfig+0x38>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ba:	d00b      	beq.n	80087d4 <TIM_Base_SetConfig+0x38>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a31      	ldr	r2, [pc, #196]	; (8008884 <TIM_Base_SetConfig+0xe8>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d007      	beq.n	80087d4 <TIM_Base_SetConfig+0x38>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a30      	ldr	r2, [pc, #192]	; (8008888 <TIM_Base_SetConfig+0xec>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d003      	beq.n	80087d4 <TIM_Base_SetConfig+0x38>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a2f      	ldr	r2, [pc, #188]	; (800888c <TIM_Base_SetConfig+0xf0>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d108      	bne.n	80087e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a25      	ldr	r2, [pc, #148]	; (8008880 <TIM_Base_SetConfig+0xe4>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d01b      	beq.n	8008826 <TIM_Base_SetConfig+0x8a>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087f4:	d017      	beq.n	8008826 <TIM_Base_SetConfig+0x8a>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a22      	ldr	r2, [pc, #136]	; (8008884 <TIM_Base_SetConfig+0xe8>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d013      	beq.n	8008826 <TIM_Base_SetConfig+0x8a>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a21      	ldr	r2, [pc, #132]	; (8008888 <TIM_Base_SetConfig+0xec>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d00f      	beq.n	8008826 <TIM_Base_SetConfig+0x8a>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a20      	ldr	r2, [pc, #128]	; (800888c <TIM_Base_SetConfig+0xf0>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d00b      	beq.n	8008826 <TIM_Base_SetConfig+0x8a>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a1f      	ldr	r2, [pc, #124]	; (8008890 <TIM_Base_SetConfig+0xf4>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d007      	beq.n	8008826 <TIM_Base_SetConfig+0x8a>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a1e      	ldr	r2, [pc, #120]	; (8008894 <TIM_Base_SetConfig+0xf8>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d003      	beq.n	8008826 <TIM_Base_SetConfig+0x8a>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a1d      	ldr	r2, [pc, #116]	; (8008898 <TIM_Base_SetConfig+0xfc>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d108      	bne.n	8008838 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800882c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	4313      	orrs	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	4313      	orrs	r3, r2
 8008844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	689a      	ldr	r2, [r3, #8]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a08      	ldr	r2, [pc, #32]	; (8008880 <TIM_Base_SetConfig+0xe4>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d103      	bne.n	800886c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	691a      	ldr	r2, [r3, #16]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	615a      	str	r2, [r3, #20]
}
 8008872:	bf00      	nop
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	40010000 	.word	0x40010000
 8008884:	40000400 	.word	0x40000400
 8008888:	40000800 	.word	0x40000800
 800888c:	40000c00 	.word	0x40000c00
 8008890:	40014000 	.word	0x40014000
 8008894:	40014400 	.word	0x40014400
 8008898:	40014800 	.word	0x40014800

0800889c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800889c:	b480      	push	{r7}
 800889e:	b087      	sub	sp, #28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	f023 0201 	bic.w	r2, r3, #1
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f023 0303 	bic.w	r3, r3, #3
 80088d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	4313      	orrs	r3, r2
 80088dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f023 0302 	bic.w	r3, r3, #2
 80088e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a1c      	ldr	r2, [pc, #112]	; (8008964 <TIM_OC1_SetConfig+0xc8>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d10c      	bne.n	8008912 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f023 0308 	bic.w	r3, r3, #8
 80088fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	4313      	orrs	r3, r2
 8008908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f023 0304 	bic.w	r3, r3, #4
 8008910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a13      	ldr	r2, [pc, #76]	; (8008964 <TIM_OC1_SetConfig+0xc8>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d111      	bne.n	800893e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	4313      	orrs	r3, r2
 8008932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	4313      	orrs	r3, r2
 800893c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	693a      	ldr	r2, [r7, #16]
 8008942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	621a      	str	r2, [r3, #32]
}
 8008958:	bf00      	nop
 800895a:	371c      	adds	r7, #28
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr
 8008964:	40010000 	.word	0x40010000

08008968 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008968:	b480      	push	{r7}
 800896a:	b087      	sub	sp, #28
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	f023 0210 	bic.w	r2, r3, #16
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800899e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	021b      	lsls	r3, r3, #8
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	f023 0320 	bic.w	r3, r3, #32
 80089b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	011b      	lsls	r3, r3, #4
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	4313      	orrs	r3, r2
 80089be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a1e      	ldr	r2, [pc, #120]	; (8008a3c <TIM_OC2_SetConfig+0xd4>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d10d      	bne.n	80089e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	011b      	lsls	r3, r3, #4
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	4313      	orrs	r3, r2
 80089da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a15      	ldr	r2, [pc, #84]	; (8008a3c <TIM_OC2_SetConfig+0xd4>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d113      	bne.n	8008a14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	685a      	ldr	r2, [r3, #4]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	621a      	str	r2, [r3, #32]
}
 8008a2e:	bf00      	nop
 8008a30:	371c      	adds	r7, #28
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	40010000 	.word	0x40010000

08008a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b087      	sub	sp, #28
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	69db      	ldr	r3, [r3, #28]
 8008a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f023 0303 	bic.w	r3, r3, #3
 8008a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	021b      	lsls	r3, r3, #8
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a1d      	ldr	r2, [pc, #116]	; (8008b10 <TIM_OC3_SetConfig+0xd0>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d10d      	bne.n	8008aba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	021b      	lsls	r3, r3, #8
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a14      	ldr	r2, [pc, #80]	; (8008b10 <TIM_OC3_SetConfig+0xd0>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d113      	bne.n	8008aea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	011b      	lsls	r3, r3, #4
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	011b      	lsls	r3, r3, #4
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	685a      	ldr	r2, [r3, #4]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	621a      	str	r2, [r3, #32]
}
 8008b04:	bf00      	nop
 8008b06:	371c      	adds	r7, #28
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	40010000 	.word	0x40010000

08008b14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	021b      	lsls	r3, r3, #8
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	031b      	lsls	r3, r3, #12
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a10      	ldr	r2, [pc, #64]	; (8008bb0 <TIM_OC4_SetConfig+0x9c>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d109      	bne.n	8008b88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	019b      	lsls	r3, r3, #6
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	685a      	ldr	r2, [r3, #4]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	621a      	str	r2, [r3, #32]
}
 8008ba2:	bf00      	nop
 8008ba4:	371c      	adds	r7, #28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	40010000 	.word	0x40010000

08008bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6a1b      	ldr	r3, [r3, #32]
 8008bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	f023 0201 	bic.w	r2, r3, #1
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	011b      	lsls	r3, r3, #4
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f023 030a 	bic.w	r3, r3, #10
 8008bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	621a      	str	r2, [r3, #32]
}
 8008c06:	bf00      	nop
 8008c08:	371c      	adds	r7, #28
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b087      	sub	sp, #28
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	f023 0210 	bic.w	r2, r3, #16
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6a1b      	ldr	r3, [r3, #32]
 8008c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	031b      	lsls	r3, r3, #12
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	011b      	lsls	r3, r3, #4
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	621a      	str	r2, [r3, #32]
}
 8008c66:	bf00      	nop
 8008c68:	371c      	adds	r7, #28
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b085      	sub	sp, #20
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	f043 0307 	orr.w	r3, r3, #7
 8008c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	609a      	str	r2, [r3, #8]
}
 8008c9c:	bf00      	nop
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b087      	sub	sp, #28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	021a      	lsls	r2, r3, #8
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	697a      	ldr	r2, [r7, #20]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	697a      	ldr	r2, [r7, #20]
 8008cda:	609a      	str	r2, [r3, #8]
}
 8008cdc:	bf00      	nop
 8008cde:	371c      	adds	r7, #28
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	f003 031f 	and.w	r3, r3, #31
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6a1a      	ldr	r2, [r3, #32]
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	43db      	mvns	r3, r3
 8008d0a:	401a      	ands	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6a1a      	ldr	r2, [r3, #32]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	f003 031f 	and.w	r3, r3, #31
 8008d1a:	6879      	ldr	r1, [r7, #4]
 8008d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d20:	431a      	orrs	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	621a      	str	r2, [r3, #32]
}
 8008d26:	bf00      	nop
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
	...

08008d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d101      	bne.n	8008d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d48:	2302      	movs	r3, #2
 8008d4a:	e050      	b.n	8008dee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2202      	movs	r2, #2
 8008d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a1c      	ldr	r2, [pc, #112]	; (8008dfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d018      	beq.n	8008dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d98:	d013      	beq.n	8008dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a18      	ldr	r2, [pc, #96]	; (8008e00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d00e      	beq.n	8008dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a16      	ldr	r2, [pc, #88]	; (8008e04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d009      	beq.n	8008dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a15      	ldr	r2, [pc, #84]	; (8008e08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d004      	beq.n	8008dc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a13      	ldr	r2, [pc, #76]	; (8008e0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d10c      	bne.n	8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68ba      	ldr	r2, [r7, #8]
 8008dda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	40010000 	.word	0x40010000
 8008e00:	40000400 	.word	0x40000400
 8008e04:	40000800 	.word	0x40000800
 8008e08:	40000c00 	.word	0x40000c00
 8008e0c:	40014000 	.word	0x40014000

08008e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e38:	b084      	sub	sp, #16
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	f107 001c 	add.w	r0, r7, #28
 8008e46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d122      	bne.n	8008e96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d105      	bne.n	8008e8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f001 fbee 	bl	800a66c <USB_CoreReset>
 8008e90:	4603      	mov	r3, r0
 8008e92:	73fb      	strb	r3, [r7, #15]
 8008e94:	e01a      	b.n	8008ecc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f001 fbe2 	bl	800a66c <USB_CoreReset>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d106      	bne.n	8008ec0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	639a      	str	r2, [r3, #56]	; 0x38
 8008ebe:	e005      	b.n	8008ecc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d10b      	bne.n	8008eea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	f043 0206 	orr.w	r2, r3, #6
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f043 0220 	orr.w	r2, r3, #32
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ef6:	b004      	add	sp, #16
 8008ef8:	4770      	bx	lr
	...

08008efc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b087      	sub	sp, #28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	4613      	mov	r3, r2
 8008f08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008f0a:	79fb      	ldrb	r3, [r7, #7]
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d165      	bne.n	8008fdc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	4a41      	ldr	r2, [pc, #260]	; (8009018 <USB_SetTurnaroundTime+0x11c>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d906      	bls.n	8008f26 <USB_SetTurnaroundTime+0x2a>
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	4a40      	ldr	r2, [pc, #256]	; (800901c <USB_SetTurnaroundTime+0x120>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d202      	bcs.n	8008f26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008f20:	230f      	movs	r3, #15
 8008f22:	617b      	str	r3, [r7, #20]
 8008f24:	e062      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	4a3c      	ldr	r2, [pc, #240]	; (800901c <USB_SetTurnaroundTime+0x120>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d306      	bcc.n	8008f3c <USB_SetTurnaroundTime+0x40>
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	4a3b      	ldr	r2, [pc, #236]	; (8009020 <USB_SetTurnaroundTime+0x124>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d202      	bcs.n	8008f3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008f36:	230e      	movs	r3, #14
 8008f38:	617b      	str	r3, [r7, #20]
 8008f3a:	e057      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	4a38      	ldr	r2, [pc, #224]	; (8009020 <USB_SetTurnaroundTime+0x124>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d306      	bcc.n	8008f52 <USB_SetTurnaroundTime+0x56>
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	4a37      	ldr	r2, [pc, #220]	; (8009024 <USB_SetTurnaroundTime+0x128>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d202      	bcs.n	8008f52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008f4c:	230d      	movs	r3, #13
 8008f4e:	617b      	str	r3, [r7, #20]
 8008f50:	e04c      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	4a33      	ldr	r2, [pc, #204]	; (8009024 <USB_SetTurnaroundTime+0x128>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d306      	bcc.n	8008f68 <USB_SetTurnaroundTime+0x6c>
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	4a32      	ldr	r2, [pc, #200]	; (8009028 <USB_SetTurnaroundTime+0x12c>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d802      	bhi.n	8008f68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008f62:	230c      	movs	r3, #12
 8008f64:	617b      	str	r3, [r7, #20]
 8008f66:	e041      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	4a2f      	ldr	r2, [pc, #188]	; (8009028 <USB_SetTurnaroundTime+0x12c>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d906      	bls.n	8008f7e <USB_SetTurnaroundTime+0x82>
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	4a2e      	ldr	r2, [pc, #184]	; (800902c <USB_SetTurnaroundTime+0x130>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d802      	bhi.n	8008f7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008f78:	230b      	movs	r3, #11
 8008f7a:	617b      	str	r3, [r7, #20]
 8008f7c:	e036      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	4a2a      	ldr	r2, [pc, #168]	; (800902c <USB_SetTurnaroundTime+0x130>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d906      	bls.n	8008f94 <USB_SetTurnaroundTime+0x98>
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	4a29      	ldr	r2, [pc, #164]	; (8009030 <USB_SetTurnaroundTime+0x134>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d802      	bhi.n	8008f94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008f8e:	230a      	movs	r3, #10
 8008f90:	617b      	str	r3, [r7, #20]
 8008f92:	e02b      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	4a26      	ldr	r2, [pc, #152]	; (8009030 <USB_SetTurnaroundTime+0x134>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d906      	bls.n	8008faa <USB_SetTurnaroundTime+0xae>
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	4a25      	ldr	r2, [pc, #148]	; (8009034 <USB_SetTurnaroundTime+0x138>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d202      	bcs.n	8008faa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008fa4:	2309      	movs	r3, #9
 8008fa6:	617b      	str	r3, [r7, #20]
 8008fa8:	e020      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	4a21      	ldr	r2, [pc, #132]	; (8009034 <USB_SetTurnaroundTime+0x138>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d306      	bcc.n	8008fc0 <USB_SetTurnaroundTime+0xc4>
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	4a20      	ldr	r2, [pc, #128]	; (8009038 <USB_SetTurnaroundTime+0x13c>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d802      	bhi.n	8008fc0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008fba:	2308      	movs	r3, #8
 8008fbc:	617b      	str	r3, [r7, #20]
 8008fbe:	e015      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	4a1d      	ldr	r2, [pc, #116]	; (8009038 <USB_SetTurnaroundTime+0x13c>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d906      	bls.n	8008fd6 <USB_SetTurnaroundTime+0xda>
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	4a1c      	ldr	r2, [pc, #112]	; (800903c <USB_SetTurnaroundTime+0x140>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d202      	bcs.n	8008fd6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008fd0:	2307      	movs	r3, #7
 8008fd2:	617b      	str	r3, [r7, #20]
 8008fd4:	e00a      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008fd6:	2306      	movs	r3, #6
 8008fd8:	617b      	str	r3, [r7, #20]
 8008fda:	e007      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008fdc:	79fb      	ldrb	r3, [r7, #7]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d102      	bne.n	8008fe8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008fe2:	2309      	movs	r3, #9
 8008fe4:	617b      	str	r3, [r7, #20]
 8008fe6:	e001      	b.n	8008fec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008fe8:	2309      	movs	r3, #9
 8008fea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	68da      	ldr	r2, [r3, #12]
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	029b      	lsls	r3, r3, #10
 8009000:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009004:	431a      	orrs	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	371c      	adds	r7, #28
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	00d8acbf 	.word	0x00d8acbf
 800901c:	00e4e1c0 	.word	0x00e4e1c0
 8009020:	00f42400 	.word	0x00f42400
 8009024:	01067380 	.word	0x01067380
 8009028:	011a499f 	.word	0x011a499f
 800902c:	01312cff 	.word	0x01312cff
 8009030:	014ca43f 	.word	0x014ca43f
 8009034:	016e3600 	.word	0x016e3600
 8009038:	01a6ab1f 	.word	0x01a6ab1f
 800903c:	01e84800 	.word	0x01e84800

08009040 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f043 0201 	orr.w	r2, r3, #1
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr

08009062 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009062:	b480      	push	{r7}
 8009064:	b083      	sub	sp, #12
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f023 0201 	bic.w	r2, r3, #1
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	460b      	mov	r3, r1
 800908e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009090:	2300      	movs	r3, #0
 8009092:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80090a0:	78fb      	ldrb	r3, [r7, #3]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d115      	bne.n	80090d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80090b2:	2001      	movs	r0, #1
 80090b4:	f7fb f820 	bl	80040f8 <HAL_Delay>
      ms++;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3301      	adds	r3, #1
 80090bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f001 fa45 	bl	800a54e <USB_GetMode>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d01e      	beq.n	8009108 <USB_SetCurrentMode+0x84>
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b31      	cmp	r3, #49	; 0x31
 80090ce:	d9f0      	bls.n	80090b2 <USB_SetCurrentMode+0x2e>
 80090d0:	e01a      	b.n	8009108 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80090d2:	78fb      	ldrb	r3, [r7, #3]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d115      	bne.n	8009104 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80090e4:	2001      	movs	r0, #1
 80090e6:	f7fb f807 	bl	80040f8 <HAL_Delay>
      ms++;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	3301      	adds	r3, #1
 80090ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f001 fa2c 	bl	800a54e <USB_GetMode>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d005      	beq.n	8009108 <USB_SetCurrentMode+0x84>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2b31      	cmp	r3, #49	; 0x31
 8009100:	d9f0      	bls.n	80090e4 <USB_SetCurrentMode+0x60>
 8009102:	e001      	b.n	8009108 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e005      	b.n	8009114 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b32      	cmp	r3, #50	; 0x32
 800910c:	d101      	bne.n	8009112 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e000      	b.n	8009114 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800911c:	b084      	sub	sp, #16
 800911e:	b580      	push	{r7, lr}
 8009120:	b086      	sub	sp, #24
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800912a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009136:	2300      	movs	r3, #0
 8009138:	613b      	str	r3, [r7, #16]
 800913a:	e009      	b.n	8009150 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	3340      	adds	r3, #64	; 0x40
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	2200      	movs	r2, #0
 8009148:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	3301      	adds	r3, #1
 800914e:	613b      	str	r3, [r7, #16]
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	2b0e      	cmp	r3, #14
 8009154:	d9f2      	bls.n	800913c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009158:	2b00      	cmp	r3, #0
 800915a:	d11c      	bne.n	8009196 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800916a:	f043 0302 	orr.w	r3, r3, #2
 800916e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009174:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009180:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	639a      	str	r2, [r3, #56]	; 0x38
 8009194:	e00b      	b.n	80091ae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091b4:	461a      	mov	r2, r3
 80091b6:	2300      	movs	r3, #0
 80091b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c0:	4619      	mov	r1, r3
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c8:	461a      	mov	r2, r3
 80091ca:	680b      	ldr	r3, [r1, #0]
 80091cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d10c      	bne.n	80091ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80091d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d104      	bne.n	80091e4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80091da:	2100      	movs	r1, #0
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 f965 	bl	80094ac <USB_SetDevSpeed>
 80091e2:	e008      	b.n	80091f6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80091e4:	2101      	movs	r1, #1
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f960 	bl	80094ac <USB_SetDevSpeed>
 80091ec:	e003      	b.n	80091f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80091ee:	2103      	movs	r1, #3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f95b 	bl	80094ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80091f6:	2110      	movs	r1, #16
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 f8f3 	bl	80093e4 <USB_FlushTxFifo>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f91f 	bl	800944c <USB_FlushRxFifo>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800921e:	461a      	mov	r2, r3
 8009220:	2300      	movs	r3, #0
 8009222:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800922a:	461a      	mov	r2, r3
 800922c:	2300      	movs	r3, #0
 800922e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009236:	461a      	mov	r2, r3
 8009238:	2300      	movs	r3, #0
 800923a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800923c:	2300      	movs	r3, #0
 800923e:	613b      	str	r3, [r7, #16]
 8009240:	e043      	b.n	80092ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	015a      	lsls	r2, r3, #5
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	4413      	add	r3, r2
 800924a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009254:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009258:	d118      	bne.n	800928c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10a      	bne.n	8009276 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800926c:	461a      	mov	r2, r3
 800926e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009272:	6013      	str	r3, [r2, #0]
 8009274:	e013      	b.n	800929e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	015a      	lsls	r2, r3, #5
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	4413      	add	r3, r2
 800927e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009282:	461a      	mov	r2, r3
 8009284:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009288:	6013      	str	r3, [r2, #0]
 800928a:	e008      	b.n	800929e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	015a      	lsls	r2, r3, #5
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	4413      	add	r3, r2
 8009294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009298:	461a      	mov	r2, r3
 800929a:	2300      	movs	r3, #0
 800929c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	015a      	lsls	r2, r3, #5
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	4413      	add	r3, r2
 80092a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092aa:	461a      	mov	r2, r3
 80092ac:	2300      	movs	r3, #0
 80092ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	015a      	lsls	r2, r3, #5
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	4413      	add	r3, r2
 80092b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092bc:	461a      	mov	r2, r3
 80092be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	3301      	adds	r3, #1
 80092c8:	613b      	str	r3, [r7, #16]
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d3b7      	bcc.n	8009242 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092d2:	2300      	movs	r3, #0
 80092d4:	613b      	str	r3, [r7, #16]
 80092d6:	e043      	b.n	8009360 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	015a      	lsls	r2, r3, #5
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092ee:	d118      	bne.n	8009322 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d10a      	bne.n	800930c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	015a      	lsls	r2, r3, #5
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	4413      	add	r3, r2
 80092fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009302:	461a      	mov	r2, r3
 8009304:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009308:	6013      	str	r3, [r2, #0]
 800930a:	e013      	b.n	8009334 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009318:	461a      	mov	r2, r3
 800931a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800931e:	6013      	str	r3, [r2, #0]
 8009320:	e008      	b.n	8009334 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	015a      	lsls	r2, r3, #5
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	4413      	add	r3, r2
 800932a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932e:	461a      	mov	r2, r3
 8009330:	2300      	movs	r3, #0
 8009332:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	015a      	lsls	r2, r3, #5
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	4413      	add	r3, r2
 800933c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009340:	461a      	mov	r2, r3
 8009342:	2300      	movs	r3, #0
 8009344:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	015a      	lsls	r2, r3, #5
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	4413      	add	r3, r2
 800934e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009352:	461a      	mov	r2, r3
 8009354:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009358:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	3301      	adds	r3, #1
 800935e:	613b      	str	r3, [r7, #16]
 8009360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	429a      	cmp	r2, r3
 8009366:	d3b7      	bcc.n	80092d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800937a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009388:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800938a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938c:	2b00      	cmp	r3, #0
 800938e:	d105      	bne.n	800939c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	f043 0210 	orr.w	r2, r3, #16
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	699a      	ldr	r2, [r3, #24]
 80093a0:	4b0f      	ldr	r3, [pc, #60]	; (80093e0 <USB_DevInit+0x2c4>)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80093a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d005      	beq.n	80093ba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	699b      	ldr	r3, [r3, #24]
 80093b2:	f043 0208 	orr.w	r2, r3, #8
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80093ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d107      	bne.n	80093d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	699b      	ldr	r3, [r3, #24]
 80093c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093c8:	f043 0304 	orr.w	r3, r3, #4
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80093d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3718      	adds	r7, #24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093dc:	b004      	add	sp, #16
 80093de:	4770      	bx	lr
 80093e0:	803c3800 	.word	0x803c3800

080093e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093ee:	2300      	movs	r3, #0
 80093f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	3301      	adds	r3, #1
 80093f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	4a13      	ldr	r2, [pc, #76]	; (8009448 <USB_FlushTxFifo+0x64>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d901      	bls.n	8009404 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009400:	2303      	movs	r3, #3
 8009402:	e01b      	b.n	800943c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	2b00      	cmp	r3, #0
 800940a:	daf2      	bge.n	80093f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800940c:	2300      	movs	r3, #0
 800940e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	019b      	lsls	r3, r3, #6
 8009414:	f043 0220 	orr.w	r2, r3, #32
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	3301      	adds	r3, #1
 8009420:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	4a08      	ldr	r2, [pc, #32]	; (8009448 <USB_FlushTxFifo+0x64>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d901      	bls.n	800942e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800942a:	2303      	movs	r3, #3
 800942c:	e006      	b.n	800943c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	f003 0320 	and.w	r3, r3, #32
 8009436:	2b20      	cmp	r3, #32
 8009438:	d0f0      	beq.n	800941c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3714      	adds	r7, #20
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	00030d40 	.word	0x00030d40

0800944c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009454:	2300      	movs	r3, #0
 8009456:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	3301      	adds	r3, #1
 800945c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	4a11      	ldr	r2, [pc, #68]	; (80094a8 <USB_FlushRxFifo+0x5c>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d901      	bls.n	800946a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009466:	2303      	movs	r3, #3
 8009468:	e018      	b.n	800949c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	2b00      	cmp	r3, #0
 8009470:	daf2      	bge.n	8009458 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009472:	2300      	movs	r3, #0
 8009474:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2210      	movs	r2, #16
 800947a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	3301      	adds	r3, #1
 8009480:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	4a08      	ldr	r2, [pc, #32]	; (80094a8 <USB_FlushRxFifo+0x5c>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d901      	bls.n	800948e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e006      	b.n	800949c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f003 0310 	and.w	r3, r3, #16
 8009496:	2b10      	cmp	r3, #16
 8009498:	d0f0      	beq.n	800947c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr
 80094a8:	00030d40 	.word	0x00030d40

080094ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	460b      	mov	r3, r1
 80094b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	78fb      	ldrb	r3, [r7, #3]
 80094c6:	68f9      	ldr	r1, [r7, #12]
 80094c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094cc:	4313      	orrs	r3, r2
 80094ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3714      	adds	r7, #20
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr

080094de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80094de:	b480      	push	{r7}
 80094e0:	b087      	sub	sp, #28
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	f003 0306 	and.w	r3, r3, #6
 80094f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d102      	bne.n	8009504 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80094fe:	2300      	movs	r3, #0
 8009500:	75fb      	strb	r3, [r7, #23]
 8009502:	e00a      	b.n	800951a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2b02      	cmp	r3, #2
 8009508:	d002      	beq.n	8009510 <USB_GetDevSpeed+0x32>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2b06      	cmp	r3, #6
 800950e:	d102      	bne.n	8009516 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009510:	2302      	movs	r3, #2
 8009512:	75fb      	strb	r3, [r7, #23]
 8009514:	e001      	b.n	800951a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009516:	230f      	movs	r3, #15
 8009518:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800951a:	7dfb      	ldrb	r3, [r7, #23]
}
 800951c:	4618      	mov	r0, r3
 800951e:	371c      	adds	r7, #28
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	785b      	ldrb	r3, [r3, #1]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d13a      	bne.n	80095ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800954a:	69da      	ldr	r2, [r3, #28]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	f003 030f 	and.w	r3, r3, #15
 8009554:	2101      	movs	r1, #1
 8009556:	fa01 f303 	lsl.w	r3, r1, r3
 800955a:	b29b      	uxth	r3, r3
 800955c:	68f9      	ldr	r1, [r7, #12]
 800955e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009562:	4313      	orrs	r3, r2
 8009564:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	015a      	lsls	r2, r3, #5
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	4413      	add	r3, r2
 800956e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d155      	bne.n	8009628 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	015a      	lsls	r2, r3, #5
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	4413      	add	r3, r2
 8009584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	791b      	ldrb	r3, [r3, #4]
 8009596:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009598:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	059b      	lsls	r3, r3, #22
 800959e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80095a0:	4313      	orrs	r3, r2
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	0151      	lsls	r1, r2, #5
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	440a      	add	r2, r1
 80095aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	e036      	b.n	8009628 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c0:	69da      	ldr	r2, [r3, #28]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	f003 030f 	and.w	r3, r3, #15
 80095ca:	2101      	movs	r1, #1
 80095cc:	fa01 f303 	lsl.w	r3, r1, r3
 80095d0:	041b      	lsls	r3, r3, #16
 80095d2:	68f9      	ldr	r1, [r7, #12]
 80095d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095d8:	4313      	orrs	r3, r2
 80095da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	015a      	lsls	r2, r3, #5
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	4413      	add	r3, r2
 80095e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d11a      	bne.n	8009628 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	015a      	lsls	r2, r3, #5
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	4413      	add	r3, r2
 80095fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	791b      	ldrb	r3, [r3, #4]
 800960c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800960e:	430b      	orrs	r3, r1
 8009610:	4313      	orrs	r3, r2
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	0151      	lsls	r1, r2, #5
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	440a      	add	r2, r1
 800961a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800961e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009626:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3714      	adds	r7, #20
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
	...

08009638 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	785b      	ldrb	r3, [r3, #1]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d161      	bne.n	8009718 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	015a      	lsls	r2, r3, #5
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	4413      	add	r3, r2
 800965c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009666:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800966a:	d11f      	bne.n	80096ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	4413      	add	r3, r2
 8009674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	0151      	lsls	r1, r2, #5
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	440a      	add	r2, r1
 8009682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009686:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800968a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4413      	add	r3, r2
 8009694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	0151      	lsls	r1, r2, #5
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	440a      	add	r2, r1
 80096a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	f003 030f 	and.w	r3, r3, #15
 80096bc:	2101      	movs	r1, #1
 80096be:	fa01 f303 	lsl.w	r3, r1, r3
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	43db      	mvns	r3, r3
 80096c6:	68f9      	ldr	r1, [r7, #12]
 80096c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096cc:	4013      	ands	r3, r2
 80096ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096d6:	69da      	ldr	r2, [r3, #28]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	f003 030f 	and.w	r3, r3, #15
 80096e0:	2101      	movs	r1, #1
 80096e2:	fa01 f303 	lsl.w	r3, r1, r3
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	43db      	mvns	r3, r3
 80096ea:	68f9      	ldr	r1, [r7, #12]
 80096ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096f0:	4013      	ands	r3, r2
 80096f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	015a      	lsls	r2, r3, #5
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	4413      	add	r3, r2
 80096fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	0159      	lsls	r1, r3, #5
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	440b      	add	r3, r1
 800970a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800970e:	4619      	mov	r1, r3
 8009710:	4b35      	ldr	r3, [pc, #212]	; (80097e8 <USB_DeactivateEndpoint+0x1b0>)
 8009712:	4013      	ands	r3, r2
 8009714:	600b      	str	r3, [r1, #0]
 8009716:	e060      	b.n	80097da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	015a      	lsls	r2, r3, #5
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	4413      	add	r3, r2
 8009720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800972a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800972e:	d11f      	bne.n	8009770 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	015a      	lsls	r2, r3, #5
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4413      	add	r3, r2
 8009738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	0151      	lsls	r1, r2, #5
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	440a      	add	r2, r1
 8009746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800974a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800974e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	015a      	lsls	r2, r3, #5
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	4413      	add	r3, r2
 8009758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	0151      	lsls	r1, r2, #5
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	440a      	add	r2, r1
 8009766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800976a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800976e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009776:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	f003 030f 	and.w	r3, r3, #15
 8009780:	2101      	movs	r1, #1
 8009782:	fa01 f303 	lsl.w	r3, r1, r3
 8009786:	041b      	lsls	r3, r3, #16
 8009788:	43db      	mvns	r3, r3
 800978a:	68f9      	ldr	r1, [r7, #12]
 800978c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009790:	4013      	ands	r3, r2
 8009792:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800979a:	69da      	ldr	r2, [r3, #28]
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	f003 030f 	and.w	r3, r3, #15
 80097a4:	2101      	movs	r1, #1
 80097a6:	fa01 f303 	lsl.w	r3, r1, r3
 80097aa:	041b      	lsls	r3, r3, #16
 80097ac:	43db      	mvns	r3, r3
 80097ae:	68f9      	ldr	r1, [r7, #12]
 80097b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097b4:	4013      	ands	r3, r2
 80097b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	015a      	lsls	r2, r3, #5
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	4413      	add	r3, r2
 80097c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	0159      	lsls	r1, r3, #5
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	440b      	add	r3, r1
 80097ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d2:	4619      	mov	r1, r3
 80097d4:	4b05      	ldr	r3, [pc, #20]	; (80097ec <USB_DeactivateEndpoint+0x1b4>)
 80097d6:	4013      	ands	r3, r2
 80097d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr
 80097e8:	ec337800 	.word	0xec337800
 80097ec:	eff37800 	.word	0xeff37800

080097f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b08a      	sub	sp, #40	; 0x28
 80097f4:	af02      	add	r7, sp, #8
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	4613      	mov	r3, r2
 80097fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	785b      	ldrb	r3, [r3, #1]
 800980c:	2b01      	cmp	r3, #1
 800980e:	f040 815c 	bne.w	8009aca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d132      	bne.n	8009880 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	015a      	lsls	r2, r3, #5
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	4413      	add	r3, r2
 8009822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	69ba      	ldr	r2, [r7, #24]
 800982a:	0151      	lsls	r1, r2, #5
 800982c:	69fa      	ldr	r2, [r7, #28]
 800982e:	440a      	add	r2, r1
 8009830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009834:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009838:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800983c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	015a      	lsls	r2, r3, #5
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	4413      	add	r3, r2
 8009846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	69ba      	ldr	r2, [r7, #24]
 800984e:	0151      	lsls	r1, r2, #5
 8009850:	69fa      	ldr	r2, [r7, #28]
 8009852:	440a      	add	r2, r1
 8009854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009858:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800985c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	015a      	lsls	r2, r3, #5
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	4413      	add	r3, r2
 8009866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	69ba      	ldr	r2, [r7, #24]
 800986e:	0151      	lsls	r1, r2, #5
 8009870:	69fa      	ldr	r2, [r7, #28]
 8009872:	440a      	add	r2, r1
 8009874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009878:	0cdb      	lsrs	r3, r3, #19
 800987a:	04db      	lsls	r3, r3, #19
 800987c:	6113      	str	r3, [r2, #16]
 800987e:	e074      	b.n	800996a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	69ba      	ldr	r2, [r7, #24]
 8009890:	0151      	lsls	r1, r2, #5
 8009892:	69fa      	ldr	r2, [r7, #28]
 8009894:	440a      	add	r2, r1
 8009896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800989a:	0cdb      	lsrs	r3, r3, #19
 800989c:	04db      	lsls	r3, r3, #19
 800989e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	69ba      	ldr	r2, [r7, #24]
 80098b0:	0151      	lsls	r1, r2, #5
 80098b2:	69fa      	ldr	r2, [r7, #28]
 80098b4:	440a      	add	r2, r1
 80098b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80098be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	015a      	lsls	r2, r3, #5
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	4413      	add	r3, r2
 80098cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098d0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	6999      	ldr	r1, [r3, #24]
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	440b      	add	r3, r1
 80098dc:	1e59      	subs	r1, r3, #1
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80098e6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80098e8:	4b9d      	ldr	r3, [pc, #628]	; (8009b60 <USB_EPStartXfer+0x370>)
 80098ea:	400b      	ands	r3, r1
 80098ec:	69b9      	ldr	r1, [r7, #24]
 80098ee:	0148      	lsls	r0, r1, #5
 80098f0:	69f9      	ldr	r1, [r7, #28]
 80098f2:	4401      	add	r1, r0
 80098f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80098f8:	4313      	orrs	r3, r2
 80098fa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	015a      	lsls	r2, r3, #5
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	4413      	add	r3, r2
 8009904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009908:	691a      	ldr	r2, [r3, #16]
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009912:	69b9      	ldr	r1, [r7, #24]
 8009914:	0148      	lsls	r0, r1, #5
 8009916:	69f9      	ldr	r1, [r7, #28]
 8009918:	4401      	add	r1, r0
 800991a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800991e:	4313      	orrs	r3, r2
 8009920:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	791b      	ldrb	r3, [r3, #4]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d11f      	bne.n	800996a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	015a      	lsls	r2, r3, #5
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	4413      	add	r3, r2
 8009932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	69ba      	ldr	r2, [r7, #24]
 800993a:	0151      	lsls	r1, r2, #5
 800993c:	69fa      	ldr	r2, [r7, #28]
 800993e:	440a      	add	r2, r1
 8009940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009944:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009948:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	015a      	lsls	r2, r3, #5
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	4413      	add	r3, r2
 8009952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	69ba      	ldr	r2, [r7, #24]
 800995a:	0151      	lsls	r1, r2, #5
 800995c:	69fa      	ldr	r2, [r7, #28]
 800995e:	440a      	add	r2, r1
 8009960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009964:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009968:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800996a:	79fb      	ldrb	r3, [r7, #7]
 800996c:	2b01      	cmp	r3, #1
 800996e:	d14b      	bne.n	8009a08 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d009      	beq.n	800998c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	015a      	lsls	r2, r3, #5
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	4413      	add	r3, r2
 8009980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009984:	461a      	mov	r2, r3
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	791b      	ldrb	r3, [r3, #4]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d128      	bne.n	80099e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d110      	bne.n	80099c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	69ba      	ldr	r2, [r7, #24]
 80099b4:	0151      	lsls	r1, r2, #5
 80099b6:	69fa      	ldr	r2, [r7, #28]
 80099b8:	440a      	add	r2, r1
 80099ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80099c2:	6013      	str	r3, [r2, #0]
 80099c4:	e00f      	b.n	80099e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	015a      	lsls	r2, r3, #5
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	4413      	add	r3, r2
 80099ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	69ba      	ldr	r2, [r7, #24]
 80099d6:	0151      	lsls	r1, r2, #5
 80099d8:	69fa      	ldr	r2, [r7, #28]
 80099da:	440a      	add	r2, r1
 80099dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	015a      	lsls	r2, r3, #5
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	4413      	add	r3, r2
 80099ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	69ba      	ldr	r2, [r7, #24]
 80099f6:	0151      	lsls	r1, r2, #5
 80099f8:	69fa      	ldr	r2, [r7, #28]
 80099fa:	440a      	add	r2, r1
 80099fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a04:	6013      	str	r3, [r2, #0]
 8009a06:	e133      	b.n	8009c70 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	015a      	lsls	r2, r3, #5
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	4413      	add	r3, r2
 8009a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	69ba      	ldr	r2, [r7, #24]
 8009a18:	0151      	lsls	r1, r2, #5
 8009a1a:	69fa      	ldr	r2, [r7, #28]
 8009a1c:	440a      	add	r2, r1
 8009a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a26:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	791b      	ldrb	r3, [r3, #4]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d015      	beq.n	8009a5c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 811b 	beq.w	8009c70 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	f003 030f 	and.w	r3, r3, #15
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a50:	69f9      	ldr	r1, [r7, #28]
 8009a52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a56:	4313      	orrs	r3, r2
 8009a58:	634b      	str	r3, [r1, #52]	; 0x34
 8009a5a:	e109      	b.n	8009c70 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d110      	bne.n	8009a8e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	015a      	lsls	r2, r3, #5
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	4413      	add	r3, r2
 8009a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	69ba      	ldr	r2, [r7, #24]
 8009a7c:	0151      	lsls	r1, r2, #5
 8009a7e:	69fa      	ldr	r2, [r7, #28]
 8009a80:	440a      	add	r2, r1
 8009a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a8a:	6013      	str	r3, [r2, #0]
 8009a8c:	e00f      	b.n	8009aae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	69ba      	ldr	r2, [r7, #24]
 8009a9e:	0151      	lsls	r1, r2, #5
 8009aa0:	69fa      	ldr	r2, [r7, #28]
 8009aa2:	440a      	add	r2, r1
 8009aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	6919      	ldr	r1, [r3, #16]
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	781a      	ldrb	r2, [r3, #0]
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	b298      	uxth	r0, r3
 8009abc:	79fb      	ldrb	r3, [r7, #7]
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f000 fade 	bl	800a084 <USB_WritePacket>
 8009ac8:	e0d2      	b.n	8009c70 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	015a      	lsls	r2, r3, #5
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	69ba      	ldr	r2, [r7, #24]
 8009ada:	0151      	lsls	r1, r2, #5
 8009adc:	69fa      	ldr	r2, [r7, #28]
 8009ade:	440a      	add	r2, r1
 8009ae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ae4:	0cdb      	lsrs	r3, r3, #19
 8009ae6:	04db      	lsls	r3, r3, #19
 8009ae8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	015a      	lsls	r2, r3, #5
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	4413      	add	r3, r2
 8009af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	69ba      	ldr	r2, [r7, #24]
 8009afa:	0151      	lsls	r1, r2, #5
 8009afc:	69fa      	ldr	r2, [r7, #28]
 8009afe:	440a      	add	r2, r1
 8009b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009b08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009b0c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	699b      	ldr	r3, [r3, #24]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d126      	bne.n	8009b64 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	015a      	lsls	r2, r3, #5
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b22:	691a      	ldr	r2, [r3, #16]
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b2c:	69b9      	ldr	r1, [r7, #24]
 8009b2e:	0148      	lsls	r0, r1, #5
 8009b30:	69f9      	ldr	r1, [r7, #28]
 8009b32:	4401      	add	r1, r0
 8009b34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	015a      	lsls	r2, r3, #5
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	4413      	add	r3, r2
 8009b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	69ba      	ldr	r2, [r7, #24]
 8009b4c:	0151      	lsls	r1, r2, #5
 8009b4e:	69fa      	ldr	r2, [r7, #28]
 8009b50:	440a      	add	r2, r1
 8009b52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b5a:	6113      	str	r3, [r2, #16]
 8009b5c:	e03a      	b.n	8009bd4 <USB_EPStartXfer+0x3e4>
 8009b5e:	bf00      	nop
 8009b60:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	699a      	ldr	r2, [r3, #24]
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	1e5a      	subs	r2, r3, #1
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b78:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	8afa      	ldrh	r2, [r7, #22]
 8009b80:	fb03 f202 	mul.w	r2, r3, r2
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b94:	691a      	ldr	r2, [r3, #16]
 8009b96:	8afb      	ldrh	r3, [r7, #22]
 8009b98:	04d9      	lsls	r1, r3, #19
 8009b9a:	4b38      	ldr	r3, [pc, #224]	; (8009c7c <USB_EPStartXfer+0x48c>)
 8009b9c:	400b      	ands	r3, r1
 8009b9e:	69b9      	ldr	r1, [r7, #24]
 8009ba0:	0148      	lsls	r0, r1, #5
 8009ba2:	69f9      	ldr	r1, [r7, #28]
 8009ba4:	4401      	add	r1, r0
 8009ba6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009baa:	4313      	orrs	r3, r2
 8009bac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	015a      	lsls	r2, r3, #5
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bba:	691a      	ldr	r2, [r3, #16]
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	69db      	ldr	r3, [r3, #28]
 8009bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bc4:	69b9      	ldr	r1, [r7, #24]
 8009bc6:	0148      	lsls	r0, r1, #5
 8009bc8:	69f9      	ldr	r1, [r7, #28]
 8009bca:	4401      	add	r1, r0
 8009bcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009bd4:	79fb      	ldrb	r3, [r7, #7]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d10d      	bne.n	8009bf6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d009      	beq.n	8009bf6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	6919      	ldr	r1, [r3, #16]
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	015a      	lsls	r2, r3, #5
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	4413      	add	r3, r2
 8009bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf2:	460a      	mov	r2, r1
 8009bf4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	791b      	ldrb	r3, [r3, #4]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d128      	bne.n	8009c50 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d110      	bne.n	8009c30 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	015a      	lsls	r2, r3, #5
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	4413      	add	r3, r2
 8009c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	69ba      	ldr	r2, [r7, #24]
 8009c1e:	0151      	lsls	r1, r2, #5
 8009c20:	69fa      	ldr	r2, [r7, #28]
 8009c22:	440a      	add	r2, r1
 8009c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c2c:	6013      	str	r3, [r2, #0]
 8009c2e:	e00f      	b.n	8009c50 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	015a      	lsls	r2, r3, #5
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	69ba      	ldr	r2, [r7, #24]
 8009c40:	0151      	lsls	r1, r2, #5
 8009c42:	69fa      	ldr	r2, [r7, #28]
 8009c44:	440a      	add	r2, r1
 8009c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c4e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	015a      	lsls	r2, r3, #5
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	4413      	add	r3, r2
 8009c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	69ba      	ldr	r2, [r7, #24]
 8009c60:	0151      	lsls	r1, r2, #5
 8009c62:	69fa      	ldr	r2, [r7, #28]
 8009c64:	440a      	add	r2, r1
 8009c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3720      	adds	r7, #32
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	1ff80000 	.word	0x1ff80000

08009c80 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b087      	sub	sp, #28
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	785b      	ldrb	r3, [r3, #1]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	f040 80ce 	bne.w	8009e3e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	699b      	ldr	r3, [r3, #24]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d132      	bne.n	8009d10 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	015a      	lsls	r2, r3, #5
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	693a      	ldr	r2, [r7, #16]
 8009cba:	0151      	lsls	r1, r2, #5
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	440a      	add	r2, r1
 8009cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009cc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009ccc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	015a      	lsls	r2, r3, #5
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	693a      	ldr	r2, [r7, #16]
 8009cde:	0151      	lsls	r1, r2, #5
 8009ce0:	697a      	ldr	r2, [r7, #20]
 8009ce2:	440a      	add	r2, r1
 8009ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ce8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009cec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	015a      	lsls	r2, r3, #5
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	693a      	ldr	r2, [r7, #16]
 8009cfe:	0151      	lsls	r1, r2, #5
 8009d00:	697a      	ldr	r2, [r7, #20]
 8009d02:	440a      	add	r2, r1
 8009d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d08:	0cdb      	lsrs	r3, r3, #19
 8009d0a:	04db      	lsls	r3, r3, #19
 8009d0c:	6113      	str	r3, [r2, #16]
 8009d0e:	e04e      	b.n	8009dae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	015a      	lsls	r2, r3, #5
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	4413      	add	r3, r2
 8009d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	0151      	lsls	r1, r2, #5
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	440a      	add	r2, r1
 8009d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d2a:	0cdb      	lsrs	r3, r3, #19
 8009d2c:	04db      	lsls	r3, r3, #19
 8009d2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	015a      	lsls	r2, r3, #5
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	4413      	add	r3, r2
 8009d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	693a      	ldr	r2, [r7, #16]
 8009d40:	0151      	lsls	r1, r2, #5
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	440a      	add	r2, r1
 8009d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009d4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009d52:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	699a      	ldr	r2, [r3, #24]
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d903      	bls.n	8009d68 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	68da      	ldr	r2, [r3, #12]
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	693a      	ldr	r2, [r7, #16]
 8009d78:	0151      	lsls	r1, r2, #5
 8009d7a:	697a      	ldr	r2, [r7, #20]
 8009d7c:	440a      	add	r2, r1
 8009d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d94:	691a      	ldr	r2, [r3, #16]
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d9e:	6939      	ldr	r1, [r7, #16]
 8009da0:	0148      	lsls	r0, r1, #5
 8009da2:	6979      	ldr	r1, [r7, #20]
 8009da4:	4401      	add	r1, r0
 8009da6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009daa:	4313      	orrs	r3, r2
 8009dac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009dae:	79fb      	ldrb	r3, [r7, #7]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d11e      	bne.n	8009df2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	695b      	ldr	r3, [r3, #20]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d009      	beq.n	8009dd0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	015a      	lsls	r2, r3, #5
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dc8:	461a      	mov	r2, r3
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	695b      	ldr	r3, [r3, #20]
 8009dce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	015a      	lsls	r2, r3, #5
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	693a      	ldr	r2, [r7, #16]
 8009de0:	0151      	lsls	r1, r2, #5
 8009de2:	697a      	ldr	r2, [r7, #20]
 8009de4:	440a      	add	r2, r1
 8009de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	e097      	b.n	8009f22 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	015a      	lsls	r2, r3, #5
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	4413      	add	r3, r2
 8009dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	0151      	lsls	r1, r2, #5
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	440a      	add	r2, r1
 8009e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e10:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f000 8083 	beq.w	8009f22 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	f003 030f 	and.w	r3, r3, #15
 8009e2c:	2101      	movs	r1, #1
 8009e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e32:	6979      	ldr	r1, [r7, #20]
 8009e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	634b      	str	r3, [r1, #52]	; 0x34
 8009e3c:	e071      	b.n	8009f22 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	015a      	lsls	r2, r3, #5
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	4413      	add	r3, r2
 8009e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	0151      	lsls	r1, r2, #5
 8009e50:	697a      	ldr	r2, [r7, #20]
 8009e52:	440a      	add	r2, r1
 8009e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e58:	0cdb      	lsrs	r3, r3, #19
 8009e5a:	04db      	lsls	r3, r3, #19
 8009e5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	015a      	lsls	r2, r3, #5
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	4413      	add	r3, r2
 8009e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	0151      	lsls	r1, r2, #5
 8009e70:	697a      	ldr	r2, [r7, #20]
 8009e72:	440a      	add	r2, r1
 8009e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e80:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d003      	beq.n	8009e92 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	68da      	ldr	r2, [r3, #12]
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	68da      	ldr	r2, [r3, #12]
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	015a      	lsls	r2, r3, #5
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	0151      	lsls	r1, r2, #5
 8009eac:	697a      	ldr	r2, [r7, #20]
 8009eae:	440a      	add	r2, r1
 8009eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009eb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009eb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	015a      	lsls	r2, r3, #5
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec6:	691a      	ldr	r2, [r3, #16]
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	69db      	ldr	r3, [r3, #28]
 8009ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ed0:	6939      	ldr	r1, [r7, #16]
 8009ed2:	0148      	lsls	r0, r1, #5
 8009ed4:	6979      	ldr	r1, [r7, #20]
 8009ed6:	4401      	add	r1, r0
 8009ed8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009edc:	4313      	orrs	r3, r2
 8009ede:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009ee0:	79fb      	ldrb	r3, [r7, #7]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d10d      	bne.n	8009f02 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d009      	beq.n	8009f02 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	6919      	ldr	r1, [r3, #16]
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	015a      	lsls	r2, r3, #5
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	4413      	add	r3, r2
 8009efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009efe:	460a      	mov	r2, r1
 8009f00:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	015a      	lsls	r2, r3, #5
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	4413      	add	r3, r2
 8009f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	693a      	ldr	r2, [r7, #16]
 8009f12:	0151      	lsls	r1, r2, #5
 8009f14:	697a      	ldr	r2, [r7, #20]
 8009f16:	440a      	add	r2, r1
 8009f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	371c      	adds	r7, #28
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b087      	sub	sp, #28
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	785b      	ldrb	r3, [r3, #1]
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d14a      	bne.n	8009fe4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	015a      	lsls	r2, r3, #5
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	4413      	add	r3, r2
 8009f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f66:	f040 8086 	bne.w	800a076 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	015a      	lsls	r2, r3, #5
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	4413      	add	r3, r2
 8009f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	7812      	ldrb	r2, [r2, #0]
 8009f7e:	0151      	lsls	r1, r2, #5
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	440a      	add	r2, r1
 8009f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f8c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	015a      	lsls	r2, r3, #5
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	4413      	add	r3, r2
 8009f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	683a      	ldr	r2, [r7, #0]
 8009fa0:	7812      	ldrb	r2, [r2, #0]
 8009fa2:	0151      	lsls	r1, r2, #5
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	440a      	add	r2, r1
 8009fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f242 7210 	movw	r2, #10000	; 0x2710
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d902      	bls.n	8009fc8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	75fb      	strb	r3, [r7, #23]
          break;
 8009fc6:	e056      	b.n	800a076 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	015a      	lsls	r2, r3, #5
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fe0:	d0e7      	beq.n	8009fb2 <USB_EPStopXfer+0x82>
 8009fe2:	e048      	b.n	800a076 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	015a      	lsls	r2, r3, #5
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	4413      	add	r3, r2
 8009fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ffc:	d13b      	bne.n	800a076 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	015a      	lsls	r2, r3, #5
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	4413      	add	r3, r2
 800a008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	7812      	ldrb	r2, [r2, #0]
 800a012:	0151      	lsls	r1, r2, #5
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	440a      	add	r2, r1
 800a018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a01c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a020:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	015a      	lsls	r2, r3, #5
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	4413      	add	r3, r2
 800a02c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	7812      	ldrb	r2, [r2, #0]
 800a036:	0151      	lsls	r1, r2, #5
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	440a      	add	r2, r1
 800a03c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a040:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a044:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	3301      	adds	r3, #1
 800a04a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a052:	4293      	cmp	r3, r2
 800a054:	d902      	bls.n	800a05c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	75fb      	strb	r3, [r7, #23]
          break;
 800a05a:	e00c      	b.n	800a076 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	015a      	lsls	r2, r3, #5
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	4413      	add	r3, r2
 800a066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a074:	d0e7      	beq.n	800a046 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a076:	7dfb      	ldrb	r3, [r7, #23]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	371c      	adds	r7, #28
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a084:	b480      	push	{r7}
 800a086:	b089      	sub	sp, #36	; 0x24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	4611      	mov	r1, r2
 800a090:	461a      	mov	r2, r3
 800a092:	460b      	mov	r3, r1
 800a094:	71fb      	strb	r3, [r7, #7]
 800a096:	4613      	mov	r3, r2
 800a098:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a0a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d123      	bne.n	800a0f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a0aa:	88bb      	ldrh	r3, [r7, #4]
 800a0ac:	3303      	adds	r3, #3
 800a0ae:	089b      	lsrs	r3, r3, #2
 800a0b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	61bb      	str	r3, [r7, #24]
 800a0b6:	e018      	b.n	800a0ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a0b8:	79fb      	ldrb	r3, [r7, #7]
 800a0ba:	031a      	lsls	r2, r3, #12
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	4413      	add	r3, r2
 800a0c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	61bb      	str	r3, [r7, #24]
 800a0ea:	69ba      	ldr	r2, [r7, #24]
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d3e2      	bcc.n	800a0b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3724      	adds	r7, #36	; 0x24
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a100:	b480      	push	{r7}
 800a102:	b08b      	sub	sp, #44	; 0x2c
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	4613      	mov	r3, r2
 800a10c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a116:	88fb      	ldrh	r3, [r7, #6]
 800a118:	089b      	lsrs	r3, r3, #2
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a11e:	88fb      	ldrh	r3, [r7, #6]
 800a120:	f003 0303 	and.w	r3, r3, #3
 800a124:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a126:	2300      	movs	r3, #0
 800a128:	623b      	str	r3, [r7, #32]
 800a12a:	e014      	b.n	800a156 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	601a      	str	r2, [r3, #0]
    pDest++;
 800a138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13a:	3301      	adds	r3, #1
 800a13c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a140:	3301      	adds	r3, #1
 800a142:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a146:	3301      	adds	r3, #1
 800a148:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14c:	3301      	adds	r3, #1
 800a14e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a150:	6a3b      	ldr	r3, [r7, #32]
 800a152:	3301      	adds	r3, #1
 800a154:	623b      	str	r3, [r7, #32]
 800a156:	6a3a      	ldr	r2, [r7, #32]
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d3e6      	bcc.n	800a12c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a15e:	8bfb      	ldrh	r3, [r7, #30]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d01e      	beq.n	800a1a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a164:	2300      	movs	r3, #0
 800a166:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a16e:	461a      	mov	r2, r3
 800a170:	f107 0310 	add.w	r3, r7, #16
 800a174:	6812      	ldr	r2, [r2, #0]
 800a176:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a178:	693a      	ldr	r2, [r7, #16]
 800a17a:	6a3b      	ldr	r3, [r7, #32]
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	00db      	lsls	r3, r3, #3
 800a180:	fa22 f303 	lsr.w	r3, r2, r3
 800a184:	b2da      	uxtb	r2, r3
 800a186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a188:	701a      	strb	r2, [r3, #0]
      i++;
 800a18a:	6a3b      	ldr	r3, [r7, #32]
 800a18c:	3301      	adds	r3, #1
 800a18e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	3301      	adds	r3, #1
 800a194:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a196:	8bfb      	ldrh	r3, [r7, #30]
 800a198:	3b01      	subs	r3, #1
 800a19a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a19c:	8bfb      	ldrh	r3, [r7, #30]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1ea      	bne.n	800a178 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	372c      	adds	r7, #44	; 0x2c
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	785b      	ldrb	r3, [r3, #1]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d12c      	bne.n	800a226 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	015a      	lsls	r2, r3, #5
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	db12      	blt.n	800a204 <USB_EPSetStall+0x54>
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00f      	beq.n	800a204 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	015a      	lsls	r2, r3, #5
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	0151      	lsls	r1, r2, #5
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	440a      	add	r2, r1
 800a1fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a202:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	015a      	lsls	r2, r3, #5
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	4413      	add	r3, r2
 800a20c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	0151      	lsls	r1, r2, #5
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	440a      	add	r2, r1
 800a21a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a21e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a222:	6013      	str	r3, [r2, #0]
 800a224:	e02b      	b.n	800a27e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	015a      	lsls	r2, r3, #5
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	4413      	add	r3, r2
 800a22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	db12      	blt.n	800a25e <USB_EPSetStall+0xae>
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00f      	beq.n	800a25e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	4413      	add	r3, r2
 800a246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	0151      	lsls	r1, r2, #5
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	440a      	add	r2, r1
 800a254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a258:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a25c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	015a      	lsls	r2, r3, #5
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	4413      	add	r3, r2
 800a266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	0151      	lsls	r1, r2, #5
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	440a      	add	r2, r1
 800a274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a278:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a27c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	785b      	ldrb	r3, [r3, #1]
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d128      	bne.n	800a2fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	015a      	lsls	r2, r3, #5
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	0151      	lsls	r1, r2, #5
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	440a      	add	r2, r1
 800a2be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	791b      	ldrb	r3, [r3, #4]
 800a2cc:	2b03      	cmp	r3, #3
 800a2ce:	d003      	beq.n	800a2d8 <USB_EPClearStall+0x4c>
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	791b      	ldrb	r3, [r3, #4]
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d138      	bne.n	800a34a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	015a      	lsls	r2, r3, #5
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	4413      	add	r3, r2
 800a2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	0151      	lsls	r1, r2, #5
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	440a      	add	r2, r1
 800a2ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2f6:	6013      	str	r3, [r2, #0]
 800a2f8:	e027      	b.n	800a34a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	015a      	lsls	r2, r3, #5
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	4413      	add	r3, r2
 800a302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	68ba      	ldr	r2, [r7, #8]
 800a30a:	0151      	lsls	r1, r2, #5
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	440a      	add	r2, r1
 800a310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a314:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a318:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	791b      	ldrb	r3, [r3, #4]
 800a31e:	2b03      	cmp	r3, #3
 800a320:	d003      	beq.n	800a32a <USB_EPClearStall+0x9e>
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	791b      	ldrb	r3, [r3, #4]
 800a326:	2b02      	cmp	r3, #2
 800a328:	d10f      	bne.n	800a34a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	015a      	lsls	r2, r3, #5
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	4413      	add	r3, r2
 800a332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	0151      	lsls	r1, r2, #5
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	440a      	add	r2, r1
 800a340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a348:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3714      	adds	r7, #20
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	460b      	mov	r3, r1
 800a362:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a376:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a37a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	78fb      	ldrb	r3, [r7, #3]
 800a386:	011b      	lsls	r3, r3, #4
 800a388:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a38c:	68f9      	ldr	r1, [r7, #12]
 800a38e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a392:	4313      	orrs	r3, r2
 800a394:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3be:	f023 0303 	bic.w	r3, r3, #3
 800a3c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3d2:	f023 0302 	bic.w	r3, r3, #2
 800a3d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a3e6:	b480      	push	{r7}
 800a3e8:	b085      	sub	sp, #20
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a400:	f023 0303 	bic.w	r3, r3, #3
 800a404:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a414:	f043 0302 	orr.w	r3, r3, #2
 800a418:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	695b      	ldr	r3, [r3, #20]
 800a434:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	4013      	ands	r3, r2
 800a43e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a440:	68fb      	ldr	r3, [r7, #12]
}
 800a442:	4618      	mov	r0, r3
 800a444:	3714      	adds	r7, #20
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr

0800a44e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a44e:	b480      	push	{r7}
 800a450:	b085      	sub	sp, #20
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a460:	699b      	ldr	r3, [r3, #24]
 800a462:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a46a:	69db      	ldr	r3, [r3, #28]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	4013      	ands	r3, r2
 800a470:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	0c1b      	lsrs	r3, r3, #16
}
 800a476:	4618      	mov	r0, r3
 800a478:	3714      	adds	r7, #20
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a482:	b480      	push	{r7}
 800a484:	b085      	sub	sp, #20
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a49e:	69db      	ldr	r3, [r3, #28]
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	4013      	ands	r3, r2
 800a4a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	b29b      	uxth	r3, r3
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3714      	adds	r7, #20
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b085      	sub	sp, #20
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	460b      	mov	r3, r1
 800a4c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a4c6:	78fb      	ldrb	r3, [r7, #3]
 800a4c8:	015a      	lsls	r2, r3, #5
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4dc:	695b      	ldr	r3, [r3, #20]
 800a4de:	68ba      	ldr	r2, [r7, #8]
 800a4e0:	4013      	ands	r3, r2
 800a4e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a4e4:	68bb      	ldr	r3, [r7, #8]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3714      	adds	r7, #20
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr

0800a4f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	b087      	sub	sp, #28
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a514:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a516:	78fb      	ldrb	r3, [r7, #3]
 800a518:	f003 030f 	and.w	r3, r3, #15
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	fa22 f303 	lsr.w	r3, r2, r3
 800a522:	01db      	lsls	r3, r3, #7
 800a524:	b2db      	uxtb	r3, r3
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	4313      	orrs	r3, r2
 800a52a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a52c:	78fb      	ldrb	r3, [r7, #3]
 800a52e:	015a      	lsls	r2, r3, #5
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	4413      	add	r3, r2
 800a534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a538:	689b      	ldr	r3, [r3, #8]
 800a53a:	693a      	ldr	r2, [r7, #16]
 800a53c:	4013      	ands	r3, r2
 800a53e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a540:	68bb      	ldr	r3, [r7, #8]
}
 800a542:	4618      	mov	r0, r3
 800a544:	371c      	adds	r7, #28
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a54e:	b480      	push	{r7}
 800a550:	b083      	sub	sp, #12
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	f003 0301 	and.w	r3, r3, #1
}
 800a55e:	4618      	mov	r0, r3
 800a560:	370c      	adds	r7, #12
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr

0800a56a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a56a:	b480      	push	{r7}
 800a56c:	b085      	sub	sp, #20
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a584:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a588:	f023 0307 	bic.w	r3, r3, #7
 800a58c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a59c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3714      	adds	r7, #20
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b087      	sub	sp, #28
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	607a      	str	r2, [r7, #4]
 800a5bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	333c      	adds	r3, #60	; 0x3c
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	4a26      	ldr	r2, [pc, #152]	; (800a668 <USB_EP0_OutStart+0xb8>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d90a      	bls.n	800a5ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5e4:	d101      	bne.n	800a5ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	e037      	b.n	800a65a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	697a      	ldr	r2, [r7, #20]
 800a600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a604:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a608:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	697a      	ldr	r2, [r7, #20]
 800a614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a618:	f043 0318 	orr.w	r3, r3, #24
 800a61c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	697a      	ldr	r2, [r7, #20]
 800a628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a62c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a630:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a632:	7afb      	ldrb	r3, [r7, #11]
 800a634:	2b01      	cmp	r3, #1
 800a636:	d10f      	bne.n	800a658 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a63e:	461a      	mov	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	697a      	ldr	r2, [r7, #20]
 800a64e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a652:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a656:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	371c      	adds	r7, #28
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	4f54300a 	.word	0x4f54300a

0800a66c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a674:	2300      	movs	r3, #0
 800a676:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	3301      	adds	r3, #1
 800a67c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	4a13      	ldr	r2, [pc, #76]	; (800a6d0 <USB_CoreReset+0x64>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d901      	bls.n	800a68a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a686:	2303      	movs	r3, #3
 800a688:	e01b      	b.n	800a6c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	daf2      	bge.n	800a678 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a692:	2300      	movs	r3, #0
 800a694:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	f043 0201 	orr.w	r2, r3, #1
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	4a09      	ldr	r2, [pc, #36]	; (800a6d0 <USB_CoreReset+0x64>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d901      	bls.n	800a6b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a6b0:	2303      	movs	r3, #3
 800a6b2:	e006      	b.n	800a6c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	f003 0301 	and.w	r3, r3, #1
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d0f0      	beq.n	800a6a2 <USB_CoreReset+0x36>

  return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3714      	adds	r7, #20
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	00030d40 	.word	0x00030d40

0800a6d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	460b      	mov	r3, r1
 800a6de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a6e0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a6e4:	f005 fb68 	bl	800fdb8 <USBD_static_malloc>
 800a6e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d109      	bne.n	800a704 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	32b0      	adds	r2, #176	; 0xb0
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a700:	2302      	movs	r3, #2
 800a702:	e0d4      	b.n	800a8ae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a704:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a708:	2100      	movs	r1, #0
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f005 fbe0 	bl	800fed0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	32b0      	adds	r2, #176	; 0xb0
 800a71a:	68f9      	ldr	r1, [r7, #12]
 800a71c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	32b0      	adds	r2, #176	; 0xb0
 800a72a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	7c1b      	ldrb	r3, [r3, #16]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d138      	bne.n	800a7ae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a73c:	4b5e      	ldr	r3, [pc, #376]	; (800a8b8 <USBD_CDC_Init+0x1e4>)
 800a73e:	7819      	ldrb	r1, [r3, #0]
 800a740:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a744:	2202      	movs	r2, #2
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f005 fa13 	bl	800fb72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a74c:	4b5a      	ldr	r3, [pc, #360]	; (800a8b8 <USBD_CDC_Init+0x1e4>)
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	f003 020f 	and.w	r2, r3, #15
 800a754:	6879      	ldr	r1, [r7, #4]
 800a756:	4613      	mov	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4413      	add	r3, r2
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	440b      	add	r3, r1
 800a760:	3324      	adds	r3, #36	; 0x24
 800a762:	2201      	movs	r2, #1
 800a764:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a766:	4b55      	ldr	r3, [pc, #340]	; (800a8bc <USBD_CDC_Init+0x1e8>)
 800a768:	7819      	ldrb	r1, [r3, #0]
 800a76a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a76e:	2202      	movs	r2, #2
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f005 f9fe 	bl	800fb72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a776:	4b51      	ldr	r3, [pc, #324]	; (800a8bc <USBD_CDC_Init+0x1e8>)
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	f003 020f 	and.w	r2, r3, #15
 800a77e:	6879      	ldr	r1, [r7, #4]
 800a780:	4613      	mov	r3, r2
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4413      	add	r3, r2
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	440b      	add	r3, r1
 800a78a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a78e:	2201      	movs	r2, #1
 800a790:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a792:	4b4b      	ldr	r3, [pc, #300]	; (800a8c0 <USBD_CDC_Init+0x1ec>)
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	f003 020f 	and.w	r2, r3, #15
 800a79a:	6879      	ldr	r1, [r7, #4]
 800a79c:	4613      	mov	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	440b      	add	r3, r1
 800a7a6:	3326      	adds	r3, #38	; 0x26
 800a7a8:	2210      	movs	r2, #16
 800a7aa:	801a      	strh	r2, [r3, #0]
 800a7ac:	e035      	b.n	800a81a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a7ae:	4b42      	ldr	r3, [pc, #264]	; (800a8b8 <USBD_CDC_Init+0x1e4>)
 800a7b0:	7819      	ldrb	r1, [r3, #0]
 800a7b2:	2340      	movs	r3, #64	; 0x40
 800a7b4:	2202      	movs	r2, #2
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f005 f9db 	bl	800fb72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a7bc:	4b3e      	ldr	r3, [pc, #248]	; (800a8b8 <USBD_CDC_Init+0x1e4>)
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	f003 020f 	and.w	r2, r3, #15
 800a7c4:	6879      	ldr	r1, [r7, #4]
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	4413      	add	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	440b      	add	r3, r1
 800a7d0:	3324      	adds	r3, #36	; 0x24
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a7d6:	4b39      	ldr	r3, [pc, #228]	; (800a8bc <USBD_CDC_Init+0x1e8>)
 800a7d8:	7819      	ldrb	r1, [r3, #0]
 800a7da:	2340      	movs	r3, #64	; 0x40
 800a7dc:	2202      	movs	r2, #2
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f005 f9c7 	bl	800fb72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a7e4:	4b35      	ldr	r3, [pc, #212]	; (800a8bc <USBD_CDC_Init+0x1e8>)
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	f003 020f 	and.w	r2, r3, #15
 800a7ec:	6879      	ldr	r1, [r7, #4]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4413      	add	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	440b      	add	r3, r1
 800a7f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a800:	4b2f      	ldr	r3, [pc, #188]	; (800a8c0 <USBD_CDC_Init+0x1ec>)
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	f003 020f 	and.w	r2, r3, #15
 800a808:	6879      	ldr	r1, [r7, #4]
 800a80a:	4613      	mov	r3, r2
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	440b      	add	r3, r1
 800a814:	3326      	adds	r3, #38	; 0x26
 800a816:	2210      	movs	r2, #16
 800a818:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a81a:	4b29      	ldr	r3, [pc, #164]	; (800a8c0 <USBD_CDC_Init+0x1ec>)
 800a81c:	7819      	ldrb	r1, [r3, #0]
 800a81e:	2308      	movs	r3, #8
 800a820:	2203      	movs	r2, #3
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f005 f9a5 	bl	800fb72 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a828:	4b25      	ldr	r3, [pc, #148]	; (800a8c0 <USBD_CDC_Init+0x1ec>)
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	f003 020f 	and.w	r2, r3, #15
 800a830:	6879      	ldr	r1, [r7, #4]
 800a832:	4613      	mov	r3, r2
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4413      	add	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	440b      	add	r3, r1
 800a83c:	3324      	adds	r3, #36	; 0x24
 800a83e:	2201      	movs	r2, #1
 800a840:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2200      	movs	r2, #0
 800a846:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	33b0      	adds	r3, #176	; 0xb0
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	4413      	add	r3, r2
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2200      	movs	r2, #0
 800a86a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a878:	2302      	movs	r3, #2
 800a87a:	e018      	b.n	800a8ae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	7c1b      	ldrb	r3, [r3, #16]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10a      	bne.n	800a89a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a884:	4b0d      	ldr	r3, [pc, #52]	; (800a8bc <USBD_CDC_Init+0x1e8>)
 800a886:	7819      	ldrb	r1, [r3, #0]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a88e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f005 fa5c 	bl	800fd50 <USBD_LL_PrepareReceive>
 800a898:	e008      	b.n	800a8ac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a89a:	4b08      	ldr	r3, [pc, #32]	; (800a8bc <USBD_CDC_Init+0x1e8>)
 800a89c:	7819      	ldrb	r1, [r3, #0]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a8a4:	2340      	movs	r3, #64	; 0x40
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f005 fa52 	bl	800fd50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	2000062f 	.word	0x2000062f
 800a8bc:	20000630 	.word	0x20000630
 800a8c0:	20000631 	.word	0x20000631

0800a8c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a8d0:	4b3a      	ldr	r3, [pc, #232]	; (800a9bc <USBD_CDC_DeInit+0xf8>)
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f005 f971 	bl	800fbbe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a8dc:	4b37      	ldr	r3, [pc, #220]	; (800a9bc <USBD_CDC_DeInit+0xf8>)
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	f003 020f 	and.w	r2, r3, #15
 800a8e4:	6879      	ldr	r1, [r7, #4]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	4413      	add	r3, r2
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	440b      	add	r3, r1
 800a8f0:	3324      	adds	r3, #36	; 0x24
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a8f6:	4b32      	ldr	r3, [pc, #200]	; (800a9c0 <USBD_CDC_DeInit+0xfc>)
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f005 f95e 	bl	800fbbe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a902:	4b2f      	ldr	r3, [pc, #188]	; (800a9c0 <USBD_CDC_DeInit+0xfc>)
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	f003 020f 	and.w	r2, r3, #15
 800a90a:	6879      	ldr	r1, [r7, #4]
 800a90c:	4613      	mov	r3, r2
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	4413      	add	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	440b      	add	r3, r1
 800a916:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a91a:	2200      	movs	r2, #0
 800a91c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a91e:	4b29      	ldr	r3, [pc, #164]	; (800a9c4 <USBD_CDC_DeInit+0x100>)
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	4619      	mov	r1, r3
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f005 f94a 	bl	800fbbe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a92a:	4b26      	ldr	r3, [pc, #152]	; (800a9c4 <USBD_CDC_DeInit+0x100>)
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	f003 020f 	and.w	r2, r3, #15
 800a932:	6879      	ldr	r1, [r7, #4]
 800a934:	4613      	mov	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	4413      	add	r3, r2
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	440b      	add	r3, r1
 800a93e:	3324      	adds	r3, #36	; 0x24
 800a940:	2200      	movs	r2, #0
 800a942:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a944:	4b1f      	ldr	r3, [pc, #124]	; (800a9c4 <USBD_CDC_DeInit+0x100>)
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	f003 020f 	and.w	r2, r3, #15
 800a94c:	6879      	ldr	r1, [r7, #4]
 800a94e:	4613      	mov	r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	4413      	add	r3, r2
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	440b      	add	r3, r1
 800a958:	3326      	adds	r3, #38	; 0x26
 800a95a:	2200      	movs	r2, #0
 800a95c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	32b0      	adds	r2, #176	; 0xb0
 800a968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d01f      	beq.n	800a9b0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	33b0      	adds	r3, #176	; 0xb0
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	4413      	add	r3, r2
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	32b0      	adds	r2, #176	; 0xb0
 800a98e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a992:	4618      	mov	r0, r3
 800a994:	f005 fa1e 	bl	800fdd4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	32b0      	adds	r2, #176	; 0xb0
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	2000062f 	.word	0x2000062f
 800a9c0:	20000630 	.word	0x20000630
 800a9c4:	20000631 	.word	0x20000631

0800a9c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b086      	sub	sp, #24
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	32b0      	adds	r2, #176	; 0xb0
 800a9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d101      	bne.n	800a9f8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a9f4:	2303      	movs	r3, #3
 800a9f6:	e0bf      	b.n	800ab78 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d050      	beq.n	800aaa6 <USBD_CDC_Setup+0xde>
 800aa04:	2b20      	cmp	r3, #32
 800aa06:	f040 80af 	bne.w	800ab68 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	88db      	ldrh	r3, [r3, #6]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d03a      	beq.n	800aa88 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	b25b      	sxtb	r3, r3
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	da1b      	bge.n	800aa54 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	33b0      	adds	r3, #176	; 0xb0
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	4413      	add	r3, r2
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aa32:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa34:	683a      	ldr	r2, [r7, #0]
 800aa36:	88d2      	ldrh	r2, [r2, #6]
 800aa38:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	88db      	ldrh	r3, [r3, #6]
 800aa3e:	2b07      	cmp	r3, #7
 800aa40:	bf28      	it	cs
 800aa42:	2307      	movcs	r3, #7
 800aa44:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	89fa      	ldrh	r2, [r7, #14]
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f001 fd43 	bl	800c4d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aa52:	e090      	b.n	800ab76 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	785a      	ldrb	r2, [r3, #1]
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	88db      	ldrh	r3, [r3, #6]
 800aa62:	2b3f      	cmp	r3, #63	; 0x3f
 800aa64:	d803      	bhi.n	800aa6e <USBD_CDC_Setup+0xa6>
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	88db      	ldrh	r3, [r3, #6]
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	e000      	b.n	800aa70 <USBD_CDC_Setup+0xa8>
 800aa6e:	2240      	movs	r2, #64	; 0x40
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800aa76:	6939      	ldr	r1, [r7, #16]
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800aa7e:	461a      	mov	r2, r3
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f001 fd55 	bl	800c530 <USBD_CtlPrepareRx>
      break;
 800aa86:	e076      	b.n	800ab76 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	33b0      	adds	r3, #176	; 0xb0
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	4413      	add	r3, r2
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	683a      	ldr	r2, [r7, #0]
 800aa9c:	7850      	ldrb	r0, [r2, #1]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	6839      	ldr	r1, [r7, #0]
 800aaa2:	4798      	blx	r3
      break;
 800aaa4:	e067      	b.n	800ab76 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	785b      	ldrb	r3, [r3, #1]
 800aaaa:	2b0b      	cmp	r3, #11
 800aaac:	d851      	bhi.n	800ab52 <USBD_CDC_Setup+0x18a>
 800aaae:	a201      	add	r2, pc, #4	; (adr r2, 800aab4 <USBD_CDC_Setup+0xec>)
 800aab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab4:	0800aae5 	.word	0x0800aae5
 800aab8:	0800ab61 	.word	0x0800ab61
 800aabc:	0800ab53 	.word	0x0800ab53
 800aac0:	0800ab53 	.word	0x0800ab53
 800aac4:	0800ab53 	.word	0x0800ab53
 800aac8:	0800ab53 	.word	0x0800ab53
 800aacc:	0800ab53 	.word	0x0800ab53
 800aad0:	0800ab53 	.word	0x0800ab53
 800aad4:	0800ab53 	.word	0x0800ab53
 800aad8:	0800ab53 	.word	0x0800ab53
 800aadc:	0800ab0f 	.word	0x0800ab0f
 800aae0:	0800ab39 	.word	0x0800ab39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	2b03      	cmp	r3, #3
 800aaee:	d107      	bne.n	800ab00 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aaf0:	f107 030a 	add.w	r3, r7, #10
 800aaf4:	2202      	movs	r2, #2
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f001 fced 	bl	800c4d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aafe:	e032      	b.n	800ab66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f001 fc77 	bl	800c3f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab08:	2303      	movs	r3, #3
 800ab0a:	75fb      	strb	r3, [r7, #23]
          break;
 800ab0c:	e02b      	b.n	800ab66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	2b03      	cmp	r3, #3
 800ab18:	d107      	bne.n	800ab2a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ab1a:	f107 030d 	add.w	r3, r7, #13
 800ab1e:	2201      	movs	r2, #1
 800ab20:	4619      	mov	r1, r3
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f001 fcd8 	bl	800c4d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab28:	e01d      	b.n	800ab66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f001 fc62 	bl	800c3f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab32:	2303      	movs	r3, #3
 800ab34:	75fb      	strb	r3, [r7, #23]
          break;
 800ab36:	e016      	b.n	800ab66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	2b03      	cmp	r3, #3
 800ab42:	d00f      	beq.n	800ab64 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f001 fc55 	bl	800c3f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ab50:	e008      	b.n	800ab64 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ab52:	6839      	ldr	r1, [r7, #0]
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f001 fc4e 	bl	800c3f6 <USBD_CtlError>
          ret = USBD_FAIL;
 800ab5a:	2303      	movs	r3, #3
 800ab5c:	75fb      	strb	r3, [r7, #23]
          break;
 800ab5e:	e002      	b.n	800ab66 <USBD_CDC_Setup+0x19e>
          break;
 800ab60:	bf00      	nop
 800ab62:	e008      	b.n	800ab76 <USBD_CDC_Setup+0x1ae>
          break;
 800ab64:	bf00      	nop
      }
      break;
 800ab66:	e006      	b.n	800ab76 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ab68:	6839      	ldr	r1, [r7, #0]
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f001 fc43 	bl	800c3f6 <USBD_CtlError>
      ret = USBD_FAIL;
 800ab70:	2303      	movs	r3, #3
 800ab72:	75fb      	strb	r3, [r7, #23]
      break;
 800ab74:	bf00      	nop
  }

  return (uint8_t)ret;
 800ab76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3718      	adds	r7, #24
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	32b0      	adds	r2, #176	; 0xb0
 800ab9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d101      	bne.n	800abaa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aba6:	2303      	movs	r3, #3
 800aba8:	e065      	b.n	800ac76 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	32b0      	adds	r2, #176	; 0xb0
 800abb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abb8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800abba:	78fb      	ldrb	r3, [r7, #3]
 800abbc:	f003 020f 	and.w	r2, r3, #15
 800abc0:	6879      	ldr	r1, [r7, #4]
 800abc2:	4613      	mov	r3, r2
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4413      	add	r3, r2
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	440b      	add	r3, r1
 800abcc:	3318      	adds	r3, #24
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d02f      	beq.n	800ac34 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800abd4:	78fb      	ldrb	r3, [r7, #3]
 800abd6:	f003 020f 	and.w	r2, r3, #15
 800abda:	6879      	ldr	r1, [r7, #4]
 800abdc:	4613      	mov	r3, r2
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	440b      	add	r3, r1
 800abe6:	3318      	adds	r3, #24
 800abe8:	681a      	ldr	r2, [r3, #0]
 800abea:	78fb      	ldrb	r3, [r7, #3]
 800abec:	f003 010f 	and.w	r1, r3, #15
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	460b      	mov	r3, r1
 800abf4:	00db      	lsls	r3, r3, #3
 800abf6:	440b      	add	r3, r1
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	4403      	add	r3, r0
 800abfc:	3348      	adds	r3, #72	; 0x48
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	fbb2 f1f3 	udiv	r1, r2, r3
 800ac04:	fb01 f303 	mul.w	r3, r1, r3
 800ac08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d112      	bne.n	800ac34 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ac0e:	78fb      	ldrb	r3, [r7, #3]
 800ac10:	f003 020f 	and.w	r2, r3, #15
 800ac14:	6879      	ldr	r1, [r7, #4]
 800ac16:	4613      	mov	r3, r2
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	4413      	add	r3, r2
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	440b      	add	r3, r1
 800ac20:	3318      	adds	r3, #24
 800ac22:	2200      	movs	r2, #0
 800ac24:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ac26:	78f9      	ldrb	r1, [r7, #3]
 800ac28:	2300      	movs	r3, #0
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f005 f86e 	bl	800fd0e <USBD_LL_Transmit>
 800ac32:	e01f      	b.n	800ac74 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	33b0      	adds	r3, #176	; 0xb0
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4413      	add	r3, r2
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d010      	beq.n	800ac74 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	33b0      	adds	r3, #176	; 0xb0
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4413      	add	r3, r2
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ac70:	78fa      	ldrb	r2, [r7, #3]
 800ac72:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b084      	sub	sp, #16
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	460b      	mov	r3, r1
 800ac88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	32b0      	adds	r2, #176	; 0xb0
 800ac94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	32b0      	adds	r2, #176	; 0xb0
 800aca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d101      	bne.n	800acb0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800acac:	2303      	movs	r3, #3
 800acae:	e01a      	b.n	800ace6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800acb0:	78fb      	ldrb	r3, [r7, #3]
 800acb2:	4619      	mov	r1, r3
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f005 f86c 	bl	800fd92 <USBD_LL_GetRxDataSize>
 800acba:	4602      	mov	r2, r0
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	33b0      	adds	r3, #176	; 0xb0
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	4413      	add	r3, r2
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ace0:	4611      	mov	r1, r2
 800ace2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b084      	sub	sp, #16
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	32b0      	adds	r2, #176	; 0xb0
 800ad00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d101      	bne.n	800ad10 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ad0c:	2303      	movs	r3, #3
 800ad0e:	e025      	b.n	800ad5c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	33b0      	adds	r3, #176	; 0xb0
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d01a      	beq.n	800ad5a <USBD_CDC_EP0_RxReady+0x6c>
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ad2a:	2bff      	cmp	r3, #255	; 0xff
 800ad2c:	d015      	beq.n	800ad5a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	33b0      	adds	r3, #176	; 0xb0
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	4413      	add	r3, r2
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ad46:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ad4e:	b292      	uxth	r2, r2
 800ad50:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	22ff      	movs	r2, #255	; 0xff
 800ad56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3710      	adds	r7, #16
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b086      	sub	sp, #24
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad6c:	2182      	movs	r1, #130	; 0x82
 800ad6e:	4818      	ldr	r0, [pc, #96]	; (800add0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad70:	f000 fd09 	bl	800b786 <USBD_GetEpDesc>
 800ad74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad76:	2101      	movs	r1, #1
 800ad78:	4815      	ldr	r0, [pc, #84]	; (800add0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad7a:	f000 fd04 	bl	800b786 <USBD_GetEpDesc>
 800ad7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad80:	2181      	movs	r1, #129	; 0x81
 800ad82:	4813      	ldr	r0, [pc, #76]	; (800add0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad84:	f000 fcff 	bl	800b786 <USBD_GetEpDesc>
 800ad88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d002      	beq.n	800ad96 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	2210      	movs	r2, #16
 800ad94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d006      	beq.n	800adaa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ada4:	711a      	strb	r2, [r3, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d006      	beq.n	800adbe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adb8:	711a      	strb	r2, [r3, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2243      	movs	r2, #67	; 0x43
 800adc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800adc4:	4b02      	ldr	r3, [pc, #8]	; (800add0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3718      	adds	r7, #24
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	200005ec 	.word	0x200005ec

0800add4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800addc:	2182      	movs	r1, #130	; 0x82
 800adde:	4818      	ldr	r0, [pc, #96]	; (800ae40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ade0:	f000 fcd1 	bl	800b786 <USBD_GetEpDesc>
 800ade4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ade6:	2101      	movs	r1, #1
 800ade8:	4815      	ldr	r0, [pc, #84]	; (800ae40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800adea:	f000 fccc 	bl	800b786 <USBD_GetEpDesc>
 800adee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800adf0:	2181      	movs	r1, #129	; 0x81
 800adf2:	4813      	ldr	r0, [pc, #76]	; (800ae40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800adf4:	f000 fcc7 	bl	800b786 <USBD_GetEpDesc>
 800adf8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d002      	beq.n	800ae06 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	2210      	movs	r2, #16
 800ae04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d006      	beq.n	800ae1a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	711a      	strb	r2, [r3, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f042 0202 	orr.w	r2, r2, #2
 800ae18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d006      	beq.n	800ae2e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2200      	movs	r2, #0
 800ae24:	711a      	strb	r2, [r3, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	f042 0202 	orr.w	r2, r2, #2
 800ae2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2243      	movs	r2, #67	; 0x43
 800ae32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae34:	4b02      	ldr	r3, [pc, #8]	; (800ae40 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3718      	adds	r7, #24
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	200005ec 	.word	0x200005ec

0800ae44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ae4c:	2182      	movs	r1, #130	; 0x82
 800ae4e:	4818      	ldr	r0, [pc, #96]	; (800aeb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae50:	f000 fc99 	bl	800b786 <USBD_GetEpDesc>
 800ae54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ae56:	2101      	movs	r1, #1
 800ae58:	4815      	ldr	r0, [pc, #84]	; (800aeb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae5a:	f000 fc94 	bl	800b786 <USBD_GetEpDesc>
 800ae5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae60:	2181      	movs	r1, #129	; 0x81
 800ae62:	4813      	ldr	r0, [pc, #76]	; (800aeb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ae64:	f000 fc8f 	bl	800b786 <USBD_GetEpDesc>
 800ae68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d002      	beq.n	800ae76 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	2210      	movs	r2, #16
 800ae74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d006      	beq.n	800ae8a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae84:	711a      	strb	r2, [r3, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d006      	beq.n	800ae9e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae98:	711a      	strb	r2, [r3, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2243      	movs	r2, #67	; 0x43
 800aea2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aea4:	4b02      	ldr	r3, [pc, #8]	; (800aeb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3718      	adds	r7, #24
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	200005ec 	.word	0x200005ec

0800aeb4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	220a      	movs	r2, #10
 800aec0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aec2:	4b03      	ldr	r3, [pc, #12]	; (800aed0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr
 800aed0:	200005a8 	.word	0x200005a8

0800aed4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d101      	bne.n	800aee8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aee4:	2303      	movs	r3, #3
 800aee6:	e009      	b.n	800aefc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	33b0      	adds	r3, #176	; 0xb0
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4413      	add	r3, r2
 800aef6:	683a      	ldr	r2, [r7, #0]
 800aef8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800af08:	b480      	push	{r7}
 800af0a:	b087      	sub	sp, #28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	32b0      	adds	r2, #176	; 0xb0
 800af1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af22:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d101      	bne.n	800af2e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800af2a:	2303      	movs	r3, #3
 800af2c:	e008      	b.n	800af40 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	371c      	adds	r7, #28
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b085      	sub	sp, #20
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	32b0      	adds	r2, #176	; 0xb0
 800af60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af64:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d101      	bne.n	800af70 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800af6c:	2303      	movs	r3, #3
 800af6e:	e004      	b.n	800af7a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	683a      	ldr	r2, [r7, #0]
 800af74:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
	...

0800af88 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	32b0      	adds	r2, #176	; 0xb0
 800af9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af9e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	32b0      	adds	r2, #176	; 0xb0
 800afaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d101      	bne.n	800afb6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e018      	b.n	800afe8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	7c1b      	ldrb	r3, [r3, #16]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d10a      	bne.n	800afd4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afbe:	4b0c      	ldr	r3, [pc, #48]	; (800aff0 <USBD_CDC_ReceivePacket+0x68>)
 800afc0:	7819      	ldrb	r1, [r3, #0]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f004 febf 	bl	800fd50 <USBD_LL_PrepareReceive>
 800afd2:	e008      	b.n	800afe6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afd4:	4b06      	ldr	r3, [pc, #24]	; (800aff0 <USBD_CDC_ReceivePacket+0x68>)
 800afd6:	7819      	ldrb	r1, [r3, #0]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afde:	2340      	movs	r3, #64	; 0x40
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f004 feb5 	bl	800fd50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800afe6:	2300      	movs	r3, #0
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	20000630 	.word	0x20000630

0800aff4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	4613      	mov	r3, r2
 800b000:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d101      	bne.n	800b00c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b008:	2303      	movs	r3, #3
 800b00a:	e01f      	b.n	800b04c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2200      	movs	r2, #0
 800b020:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d003      	beq.n	800b032 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	68ba      	ldr	r2, [r7, #8]
 800b02e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2201      	movs	r2, #1
 800b036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	79fa      	ldrb	r2, [r7, #7]
 800b03e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	f004 fd2f 	bl	800faa4 <USBD_LL_Init>
 800b046:	4603      	mov	r3, r0
 800b048:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b04a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b05e:	2300      	movs	r3, #0
 800b060:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d101      	bne.n	800b06c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b068:	2303      	movs	r3, #3
 800b06a:	e025      	b.n	800b0b8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	683a      	ldr	r2, [r7, #0]
 800b070:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	32ae      	adds	r2, #174	; 0xae
 800b07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00f      	beq.n	800b0a8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	32ae      	adds	r2, #174	; 0xae
 800b092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b098:	f107 020e 	add.w	r2, r7, #14
 800b09c:	4610      	mov	r0, r2
 800b09e:	4798      	blx	r3
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b0ae:	1c5a      	adds	r2, r3, #1
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b0b6:	2300      	movs	r3, #0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3710      	adds	r7, #16
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f004 fd37 	bl	800fb3c <USBD_LL_Start>
 800b0ce:	4603      	mov	r3, r0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b0e0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	370c      	adds	r7, #12
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr

0800b0ee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b084      	sub	sp, #16
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b104:	2b00      	cmp	r3, #0
 800b106:	d009      	beq.n	800b11c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	78fa      	ldrb	r2, [r7, #3]
 800b112:	4611      	mov	r1, r2
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	4798      	blx	r3
 800b118:	4603      	mov	r3, r0
 800b11a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b084      	sub	sp, #16
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	460b      	mov	r3, r1
 800b130:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b132:	2300      	movs	r3, #0
 800b134:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	78fa      	ldrb	r2, [r7, #3]
 800b140:	4611      	mov	r1, r2
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	4798      	blx	r3
 800b146:	4603      	mov	r3, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d001      	beq.n	800b150 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b14c:	2303      	movs	r3, #3
 800b14e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b150:	7bfb      	ldrb	r3, [r7, #15]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b084      	sub	sp, #16
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
 800b162:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b16a:	6839      	ldr	r1, [r7, #0]
 800b16c:	4618      	mov	r0, r3
 800b16e:	f001 f908 	bl	800c382 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2201      	movs	r2, #1
 800b176:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b180:	461a      	mov	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b18e:	f003 031f 	and.w	r3, r3, #31
 800b192:	2b02      	cmp	r3, #2
 800b194:	d01a      	beq.n	800b1cc <USBD_LL_SetupStage+0x72>
 800b196:	2b02      	cmp	r3, #2
 800b198:	d822      	bhi.n	800b1e0 <USBD_LL_SetupStage+0x86>
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d002      	beq.n	800b1a4 <USBD_LL_SetupStage+0x4a>
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d00a      	beq.n	800b1b8 <USBD_LL_SetupStage+0x5e>
 800b1a2:	e01d      	b.n	800b1e0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 fb5f 	bl	800b870 <USBD_StdDevReq>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	73fb      	strb	r3, [r7, #15]
      break;
 800b1b6:	e020      	b.n	800b1fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 fbc7 	bl	800b954 <USBD_StdItfReq>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b1ca:	e016      	b.n	800b1fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 fc29 	bl	800ba2c <USBD_StdEPReq>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	73fb      	strb	r3, [r7, #15]
      break;
 800b1de:	e00c      	b.n	800b1fa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b1e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f004 fd04 	bl	800fbfc <USBD_LL_StallEP>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b1f8:	bf00      	nop
  }

  return ret;
 800b1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3710      	adds	r7, #16
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b086      	sub	sp, #24
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	460b      	mov	r3, r1
 800b20e:	607a      	str	r2, [r7, #4]
 800b210:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b216:	7afb      	ldrb	r3, [r7, #11]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d16e      	bne.n	800b2fa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b222:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b22a:	2b03      	cmp	r3, #3
 800b22c:	f040 8098 	bne.w	800b360 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	689a      	ldr	r2, [r3, #8]
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	429a      	cmp	r2, r3
 800b23a:	d913      	bls.n	800b264 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	689a      	ldr	r2, [r3, #8]
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	1ad2      	subs	r2, r2, r3
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	68da      	ldr	r2, [r3, #12]
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	4293      	cmp	r3, r2
 800b254:	bf28      	it	cs
 800b256:	4613      	movcs	r3, r2
 800b258:	461a      	mov	r2, r3
 800b25a:	6879      	ldr	r1, [r7, #4]
 800b25c:	68f8      	ldr	r0, [r7, #12]
 800b25e:	f001 f984 	bl	800c56a <USBD_CtlContinueRx>
 800b262:	e07d      	b.n	800b360 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b26a:	f003 031f 	and.w	r3, r3, #31
 800b26e:	2b02      	cmp	r3, #2
 800b270:	d014      	beq.n	800b29c <USBD_LL_DataOutStage+0x98>
 800b272:	2b02      	cmp	r3, #2
 800b274:	d81d      	bhi.n	800b2b2 <USBD_LL_DataOutStage+0xae>
 800b276:	2b00      	cmp	r3, #0
 800b278:	d002      	beq.n	800b280 <USBD_LL_DataOutStage+0x7c>
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d003      	beq.n	800b286 <USBD_LL_DataOutStage+0x82>
 800b27e:	e018      	b.n	800b2b2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b280:	2300      	movs	r3, #0
 800b282:	75bb      	strb	r3, [r7, #22]
            break;
 800b284:	e018      	b.n	800b2b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	4619      	mov	r1, r3
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f000 fa5e 	bl	800b752 <USBD_CoreFindIF>
 800b296:	4603      	mov	r3, r0
 800b298:	75bb      	strb	r3, [r7, #22]
            break;
 800b29a:	e00d      	b.n	800b2b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	68f8      	ldr	r0, [r7, #12]
 800b2a8:	f000 fa60 	bl	800b76c <USBD_CoreFindEP>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	75bb      	strb	r3, [r7, #22]
            break;
 800b2b0:	e002      	b.n	800b2b8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	75bb      	strb	r3, [r7, #22]
            break;
 800b2b6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b2b8:	7dbb      	ldrb	r3, [r7, #22]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d119      	bne.n	800b2f2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	d113      	bne.n	800b2f2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b2ca:	7dba      	ldrb	r2, [r7, #22]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	32ae      	adds	r2, #174	; 0xae
 800b2d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d4:	691b      	ldr	r3, [r3, #16]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d00b      	beq.n	800b2f2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b2da:	7dba      	ldrb	r2, [r7, #22]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b2e2:	7dba      	ldrb	r2, [r7, #22]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	32ae      	adds	r2, #174	; 0xae
 800b2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ec:	691b      	ldr	r3, [r3, #16]
 800b2ee:	68f8      	ldr	r0, [r7, #12]
 800b2f0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f001 f94a 	bl	800c58c <USBD_CtlSendStatus>
 800b2f8:	e032      	b.n	800b360 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b2fa:	7afb      	ldrb	r3, [r7, #11]
 800b2fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b300:	b2db      	uxtb	r3, r3
 800b302:	4619      	mov	r1, r3
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f000 fa31 	bl	800b76c <USBD_CoreFindEP>
 800b30a:	4603      	mov	r3, r0
 800b30c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b30e:	7dbb      	ldrb	r3, [r7, #22]
 800b310:	2bff      	cmp	r3, #255	; 0xff
 800b312:	d025      	beq.n	800b360 <USBD_LL_DataOutStage+0x15c>
 800b314:	7dbb      	ldrb	r3, [r7, #22]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d122      	bne.n	800b360 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b320:	b2db      	uxtb	r3, r3
 800b322:	2b03      	cmp	r3, #3
 800b324:	d117      	bne.n	800b356 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b326:	7dba      	ldrb	r2, [r7, #22]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	32ae      	adds	r2, #174	; 0xae
 800b32c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b330:	699b      	ldr	r3, [r3, #24]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00f      	beq.n	800b356 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b336:	7dba      	ldrb	r2, [r7, #22]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b33e:	7dba      	ldrb	r2, [r7, #22]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	32ae      	adds	r2, #174	; 0xae
 800b344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b348:	699b      	ldr	r3, [r3, #24]
 800b34a:	7afa      	ldrb	r2, [r7, #11]
 800b34c:	4611      	mov	r1, r2
 800b34e:	68f8      	ldr	r0, [r7, #12]
 800b350:	4798      	blx	r3
 800b352:	4603      	mov	r3, r0
 800b354:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b356:	7dfb      	ldrb	r3, [r7, #23]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d001      	beq.n	800b360 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b35c:	7dfb      	ldrb	r3, [r7, #23]
 800b35e:	e000      	b.n	800b362 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	3718      	adds	r7, #24
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b086      	sub	sp, #24
 800b36e:	af00      	add	r7, sp, #0
 800b370:	60f8      	str	r0, [r7, #12]
 800b372:	460b      	mov	r3, r1
 800b374:	607a      	str	r2, [r7, #4]
 800b376:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b378:	7afb      	ldrb	r3, [r7, #11]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d16f      	bne.n	800b45e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	3314      	adds	r3, #20
 800b382:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	d15a      	bne.n	800b444 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	689a      	ldr	r2, [r3, #8]
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	429a      	cmp	r2, r3
 800b398:	d914      	bls.n	800b3c4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	689a      	ldr	r2, [r3, #8]
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	1ad2      	subs	r2, r2, r3
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	6879      	ldr	r1, [r7, #4]
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f001 f8ac 	bl	800c50e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	f004 fcc7 	bl	800fd50 <USBD_LL_PrepareReceive>
 800b3c2:	e03f      	b.n	800b444 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	68da      	ldr	r2, [r3, #12]
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d11c      	bne.n	800b40a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	685a      	ldr	r2, [r3, #4]
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d316      	bcc.n	800b40a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	685a      	ldr	r2, [r3, #4]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d20f      	bcs.n	800b40a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f001 f88d 	bl	800c50e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	2200      	movs	r2, #0
 800b400:	2100      	movs	r1, #0
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f004 fca4 	bl	800fd50 <USBD_LL_PrepareReceive>
 800b408:	e01c      	b.n	800b444 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b410:	b2db      	uxtb	r3, r3
 800b412:	2b03      	cmp	r3, #3
 800b414:	d10f      	bne.n	800b436 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d009      	beq.n	800b436 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2200      	movs	r2, #0
 800b426:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	68f8      	ldr	r0, [r7, #12]
 800b434:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b436:	2180      	movs	r1, #128	; 0x80
 800b438:	68f8      	ldr	r0, [r7, #12]
 800b43a:	f004 fbdf 	bl	800fbfc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b43e:	68f8      	ldr	r0, [r7, #12]
 800b440:	f001 f8b7 	bl	800c5b2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d03a      	beq.n	800b4c4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f7ff fe42 	bl	800b0d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2200      	movs	r2, #0
 800b458:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b45c:	e032      	b.n	800b4c4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b45e:	7afb      	ldrb	r3, [r7, #11]
 800b460:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b464:	b2db      	uxtb	r3, r3
 800b466:	4619      	mov	r1, r3
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f000 f97f 	bl	800b76c <USBD_CoreFindEP>
 800b46e:	4603      	mov	r3, r0
 800b470:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b472:	7dfb      	ldrb	r3, [r7, #23]
 800b474:	2bff      	cmp	r3, #255	; 0xff
 800b476:	d025      	beq.n	800b4c4 <USBD_LL_DataInStage+0x15a>
 800b478:	7dfb      	ldrb	r3, [r7, #23]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d122      	bne.n	800b4c4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b484:	b2db      	uxtb	r3, r3
 800b486:	2b03      	cmp	r3, #3
 800b488:	d11c      	bne.n	800b4c4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b48a:	7dfa      	ldrb	r2, [r7, #23]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	32ae      	adds	r2, #174	; 0xae
 800b490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b494:	695b      	ldr	r3, [r3, #20]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d014      	beq.n	800b4c4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b49a:	7dfa      	ldrb	r2, [r7, #23]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b4a2:	7dfa      	ldrb	r2, [r7, #23]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	32ae      	adds	r2, #174	; 0xae
 800b4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	7afa      	ldrb	r2, [r7, #11]
 800b4b0:	4611      	mov	r1, r2
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	4798      	blx	r3
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b4ba:	7dbb      	ldrb	r3, [r7, #22]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d001      	beq.n	800b4c4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b4c0:	7dbb      	ldrb	r3, [r7, #22]
 800b4c2:	e000      	b.n	800b4c6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3718      	adds	r7, #24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b084      	sub	sp, #16
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2201      	movs	r2, #1
 800b4de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b506:	2b00      	cmp	r3, #0
 800b508:	d014      	beq.n	800b534 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00e      	beq.n	800b534 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	6852      	ldr	r2, [r2, #4]
 800b522:	b2d2      	uxtb	r2, r2
 800b524:	4611      	mov	r1, r2
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	4798      	blx	r3
 800b52a:	4603      	mov	r3, r0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d001      	beq.n	800b534 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b530:	2303      	movs	r3, #3
 800b532:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b534:	2340      	movs	r3, #64	; 0x40
 800b536:	2200      	movs	r2, #0
 800b538:	2100      	movs	r1, #0
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f004 fb19 	bl	800fb72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2201      	movs	r2, #1
 800b544:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2240      	movs	r2, #64	; 0x40
 800b54c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b550:	2340      	movs	r3, #64	; 0x40
 800b552:	2200      	movs	r2, #0
 800b554:	2180      	movs	r1, #128	; 0x80
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f004 fb0b 	bl	800fb72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2201      	movs	r2, #1
 800b560:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2240      	movs	r2, #64	; 0x40
 800b566:	621a      	str	r2, [r3, #32]

  return ret;
 800b568:	7bfb      	ldrb	r3, [r7, #15]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b572:	b480      	push	{r7}
 800b574:	b083      	sub	sp, #12
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
 800b57a:	460b      	mov	r3, r1
 800b57c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	78fa      	ldrb	r2, [r7, #3]
 800b582:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	370c      	adds	r7, #12
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr

0800b592 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b592:	b480      	push	{r7}
 800b594:	b083      	sub	sp, #12
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2204      	movs	r2, #4
 800b5ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	370c      	adds	r7, #12
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b5be:	b480      	push	{r7}
 800b5c0:	b083      	sub	sp, #12
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	2b04      	cmp	r3, #4
 800b5d0:	d106      	bne.n	800b5e0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b5e0:	2300      	movs	r3, #0
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	370c      	adds	r7, #12
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr

0800b5ee <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b082      	sub	sp, #8
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	2b03      	cmp	r3, #3
 800b600:	d110      	bne.n	800b624 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d00b      	beq.n	800b624 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b612:	69db      	ldr	r3, [r3, #28]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d005      	beq.n	800b624 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b61e:	69db      	ldr	r3, [r3, #28]
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b082      	sub	sp, #8
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
 800b636:	460b      	mov	r3, r1
 800b638:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	32ae      	adds	r2, #174	; 0xae
 800b644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d101      	bne.n	800b650 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b64c:	2303      	movs	r3, #3
 800b64e:	e01c      	b.n	800b68a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b656:	b2db      	uxtb	r3, r3
 800b658:	2b03      	cmp	r3, #3
 800b65a:	d115      	bne.n	800b688 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	32ae      	adds	r2, #174	; 0xae
 800b666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b66a:	6a1b      	ldr	r3, [r3, #32]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00b      	beq.n	800b688 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	32ae      	adds	r2, #174	; 0xae
 800b67a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b67e:	6a1b      	ldr	r3, [r3, #32]
 800b680:	78fa      	ldrb	r2, [r7, #3]
 800b682:	4611      	mov	r1, r2
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3708      	adds	r7, #8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b082      	sub	sp, #8
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	460b      	mov	r3, r1
 800b69c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	32ae      	adds	r2, #174	; 0xae
 800b6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d101      	bne.n	800b6b4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b6b0:	2303      	movs	r3, #3
 800b6b2:	e01c      	b.n	800b6ee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	2b03      	cmp	r3, #3
 800b6be:	d115      	bne.n	800b6ec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	32ae      	adds	r2, #174	; 0xae
 800b6ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d00b      	beq.n	800b6ec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	32ae      	adds	r2, #174	; 0xae
 800b6de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e4:	78fa      	ldrb	r2, [r7, #3]
 800b6e6:	4611      	mov	r1, r2
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3708      	adds	r7, #8
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b083      	sub	sp, #12
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b714:	2300      	movs	r3, #0
 800b716:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2201      	movs	r2, #1
 800b71c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00e      	beq.n	800b748 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	6852      	ldr	r2, [r2, #4]
 800b736:	b2d2      	uxtb	r2, r2
 800b738:	4611      	mov	r1, r2
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	4798      	blx	r3
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d001      	beq.n	800b748 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b744:	2303      	movs	r3, #3
 800b746:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b748:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3710      	adds	r7, #16
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b752:	b480      	push	{r7}
 800b754:	b083      	sub	sp, #12
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
 800b75a:	460b      	mov	r3, r1
 800b75c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b75e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b760:	4618      	mov	r0, r3
 800b762:	370c      	adds	r7, #12
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	460b      	mov	r3, r1
 800b776:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b778:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	370c      	adds	r7, #12
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b086      	sub	sp, #24
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
 800b78e:	460b      	mov	r3, r1
 800b790:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b79a:	2300      	movs	r3, #0
 800b79c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	885b      	ldrh	r3, [r3, #2]
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d920      	bls.n	800b7f0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b7b6:	e013      	b.n	800b7e0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b7b8:	f107 030a 	add.w	r3, r7, #10
 800b7bc:	4619      	mov	r1, r3
 800b7be:	6978      	ldr	r0, [r7, #20]
 800b7c0:	f000 f81b 	bl	800b7fa <USBD_GetNextDesc>
 800b7c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	785b      	ldrb	r3, [r3, #1]
 800b7ca:	2b05      	cmp	r3, #5
 800b7cc:	d108      	bne.n	800b7e0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	789b      	ldrb	r3, [r3, #2]
 800b7d6:	78fa      	ldrb	r2, [r7, #3]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d008      	beq.n	800b7ee <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	885b      	ldrh	r3, [r3, #2]
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	897b      	ldrh	r3, [r7, #10]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d8e5      	bhi.n	800b7b8 <USBD_GetEpDesc+0x32>
 800b7ec:	e000      	b.n	800b7f0 <USBD_GetEpDesc+0x6a>
          break;
 800b7ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b7f0:	693b      	ldr	r3, [r7, #16]
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3718      	adds	r7, #24
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b085      	sub	sp, #20
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	881a      	ldrh	r2, [r3, #0]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	b29b      	uxth	r3, r3
 800b812:	4413      	add	r3, r2
 800b814:	b29a      	uxth	r2, r3
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	461a      	mov	r2, r3
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4413      	add	r3, r2
 800b824:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b826:	68fb      	ldr	r3, [r7, #12]
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3714      	adds	r7, #20
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b834:	b480      	push	{r7}
 800b836:	b087      	sub	sp, #28
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	3301      	adds	r3, #1
 800b84a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b852:	8a3b      	ldrh	r3, [r7, #16]
 800b854:	021b      	lsls	r3, r3, #8
 800b856:	b21a      	sxth	r2, r3
 800b858:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	b21b      	sxth	r3, r3
 800b860:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b862:	89fb      	ldrh	r3, [r7, #14]
}
 800b864:	4618      	mov	r0, r3
 800b866:	371c      	adds	r7, #28
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b87a:	2300      	movs	r3, #0
 800b87c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b886:	2b40      	cmp	r3, #64	; 0x40
 800b888:	d005      	beq.n	800b896 <USBD_StdDevReq+0x26>
 800b88a:	2b40      	cmp	r3, #64	; 0x40
 800b88c:	d857      	bhi.n	800b93e <USBD_StdDevReq+0xce>
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00f      	beq.n	800b8b2 <USBD_StdDevReq+0x42>
 800b892:	2b20      	cmp	r3, #32
 800b894:	d153      	bne.n	800b93e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	32ae      	adds	r2, #174	; 0xae
 800b8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	6839      	ldr	r1, [r7, #0]
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	4798      	blx	r3
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	73fb      	strb	r3, [r7, #15]
      break;
 800b8b0:	e04a      	b.n	800b948 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	785b      	ldrb	r3, [r3, #1]
 800b8b6:	2b09      	cmp	r3, #9
 800b8b8:	d83b      	bhi.n	800b932 <USBD_StdDevReq+0xc2>
 800b8ba:	a201      	add	r2, pc, #4	; (adr r2, 800b8c0 <USBD_StdDevReq+0x50>)
 800b8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c0:	0800b915 	.word	0x0800b915
 800b8c4:	0800b929 	.word	0x0800b929
 800b8c8:	0800b933 	.word	0x0800b933
 800b8cc:	0800b91f 	.word	0x0800b91f
 800b8d0:	0800b933 	.word	0x0800b933
 800b8d4:	0800b8f3 	.word	0x0800b8f3
 800b8d8:	0800b8e9 	.word	0x0800b8e9
 800b8dc:	0800b933 	.word	0x0800b933
 800b8e0:	0800b90b 	.word	0x0800b90b
 800b8e4:	0800b8fd 	.word	0x0800b8fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 fa3c 	bl	800bd68 <USBD_GetDescriptor>
          break;
 800b8f0:	e024      	b.n	800b93c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b8f2:	6839      	ldr	r1, [r7, #0]
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 fba1 	bl	800c03c <USBD_SetAddress>
          break;
 800b8fa:	e01f      	b.n	800b93c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b8fc:	6839      	ldr	r1, [r7, #0]
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 fbe0 	bl	800c0c4 <USBD_SetConfig>
 800b904:	4603      	mov	r3, r0
 800b906:	73fb      	strb	r3, [r7, #15]
          break;
 800b908:	e018      	b.n	800b93c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b90a:	6839      	ldr	r1, [r7, #0]
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 fc83 	bl	800c218 <USBD_GetConfig>
          break;
 800b912:	e013      	b.n	800b93c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b914:	6839      	ldr	r1, [r7, #0]
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 fcb4 	bl	800c284 <USBD_GetStatus>
          break;
 800b91c:	e00e      	b.n	800b93c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b91e:	6839      	ldr	r1, [r7, #0]
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 fce3 	bl	800c2ec <USBD_SetFeature>
          break;
 800b926:	e009      	b.n	800b93c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b928:	6839      	ldr	r1, [r7, #0]
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 fd07 	bl	800c33e <USBD_ClrFeature>
          break;
 800b930:	e004      	b.n	800b93c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b932:	6839      	ldr	r1, [r7, #0]
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 fd5e 	bl	800c3f6 <USBD_CtlError>
          break;
 800b93a:	bf00      	nop
      }
      break;
 800b93c:	e004      	b.n	800b948 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b93e:	6839      	ldr	r1, [r7, #0]
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 fd58 	bl	800c3f6 <USBD_CtlError>
      break;
 800b946:	bf00      	nop
  }

  return ret;
 800b948:	7bfb      	ldrb	r3, [r7, #15]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop

0800b954 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b95e:	2300      	movs	r3, #0
 800b960:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b96a:	2b40      	cmp	r3, #64	; 0x40
 800b96c:	d005      	beq.n	800b97a <USBD_StdItfReq+0x26>
 800b96e:	2b40      	cmp	r3, #64	; 0x40
 800b970:	d852      	bhi.n	800ba18 <USBD_StdItfReq+0xc4>
 800b972:	2b00      	cmp	r3, #0
 800b974:	d001      	beq.n	800b97a <USBD_StdItfReq+0x26>
 800b976:	2b20      	cmp	r3, #32
 800b978:	d14e      	bne.n	800ba18 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b980:	b2db      	uxtb	r3, r3
 800b982:	3b01      	subs	r3, #1
 800b984:	2b02      	cmp	r3, #2
 800b986:	d840      	bhi.n	800ba0a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	889b      	ldrh	r3, [r3, #4]
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d836      	bhi.n	800ba00 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	889b      	ldrh	r3, [r3, #4]
 800b996:	b2db      	uxtb	r3, r3
 800b998:	4619      	mov	r1, r3
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7ff fed9 	bl	800b752 <USBD_CoreFindIF>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9a4:	7bbb      	ldrb	r3, [r7, #14]
 800b9a6:	2bff      	cmp	r3, #255	; 0xff
 800b9a8:	d01d      	beq.n	800b9e6 <USBD_StdItfReq+0x92>
 800b9aa:	7bbb      	ldrb	r3, [r7, #14]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d11a      	bne.n	800b9e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b9b0:	7bba      	ldrb	r2, [r7, #14]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	32ae      	adds	r2, #174	; 0xae
 800b9b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00f      	beq.n	800b9e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b9c0:	7bba      	ldrb	r2, [r7, #14]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b9c8:	7bba      	ldrb	r2, [r7, #14]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	32ae      	adds	r2, #174	; 0xae
 800b9ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	6839      	ldr	r1, [r7, #0]
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	4798      	blx	r3
 800b9da:	4603      	mov	r3, r0
 800b9dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b9de:	e004      	b.n	800b9ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b9e0:	2303      	movs	r3, #3
 800b9e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b9e4:	e001      	b.n	800b9ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b9e6:	2303      	movs	r3, #3
 800b9e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	88db      	ldrh	r3, [r3, #6]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d110      	bne.n	800ba14 <USBD_StdItfReq+0xc0>
 800b9f2:	7bfb      	ldrb	r3, [r7, #15]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d10d      	bne.n	800ba14 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 fdc7 	bl	800c58c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b9fe:	e009      	b.n	800ba14 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ba00:	6839      	ldr	r1, [r7, #0]
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fcf7 	bl	800c3f6 <USBD_CtlError>
          break;
 800ba08:	e004      	b.n	800ba14 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ba0a:	6839      	ldr	r1, [r7, #0]
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 fcf2 	bl	800c3f6 <USBD_CtlError>
          break;
 800ba12:	e000      	b.n	800ba16 <USBD_StdItfReq+0xc2>
          break;
 800ba14:	bf00      	nop
      }
      break;
 800ba16:	e004      	b.n	800ba22 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ba18:	6839      	ldr	r1, [r7, #0]
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 fceb 	bl	800c3f6 <USBD_CtlError>
      break;
 800ba20:	bf00      	nop
  }

  return ret;
 800ba22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	889b      	ldrh	r3, [r3, #4]
 800ba3e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba48:	2b40      	cmp	r3, #64	; 0x40
 800ba4a:	d007      	beq.n	800ba5c <USBD_StdEPReq+0x30>
 800ba4c:	2b40      	cmp	r3, #64	; 0x40
 800ba4e:	f200 817f 	bhi.w	800bd50 <USBD_StdEPReq+0x324>
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d02a      	beq.n	800baac <USBD_StdEPReq+0x80>
 800ba56:	2b20      	cmp	r3, #32
 800ba58:	f040 817a 	bne.w	800bd50 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
 800ba5e:	4619      	mov	r1, r3
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f7ff fe83 	bl	800b76c <USBD_CoreFindEP>
 800ba66:	4603      	mov	r3, r0
 800ba68:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba6a:	7b7b      	ldrb	r3, [r7, #13]
 800ba6c:	2bff      	cmp	r3, #255	; 0xff
 800ba6e:	f000 8174 	beq.w	800bd5a <USBD_StdEPReq+0x32e>
 800ba72:	7b7b      	ldrb	r3, [r7, #13]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	f040 8170 	bne.w	800bd5a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ba7a:	7b7a      	ldrb	r2, [r7, #13]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ba82:	7b7a      	ldrb	r2, [r7, #13]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	32ae      	adds	r2, #174	; 0xae
 800ba88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	f000 8163 	beq.w	800bd5a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ba94:	7b7a      	ldrb	r2, [r7, #13]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	32ae      	adds	r2, #174	; 0xae
 800ba9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	6839      	ldr	r1, [r7, #0]
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	4798      	blx	r3
 800baa6:	4603      	mov	r3, r0
 800baa8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800baaa:	e156      	b.n	800bd5a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	785b      	ldrb	r3, [r3, #1]
 800bab0:	2b03      	cmp	r3, #3
 800bab2:	d008      	beq.n	800bac6 <USBD_StdEPReq+0x9a>
 800bab4:	2b03      	cmp	r3, #3
 800bab6:	f300 8145 	bgt.w	800bd44 <USBD_StdEPReq+0x318>
 800baba:	2b00      	cmp	r3, #0
 800babc:	f000 809b 	beq.w	800bbf6 <USBD_StdEPReq+0x1ca>
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d03c      	beq.n	800bb3e <USBD_StdEPReq+0x112>
 800bac4:	e13e      	b.n	800bd44 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d002      	beq.n	800bad8 <USBD_StdEPReq+0xac>
 800bad2:	2b03      	cmp	r3, #3
 800bad4:	d016      	beq.n	800bb04 <USBD_StdEPReq+0xd8>
 800bad6:	e02c      	b.n	800bb32 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bad8:	7bbb      	ldrb	r3, [r7, #14]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00d      	beq.n	800bafa <USBD_StdEPReq+0xce>
 800bade:	7bbb      	ldrb	r3, [r7, #14]
 800bae0:	2b80      	cmp	r3, #128	; 0x80
 800bae2:	d00a      	beq.n	800bafa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bae4:	7bbb      	ldrb	r3, [r7, #14]
 800bae6:	4619      	mov	r1, r3
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f004 f887 	bl	800fbfc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800baee:	2180      	movs	r1, #128	; 0x80
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f004 f883 	bl	800fbfc <USBD_LL_StallEP>
 800baf6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800baf8:	e020      	b.n	800bb3c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bafa:	6839      	ldr	r1, [r7, #0]
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 fc7a 	bl	800c3f6 <USBD_CtlError>
              break;
 800bb02:	e01b      	b.n	800bb3c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	885b      	ldrh	r3, [r3, #2]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d10e      	bne.n	800bb2a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bb0c:	7bbb      	ldrb	r3, [r7, #14]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00b      	beq.n	800bb2a <USBD_StdEPReq+0xfe>
 800bb12:	7bbb      	ldrb	r3, [r7, #14]
 800bb14:	2b80      	cmp	r3, #128	; 0x80
 800bb16:	d008      	beq.n	800bb2a <USBD_StdEPReq+0xfe>
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	88db      	ldrh	r3, [r3, #6]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d104      	bne.n	800bb2a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb20:	7bbb      	ldrb	r3, [r7, #14]
 800bb22:	4619      	mov	r1, r3
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f004 f869 	bl	800fbfc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 fd2e 	bl	800c58c <USBD_CtlSendStatus>

              break;
 800bb30:	e004      	b.n	800bb3c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bb32:	6839      	ldr	r1, [r7, #0]
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f000 fc5e 	bl	800c3f6 <USBD_CtlError>
              break;
 800bb3a:	bf00      	nop
          }
          break;
 800bb3c:	e107      	b.n	800bd4e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	2b02      	cmp	r3, #2
 800bb48:	d002      	beq.n	800bb50 <USBD_StdEPReq+0x124>
 800bb4a:	2b03      	cmp	r3, #3
 800bb4c:	d016      	beq.n	800bb7c <USBD_StdEPReq+0x150>
 800bb4e:	e04b      	b.n	800bbe8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb50:	7bbb      	ldrb	r3, [r7, #14]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00d      	beq.n	800bb72 <USBD_StdEPReq+0x146>
 800bb56:	7bbb      	ldrb	r3, [r7, #14]
 800bb58:	2b80      	cmp	r3, #128	; 0x80
 800bb5a:	d00a      	beq.n	800bb72 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb5c:	7bbb      	ldrb	r3, [r7, #14]
 800bb5e:	4619      	mov	r1, r3
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f004 f84b 	bl	800fbfc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb66:	2180      	movs	r1, #128	; 0x80
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f004 f847 	bl	800fbfc <USBD_LL_StallEP>
 800bb6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb70:	e040      	b.n	800bbf4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bb72:	6839      	ldr	r1, [r7, #0]
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 fc3e 	bl	800c3f6 <USBD_CtlError>
              break;
 800bb7a:	e03b      	b.n	800bbf4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	885b      	ldrh	r3, [r3, #2]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d136      	bne.n	800bbf2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bb84:	7bbb      	ldrb	r3, [r7, #14]
 800bb86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d004      	beq.n	800bb98 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bb8e:	7bbb      	ldrb	r3, [r7, #14]
 800bb90:	4619      	mov	r1, r3
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f004 f851 	bl	800fc3a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 fcf7 	bl	800c58c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bb9e:	7bbb      	ldrb	r3, [r7, #14]
 800bba0:	4619      	mov	r1, r3
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f7ff fde2 	bl	800b76c <USBD_CoreFindEP>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bbac:	7b7b      	ldrb	r3, [r7, #13]
 800bbae:	2bff      	cmp	r3, #255	; 0xff
 800bbb0:	d01f      	beq.n	800bbf2 <USBD_StdEPReq+0x1c6>
 800bbb2:	7b7b      	ldrb	r3, [r7, #13]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d11c      	bne.n	800bbf2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bbb8:	7b7a      	ldrb	r2, [r7, #13]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bbc0:	7b7a      	ldrb	r2, [r7, #13]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	32ae      	adds	r2, #174	; 0xae
 800bbc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d010      	beq.n	800bbf2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bbd0:	7b7a      	ldrb	r2, [r7, #13]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	32ae      	adds	r2, #174	; 0xae
 800bbd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	6839      	ldr	r1, [r7, #0]
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	4798      	blx	r3
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bbe6:	e004      	b.n	800bbf2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bbe8:	6839      	ldr	r1, [r7, #0]
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 fc03 	bl	800c3f6 <USBD_CtlError>
              break;
 800bbf0:	e000      	b.n	800bbf4 <USBD_StdEPReq+0x1c8>
              break;
 800bbf2:	bf00      	nop
          }
          break;
 800bbf4:	e0ab      	b.n	800bd4e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d002      	beq.n	800bc08 <USBD_StdEPReq+0x1dc>
 800bc02:	2b03      	cmp	r3, #3
 800bc04:	d032      	beq.n	800bc6c <USBD_StdEPReq+0x240>
 800bc06:	e097      	b.n	800bd38 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc08:	7bbb      	ldrb	r3, [r7, #14]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d007      	beq.n	800bc1e <USBD_StdEPReq+0x1f2>
 800bc0e:	7bbb      	ldrb	r3, [r7, #14]
 800bc10:	2b80      	cmp	r3, #128	; 0x80
 800bc12:	d004      	beq.n	800bc1e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 fbed 	bl	800c3f6 <USBD_CtlError>
                break;
 800bc1c:	e091      	b.n	800bd42 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	da0b      	bge.n	800bc3e <USBD_StdEPReq+0x212>
 800bc26:	7bbb      	ldrb	r3, [r7, #14]
 800bc28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	4413      	add	r3, r2
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	3310      	adds	r3, #16
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	4413      	add	r3, r2
 800bc3a:	3304      	adds	r3, #4
 800bc3c:	e00b      	b.n	800bc56 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc3e:	7bbb      	ldrb	r3, [r7, #14]
 800bc40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc44:	4613      	mov	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	4413      	add	r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	4413      	add	r3, r2
 800bc54:	3304      	adds	r3, #4
 800bc56:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	2202      	movs	r2, #2
 800bc62:	4619      	mov	r1, r3
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 fc37 	bl	800c4d8 <USBD_CtlSendData>
              break;
 800bc6a:	e06a      	b.n	800bd42 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bc6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	da11      	bge.n	800bc98 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc74:	7bbb      	ldrb	r3, [r7, #14]
 800bc76:	f003 020f 	and.w	r2, r3, #15
 800bc7a:	6879      	ldr	r1, [r7, #4]
 800bc7c:	4613      	mov	r3, r2
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	4413      	add	r3, r2
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	440b      	add	r3, r1
 800bc86:	3324      	adds	r3, #36	; 0x24
 800bc88:	881b      	ldrh	r3, [r3, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d117      	bne.n	800bcbe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc8e:	6839      	ldr	r1, [r7, #0]
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 fbb0 	bl	800c3f6 <USBD_CtlError>
                  break;
 800bc96:	e054      	b.n	800bd42 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bc98:	7bbb      	ldrb	r3, [r7, #14]
 800bc9a:	f003 020f 	and.w	r2, r3, #15
 800bc9e:	6879      	ldr	r1, [r7, #4]
 800bca0:	4613      	mov	r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	4413      	add	r3, r2
 800bca6:	009b      	lsls	r3, r3, #2
 800bca8:	440b      	add	r3, r1
 800bcaa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bcae:	881b      	ldrh	r3, [r3, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d104      	bne.n	800bcbe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bcb4:	6839      	ldr	r1, [r7, #0]
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 fb9d 	bl	800c3f6 <USBD_CtlError>
                  break;
 800bcbc:	e041      	b.n	800bd42 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	da0b      	bge.n	800bcde <USBD_StdEPReq+0x2b2>
 800bcc6:	7bbb      	ldrb	r3, [r7, #14]
 800bcc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bccc:	4613      	mov	r3, r2
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	4413      	add	r3, r2
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	3310      	adds	r3, #16
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	4413      	add	r3, r2
 800bcda:	3304      	adds	r3, #4
 800bcdc:	e00b      	b.n	800bcf6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bcde:	7bbb      	ldrb	r3, [r7, #14]
 800bce0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bce4:	4613      	mov	r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	4413      	add	r3, r2
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	3304      	adds	r3, #4
 800bcf6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bcf8:	7bbb      	ldrb	r3, [r7, #14]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d002      	beq.n	800bd04 <USBD_StdEPReq+0x2d8>
 800bcfe:	7bbb      	ldrb	r3, [r7, #14]
 800bd00:	2b80      	cmp	r3, #128	; 0x80
 800bd02:	d103      	bne.n	800bd0c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	2200      	movs	r2, #0
 800bd08:	601a      	str	r2, [r3, #0]
 800bd0a:	e00e      	b.n	800bd2a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bd0c:	7bbb      	ldrb	r3, [r7, #14]
 800bd0e:	4619      	mov	r1, r3
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f003 ffb1 	bl	800fc78 <USBD_LL_IsStallEP>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d003      	beq.n	800bd24 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	601a      	str	r2, [r3, #0]
 800bd22:	e002      	b.n	800bd2a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	2200      	movs	r2, #0
 800bd28:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	2202      	movs	r2, #2
 800bd2e:	4619      	mov	r1, r3
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 fbd1 	bl	800c4d8 <USBD_CtlSendData>
              break;
 800bd36:	e004      	b.n	800bd42 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bd38:	6839      	ldr	r1, [r7, #0]
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 fb5b 	bl	800c3f6 <USBD_CtlError>
              break;
 800bd40:	bf00      	nop
          }
          break;
 800bd42:	e004      	b.n	800bd4e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bd44:	6839      	ldr	r1, [r7, #0]
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 fb55 	bl	800c3f6 <USBD_CtlError>
          break;
 800bd4c:	bf00      	nop
      }
      break;
 800bd4e:	e005      	b.n	800bd5c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bd50:	6839      	ldr	r1, [r7, #0]
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 fb4f 	bl	800c3f6 <USBD_CtlError>
      break;
 800bd58:	e000      	b.n	800bd5c <USBD_StdEPReq+0x330>
      break;
 800bd5a:	bf00      	nop
  }

  return ret;
 800bd5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
	...

0800bd68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd72:	2300      	movs	r3, #0
 800bd74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bd76:	2300      	movs	r3, #0
 800bd78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	885b      	ldrh	r3, [r3, #2]
 800bd82:	0a1b      	lsrs	r3, r3, #8
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	3b01      	subs	r3, #1
 800bd88:	2b06      	cmp	r3, #6
 800bd8a:	f200 8128 	bhi.w	800bfde <USBD_GetDescriptor+0x276>
 800bd8e:	a201      	add	r2, pc, #4	; (adr r2, 800bd94 <USBD_GetDescriptor+0x2c>)
 800bd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd94:	0800bdb1 	.word	0x0800bdb1
 800bd98:	0800bdc9 	.word	0x0800bdc9
 800bd9c:	0800be09 	.word	0x0800be09
 800bda0:	0800bfdf 	.word	0x0800bfdf
 800bda4:	0800bfdf 	.word	0x0800bfdf
 800bda8:	0800bf7f 	.word	0x0800bf7f
 800bdac:	0800bfab 	.word	0x0800bfab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	7c12      	ldrb	r2, [r2, #16]
 800bdbc:	f107 0108 	add.w	r1, r7, #8
 800bdc0:	4610      	mov	r0, r2
 800bdc2:	4798      	blx	r3
 800bdc4:	60f8      	str	r0, [r7, #12]
      break;
 800bdc6:	e112      	b.n	800bfee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	7c1b      	ldrb	r3, [r3, #16]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d10d      	bne.n	800bdec <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdd8:	f107 0208 	add.w	r2, r7, #8
 800bddc:	4610      	mov	r0, r2
 800bdde:	4798      	blx	r3
 800bde0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	3301      	adds	r3, #1
 800bde6:	2202      	movs	r2, #2
 800bde8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bdea:	e100      	b.n	800bfee <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf4:	f107 0208 	add.w	r2, r7, #8
 800bdf8:	4610      	mov	r0, r2
 800bdfa:	4798      	blx	r3
 800bdfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	3301      	adds	r3, #1
 800be02:	2202      	movs	r2, #2
 800be04:	701a      	strb	r2, [r3, #0]
      break;
 800be06:	e0f2      	b.n	800bfee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	885b      	ldrh	r3, [r3, #2]
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	2b05      	cmp	r3, #5
 800be10:	f200 80ac 	bhi.w	800bf6c <USBD_GetDescriptor+0x204>
 800be14:	a201      	add	r2, pc, #4	; (adr r2, 800be1c <USBD_GetDescriptor+0xb4>)
 800be16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be1a:	bf00      	nop
 800be1c:	0800be35 	.word	0x0800be35
 800be20:	0800be69 	.word	0x0800be69
 800be24:	0800be9d 	.word	0x0800be9d
 800be28:	0800bed1 	.word	0x0800bed1
 800be2c:	0800bf05 	.word	0x0800bf05
 800be30:	0800bf39 	.word	0x0800bf39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d00b      	beq.n	800be58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	7c12      	ldrb	r2, [r2, #16]
 800be4c:	f107 0108 	add.w	r1, r7, #8
 800be50:	4610      	mov	r0, r2
 800be52:	4798      	blx	r3
 800be54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be56:	e091      	b.n	800bf7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be58:	6839      	ldr	r1, [r7, #0]
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 facb 	bl	800c3f6 <USBD_CtlError>
            err++;
 800be60:	7afb      	ldrb	r3, [r7, #11]
 800be62:	3301      	adds	r3, #1
 800be64:	72fb      	strb	r3, [r7, #11]
          break;
 800be66:	e089      	b.n	800bf7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d00b      	beq.n	800be8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	7c12      	ldrb	r2, [r2, #16]
 800be80:	f107 0108 	add.w	r1, r7, #8
 800be84:	4610      	mov	r0, r2
 800be86:	4798      	blx	r3
 800be88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be8a:	e077      	b.n	800bf7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be8c:	6839      	ldr	r1, [r7, #0]
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 fab1 	bl	800c3f6 <USBD_CtlError>
            err++;
 800be94:	7afb      	ldrb	r3, [r7, #11]
 800be96:	3301      	adds	r3, #1
 800be98:	72fb      	strb	r3, [r7, #11]
          break;
 800be9a:	e06f      	b.n	800bf7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00b      	beq.n	800bec0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	7c12      	ldrb	r2, [r2, #16]
 800beb4:	f107 0108 	add.w	r1, r7, #8
 800beb8:	4610      	mov	r0, r2
 800beba:	4798      	blx	r3
 800bebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bebe:	e05d      	b.n	800bf7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bec0:	6839      	ldr	r1, [r7, #0]
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fa97 	bl	800c3f6 <USBD_CtlError>
            err++;
 800bec8:	7afb      	ldrb	r3, [r7, #11]
 800beca:	3301      	adds	r3, #1
 800becc:	72fb      	strb	r3, [r7, #11]
          break;
 800bece:	e055      	b.n	800bf7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bed6:	691b      	ldr	r3, [r3, #16]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d00b      	beq.n	800bef4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bee2:	691b      	ldr	r3, [r3, #16]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	7c12      	ldrb	r2, [r2, #16]
 800bee8:	f107 0108 	add.w	r1, r7, #8
 800beec:	4610      	mov	r0, r2
 800beee:	4798      	blx	r3
 800bef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bef2:	e043      	b.n	800bf7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fa7d 	bl	800c3f6 <USBD_CtlError>
            err++;
 800befc:	7afb      	ldrb	r3, [r7, #11]
 800befe:	3301      	adds	r3, #1
 800bf00:	72fb      	strb	r3, [r7, #11]
          break;
 800bf02:	e03b      	b.n	800bf7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf0a:	695b      	ldr	r3, [r3, #20]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d00b      	beq.n	800bf28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf16:	695b      	ldr	r3, [r3, #20]
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	7c12      	ldrb	r2, [r2, #16]
 800bf1c:	f107 0108 	add.w	r1, r7, #8
 800bf20:	4610      	mov	r0, r2
 800bf22:	4798      	blx	r3
 800bf24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf26:	e029      	b.n	800bf7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf28:	6839      	ldr	r1, [r7, #0]
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 fa63 	bl	800c3f6 <USBD_CtlError>
            err++;
 800bf30:	7afb      	ldrb	r3, [r7, #11]
 800bf32:	3301      	adds	r3, #1
 800bf34:	72fb      	strb	r3, [r7, #11]
          break;
 800bf36:	e021      	b.n	800bf7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf3e:	699b      	ldr	r3, [r3, #24]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00b      	beq.n	800bf5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf4a:	699b      	ldr	r3, [r3, #24]
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	7c12      	ldrb	r2, [r2, #16]
 800bf50:	f107 0108 	add.w	r1, r7, #8
 800bf54:	4610      	mov	r0, r2
 800bf56:	4798      	blx	r3
 800bf58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf5a:	e00f      	b.n	800bf7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf5c:	6839      	ldr	r1, [r7, #0]
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 fa49 	bl	800c3f6 <USBD_CtlError>
            err++;
 800bf64:	7afb      	ldrb	r3, [r7, #11]
 800bf66:	3301      	adds	r3, #1
 800bf68:	72fb      	strb	r3, [r7, #11]
          break;
 800bf6a:	e007      	b.n	800bf7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bf6c:	6839      	ldr	r1, [r7, #0]
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 fa41 	bl	800c3f6 <USBD_CtlError>
          err++;
 800bf74:	7afb      	ldrb	r3, [r7, #11]
 800bf76:	3301      	adds	r3, #1
 800bf78:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bf7a:	bf00      	nop
      }
      break;
 800bf7c:	e037      	b.n	800bfee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	7c1b      	ldrb	r3, [r3, #16]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d109      	bne.n	800bf9a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf8e:	f107 0208 	add.w	r2, r7, #8
 800bf92:	4610      	mov	r0, r2
 800bf94:	4798      	blx	r3
 800bf96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf98:	e029      	b.n	800bfee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bf9a:	6839      	ldr	r1, [r7, #0]
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f000 fa2a 	bl	800c3f6 <USBD_CtlError>
        err++;
 800bfa2:	7afb      	ldrb	r3, [r7, #11]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	72fb      	strb	r3, [r7, #11]
      break;
 800bfa8:	e021      	b.n	800bfee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	7c1b      	ldrb	r3, [r3, #16]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d10d      	bne.n	800bfce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfba:	f107 0208 	add.w	r2, r7, #8
 800bfbe:	4610      	mov	r0, r2
 800bfc0:	4798      	blx	r3
 800bfc2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	2207      	movs	r2, #7
 800bfca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfcc:	e00f      	b.n	800bfee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bfce:	6839      	ldr	r1, [r7, #0]
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 fa10 	bl	800c3f6 <USBD_CtlError>
        err++;
 800bfd6:	7afb      	ldrb	r3, [r7, #11]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	72fb      	strb	r3, [r7, #11]
      break;
 800bfdc:	e007      	b.n	800bfee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bfde:	6839      	ldr	r1, [r7, #0]
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 fa08 	bl	800c3f6 <USBD_CtlError>
      err++;
 800bfe6:	7afb      	ldrb	r3, [r7, #11]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	72fb      	strb	r3, [r7, #11]
      break;
 800bfec:	bf00      	nop
  }

  if (err != 0U)
 800bfee:	7afb      	ldrb	r3, [r7, #11]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d11e      	bne.n	800c032 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	88db      	ldrh	r3, [r3, #6]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d016      	beq.n	800c02a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bffc:	893b      	ldrh	r3, [r7, #8]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d00e      	beq.n	800c020 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	88da      	ldrh	r2, [r3, #6]
 800c006:	893b      	ldrh	r3, [r7, #8]
 800c008:	4293      	cmp	r3, r2
 800c00a:	bf28      	it	cs
 800c00c:	4613      	movcs	r3, r2
 800c00e:	b29b      	uxth	r3, r3
 800c010:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c012:	893b      	ldrh	r3, [r7, #8]
 800c014:	461a      	mov	r2, r3
 800c016:	68f9      	ldr	r1, [r7, #12]
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 fa5d 	bl	800c4d8 <USBD_CtlSendData>
 800c01e:	e009      	b.n	800c034 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c020:	6839      	ldr	r1, [r7, #0]
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 f9e7 	bl	800c3f6 <USBD_CtlError>
 800c028:	e004      	b.n	800c034 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 faae 	bl	800c58c <USBD_CtlSendStatus>
 800c030:	e000      	b.n	800c034 <USBD_GetDescriptor+0x2cc>
    return;
 800c032:	bf00      	nop
  }
}
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop

0800c03c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	889b      	ldrh	r3, [r3, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d131      	bne.n	800c0b2 <USBD_SetAddress+0x76>
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	88db      	ldrh	r3, [r3, #6]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d12d      	bne.n	800c0b2 <USBD_SetAddress+0x76>
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	885b      	ldrh	r3, [r3, #2]
 800c05a:	2b7f      	cmp	r3, #127	; 0x7f
 800c05c:	d829      	bhi.n	800c0b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	885b      	ldrh	r3, [r3, #2]
 800c062:	b2db      	uxtb	r3, r3
 800c064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c068:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c070:	b2db      	uxtb	r3, r3
 800c072:	2b03      	cmp	r3, #3
 800c074:	d104      	bne.n	800c080 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c076:	6839      	ldr	r1, [r7, #0]
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 f9bc 	bl	800c3f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c07e:	e01d      	b.n	800c0bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	7bfa      	ldrb	r2, [r7, #15]
 800c084:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c088:	7bfb      	ldrb	r3, [r7, #15]
 800c08a:	4619      	mov	r1, r3
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f003 fe1f 	bl	800fcd0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 fa7a 	bl	800c58c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c098:	7bfb      	ldrb	r3, [r7, #15]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d004      	beq.n	800c0a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2202      	movs	r2, #2
 800c0a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0a6:	e009      	b.n	800c0bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0b0:	e004      	b.n	800c0bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c0b2:	6839      	ldr	r1, [r7, #0]
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 f99e 	bl	800c3f6 <USBD_CtlError>
  }
}
 800c0ba:	bf00      	nop
 800c0bc:	bf00      	nop
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	885b      	ldrh	r3, [r3, #2]
 800c0d6:	b2da      	uxtb	r2, r3
 800c0d8:	4b4e      	ldr	r3, [pc, #312]	; (800c214 <USBD_SetConfig+0x150>)
 800c0da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c0dc:	4b4d      	ldr	r3, [pc, #308]	; (800c214 <USBD_SetConfig+0x150>)
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d905      	bls.n	800c0f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c0e4:	6839      	ldr	r1, [r7, #0]
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 f985 	bl	800c3f6 <USBD_CtlError>
    return USBD_FAIL;
 800c0ec:	2303      	movs	r3, #3
 800c0ee:	e08c      	b.n	800c20a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	2b02      	cmp	r3, #2
 800c0fa:	d002      	beq.n	800c102 <USBD_SetConfig+0x3e>
 800c0fc:	2b03      	cmp	r3, #3
 800c0fe:	d029      	beq.n	800c154 <USBD_SetConfig+0x90>
 800c100:	e075      	b.n	800c1ee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c102:	4b44      	ldr	r3, [pc, #272]	; (800c214 <USBD_SetConfig+0x150>)
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d020      	beq.n	800c14c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c10a:	4b42      	ldr	r3, [pc, #264]	; (800c214 <USBD_SetConfig+0x150>)
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	461a      	mov	r2, r3
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c114:	4b3f      	ldr	r3, [pc, #252]	; (800c214 <USBD_SetConfig+0x150>)
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	4619      	mov	r1, r3
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f7fe ffe7 	bl	800b0ee <USBD_SetClassConfig>
 800c120:	4603      	mov	r3, r0
 800c122:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c124:	7bfb      	ldrb	r3, [r7, #15]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d008      	beq.n	800c13c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c12a:	6839      	ldr	r1, [r7, #0]
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 f962 	bl	800c3f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2202      	movs	r2, #2
 800c136:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c13a:	e065      	b.n	800c208 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 fa25 	bl	800c58c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2203      	movs	r2, #3
 800c146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c14a:	e05d      	b.n	800c208 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 fa1d 	bl	800c58c <USBD_CtlSendStatus>
      break;
 800c152:	e059      	b.n	800c208 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c154:	4b2f      	ldr	r3, [pc, #188]	; (800c214 <USBD_SetConfig+0x150>)
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d112      	bne.n	800c182 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2202      	movs	r2, #2
 800c160:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c164:	4b2b      	ldr	r3, [pc, #172]	; (800c214 <USBD_SetConfig+0x150>)
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	461a      	mov	r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c16e:	4b29      	ldr	r3, [pc, #164]	; (800c214 <USBD_SetConfig+0x150>)
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	4619      	mov	r1, r3
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f7fe ffd6 	bl	800b126 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fa06 	bl	800c58c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c180:	e042      	b.n	800c208 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c182:	4b24      	ldr	r3, [pc, #144]	; (800c214 <USBD_SetConfig+0x150>)
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	461a      	mov	r2, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d02a      	beq.n	800c1e6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	b2db      	uxtb	r3, r3
 800c196:	4619      	mov	r1, r3
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f7fe ffc4 	bl	800b126 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c19e:	4b1d      	ldr	r3, [pc, #116]	; (800c214 <USBD_SetConfig+0x150>)
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1a8:	4b1a      	ldr	r3, [pc, #104]	; (800c214 <USBD_SetConfig+0x150>)
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f7fe ff9d 	bl	800b0ee <USBD_SetClassConfig>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c1b8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00f      	beq.n	800c1de <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c1be:	6839      	ldr	r1, [r7, #0]
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 f918 	bl	800c3f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f7fe ffa9 	bl	800b126 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2202      	movs	r2, #2
 800c1d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c1dc:	e014      	b.n	800c208 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 f9d4 	bl	800c58c <USBD_CtlSendStatus>
      break;
 800c1e4:	e010      	b.n	800c208 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 f9d0 	bl	800c58c <USBD_CtlSendStatus>
      break;
 800c1ec:	e00c      	b.n	800c208 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c1ee:	6839      	ldr	r1, [r7, #0]
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 f900 	bl	800c3f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c1f6:	4b07      	ldr	r3, [pc, #28]	; (800c214 <USBD_SetConfig+0x150>)
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f7fe ff92 	bl	800b126 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c202:	2303      	movs	r3, #3
 800c204:	73fb      	strb	r3, [r7, #15]
      break;
 800c206:	bf00      	nop
  }

  return ret;
 800c208:	7bfb      	ldrb	r3, [r7, #15]
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3710      	adds	r7, #16
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	20000934 	.word	0x20000934

0800c218 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	88db      	ldrh	r3, [r3, #6]
 800c226:	2b01      	cmp	r3, #1
 800c228:	d004      	beq.n	800c234 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c22a:	6839      	ldr	r1, [r7, #0]
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f8e2 	bl	800c3f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c232:	e023      	b.n	800c27c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	2b02      	cmp	r3, #2
 800c23e:	dc02      	bgt.n	800c246 <USBD_GetConfig+0x2e>
 800c240:	2b00      	cmp	r3, #0
 800c242:	dc03      	bgt.n	800c24c <USBD_GetConfig+0x34>
 800c244:	e015      	b.n	800c272 <USBD_GetConfig+0x5a>
 800c246:	2b03      	cmp	r3, #3
 800c248:	d00b      	beq.n	800c262 <USBD_GetConfig+0x4a>
 800c24a:	e012      	b.n	800c272 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	3308      	adds	r3, #8
 800c256:	2201      	movs	r2, #1
 800c258:	4619      	mov	r1, r3
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f000 f93c 	bl	800c4d8 <USBD_CtlSendData>
        break;
 800c260:	e00c      	b.n	800c27c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	3304      	adds	r3, #4
 800c266:	2201      	movs	r2, #1
 800c268:	4619      	mov	r1, r3
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 f934 	bl	800c4d8 <USBD_CtlSendData>
        break;
 800c270:	e004      	b.n	800c27c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c272:	6839      	ldr	r1, [r7, #0]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 f8be 	bl	800c3f6 <USBD_CtlError>
        break;
 800c27a:	bf00      	nop
}
 800c27c:	bf00      	nop
 800c27e:	3708      	adds	r7, #8
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c294:	b2db      	uxtb	r3, r3
 800c296:	3b01      	subs	r3, #1
 800c298:	2b02      	cmp	r3, #2
 800c29a:	d81e      	bhi.n	800c2da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	88db      	ldrh	r3, [r3, #6]
 800c2a0:	2b02      	cmp	r3, #2
 800c2a2:	d004      	beq.n	800c2ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c2a4:	6839      	ldr	r1, [r7, #0]
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 f8a5 	bl	800c3f6 <USBD_CtlError>
        break;
 800c2ac:	e01a      	b.n	800c2e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d005      	beq.n	800c2ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	f043 0202 	orr.w	r2, r3, #2
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	330c      	adds	r3, #12
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 f900 	bl	800c4d8 <USBD_CtlSendData>
      break;
 800c2d8:	e004      	b.n	800c2e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c2da:	6839      	ldr	r1, [r7, #0]
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 f88a 	bl	800c3f6 <USBD_CtlError>
      break;
 800c2e2:	bf00      	nop
  }
}
 800c2e4:	bf00      	nop
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	885b      	ldrh	r3, [r3, #2]
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d107      	bne.n	800c30e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2201      	movs	r2, #1
 800c302:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 f940 	bl	800c58c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c30c:	e013      	b.n	800c336 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	885b      	ldrh	r3, [r3, #2]
 800c312:	2b02      	cmp	r3, #2
 800c314:	d10b      	bne.n	800c32e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	889b      	ldrh	r3, [r3, #4]
 800c31a:	0a1b      	lsrs	r3, r3, #8
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	b2da      	uxtb	r2, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f930 	bl	800c58c <USBD_CtlSendStatus>
}
 800c32c:	e003      	b.n	800c336 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c32e:	6839      	ldr	r1, [r7, #0]
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 f860 	bl	800c3f6 <USBD_CtlError>
}
 800c336:	bf00      	nop
 800c338:	3708      	adds	r7, #8
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c33e:	b580      	push	{r7, lr}
 800c340:	b082      	sub	sp, #8
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
 800c346:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	3b01      	subs	r3, #1
 800c352:	2b02      	cmp	r3, #2
 800c354:	d80b      	bhi.n	800c36e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	885b      	ldrh	r3, [r3, #2]
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d10c      	bne.n	800c378 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f000 f910 	bl	800c58c <USBD_CtlSendStatus>
      }
      break;
 800c36c:	e004      	b.n	800c378 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c36e:	6839      	ldr	r1, [r7, #0]
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 f840 	bl	800c3f6 <USBD_CtlError>
      break;
 800c376:	e000      	b.n	800c37a <USBD_ClrFeature+0x3c>
      break;
 800c378:	bf00      	nop
  }
}
 800c37a:	bf00      	nop
 800c37c:	3708      	adds	r7, #8
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c382:	b580      	push	{r7, lr}
 800c384:	b084      	sub	sp, #16
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
 800c38a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	781a      	ldrb	r2, [r3, #0]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	3301      	adds	r3, #1
 800c39c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	781a      	ldrb	r2, [r3, #0]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	f7ff fa41 	bl	800b834 <SWAPBYTE>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	3301      	adds	r3, #1
 800c3be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f7ff fa34 	bl	800b834 <SWAPBYTE>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c3e0:	68f8      	ldr	r0, [r7, #12]
 800c3e2:	f7ff fa27 	bl	800b834 <SWAPBYTE>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	80da      	strh	r2, [r3, #6]
}
 800c3ee:	bf00      	nop
 800c3f0:	3710      	adds	r7, #16
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b082      	sub	sp, #8
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
 800c3fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c400:	2180      	movs	r1, #128	; 0x80
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f003 fbfa 	bl	800fbfc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c408:	2100      	movs	r1, #0
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f003 fbf6 	bl	800fbfc <USBD_LL_StallEP>
}
 800c410:	bf00      	nop
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b086      	sub	sp, #24
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c424:	2300      	movs	r3, #0
 800c426:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d036      	beq.n	800c49c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c432:	6938      	ldr	r0, [r7, #16]
 800c434:	f000 f836 	bl	800c4a4 <USBD_GetLen>
 800c438:	4603      	mov	r3, r0
 800c43a:	3301      	adds	r3, #1
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	005b      	lsls	r3, r3, #1
 800c440:	b29a      	uxth	r2, r3
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c446:	7dfb      	ldrb	r3, [r7, #23]
 800c448:	68ba      	ldr	r2, [r7, #8]
 800c44a:	4413      	add	r3, r2
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	7812      	ldrb	r2, [r2, #0]
 800c450:	701a      	strb	r2, [r3, #0]
  idx++;
 800c452:	7dfb      	ldrb	r3, [r7, #23]
 800c454:	3301      	adds	r3, #1
 800c456:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c458:	7dfb      	ldrb	r3, [r7, #23]
 800c45a:	68ba      	ldr	r2, [r7, #8]
 800c45c:	4413      	add	r3, r2
 800c45e:	2203      	movs	r2, #3
 800c460:	701a      	strb	r2, [r3, #0]
  idx++;
 800c462:	7dfb      	ldrb	r3, [r7, #23]
 800c464:	3301      	adds	r3, #1
 800c466:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c468:	e013      	b.n	800c492 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c46a:	7dfb      	ldrb	r3, [r7, #23]
 800c46c:	68ba      	ldr	r2, [r7, #8]
 800c46e:	4413      	add	r3, r2
 800c470:	693a      	ldr	r2, [r7, #16]
 800c472:	7812      	ldrb	r2, [r2, #0]
 800c474:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	3301      	adds	r3, #1
 800c47a:	613b      	str	r3, [r7, #16]
    idx++;
 800c47c:	7dfb      	ldrb	r3, [r7, #23]
 800c47e:	3301      	adds	r3, #1
 800c480:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c482:	7dfb      	ldrb	r3, [r7, #23]
 800c484:	68ba      	ldr	r2, [r7, #8]
 800c486:	4413      	add	r3, r2
 800c488:	2200      	movs	r2, #0
 800c48a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c48c:	7dfb      	ldrb	r3, [r7, #23]
 800c48e:	3301      	adds	r3, #1
 800c490:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1e7      	bne.n	800c46a <USBD_GetString+0x52>
 800c49a:	e000      	b.n	800c49e <USBD_GetString+0x86>
    return;
 800c49c:	bf00      	nop
  }
}
 800c49e:	3718      	adds	r7, #24
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c4b4:	e005      	b.n	800c4c2 <USBD_GetLen+0x1e>
  {
    len++;
 800c4b6:	7bfb      	ldrb	r3, [r7, #15]
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d1f5      	bne.n	800c4b6 <USBD_GetLen+0x12>
  }

  return len;
 800c4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2202      	movs	r2, #2
 800c4e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f003 fc05 	bl	800fd0e <USBD_LL_Transmit>

  return USBD_OK;
 800c504:	2300      	movs	r3, #0
}
 800c506:	4618      	mov	r0, r3
 800c508:	3710      	adds	r7, #16
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c50e:	b580      	push	{r7, lr}
 800c510:	b084      	sub	sp, #16
 800c512:	af00      	add	r7, sp, #0
 800c514:	60f8      	str	r0, [r7, #12]
 800c516:	60b9      	str	r1, [r7, #8]
 800c518:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	68ba      	ldr	r2, [r7, #8]
 800c51e:	2100      	movs	r1, #0
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f003 fbf4 	bl	800fd0e <USBD_LL_Transmit>

  return USBD_OK;
 800c526:	2300      	movs	r3, #0
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3710      	adds	r7, #16
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2203      	movs	r2, #3
 800c540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	68ba      	ldr	r2, [r7, #8]
 800c558:	2100      	movs	r1, #0
 800c55a:	68f8      	ldr	r0, [r7, #12]
 800c55c:	f003 fbf8 	bl	800fd50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c560:	2300      	movs	r3, #0
}
 800c562:	4618      	mov	r0, r3
 800c564:	3710      	adds	r7, #16
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b084      	sub	sp, #16
 800c56e:	af00      	add	r7, sp, #0
 800c570:	60f8      	str	r0, [r7, #12]
 800c572:	60b9      	str	r1, [r7, #8]
 800c574:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	68ba      	ldr	r2, [r7, #8]
 800c57a:	2100      	movs	r1, #0
 800c57c:	68f8      	ldr	r0, [r7, #12]
 800c57e:	f003 fbe7 	bl	800fd50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c582:	2300      	movs	r3, #0
}
 800c584:	4618      	mov	r0, r3
 800c586:	3710      	adds	r7, #16
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2204      	movs	r2, #4
 800c598:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c59c:	2300      	movs	r3, #0
 800c59e:	2200      	movs	r2, #0
 800c5a0:	2100      	movs	r1, #0
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f003 fbb3 	bl	800fd0e <USBD_LL_Transmit>

  return USBD_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3708      	adds	r7, #8
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c5b2:	b580      	push	{r7, lr}
 800c5b4:	b082      	sub	sp, #8
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2205      	movs	r2, #5
 800c5be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f003 fbc1 	bl	800fd50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <__NVIC_SetPriority>:
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	4603      	mov	r3, r0
 800c5e0:	6039      	str	r1, [r7, #0]
 800c5e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c5e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	db0a      	blt.n	800c602 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	b2da      	uxtb	r2, r3
 800c5f0:	490c      	ldr	r1, [pc, #48]	; (800c624 <__NVIC_SetPriority+0x4c>)
 800c5f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5f6:	0112      	lsls	r2, r2, #4
 800c5f8:	b2d2      	uxtb	r2, r2
 800c5fa:	440b      	add	r3, r1
 800c5fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c600:	e00a      	b.n	800c618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	b2da      	uxtb	r2, r3
 800c606:	4908      	ldr	r1, [pc, #32]	; (800c628 <__NVIC_SetPriority+0x50>)
 800c608:	79fb      	ldrb	r3, [r7, #7]
 800c60a:	f003 030f 	and.w	r3, r3, #15
 800c60e:	3b04      	subs	r3, #4
 800c610:	0112      	lsls	r2, r2, #4
 800c612:	b2d2      	uxtb	r2, r2
 800c614:	440b      	add	r3, r1
 800c616:	761a      	strb	r2, [r3, #24]
}
 800c618:	bf00      	nop
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr
 800c624:	e000e100 	.word	0xe000e100
 800c628:	e000ed00 	.word	0xe000ed00

0800c62c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c62c:	b580      	push	{r7, lr}
 800c62e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c630:	4b05      	ldr	r3, [pc, #20]	; (800c648 <SysTick_Handler+0x1c>)
 800c632:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c634:	f001 feb2 	bl	800e39c <xTaskGetSchedulerState>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d001      	beq.n	800c642 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c63e:	f002 fc9b 	bl	800ef78 <xPortSysTickHandler>
  }
}
 800c642:	bf00      	nop
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	e000e010 	.word	0xe000e010

0800c64c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c64c:	b580      	push	{r7, lr}
 800c64e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c650:	2100      	movs	r1, #0
 800c652:	f06f 0004 	mvn.w	r0, #4
 800c656:	f7ff ffbf 	bl	800c5d8 <__NVIC_SetPriority>
#endif
}
 800c65a:	bf00      	nop
 800c65c:	bd80      	pop	{r7, pc}
	...

0800c660 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c660:	b480      	push	{r7}
 800c662:	b083      	sub	sp, #12
 800c664:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c666:	f3ef 8305 	mrs	r3, IPSR
 800c66a:	603b      	str	r3, [r7, #0]
  return(result);
 800c66c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d003      	beq.n	800c67a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c672:	f06f 0305 	mvn.w	r3, #5
 800c676:	607b      	str	r3, [r7, #4]
 800c678:	e00c      	b.n	800c694 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c67a:	4b0a      	ldr	r3, [pc, #40]	; (800c6a4 <osKernelInitialize+0x44>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d105      	bne.n	800c68e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c682:	4b08      	ldr	r3, [pc, #32]	; (800c6a4 <osKernelInitialize+0x44>)
 800c684:	2201      	movs	r2, #1
 800c686:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c688:	2300      	movs	r3, #0
 800c68a:	607b      	str	r3, [r7, #4]
 800c68c:	e002      	b.n	800c694 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c68e:	f04f 33ff 	mov.w	r3, #4294967295
 800c692:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c694:	687b      	ldr	r3, [r7, #4]
}
 800c696:	4618      	mov	r0, r3
 800c698:	370c      	adds	r7, #12
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr
 800c6a2:	bf00      	nop
 800c6a4:	20000938 	.word	0x20000938

0800c6a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6ae:	f3ef 8305 	mrs	r3, IPSR
 800c6b2:	603b      	str	r3, [r7, #0]
  return(result);
 800c6b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d003      	beq.n	800c6c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c6ba:	f06f 0305 	mvn.w	r3, #5
 800c6be:	607b      	str	r3, [r7, #4]
 800c6c0:	e010      	b.n	800c6e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c6c2:	4b0b      	ldr	r3, [pc, #44]	; (800c6f0 <osKernelStart+0x48>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d109      	bne.n	800c6de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c6ca:	f7ff ffbf 	bl	800c64c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c6ce:	4b08      	ldr	r3, [pc, #32]	; (800c6f0 <osKernelStart+0x48>)
 800c6d0:	2202      	movs	r2, #2
 800c6d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c6d4:	f001 fa1a 	bl	800db0c <vTaskStartScheduler>
      stat = osOK;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	607b      	str	r3, [r7, #4]
 800c6dc:	e002      	b.n	800c6e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c6de:	f04f 33ff 	mov.w	r3, #4294967295
 800c6e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c6e4:	687b      	ldr	r3, [r7, #4]
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3708      	adds	r7, #8
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	20000938 	.word	0x20000938

0800c6f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b08e      	sub	sp, #56	; 0x38
 800c6f8:	af04      	add	r7, sp, #16
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	60b9      	str	r1, [r7, #8]
 800c6fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c700:	2300      	movs	r3, #0
 800c702:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c704:	f3ef 8305 	mrs	r3, IPSR
 800c708:	617b      	str	r3, [r7, #20]
  return(result);
 800c70a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d17f      	bne.n	800c810 <osThreadNew+0x11c>
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d07c      	beq.n	800c810 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800c716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c71a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c71c:	2318      	movs	r3, #24
 800c71e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c720:	2300      	movs	r3, #0
 800c722:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c724:	f04f 33ff 	mov.w	r3, #4294967295
 800c728:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d045      	beq.n	800c7bc <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d002      	beq.n	800c73e <osThreadNew+0x4a>
        name = attr->name;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	699b      	ldr	r3, [r3, #24]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d002      	beq.n	800c74c <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	699b      	ldr	r3, [r3, #24]
 800c74a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d008      	beq.n	800c764 <osThreadNew+0x70>
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	2b38      	cmp	r3, #56	; 0x38
 800c756:	d805      	bhi.n	800c764 <osThreadNew+0x70>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	f003 0301 	and.w	r3, r3, #1
 800c760:	2b00      	cmp	r3, #0
 800c762:	d001      	beq.n	800c768 <osThreadNew+0x74>
        return (NULL);
 800c764:	2300      	movs	r3, #0
 800c766:	e054      	b.n	800c812 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	695b      	ldr	r3, [r3, #20]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d003      	beq.n	800c778 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	695b      	ldr	r3, [r3, #20]
 800c774:	089b      	lsrs	r3, r3, #2
 800c776:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	689b      	ldr	r3, [r3, #8]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d00e      	beq.n	800c79e <osThreadNew+0xaa>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	2b6b      	cmp	r3, #107	; 0x6b
 800c786:	d90a      	bls.n	800c79e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d006      	beq.n	800c79e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	695b      	ldr	r3, [r3, #20]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d002      	beq.n	800c79e <osThreadNew+0xaa>
        mem = 1;
 800c798:	2301      	movs	r3, #1
 800c79a:	61bb      	str	r3, [r7, #24]
 800c79c:	e010      	b.n	800c7c0 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	689b      	ldr	r3, [r3, #8]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d10c      	bne.n	800c7c0 <osThreadNew+0xcc>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d108      	bne.n	800c7c0 <osThreadNew+0xcc>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	691b      	ldr	r3, [r3, #16]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d104      	bne.n	800c7c0 <osThreadNew+0xcc>
          mem = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	61bb      	str	r3, [r7, #24]
 800c7ba:	e001      	b.n	800c7c0 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d110      	bne.n	800c7e8 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c7ce:	9202      	str	r2, [sp, #8]
 800c7d0:	9301      	str	r3, [sp, #4]
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	9300      	str	r3, [sp, #0]
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	6a3a      	ldr	r2, [r7, #32]
 800c7da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f000 feb9 	bl	800d554 <xTaskCreateStatic>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	613b      	str	r3, [r7, #16]
 800c7e6:	e013      	b.n	800c810 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800c7e8:	69bb      	ldr	r3, [r7, #24]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d110      	bne.n	800c810 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c7ee:	6a3b      	ldr	r3, [r7, #32]
 800c7f0:	b29a      	uxth	r2, r3
 800c7f2:	f107 0310 	add.w	r3, r7, #16
 800c7f6:	9301      	str	r3, [sp, #4]
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	9300      	str	r3, [sp, #0]
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c800:	68f8      	ldr	r0, [r7, #12]
 800c802:	f000 ff04 	bl	800d60e <xTaskCreate>
 800c806:	4603      	mov	r3, r0
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d001      	beq.n	800c810 <osThreadNew+0x11c>
            hTask = NULL;
 800c80c:	2300      	movs	r3, #0
 800c80e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c810:	693b      	ldr	r3, [r7, #16]
}
 800c812:	4618      	mov	r0, r3
 800c814:	3728      	adds	r7, #40	; 0x28
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}

0800c81a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b084      	sub	sp, #16
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c822:	f3ef 8305 	mrs	r3, IPSR
 800c826:	60bb      	str	r3, [r7, #8]
  return(result);
 800c828:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d003      	beq.n	800c836 <osDelay+0x1c>
    stat = osErrorISR;
 800c82e:	f06f 0305 	mvn.w	r3, #5
 800c832:	60fb      	str	r3, [r7, #12]
 800c834:	e007      	b.n	800c846 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c836:	2300      	movs	r3, #0
 800c838:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d002      	beq.n	800c846 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f001 f829 	bl	800d898 <vTaskDelay>
    }
  }

  return (stat);
 800c846:	68fb      	ldr	r3, [r7, #12]
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3710      	adds	r7, #16
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c850:	b580      	push	{r7, lr}
 800c852:	b08a      	sub	sp, #40	; 0x28
 800c854:	af02      	add	r7, sp, #8
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c85c:	2300      	movs	r3, #0
 800c85e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c860:	f3ef 8305 	mrs	r3, IPSR
 800c864:	613b      	str	r3, [r7, #16]
  return(result);
 800c866:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d15f      	bne.n	800c92c <osMessageQueueNew+0xdc>
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d05c      	beq.n	800c92c <osMessageQueueNew+0xdc>
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d059      	beq.n	800c92c <osMessageQueueNew+0xdc>
    mem = -1;
 800c878:	f04f 33ff 	mov.w	r3, #4294967295
 800c87c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d029      	beq.n	800c8d8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d012      	beq.n	800c8b2 <osMessageQueueNew+0x62>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	2b4f      	cmp	r3, #79	; 0x4f
 800c892:	d90e      	bls.n	800c8b2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d00a      	beq.n	800c8b2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	695a      	ldr	r2, [r3, #20]
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	68b9      	ldr	r1, [r7, #8]
 800c8a4:	fb01 f303 	mul.w	r3, r1, r3
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d302      	bcc.n	800c8b2 <osMessageQueueNew+0x62>
        mem = 1;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	61bb      	str	r3, [r7, #24]
 800c8b0:	e014      	b.n	800c8dc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	689b      	ldr	r3, [r3, #8]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d110      	bne.n	800c8dc <osMessageQueueNew+0x8c>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d10c      	bne.n	800c8dc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d108      	bne.n	800c8dc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	695b      	ldr	r3, [r3, #20]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d104      	bne.n	800c8dc <osMessageQueueNew+0x8c>
          mem = 0;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	61bb      	str	r3, [r7, #24]
 800c8d6:	e001      	b.n	800c8dc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c8dc:	69bb      	ldr	r3, [r7, #24]
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d10b      	bne.n	800c8fa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	691a      	ldr	r2, [r3, #16]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	9100      	str	r1, [sp, #0]
 800c8ee:	68b9      	ldr	r1, [r7, #8]
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f000 f971 	bl	800cbd8 <xQueueGenericCreateStatic>
 800c8f6:	61f8      	str	r0, [r7, #28]
 800c8f8:	e008      	b.n	800c90c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c8fa:	69bb      	ldr	r3, [r7, #24]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d105      	bne.n	800c90c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c900:	2200      	movs	r2, #0
 800c902:	68b9      	ldr	r1, [r7, #8]
 800c904:	68f8      	ldr	r0, [r7, #12]
 800c906:	f000 f9df 	bl	800ccc8 <xQueueGenericCreate>
 800c90a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d00c      	beq.n	800c92c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d003      	beq.n	800c920 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	617b      	str	r3, [r7, #20]
 800c91e:	e001      	b.n	800c924 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c920:	2300      	movs	r3, #0
 800c922:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c924:	6979      	ldr	r1, [r7, #20]
 800c926:	69f8      	ldr	r0, [r7, #28]
 800c928:	f000 fdb6 	bl	800d498 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c92c:	69fb      	ldr	r3, [r7, #28]
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3720      	adds	r7, #32
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
	...

0800c938 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	60f8      	str	r0, [r7, #12]
 800c940:	60b9      	str	r1, [r7, #8]
 800c942:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	4a07      	ldr	r2, [pc, #28]	; (800c964 <vApplicationGetIdleTaskMemory+0x2c>)
 800c948:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	4a06      	ldr	r2, [pc, #24]	; (800c968 <vApplicationGetIdleTaskMemory+0x30>)
 800c94e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c956:	601a      	str	r2, [r3, #0]
}
 800c958:	bf00      	nop
 800c95a:	3714      	adds	r7, #20
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr
 800c964:	2000093c 	.word	0x2000093c
 800c968:	200009a8 	.word	0x200009a8

0800c96c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c96c:	b480      	push	{r7}
 800c96e:	b085      	sub	sp, #20
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	4a07      	ldr	r2, [pc, #28]	; (800c998 <vApplicationGetTimerTaskMemory+0x2c>)
 800c97c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	4a06      	ldr	r2, [pc, #24]	; (800c99c <vApplicationGetTimerTaskMemory+0x30>)
 800c982:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c98a:	601a      	str	r2, [r3, #0]
}
 800c98c:	bf00      	nop
 800c98e:	3714      	adds	r7, #20
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr
 800c998:	20000da8 	.word	0x20000da8
 800c99c:	20000e14 	.word	0x20000e14

0800c9a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b083      	sub	sp, #12
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f103 0208 	add.w	r2, r3, #8
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f103 0208 	add.w	r2, r3, #8
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f103 0208 	add.w	r2, r3, #8
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c9d4:	bf00      	nop
 800c9d6:	370c      	adds	r7, #12
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b083      	sub	sp, #12
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c9ee:	bf00      	nop
 800c9f0:	370c      	adds	r7, #12
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr

0800c9fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c9fa:	b480      	push	{r7}
 800c9fc:	b085      	sub	sp, #20
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
 800ca02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	68fa      	ldr	r2, [r7, #12]
 800ca0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	689a      	ldr	r2, [r3, #8]
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	683a      	ldr	r2, [r7, #0]
 800ca1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	683a      	ldr	r2, [r7, #0]
 800ca24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	687a      	ldr	r2, [r7, #4]
 800ca2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	1c5a      	adds	r2, r3, #1
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	601a      	str	r2, [r3, #0]
}
 800ca36:	bf00      	nop
 800ca38:	3714      	adds	r7, #20
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr

0800ca42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca42:	b480      	push	{r7}
 800ca44:	b085      	sub	sp, #20
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
 800ca4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca58:	d103      	bne.n	800ca62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	691b      	ldr	r3, [r3, #16]
 800ca5e:	60fb      	str	r3, [r7, #12]
 800ca60:	e00c      	b.n	800ca7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	3308      	adds	r3, #8
 800ca66:	60fb      	str	r3, [r7, #12]
 800ca68:	e002      	b.n	800ca70 <vListInsert+0x2e>
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	60fb      	str	r3, [r7, #12]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	68ba      	ldr	r2, [r7, #8]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d2f6      	bcs.n	800ca6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	685a      	ldr	r2, [r3, #4]
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	683a      	ldr	r2, [r7, #0]
 800ca8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	68fa      	ldr	r2, [r7, #12]
 800ca90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	683a      	ldr	r2, [r7, #0]
 800ca96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	1c5a      	adds	r2, r3, #1
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	601a      	str	r2, [r3, #0]
}
 800caa8:	bf00      	nop
 800caaa:	3714      	adds	r7, #20
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	691b      	ldr	r3, [r3, #16]
 800cac0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	6892      	ldr	r2, [r2, #8]
 800caca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	689b      	ldr	r3, [r3, #8]
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	6852      	ldr	r2, [r2, #4]
 800cad4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d103      	bne.n	800cae8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	689a      	ldr	r2, [r3, #8]
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2200      	movs	r2, #0
 800caec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	1e5a      	subs	r2, r3, #1
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3714      	adds	r7, #20
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d10a      	bne.n	800cb32 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb20:	f383 8811 	msr	BASEPRI, r3
 800cb24:	f3bf 8f6f 	isb	sy
 800cb28:	f3bf 8f4f 	dsb	sy
 800cb2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cb2e:	bf00      	nop
 800cb30:	e7fe      	b.n	800cb30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cb32:	f002 f98f 	bl	800ee54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb3e:	68f9      	ldr	r1, [r7, #12]
 800cb40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb42:	fb01 f303 	mul.w	r3, r1, r3
 800cb46:	441a      	add	r2, r3
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb62:	3b01      	subs	r3, #1
 800cb64:	68f9      	ldr	r1, [r7, #12]
 800cb66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb68:	fb01 f303 	mul.w	r3, r1, r3
 800cb6c:	441a      	add	r2, r3
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	22ff      	movs	r2, #255	; 0xff
 800cb76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	22ff      	movs	r2, #255	; 0xff
 800cb7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d114      	bne.n	800cbb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	691b      	ldr	r3, [r3, #16]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d01a      	beq.n	800cbc6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	3310      	adds	r3, #16
 800cb94:	4618      	mov	r0, r3
 800cb96:	f001 fa43 	bl	800e020 <xTaskRemoveFromEventList>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d012      	beq.n	800cbc6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cba0:	4b0c      	ldr	r3, [pc, #48]	; (800cbd4 <xQueueGenericReset+0xcc>)
 800cba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cba6:	601a      	str	r2, [r3, #0]
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	f3bf 8f6f 	isb	sy
 800cbb0:	e009      	b.n	800cbc6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	3310      	adds	r3, #16
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7ff fef2 	bl	800c9a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	3324      	adds	r3, #36	; 0x24
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7ff feed 	bl	800c9a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cbc6:	f002 f975 	bl	800eeb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cbca:	2301      	movs	r3, #1
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	e000ed04 	.word	0xe000ed04

0800cbd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b08e      	sub	sp, #56	; 0x38
 800cbdc:	af02      	add	r7, sp, #8
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	607a      	str	r2, [r7, #4]
 800cbe4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d10a      	bne.n	800cc02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf0:	f383 8811 	msr	BASEPRI, r3
 800cbf4:	f3bf 8f6f 	isb	sy
 800cbf8:	f3bf 8f4f 	dsb	sy
 800cbfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cbfe:	bf00      	nop
 800cc00:	e7fe      	b.n	800cc00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d10a      	bne.n	800cc1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0c:	f383 8811 	msr	BASEPRI, r3
 800cc10:	f3bf 8f6f 	isb	sy
 800cc14:	f3bf 8f4f 	dsb	sy
 800cc18:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc1a:	bf00      	nop
 800cc1c:	e7fe      	b.n	800cc1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d002      	beq.n	800cc2a <xQueueGenericCreateStatic+0x52>
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d001      	beq.n	800cc2e <xQueueGenericCreateStatic+0x56>
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e000      	b.n	800cc30 <xQueueGenericCreateStatic+0x58>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d10a      	bne.n	800cc4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc38:	f383 8811 	msr	BASEPRI, r3
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	623b      	str	r3, [r7, #32]
}
 800cc46:	bf00      	nop
 800cc48:	e7fe      	b.n	800cc48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d102      	bne.n	800cc56 <xQueueGenericCreateStatic+0x7e>
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d101      	bne.n	800cc5a <xQueueGenericCreateStatic+0x82>
 800cc56:	2301      	movs	r3, #1
 800cc58:	e000      	b.n	800cc5c <xQueueGenericCreateStatic+0x84>
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d10a      	bne.n	800cc76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc64:	f383 8811 	msr	BASEPRI, r3
 800cc68:	f3bf 8f6f 	isb	sy
 800cc6c:	f3bf 8f4f 	dsb	sy
 800cc70:	61fb      	str	r3, [r7, #28]
}
 800cc72:	bf00      	nop
 800cc74:	e7fe      	b.n	800cc74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cc76:	2350      	movs	r3, #80	; 0x50
 800cc78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	2b50      	cmp	r3, #80	; 0x50
 800cc7e:	d00a      	beq.n	800cc96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc84:	f383 8811 	msr	BASEPRI, r3
 800cc88:	f3bf 8f6f 	isb	sy
 800cc8c:	f3bf 8f4f 	dsb	sy
 800cc90:	61bb      	str	r3, [r7, #24]
}
 800cc92:	bf00      	nop
 800cc94:	e7fe      	b.n	800cc94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cc96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d00d      	beq.n	800ccbe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca4:	2201      	movs	r2, #1
 800cca6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ccaa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ccae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb0:	9300      	str	r3, [sp, #0]
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	68b9      	ldr	r1, [r7, #8]
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	f000 f83f 	bl	800cd3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ccbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3730      	adds	r7, #48	; 0x30
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b08a      	sub	sp, #40	; 0x28
 800cccc:	af02      	add	r7, sp, #8
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	4613      	mov	r3, r2
 800ccd4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d10a      	bne.n	800ccf2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ccdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce0:	f383 8811 	msr	BASEPRI, r3
 800cce4:	f3bf 8f6f 	isb	sy
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	613b      	str	r3, [r7, #16]
}
 800ccee:	bf00      	nop
 800ccf0:	e7fe      	b.n	800ccf0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	68ba      	ldr	r2, [r7, #8]
 800ccf6:	fb02 f303 	mul.w	r3, r2, r3
 800ccfa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ccfc:	69fb      	ldr	r3, [r7, #28]
 800ccfe:	3350      	adds	r3, #80	; 0x50
 800cd00:	4618      	mov	r0, r3
 800cd02:	f002 f9c9 	bl	800f098 <pvPortMalloc>
 800cd06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d011      	beq.n	800cd32 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cd0e:	69bb      	ldr	r3, [r7, #24]
 800cd10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	3350      	adds	r3, #80	; 0x50
 800cd16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cd18:	69bb      	ldr	r3, [r7, #24]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd20:	79fa      	ldrb	r2, [r7, #7]
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	9300      	str	r3, [sp, #0]
 800cd26:	4613      	mov	r3, r2
 800cd28:	697a      	ldr	r2, [r7, #20]
 800cd2a:	68b9      	ldr	r1, [r7, #8]
 800cd2c:	68f8      	ldr	r0, [r7, #12]
 800cd2e:	f000 f805 	bl	800cd3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd32:	69bb      	ldr	r3, [r7, #24]
	}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3720      	adds	r7, #32
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d103      	bne.n	800cd58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cd50:	69bb      	ldr	r3, [r7, #24]
 800cd52:	69ba      	ldr	r2, [r7, #24]
 800cd54:	601a      	str	r2, [r3, #0]
 800cd56:	e002      	b.n	800cd5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	68fa      	ldr	r2, [r7, #12]
 800cd62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cd64:	69bb      	ldr	r3, [r7, #24]
 800cd66:	68ba      	ldr	r2, [r7, #8]
 800cd68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cd6a:	2101      	movs	r1, #1
 800cd6c:	69b8      	ldr	r0, [r7, #24]
 800cd6e:	f7ff fecb 	bl	800cb08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	78fa      	ldrb	r2, [r7, #3]
 800cd76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cd7a:	bf00      	nop
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
	...

0800cd84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b08e      	sub	sp, #56	; 0x38
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	607a      	str	r2, [r7, #4]
 800cd90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cd92:	2300      	movs	r3, #0
 800cd94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10a      	bne.n	800cdb6 <xQueueGenericSend+0x32>
	__asm volatile
 800cda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda4:	f383 8811 	msr	BASEPRI, r3
 800cda8:	f3bf 8f6f 	isb	sy
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cdb2:	bf00      	nop
 800cdb4:	e7fe      	b.n	800cdb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d103      	bne.n	800cdc4 <xQueueGenericSend+0x40>
 800cdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d101      	bne.n	800cdc8 <xQueueGenericSend+0x44>
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	e000      	b.n	800cdca <xQueueGenericSend+0x46>
 800cdc8:	2300      	movs	r3, #0
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d10a      	bne.n	800cde4 <xQueueGenericSend+0x60>
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cde0:	bf00      	nop
 800cde2:	e7fe      	b.n	800cde2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	2b02      	cmp	r3, #2
 800cde8:	d103      	bne.n	800cdf2 <xQueueGenericSend+0x6e>
 800cdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdee:	2b01      	cmp	r3, #1
 800cdf0:	d101      	bne.n	800cdf6 <xQueueGenericSend+0x72>
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	e000      	b.n	800cdf8 <xQueueGenericSend+0x74>
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10a      	bne.n	800ce12 <xQueueGenericSend+0x8e>
	__asm volatile
 800cdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce00:	f383 8811 	msr	BASEPRI, r3
 800ce04:	f3bf 8f6f 	isb	sy
 800ce08:	f3bf 8f4f 	dsb	sy
 800ce0c:	623b      	str	r3, [r7, #32]
}
 800ce0e:	bf00      	nop
 800ce10:	e7fe      	b.n	800ce10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce12:	f001 fac3 	bl	800e39c <xTaskGetSchedulerState>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d102      	bne.n	800ce22 <xQueueGenericSend+0x9e>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d101      	bne.n	800ce26 <xQueueGenericSend+0xa2>
 800ce22:	2301      	movs	r3, #1
 800ce24:	e000      	b.n	800ce28 <xQueueGenericSend+0xa4>
 800ce26:	2300      	movs	r3, #0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d10a      	bne.n	800ce42 <xQueueGenericSend+0xbe>
	__asm volatile
 800ce2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce30:	f383 8811 	msr	BASEPRI, r3
 800ce34:	f3bf 8f6f 	isb	sy
 800ce38:	f3bf 8f4f 	dsb	sy
 800ce3c:	61fb      	str	r3, [r7, #28]
}
 800ce3e:	bf00      	nop
 800ce40:	e7fe      	b.n	800ce40 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce42:	f002 f807 	bl	800ee54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d302      	bcc.n	800ce58 <xQueueGenericSend+0xd4>
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d129      	bne.n	800ceac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce58:	683a      	ldr	r2, [r7, #0]
 800ce5a:	68b9      	ldr	r1, [r7, #8]
 800ce5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce5e:	f000 fa0b 	bl	800d278 <prvCopyDataToQueue>
 800ce62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d010      	beq.n	800ce8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6e:	3324      	adds	r3, #36	; 0x24
 800ce70:	4618      	mov	r0, r3
 800ce72:	f001 f8d5 	bl	800e020 <xTaskRemoveFromEventList>
 800ce76:	4603      	mov	r3, r0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d013      	beq.n	800cea4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce7c:	4b3f      	ldr	r3, [pc, #252]	; (800cf7c <xQueueGenericSend+0x1f8>)
 800ce7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce82:	601a      	str	r2, [r3, #0]
 800ce84:	f3bf 8f4f 	dsb	sy
 800ce88:	f3bf 8f6f 	isb	sy
 800ce8c:	e00a      	b.n	800cea4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d007      	beq.n	800cea4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ce94:	4b39      	ldr	r3, [pc, #228]	; (800cf7c <xQueueGenericSend+0x1f8>)
 800ce96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce9a:	601a      	str	r2, [r3, #0]
 800ce9c:	f3bf 8f4f 	dsb	sy
 800cea0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cea4:	f002 f806 	bl	800eeb4 <vPortExitCritical>
				return pdPASS;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	e063      	b.n	800cf74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d103      	bne.n	800ceba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ceb2:	f001 ffff 	bl	800eeb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	e05c      	b.n	800cf74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ceba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d106      	bne.n	800cece <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cec0:	f107 0314 	add.w	r3, r7, #20
 800cec4:	4618      	mov	r0, r3
 800cec6:	f001 f90f 	bl	800e0e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ceca:	2301      	movs	r3, #1
 800cecc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cece:	f001 fff1 	bl	800eeb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ced2:	f000 fe81 	bl	800dbd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ced6:	f001 ffbd 	bl	800ee54 <vPortEnterCritical>
 800ceda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cedc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cee0:	b25b      	sxtb	r3, r3
 800cee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee6:	d103      	bne.n	800cef0 <xQueueGenericSend+0x16c>
 800cee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceea:	2200      	movs	r2, #0
 800ceec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cef6:	b25b      	sxtb	r3, r3
 800cef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cefc:	d103      	bne.n	800cf06 <xQueueGenericSend+0x182>
 800cefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf00:	2200      	movs	r2, #0
 800cf02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf06:	f001 ffd5 	bl	800eeb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf0a:	1d3a      	adds	r2, r7, #4
 800cf0c:	f107 0314 	add.w	r3, r7, #20
 800cf10:	4611      	mov	r1, r2
 800cf12:	4618      	mov	r0, r3
 800cf14:	f001 f8fe 	bl	800e114 <xTaskCheckForTimeOut>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d124      	bne.n	800cf68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cf1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf20:	f000 faa2 	bl	800d468 <prvIsQueueFull>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d018      	beq.n	800cf5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cf2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2c:	3310      	adds	r3, #16
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	4611      	mov	r1, r2
 800cf32:	4618      	mov	r0, r3
 800cf34:	f001 f824 	bl	800df80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cf38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf3a:	f000 fa2d 	bl	800d398 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cf3e:	f000 fe59 	bl	800dbf4 <xTaskResumeAll>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	f47f af7c 	bne.w	800ce42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cf4a:	4b0c      	ldr	r3, [pc, #48]	; (800cf7c <xQueueGenericSend+0x1f8>)
 800cf4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf50:	601a      	str	r2, [r3, #0]
 800cf52:	f3bf 8f4f 	dsb	sy
 800cf56:	f3bf 8f6f 	isb	sy
 800cf5a:	e772      	b.n	800ce42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cf5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf5e:	f000 fa1b 	bl	800d398 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf62:	f000 fe47 	bl	800dbf4 <xTaskResumeAll>
 800cf66:	e76c      	b.n	800ce42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cf68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf6a:	f000 fa15 	bl	800d398 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf6e:	f000 fe41 	bl	800dbf4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cf72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3738      	adds	r7, #56	; 0x38
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	e000ed04 	.word	0xe000ed04

0800cf80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b090      	sub	sp, #64	; 0x40
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	607a      	str	r2, [r7, #4]
 800cf8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cf92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d10a      	bne.n	800cfae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cf98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9c:	f383 8811 	msr	BASEPRI, r3
 800cfa0:	f3bf 8f6f 	isb	sy
 800cfa4:	f3bf 8f4f 	dsb	sy
 800cfa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cfaa:	bf00      	nop
 800cfac:	e7fe      	b.n	800cfac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d103      	bne.n	800cfbc <xQueueGenericSendFromISR+0x3c>
 800cfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d101      	bne.n	800cfc0 <xQueueGenericSendFromISR+0x40>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e000      	b.n	800cfc2 <xQueueGenericSendFromISR+0x42>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d10a      	bne.n	800cfdc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfca:	f383 8811 	msr	BASEPRI, r3
 800cfce:	f3bf 8f6f 	isb	sy
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cfd8:	bf00      	nop
 800cfda:	e7fe      	b.n	800cfda <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	2b02      	cmp	r3, #2
 800cfe0:	d103      	bne.n	800cfea <xQueueGenericSendFromISR+0x6a>
 800cfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfe6:	2b01      	cmp	r3, #1
 800cfe8:	d101      	bne.n	800cfee <xQueueGenericSendFromISR+0x6e>
 800cfea:	2301      	movs	r3, #1
 800cfec:	e000      	b.n	800cff0 <xQueueGenericSendFromISR+0x70>
 800cfee:	2300      	movs	r3, #0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d10a      	bne.n	800d00a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff8:	f383 8811 	msr	BASEPRI, r3
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	623b      	str	r3, [r7, #32]
}
 800d006:	bf00      	nop
 800d008:	e7fe      	b.n	800d008 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d00a:	f002 f805 	bl	800f018 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d00e:	f3ef 8211 	mrs	r2, BASEPRI
 800d012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d016:	f383 8811 	msr	BASEPRI, r3
 800d01a:	f3bf 8f6f 	isb	sy
 800d01e:	f3bf 8f4f 	dsb	sy
 800d022:	61fa      	str	r2, [r7, #28]
 800d024:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d026:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d028:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d032:	429a      	cmp	r2, r3
 800d034:	d302      	bcc.n	800d03c <xQueueGenericSendFromISR+0xbc>
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	2b02      	cmp	r3, #2
 800d03a:	d12f      	bne.n	800d09c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d04a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d04c:	683a      	ldr	r2, [r7, #0]
 800d04e:	68b9      	ldr	r1, [r7, #8]
 800d050:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d052:	f000 f911 	bl	800d278 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d056:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d05e:	d112      	bne.n	800d086 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d064:	2b00      	cmp	r3, #0
 800d066:	d016      	beq.n	800d096 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06a:	3324      	adds	r3, #36	; 0x24
 800d06c:	4618      	mov	r0, r3
 800d06e:	f000 ffd7 	bl	800e020 <xTaskRemoveFromEventList>
 800d072:	4603      	mov	r3, r0
 800d074:	2b00      	cmp	r3, #0
 800d076:	d00e      	beq.n	800d096 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d00b      	beq.n	800d096 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2201      	movs	r2, #1
 800d082:	601a      	str	r2, [r3, #0]
 800d084:	e007      	b.n	800d096 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d086:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d08a:	3301      	adds	r3, #1
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	b25a      	sxtb	r2, r3
 800d090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d096:	2301      	movs	r3, #1
 800d098:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d09a:	e001      	b.n	800d0a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d09c:	2300      	movs	r3, #0
 800d09e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d0aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3740      	adds	r7, #64	; 0x40
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
	...

0800d0b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b08c      	sub	sp, #48	; 0x30
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10a      	bne.n	800d0e8 <xQueueReceive+0x30>
	__asm volatile
 800d0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d6:	f383 8811 	msr	BASEPRI, r3
 800d0da:	f3bf 8f6f 	isb	sy
 800d0de:	f3bf 8f4f 	dsb	sy
 800d0e2:	623b      	str	r3, [r7, #32]
}
 800d0e4:	bf00      	nop
 800d0e6:	e7fe      	b.n	800d0e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d103      	bne.n	800d0f6 <xQueueReceive+0x3e>
 800d0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d101      	bne.n	800d0fa <xQueueReceive+0x42>
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	e000      	b.n	800d0fc <xQueueReceive+0x44>
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d10a      	bne.n	800d116 <xQueueReceive+0x5e>
	__asm volatile
 800d100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d104:	f383 8811 	msr	BASEPRI, r3
 800d108:	f3bf 8f6f 	isb	sy
 800d10c:	f3bf 8f4f 	dsb	sy
 800d110:	61fb      	str	r3, [r7, #28]
}
 800d112:	bf00      	nop
 800d114:	e7fe      	b.n	800d114 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d116:	f001 f941 	bl	800e39c <xTaskGetSchedulerState>
 800d11a:	4603      	mov	r3, r0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d102      	bne.n	800d126 <xQueueReceive+0x6e>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d101      	bne.n	800d12a <xQueueReceive+0x72>
 800d126:	2301      	movs	r3, #1
 800d128:	e000      	b.n	800d12c <xQueueReceive+0x74>
 800d12a:	2300      	movs	r3, #0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d10a      	bne.n	800d146 <xQueueReceive+0x8e>
	__asm volatile
 800d130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d134:	f383 8811 	msr	BASEPRI, r3
 800d138:	f3bf 8f6f 	isb	sy
 800d13c:	f3bf 8f4f 	dsb	sy
 800d140:	61bb      	str	r3, [r7, #24]
}
 800d142:	bf00      	nop
 800d144:	e7fe      	b.n	800d144 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d146:	f001 fe85 	bl	800ee54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d14e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d152:	2b00      	cmp	r3, #0
 800d154:	d01f      	beq.n	800d196 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d156:	68b9      	ldr	r1, [r7, #8]
 800d158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d15a:	f000 f8f7 	bl	800d34c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d160:	1e5a      	subs	r2, r3, #1
 800d162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d164:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d168:	691b      	ldr	r3, [r3, #16]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00f      	beq.n	800d18e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d170:	3310      	adds	r3, #16
 800d172:	4618      	mov	r0, r3
 800d174:	f000 ff54 	bl	800e020 <xTaskRemoveFromEventList>
 800d178:	4603      	mov	r3, r0
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d007      	beq.n	800d18e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d17e:	4b3d      	ldr	r3, [pc, #244]	; (800d274 <xQueueReceive+0x1bc>)
 800d180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d184:	601a      	str	r2, [r3, #0]
 800d186:	f3bf 8f4f 	dsb	sy
 800d18a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d18e:	f001 fe91 	bl	800eeb4 <vPortExitCritical>
				return pdPASS;
 800d192:	2301      	movs	r3, #1
 800d194:	e069      	b.n	800d26a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d103      	bne.n	800d1a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d19c:	f001 fe8a 	bl	800eeb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	e062      	b.n	800d26a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d106      	bne.n	800d1b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1aa:	f107 0310 	add.w	r3, r7, #16
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f000 ff9a 	bl	800e0e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1b8:	f001 fe7c 	bl	800eeb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1bc:	f000 fd0c 	bl	800dbd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1c0:	f001 fe48 	bl	800ee54 <vPortEnterCritical>
 800d1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1ca:	b25b      	sxtb	r3, r3
 800d1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1d0:	d103      	bne.n	800d1da <xQueueReceive+0x122>
 800d1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1e0:	b25b      	sxtb	r3, r3
 800d1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1e6:	d103      	bne.n	800d1f0 <xQueueReceive+0x138>
 800d1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1f0:	f001 fe60 	bl	800eeb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1f4:	1d3a      	adds	r2, r7, #4
 800d1f6:	f107 0310 	add.w	r3, r7, #16
 800d1fa:	4611      	mov	r1, r2
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f000 ff89 	bl	800e114 <xTaskCheckForTimeOut>
 800d202:	4603      	mov	r3, r0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d123      	bne.n	800d250 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d20a:	f000 f917 	bl	800d43c <prvIsQueueEmpty>
 800d20e:	4603      	mov	r3, r0
 800d210:	2b00      	cmp	r3, #0
 800d212:	d017      	beq.n	800d244 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d216:	3324      	adds	r3, #36	; 0x24
 800d218:	687a      	ldr	r2, [r7, #4]
 800d21a:	4611      	mov	r1, r2
 800d21c:	4618      	mov	r0, r3
 800d21e:	f000 feaf 	bl	800df80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d224:	f000 f8b8 	bl	800d398 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d228:	f000 fce4 	bl	800dbf4 <xTaskResumeAll>
 800d22c:	4603      	mov	r3, r0
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d189      	bne.n	800d146 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d232:	4b10      	ldr	r3, [pc, #64]	; (800d274 <xQueueReceive+0x1bc>)
 800d234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d238:	601a      	str	r2, [r3, #0]
 800d23a:	f3bf 8f4f 	dsb	sy
 800d23e:	f3bf 8f6f 	isb	sy
 800d242:	e780      	b.n	800d146 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d246:	f000 f8a7 	bl	800d398 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d24a:	f000 fcd3 	bl	800dbf4 <xTaskResumeAll>
 800d24e:	e77a      	b.n	800d146 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d252:	f000 f8a1 	bl	800d398 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d256:	f000 fccd 	bl	800dbf4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d25a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d25c:	f000 f8ee 	bl	800d43c <prvIsQueueEmpty>
 800d260:	4603      	mov	r3, r0
 800d262:	2b00      	cmp	r3, #0
 800d264:	f43f af6f 	beq.w	800d146 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d268:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3730      	adds	r7, #48	; 0x30
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	e000ed04 	.word	0xe000ed04

0800d278 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b086      	sub	sp, #24
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d284:	2300      	movs	r3, #0
 800d286:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d28c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d292:	2b00      	cmp	r3, #0
 800d294:	d10d      	bne.n	800d2b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d14d      	bne.n	800d33a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	689b      	ldr	r3, [r3, #8]
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f001 f898 	bl	800e3d8 <xTaskPriorityDisinherit>
 800d2a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	609a      	str	r2, [r3, #8]
 800d2b0:	e043      	b.n	800d33a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d119      	bne.n	800d2ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	6858      	ldr	r0, [r3, #4]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	68b9      	ldr	r1, [r7, #8]
 800d2c4:	f002 fdf6 	bl	800feb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	685a      	ldr	r2, [r3, #4]
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d0:	441a      	add	r2, r3
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	685a      	ldr	r2, [r3, #4]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	689b      	ldr	r3, [r3, #8]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d32b      	bcc.n	800d33a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681a      	ldr	r2, [r3, #0]
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	605a      	str	r2, [r3, #4]
 800d2ea:	e026      	b.n	800d33a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	68d8      	ldr	r0, [r3, #12]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	68b9      	ldr	r1, [r7, #8]
 800d2f8:	f002 fddc 	bl	800feb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	68da      	ldr	r2, [r3, #12]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d304:	425b      	negs	r3, r3
 800d306:	441a      	add	r2, r3
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	68da      	ldr	r2, [r3, #12]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	429a      	cmp	r2, r3
 800d316:	d207      	bcs.n	800d328 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	689a      	ldr	r2, [r3, #8]
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d320:	425b      	negs	r3, r3
 800d322:	441a      	add	r2, r3
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2b02      	cmp	r3, #2
 800d32c:	d105      	bne.n	800d33a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d002      	beq.n	800d33a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	3b01      	subs	r3, #1
 800d338:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	1c5a      	adds	r2, r3, #1
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d342:	697b      	ldr	r3, [r7, #20]
}
 800d344:	4618      	mov	r0, r3
 800d346:	3718      	adds	r7, #24
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d018      	beq.n	800d390 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	68da      	ldr	r2, [r3, #12]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d366:	441a      	add	r2, r3
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	68da      	ldr	r2, [r3, #12]
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	689b      	ldr	r3, [r3, #8]
 800d374:	429a      	cmp	r2, r3
 800d376:	d303      	bcc.n	800d380 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	68d9      	ldr	r1, [r3, #12]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d388:	461a      	mov	r2, r3
 800d38a:	6838      	ldr	r0, [r7, #0]
 800d38c:	f002 fd92 	bl	800feb4 <memcpy>
	}
}
 800d390:	bf00      	nop
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b084      	sub	sp, #16
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d3a0:	f001 fd58 	bl	800ee54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3ac:	e011      	b.n	800d3d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d012      	beq.n	800d3dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	3324      	adds	r3, #36	; 0x24
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f000 fe30 	bl	800e020 <xTaskRemoveFromEventList>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d001      	beq.n	800d3ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d3c6:	f000 ff07 	bl	800e1d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d3ca:	7bfb      	ldrb	r3, [r7, #15]
 800d3cc:	3b01      	subs	r3, #1
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	dce9      	bgt.n	800d3ae <prvUnlockQueue+0x16>
 800d3da:	e000      	b.n	800d3de <prvUnlockQueue+0x46>
					break;
 800d3dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	22ff      	movs	r2, #255	; 0xff
 800d3e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d3e6:	f001 fd65 	bl	800eeb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d3ea:	f001 fd33 	bl	800ee54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3f6:	e011      	b.n	800d41c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	691b      	ldr	r3, [r3, #16]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d012      	beq.n	800d426 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	3310      	adds	r3, #16
 800d404:	4618      	mov	r0, r3
 800d406:	f000 fe0b 	bl	800e020 <xTaskRemoveFromEventList>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d001      	beq.n	800d414 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d410:	f000 fee2 	bl	800e1d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d414:	7bbb      	ldrb	r3, [r7, #14]
 800d416:	3b01      	subs	r3, #1
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d41c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d420:	2b00      	cmp	r3, #0
 800d422:	dce9      	bgt.n	800d3f8 <prvUnlockQueue+0x60>
 800d424:	e000      	b.n	800d428 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d426:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	22ff      	movs	r2, #255	; 0xff
 800d42c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d430:	f001 fd40 	bl	800eeb4 <vPortExitCritical>
}
 800d434:	bf00      	nop
 800d436:	3710      	adds	r7, #16
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d444:	f001 fd06 	bl	800ee54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d102      	bne.n	800d456 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d450:	2301      	movs	r3, #1
 800d452:	60fb      	str	r3, [r7, #12]
 800d454:	e001      	b.n	800d45a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d456:	2300      	movs	r3, #0
 800d458:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d45a:	f001 fd2b 	bl	800eeb4 <vPortExitCritical>

	return xReturn;
 800d45e:	68fb      	ldr	r3, [r7, #12]
}
 800d460:	4618      	mov	r0, r3
 800d462:	3710      	adds	r7, #16
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d470:	f001 fcf0 	bl	800ee54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d102      	bne.n	800d486 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d480:	2301      	movs	r3, #1
 800d482:	60fb      	str	r3, [r7, #12]
 800d484:	e001      	b.n	800d48a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d486:	2300      	movs	r3, #0
 800d488:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d48a:	f001 fd13 	bl	800eeb4 <vPortExitCritical>

	return xReturn;
 800d48e:	68fb      	ldr	r3, [r7, #12]
}
 800d490:	4618      	mov	r0, r3
 800d492:	3710      	adds	r7, #16
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d498:	b480      	push	{r7}
 800d49a:	b085      	sub	sp, #20
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	60fb      	str	r3, [r7, #12]
 800d4a6:	e014      	b.n	800d4d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d4a8:	4a0f      	ldr	r2, [pc, #60]	; (800d4e8 <vQueueAddToRegistry+0x50>)
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d10b      	bne.n	800d4cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d4b4:	490c      	ldr	r1, [pc, #48]	; (800d4e8 <vQueueAddToRegistry+0x50>)
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	683a      	ldr	r2, [r7, #0]
 800d4ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d4be:	4a0a      	ldr	r2, [pc, #40]	; (800d4e8 <vQueueAddToRegistry+0x50>)
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	00db      	lsls	r3, r3, #3
 800d4c4:	4413      	add	r3, r2
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d4ca:	e006      	b.n	800d4da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	60fb      	str	r3, [r7, #12]
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2b07      	cmp	r3, #7
 800d4d6:	d9e7      	bls.n	800d4a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d4d8:	bf00      	nop
 800d4da:	bf00      	nop
 800d4dc:	3714      	adds	r7, #20
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr
 800d4e6:	bf00      	nop
 800d4e8:	20001614 	.word	0x20001614

0800d4ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b086      	sub	sp, #24
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d4fc:	f001 fcaa 	bl	800ee54 <vPortEnterCritical>
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d506:	b25b      	sxtb	r3, r3
 800d508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d50c:	d103      	bne.n	800d516 <vQueueWaitForMessageRestricted+0x2a>
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	2200      	movs	r2, #0
 800d512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d51c:	b25b      	sxtb	r3, r3
 800d51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d522:	d103      	bne.n	800d52c <vQueueWaitForMessageRestricted+0x40>
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	2200      	movs	r2, #0
 800d528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d52c:	f001 fcc2 	bl	800eeb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d534:	2b00      	cmp	r3, #0
 800d536:	d106      	bne.n	800d546 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	3324      	adds	r3, #36	; 0x24
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	68b9      	ldr	r1, [r7, #8]
 800d540:	4618      	mov	r0, r3
 800d542:	f000 fd41 	bl	800dfc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d546:	6978      	ldr	r0, [r7, #20]
 800d548:	f7ff ff26 	bl	800d398 <prvUnlockQueue>
	}
 800d54c:	bf00      	nop
 800d54e:	3718      	adds	r7, #24
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d554:	b580      	push	{r7, lr}
 800d556:	b08e      	sub	sp, #56	; 0x38
 800d558:	af04      	add	r7, sp, #16
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	60b9      	str	r1, [r7, #8]
 800d55e:	607a      	str	r2, [r7, #4]
 800d560:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d564:	2b00      	cmp	r3, #0
 800d566:	d10a      	bne.n	800d57e <xTaskCreateStatic+0x2a>
	__asm volatile
 800d568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56c:	f383 8811 	msr	BASEPRI, r3
 800d570:	f3bf 8f6f 	isb	sy
 800d574:	f3bf 8f4f 	dsb	sy
 800d578:	623b      	str	r3, [r7, #32]
}
 800d57a:	bf00      	nop
 800d57c:	e7fe      	b.n	800d57c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d580:	2b00      	cmp	r3, #0
 800d582:	d10a      	bne.n	800d59a <xTaskCreateStatic+0x46>
	__asm volatile
 800d584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	61fb      	str	r3, [r7, #28]
}
 800d596:	bf00      	nop
 800d598:	e7fe      	b.n	800d598 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d59a:	236c      	movs	r3, #108	; 0x6c
 800d59c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	2b6c      	cmp	r3, #108	; 0x6c
 800d5a2:	d00a      	beq.n	800d5ba <xTaskCreateStatic+0x66>
	__asm volatile
 800d5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a8:	f383 8811 	msr	BASEPRI, r3
 800d5ac:	f3bf 8f6f 	isb	sy
 800d5b0:	f3bf 8f4f 	dsb	sy
 800d5b4:	61bb      	str	r3, [r7, #24]
}
 800d5b6:	bf00      	nop
 800d5b8:	e7fe      	b.n	800d5b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d5ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d01e      	beq.n	800d600 <xTaskCreateStatic+0xac>
 800d5c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d01b      	beq.n	800d600 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d4:	2202      	movs	r2, #2
 800d5d6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d5da:	2300      	movs	r3, #0
 800d5dc:	9303      	str	r3, [sp, #12]
 800d5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e0:	9302      	str	r3, [sp, #8]
 800d5e2:	f107 0314 	add.w	r3, r7, #20
 800d5e6:	9301      	str	r3, [sp, #4]
 800d5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ea:	9300      	str	r3, [sp, #0]
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	68b9      	ldr	r1, [r7, #8]
 800d5f2:	68f8      	ldr	r0, [r7, #12]
 800d5f4:	f000 f850 	bl	800d698 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d5f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5fa:	f000 f8dd 	bl	800d7b8 <prvAddNewTaskToReadyList>
 800d5fe:	e001      	b.n	800d604 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d600:	2300      	movs	r3, #0
 800d602:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d604:	697b      	ldr	r3, [r7, #20]
	}
 800d606:	4618      	mov	r0, r3
 800d608:	3728      	adds	r7, #40	; 0x28
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}

0800d60e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d60e:	b580      	push	{r7, lr}
 800d610:	b08c      	sub	sp, #48	; 0x30
 800d612:	af04      	add	r7, sp, #16
 800d614:	60f8      	str	r0, [r7, #12]
 800d616:	60b9      	str	r1, [r7, #8]
 800d618:	603b      	str	r3, [r7, #0]
 800d61a:	4613      	mov	r3, r2
 800d61c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d61e:	88fb      	ldrh	r3, [r7, #6]
 800d620:	009b      	lsls	r3, r3, #2
 800d622:	4618      	mov	r0, r3
 800d624:	f001 fd38 	bl	800f098 <pvPortMalloc>
 800d628:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d00e      	beq.n	800d64e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d630:	206c      	movs	r0, #108	; 0x6c
 800d632:	f001 fd31 	bl	800f098 <pvPortMalloc>
 800d636:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d638:	69fb      	ldr	r3, [r7, #28]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d003      	beq.n	800d646 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	697a      	ldr	r2, [r7, #20]
 800d642:	631a      	str	r2, [r3, #48]	; 0x30
 800d644:	e005      	b.n	800d652 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d646:	6978      	ldr	r0, [r7, #20]
 800d648:	f001 fdf2 	bl	800f230 <vPortFree>
 800d64c:	e001      	b.n	800d652 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d64e:	2300      	movs	r3, #0
 800d650:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d017      	beq.n	800d688 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	2200      	movs	r2, #0
 800d65c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d660:	88fa      	ldrh	r2, [r7, #6]
 800d662:	2300      	movs	r3, #0
 800d664:	9303      	str	r3, [sp, #12]
 800d666:	69fb      	ldr	r3, [r7, #28]
 800d668:	9302      	str	r3, [sp, #8]
 800d66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66c:	9301      	str	r3, [sp, #4]
 800d66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d670:	9300      	str	r3, [sp, #0]
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	68b9      	ldr	r1, [r7, #8]
 800d676:	68f8      	ldr	r0, [r7, #12]
 800d678:	f000 f80e 	bl	800d698 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d67c:	69f8      	ldr	r0, [r7, #28]
 800d67e:	f000 f89b 	bl	800d7b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d682:	2301      	movs	r3, #1
 800d684:	61bb      	str	r3, [r7, #24]
 800d686:	e002      	b.n	800d68e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d688:	f04f 33ff 	mov.w	r3, #4294967295
 800d68c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d68e:	69bb      	ldr	r3, [r7, #24]
	}
 800d690:	4618      	mov	r0, r3
 800d692:	3720      	adds	r7, #32
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}

0800d698 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b088      	sub	sp, #32
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	607a      	str	r2, [r7, #4]
 800d6a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	009b      	lsls	r3, r3, #2
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	21a5      	movs	r1, #165	; 0xa5
 800d6b2:	f002 fc0d 	bl	800fed0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d6c0:	3b01      	subs	r3, #1
 800d6c2:	009b      	lsls	r3, r3, #2
 800d6c4:	4413      	add	r3, r2
 800d6c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d6c8:	69bb      	ldr	r3, [r7, #24]
 800d6ca:	f023 0307 	bic.w	r3, r3, #7
 800d6ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d6d0:	69bb      	ldr	r3, [r7, #24]
 800d6d2:	f003 0307 	and.w	r3, r3, #7
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d00a      	beq.n	800d6f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6de:	f383 8811 	msr	BASEPRI, r3
 800d6e2:	f3bf 8f6f 	isb	sy
 800d6e6:	f3bf 8f4f 	dsb	sy
 800d6ea:	617b      	str	r3, [r7, #20]
}
 800d6ec:	bf00      	nop
 800d6ee:	e7fe      	b.n	800d6ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d01f      	beq.n	800d736 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	61fb      	str	r3, [r7, #28]
 800d6fa:	e012      	b.n	800d722 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d6fc:	68ba      	ldr	r2, [r7, #8]
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	4413      	add	r3, r2
 800d702:	7819      	ldrb	r1, [r3, #0]
 800d704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d706:	69fb      	ldr	r3, [r7, #28]
 800d708:	4413      	add	r3, r2
 800d70a:	3334      	adds	r3, #52	; 0x34
 800d70c:	460a      	mov	r2, r1
 800d70e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d710:	68ba      	ldr	r2, [r7, #8]
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	4413      	add	r3, r2
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d006      	beq.n	800d72a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	3301      	adds	r3, #1
 800d720:	61fb      	str	r3, [r7, #28]
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	2b1d      	cmp	r3, #29
 800d726:	d9e9      	bls.n	800d6fc <prvInitialiseNewTask+0x64>
 800d728:	e000      	b.n	800d72c <prvInitialiseNewTask+0x94>
			{
				break;
 800d72a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72e:	2200      	movs	r2, #0
 800d730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800d734:	e003      	b.n	800d73e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d738:	2200      	movs	r2, #0
 800d73a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d740:	2b37      	cmp	r3, #55	; 0x37
 800d742:	d901      	bls.n	800d748 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d744:	2337      	movs	r3, #55	; 0x37
 800d746:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d74c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d752:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800d754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d756:	2200      	movs	r2, #0
 800d758:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75c:	3304      	adds	r3, #4
 800d75e:	4618      	mov	r0, r3
 800d760:	f7ff f93e 	bl	800c9e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d766:	3318      	adds	r3, #24
 800d768:	4618      	mov	r0, r3
 800d76a:	f7ff f939 	bl	800c9e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d772:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d776:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d782:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d786:	2200      	movs	r2, #0
 800d788:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78c:	2200      	movs	r2, #0
 800d78e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d792:	683a      	ldr	r2, [r7, #0]
 800d794:	68f9      	ldr	r1, [r7, #12]
 800d796:	69b8      	ldr	r0, [r7, #24]
 800d798:	f001 fa2e 	bl	800ebf8 <pxPortInitialiseStack>
 800d79c:	4602      	mov	r2, r0
 800d79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d002      	beq.n	800d7ae <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7ae:	bf00      	nop
 800d7b0:	3720      	adds	r7, #32
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
	...

0800d7b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d7c0:	f001 fb48 	bl	800ee54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d7c4:	4b2d      	ldr	r3, [pc, #180]	; (800d87c <prvAddNewTaskToReadyList+0xc4>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	4a2c      	ldr	r2, [pc, #176]	; (800d87c <prvAddNewTaskToReadyList+0xc4>)
 800d7cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d7ce:	4b2c      	ldr	r3, [pc, #176]	; (800d880 <prvAddNewTaskToReadyList+0xc8>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d109      	bne.n	800d7ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d7d6:	4a2a      	ldr	r2, [pc, #168]	; (800d880 <prvAddNewTaskToReadyList+0xc8>)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d7dc:	4b27      	ldr	r3, [pc, #156]	; (800d87c <prvAddNewTaskToReadyList+0xc4>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d110      	bne.n	800d806 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d7e4:	f000 fd1c 	bl	800e220 <prvInitialiseTaskLists>
 800d7e8:	e00d      	b.n	800d806 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d7ea:	4b26      	ldr	r3, [pc, #152]	; (800d884 <prvAddNewTaskToReadyList+0xcc>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d109      	bne.n	800d806 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d7f2:	4b23      	ldr	r3, [pc, #140]	; (800d880 <prvAddNewTaskToReadyList+0xc8>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d802      	bhi.n	800d806 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d800:	4a1f      	ldr	r2, [pc, #124]	; (800d880 <prvAddNewTaskToReadyList+0xc8>)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d806:	4b20      	ldr	r3, [pc, #128]	; (800d888 <prvAddNewTaskToReadyList+0xd0>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	3301      	adds	r3, #1
 800d80c:	4a1e      	ldr	r2, [pc, #120]	; (800d888 <prvAddNewTaskToReadyList+0xd0>)
 800d80e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d810:	4b1d      	ldr	r3, [pc, #116]	; (800d888 <prvAddNewTaskToReadyList+0xd0>)
 800d812:	681a      	ldr	r2, [r3, #0]
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d81c:	4b1b      	ldr	r3, [pc, #108]	; (800d88c <prvAddNewTaskToReadyList+0xd4>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	429a      	cmp	r2, r3
 800d822:	d903      	bls.n	800d82c <prvAddNewTaskToReadyList+0x74>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d828:	4a18      	ldr	r2, [pc, #96]	; (800d88c <prvAddNewTaskToReadyList+0xd4>)
 800d82a:	6013      	str	r3, [r2, #0]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d830:	4613      	mov	r3, r2
 800d832:	009b      	lsls	r3, r3, #2
 800d834:	4413      	add	r3, r2
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	4a15      	ldr	r2, [pc, #84]	; (800d890 <prvAddNewTaskToReadyList+0xd8>)
 800d83a:	441a      	add	r2, r3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	3304      	adds	r3, #4
 800d840:	4619      	mov	r1, r3
 800d842:	4610      	mov	r0, r2
 800d844:	f7ff f8d9 	bl	800c9fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d848:	f001 fb34 	bl	800eeb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d84c:	4b0d      	ldr	r3, [pc, #52]	; (800d884 <prvAddNewTaskToReadyList+0xcc>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d00e      	beq.n	800d872 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d854:	4b0a      	ldr	r3, [pc, #40]	; (800d880 <prvAddNewTaskToReadyList+0xc8>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d85e:	429a      	cmp	r2, r3
 800d860:	d207      	bcs.n	800d872 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d862:	4b0c      	ldr	r3, [pc, #48]	; (800d894 <prvAddNewTaskToReadyList+0xdc>)
 800d864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d868:	601a      	str	r2, [r3, #0]
 800d86a:	f3bf 8f4f 	dsb	sy
 800d86e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d872:	bf00      	nop
 800d874:	3708      	adds	r7, #8
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	20001b28 	.word	0x20001b28
 800d880:	20001654 	.word	0x20001654
 800d884:	20001b34 	.word	0x20001b34
 800d888:	20001b44 	.word	0x20001b44
 800d88c:	20001b30 	.word	0x20001b30
 800d890:	20001658 	.word	0x20001658
 800d894:	e000ed04 	.word	0xe000ed04

0800d898 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b084      	sub	sp, #16
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d017      	beq.n	800d8da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d8aa:	4b13      	ldr	r3, [pc, #76]	; (800d8f8 <vTaskDelay+0x60>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d00a      	beq.n	800d8c8 <vTaskDelay+0x30>
	__asm volatile
 800d8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b6:	f383 8811 	msr	BASEPRI, r3
 800d8ba:	f3bf 8f6f 	isb	sy
 800d8be:	f3bf 8f4f 	dsb	sy
 800d8c2:	60bb      	str	r3, [r7, #8]
}
 800d8c4:	bf00      	nop
 800d8c6:	e7fe      	b.n	800d8c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d8c8:	f000 f986 	bl	800dbd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d8cc:	2100      	movs	r1, #0
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f000 fdf0 	bl	800e4b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d8d4:	f000 f98e 	bl	800dbf4 <xTaskResumeAll>
 800d8d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d107      	bne.n	800d8f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d8e0:	4b06      	ldr	r3, [pc, #24]	; (800d8fc <vTaskDelay+0x64>)
 800d8e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8e6:	601a      	str	r2, [r3, #0]
 800d8e8:	f3bf 8f4f 	dsb	sy
 800d8ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d8f0:	bf00      	nop
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	20001b50 	.word	0x20001b50
 800d8fc:	e000ed04 	.word	0xe000ed04

0800d900 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800d900:	b580      	push	{r7, lr}
 800d902:	b084      	sub	sp, #16
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d908:	f001 faa4 	bl	800ee54 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d102      	bne.n	800d918 <vTaskSuspend+0x18>
 800d912:	4b30      	ldr	r3, [pc, #192]	; (800d9d4 <vTaskSuspend+0xd4>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	e000      	b.n	800d91a <vTaskSuspend+0x1a>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	3304      	adds	r3, #4
 800d920:	4618      	mov	r0, r3
 800d922:	f7ff f8c7 	bl	800cab4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d004      	beq.n	800d938 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	3318      	adds	r3, #24
 800d932:	4618      	mov	r0, r3
 800d934:	f7ff f8be 	bl	800cab4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	3304      	adds	r3, #4
 800d93c:	4619      	mov	r1, r3
 800d93e:	4826      	ldr	r0, [pc, #152]	; (800d9d8 <vTaskSuspend+0xd8>)
 800d940:	f7ff f85b 	bl	800c9fa <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d103      	bne.n	800d958 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	2200      	movs	r2, #0
 800d954:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800d958:	f001 faac 	bl	800eeb4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800d95c:	4b1f      	ldr	r3, [pc, #124]	; (800d9dc <vTaskSuspend+0xdc>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d005      	beq.n	800d970 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800d964:	f001 fa76 	bl	800ee54 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800d968:	f000 fcf8 	bl	800e35c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800d96c:	f001 faa2 	bl	800eeb4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800d970:	4b18      	ldr	r3, [pc, #96]	; (800d9d4 <vTaskSuspend+0xd4>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	68fa      	ldr	r2, [r7, #12]
 800d976:	429a      	cmp	r2, r3
 800d978:	d127      	bne.n	800d9ca <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800d97a:	4b18      	ldr	r3, [pc, #96]	; (800d9dc <vTaskSuspend+0xdc>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d017      	beq.n	800d9b2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800d982:	4b17      	ldr	r3, [pc, #92]	; (800d9e0 <vTaskSuspend+0xe0>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00a      	beq.n	800d9a0 <vTaskSuspend+0xa0>
	__asm volatile
 800d98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98e:	f383 8811 	msr	BASEPRI, r3
 800d992:	f3bf 8f6f 	isb	sy
 800d996:	f3bf 8f4f 	dsb	sy
 800d99a:	60bb      	str	r3, [r7, #8]
}
 800d99c:	bf00      	nop
 800d99e:	e7fe      	b.n	800d99e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800d9a0:	4b10      	ldr	r3, [pc, #64]	; (800d9e4 <vTaskSuspend+0xe4>)
 800d9a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9a6:	601a      	str	r2, [r3, #0]
 800d9a8:	f3bf 8f4f 	dsb	sy
 800d9ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d9b0:	e00b      	b.n	800d9ca <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800d9b2:	4b09      	ldr	r3, [pc, #36]	; (800d9d8 <vTaskSuspend+0xd8>)
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	4b0c      	ldr	r3, [pc, #48]	; (800d9e8 <vTaskSuspend+0xe8>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d103      	bne.n	800d9c6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800d9be:	4b05      	ldr	r3, [pc, #20]	; (800d9d4 <vTaskSuspend+0xd4>)
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	601a      	str	r2, [r3, #0]
	}
 800d9c4:	e001      	b.n	800d9ca <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800d9c6:	f000 fa7d 	bl	800dec4 <vTaskSwitchContext>
	}
 800d9ca:	bf00      	nop
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	20001654 	.word	0x20001654
 800d9d8:	20001b14 	.word	0x20001b14
 800d9dc:	20001b34 	.word	0x20001b34
 800d9e0:	20001b50 	.word	0x20001b50
 800d9e4:	e000ed04 	.word	0xe000ed04
 800d9e8:	20001b28 	.word	0x20001b28

0800d9ec <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b087      	sub	sp, #28
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d10a      	bne.n	800da18 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800da02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da06:	f383 8811 	msr	BASEPRI, r3
 800da0a:	f3bf 8f6f 	isb	sy
 800da0e:	f3bf 8f4f 	dsb	sy
 800da12:	60fb      	str	r3, [r7, #12]
}
 800da14:	bf00      	nop
 800da16:	e7fe      	b.n	800da16 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	695b      	ldr	r3, [r3, #20]
 800da1c:	4a0a      	ldr	r2, [pc, #40]	; (800da48 <prvTaskIsTaskSuspended+0x5c>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d10a      	bne.n	800da38 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da26:	4a09      	ldr	r2, [pc, #36]	; (800da4c <prvTaskIsTaskSuspended+0x60>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d005      	beq.n	800da38 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da30:	2b00      	cmp	r3, #0
 800da32:	d101      	bne.n	800da38 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800da34:	2301      	movs	r3, #1
 800da36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da38:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800da3a:	4618      	mov	r0, r3
 800da3c:	371c      	adds	r7, #28
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop
 800da48:	20001b14 	.word	0x20001b14
 800da4c:	20001ae8 	.word	0x20001ae8

0800da50 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d10a      	bne.n	800da78 <vTaskResume+0x28>
	__asm volatile
 800da62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da66:	f383 8811 	msr	BASEPRI, r3
 800da6a:	f3bf 8f6f 	isb	sy
 800da6e:	f3bf 8f4f 	dsb	sy
 800da72:	60bb      	str	r3, [r7, #8]
}
 800da74:	bf00      	nop
 800da76:	e7fe      	b.n	800da76 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800da78:	4b20      	ldr	r3, [pc, #128]	; (800dafc <vTaskResume+0xac>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	68fa      	ldr	r2, [r7, #12]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d038      	beq.n	800daf4 <vTaskResume+0xa4>
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d035      	beq.n	800daf4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800da88:	f001 f9e4 	bl	800ee54 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800da8c:	68f8      	ldr	r0, [r7, #12]
 800da8e:	f7ff ffad 	bl	800d9ec <prvTaskIsTaskSuspended>
 800da92:	4603      	mov	r3, r0
 800da94:	2b00      	cmp	r3, #0
 800da96:	d02b      	beq.n	800daf0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	3304      	adds	r3, #4
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7ff f809 	bl	800cab4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daa6:	4b16      	ldr	r3, [pc, #88]	; (800db00 <vTaskResume+0xb0>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d903      	bls.n	800dab6 <vTaskResume+0x66>
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab2:	4a13      	ldr	r2, [pc, #76]	; (800db00 <vTaskResume+0xb0>)
 800dab4:	6013      	str	r3, [r2, #0]
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daba:	4613      	mov	r3, r2
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	4413      	add	r3, r2
 800dac0:	009b      	lsls	r3, r3, #2
 800dac2:	4a10      	ldr	r2, [pc, #64]	; (800db04 <vTaskResume+0xb4>)
 800dac4:	441a      	add	r2, r3
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	3304      	adds	r3, #4
 800daca:	4619      	mov	r1, r3
 800dacc:	4610      	mov	r0, r2
 800dace:	f7fe ff94 	bl	800c9fa <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dad6:	4b09      	ldr	r3, [pc, #36]	; (800dafc <vTaskResume+0xac>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dadc:	429a      	cmp	r2, r3
 800dade:	d307      	bcc.n	800daf0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800dae0:	4b09      	ldr	r3, [pc, #36]	; (800db08 <vTaskResume+0xb8>)
 800dae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dae6:	601a      	str	r2, [r3, #0]
 800dae8:	f3bf 8f4f 	dsb	sy
 800daec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800daf0:	f001 f9e0 	bl	800eeb4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800daf4:	bf00      	nop
 800daf6:	3710      	adds	r7, #16
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}
 800dafc:	20001654 	.word	0x20001654
 800db00:	20001b30 	.word	0x20001b30
 800db04:	20001658 	.word	0x20001658
 800db08:	e000ed04 	.word	0xe000ed04

0800db0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b08a      	sub	sp, #40	; 0x28
 800db10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800db12:	2300      	movs	r3, #0
 800db14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800db16:	2300      	movs	r3, #0
 800db18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800db1a:	463a      	mov	r2, r7
 800db1c:	1d39      	adds	r1, r7, #4
 800db1e:	f107 0308 	add.w	r3, r7, #8
 800db22:	4618      	mov	r0, r3
 800db24:	f7fe ff08 	bl	800c938 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800db28:	6839      	ldr	r1, [r7, #0]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	68ba      	ldr	r2, [r7, #8]
 800db2e:	9202      	str	r2, [sp, #8]
 800db30:	9301      	str	r3, [sp, #4]
 800db32:	2300      	movs	r3, #0
 800db34:	9300      	str	r3, [sp, #0]
 800db36:	2300      	movs	r3, #0
 800db38:	460a      	mov	r2, r1
 800db3a:	4921      	ldr	r1, [pc, #132]	; (800dbc0 <vTaskStartScheduler+0xb4>)
 800db3c:	4821      	ldr	r0, [pc, #132]	; (800dbc4 <vTaskStartScheduler+0xb8>)
 800db3e:	f7ff fd09 	bl	800d554 <xTaskCreateStatic>
 800db42:	4603      	mov	r3, r0
 800db44:	4a20      	ldr	r2, [pc, #128]	; (800dbc8 <vTaskStartScheduler+0xbc>)
 800db46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800db48:	4b1f      	ldr	r3, [pc, #124]	; (800dbc8 <vTaskStartScheduler+0xbc>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d002      	beq.n	800db56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800db50:	2301      	movs	r3, #1
 800db52:	617b      	str	r3, [r7, #20]
 800db54:	e001      	b.n	800db5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800db56:	2300      	movs	r3, #0
 800db58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	d102      	bne.n	800db66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800db60:	f000 fcfc 	bl	800e55c <xTimerCreateTimerTask>
 800db64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d116      	bne.n	800db9a <vTaskStartScheduler+0x8e>
	__asm volatile
 800db6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db70:	f383 8811 	msr	BASEPRI, r3
 800db74:	f3bf 8f6f 	isb	sy
 800db78:	f3bf 8f4f 	dsb	sy
 800db7c:	613b      	str	r3, [r7, #16]
}
 800db7e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800db80:	4b12      	ldr	r3, [pc, #72]	; (800dbcc <vTaskStartScheduler+0xc0>)
 800db82:	f04f 32ff 	mov.w	r2, #4294967295
 800db86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800db88:	4b11      	ldr	r3, [pc, #68]	; (800dbd0 <vTaskStartScheduler+0xc4>)
 800db8a:	2201      	movs	r2, #1
 800db8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800db8e:	4b11      	ldr	r3, [pc, #68]	; (800dbd4 <vTaskStartScheduler+0xc8>)
 800db90:	2200      	movs	r2, #0
 800db92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800db94:	f001 f8bc 	bl	800ed10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800db98:	e00e      	b.n	800dbb8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dba0:	d10a      	bne.n	800dbb8 <vTaskStartScheduler+0xac>
	__asm volatile
 800dba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba6:	f383 8811 	msr	BASEPRI, r3
 800dbaa:	f3bf 8f6f 	isb	sy
 800dbae:	f3bf 8f4f 	dsb	sy
 800dbb2:	60fb      	str	r3, [r7, #12]
}
 800dbb4:	bf00      	nop
 800dbb6:	e7fe      	b.n	800dbb6 <vTaskStartScheduler+0xaa>
}
 800dbb8:	bf00      	nop
 800dbba:	3718      	adds	r7, #24
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}
 800dbc0:	08010bf4 	.word	0x08010bf4
 800dbc4:	0800e1f1 	.word	0x0800e1f1
 800dbc8:	20001b4c 	.word	0x20001b4c
 800dbcc:	20001b48 	.word	0x20001b48
 800dbd0:	20001b34 	.word	0x20001b34
 800dbd4:	20001b2c 	.word	0x20001b2c

0800dbd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dbd8:	b480      	push	{r7}
 800dbda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dbdc:	4b04      	ldr	r3, [pc, #16]	; (800dbf0 <vTaskSuspendAll+0x18>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	4a03      	ldr	r2, [pc, #12]	; (800dbf0 <vTaskSuspendAll+0x18>)
 800dbe4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dbe6:	bf00      	nop
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr
 800dbf0:	20001b50 	.word	0x20001b50

0800dbf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dc02:	4b42      	ldr	r3, [pc, #264]	; (800dd0c <xTaskResumeAll+0x118>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d10a      	bne.n	800dc20 <xTaskResumeAll+0x2c>
	__asm volatile
 800dc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc0e:	f383 8811 	msr	BASEPRI, r3
 800dc12:	f3bf 8f6f 	isb	sy
 800dc16:	f3bf 8f4f 	dsb	sy
 800dc1a:	603b      	str	r3, [r7, #0]
}
 800dc1c:	bf00      	nop
 800dc1e:	e7fe      	b.n	800dc1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dc20:	f001 f918 	bl	800ee54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dc24:	4b39      	ldr	r3, [pc, #228]	; (800dd0c <xTaskResumeAll+0x118>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	3b01      	subs	r3, #1
 800dc2a:	4a38      	ldr	r2, [pc, #224]	; (800dd0c <xTaskResumeAll+0x118>)
 800dc2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc2e:	4b37      	ldr	r3, [pc, #220]	; (800dd0c <xTaskResumeAll+0x118>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d162      	bne.n	800dcfc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dc36:	4b36      	ldr	r3, [pc, #216]	; (800dd10 <xTaskResumeAll+0x11c>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d05e      	beq.n	800dcfc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc3e:	e02f      	b.n	800dca0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc40:	4b34      	ldr	r3, [pc, #208]	; (800dd14 <xTaskResumeAll+0x120>)
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	68db      	ldr	r3, [r3, #12]
 800dc46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	3318      	adds	r3, #24
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7fe ff31 	bl	800cab4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	3304      	adds	r3, #4
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7fe ff2c 	bl	800cab4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc60:	4b2d      	ldr	r3, [pc, #180]	; (800dd18 <xTaskResumeAll+0x124>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d903      	bls.n	800dc70 <xTaskResumeAll+0x7c>
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc6c:	4a2a      	ldr	r2, [pc, #168]	; (800dd18 <xTaskResumeAll+0x124>)
 800dc6e:	6013      	str	r3, [r2, #0]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc74:	4613      	mov	r3, r2
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	4413      	add	r3, r2
 800dc7a:	009b      	lsls	r3, r3, #2
 800dc7c:	4a27      	ldr	r2, [pc, #156]	; (800dd1c <xTaskResumeAll+0x128>)
 800dc7e:	441a      	add	r2, r3
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	3304      	adds	r3, #4
 800dc84:	4619      	mov	r1, r3
 800dc86:	4610      	mov	r0, r2
 800dc88:	f7fe feb7 	bl	800c9fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc90:	4b23      	ldr	r3, [pc, #140]	; (800dd20 <xTaskResumeAll+0x12c>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d302      	bcc.n	800dca0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dc9a:	4b22      	ldr	r3, [pc, #136]	; (800dd24 <xTaskResumeAll+0x130>)
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dca0:	4b1c      	ldr	r3, [pc, #112]	; (800dd14 <xTaskResumeAll+0x120>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d1cb      	bne.n	800dc40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d001      	beq.n	800dcb2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dcae:	f000 fb55 	bl	800e35c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dcb2:	4b1d      	ldr	r3, [pc, #116]	; (800dd28 <xTaskResumeAll+0x134>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d010      	beq.n	800dce0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dcbe:	f000 f847 	bl	800dd50 <xTaskIncrementTick>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d002      	beq.n	800dcce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dcc8:	4b16      	ldr	r3, [pc, #88]	; (800dd24 <xTaskResumeAll+0x130>)
 800dcca:	2201      	movs	r2, #1
 800dccc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	3b01      	subs	r3, #1
 800dcd2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d1f1      	bne.n	800dcbe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dcda:	4b13      	ldr	r3, [pc, #76]	; (800dd28 <xTaskResumeAll+0x134>)
 800dcdc:	2200      	movs	r2, #0
 800dcde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dce0:	4b10      	ldr	r3, [pc, #64]	; (800dd24 <xTaskResumeAll+0x130>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d009      	beq.n	800dcfc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dce8:	2301      	movs	r3, #1
 800dcea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dcec:	4b0f      	ldr	r3, [pc, #60]	; (800dd2c <xTaskResumeAll+0x138>)
 800dcee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcf2:	601a      	str	r2, [r3, #0]
 800dcf4:	f3bf 8f4f 	dsb	sy
 800dcf8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dcfc:	f001 f8da 	bl	800eeb4 <vPortExitCritical>

	return xAlreadyYielded;
 800dd00:	68bb      	ldr	r3, [r7, #8]
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3710      	adds	r7, #16
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}
 800dd0a:	bf00      	nop
 800dd0c:	20001b50 	.word	0x20001b50
 800dd10:	20001b28 	.word	0x20001b28
 800dd14:	20001ae8 	.word	0x20001ae8
 800dd18:	20001b30 	.word	0x20001b30
 800dd1c:	20001658 	.word	0x20001658
 800dd20:	20001654 	.word	0x20001654
 800dd24:	20001b3c 	.word	0x20001b3c
 800dd28:	20001b38 	.word	0x20001b38
 800dd2c:	e000ed04 	.word	0xe000ed04

0800dd30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dd30:	b480      	push	{r7}
 800dd32:	b083      	sub	sp, #12
 800dd34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dd36:	4b05      	ldr	r3, [pc, #20]	; (800dd4c <xTaskGetTickCount+0x1c>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dd3c:	687b      	ldr	r3, [r7, #4]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	370c      	adds	r7, #12
 800dd42:	46bd      	mov	sp, r7
 800dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd48:	4770      	bx	lr
 800dd4a:	bf00      	nop
 800dd4c:	20001b2c 	.word	0x20001b2c

0800dd50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b086      	sub	sp, #24
 800dd54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dd56:	2300      	movs	r3, #0
 800dd58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd5a:	4b4f      	ldr	r3, [pc, #316]	; (800de98 <xTaskIncrementTick+0x148>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	f040 808f 	bne.w	800de82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dd64:	4b4d      	ldr	r3, [pc, #308]	; (800de9c <xTaskIncrementTick+0x14c>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dd6c:	4a4b      	ldr	r2, [pc, #300]	; (800de9c <xTaskIncrementTick+0x14c>)
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d120      	bne.n	800ddba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dd78:	4b49      	ldr	r3, [pc, #292]	; (800dea0 <xTaskIncrementTick+0x150>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00a      	beq.n	800dd98 <xTaskIncrementTick+0x48>
	__asm volatile
 800dd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd86:	f383 8811 	msr	BASEPRI, r3
 800dd8a:	f3bf 8f6f 	isb	sy
 800dd8e:	f3bf 8f4f 	dsb	sy
 800dd92:	603b      	str	r3, [r7, #0]
}
 800dd94:	bf00      	nop
 800dd96:	e7fe      	b.n	800dd96 <xTaskIncrementTick+0x46>
 800dd98:	4b41      	ldr	r3, [pc, #260]	; (800dea0 <xTaskIncrementTick+0x150>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	60fb      	str	r3, [r7, #12]
 800dd9e:	4b41      	ldr	r3, [pc, #260]	; (800dea4 <xTaskIncrementTick+0x154>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4a3f      	ldr	r2, [pc, #252]	; (800dea0 <xTaskIncrementTick+0x150>)
 800dda4:	6013      	str	r3, [r2, #0]
 800dda6:	4a3f      	ldr	r2, [pc, #252]	; (800dea4 <xTaskIncrementTick+0x154>)
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	6013      	str	r3, [r2, #0]
 800ddac:	4b3e      	ldr	r3, [pc, #248]	; (800dea8 <xTaskIncrementTick+0x158>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	4a3d      	ldr	r2, [pc, #244]	; (800dea8 <xTaskIncrementTick+0x158>)
 800ddb4:	6013      	str	r3, [r2, #0]
 800ddb6:	f000 fad1 	bl	800e35c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ddba:	4b3c      	ldr	r3, [pc, #240]	; (800deac <xTaskIncrementTick+0x15c>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	693a      	ldr	r2, [r7, #16]
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d349      	bcc.n	800de58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ddc4:	4b36      	ldr	r3, [pc, #216]	; (800dea0 <xTaskIncrementTick+0x150>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d104      	bne.n	800ddd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddce:	4b37      	ldr	r3, [pc, #220]	; (800deac <xTaskIncrementTick+0x15c>)
 800ddd0:	f04f 32ff 	mov.w	r2, #4294967295
 800ddd4:	601a      	str	r2, [r3, #0]
					break;
 800ddd6:	e03f      	b.n	800de58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddd8:	4b31      	ldr	r3, [pc, #196]	; (800dea0 <xTaskIncrementTick+0x150>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	68db      	ldr	r3, [r3, #12]
 800dde0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dde8:	693a      	ldr	r2, [r7, #16]
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d203      	bcs.n	800ddf8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ddf0:	4a2e      	ldr	r2, [pc, #184]	; (800deac <xTaskIncrementTick+0x15c>)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ddf6:	e02f      	b.n	800de58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	3304      	adds	r3, #4
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7fe fe59 	bl	800cab4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de06:	2b00      	cmp	r3, #0
 800de08:	d004      	beq.n	800de14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	3318      	adds	r3, #24
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fe fe50 	bl	800cab4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de18:	4b25      	ldr	r3, [pc, #148]	; (800deb0 <xTaskIncrementTick+0x160>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d903      	bls.n	800de28 <xTaskIncrementTick+0xd8>
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de24:	4a22      	ldr	r2, [pc, #136]	; (800deb0 <xTaskIncrementTick+0x160>)
 800de26:	6013      	str	r3, [r2, #0]
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de2c:	4613      	mov	r3, r2
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	4413      	add	r3, r2
 800de32:	009b      	lsls	r3, r3, #2
 800de34:	4a1f      	ldr	r2, [pc, #124]	; (800deb4 <xTaskIncrementTick+0x164>)
 800de36:	441a      	add	r2, r3
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	3304      	adds	r3, #4
 800de3c:	4619      	mov	r1, r3
 800de3e:	4610      	mov	r0, r2
 800de40:	f7fe fddb 	bl	800c9fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de48:	4b1b      	ldr	r3, [pc, #108]	; (800deb8 <xTaskIncrementTick+0x168>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de4e:	429a      	cmp	r2, r3
 800de50:	d3b8      	bcc.n	800ddc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800de52:	2301      	movs	r3, #1
 800de54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de56:	e7b5      	b.n	800ddc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800de58:	4b17      	ldr	r3, [pc, #92]	; (800deb8 <xTaskIncrementTick+0x168>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de5e:	4915      	ldr	r1, [pc, #84]	; (800deb4 <xTaskIncrementTick+0x164>)
 800de60:	4613      	mov	r3, r2
 800de62:	009b      	lsls	r3, r3, #2
 800de64:	4413      	add	r3, r2
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	440b      	add	r3, r1
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2b01      	cmp	r3, #1
 800de6e:	d901      	bls.n	800de74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800de70:	2301      	movs	r3, #1
 800de72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800de74:	4b11      	ldr	r3, [pc, #68]	; (800debc <xTaskIncrementTick+0x16c>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d007      	beq.n	800de8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800de7c:	2301      	movs	r3, #1
 800de7e:	617b      	str	r3, [r7, #20]
 800de80:	e004      	b.n	800de8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800de82:	4b0f      	ldr	r3, [pc, #60]	; (800dec0 <xTaskIncrementTick+0x170>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	3301      	adds	r3, #1
 800de88:	4a0d      	ldr	r2, [pc, #52]	; (800dec0 <xTaskIncrementTick+0x170>)
 800de8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800de8c:	697b      	ldr	r3, [r7, #20]
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3718      	adds	r7, #24
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	20001b50 	.word	0x20001b50
 800de9c:	20001b2c 	.word	0x20001b2c
 800dea0:	20001ae0 	.word	0x20001ae0
 800dea4:	20001ae4 	.word	0x20001ae4
 800dea8:	20001b40 	.word	0x20001b40
 800deac:	20001b48 	.word	0x20001b48
 800deb0:	20001b30 	.word	0x20001b30
 800deb4:	20001658 	.word	0x20001658
 800deb8:	20001654 	.word	0x20001654
 800debc:	20001b3c 	.word	0x20001b3c
 800dec0:	20001b38 	.word	0x20001b38

0800dec4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dec4:	b480      	push	{r7}
 800dec6:	b085      	sub	sp, #20
 800dec8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800deca:	4b28      	ldr	r3, [pc, #160]	; (800df6c <vTaskSwitchContext+0xa8>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d003      	beq.n	800deda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ded2:	4b27      	ldr	r3, [pc, #156]	; (800df70 <vTaskSwitchContext+0xac>)
 800ded4:	2201      	movs	r2, #1
 800ded6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ded8:	e041      	b.n	800df5e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800deda:	4b25      	ldr	r3, [pc, #148]	; (800df70 <vTaskSwitchContext+0xac>)
 800dedc:	2200      	movs	r2, #0
 800dede:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dee0:	4b24      	ldr	r3, [pc, #144]	; (800df74 <vTaskSwitchContext+0xb0>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	60fb      	str	r3, [r7, #12]
 800dee6:	e010      	b.n	800df0a <vTaskSwitchContext+0x46>
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d10a      	bne.n	800df04 <vTaskSwitchContext+0x40>
	__asm volatile
 800deee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def2:	f383 8811 	msr	BASEPRI, r3
 800def6:	f3bf 8f6f 	isb	sy
 800defa:	f3bf 8f4f 	dsb	sy
 800defe:	607b      	str	r3, [r7, #4]
}
 800df00:	bf00      	nop
 800df02:	e7fe      	b.n	800df02 <vTaskSwitchContext+0x3e>
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	3b01      	subs	r3, #1
 800df08:	60fb      	str	r3, [r7, #12]
 800df0a:	491b      	ldr	r1, [pc, #108]	; (800df78 <vTaskSwitchContext+0xb4>)
 800df0c:	68fa      	ldr	r2, [r7, #12]
 800df0e:	4613      	mov	r3, r2
 800df10:	009b      	lsls	r3, r3, #2
 800df12:	4413      	add	r3, r2
 800df14:	009b      	lsls	r3, r3, #2
 800df16:	440b      	add	r3, r1
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d0e4      	beq.n	800dee8 <vTaskSwitchContext+0x24>
 800df1e:	68fa      	ldr	r2, [r7, #12]
 800df20:	4613      	mov	r3, r2
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	4413      	add	r3, r2
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	4a13      	ldr	r2, [pc, #76]	; (800df78 <vTaskSwitchContext+0xb4>)
 800df2a:	4413      	add	r3, r2
 800df2c:	60bb      	str	r3, [r7, #8]
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	685a      	ldr	r2, [r3, #4]
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	605a      	str	r2, [r3, #4]
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	685a      	ldr	r2, [r3, #4]
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	3308      	adds	r3, #8
 800df40:	429a      	cmp	r2, r3
 800df42:	d104      	bne.n	800df4e <vTaskSwitchContext+0x8a>
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	685a      	ldr	r2, [r3, #4]
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	605a      	str	r2, [r3, #4]
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	68db      	ldr	r3, [r3, #12]
 800df54:	4a09      	ldr	r2, [pc, #36]	; (800df7c <vTaskSwitchContext+0xb8>)
 800df56:	6013      	str	r3, [r2, #0]
 800df58:	4a06      	ldr	r2, [pc, #24]	; (800df74 <vTaskSwitchContext+0xb0>)
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6013      	str	r3, [r2, #0]
}
 800df5e:	bf00      	nop
 800df60:	3714      	adds	r7, #20
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr
 800df6a:	bf00      	nop
 800df6c:	20001b50 	.word	0x20001b50
 800df70:	20001b3c 	.word	0x20001b3c
 800df74:	20001b30 	.word	0x20001b30
 800df78:	20001658 	.word	0x20001658
 800df7c:	20001654 	.word	0x20001654

0800df80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b084      	sub	sp, #16
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d10a      	bne.n	800dfa6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800df90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df94:	f383 8811 	msr	BASEPRI, r3
 800df98:	f3bf 8f6f 	isb	sy
 800df9c:	f3bf 8f4f 	dsb	sy
 800dfa0:	60fb      	str	r3, [r7, #12]
}
 800dfa2:	bf00      	nop
 800dfa4:	e7fe      	b.n	800dfa4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dfa6:	4b07      	ldr	r3, [pc, #28]	; (800dfc4 <vTaskPlaceOnEventList+0x44>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	3318      	adds	r3, #24
 800dfac:	4619      	mov	r1, r3
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f7fe fd47 	bl	800ca42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dfb4:	2101      	movs	r1, #1
 800dfb6:	6838      	ldr	r0, [r7, #0]
 800dfb8:	f000 fa7c 	bl	800e4b4 <prvAddCurrentTaskToDelayedList>
}
 800dfbc:	bf00      	nop
 800dfbe:	3710      	adds	r7, #16
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	20001654 	.word	0x20001654

0800dfc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b086      	sub	sp, #24
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d10a      	bne.n	800dff0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfde:	f383 8811 	msr	BASEPRI, r3
 800dfe2:	f3bf 8f6f 	isb	sy
 800dfe6:	f3bf 8f4f 	dsb	sy
 800dfea:	617b      	str	r3, [r7, #20]
}
 800dfec:	bf00      	nop
 800dfee:	e7fe      	b.n	800dfee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dff0:	4b0a      	ldr	r3, [pc, #40]	; (800e01c <vTaskPlaceOnEventListRestricted+0x54>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	3318      	adds	r3, #24
 800dff6:	4619      	mov	r1, r3
 800dff8:	68f8      	ldr	r0, [r7, #12]
 800dffa:	f7fe fcfe 	bl	800c9fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d002      	beq.n	800e00a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e004:	f04f 33ff 	mov.w	r3, #4294967295
 800e008:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e00a:	6879      	ldr	r1, [r7, #4]
 800e00c:	68b8      	ldr	r0, [r7, #8]
 800e00e:	f000 fa51 	bl	800e4b4 <prvAddCurrentTaskToDelayedList>
	}
 800e012:	bf00      	nop
 800e014:	3718      	adds	r7, #24
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}
 800e01a:	bf00      	nop
 800e01c:	20001654 	.word	0x20001654

0800e020 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b086      	sub	sp, #24
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	68db      	ldr	r3, [r3, #12]
 800e02c:	68db      	ldr	r3, [r3, #12]
 800e02e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10a      	bne.n	800e04c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e03a:	f383 8811 	msr	BASEPRI, r3
 800e03e:	f3bf 8f6f 	isb	sy
 800e042:	f3bf 8f4f 	dsb	sy
 800e046:	60fb      	str	r3, [r7, #12]
}
 800e048:	bf00      	nop
 800e04a:	e7fe      	b.n	800e04a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	3318      	adds	r3, #24
 800e050:	4618      	mov	r0, r3
 800e052:	f7fe fd2f 	bl	800cab4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e056:	4b1e      	ldr	r3, [pc, #120]	; (800e0d0 <xTaskRemoveFromEventList+0xb0>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d11d      	bne.n	800e09a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	3304      	adds	r3, #4
 800e062:	4618      	mov	r0, r3
 800e064:	f7fe fd26 	bl	800cab4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e06c:	4b19      	ldr	r3, [pc, #100]	; (800e0d4 <xTaskRemoveFromEventList+0xb4>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	429a      	cmp	r2, r3
 800e072:	d903      	bls.n	800e07c <xTaskRemoveFromEventList+0x5c>
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e078:	4a16      	ldr	r2, [pc, #88]	; (800e0d4 <xTaskRemoveFromEventList+0xb4>)
 800e07a:	6013      	str	r3, [r2, #0]
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e080:	4613      	mov	r3, r2
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	4413      	add	r3, r2
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	4a13      	ldr	r2, [pc, #76]	; (800e0d8 <xTaskRemoveFromEventList+0xb8>)
 800e08a:	441a      	add	r2, r3
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	3304      	adds	r3, #4
 800e090:	4619      	mov	r1, r3
 800e092:	4610      	mov	r0, r2
 800e094:	f7fe fcb1 	bl	800c9fa <vListInsertEnd>
 800e098:	e005      	b.n	800e0a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	3318      	adds	r3, #24
 800e09e:	4619      	mov	r1, r3
 800e0a0:	480e      	ldr	r0, [pc, #56]	; (800e0dc <xTaskRemoveFromEventList+0xbc>)
 800e0a2:	f7fe fcaa 	bl	800c9fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0aa:	4b0d      	ldr	r3, [pc, #52]	; (800e0e0 <xTaskRemoveFromEventList+0xc0>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d905      	bls.n	800e0c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e0b8:	4b0a      	ldr	r3, [pc, #40]	; (800e0e4 <xTaskRemoveFromEventList+0xc4>)
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	601a      	str	r2, [r3, #0]
 800e0be:	e001      	b.n	800e0c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e0c4:	697b      	ldr	r3, [r7, #20]
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3718      	adds	r7, #24
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	20001b50 	.word	0x20001b50
 800e0d4:	20001b30 	.word	0x20001b30
 800e0d8:	20001658 	.word	0x20001658
 800e0dc:	20001ae8 	.word	0x20001ae8
 800e0e0:	20001654 	.word	0x20001654
 800e0e4:	20001b3c 	.word	0x20001b3c

0800e0e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b083      	sub	sp, #12
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e0f0:	4b06      	ldr	r3, [pc, #24]	; (800e10c <vTaskInternalSetTimeOutState+0x24>)
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e0f8:	4b05      	ldr	r3, [pc, #20]	; (800e110 <vTaskInternalSetTimeOutState+0x28>)
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	605a      	str	r2, [r3, #4]
}
 800e100:	bf00      	nop
 800e102:	370c      	adds	r7, #12
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr
 800e10c:	20001b40 	.word	0x20001b40
 800e110:	20001b2c 	.word	0x20001b2c

0800e114 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b088      	sub	sp, #32
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d10a      	bne.n	800e13a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e128:	f383 8811 	msr	BASEPRI, r3
 800e12c:	f3bf 8f6f 	isb	sy
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	613b      	str	r3, [r7, #16]
}
 800e136:	bf00      	nop
 800e138:	e7fe      	b.n	800e138 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d10a      	bne.n	800e156 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e144:	f383 8811 	msr	BASEPRI, r3
 800e148:	f3bf 8f6f 	isb	sy
 800e14c:	f3bf 8f4f 	dsb	sy
 800e150:	60fb      	str	r3, [r7, #12]
}
 800e152:	bf00      	nop
 800e154:	e7fe      	b.n	800e154 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e156:	f000 fe7d 	bl	800ee54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e15a:	4b1d      	ldr	r3, [pc, #116]	; (800e1d0 <xTaskCheckForTimeOut+0xbc>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	69ba      	ldr	r2, [r7, #24]
 800e166:	1ad3      	subs	r3, r2, r3
 800e168:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e172:	d102      	bne.n	800e17a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e174:	2300      	movs	r3, #0
 800e176:	61fb      	str	r3, [r7, #28]
 800e178:	e023      	b.n	800e1c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	4b15      	ldr	r3, [pc, #84]	; (800e1d4 <xTaskCheckForTimeOut+0xc0>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	429a      	cmp	r2, r3
 800e184:	d007      	beq.n	800e196 <xTaskCheckForTimeOut+0x82>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	685b      	ldr	r3, [r3, #4]
 800e18a:	69ba      	ldr	r2, [r7, #24]
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d302      	bcc.n	800e196 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e190:	2301      	movs	r3, #1
 800e192:	61fb      	str	r3, [r7, #28]
 800e194:	e015      	b.n	800e1c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	697a      	ldr	r2, [r7, #20]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d20b      	bcs.n	800e1b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	1ad2      	subs	r2, r2, r3
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f7ff ff9b 	bl	800e0e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	61fb      	str	r3, [r7, #28]
 800e1b6:	e004      	b.n	800e1c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e1be:	2301      	movs	r3, #1
 800e1c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e1c2:	f000 fe77 	bl	800eeb4 <vPortExitCritical>

	return xReturn;
 800e1c6:	69fb      	ldr	r3, [r7, #28]
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3720      	adds	r7, #32
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	20001b2c 	.word	0x20001b2c
 800e1d4:	20001b40 	.word	0x20001b40

0800e1d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e1d8:	b480      	push	{r7}
 800e1da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e1dc:	4b03      	ldr	r3, [pc, #12]	; (800e1ec <vTaskMissedYield+0x14>)
 800e1de:	2201      	movs	r2, #1
 800e1e0:	601a      	str	r2, [r3, #0]
}
 800e1e2:	bf00      	nop
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr
 800e1ec:	20001b3c 	.word	0x20001b3c

0800e1f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e1f8:	f000 f852 	bl	800e2a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e1fc:	4b06      	ldr	r3, [pc, #24]	; (800e218 <prvIdleTask+0x28>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	2b01      	cmp	r3, #1
 800e202:	d9f9      	bls.n	800e1f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e204:	4b05      	ldr	r3, [pc, #20]	; (800e21c <prvIdleTask+0x2c>)
 800e206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e20a:	601a      	str	r2, [r3, #0]
 800e20c:	f3bf 8f4f 	dsb	sy
 800e210:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e214:	e7f0      	b.n	800e1f8 <prvIdleTask+0x8>
 800e216:	bf00      	nop
 800e218:	20001658 	.word	0x20001658
 800e21c:	e000ed04 	.word	0xe000ed04

0800e220 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b082      	sub	sp, #8
 800e224:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e226:	2300      	movs	r3, #0
 800e228:	607b      	str	r3, [r7, #4]
 800e22a:	e00c      	b.n	800e246 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e22c:	687a      	ldr	r2, [r7, #4]
 800e22e:	4613      	mov	r3, r2
 800e230:	009b      	lsls	r3, r3, #2
 800e232:	4413      	add	r3, r2
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	4a12      	ldr	r2, [pc, #72]	; (800e280 <prvInitialiseTaskLists+0x60>)
 800e238:	4413      	add	r3, r2
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7fe fbb0 	bl	800c9a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	3301      	adds	r3, #1
 800e244:	607b      	str	r3, [r7, #4]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2b37      	cmp	r3, #55	; 0x37
 800e24a:	d9ef      	bls.n	800e22c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e24c:	480d      	ldr	r0, [pc, #52]	; (800e284 <prvInitialiseTaskLists+0x64>)
 800e24e:	f7fe fba7 	bl	800c9a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e252:	480d      	ldr	r0, [pc, #52]	; (800e288 <prvInitialiseTaskLists+0x68>)
 800e254:	f7fe fba4 	bl	800c9a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e258:	480c      	ldr	r0, [pc, #48]	; (800e28c <prvInitialiseTaskLists+0x6c>)
 800e25a:	f7fe fba1 	bl	800c9a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e25e:	480c      	ldr	r0, [pc, #48]	; (800e290 <prvInitialiseTaskLists+0x70>)
 800e260:	f7fe fb9e 	bl	800c9a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e264:	480b      	ldr	r0, [pc, #44]	; (800e294 <prvInitialiseTaskLists+0x74>)
 800e266:	f7fe fb9b 	bl	800c9a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e26a:	4b0b      	ldr	r3, [pc, #44]	; (800e298 <prvInitialiseTaskLists+0x78>)
 800e26c:	4a05      	ldr	r2, [pc, #20]	; (800e284 <prvInitialiseTaskLists+0x64>)
 800e26e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e270:	4b0a      	ldr	r3, [pc, #40]	; (800e29c <prvInitialiseTaskLists+0x7c>)
 800e272:	4a05      	ldr	r2, [pc, #20]	; (800e288 <prvInitialiseTaskLists+0x68>)
 800e274:	601a      	str	r2, [r3, #0]
}
 800e276:	bf00      	nop
 800e278:	3708      	adds	r7, #8
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop
 800e280:	20001658 	.word	0x20001658
 800e284:	20001ab8 	.word	0x20001ab8
 800e288:	20001acc 	.word	0x20001acc
 800e28c:	20001ae8 	.word	0x20001ae8
 800e290:	20001afc 	.word	0x20001afc
 800e294:	20001b14 	.word	0x20001b14
 800e298:	20001ae0 	.word	0x20001ae0
 800e29c:	20001ae4 	.word	0x20001ae4

0800e2a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b082      	sub	sp, #8
 800e2a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2a6:	e019      	b.n	800e2dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e2a8:	f000 fdd4 	bl	800ee54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2ac:	4b10      	ldr	r3, [pc, #64]	; (800e2f0 <prvCheckTasksWaitingTermination+0x50>)
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	68db      	ldr	r3, [r3, #12]
 800e2b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	3304      	adds	r3, #4
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7fe fbfb 	bl	800cab4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e2be:	4b0d      	ldr	r3, [pc, #52]	; (800e2f4 <prvCheckTasksWaitingTermination+0x54>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	3b01      	subs	r3, #1
 800e2c4:	4a0b      	ldr	r2, [pc, #44]	; (800e2f4 <prvCheckTasksWaitingTermination+0x54>)
 800e2c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e2c8:	4b0b      	ldr	r3, [pc, #44]	; (800e2f8 <prvCheckTasksWaitingTermination+0x58>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	3b01      	subs	r3, #1
 800e2ce:	4a0a      	ldr	r2, [pc, #40]	; (800e2f8 <prvCheckTasksWaitingTermination+0x58>)
 800e2d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e2d2:	f000 fdef 	bl	800eeb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 f810 	bl	800e2fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2dc:	4b06      	ldr	r3, [pc, #24]	; (800e2f8 <prvCheckTasksWaitingTermination+0x58>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d1e1      	bne.n	800e2a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e2e4:	bf00      	nop
 800e2e6:	bf00      	nop
 800e2e8:	3708      	adds	r7, #8
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	20001afc 	.word	0x20001afc
 800e2f4:	20001b28 	.word	0x20001b28
 800e2f8:	20001b10 	.word	0x20001b10

0800e2fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d108      	bne.n	800e320 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e312:	4618      	mov	r0, r3
 800e314:	f000 ff8c 	bl	800f230 <vPortFree>
				vPortFree( pxTCB );
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 ff89 	bl	800f230 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e31e:	e018      	b.n	800e352 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800e326:	2b01      	cmp	r3, #1
 800e328:	d103      	bne.n	800e332 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f000 ff80 	bl	800f230 <vPortFree>
	}
 800e330:	e00f      	b.n	800e352 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800e338:	2b02      	cmp	r3, #2
 800e33a:	d00a      	beq.n	800e352 <prvDeleteTCB+0x56>
	__asm volatile
 800e33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e340:	f383 8811 	msr	BASEPRI, r3
 800e344:	f3bf 8f6f 	isb	sy
 800e348:	f3bf 8f4f 	dsb	sy
 800e34c:	60fb      	str	r3, [r7, #12]
}
 800e34e:	bf00      	nop
 800e350:	e7fe      	b.n	800e350 <prvDeleteTCB+0x54>
	}
 800e352:	bf00      	nop
 800e354:	3710      	adds	r7, #16
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
	...

0800e35c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e362:	4b0c      	ldr	r3, [pc, #48]	; (800e394 <prvResetNextTaskUnblockTime+0x38>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d104      	bne.n	800e376 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e36c:	4b0a      	ldr	r3, [pc, #40]	; (800e398 <prvResetNextTaskUnblockTime+0x3c>)
 800e36e:	f04f 32ff 	mov.w	r2, #4294967295
 800e372:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e374:	e008      	b.n	800e388 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e376:	4b07      	ldr	r3, [pc, #28]	; (800e394 <prvResetNextTaskUnblockTime+0x38>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	68db      	ldr	r3, [r3, #12]
 800e37c:	68db      	ldr	r3, [r3, #12]
 800e37e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	685b      	ldr	r3, [r3, #4]
 800e384:	4a04      	ldr	r2, [pc, #16]	; (800e398 <prvResetNextTaskUnblockTime+0x3c>)
 800e386:	6013      	str	r3, [r2, #0]
}
 800e388:	bf00      	nop
 800e38a:	370c      	adds	r7, #12
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr
 800e394:	20001ae0 	.word	0x20001ae0
 800e398:	20001b48 	.word	0x20001b48

0800e39c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e39c:	b480      	push	{r7}
 800e39e:	b083      	sub	sp, #12
 800e3a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e3a2:	4b0b      	ldr	r3, [pc, #44]	; (800e3d0 <xTaskGetSchedulerState+0x34>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d102      	bne.n	800e3b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	607b      	str	r3, [r7, #4]
 800e3ae:	e008      	b.n	800e3c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3b0:	4b08      	ldr	r3, [pc, #32]	; (800e3d4 <xTaskGetSchedulerState+0x38>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d102      	bne.n	800e3be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e3b8:	2302      	movs	r3, #2
 800e3ba:	607b      	str	r3, [r7, #4]
 800e3bc:	e001      	b.n	800e3c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e3c2:	687b      	ldr	r3, [r7, #4]
	}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	370c      	adds	r7, #12
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr
 800e3d0:	20001b34 	.word	0x20001b34
 800e3d4:	20001b50 	.word	0x20001b50

0800e3d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b086      	sub	sp, #24
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d056      	beq.n	800e49c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e3ee:	4b2e      	ldr	r3, [pc, #184]	; (800e4a8 <xTaskPriorityDisinherit+0xd0>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	693a      	ldr	r2, [r7, #16]
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d00a      	beq.n	800e40e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fc:	f383 8811 	msr	BASEPRI, r3
 800e400:	f3bf 8f6f 	isb	sy
 800e404:	f3bf 8f4f 	dsb	sy
 800e408:	60fb      	str	r3, [r7, #12]
}
 800e40a:	bf00      	nop
 800e40c:	e7fe      	b.n	800e40c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e412:	2b00      	cmp	r3, #0
 800e414:	d10a      	bne.n	800e42c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e41a:	f383 8811 	msr	BASEPRI, r3
 800e41e:	f3bf 8f6f 	isb	sy
 800e422:	f3bf 8f4f 	dsb	sy
 800e426:	60bb      	str	r3, [r7, #8]
}
 800e428:	bf00      	nop
 800e42a:	e7fe      	b.n	800e42a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e430:	1e5a      	subs	r2, r3, #1
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e43e:	429a      	cmp	r2, r3
 800e440:	d02c      	beq.n	800e49c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e446:	2b00      	cmp	r3, #0
 800e448:	d128      	bne.n	800e49c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	3304      	adds	r3, #4
 800e44e:	4618      	mov	r0, r3
 800e450:	f7fe fb30 	bl	800cab4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e460:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e46c:	4b0f      	ldr	r3, [pc, #60]	; (800e4ac <xTaskPriorityDisinherit+0xd4>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	429a      	cmp	r2, r3
 800e472:	d903      	bls.n	800e47c <xTaskPriorityDisinherit+0xa4>
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e478:	4a0c      	ldr	r2, [pc, #48]	; (800e4ac <xTaskPriorityDisinherit+0xd4>)
 800e47a:	6013      	str	r3, [r2, #0]
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e480:	4613      	mov	r3, r2
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	4413      	add	r3, r2
 800e486:	009b      	lsls	r3, r3, #2
 800e488:	4a09      	ldr	r2, [pc, #36]	; (800e4b0 <xTaskPriorityDisinherit+0xd8>)
 800e48a:	441a      	add	r2, r3
 800e48c:	693b      	ldr	r3, [r7, #16]
 800e48e:	3304      	adds	r3, #4
 800e490:	4619      	mov	r1, r3
 800e492:	4610      	mov	r0, r2
 800e494:	f7fe fab1 	bl	800c9fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e498:	2301      	movs	r3, #1
 800e49a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e49c:	697b      	ldr	r3, [r7, #20]
	}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3718      	adds	r7, #24
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	20001654 	.word	0x20001654
 800e4ac:	20001b30 	.word	0x20001b30
 800e4b0:	20001658 	.word	0x20001658

0800e4b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b084      	sub	sp, #16
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e4be:	4b21      	ldr	r3, [pc, #132]	; (800e544 <prvAddCurrentTaskToDelayedList+0x90>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4c4:	4b20      	ldr	r3, [pc, #128]	; (800e548 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	3304      	adds	r3, #4
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7fe faf2 	bl	800cab4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4d6:	d10a      	bne.n	800e4ee <prvAddCurrentTaskToDelayedList+0x3a>
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d007      	beq.n	800e4ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4de:	4b1a      	ldr	r3, [pc, #104]	; (800e548 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	3304      	adds	r3, #4
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	4819      	ldr	r0, [pc, #100]	; (800e54c <prvAddCurrentTaskToDelayedList+0x98>)
 800e4e8:	f7fe fa87 	bl	800c9fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e4ec:	e026      	b.n	800e53c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e4ee:	68fa      	ldr	r2, [r7, #12]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	4413      	add	r3, r2
 800e4f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e4f6:	4b14      	ldr	r3, [pc, #80]	; (800e548 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	68ba      	ldr	r2, [r7, #8]
 800e4fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e4fe:	68ba      	ldr	r2, [r7, #8]
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	429a      	cmp	r2, r3
 800e504:	d209      	bcs.n	800e51a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e506:	4b12      	ldr	r3, [pc, #72]	; (800e550 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	4b0f      	ldr	r3, [pc, #60]	; (800e548 <prvAddCurrentTaskToDelayedList+0x94>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	3304      	adds	r3, #4
 800e510:	4619      	mov	r1, r3
 800e512:	4610      	mov	r0, r2
 800e514:	f7fe fa95 	bl	800ca42 <vListInsert>
}
 800e518:	e010      	b.n	800e53c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e51a:	4b0e      	ldr	r3, [pc, #56]	; (800e554 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e51c:	681a      	ldr	r2, [r3, #0]
 800e51e:	4b0a      	ldr	r3, [pc, #40]	; (800e548 <prvAddCurrentTaskToDelayedList+0x94>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	3304      	adds	r3, #4
 800e524:	4619      	mov	r1, r3
 800e526:	4610      	mov	r0, r2
 800e528:	f7fe fa8b 	bl	800ca42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e52c:	4b0a      	ldr	r3, [pc, #40]	; (800e558 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	68ba      	ldr	r2, [r7, #8]
 800e532:	429a      	cmp	r2, r3
 800e534:	d202      	bcs.n	800e53c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e536:	4a08      	ldr	r2, [pc, #32]	; (800e558 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	6013      	str	r3, [r2, #0]
}
 800e53c:	bf00      	nop
 800e53e:	3710      	adds	r7, #16
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}
 800e544:	20001b2c 	.word	0x20001b2c
 800e548:	20001654 	.word	0x20001654
 800e54c:	20001b14 	.word	0x20001b14
 800e550:	20001ae4 	.word	0x20001ae4
 800e554:	20001ae0 	.word	0x20001ae0
 800e558:	20001b48 	.word	0x20001b48

0800e55c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b08a      	sub	sp, #40	; 0x28
 800e560:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e562:	2300      	movs	r3, #0
 800e564:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e566:	f000 fb07 	bl	800eb78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e56a:	4b1c      	ldr	r3, [pc, #112]	; (800e5dc <xTimerCreateTimerTask+0x80>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d021      	beq.n	800e5b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e572:	2300      	movs	r3, #0
 800e574:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e576:	2300      	movs	r3, #0
 800e578:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e57a:	1d3a      	adds	r2, r7, #4
 800e57c:	f107 0108 	add.w	r1, r7, #8
 800e580:	f107 030c 	add.w	r3, r7, #12
 800e584:	4618      	mov	r0, r3
 800e586:	f7fe f9f1 	bl	800c96c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e58a:	6879      	ldr	r1, [r7, #4]
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	68fa      	ldr	r2, [r7, #12]
 800e590:	9202      	str	r2, [sp, #8]
 800e592:	9301      	str	r3, [sp, #4]
 800e594:	2302      	movs	r3, #2
 800e596:	9300      	str	r3, [sp, #0]
 800e598:	2300      	movs	r3, #0
 800e59a:	460a      	mov	r2, r1
 800e59c:	4910      	ldr	r1, [pc, #64]	; (800e5e0 <xTimerCreateTimerTask+0x84>)
 800e59e:	4811      	ldr	r0, [pc, #68]	; (800e5e4 <xTimerCreateTimerTask+0x88>)
 800e5a0:	f7fe ffd8 	bl	800d554 <xTaskCreateStatic>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	4a10      	ldr	r2, [pc, #64]	; (800e5e8 <xTimerCreateTimerTask+0x8c>)
 800e5a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e5aa:	4b0f      	ldr	r3, [pc, #60]	; (800e5e8 <xTimerCreateTimerTask+0x8c>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d001      	beq.n	800e5b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d10a      	bne.n	800e5d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c0:	f383 8811 	msr	BASEPRI, r3
 800e5c4:	f3bf 8f6f 	isb	sy
 800e5c8:	f3bf 8f4f 	dsb	sy
 800e5cc:	613b      	str	r3, [r7, #16]
}
 800e5ce:	bf00      	nop
 800e5d0:	e7fe      	b.n	800e5d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e5d2:	697b      	ldr	r3, [r7, #20]
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3718      	adds	r7, #24
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}
 800e5dc:	20001b84 	.word	0x20001b84
 800e5e0:	08010bfc 	.word	0x08010bfc
 800e5e4:	0800e721 	.word	0x0800e721
 800e5e8:	20001b88 	.word	0x20001b88

0800e5ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b08a      	sub	sp, #40	; 0x28
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	60b9      	str	r1, [r7, #8]
 800e5f6:	607a      	str	r2, [r7, #4]
 800e5f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d10a      	bne.n	800e61a <xTimerGenericCommand+0x2e>
	__asm volatile
 800e604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e608:	f383 8811 	msr	BASEPRI, r3
 800e60c:	f3bf 8f6f 	isb	sy
 800e610:	f3bf 8f4f 	dsb	sy
 800e614:	623b      	str	r3, [r7, #32]
}
 800e616:	bf00      	nop
 800e618:	e7fe      	b.n	800e618 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e61a:	4b1a      	ldr	r3, [pc, #104]	; (800e684 <xTimerGenericCommand+0x98>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d02a      	beq.n	800e678 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	2b05      	cmp	r3, #5
 800e632:	dc18      	bgt.n	800e666 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e634:	f7ff feb2 	bl	800e39c <xTaskGetSchedulerState>
 800e638:	4603      	mov	r3, r0
 800e63a:	2b02      	cmp	r3, #2
 800e63c:	d109      	bne.n	800e652 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e63e:	4b11      	ldr	r3, [pc, #68]	; (800e684 <xTimerGenericCommand+0x98>)
 800e640:	6818      	ldr	r0, [r3, #0]
 800e642:	f107 0110 	add.w	r1, r7, #16
 800e646:	2300      	movs	r3, #0
 800e648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e64a:	f7fe fb9b 	bl	800cd84 <xQueueGenericSend>
 800e64e:	6278      	str	r0, [r7, #36]	; 0x24
 800e650:	e012      	b.n	800e678 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e652:	4b0c      	ldr	r3, [pc, #48]	; (800e684 <xTimerGenericCommand+0x98>)
 800e654:	6818      	ldr	r0, [r3, #0]
 800e656:	f107 0110 	add.w	r1, r7, #16
 800e65a:	2300      	movs	r3, #0
 800e65c:	2200      	movs	r2, #0
 800e65e:	f7fe fb91 	bl	800cd84 <xQueueGenericSend>
 800e662:	6278      	str	r0, [r7, #36]	; 0x24
 800e664:	e008      	b.n	800e678 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e666:	4b07      	ldr	r3, [pc, #28]	; (800e684 <xTimerGenericCommand+0x98>)
 800e668:	6818      	ldr	r0, [r3, #0]
 800e66a:	f107 0110 	add.w	r1, r7, #16
 800e66e:	2300      	movs	r3, #0
 800e670:	683a      	ldr	r2, [r7, #0]
 800e672:	f7fe fc85 	bl	800cf80 <xQueueGenericSendFromISR>
 800e676:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3728      	adds	r7, #40	; 0x28
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	20001b84 	.word	0x20001b84

0800e688 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b088      	sub	sp, #32
 800e68c:	af02      	add	r7, sp, #8
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e692:	4b22      	ldr	r3, [pc, #136]	; (800e71c <prvProcessExpiredTimer+0x94>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	68db      	ldr	r3, [r3, #12]
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	3304      	adds	r3, #4
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7fe fa07 	bl	800cab4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6ac:	f003 0304 	and.w	r3, r3, #4
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d022      	beq.n	800e6fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	699a      	ldr	r2, [r3, #24]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	18d1      	adds	r1, r2, r3
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	683a      	ldr	r2, [r7, #0]
 800e6c0:	6978      	ldr	r0, [r7, #20]
 800e6c2:	f000 f8d1 	bl	800e868 <prvInsertTimerInActiveList>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d01f      	beq.n	800e70c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	9300      	str	r3, [sp, #0]
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	2100      	movs	r1, #0
 800e6d6:	6978      	ldr	r0, [r7, #20]
 800e6d8:	f7ff ff88 	bl	800e5ec <xTimerGenericCommand>
 800e6dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d113      	bne.n	800e70c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e8:	f383 8811 	msr	BASEPRI, r3
 800e6ec:	f3bf 8f6f 	isb	sy
 800e6f0:	f3bf 8f4f 	dsb	sy
 800e6f4:	60fb      	str	r3, [r7, #12]
}
 800e6f6:	bf00      	nop
 800e6f8:	e7fe      	b.n	800e6f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e700:	f023 0301 	bic.w	r3, r3, #1
 800e704:	b2da      	uxtb	r2, r3
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	6a1b      	ldr	r3, [r3, #32]
 800e710:	6978      	ldr	r0, [r7, #20]
 800e712:	4798      	blx	r3
}
 800e714:	bf00      	nop
 800e716:	3718      	adds	r7, #24
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	20001b7c 	.word	0x20001b7c

0800e720 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e728:	f107 0308 	add.w	r3, r7, #8
 800e72c:	4618      	mov	r0, r3
 800e72e:	f000 f857 	bl	800e7e0 <prvGetNextExpireTime>
 800e732:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	4619      	mov	r1, r3
 800e738:	68f8      	ldr	r0, [r7, #12]
 800e73a:	f000 f803 	bl	800e744 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e73e:	f000 f8d5 	bl	800e8ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e742:	e7f1      	b.n	800e728 <prvTimerTask+0x8>

0800e744 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e74e:	f7ff fa43 	bl	800dbd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e752:	f107 0308 	add.w	r3, r7, #8
 800e756:	4618      	mov	r0, r3
 800e758:	f000 f866 	bl	800e828 <prvSampleTimeNow>
 800e75c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d130      	bne.n	800e7c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d10a      	bne.n	800e780 <prvProcessTimerOrBlockTask+0x3c>
 800e76a:	687a      	ldr	r2, [r7, #4]
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	429a      	cmp	r2, r3
 800e770:	d806      	bhi.n	800e780 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e772:	f7ff fa3f 	bl	800dbf4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e776:	68f9      	ldr	r1, [r7, #12]
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f7ff ff85 	bl	800e688 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e77e:	e024      	b.n	800e7ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d008      	beq.n	800e798 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e786:	4b13      	ldr	r3, [pc, #76]	; (800e7d4 <prvProcessTimerOrBlockTask+0x90>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d101      	bne.n	800e794 <prvProcessTimerOrBlockTask+0x50>
 800e790:	2301      	movs	r3, #1
 800e792:	e000      	b.n	800e796 <prvProcessTimerOrBlockTask+0x52>
 800e794:	2300      	movs	r3, #0
 800e796:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e798:	4b0f      	ldr	r3, [pc, #60]	; (800e7d8 <prvProcessTimerOrBlockTask+0x94>)
 800e79a:	6818      	ldr	r0, [r3, #0]
 800e79c:	687a      	ldr	r2, [r7, #4]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	1ad3      	subs	r3, r2, r3
 800e7a2:	683a      	ldr	r2, [r7, #0]
 800e7a4:	4619      	mov	r1, r3
 800e7a6:	f7fe fea1 	bl	800d4ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e7aa:	f7ff fa23 	bl	800dbf4 <xTaskResumeAll>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d10a      	bne.n	800e7ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e7b4:	4b09      	ldr	r3, [pc, #36]	; (800e7dc <prvProcessTimerOrBlockTask+0x98>)
 800e7b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7ba:	601a      	str	r2, [r3, #0]
 800e7bc:	f3bf 8f4f 	dsb	sy
 800e7c0:	f3bf 8f6f 	isb	sy
}
 800e7c4:	e001      	b.n	800e7ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e7c6:	f7ff fa15 	bl	800dbf4 <xTaskResumeAll>
}
 800e7ca:	bf00      	nop
 800e7cc:	3710      	adds	r7, #16
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	20001b80 	.word	0x20001b80
 800e7d8:	20001b84 	.word	0x20001b84
 800e7dc:	e000ed04 	.word	0xe000ed04

0800e7e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b085      	sub	sp, #20
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e7e8:	4b0e      	ldr	r3, [pc, #56]	; (800e824 <prvGetNextExpireTime+0x44>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d101      	bne.n	800e7f6 <prvGetNextExpireTime+0x16>
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	e000      	b.n	800e7f8 <prvGetNextExpireTime+0x18>
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d105      	bne.n	800e810 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e804:	4b07      	ldr	r3, [pc, #28]	; (800e824 <prvGetNextExpireTime+0x44>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	68db      	ldr	r3, [r3, #12]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	60fb      	str	r3, [r7, #12]
 800e80e:	e001      	b.n	800e814 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e810:	2300      	movs	r3, #0
 800e812:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e814:	68fb      	ldr	r3, [r7, #12]
}
 800e816:	4618      	mov	r0, r3
 800e818:	3714      	adds	r7, #20
 800e81a:	46bd      	mov	sp, r7
 800e81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e820:	4770      	bx	lr
 800e822:	bf00      	nop
 800e824:	20001b7c 	.word	0x20001b7c

0800e828 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b084      	sub	sp, #16
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e830:	f7ff fa7e 	bl	800dd30 <xTaskGetTickCount>
 800e834:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e836:	4b0b      	ldr	r3, [pc, #44]	; (800e864 <prvSampleTimeNow+0x3c>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	68fa      	ldr	r2, [r7, #12]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d205      	bcs.n	800e84c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e840:	f000 f936 	bl	800eab0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2201      	movs	r2, #1
 800e848:	601a      	str	r2, [r3, #0]
 800e84a:	e002      	b.n	800e852 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2200      	movs	r2, #0
 800e850:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e852:	4a04      	ldr	r2, [pc, #16]	; (800e864 <prvSampleTimeNow+0x3c>)
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e858:	68fb      	ldr	r3, [r7, #12]
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3710      	adds	r7, #16
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	20001b8c 	.word	0x20001b8c

0800e868 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b086      	sub	sp, #24
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	607a      	str	r2, [r7, #4]
 800e874:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e876:	2300      	movs	r3, #0
 800e878:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	68ba      	ldr	r2, [r7, #8]
 800e87e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	68fa      	ldr	r2, [r7, #12]
 800e884:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e886:	68ba      	ldr	r2, [r7, #8]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d812      	bhi.n	800e8b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	1ad2      	subs	r2, r2, r3
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	699b      	ldr	r3, [r3, #24]
 800e898:	429a      	cmp	r2, r3
 800e89a:	d302      	bcc.n	800e8a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e89c:	2301      	movs	r3, #1
 800e89e:	617b      	str	r3, [r7, #20]
 800e8a0:	e01b      	b.n	800e8da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e8a2:	4b10      	ldr	r3, [pc, #64]	; (800e8e4 <prvInsertTimerInActiveList+0x7c>)
 800e8a4:	681a      	ldr	r2, [r3, #0]
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	3304      	adds	r3, #4
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	4610      	mov	r0, r2
 800e8ae:	f7fe f8c8 	bl	800ca42 <vListInsert>
 800e8b2:	e012      	b.n	800e8da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e8b4:	687a      	ldr	r2, [r7, #4]
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d206      	bcs.n	800e8ca <prvInsertTimerInActiveList+0x62>
 800e8bc:	68ba      	ldr	r2, [r7, #8]
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d302      	bcc.n	800e8ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	617b      	str	r3, [r7, #20]
 800e8c8:	e007      	b.n	800e8da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e8ca:	4b07      	ldr	r3, [pc, #28]	; (800e8e8 <prvInsertTimerInActiveList+0x80>)
 800e8cc:	681a      	ldr	r2, [r3, #0]
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	3304      	adds	r3, #4
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	4610      	mov	r0, r2
 800e8d6:	f7fe f8b4 	bl	800ca42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e8da:	697b      	ldr	r3, [r7, #20]
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3718      	adds	r7, #24
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	20001b80 	.word	0x20001b80
 800e8e8:	20001b7c 	.word	0x20001b7c

0800e8ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b08e      	sub	sp, #56	; 0x38
 800e8f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e8f2:	e0ca      	b.n	800ea8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	da18      	bge.n	800e92c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e8fa:	1d3b      	adds	r3, r7, #4
 800e8fc:	3304      	adds	r3, #4
 800e8fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e902:	2b00      	cmp	r3, #0
 800e904:	d10a      	bne.n	800e91c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e90a:	f383 8811 	msr	BASEPRI, r3
 800e90e:	f3bf 8f6f 	isb	sy
 800e912:	f3bf 8f4f 	dsb	sy
 800e916:	61fb      	str	r3, [r7, #28]
}
 800e918:	bf00      	nop
 800e91a:	e7fe      	b.n	800e91a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e922:	6850      	ldr	r0, [r2, #4]
 800e924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e926:	6892      	ldr	r2, [r2, #8]
 800e928:	4611      	mov	r1, r2
 800e92a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	f2c0 80aa 	blt.w	800ea88 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e93a:	695b      	ldr	r3, [r3, #20]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d004      	beq.n	800e94a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e942:	3304      	adds	r3, #4
 800e944:	4618      	mov	r0, r3
 800e946:	f7fe f8b5 	bl	800cab4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e94a:	463b      	mov	r3, r7
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7ff ff6b 	bl	800e828 <prvSampleTimeNow>
 800e952:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2b09      	cmp	r3, #9
 800e958:	f200 8097 	bhi.w	800ea8a <prvProcessReceivedCommands+0x19e>
 800e95c:	a201      	add	r2, pc, #4	; (adr r2, 800e964 <prvProcessReceivedCommands+0x78>)
 800e95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e962:	bf00      	nop
 800e964:	0800e98d 	.word	0x0800e98d
 800e968:	0800e98d 	.word	0x0800e98d
 800e96c:	0800e98d 	.word	0x0800e98d
 800e970:	0800ea01 	.word	0x0800ea01
 800e974:	0800ea15 	.word	0x0800ea15
 800e978:	0800ea5f 	.word	0x0800ea5f
 800e97c:	0800e98d 	.word	0x0800e98d
 800e980:	0800e98d 	.word	0x0800e98d
 800e984:	0800ea01 	.word	0x0800ea01
 800e988:	0800ea15 	.word	0x0800ea15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e992:	f043 0301 	orr.w	r3, r3, #1
 800e996:	b2da      	uxtb	r2, r3
 800e998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e99e:	68ba      	ldr	r2, [r7, #8]
 800e9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a2:	699b      	ldr	r3, [r3, #24]
 800e9a4:	18d1      	adds	r1, r2, r3
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9ac:	f7ff ff5c 	bl	800e868 <prvInsertTimerInActiveList>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d069      	beq.n	800ea8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b8:	6a1b      	ldr	r3, [r3, #32]
 800e9ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9c4:	f003 0304 	and.w	r3, r3, #4
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d05e      	beq.n	800ea8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e9cc:	68ba      	ldr	r2, [r7, #8]
 800e9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d0:	699b      	ldr	r3, [r3, #24]
 800e9d2:	441a      	add	r2, r3
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	9300      	str	r3, [sp, #0]
 800e9d8:	2300      	movs	r3, #0
 800e9da:	2100      	movs	r1, #0
 800e9dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9de:	f7ff fe05 	bl	800e5ec <xTimerGenericCommand>
 800e9e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e9e4:	6a3b      	ldr	r3, [r7, #32]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d14f      	bne.n	800ea8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ee:	f383 8811 	msr	BASEPRI, r3
 800e9f2:	f3bf 8f6f 	isb	sy
 800e9f6:	f3bf 8f4f 	dsb	sy
 800e9fa:	61bb      	str	r3, [r7, #24]
}
 800e9fc:	bf00      	nop
 800e9fe:	e7fe      	b.n	800e9fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea06:	f023 0301 	bic.w	r3, r3, #1
 800ea0a:	b2da      	uxtb	r2, r3
 800ea0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ea12:	e03a      	b.n	800ea8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea1a:	f043 0301 	orr.w	r3, r3, #1
 800ea1e:	b2da      	uxtb	r2, r3
 800ea20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ea26:	68ba      	ldr	r2, [r7, #8]
 800ea28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ea2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2e:	699b      	ldr	r3, [r3, #24]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d10a      	bne.n	800ea4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ea34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea38:	f383 8811 	msr	BASEPRI, r3
 800ea3c:	f3bf 8f6f 	isb	sy
 800ea40:	f3bf 8f4f 	dsb	sy
 800ea44:	617b      	str	r3, [r7, #20]
}
 800ea46:	bf00      	nop
 800ea48:	e7fe      	b.n	800ea48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ea4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea4c:	699a      	ldr	r2, [r3, #24]
 800ea4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea50:	18d1      	adds	r1, r2, r3
 800ea52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea58:	f7ff ff06 	bl	800e868 <prvInsertTimerInActiveList>
					break;
 800ea5c:	e015      	b.n	800ea8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ea5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea64:	f003 0302 	and.w	r3, r3, #2
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d103      	bne.n	800ea74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ea6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea6e:	f000 fbdf 	bl	800f230 <vPortFree>
 800ea72:	e00a      	b.n	800ea8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea7a:	f023 0301 	bic.w	r3, r3, #1
 800ea7e:	b2da      	uxtb	r2, r3
 800ea80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ea86:	e000      	b.n	800ea8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ea88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ea8a:	4b08      	ldr	r3, [pc, #32]	; (800eaac <prvProcessReceivedCommands+0x1c0>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	1d39      	adds	r1, r7, #4
 800ea90:	2200      	movs	r2, #0
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7fe fb10 	bl	800d0b8 <xQueueReceive>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	f47f af2a 	bne.w	800e8f4 <prvProcessReceivedCommands+0x8>
	}
}
 800eaa0:	bf00      	nop
 800eaa2:	bf00      	nop
 800eaa4:	3730      	adds	r7, #48	; 0x30
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	20001b84 	.word	0x20001b84

0800eab0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b088      	sub	sp, #32
 800eab4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eab6:	e048      	b.n	800eb4a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eab8:	4b2d      	ldr	r3, [pc, #180]	; (800eb70 <prvSwitchTimerLists+0xc0>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	68db      	ldr	r3, [r3, #12]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eac2:	4b2b      	ldr	r3, [pc, #172]	; (800eb70 <prvSwitchTimerLists+0xc0>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	68db      	ldr	r3, [r3, #12]
 800eac8:	68db      	ldr	r3, [r3, #12]
 800eaca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	3304      	adds	r3, #4
 800ead0:	4618      	mov	r0, r3
 800ead2:	f7fd ffef 	bl	800cab4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	6a1b      	ldr	r3, [r3, #32]
 800eada:	68f8      	ldr	r0, [r7, #12]
 800eadc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eae4:	f003 0304 	and.w	r3, r3, #4
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d02e      	beq.n	800eb4a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	699b      	ldr	r3, [r3, #24]
 800eaf0:	693a      	ldr	r2, [r7, #16]
 800eaf2:	4413      	add	r3, r2
 800eaf4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eaf6:	68ba      	ldr	r2, [r7, #8]
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d90e      	bls.n	800eb1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	68ba      	ldr	r2, [r7, #8]
 800eb02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	68fa      	ldr	r2, [r7, #12]
 800eb08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eb0a:	4b19      	ldr	r3, [pc, #100]	; (800eb70 <prvSwitchTimerLists+0xc0>)
 800eb0c:	681a      	ldr	r2, [r3, #0]
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	3304      	adds	r3, #4
 800eb12:	4619      	mov	r1, r3
 800eb14:	4610      	mov	r0, r2
 800eb16:	f7fd ff94 	bl	800ca42 <vListInsert>
 800eb1a:	e016      	b.n	800eb4a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	9300      	str	r3, [sp, #0]
 800eb20:	2300      	movs	r3, #0
 800eb22:	693a      	ldr	r2, [r7, #16]
 800eb24:	2100      	movs	r1, #0
 800eb26:	68f8      	ldr	r0, [r7, #12]
 800eb28:	f7ff fd60 	bl	800e5ec <xTimerGenericCommand>
 800eb2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d10a      	bne.n	800eb4a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800eb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb38:	f383 8811 	msr	BASEPRI, r3
 800eb3c:	f3bf 8f6f 	isb	sy
 800eb40:	f3bf 8f4f 	dsb	sy
 800eb44:	603b      	str	r3, [r7, #0]
}
 800eb46:	bf00      	nop
 800eb48:	e7fe      	b.n	800eb48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eb4a:	4b09      	ldr	r3, [pc, #36]	; (800eb70 <prvSwitchTimerLists+0xc0>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d1b1      	bne.n	800eab8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eb54:	4b06      	ldr	r3, [pc, #24]	; (800eb70 <prvSwitchTimerLists+0xc0>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eb5a:	4b06      	ldr	r3, [pc, #24]	; (800eb74 <prvSwitchTimerLists+0xc4>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	4a04      	ldr	r2, [pc, #16]	; (800eb70 <prvSwitchTimerLists+0xc0>)
 800eb60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eb62:	4a04      	ldr	r2, [pc, #16]	; (800eb74 <prvSwitchTimerLists+0xc4>)
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	6013      	str	r3, [r2, #0]
}
 800eb68:	bf00      	nop
 800eb6a:	3718      	adds	r7, #24
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	20001b7c 	.word	0x20001b7c
 800eb74:	20001b80 	.word	0x20001b80

0800eb78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eb7e:	f000 f969 	bl	800ee54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eb82:	4b15      	ldr	r3, [pc, #84]	; (800ebd8 <prvCheckForValidListAndQueue+0x60>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d120      	bne.n	800ebcc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eb8a:	4814      	ldr	r0, [pc, #80]	; (800ebdc <prvCheckForValidListAndQueue+0x64>)
 800eb8c:	f7fd ff08 	bl	800c9a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eb90:	4813      	ldr	r0, [pc, #76]	; (800ebe0 <prvCheckForValidListAndQueue+0x68>)
 800eb92:	f7fd ff05 	bl	800c9a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eb96:	4b13      	ldr	r3, [pc, #76]	; (800ebe4 <prvCheckForValidListAndQueue+0x6c>)
 800eb98:	4a10      	ldr	r2, [pc, #64]	; (800ebdc <prvCheckForValidListAndQueue+0x64>)
 800eb9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eb9c:	4b12      	ldr	r3, [pc, #72]	; (800ebe8 <prvCheckForValidListAndQueue+0x70>)
 800eb9e:	4a10      	ldr	r2, [pc, #64]	; (800ebe0 <prvCheckForValidListAndQueue+0x68>)
 800eba0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eba2:	2300      	movs	r3, #0
 800eba4:	9300      	str	r3, [sp, #0]
 800eba6:	4b11      	ldr	r3, [pc, #68]	; (800ebec <prvCheckForValidListAndQueue+0x74>)
 800eba8:	4a11      	ldr	r2, [pc, #68]	; (800ebf0 <prvCheckForValidListAndQueue+0x78>)
 800ebaa:	2110      	movs	r1, #16
 800ebac:	200a      	movs	r0, #10
 800ebae:	f7fe f813 	bl	800cbd8 <xQueueGenericCreateStatic>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	4a08      	ldr	r2, [pc, #32]	; (800ebd8 <prvCheckForValidListAndQueue+0x60>)
 800ebb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ebb8:	4b07      	ldr	r3, [pc, #28]	; (800ebd8 <prvCheckForValidListAndQueue+0x60>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d005      	beq.n	800ebcc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ebc0:	4b05      	ldr	r3, [pc, #20]	; (800ebd8 <prvCheckForValidListAndQueue+0x60>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	490b      	ldr	r1, [pc, #44]	; (800ebf4 <prvCheckForValidListAndQueue+0x7c>)
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7fe fc66 	bl	800d498 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ebcc:	f000 f972 	bl	800eeb4 <vPortExitCritical>
}
 800ebd0:	bf00      	nop
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	20001b84 	.word	0x20001b84
 800ebdc:	20001b54 	.word	0x20001b54
 800ebe0:	20001b68 	.word	0x20001b68
 800ebe4:	20001b7c 	.word	0x20001b7c
 800ebe8:	20001b80 	.word	0x20001b80
 800ebec:	20001c30 	.word	0x20001c30
 800ebf0:	20001b90 	.word	0x20001b90
 800ebf4:	08010c04 	.word	0x08010c04

0800ebf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b085      	sub	sp, #20
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	60f8      	str	r0, [r7, #12]
 800ec00:	60b9      	str	r1, [r7, #8]
 800ec02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	3b04      	subs	r3, #4
 800ec08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ec10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	3b04      	subs	r3, #4
 800ec16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	f023 0201 	bic.w	r2, r3, #1
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	3b04      	subs	r3, #4
 800ec26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ec28:	4a0c      	ldr	r2, [pc, #48]	; (800ec5c <pxPortInitialiseStack+0x64>)
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	3b14      	subs	r3, #20
 800ec32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ec34:	687a      	ldr	r2, [r7, #4]
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	3b04      	subs	r3, #4
 800ec3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	f06f 0202 	mvn.w	r2, #2
 800ec46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	3b20      	subs	r3, #32
 800ec4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3714      	adds	r7, #20
 800ec54:	46bd      	mov	sp, r7
 800ec56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5a:	4770      	bx	lr
 800ec5c:	0800ec61 	.word	0x0800ec61

0800ec60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ec60:	b480      	push	{r7}
 800ec62:	b085      	sub	sp, #20
 800ec64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ec66:	2300      	movs	r3, #0
 800ec68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ec6a:	4b12      	ldr	r3, [pc, #72]	; (800ecb4 <prvTaskExitError+0x54>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec72:	d00a      	beq.n	800ec8a <prvTaskExitError+0x2a>
	__asm volatile
 800ec74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec78:	f383 8811 	msr	BASEPRI, r3
 800ec7c:	f3bf 8f6f 	isb	sy
 800ec80:	f3bf 8f4f 	dsb	sy
 800ec84:	60fb      	str	r3, [r7, #12]
}
 800ec86:	bf00      	nop
 800ec88:	e7fe      	b.n	800ec88 <prvTaskExitError+0x28>
	__asm volatile
 800ec8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8e:	f383 8811 	msr	BASEPRI, r3
 800ec92:	f3bf 8f6f 	isb	sy
 800ec96:	f3bf 8f4f 	dsb	sy
 800ec9a:	60bb      	str	r3, [r7, #8]
}
 800ec9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ec9e:	bf00      	nop
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d0fc      	beq.n	800eca0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eca6:	bf00      	nop
 800eca8:	bf00      	nop
 800ecaa:	3714      	adds	r7, #20
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr
 800ecb4:	20000634 	.word	0x20000634
	...

0800ecc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ecc0:	4b07      	ldr	r3, [pc, #28]	; (800ece0 <pxCurrentTCBConst2>)
 800ecc2:	6819      	ldr	r1, [r3, #0]
 800ecc4:	6808      	ldr	r0, [r1, #0]
 800ecc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecca:	f380 8809 	msr	PSP, r0
 800ecce:	f3bf 8f6f 	isb	sy
 800ecd2:	f04f 0000 	mov.w	r0, #0
 800ecd6:	f380 8811 	msr	BASEPRI, r0
 800ecda:	4770      	bx	lr
 800ecdc:	f3af 8000 	nop.w

0800ece0 <pxCurrentTCBConst2>:
 800ece0:	20001654 	.word	0x20001654
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ece4:	bf00      	nop
 800ece6:	bf00      	nop

0800ece8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ece8:	4808      	ldr	r0, [pc, #32]	; (800ed0c <prvPortStartFirstTask+0x24>)
 800ecea:	6800      	ldr	r0, [r0, #0]
 800ecec:	6800      	ldr	r0, [r0, #0]
 800ecee:	f380 8808 	msr	MSP, r0
 800ecf2:	f04f 0000 	mov.w	r0, #0
 800ecf6:	f380 8814 	msr	CONTROL, r0
 800ecfa:	b662      	cpsie	i
 800ecfc:	b661      	cpsie	f
 800ecfe:	f3bf 8f4f 	dsb	sy
 800ed02:	f3bf 8f6f 	isb	sy
 800ed06:	df00      	svc	0
 800ed08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ed0a:	bf00      	nop
 800ed0c:	e000ed08 	.word	0xe000ed08

0800ed10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b086      	sub	sp, #24
 800ed14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ed16:	4b46      	ldr	r3, [pc, #280]	; (800ee30 <xPortStartScheduler+0x120>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	4a46      	ldr	r2, [pc, #280]	; (800ee34 <xPortStartScheduler+0x124>)
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	d10a      	bne.n	800ed36 <xPortStartScheduler+0x26>
	__asm volatile
 800ed20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed24:	f383 8811 	msr	BASEPRI, r3
 800ed28:	f3bf 8f6f 	isb	sy
 800ed2c:	f3bf 8f4f 	dsb	sy
 800ed30:	613b      	str	r3, [r7, #16]
}
 800ed32:	bf00      	nop
 800ed34:	e7fe      	b.n	800ed34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ed36:	4b3e      	ldr	r3, [pc, #248]	; (800ee30 <xPortStartScheduler+0x120>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	4a3f      	ldr	r2, [pc, #252]	; (800ee38 <xPortStartScheduler+0x128>)
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	d10a      	bne.n	800ed56 <xPortStartScheduler+0x46>
	__asm volatile
 800ed40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed44:	f383 8811 	msr	BASEPRI, r3
 800ed48:	f3bf 8f6f 	isb	sy
 800ed4c:	f3bf 8f4f 	dsb	sy
 800ed50:	60fb      	str	r3, [r7, #12]
}
 800ed52:	bf00      	nop
 800ed54:	e7fe      	b.n	800ed54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ed56:	4b39      	ldr	r3, [pc, #228]	; (800ee3c <xPortStartScheduler+0x12c>)
 800ed58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	781b      	ldrb	r3, [r3, #0]
 800ed5e:	b2db      	uxtb	r3, r3
 800ed60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	22ff      	movs	r2, #255	; 0xff
 800ed66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	b2db      	uxtb	r3, r3
 800ed6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ed70:	78fb      	ldrb	r3, [r7, #3]
 800ed72:	b2db      	uxtb	r3, r3
 800ed74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ed78:	b2da      	uxtb	r2, r3
 800ed7a:	4b31      	ldr	r3, [pc, #196]	; (800ee40 <xPortStartScheduler+0x130>)
 800ed7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ed7e:	4b31      	ldr	r3, [pc, #196]	; (800ee44 <xPortStartScheduler+0x134>)
 800ed80:	2207      	movs	r2, #7
 800ed82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed84:	e009      	b.n	800ed9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ed86:	4b2f      	ldr	r3, [pc, #188]	; (800ee44 <xPortStartScheduler+0x134>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	3b01      	subs	r3, #1
 800ed8c:	4a2d      	ldr	r2, [pc, #180]	; (800ee44 <xPortStartScheduler+0x134>)
 800ed8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ed90:	78fb      	ldrb	r3, [r7, #3]
 800ed92:	b2db      	uxtb	r3, r3
 800ed94:	005b      	lsls	r3, r3, #1
 800ed96:	b2db      	uxtb	r3, r3
 800ed98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed9a:	78fb      	ldrb	r3, [r7, #3]
 800ed9c:	b2db      	uxtb	r3, r3
 800ed9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eda2:	2b80      	cmp	r3, #128	; 0x80
 800eda4:	d0ef      	beq.n	800ed86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eda6:	4b27      	ldr	r3, [pc, #156]	; (800ee44 <xPortStartScheduler+0x134>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f1c3 0307 	rsb	r3, r3, #7
 800edae:	2b04      	cmp	r3, #4
 800edb0:	d00a      	beq.n	800edc8 <xPortStartScheduler+0xb8>
	__asm volatile
 800edb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb6:	f383 8811 	msr	BASEPRI, r3
 800edba:	f3bf 8f6f 	isb	sy
 800edbe:	f3bf 8f4f 	dsb	sy
 800edc2:	60bb      	str	r3, [r7, #8]
}
 800edc4:	bf00      	nop
 800edc6:	e7fe      	b.n	800edc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800edc8:	4b1e      	ldr	r3, [pc, #120]	; (800ee44 <xPortStartScheduler+0x134>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	021b      	lsls	r3, r3, #8
 800edce:	4a1d      	ldr	r2, [pc, #116]	; (800ee44 <xPortStartScheduler+0x134>)
 800edd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800edd2:	4b1c      	ldr	r3, [pc, #112]	; (800ee44 <xPortStartScheduler+0x134>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800edda:	4a1a      	ldr	r2, [pc, #104]	; (800ee44 <xPortStartScheduler+0x134>)
 800eddc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	b2da      	uxtb	r2, r3
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ede6:	4b18      	ldr	r3, [pc, #96]	; (800ee48 <xPortStartScheduler+0x138>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	4a17      	ldr	r2, [pc, #92]	; (800ee48 <xPortStartScheduler+0x138>)
 800edec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800edf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800edf2:	4b15      	ldr	r3, [pc, #84]	; (800ee48 <xPortStartScheduler+0x138>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4a14      	ldr	r2, [pc, #80]	; (800ee48 <xPortStartScheduler+0x138>)
 800edf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800edfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800edfe:	f000 f8dd 	bl	800efbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ee02:	4b12      	ldr	r3, [pc, #72]	; (800ee4c <xPortStartScheduler+0x13c>)
 800ee04:	2200      	movs	r2, #0
 800ee06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ee08:	f000 f8fc 	bl	800f004 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ee0c:	4b10      	ldr	r3, [pc, #64]	; (800ee50 <xPortStartScheduler+0x140>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4a0f      	ldr	r2, [pc, #60]	; (800ee50 <xPortStartScheduler+0x140>)
 800ee12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ee16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ee18:	f7ff ff66 	bl	800ece8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ee1c:	f7ff f852 	bl	800dec4 <vTaskSwitchContext>
	prvTaskExitError();
 800ee20:	f7ff ff1e 	bl	800ec60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ee24:	2300      	movs	r3, #0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3718      	adds	r7, #24
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}
 800ee2e:	bf00      	nop
 800ee30:	e000ed00 	.word	0xe000ed00
 800ee34:	410fc271 	.word	0x410fc271
 800ee38:	410fc270 	.word	0x410fc270
 800ee3c:	e000e400 	.word	0xe000e400
 800ee40:	20001c80 	.word	0x20001c80
 800ee44:	20001c84 	.word	0x20001c84
 800ee48:	e000ed20 	.word	0xe000ed20
 800ee4c:	20000634 	.word	0x20000634
 800ee50:	e000ef34 	.word	0xe000ef34

0800ee54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ee54:	b480      	push	{r7}
 800ee56:	b083      	sub	sp, #12
 800ee58:	af00      	add	r7, sp, #0
	__asm volatile
 800ee5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee5e:	f383 8811 	msr	BASEPRI, r3
 800ee62:	f3bf 8f6f 	isb	sy
 800ee66:	f3bf 8f4f 	dsb	sy
 800ee6a:	607b      	str	r3, [r7, #4]
}
 800ee6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ee6e:	4b0f      	ldr	r3, [pc, #60]	; (800eeac <vPortEnterCritical+0x58>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	3301      	adds	r3, #1
 800ee74:	4a0d      	ldr	r2, [pc, #52]	; (800eeac <vPortEnterCritical+0x58>)
 800ee76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ee78:	4b0c      	ldr	r3, [pc, #48]	; (800eeac <vPortEnterCritical+0x58>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	d10f      	bne.n	800eea0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ee80:	4b0b      	ldr	r3, [pc, #44]	; (800eeb0 <vPortEnterCritical+0x5c>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	b2db      	uxtb	r3, r3
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d00a      	beq.n	800eea0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ee8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8e:	f383 8811 	msr	BASEPRI, r3
 800ee92:	f3bf 8f6f 	isb	sy
 800ee96:	f3bf 8f4f 	dsb	sy
 800ee9a:	603b      	str	r3, [r7, #0]
}
 800ee9c:	bf00      	nop
 800ee9e:	e7fe      	b.n	800ee9e <vPortEnterCritical+0x4a>
	}
}
 800eea0:	bf00      	nop
 800eea2:	370c      	adds	r7, #12
 800eea4:	46bd      	mov	sp, r7
 800eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeaa:	4770      	bx	lr
 800eeac:	20000634 	.word	0x20000634
 800eeb0:	e000ed04 	.word	0xe000ed04

0800eeb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b083      	sub	sp, #12
 800eeb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eeba:	4b12      	ldr	r3, [pc, #72]	; (800ef04 <vPortExitCritical+0x50>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d10a      	bne.n	800eed8 <vPortExitCritical+0x24>
	__asm volatile
 800eec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec6:	f383 8811 	msr	BASEPRI, r3
 800eeca:	f3bf 8f6f 	isb	sy
 800eece:	f3bf 8f4f 	dsb	sy
 800eed2:	607b      	str	r3, [r7, #4]
}
 800eed4:	bf00      	nop
 800eed6:	e7fe      	b.n	800eed6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eed8:	4b0a      	ldr	r3, [pc, #40]	; (800ef04 <vPortExitCritical+0x50>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	3b01      	subs	r3, #1
 800eede:	4a09      	ldr	r2, [pc, #36]	; (800ef04 <vPortExitCritical+0x50>)
 800eee0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eee2:	4b08      	ldr	r3, [pc, #32]	; (800ef04 <vPortExitCritical+0x50>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d105      	bne.n	800eef6 <vPortExitCritical+0x42>
 800eeea:	2300      	movs	r3, #0
 800eeec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	f383 8811 	msr	BASEPRI, r3
}
 800eef4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eef6:	bf00      	nop
 800eef8:	370c      	adds	r7, #12
 800eefa:	46bd      	mov	sp, r7
 800eefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef00:	4770      	bx	lr
 800ef02:	bf00      	nop
 800ef04:	20000634 	.word	0x20000634
	...

0800ef10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ef10:	f3ef 8009 	mrs	r0, PSP
 800ef14:	f3bf 8f6f 	isb	sy
 800ef18:	4b15      	ldr	r3, [pc, #84]	; (800ef70 <pxCurrentTCBConst>)
 800ef1a:	681a      	ldr	r2, [r3, #0]
 800ef1c:	f01e 0f10 	tst.w	lr, #16
 800ef20:	bf08      	it	eq
 800ef22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ef26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef2a:	6010      	str	r0, [r2, #0]
 800ef2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ef30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ef34:	f380 8811 	msr	BASEPRI, r0
 800ef38:	f3bf 8f4f 	dsb	sy
 800ef3c:	f3bf 8f6f 	isb	sy
 800ef40:	f7fe ffc0 	bl	800dec4 <vTaskSwitchContext>
 800ef44:	f04f 0000 	mov.w	r0, #0
 800ef48:	f380 8811 	msr	BASEPRI, r0
 800ef4c:	bc09      	pop	{r0, r3}
 800ef4e:	6819      	ldr	r1, [r3, #0]
 800ef50:	6808      	ldr	r0, [r1, #0]
 800ef52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef56:	f01e 0f10 	tst.w	lr, #16
 800ef5a:	bf08      	it	eq
 800ef5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ef60:	f380 8809 	msr	PSP, r0
 800ef64:	f3bf 8f6f 	isb	sy
 800ef68:	4770      	bx	lr
 800ef6a:	bf00      	nop
 800ef6c:	f3af 8000 	nop.w

0800ef70 <pxCurrentTCBConst>:
 800ef70:	20001654 	.word	0x20001654
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ef74:	bf00      	nop
 800ef76:	bf00      	nop

0800ef78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b082      	sub	sp, #8
 800ef7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ef7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef82:	f383 8811 	msr	BASEPRI, r3
 800ef86:	f3bf 8f6f 	isb	sy
 800ef8a:	f3bf 8f4f 	dsb	sy
 800ef8e:	607b      	str	r3, [r7, #4]
}
 800ef90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ef92:	f7fe fedd 	bl	800dd50 <xTaskIncrementTick>
 800ef96:	4603      	mov	r3, r0
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d003      	beq.n	800efa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ef9c:	4b06      	ldr	r3, [pc, #24]	; (800efb8 <xPortSysTickHandler+0x40>)
 800ef9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efa2:	601a      	str	r2, [r3, #0]
 800efa4:	2300      	movs	r3, #0
 800efa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	f383 8811 	msr	BASEPRI, r3
}
 800efae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800efb0:	bf00      	nop
 800efb2:	3708      	adds	r7, #8
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}
 800efb8:	e000ed04 	.word	0xe000ed04

0800efbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800efbc:	b480      	push	{r7}
 800efbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800efc0:	4b0b      	ldr	r3, [pc, #44]	; (800eff0 <vPortSetupTimerInterrupt+0x34>)
 800efc2:	2200      	movs	r2, #0
 800efc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800efc6:	4b0b      	ldr	r3, [pc, #44]	; (800eff4 <vPortSetupTimerInterrupt+0x38>)
 800efc8:	2200      	movs	r2, #0
 800efca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800efcc:	4b0a      	ldr	r3, [pc, #40]	; (800eff8 <vPortSetupTimerInterrupt+0x3c>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	4a0a      	ldr	r2, [pc, #40]	; (800effc <vPortSetupTimerInterrupt+0x40>)
 800efd2:	fba2 2303 	umull	r2, r3, r2, r3
 800efd6:	099b      	lsrs	r3, r3, #6
 800efd8:	4a09      	ldr	r2, [pc, #36]	; (800f000 <vPortSetupTimerInterrupt+0x44>)
 800efda:	3b01      	subs	r3, #1
 800efdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800efde:	4b04      	ldr	r3, [pc, #16]	; (800eff0 <vPortSetupTimerInterrupt+0x34>)
 800efe0:	2207      	movs	r2, #7
 800efe2:	601a      	str	r2, [r3, #0]
}
 800efe4:	bf00      	nop
 800efe6:	46bd      	mov	sp, r7
 800efe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efec:	4770      	bx	lr
 800efee:	bf00      	nop
 800eff0:	e000e010 	.word	0xe000e010
 800eff4:	e000e018 	.word	0xe000e018
 800eff8:	2000059c 	.word	0x2000059c
 800effc:	10624dd3 	.word	0x10624dd3
 800f000:	e000e014 	.word	0xe000e014

0800f004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f004:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f014 <vPortEnableVFP+0x10>
 800f008:	6801      	ldr	r1, [r0, #0]
 800f00a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f00e:	6001      	str	r1, [r0, #0]
 800f010:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f012:	bf00      	nop
 800f014:	e000ed88 	.word	0xe000ed88

0800f018 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f018:	b480      	push	{r7}
 800f01a:	b085      	sub	sp, #20
 800f01c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f01e:	f3ef 8305 	mrs	r3, IPSR
 800f022:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2b0f      	cmp	r3, #15
 800f028:	d914      	bls.n	800f054 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f02a:	4a17      	ldr	r2, [pc, #92]	; (800f088 <vPortValidateInterruptPriority+0x70>)
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	4413      	add	r3, r2
 800f030:	781b      	ldrb	r3, [r3, #0]
 800f032:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f034:	4b15      	ldr	r3, [pc, #84]	; (800f08c <vPortValidateInterruptPriority+0x74>)
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	7afa      	ldrb	r2, [r7, #11]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d20a      	bcs.n	800f054 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f042:	f383 8811 	msr	BASEPRI, r3
 800f046:	f3bf 8f6f 	isb	sy
 800f04a:	f3bf 8f4f 	dsb	sy
 800f04e:	607b      	str	r3, [r7, #4]
}
 800f050:	bf00      	nop
 800f052:	e7fe      	b.n	800f052 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f054:	4b0e      	ldr	r3, [pc, #56]	; (800f090 <vPortValidateInterruptPriority+0x78>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f05c:	4b0d      	ldr	r3, [pc, #52]	; (800f094 <vPortValidateInterruptPriority+0x7c>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	429a      	cmp	r2, r3
 800f062:	d90a      	bls.n	800f07a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f068:	f383 8811 	msr	BASEPRI, r3
 800f06c:	f3bf 8f6f 	isb	sy
 800f070:	f3bf 8f4f 	dsb	sy
 800f074:	603b      	str	r3, [r7, #0]
}
 800f076:	bf00      	nop
 800f078:	e7fe      	b.n	800f078 <vPortValidateInterruptPriority+0x60>
	}
 800f07a:	bf00      	nop
 800f07c:	3714      	adds	r7, #20
 800f07e:	46bd      	mov	sp, r7
 800f080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f084:	4770      	bx	lr
 800f086:	bf00      	nop
 800f088:	e000e3f0 	.word	0xe000e3f0
 800f08c:	20001c80 	.word	0x20001c80
 800f090:	e000ed0c 	.word	0xe000ed0c
 800f094:	20001c84 	.word	0x20001c84

0800f098 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b08a      	sub	sp, #40	; 0x28
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f0a4:	f7fe fd98 	bl	800dbd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f0a8:	4b5b      	ldr	r3, [pc, #364]	; (800f218 <pvPortMalloc+0x180>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d101      	bne.n	800f0b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f0b0:	f000 f920 	bl	800f2f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f0b4:	4b59      	ldr	r3, [pc, #356]	; (800f21c <pvPortMalloc+0x184>)
 800f0b6:	681a      	ldr	r2, [r3, #0]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	4013      	ands	r3, r2
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	f040 8093 	bne.w	800f1e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d01d      	beq.n	800f104 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f0c8:	2208      	movs	r2, #8
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	4413      	add	r3, r2
 800f0ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f003 0307 	and.w	r3, r3, #7
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d014      	beq.n	800f104 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f023 0307 	bic.w	r3, r3, #7
 800f0e0:	3308      	adds	r3, #8
 800f0e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f003 0307 	and.w	r3, r3, #7
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00a      	beq.n	800f104 <pvPortMalloc+0x6c>
	__asm volatile
 800f0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f2:	f383 8811 	msr	BASEPRI, r3
 800f0f6:	f3bf 8f6f 	isb	sy
 800f0fa:	f3bf 8f4f 	dsb	sy
 800f0fe:	617b      	str	r3, [r7, #20]
}
 800f100:	bf00      	nop
 800f102:	e7fe      	b.n	800f102 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d06e      	beq.n	800f1e8 <pvPortMalloc+0x150>
 800f10a:	4b45      	ldr	r3, [pc, #276]	; (800f220 <pvPortMalloc+0x188>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	687a      	ldr	r2, [r7, #4]
 800f110:	429a      	cmp	r2, r3
 800f112:	d869      	bhi.n	800f1e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f114:	4b43      	ldr	r3, [pc, #268]	; (800f224 <pvPortMalloc+0x18c>)
 800f116:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f118:	4b42      	ldr	r3, [pc, #264]	; (800f224 <pvPortMalloc+0x18c>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f11e:	e004      	b.n	800f12a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f122:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	687a      	ldr	r2, [r7, #4]
 800f130:	429a      	cmp	r2, r3
 800f132:	d903      	bls.n	800f13c <pvPortMalloc+0xa4>
 800f134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d1f1      	bne.n	800f120 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f13c:	4b36      	ldr	r3, [pc, #216]	; (800f218 <pvPortMalloc+0x180>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f142:	429a      	cmp	r2, r3
 800f144:	d050      	beq.n	800f1e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f146:	6a3b      	ldr	r3, [r7, #32]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	2208      	movs	r2, #8
 800f14c:	4413      	add	r3, r2
 800f14e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f152:	681a      	ldr	r2, [r3, #0]
 800f154:	6a3b      	ldr	r3, [r7, #32]
 800f156:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15a:	685a      	ldr	r2, [r3, #4]
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	1ad2      	subs	r2, r2, r3
 800f160:	2308      	movs	r3, #8
 800f162:	005b      	lsls	r3, r3, #1
 800f164:	429a      	cmp	r2, r3
 800f166:	d91f      	bls.n	800f1a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	4413      	add	r3, r2
 800f16e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f170:	69bb      	ldr	r3, [r7, #24]
 800f172:	f003 0307 	and.w	r3, r3, #7
 800f176:	2b00      	cmp	r3, #0
 800f178:	d00a      	beq.n	800f190 <pvPortMalloc+0xf8>
	__asm volatile
 800f17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f17e:	f383 8811 	msr	BASEPRI, r3
 800f182:	f3bf 8f6f 	isb	sy
 800f186:	f3bf 8f4f 	dsb	sy
 800f18a:	613b      	str	r3, [r7, #16]
}
 800f18c:	bf00      	nop
 800f18e:	e7fe      	b.n	800f18e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f192:	685a      	ldr	r2, [r3, #4]
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	1ad2      	subs	r2, r2, r3
 800f198:	69bb      	ldr	r3, [r7, #24]
 800f19a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f19e:	687a      	ldr	r2, [r7, #4]
 800f1a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f1a2:	69b8      	ldr	r0, [r7, #24]
 800f1a4:	f000 f908 	bl	800f3b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f1a8:	4b1d      	ldr	r3, [pc, #116]	; (800f220 <pvPortMalloc+0x188>)
 800f1aa:	681a      	ldr	r2, [r3, #0]
 800f1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	1ad3      	subs	r3, r2, r3
 800f1b2:	4a1b      	ldr	r2, [pc, #108]	; (800f220 <pvPortMalloc+0x188>)
 800f1b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f1b6:	4b1a      	ldr	r3, [pc, #104]	; (800f220 <pvPortMalloc+0x188>)
 800f1b8:	681a      	ldr	r2, [r3, #0]
 800f1ba:	4b1b      	ldr	r3, [pc, #108]	; (800f228 <pvPortMalloc+0x190>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d203      	bcs.n	800f1ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f1c2:	4b17      	ldr	r3, [pc, #92]	; (800f220 <pvPortMalloc+0x188>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	4a18      	ldr	r2, [pc, #96]	; (800f228 <pvPortMalloc+0x190>)
 800f1c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1cc:	685a      	ldr	r2, [r3, #4]
 800f1ce:	4b13      	ldr	r3, [pc, #76]	; (800f21c <pvPortMalloc+0x184>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	431a      	orrs	r2, r3
 800f1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1da:	2200      	movs	r2, #0
 800f1dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f1de:	4b13      	ldr	r3, [pc, #76]	; (800f22c <pvPortMalloc+0x194>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	4a11      	ldr	r2, [pc, #68]	; (800f22c <pvPortMalloc+0x194>)
 800f1e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f1e8:	f7fe fd04 	bl	800dbf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f1ec:	69fb      	ldr	r3, [r7, #28]
 800f1ee:	f003 0307 	and.w	r3, r3, #7
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d00a      	beq.n	800f20c <pvPortMalloc+0x174>
	__asm volatile
 800f1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1fa:	f383 8811 	msr	BASEPRI, r3
 800f1fe:	f3bf 8f6f 	isb	sy
 800f202:	f3bf 8f4f 	dsb	sy
 800f206:	60fb      	str	r3, [r7, #12]
}
 800f208:	bf00      	nop
 800f20a:	e7fe      	b.n	800f20a <pvPortMalloc+0x172>
	return pvReturn;
 800f20c:	69fb      	ldr	r3, [r7, #28]
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3728      	adds	r7, #40	; 0x28
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	20007e38 	.word	0x20007e38
 800f21c:	20007e4c 	.word	0x20007e4c
 800f220:	20007e3c 	.word	0x20007e3c
 800f224:	20007e30 	.word	0x20007e30
 800f228:	20007e40 	.word	0x20007e40
 800f22c:	20007e44 	.word	0x20007e44

0800f230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b086      	sub	sp, #24
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d04d      	beq.n	800f2de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f242:	2308      	movs	r3, #8
 800f244:	425b      	negs	r3, r3
 800f246:	697a      	ldr	r2, [r7, #20]
 800f248:	4413      	add	r3, r2
 800f24a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	685a      	ldr	r2, [r3, #4]
 800f254:	4b24      	ldr	r3, [pc, #144]	; (800f2e8 <vPortFree+0xb8>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	4013      	ands	r3, r2
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d10a      	bne.n	800f274 <vPortFree+0x44>
	__asm volatile
 800f25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f262:	f383 8811 	msr	BASEPRI, r3
 800f266:	f3bf 8f6f 	isb	sy
 800f26a:	f3bf 8f4f 	dsb	sy
 800f26e:	60fb      	str	r3, [r7, #12]
}
 800f270:	bf00      	nop
 800f272:	e7fe      	b.n	800f272 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d00a      	beq.n	800f292 <vPortFree+0x62>
	__asm volatile
 800f27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f280:	f383 8811 	msr	BASEPRI, r3
 800f284:	f3bf 8f6f 	isb	sy
 800f288:	f3bf 8f4f 	dsb	sy
 800f28c:	60bb      	str	r3, [r7, #8]
}
 800f28e:	bf00      	nop
 800f290:	e7fe      	b.n	800f290 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f292:	693b      	ldr	r3, [r7, #16]
 800f294:	685a      	ldr	r2, [r3, #4]
 800f296:	4b14      	ldr	r3, [pc, #80]	; (800f2e8 <vPortFree+0xb8>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	4013      	ands	r3, r2
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d01e      	beq.n	800f2de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d11a      	bne.n	800f2de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	685a      	ldr	r2, [r3, #4]
 800f2ac:	4b0e      	ldr	r3, [pc, #56]	; (800f2e8 <vPortFree+0xb8>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	43db      	mvns	r3, r3
 800f2b2:	401a      	ands	r2, r3
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f2b8:	f7fe fc8e 	bl	800dbd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	685a      	ldr	r2, [r3, #4]
 800f2c0:	4b0a      	ldr	r3, [pc, #40]	; (800f2ec <vPortFree+0xbc>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	4413      	add	r3, r2
 800f2c6:	4a09      	ldr	r2, [pc, #36]	; (800f2ec <vPortFree+0xbc>)
 800f2c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f2ca:	6938      	ldr	r0, [r7, #16]
 800f2cc:	f000 f874 	bl	800f3b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f2d0:	4b07      	ldr	r3, [pc, #28]	; (800f2f0 <vPortFree+0xc0>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	4a06      	ldr	r2, [pc, #24]	; (800f2f0 <vPortFree+0xc0>)
 800f2d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f2da:	f7fe fc8b 	bl	800dbf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f2de:	bf00      	nop
 800f2e0:	3718      	adds	r7, #24
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	20007e4c 	.word	0x20007e4c
 800f2ec:	20007e3c 	.word	0x20007e3c
 800f2f0:	20007e48 	.word	0x20007e48

0800f2f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b085      	sub	sp, #20
 800f2f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f2fa:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800f2fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f300:	4b27      	ldr	r3, [pc, #156]	; (800f3a0 <prvHeapInit+0xac>)
 800f302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	f003 0307 	and.w	r3, r3, #7
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d00c      	beq.n	800f328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	3307      	adds	r3, #7
 800f312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	f023 0307 	bic.w	r3, r3, #7
 800f31a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f31c:	68ba      	ldr	r2, [r7, #8]
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	1ad3      	subs	r3, r2, r3
 800f322:	4a1f      	ldr	r2, [pc, #124]	; (800f3a0 <prvHeapInit+0xac>)
 800f324:	4413      	add	r3, r2
 800f326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f32c:	4a1d      	ldr	r2, [pc, #116]	; (800f3a4 <prvHeapInit+0xb0>)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f332:	4b1c      	ldr	r3, [pc, #112]	; (800f3a4 <prvHeapInit+0xb0>)
 800f334:	2200      	movs	r2, #0
 800f336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	68ba      	ldr	r2, [r7, #8]
 800f33c:	4413      	add	r3, r2
 800f33e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f340:	2208      	movs	r2, #8
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	1a9b      	subs	r3, r3, r2
 800f346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	f023 0307 	bic.w	r3, r3, #7
 800f34e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	4a15      	ldr	r2, [pc, #84]	; (800f3a8 <prvHeapInit+0xb4>)
 800f354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f356:	4b14      	ldr	r3, [pc, #80]	; (800f3a8 <prvHeapInit+0xb4>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	2200      	movs	r2, #0
 800f35c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f35e:	4b12      	ldr	r3, [pc, #72]	; (800f3a8 <prvHeapInit+0xb4>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2200      	movs	r2, #0
 800f364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	68fa      	ldr	r2, [r7, #12]
 800f36e:	1ad2      	subs	r2, r2, r3
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f374:	4b0c      	ldr	r3, [pc, #48]	; (800f3a8 <prvHeapInit+0xb4>)
 800f376:	681a      	ldr	r2, [r3, #0]
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	4a0a      	ldr	r2, [pc, #40]	; (800f3ac <prvHeapInit+0xb8>)
 800f382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	4a09      	ldr	r2, [pc, #36]	; (800f3b0 <prvHeapInit+0xbc>)
 800f38a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f38c:	4b09      	ldr	r3, [pc, #36]	; (800f3b4 <prvHeapInit+0xc0>)
 800f38e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f392:	601a      	str	r2, [r3, #0]
}
 800f394:	bf00      	nop
 800f396:	3714      	adds	r7, #20
 800f398:	46bd      	mov	sp, r7
 800f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39e:	4770      	bx	lr
 800f3a0:	20001c88 	.word	0x20001c88
 800f3a4:	20007e30 	.word	0x20007e30
 800f3a8:	20007e38 	.word	0x20007e38
 800f3ac:	20007e40 	.word	0x20007e40
 800f3b0:	20007e3c 	.word	0x20007e3c
 800f3b4:	20007e4c 	.word	0x20007e4c

0800f3b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b085      	sub	sp, #20
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f3c0:	4b28      	ldr	r3, [pc, #160]	; (800f464 <prvInsertBlockIntoFreeList+0xac>)
 800f3c2:	60fb      	str	r3, [r7, #12]
 800f3c4:	e002      	b.n	800f3cc <prvInsertBlockIntoFreeList+0x14>
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	60fb      	str	r3, [r7, #12]
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d8f7      	bhi.n	800f3c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	685b      	ldr	r3, [r3, #4]
 800f3de:	68ba      	ldr	r2, [r7, #8]
 800f3e0:	4413      	add	r3, r2
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d108      	bne.n	800f3fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	685a      	ldr	r2, [r3, #4]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	685b      	ldr	r3, [r3, #4]
 800f3f0:	441a      	add	r2, r3
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	685b      	ldr	r3, [r3, #4]
 800f402:	68ba      	ldr	r2, [r7, #8]
 800f404:	441a      	add	r2, r3
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d118      	bne.n	800f440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	681a      	ldr	r2, [r3, #0]
 800f412:	4b15      	ldr	r3, [pc, #84]	; (800f468 <prvInsertBlockIntoFreeList+0xb0>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	429a      	cmp	r2, r3
 800f418:	d00d      	beq.n	800f436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	685a      	ldr	r2, [r3, #4]
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	441a      	add	r2, r3
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	601a      	str	r2, [r3, #0]
 800f434:	e008      	b.n	800f448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f436:	4b0c      	ldr	r3, [pc, #48]	; (800f468 <prvInsertBlockIntoFreeList+0xb0>)
 800f438:	681a      	ldr	r2, [r3, #0]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	601a      	str	r2, [r3, #0]
 800f43e:	e003      	b.n	800f448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681a      	ldr	r2, [r3, #0]
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f448:	68fa      	ldr	r2, [r7, #12]
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	429a      	cmp	r2, r3
 800f44e:	d002      	beq.n	800f456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	687a      	ldr	r2, [r7, #4]
 800f454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f456:	bf00      	nop
 800f458:	3714      	adds	r7, #20
 800f45a:	46bd      	mov	sp, r7
 800f45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f460:	4770      	bx	lr
 800f462:	bf00      	nop
 800f464:	20007e30 	.word	0x20007e30
 800f468:	20007e38 	.word	0x20007e38

0800f46c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f470:	2200      	movs	r2, #0
 800f472:	4912      	ldr	r1, [pc, #72]	; (800f4bc <MX_USB_DEVICE_Init+0x50>)
 800f474:	4812      	ldr	r0, [pc, #72]	; (800f4c0 <MX_USB_DEVICE_Init+0x54>)
 800f476:	f7fb fdbd 	bl	800aff4 <USBD_Init>
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d001      	beq.n	800f484 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f480:	f7f4 f846 	bl	8003510 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f484:	490f      	ldr	r1, [pc, #60]	; (800f4c4 <MX_USB_DEVICE_Init+0x58>)
 800f486:	480e      	ldr	r0, [pc, #56]	; (800f4c0 <MX_USB_DEVICE_Init+0x54>)
 800f488:	f7fb fde4 	bl	800b054 <USBD_RegisterClass>
 800f48c:	4603      	mov	r3, r0
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d001      	beq.n	800f496 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f492:	f7f4 f83d 	bl	8003510 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f496:	490c      	ldr	r1, [pc, #48]	; (800f4c8 <MX_USB_DEVICE_Init+0x5c>)
 800f498:	4809      	ldr	r0, [pc, #36]	; (800f4c0 <MX_USB_DEVICE_Init+0x54>)
 800f49a:	f7fb fd1b 	bl	800aed4 <USBD_CDC_RegisterInterface>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d001      	beq.n	800f4a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f4a4:	f7f4 f834 	bl	8003510 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f4a8:	4805      	ldr	r0, [pc, #20]	; (800f4c0 <MX_USB_DEVICE_Init+0x54>)
 800f4aa:	f7fb fe09 	bl	800b0c0 <USBD_Start>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d001      	beq.n	800f4b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f4b4:	f7f4 f82c 	bl	8003510 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f4b8:	bf00      	nop
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	2000064c 	.word	0x2000064c
 800f4c0:	20007e50 	.word	0x20007e50
 800f4c4:	200005b4 	.word	0x200005b4
 800f4c8:	20000638 	.word	0x20000638

0800f4cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	4905      	ldr	r1, [pc, #20]	; (800f4e8 <CDC_Init_FS+0x1c>)
 800f4d4:	4805      	ldr	r0, [pc, #20]	; (800f4ec <CDC_Init_FS+0x20>)
 800f4d6:	f7fb fd17 	bl	800af08 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f4da:	4905      	ldr	r1, [pc, #20]	; (800f4f0 <CDC_Init_FS+0x24>)
 800f4dc:	4803      	ldr	r0, [pc, #12]	; (800f4ec <CDC_Init_FS+0x20>)
 800f4de:	f7fb fd35 	bl	800af4c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f4e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	2000852c 	.word	0x2000852c
 800f4ec:	20007e50 	.word	0x20007e50
 800f4f0:	2000812c 	.word	0x2000812c

0800f4f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f4f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr

0800f504 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f504:	b480      	push	{r7}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
 800f50a:	4603      	mov	r3, r0
 800f50c:	6039      	str	r1, [r7, #0]
 800f50e:	71fb      	strb	r3, [r7, #7]
 800f510:	4613      	mov	r3, r2
 800f512:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f514:	79fb      	ldrb	r3, [r7, #7]
 800f516:	2b23      	cmp	r3, #35	; 0x23
 800f518:	d84a      	bhi.n	800f5b0 <CDC_Control_FS+0xac>
 800f51a:	a201      	add	r2, pc, #4	; (adr r2, 800f520 <CDC_Control_FS+0x1c>)
 800f51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f520:	0800f5b1 	.word	0x0800f5b1
 800f524:	0800f5b1 	.word	0x0800f5b1
 800f528:	0800f5b1 	.word	0x0800f5b1
 800f52c:	0800f5b1 	.word	0x0800f5b1
 800f530:	0800f5b1 	.word	0x0800f5b1
 800f534:	0800f5b1 	.word	0x0800f5b1
 800f538:	0800f5b1 	.word	0x0800f5b1
 800f53c:	0800f5b1 	.word	0x0800f5b1
 800f540:	0800f5b1 	.word	0x0800f5b1
 800f544:	0800f5b1 	.word	0x0800f5b1
 800f548:	0800f5b1 	.word	0x0800f5b1
 800f54c:	0800f5b1 	.word	0x0800f5b1
 800f550:	0800f5b1 	.word	0x0800f5b1
 800f554:	0800f5b1 	.word	0x0800f5b1
 800f558:	0800f5b1 	.word	0x0800f5b1
 800f55c:	0800f5b1 	.word	0x0800f5b1
 800f560:	0800f5b1 	.word	0x0800f5b1
 800f564:	0800f5b1 	.word	0x0800f5b1
 800f568:	0800f5b1 	.word	0x0800f5b1
 800f56c:	0800f5b1 	.word	0x0800f5b1
 800f570:	0800f5b1 	.word	0x0800f5b1
 800f574:	0800f5b1 	.word	0x0800f5b1
 800f578:	0800f5b1 	.word	0x0800f5b1
 800f57c:	0800f5b1 	.word	0x0800f5b1
 800f580:	0800f5b1 	.word	0x0800f5b1
 800f584:	0800f5b1 	.word	0x0800f5b1
 800f588:	0800f5b1 	.word	0x0800f5b1
 800f58c:	0800f5b1 	.word	0x0800f5b1
 800f590:	0800f5b1 	.word	0x0800f5b1
 800f594:	0800f5b1 	.word	0x0800f5b1
 800f598:	0800f5b1 	.word	0x0800f5b1
 800f59c:	0800f5b1 	.word	0x0800f5b1
 800f5a0:	0800f5b1 	.word	0x0800f5b1
 800f5a4:	0800f5b1 	.word	0x0800f5b1
 800f5a8:	0800f5b1 	.word	0x0800f5b1
 800f5ac:	0800f5b1 	.word	0x0800f5b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f5b0:	bf00      	nop
  }

  return (USBD_OK);
 800f5b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	370c      	adds	r7, #12
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr

0800f5c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b082      	sub	sp, #8
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f5ca:	6879      	ldr	r1, [r7, #4]
 800f5cc:	4805      	ldr	r0, [pc, #20]	; (800f5e4 <CDC_Receive_FS+0x24>)
 800f5ce:	f7fb fcbd 	bl	800af4c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f5d2:	4804      	ldr	r0, [pc, #16]	; (800f5e4 <CDC_Receive_FS+0x24>)
 800f5d4:	f7fb fcd8 	bl	800af88 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f5d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3708      	adds	r7, #8
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}
 800f5e2:	bf00      	nop
 800f5e4:	20007e50 	.word	0x20007e50

0800f5e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f5e8:	b480      	push	{r7}
 800f5ea:	b087      	sub	sp, #28
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	60f8      	str	r0, [r7, #12]
 800f5f0:	60b9      	str	r1, [r7, #8]
 800f5f2:	4613      	mov	r3, r2
 800f5f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f5fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	371c      	adds	r7, #28
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr
	...

0800f60c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f60c:	b480      	push	{r7}
 800f60e:	b083      	sub	sp, #12
 800f610:	af00      	add	r7, sp, #0
 800f612:	4603      	mov	r3, r0
 800f614:	6039      	str	r1, [r7, #0]
 800f616:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	2212      	movs	r2, #18
 800f61c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f61e:	4b03      	ldr	r3, [pc, #12]	; (800f62c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f620:	4618      	mov	r0, r3
 800f622:	370c      	adds	r7, #12
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr
 800f62c:	20000668 	.word	0x20000668

0800f630 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f630:	b480      	push	{r7}
 800f632:	b083      	sub	sp, #12
 800f634:	af00      	add	r7, sp, #0
 800f636:	4603      	mov	r3, r0
 800f638:	6039      	str	r1, [r7, #0]
 800f63a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	2204      	movs	r2, #4
 800f640:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f642:	4b03      	ldr	r3, [pc, #12]	; (800f650 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f644:	4618      	mov	r0, r3
 800f646:	370c      	adds	r7, #12
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr
 800f650:	2000067c 	.word	0x2000067c

0800f654 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
 800f65a:	4603      	mov	r3, r0
 800f65c:	6039      	str	r1, [r7, #0]
 800f65e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f660:	79fb      	ldrb	r3, [r7, #7]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d105      	bne.n	800f672 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f666:	683a      	ldr	r2, [r7, #0]
 800f668:	4907      	ldr	r1, [pc, #28]	; (800f688 <USBD_FS_ProductStrDescriptor+0x34>)
 800f66a:	4808      	ldr	r0, [pc, #32]	; (800f68c <USBD_FS_ProductStrDescriptor+0x38>)
 800f66c:	f7fc fed4 	bl	800c418 <USBD_GetString>
 800f670:	e004      	b.n	800f67c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f672:	683a      	ldr	r2, [r7, #0]
 800f674:	4904      	ldr	r1, [pc, #16]	; (800f688 <USBD_FS_ProductStrDescriptor+0x34>)
 800f676:	4805      	ldr	r0, [pc, #20]	; (800f68c <USBD_FS_ProductStrDescriptor+0x38>)
 800f678:	f7fc fece 	bl	800c418 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f67c:	4b02      	ldr	r3, [pc, #8]	; (800f688 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3708      	adds	r7, #8
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
 800f686:	bf00      	nop
 800f688:	2000892c 	.word	0x2000892c
 800f68c:	08010c0c 	.word	0x08010c0c

0800f690 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	af00      	add	r7, sp, #0
 800f696:	4603      	mov	r3, r0
 800f698:	6039      	str	r1, [r7, #0]
 800f69a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f69c:	683a      	ldr	r2, [r7, #0]
 800f69e:	4904      	ldr	r1, [pc, #16]	; (800f6b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f6a0:	4804      	ldr	r0, [pc, #16]	; (800f6b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f6a2:	f7fc feb9 	bl	800c418 <USBD_GetString>
  return USBD_StrDesc;
 800f6a6:	4b02      	ldr	r3, [pc, #8]	; (800f6b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3708      	adds	r7, #8
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}
 800f6b0:	2000892c 	.word	0x2000892c
 800f6b4:	08010c24 	.word	0x08010c24

0800f6b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b082      	sub	sp, #8
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	4603      	mov	r3, r0
 800f6c0:	6039      	str	r1, [r7, #0]
 800f6c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	221a      	movs	r2, #26
 800f6c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f6ca:	f000 f843 	bl	800f754 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f6ce:	4b02      	ldr	r3, [pc, #8]	; (800f6d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	3708      	adds	r7, #8
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}
 800f6d8:	20000680 	.word	0x20000680

0800f6dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	6039      	str	r1, [r7, #0]
 800f6e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f6e8:	79fb      	ldrb	r3, [r7, #7]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d105      	bne.n	800f6fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f6ee:	683a      	ldr	r2, [r7, #0]
 800f6f0:	4907      	ldr	r1, [pc, #28]	; (800f710 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f6f2:	4808      	ldr	r0, [pc, #32]	; (800f714 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f6f4:	f7fc fe90 	bl	800c418 <USBD_GetString>
 800f6f8:	e004      	b.n	800f704 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f6fa:	683a      	ldr	r2, [r7, #0]
 800f6fc:	4904      	ldr	r1, [pc, #16]	; (800f710 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f6fe:	4805      	ldr	r0, [pc, #20]	; (800f714 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f700:	f7fc fe8a 	bl	800c418 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f704:	4b02      	ldr	r3, [pc, #8]	; (800f710 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f706:	4618      	mov	r0, r3
 800f708:	3708      	adds	r7, #8
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}
 800f70e:	bf00      	nop
 800f710:	2000892c 	.word	0x2000892c
 800f714:	08010c38 	.word	0x08010c38

0800f718 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	4603      	mov	r3, r0
 800f720:	6039      	str	r1, [r7, #0]
 800f722:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f724:	79fb      	ldrb	r3, [r7, #7]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d105      	bne.n	800f736 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f72a:	683a      	ldr	r2, [r7, #0]
 800f72c:	4907      	ldr	r1, [pc, #28]	; (800f74c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f72e:	4808      	ldr	r0, [pc, #32]	; (800f750 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f730:	f7fc fe72 	bl	800c418 <USBD_GetString>
 800f734:	e004      	b.n	800f740 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f736:	683a      	ldr	r2, [r7, #0]
 800f738:	4904      	ldr	r1, [pc, #16]	; (800f74c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f73a:	4805      	ldr	r0, [pc, #20]	; (800f750 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f73c:	f7fc fe6c 	bl	800c418 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f740:	4b02      	ldr	r3, [pc, #8]	; (800f74c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f742:	4618      	mov	r0, r3
 800f744:	3708      	adds	r7, #8
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
 800f74a:	bf00      	nop
 800f74c:	2000892c 	.word	0x2000892c
 800f750:	08010c44 	.word	0x08010c44

0800f754 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b084      	sub	sp, #16
 800f758:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f75a:	4b0f      	ldr	r3, [pc, #60]	; (800f798 <Get_SerialNum+0x44>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f760:	4b0e      	ldr	r3, [pc, #56]	; (800f79c <Get_SerialNum+0x48>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f766:	4b0e      	ldr	r3, [pc, #56]	; (800f7a0 <Get_SerialNum+0x4c>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f76c:	68fa      	ldr	r2, [r7, #12]
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	4413      	add	r3, r2
 800f772:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d009      	beq.n	800f78e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f77a:	2208      	movs	r2, #8
 800f77c:	4909      	ldr	r1, [pc, #36]	; (800f7a4 <Get_SerialNum+0x50>)
 800f77e:	68f8      	ldr	r0, [r7, #12]
 800f780:	f000 f814 	bl	800f7ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f784:	2204      	movs	r2, #4
 800f786:	4908      	ldr	r1, [pc, #32]	; (800f7a8 <Get_SerialNum+0x54>)
 800f788:	68b8      	ldr	r0, [r7, #8]
 800f78a:	f000 f80f 	bl	800f7ac <IntToUnicode>
  }
}
 800f78e:	bf00      	nop
 800f790:	3710      	adds	r7, #16
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}
 800f796:	bf00      	nop
 800f798:	1fff7a10 	.word	0x1fff7a10
 800f79c:	1fff7a14 	.word	0x1fff7a14
 800f7a0:	1fff7a18 	.word	0x1fff7a18
 800f7a4:	20000682 	.word	0x20000682
 800f7a8:	20000692 	.word	0x20000692

0800f7ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b087      	sub	sp, #28
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	60f8      	str	r0, [r7, #12]
 800f7b4:	60b9      	str	r1, [r7, #8]
 800f7b6:	4613      	mov	r3, r2
 800f7b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f7be:	2300      	movs	r3, #0
 800f7c0:	75fb      	strb	r3, [r7, #23]
 800f7c2:	e027      	b.n	800f814 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	0f1b      	lsrs	r3, r3, #28
 800f7c8:	2b09      	cmp	r3, #9
 800f7ca:	d80b      	bhi.n	800f7e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	0f1b      	lsrs	r3, r3, #28
 800f7d0:	b2da      	uxtb	r2, r3
 800f7d2:	7dfb      	ldrb	r3, [r7, #23]
 800f7d4:	005b      	lsls	r3, r3, #1
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	440b      	add	r3, r1
 800f7dc:	3230      	adds	r2, #48	; 0x30
 800f7de:	b2d2      	uxtb	r2, r2
 800f7e0:	701a      	strb	r2, [r3, #0]
 800f7e2:	e00a      	b.n	800f7fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	0f1b      	lsrs	r3, r3, #28
 800f7e8:	b2da      	uxtb	r2, r3
 800f7ea:	7dfb      	ldrb	r3, [r7, #23]
 800f7ec:	005b      	lsls	r3, r3, #1
 800f7ee:	4619      	mov	r1, r3
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	440b      	add	r3, r1
 800f7f4:	3237      	adds	r2, #55	; 0x37
 800f7f6:	b2d2      	uxtb	r2, r2
 800f7f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	011b      	lsls	r3, r3, #4
 800f7fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f800:	7dfb      	ldrb	r3, [r7, #23]
 800f802:	005b      	lsls	r3, r3, #1
 800f804:	3301      	adds	r3, #1
 800f806:	68ba      	ldr	r2, [r7, #8]
 800f808:	4413      	add	r3, r2
 800f80a:	2200      	movs	r2, #0
 800f80c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f80e:	7dfb      	ldrb	r3, [r7, #23]
 800f810:	3301      	adds	r3, #1
 800f812:	75fb      	strb	r3, [r7, #23]
 800f814:	7dfa      	ldrb	r2, [r7, #23]
 800f816:	79fb      	ldrb	r3, [r7, #7]
 800f818:	429a      	cmp	r2, r3
 800f81a:	d3d3      	bcc.n	800f7c4 <IntToUnicode+0x18>
  }
}
 800f81c:	bf00      	nop
 800f81e:	bf00      	nop
 800f820:	371c      	adds	r7, #28
 800f822:	46bd      	mov	sp, r7
 800f824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f828:	4770      	bx	lr
	...

0800f82c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b08a      	sub	sp, #40	; 0x28
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f834:	f107 0314 	add.w	r3, r7, #20
 800f838:	2200      	movs	r2, #0
 800f83a:	601a      	str	r2, [r3, #0]
 800f83c:	605a      	str	r2, [r3, #4]
 800f83e:	609a      	str	r2, [r3, #8]
 800f840:	60da      	str	r2, [r3, #12]
 800f842:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f84c:	d13a      	bne.n	800f8c4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f84e:	2300      	movs	r3, #0
 800f850:	613b      	str	r3, [r7, #16]
 800f852:	4b1e      	ldr	r3, [pc, #120]	; (800f8cc <HAL_PCD_MspInit+0xa0>)
 800f854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f856:	4a1d      	ldr	r2, [pc, #116]	; (800f8cc <HAL_PCD_MspInit+0xa0>)
 800f858:	f043 0301 	orr.w	r3, r3, #1
 800f85c:	6313      	str	r3, [r2, #48]	; 0x30
 800f85e:	4b1b      	ldr	r3, [pc, #108]	; (800f8cc <HAL_PCD_MspInit+0xa0>)
 800f860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f862:	f003 0301 	and.w	r3, r3, #1
 800f866:	613b      	str	r3, [r7, #16]
 800f868:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f86a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f86e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f870:	2302      	movs	r3, #2
 800f872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f874:	2300      	movs	r3, #0
 800f876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f878:	2303      	movs	r3, #3
 800f87a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f87c:	230a      	movs	r3, #10
 800f87e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f880:	f107 0314 	add.w	r3, r7, #20
 800f884:	4619      	mov	r1, r3
 800f886:	4812      	ldr	r0, [pc, #72]	; (800f8d0 <HAL_PCD_MspInit+0xa4>)
 800f888:	f7f4 fd3c 	bl	8004304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f88c:	4b0f      	ldr	r3, [pc, #60]	; (800f8cc <HAL_PCD_MspInit+0xa0>)
 800f88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f890:	4a0e      	ldr	r2, [pc, #56]	; (800f8cc <HAL_PCD_MspInit+0xa0>)
 800f892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f896:	6353      	str	r3, [r2, #52]	; 0x34
 800f898:	2300      	movs	r3, #0
 800f89a:	60fb      	str	r3, [r7, #12]
 800f89c:	4b0b      	ldr	r3, [pc, #44]	; (800f8cc <HAL_PCD_MspInit+0xa0>)
 800f89e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8a0:	4a0a      	ldr	r2, [pc, #40]	; (800f8cc <HAL_PCD_MspInit+0xa0>)
 800f8a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f8a6:	6453      	str	r3, [r2, #68]	; 0x44
 800f8a8:	4b08      	ldr	r3, [pc, #32]	; (800f8cc <HAL_PCD_MspInit+0xa0>)
 800f8aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f8b0:	60fb      	str	r3, [r7, #12]
 800f8b2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	2105      	movs	r1, #5
 800f8b8:	2043      	movs	r0, #67	; 0x43
 800f8ba:	f7f4 fcf9 	bl	80042b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f8be:	2043      	movs	r0, #67	; 0x43
 800f8c0:	f7f4 fd12 	bl	80042e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f8c4:	bf00      	nop
 800f8c6:	3728      	adds	r7, #40	; 0x28
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}
 800f8cc:	40023800 	.word	0x40023800
 800f8d0:	40020000 	.word	0x40020000

0800f8d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b082      	sub	sp, #8
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	4610      	mov	r0, r2
 800f8ec:	f7fb fc35 	bl	800b15a <USBD_LL_SetupStage>
}
 800f8f0:	bf00      	nop
 800f8f2:	3708      	adds	r7, #8
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b082      	sub	sp, #8
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	460b      	mov	r3, r1
 800f902:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f90a:	78fa      	ldrb	r2, [r7, #3]
 800f90c:	6879      	ldr	r1, [r7, #4]
 800f90e:	4613      	mov	r3, r2
 800f910:	00db      	lsls	r3, r3, #3
 800f912:	4413      	add	r3, r2
 800f914:	009b      	lsls	r3, r3, #2
 800f916:	440b      	add	r3, r1
 800f918:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	78fb      	ldrb	r3, [r7, #3]
 800f920:	4619      	mov	r1, r3
 800f922:	f7fb fc6f 	bl	800b204 <USBD_LL_DataOutStage>
}
 800f926:	bf00      	nop
 800f928:	3708      	adds	r7, #8
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}

0800f92e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f92e:	b580      	push	{r7, lr}
 800f930:	b082      	sub	sp, #8
 800f932:	af00      	add	r7, sp, #0
 800f934:	6078      	str	r0, [r7, #4]
 800f936:	460b      	mov	r3, r1
 800f938:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f940:	78fa      	ldrb	r2, [r7, #3]
 800f942:	6879      	ldr	r1, [r7, #4]
 800f944:	4613      	mov	r3, r2
 800f946:	00db      	lsls	r3, r3, #3
 800f948:	4413      	add	r3, r2
 800f94a:	009b      	lsls	r3, r3, #2
 800f94c:	440b      	add	r3, r1
 800f94e:	334c      	adds	r3, #76	; 0x4c
 800f950:	681a      	ldr	r2, [r3, #0]
 800f952:	78fb      	ldrb	r3, [r7, #3]
 800f954:	4619      	mov	r1, r3
 800f956:	f7fb fd08 	bl	800b36a <USBD_LL_DataInStage>
}
 800f95a:	bf00      	nop
 800f95c:	3708      	adds	r7, #8
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}

0800f962 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f962:	b580      	push	{r7, lr}
 800f964:	b082      	sub	sp, #8
 800f966:	af00      	add	r7, sp, #0
 800f968:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f970:	4618      	mov	r0, r3
 800f972:	f7fb fe3c 	bl	800b5ee <USBD_LL_SOF>
}
 800f976:	bf00      	nop
 800f978:	3708      	adds	r7, #8
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}

0800f97e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f97e:	b580      	push	{r7, lr}
 800f980:	b084      	sub	sp, #16
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f986:	2301      	movs	r3, #1
 800f988:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	68db      	ldr	r3, [r3, #12]
 800f98e:	2b02      	cmp	r3, #2
 800f990:	d001      	beq.n	800f996 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f992:	f7f3 fdbd 	bl	8003510 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f99c:	7bfa      	ldrb	r2, [r7, #15]
 800f99e:	4611      	mov	r1, r2
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f7fb fde6 	bl	800b572 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f7fb fd8e 	bl	800b4ce <USBD_LL_Reset>
}
 800f9b2:	bf00      	nop
 800f9b4:	3710      	adds	r7, #16
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
	...

0800f9bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b082      	sub	sp, #8
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7fb fde1 	bl	800b592 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	6812      	ldr	r2, [r2, #0]
 800f9de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f9e2:	f043 0301 	orr.w	r3, r3, #1
 800f9e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6a1b      	ldr	r3, [r3, #32]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d005      	beq.n	800f9fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f9f0:	4b04      	ldr	r3, [pc, #16]	; (800fa04 <HAL_PCD_SuspendCallback+0x48>)
 800f9f2:	691b      	ldr	r3, [r3, #16]
 800f9f4:	4a03      	ldr	r2, [pc, #12]	; (800fa04 <HAL_PCD_SuspendCallback+0x48>)
 800f9f6:	f043 0306 	orr.w	r3, r3, #6
 800f9fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f9fc:	bf00      	nop
 800f9fe:	3708      	adds	r7, #8
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}
 800fa04:	e000ed00 	.word	0xe000ed00

0800fa08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7fb fdd1 	bl	800b5be <USBD_LL_Resume>
}
 800fa1c:	bf00      	nop
 800fa1e:	3708      	adds	r7, #8
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}

0800fa24 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b082      	sub	sp, #8
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	460b      	mov	r3, r1
 800fa2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa36:	78fa      	ldrb	r2, [r7, #3]
 800fa38:	4611      	mov	r1, r2
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7fb fe29 	bl	800b692 <USBD_LL_IsoOUTIncomplete>
}
 800fa40:	bf00      	nop
 800fa42:	3708      	adds	r7, #8
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	460b      	mov	r3, r1
 800fa52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa5a:	78fa      	ldrb	r2, [r7, #3]
 800fa5c:	4611      	mov	r1, r2
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f7fb fde5 	bl	800b62e <USBD_LL_IsoINIncomplete>
}
 800fa64:	bf00      	nop
 800fa66:	3708      	adds	r7, #8
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}

0800fa6c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b082      	sub	sp, #8
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f7fb fe3b 	bl	800b6f6 <USBD_LL_DevConnected>
}
 800fa80:	bf00      	nop
 800fa82:	3708      	adds	r7, #8
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}

0800fa88 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7fb fe38 	bl	800b70c <USBD_LL_DevDisconnected>
}
 800fa9c:	bf00      	nop
 800fa9e:	3708      	adds	r7, #8
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}

0800faa4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	781b      	ldrb	r3, [r3, #0]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d13c      	bne.n	800fb2e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fab4:	4a20      	ldr	r2, [pc, #128]	; (800fb38 <USBD_LL_Init+0x94>)
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	4a1e      	ldr	r2, [pc, #120]	; (800fb38 <USBD_LL_Init+0x94>)
 800fac0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fac4:	4b1c      	ldr	r3, [pc, #112]	; (800fb38 <USBD_LL_Init+0x94>)
 800fac6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800faca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800facc:	4b1a      	ldr	r3, [pc, #104]	; (800fb38 <USBD_LL_Init+0x94>)
 800face:	2204      	movs	r2, #4
 800fad0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fad2:	4b19      	ldr	r3, [pc, #100]	; (800fb38 <USBD_LL_Init+0x94>)
 800fad4:	2202      	movs	r2, #2
 800fad6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fad8:	4b17      	ldr	r3, [pc, #92]	; (800fb38 <USBD_LL_Init+0x94>)
 800fada:	2200      	movs	r2, #0
 800fadc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fade:	4b16      	ldr	r3, [pc, #88]	; (800fb38 <USBD_LL_Init+0x94>)
 800fae0:	2202      	movs	r2, #2
 800fae2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fae4:	4b14      	ldr	r3, [pc, #80]	; (800fb38 <USBD_LL_Init+0x94>)
 800fae6:	2200      	movs	r2, #0
 800fae8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800faea:	4b13      	ldr	r3, [pc, #76]	; (800fb38 <USBD_LL_Init+0x94>)
 800faec:	2200      	movs	r2, #0
 800faee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800faf0:	4b11      	ldr	r3, [pc, #68]	; (800fb38 <USBD_LL_Init+0x94>)
 800faf2:	2200      	movs	r2, #0
 800faf4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800faf6:	4b10      	ldr	r3, [pc, #64]	; (800fb38 <USBD_LL_Init+0x94>)
 800faf8:	2200      	movs	r2, #0
 800fafa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fafc:	4b0e      	ldr	r3, [pc, #56]	; (800fb38 <USBD_LL_Init+0x94>)
 800fafe:	2200      	movs	r2, #0
 800fb00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fb02:	480d      	ldr	r0, [pc, #52]	; (800fb38 <USBD_LL_Init+0x94>)
 800fb04:	f7f5 fd8b 	bl	800561e <HAL_PCD_Init>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d001      	beq.n	800fb12 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fb0e:	f7f3 fcff 	bl	8003510 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fb12:	2180      	movs	r1, #128	; 0x80
 800fb14:	4808      	ldr	r0, [pc, #32]	; (800fb38 <USBD_LL_Init+0x94>)
 800fb16:	f7f6 ffe2 	bl	8006ade <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fb1a:	2240      	movs	r2, #64	; 0x40
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	4806      	ldr	r0, [pc, #24]	; (800fb38 <USBD_LL_Init+0x94>)
 800fb20:	f7f6 ff96 	bl	8006a50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fb24:	2280      	movs	r2, #128	; 0x80
 800fb26:	2101      	movs	r1, #1
 800fb28:	4803      	ldr	r0, [pc, #12]	; (800fb38 <USBD_LL_Init+0x94>)
 800fb2a:	f7f6 ff91 	bl	8006a50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800fb2e:	2300      	movs	r3, #0
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	20008b2c 	.word	0x20008b2c

0800fb3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b084      	sub	sp, #16
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb44:	2300      	movs	r3, #0
 800fb46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb52:	4618      	mov	r0, r3
 800fb54:	f7f5 fe80 	bl	8005858 <HAL_PCD_Start>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb5c:	7bfb      	ldrb	r3, [r7, #15]
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f000 f942 	bl	800fde8 <USBD_Get_USB_Status>
 800fb64:	4603      	mov	r3, r0
 800fb66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb68:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	3710      	adds	r7, #16
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}

0800fb72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fb72:	b580      	push	{r7, lr}
 800fb74:	b084      	sub	sp, #16
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	6078      	str	r0, [r7, #4]
 800fb7a:	4608      	mov	r0, r1
 800fb7c:	4611      	mov	r1, r2
 800fb7e:	461a      	mov	r2, r3
 800fb80:	4603      	mov	r3, r0
 800fb82:	70fb      	strb	r3, [r7, #3]
 800fb84:	460b      	mov	r3, r1
 800fb86:	70bb      	strb	r3, [r7, #2]
 800fb88:	4613      	mov	r3, r2
 800fb8a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb90:	2300      	movs	r3, #0
 800fb92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fb9a:	78bb      	ldrb	r3, [r7, #2]
 800fb9c:	883a      	ldrh	r2, [r7, #0]
 800fb9e:	78f9      	ldrb	r1, [r7, #3]
 800fba0:	f7f6 fb51 	bl	8006246 <HAL_PCD_EP_Open>
 800fba4:	4603      	mov	r3, r0
 800fba6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fba8:	7bfb      	ldrb	r3, [r7, #15]
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f000 f91c 	bl	800fde8 <USBD_Get_USB_Status>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3710      	adds	r7, #16
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}

0800fbbe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbbe:	b580      	push	{r7, lr}
 800fbc0:	b084      	sub	sp, #16
 800fbc2:	af00      	add	r7, sp, #0
 800fbc4:	6078      	str	r0, [r7, #4]
 800fbc6:	460b      	mov	r3, r1
 800fbc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fbd8:	78fa      	ldrb	r2, [r7, #3]
 800fbda:	4611      	mov	r1, r2
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f7f6 fb9a 	bl	8006316 <HAL_PCD_EP_Close>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbe6:	7bfb      	ldrb	r3, [r7, #15]
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f000 f8fd 	bl	800fde8 <USBD_Get_USB_Status>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3710      	adds	r7, #16
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b084      	sub	sp, #16
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	460b      	mov	r3, r1
 800fc06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc08:	2300      	movs	r3, #0
 800fc0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc16:	78fa      	ldrb	r2, [r7, #3]
 800fc18:	4611      	mov	r1, r2
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7f6 fc72 	bl	8006504 <HAL_PCD_EP_SetStall>
 800fc20:	4603      	mov	r3, r0
 800fc22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc24:	7bfb      	ldrb	r3, [r7, #15]
 800fc26:	4618      	mov	r0, r3
 800fc28:	f000 f8de 	bl	800fde8 <USBD_Get_USB_Status>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc30:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3710      	adds	r7, #16
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}

0800fc3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc3a:	b580      	push	{r7, lr}
 800fc3c:	b084      	sub	sp, #16
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
 800fc42:	460b      	mov	r3, r1
 800fc44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc46:	2300      	movs	r3, #0
 800fc48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc54:	78fa      	ldrb	r2, [r7, #3]
 800fc56:	4611      	mov	r1, r2
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7f6 fcb7 	bl	80065cc <HAL_PCD_EP_ClrStall>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc62:	7bfb      	ldrb	r3, [r7, #15]
 800fc64:	4618      	mov	r0, r3
 800fc66:	f000 f8bf 	bl	800fde8 <USBD_Get_USB_Status>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3710      	adds	r7, #16
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}

0800fc78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b085      	sub	sp, #20
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	460b      	mov	r3, r1
 800fc82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fc8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	da0b      	bge.n	800fcac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fc94:	78fb      	ldrb	r3, [r7, #3]
 800fc96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fc9a:	68f9      	ldr	r1, [r7, #12]
 800fc9c:	4613      	mov	r3, r2
 800fc9e:	00db      	lsls	r3, r3, #3
 800fca0:	4413      	add	r3, r2
 800fca2:	009b      	lsls	r3, r3, #2
 800fca4:	440b      	add	r3, r1
 800fca6:	333e      	adds	r3, #62	; 0x3e
 800fca8:	781b      	ldrb	r3, [r3, #0]
 800fcaa:	e00b      	b.n	800fcc4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fcac:	78fb      	ldrb	r3, [r7, #3]
 800fcae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fcb2:	68f9      	ldr	r1, [r7, #12]
 800fcb4:	4613      	mov	r3, r2
 800fcb6:	00db      	lsls	r3, r3, #3
 800fcb8:	4413      	add	r3, r2
 800fcba:	009b      	lsls	r3, r3, #2
 800fcbc:	440b      	add	r3, r1
 800fcbe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fcc2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	3714      	adds	r7, #20
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcce:	4770      	bx	lr

0800fcd0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b084      	sub	sp, #16
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	460b      	mov	r3, r1
 800fcda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fce0:	2300      	movs	r3, #0
 800fce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fcea:	78fa      	ldrb	r2, [r7, #3]
 800fcec:	4611      	mov	r1, r2
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7f6 fa84 	bl	80061fc <HAL_PCD_SetAddress>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcf8:	7bfb      	ldrb	r3, [r7, #15]
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f000 f874 	bl	800fde8 <USBD_Get_USB_Status>
 800fd00:	4603      	mov	r3, r0
 800fd02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd04:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3710      	adds	r7, #16
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}

0800fd0e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fd0e:	b580      	push	{r7, lr}
 800fd10:	b086      	sub	sp, #24
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	60f8      	str	r0, [r7, #12]
 800fd16:	607a      	str	r2, [r7, #4]
 800fd18:	603b      	str	r3, [r7, #0]
 800fd1a:	460b      	mov	r3, r1
 800fd1c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd22:	2300      	movs	r3, #0
 800fd24:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fd2c:	7af9      	ldrb	r1, [r7, #11]
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	687a      	ldr	r2, [r7, #4]
 800fd32:	f7f6 fb9d 	bl	8006470 <HAL_PCD_EP_Transmit>
 800fd36:	4603      	mov	r3, r0
 800fd38:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd3a:	7dfb      	ldrb	r3, [r7, #23]
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f000 f853 	bl	800fde8 <USBD_Get_USB_Status>
 800fd42:	4603      	mov	r3, r0
 800fd44:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fd46:	7dbb      	ldrb	r3, [r7, #22]
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3718      	adds	r7, #24
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b086      	sub	sp, #24
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	607a      	str	r2, [r7, #4]
 800fd5a:	603b      	str	r3, [r7, #0]
 800fd5c:	460b      	mov	r3, r1
 800fd5e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd60:	2300      	movs	r3, #0
 800fd62:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd64:	2300      	movs	r3, #0
 800fd66:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fd6e:	7af9      	ldrb	r1, [r7, #11]
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	687a      	ldr	r2, [r7, #4]
 800fd74:	f7f6 fb19 	bl	80063aa <HAL_PCD_EP_Receive>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd7c:	7dfb      	ldrb	r3, [r7, #23]
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f000 f832 	bl	800fde8 <USBD_Get_USB_Status>
 800fd84:	4603      	mov	r3, r0
 800fd86:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fd88:	7dbb      	ldrb	r3, [r7, #22]
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3718      	adds	r7, #24
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}

0800fd92 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd92:	b580      	push	{r7, lr}
 800fd94:	b082      	sub	sp, #8
 800fd96:	af00      	add	r7, sp, #0
 800fd98:	6078      	str	r0, [r7, #4]
 800fd9a:	460b      	mov	r3, r1
 800fd9c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fda4:	78fa      	ldrb	r2, [r7, #3]
 800fda6:	4611      	mov	r1, r2
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f7f6 fb49 	bl	8006440 <HAL_PCD_EP_GetRxCount>
 800fdae:	4603      	mov	r3, r0
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3708      	adds	r7, #8
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fdb8:	b480      	push	{r7}
 800fdba:	b083      	sub	sp, #12
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fdc0:	4b03      	ldr	r3, [pc, #12]	; (800fdd0 <USBD_static_malloc+0x18>)
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	370c      	adds	r7, #12
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdcc:	4770      	bx	lr
 800fdce:	bf00      	nop
 800fdd0:	20009038 	.word	0x20009038

0800fdd4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	b083      	sub	sp, #12
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]

}
 800fddc:	bf00      	nop
 800fdde:	370c      	adds	r7, #12
 800fde0:	46bd      	mov	sp, r7
 800fde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde6:	4770      	bx	lr

0800fde8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fde8:	b480      	push	{r7}
 800fdea:	b085      	sub	sp, #20
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	4603      	mov	r3, r0
 800fdf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fdf6:	79fb      	ldrb	r3, [r7, #7]
 800fdf8:	2b03      	cmp	r3, #3
 800fdfa:	d817      	bhi.n	800fe2c <USBD_Get_USB_Status+0x44>
 800fdfc:	a201      	add	r2, pc, #4	; (adr r2, 800fe04 <USBD_Get_USB_Status+0x1c>)
 800fdfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe02:	bf00      	nop
 800fe04:	0800fe15 	.word	0x0800fe15
 800fe08:	0800fe1b 	.word	0x0800fe1b
 800fe0c:	0800fe21 	.word	0x0800fe21
 800fe10:	0800fe27 	.word	0x0800fe27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fe14:	2300      	movs	r3, #0
 800fe16:	73fb      	strb	r3, [r7, #15]
    break;
 800fe18:	e00b      	b.n	800fe32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fe1a:	2303      	movs	r3, #3
 800fe1c:	73fb      	strb	r3, [r7, #15]
    break;
 800fe1e:	e008      	b.n	800fe32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fe20:	2301      	movs	r3, #1
 800fe22:	73fb      	strb	r3, [r7, #15]
    break;
 800fe24:	e005      	b.n	800fe32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fe26:	2303      	movs	r3, #3
 800fe28:	73fb      	strb	r3, [r7, #15]
    break;
 800fe2a:	e002      	b.n	800fe32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fe2c:	2303      	movs	r3, #3
 800fe2e:	73fb      	strb	r3, [r7, #15]
    break;
 800fe30:	bf00      	nop
  }
  return usb_status;
 800fe32:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3714      	adds	r7, #20
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr

0800fe40 <__errno>:
 800fe40:	4b01      	ldr	r3, [pc, #4]	; (800fe48 <__errno+0x8>)
 800fe42:	6818      	ldr	r0, [r3, #0]
 800fe44:	4770      	bx	lr
 800fe46:	bf00      	nop
 800fe48:	2000069c 	.word	0x2000069c

0800fe4c <__libc_init_array>:
 800fe4c:	b570      	push	{r4, r5, r6, lr}
 800fe4e:	4d0d      	ldr	r5, [pc, #52]	; (800fe84 <__libc_init_array+0x38>)
 800fe50:	4c0d      	ldr	r4, [pc, #52]	; (800fe88 <__libc_init_array+0x3c>)
 800fe52:	1b64      	subs	r4, r4, r5
 800fe54:	10a4      	asrs	r4, r4, #2
 800fe56:	2600      	movs	r6, #0
 800fe58:	42a6      	cmp	r6, r4
 800fe5a:	d109      	bne.n	800fe70 <__libc_init_array+0x24>
 800fe5c:	4d0b      	ldr	r5, [pc, #44]	; (800fe8c <__libc_init_array+0x40>)
 800fe5e:	4c0c      	ldr	r4, [pc, #48]	; (800fe90 <__libc_init_array+0x44>)
 800fe60:	f000 fcc0 	bl	80107e4 <_init>
 800fe64:	1b64      	subs	r4, r4, r5
 800fe66:	10a4      	asrs	r4, r4, #2
 800fe68:	2600      	movs	r6, #0
 800fe6a:	42a6      	cmp	r6, r4
 800fe6c:	d105      	bne.n	800fe7a <__libc_init_array+0x2e>
 800fe6e:	bd70      	pop	{r4, r5, r6, pc}
 800fe70:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe74:	4798      	blx	r3
 800fe76:	3601      	adds	r6, #1
 800fe78:	e7ee      	b.n	800fe58 <__libc_init_array+0xc>
 800fe7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe7e:	4798      	blx	r3
 800fe80:	3601      	adds	r6, #1
 800fe82:	e7f2      	b.n	800fe6a <__libc_init_array+0x1e>
 800fe84:	080111d4 	.word	0x080111d4
 800fe88:	080111d4 	.word	0x080111d4
 800fe8c:	080111d4 	.word	0x080111d4
 800fe90:	080111d8 	.word	0x080111d8

0800fe94 <malloc>:
 800fe94:	4b02      	ldr	r3, [pc, #8]	; (800fea0 <malloc+0xc>)
 800fe96:	4601      	mov	r1, r0
 800fe98:	6818      	ldr	r0, [r3, #0]
 800fe9a:	f000 b88d 	b.w	800ffb8 <_malloc_r>
 800fe9e:	bf00      	nop
 800fea0:	2000069c 	.word	0x2000069c

0800fea4 <free>:
 800fea4:	4b02      	ldr	r3, [pc, #8]	; (800feb0 <free+0xc>)
 800fea6:	4601      	mov	r1, r0
 800fea8:	6818      	ldr	r0, [r3, #0]
 800feaa:	f000 b819 	b.w	800fee0 <_free_r>
 800feae:	bf00      	nop
 800feb0:	2000069c 	.word	0x2000069c

0800feb4 <memcpy>:
 800feb4:	440a      	add	r2, r1
 800feb6:	4291      	cmp	r1, r2
 800feb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800febc:	d100      	bne.n	800fec0 <memcpy+0xc>
 800febe:	4770      	bx	lr
 800fec0:	b510      	push	{r4, lr}
 800fec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800feca:	4291      	cmp	r1, r2
 800fecc:	d1f9      	bne.n	800fec2 <memcpy+0xe>
 800fece:	bd10      	pop	{r4, pc}

0800fed0 <memset>:
 800fed0:	4402      	add	r2, r0
 800fed2:	4603      	mov	r3, r0
 800fed4:	4293      	cmp	r3, r2
 800fed6:	d100      	bne.n	800feda <memset+0xa>
 800fed8:	4770      	bx	lr
 800feda:	f803 1b01 	strb.w	r1, [r3], #1
 800fede:	e7f9      	b.n	800fed4 <memset+0x4>

0800fee0 <_free_r>:
 800fee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fee2:	2900      	cmp	r1, #0
 800fee4:	d044      	beq.n	800ff70 <_free_r+0x90>
 800fee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800feea:	9001      	str	r0, [sp, #4]
 800feec:	2b00      	cmp	r3, #0
 800feee:	f1a1 0404 	sub.w	r4, r1, #4
 800fef2:	bfb8      	it	lt
 800fef4:	18e4      	addlt	r4, r4, r3
 800fef6:	f000 f927 	bl	8010148 <__malloc_lock>
 800fefa:	4a1e      	ldr	r2, [pc, #120]	; (800ff74 <_free_r+0x94>)
 800fefc:	9801      	ldr	r0, [sp, #4]
 800fefe:	6813      	ldr	r3, [r2, #0]
 800ff00:	b933      	cbnz	r3, 800ff10 <_free_r+0x30>
 800ff02:	6063      	str	r3, [r4, #4]
 800ff04:	6014      	str	r4, [r2, #0]
 800ff06:	b003      	add	sp, #12
 800ff08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff0c:	f000 b922 	b.w	8010154 <__malloc_unlock>
 800ff10:	42a3      	cmp	r3, r4
 800ff12:	d908      	bls.n	800ff26 <_free_r+0x46>
 800ff14:	6825      	ldr	r5, [r4, #0]
 800ff16:	1961      	adds	r1, r4, r5
 800ff18:	428b      	cmp	r3, r1
 800ff1a:	bf01      	itttt	eq
 800ff1c:	6819      	ldreq	r1, [r3, #0]
 800ff1e:	685b      	ldreq	r3, [r3, #4]
 800ff20:	1949      	addeq	r1, r1, r5
 800ff22:	6021      	streq	r1, [r4, #0]
 800ff24:	e7ed      	b.n	800ff02 <_free_r+0x22>
 800ff26:	461a      	mov	r2, r3
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	b10b      	cbz	r3, 800ff30 <_free_r+0x50>
 800ff2c:	42a3      	cmp	r3, r4
 800ff2e:	d9fa      	bls.n	800ff26 <_free_r+0x46>
 800ff30:	6811      	ldr	r1, [r2, #0]
 800ff32:	1855      	adds	r5, r2, r1
 800ff34:	42a5      	cmp	r5, r4
 800ff36:	d10b      	bne.n	800ff50 <_free_r+0x70>
 800ff38:	6824      	ldr	r4, [r4, #0]
 800ff3a:	4421      	add	r1, r4
 800ff3c:	1854      	adds	r4, r2, r1
 800ff3e:	42a3      	cmp	r3, r4
 800ff40:	6011      	str	r1, [r2, #0]
 800ff42:	d1e0      	bne.n	800ff06 <_free_r+0x26>
 800ff44:	681c      	ldr	r4, [r3, #0]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	6053      	str	r3, [r2, #4]
 800ff4a:	4421      	add	r1, r4
 800ff4c:	6011      	str	r1, [r2, #0]
 800ff4e:	e7da      	b.n	800ff06 <_free_r+0x26>
 800ff50:	d902      	bls.n	800ff58 <_free_r+0x78>
 800ff52:	230c      	movs	r3, #12
 800ff54:	6003      	str	r3, [r0, #0]
 800ff56:	e7d6      	b.n	800ff06 <_free_r+0x26>
 800ff58:	6825      	ldr	r5, [r4, #0]
 800ff5a:	1961      	adds	r1, r4, r5
 800ff5c:	428b      	cmp	r3, r1
 800ff5e:	bf04      	itt	eq
 800ff60:	6819      	ldreq	r1, [r3, #0]
 800ff62:	685b      	ldreq	r3, [r3, #4]
 800ff64:	6063      	str	r3, [r4, #4]
 800ff66:	bf04      	itt	eq
 800ff68:	1949      	addeq	r1, r1, r5
 800ff6a:	6021      	streq	r1, [r4, #0]
 800ff6c:	6054      	str	r4, [r2, #4]
 800ff6e:	e7ca      	b.n	800ff06 <_free_r+0x26>
 800ff70:	b003      	add	sp, #12
 800ff72:	bd30      	pop	{r4, r5, pc}
 800ff74:	20009258 	.word	0x20009258

0800ff78 <sbrk_aligned>:
 800ff78:	b570      	push	{r4, r5, r6, lr}
 800ff7a:	4e0e      	ldr	r6, [pc, #56]	; (800ffb4 <sbrk_aligned+0x3c>)
 800ff7c:	460c      	mov	r4, r1
 800ff7e:	6831      	ldr	r1, [r6, #0]
 800ff80:	4605      	mov	r5, r0
 800ff82:	b911      	cbnz	r1, 800ff8a <sbrk_aligned+0x12>
 800ff84:	f000 f894 	bl	80100b0 <_sbrk_r>
 800ff88:	6030      	str	r0, [r6, #0]
 800ff8a:	4621      	mov	r1, r4
 800ff8c:	4628      	mov	r0, r5
 800ff8e:	f000 f88f 	bl	80100b0 <_sbrk_r>
 800ff92:	1c43      	adds	r3, r0, #1
 800ff94:	d00a      	beq.n	800ffac <sbrk_aligned+0x34>
 800ff96:	1cc4      	adds	r4, r0, #3
 800ff98:	f024 0403 	bic.w	r4, r4, #3
 800ff9c:	42a0      	cmp	r0, r4
 800ff9e:	d007      	beq.n	800ffb0 <sbrk_aligned+0x38>
 800ffa0:	1a21      	subs	r1, r4, r0
 800ffa2:	4628      	mov	r0, r5
 800ffa4:	f000 f884 	bl	80100b0 <_sbrk_r>
 800ffa8:	3001      	adds	r0, #1
 800ffaa:	d101      	bne.n	800ffb0 <sbrk_aligned+0x38>
 800ffac:	f04f 34ff 	mov.w	r4, #4294967295
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	bd70      	pop	{r4, r5, r6, pc}
 800ffb4:	2000925c 	.word	0x2000925c

0800ffb8 <_malloc_r>:
 800ffb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffbc:	1ccd      	adds	r5, r1, #3
 800ffbe:	f025 0503 	bic.w	r5, r5, #3
 800ffc2:	3508      	adds	r5, #8
 800ffc4:	2d0c      	cmp	r5, #12
 800ffc6:	bf38      	it	cc
 800ffc8:	250c      	movcc	r5, #12
 800ffca:	2d00      	cmp	r5, #0
 800ffcc:	4607      	mov	r7, r0
 800ffce:	db01      	blt.n	800ffd4 <_malloc_r+0x1c>
 800ffd0:	42a9      	cmp	r1, r5
 800ffd2:	d905      	bls.n	800ffe0 <_malloc_r+0x28>
 800ffd4:	230c      	movs	r3, #12
 800ffd6:	603b      	str	r3, [r7, #0]
 800ffd8:	2600      	movs	r6, #0
 800ffda:	4630      	mov	r0, r6
 800ffdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffe0:	4e2e      	ldr	r6, [pc, #184]	; (801009c <_malloc_r+0xe4>)
 800ffe2:	f000 f8b1 	bl	8010148 <__malloc_lock>
 800ffe6:	6833      	ldr	r3, [r6, #0]
 800ffe8:	461c      	mov	r4, r3
 800ffea:	bb34      	cbnz	r4, 801003a <_malloc_r+0x82>
 800ffec:	4629      	mov	r1, r5
 800ffee:	4638      	mov	r0, r7
 800fff0:	f7ff ffc2 	bl	800ff78 <sbrk_aligned>
 800fff4:	1c43      	adds	r3, r0, #1
 800fff6:	4604      	mov	r4, r0
 800fff8:	d14d      	bne.n	8010096 <_malloc_r+0xde>
 800fffa:	6834      	ldr	r4, [r6, #0]
 800fffc:	4626      	mov	r6, r4
 800fffe:	2e00      	cmp	r6, #0
 8010000:	d140      	bne.n	8010084 <_malloc_r+0xcc>
 8010002:	6823      	ldr	r3, [r4, #0]
 8010004:	4631      	mov	r1, r6
 8010006:	4638      	mov	r0, r7
 8010008:	eb04 0803 	add.w	r8, r4, r3
 801000c:	f000 f850 	bl	80100b0 <_sbrk_r>
 8010010:	4580      	cmp	r8, r0
 8010012:	d13a      	bne.n	801008a <_malloc_r+0xd2>
 8010014:	6821      	ldr	r1, [r4, #0]
 8010016:	3503      	adds	r5, #3
 8010018:	1a6d      	subs	r5, r5, r1
 801001a:	f025 0503 	bic.w	r5, r5, #3
 801001e:	3508      	adds	r5, #8
 8010020:	2d0c      	cmp	r5, #12
 8010022:	bf38      	it	cc
 8010024:	250c      	movcc	r5, #12
 8010026:	4629      	mov	r1, r5
 8010028:	4638      	mov	r0, r7
 801002a:	f7ff ffa5 	bl	800ff78 <sbrk_aligned>
 801002e:	3001      	adds	r0, #1
 8010030:	d02b      	beq.n	801008a <_malloc_r+0xd2>
 8010032:	6823      	ldr	r3, [r4, #0]
 8010034:	442b      	add	r3, r5
 8010036:	6023      	str	r3, [r4, #0]
 8010038:	e00e      	b.n	8010058 <_malloc_r+0xa0>
 801003a:	6822      	ldr	r2, [r4, #0]
 801003c:	1b52      	subs	r2, r2, r5
 801003e:	d41e      	bmi.n	801007e <_malloc_r+0xc6>
 8010040:	2a0b      	cmp	r2, #11
 8010042:	d916      	bls.n	8010072 <_malloc_r+0xba>
 8010044:	1961      	adds	r1, r4, r5
 8010046:	42a3      	cmp	r3, r4
 8010048:	6025      	str	r5, [r4, #0]
 801004a:	bf18      	it	ne
 801004c:	6059      	strne	r1, [r3, #4]
 801004e:	6863      	ldr	r3, [r4, #4]
 8010050:	bf08      	it	eq
 8010052:	6031      	streq	r1, [r6, #0]
 8010054:	5162      	str	r2, [r4, r5]
 8010056:	604b      	str	r3, [r1, #4]
 8010058:	4638      	mov	r0, r7
 801005a:	f104 060b 	add.w	r6, r4, #11
 801005e:	f000 f879 	bl	8010154 <__malloc_unlock>
 8010062:	f026 0607 	bic.w	r6, r6, #7
 8010066:	1d23      	adds	r3, r4, #4
 8010068:	1af2      	subs	r2, r6, r3
 801006a:	d0b6      	beq.n	800ffda <_malloc_r+0x22>
 801006c:	1b9b      	subs	r3, r3, r6
 801006e:	50a3      	str	r3, [r4, r2]
 8010070:	e7b3      	b.n	800ffda <_malloc_r+0x22>
 8010072:	6862      	ldr	r2, [r4, #4]
 8010074:	42a3      	cmp	r3, r4
 8010076:	bf0c      	ite	eq
 8010078:	6032      	streq	r2, [r6, #0]
 801007a:	605a      	strne	r2, [r3, #4]
 801007c:	e7ec      	b.n	8010058 <_malloc_r+0xa0>
 801007e:	4623      	mov	r3, r4
 8010080:	6864      	ldr	r4, [r4, #4]
 8010082:	e7b2      	b.n	800ffea <_malloc_r+0x32>
 8010084:	4634      	mov	r4, r6
 8010086:	6876      	ldr	r6, [r6, #4]
 8010088:	e7b9      	b.n	800fffe <_malloc_r+0x46>
 801008a:	230c      	movs	r3, #12
 801008c:	603b      	str	r3, [r7, #0]
 801008e:	4638      	mov	r0, r7
 8010090:	f000 f860 	bl	8010154 <__malloc_unlock>
 8010094:	e7a1      	b.n	800ffda <_malloc_r+0x22>
 8010096:	6025      	str	r5, [r4, #0]
 8010098:	e7de      	b.n	8010058 <_malloc_r+0xa0>
 801009a:	bf00      	nop
 801009c:	20009258 	.word	0x20009258

080100a0 <realloc>:
 80100a0:	4b02      	ldr	r3, [pc, #8]	; (80100ac <realloc+0xc>)
 80100a2:	460a      	mov	r2, r1
 80100a4:	4601      	mov	r1, r0
 80100a6:	6818      	ldr	r0, [r3, #0]
 80100a8:	f000 b85a 	b.w	8010160 <_realloc_r>
 80100ac:	2000069c 	.word	0x2000069c

080100b0 <_sbrk_r>:
 80100b0:	b538      	push	{r3, r4, r5, lr}
 80100b2:	4d06      	ldr	r5, [pc, #24]	; (80100cc <_sbrk_r+0x1c>)
 80100b4:	2300      	movs	r3, #0
 80100b6:	4604      	mov	r4, r0
 80100b8:	4608      	mov	r0, r1
 80100ba:	602b      	str	r3, [r5, #0]
 80100bc:	f7f3 ff68 	bl	8003f90 <_sbrk>
 80100c0:	1c43      	adds	r3, r0, #1
 80100c2:	d102      	bne.n	80100ca <_sbrk_r+0x1a>
 80100c4:	682b      	ldr	r3, [r5, #0]
 80100c6:	b103      	cbz	r3, 80100ca <_sbrk_r+0x1a>
 80100c8:	6023      	str	r3, [r4, #0]
 80100ca:	bd38      	pop	{r3, r4, r5, pc}
 80100cc:	20009260 	.word	0x20009260

080100d0 <siprintf>:
 80100d0:	b40e      	push	{r1, r2, r3}
 80100d2:	b500      	push	{lr}
 80100d4:	b09c      	sub	sp, #112	; 0x70
 80100d6:	ab1d      	add	r3, sp, #116	; 0x74
 80100d8:	9002      	str	r0, [sp, #8]
 80100da:	9006      	str	r0, [sp, #24]
 80100dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80100e0:	4809      	ldr	r0, [pc, #36]	; (8010108 <siprintf+0x38>)
 80100e2:	9107      	str	r1, [sp, #28]
 80100e4:	9104      	str	r1, [sp, #16]
 80100e6:	4909      	ldr	r1, [pc, #36]	; (801010c <siprintf+0x3c>)
 80100e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80100ec:	9105      	str	r1, [sp, #20]
 80100ee:	6800      	ldr	r0, [r0, #0]
 80100f0:	9301      	str	r3, [sp, #4]
 80100f2:	a902      	add	r1, sp, #8
 80100f4:	f000 f8be 	bl	8010274 <_svfiprintf_r>
 80100f8:	9b02      	ldr	r3, [sp, #8]
 80100fa:	2200      	movs	r2, #0
 80100fc:	701a      	strb	r2, [r3, #0]
 80100fe:	b01c      	add	sp, #112	; 0x70
 8010100:	f85d eb04 	ldr.w	lr, [sp], #4
 8010104:	b003      	add	sp, #12
 8010106:	4770      	bx	lr
 8010108:	2000069c 	.word	0x2000069c
 801010c:	ffff0208 	.word	0xffff0208

08010110 <strcpy>:
 8010110:	4603      	mov	r3, r0
 8010112:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010116:	f803 2b01 	strb.w	r2, [r3], #1
 801011a:	2a00      	cmp	r2, #0
 801011c:	d1f9      	bne.n	8010112 <strcpy+0x2>
 801011e:	4770      	bx	lr

08010120 <strncpy>:
 8010120:	b510      	push	{r4, lr}
 8010122:	3901      	subs	r1, #1
 8010124:	4603      	mov	r3, r0
 8010126:	b132      	cbz	r2, 8010136 <strncpy+0x16>
 8010128:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801012c:	f803 4b01 	strb.w	r4, [r3], #1
 8010130:	3a01      	subs	r2, #1
 8010132:	2c00      	cmp	r4, #0
 8010134:	d1f7      	bne.n	8010126 <strncpy+0x6>
 8010136:	441a      	add	r2, r3
 8010138:	2100      	movs	r1, #0
 801013a:	4293      	cmp	r3, r2
 801013c:	d100      	bne.n	8010140 <strncpy+0x20>
 801013e:	bd10      	pop	{r4, pc}
 8010140:	f803 1b01 	strb.w	r1, [r3], #1
 8010144:	e7f9      	b.n	801013a <strncpy+0x1a>
	...

08010148 <__malloc_lock>:
 8010148:	4801      	ldr	r0, [pc, #4]	; (8010150 <__malloc_lock+0x8>)
 801014a:	f000 bb27 	b.w	801079c <__retarget_lock_acquire_recursive>
 801014e:	bf00      	nop
 8010150:	20009264 	.word	0x20009264

08010154 <__malloc_unlock>:
 8010154:	4801      	ldr	r0, [pc, #4]	; (801015c <__malloc_unlock+0x8>)
 8010156:	f000 bb22 	b.w	801079e <__retarget_lock_release_recursive>
 801015a:	bf00      	nop
 801015c:	20009264 	.word	0x20009264

08010160 <_realloc_r>:
 8010160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010164:	4680      	mov	r8, r0
 8010166:	4614      	mov	r4, r2
 8010168:	460e      	mov	r6, r1
 801016a:	b921      	cbnz	r1, 8010176 <_realloc_r+0x16>
 801016c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010170:	4611      	mov	r1, r2
 8010172:	f7ff bf21 	b.w	800ffb8 <_malloc_r>
 8010176:	b92a      	cbnz	r2, 8010184 <_realloc_r+0x24>
 8010178:	f7ff feb2 	bl	800fee0 <_free_r>
 801017c:	4625      	mov	r5, r4
 801017e:	4628      	mov	r0, r5
 8010180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010184:	f000 fb26 	bl	80107d4 <_malloc_usable_size_r>
 8010188:	4284      	cmp	r4, r0
 801018a:	4607      	mov	r7, r0
 801018c:	d802      	bhi.n	8010194 <_realloc_r+0x34>
 801018e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010192:	d812      	bhi.n	80101ba <_realloc_r+0x5a>
 8010194:	4621      	mov	r1, r4
 8010196:	4640      	mov	r0, r8
 8010198:	f7ff ff0e 	bl	800ffb8 <_malloc_r>
 801019c:	4605      	mov	r5, r0
 801019e:	2800      	cmp	r0, #0
 80101a0:	d0ed      	beq.n	801017e <_realloc_r+0x1e>
 80101a2:	42bc      	cmp	r4, r7
 80101a4:	4622      	mov	r2, r4
 80101a6:	4631      	mov	r1, r6
 80101a8:	bf28      	it	cs
 80101aa:	463a      	movcs	r2, r7
 80101ac:	f7ff fe82 	bl	800feb4 <memcpy>
 80101b0:	4631      	mov	r1, r6
 80101b2:	4640      	mov	r0, r8
 80101b4:	f7ff fe94 	bl	800fee0 <_free_r>
 80101b8:	e7e1      	b.n	801017e <_realloc_r+0x1e>
 80101ba:	4635      	mov	r5, r6
 80101bc:	e7df      	b.n	801017e <_realloc_r+0x1e>

080101be <__ssputs_r>:
 80101be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101c2:	688e      	ldr	r6, [r1, #8]
 80101c4:	429e      	cmp	r6, r3
 80101c6:	4682      	mov	sl, r0
 80101c8:	460c      	mov	r4, r1
 80101ca:	4690      	mov	r8, r2
 80101cc:	461f      	mov	r7, r3
 80101ce:	d838      	bhi.n	8010242 <__ssputs_r+0x84>
 80101d0:	898a      	ldrh	r2, [r1, #12]
 80101d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80101d6:	d032      	beq.n	801023e <__ssputs_r+0x80>
 80101d8:	6825      	ldr	r5, [r4, #0]
 80101da:	6909      	ldr	r1, [r1, #16]
 80101dc:	eba5 0901 	sub.w	r9, r5, r1
 80101e0:	6965      	ldr	r5, [r4, #20]
 80101e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80101e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80101ea:	3301      	adds	r3, #1
 80101ec:	444b      	add	r3, r9
 80101ee:	106d      	asrs	r5, r5, #1
 80101f0:	429d      	cmp	r5, r3
 80101f2:	bf38      	it	cc
 80101f4:	461d      	movcc	r5, r3
 80101f6:	0553      	lsls	r3, r2, #21
 80101f8:	d531      	bpl.n	801025e <__ssputs_r+0xa0>
 80101fa:	4629      	mov	r1, r5
 80101fc:	f7ff fedc 	bl	800ffb8 <_malloc_r>
 8010200:	4606      	mov	r6, r0
 8010202:	b950      	cbnz	r0, 801021a <__ssputs_r+0x5c>
 8010204:	230c      	movs	r3, #12
 8010206:	f8ca 3000 	str.w	r3, [sl]
 801020a:	89a3      	ldrh	r3, [r4, #12]
 801020c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010210:	81a3      	strh	r3, [r4, #12]
 8010212:	f04f 30ff 	mov.w	r0, #4294967295
 8010216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801021a:	6921      	ldr	r1, [r4, #16]
 801021c:	464a      	mov	r2, r9
 801021e:	f7ff fe49 	bl	800feb4 <memcpy>
 8010222:	89a3      	ldrh	r3, [r4, #12]
 8010224:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801022c:	81a3      	strh	r3, [r4, #12]
 801022e:	6126      	str	r6, [r4, #16]
 8010230:	6165      	str	r5, [r4, #20]
 8010232:	444e      	add	r6, r9
 8010234:	eba5 0509 	sub.w	r5, r5, r9
 8010238:	6026      	str	r6, [r4, #0]
 801023a:	60a5      	str	r5, [r4, #8]
 801023c:	463e      	mov	r6, r7
 801023e:	42be      	cmp	r6, r7
 8010240:	d900      	bls.n	8010244 <__ssputs_r+0x86>
 8010242:	463e      	mov	r6, r7
 8010244:	6820      	ldr	r0, [r4, #0]
 8010246:	4632      	mov	r2, r6
 8010248:	4641      	mov	r1, r8
 801024a:	f000 faa9 	bl	80107a0 <memmove>
 801024e:	68a3      	ldr	r3, [r4, #8]
 8010250:	1b9b      	subs	r3, r3, r6
 8010252:	60a3      	str	r3, [r4, #8]
 8010254:	6823      	ldr	r3, [r4, #0]
 8010256:	4433      	add	r3, r6
 8010258:	6023      	str	r3, [r4, #0]
 801025a:	2000      	movs	r0, #0
 801025c:	e7db      	b.n	8010216 <__ssputs_r+0x58>
 801025e:	462a      	mov	r2, r5
 8010260:	f7ff ff7e 	bl	8010160 <_realloc_r>
 8010264:	4606      	mov	r6, r0
 8010266:	2800      	cmp	r0, #0
 8010268:	d1e1      	bne.n	801022e <__ssputs_r+0x70>
 801026a:	6921      	ldr	r1, [r4, #16]
 801026c:	4650      	mov	r0, sl
 801026e:	f7ff fe37 	bl	800fee0 <_free_r>
 8010272:	e7c7      	b.n	8010204 <__ssputs_r+0x46>

08010274 <_svfiprintf_r>:
 8010274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010278:	4698      	mov	r8, r3
 801027a:	898b      	ldrh	r3, [r1, #12]
 801027c:	061b      	lsls	r3, r3, #24
 801027e:	b09d      	sub	sp, #116	; 0x74
 8010280:	4607      	mov	r7, r0
 8010282:	460d      	mov	r5, r1
 8010284:	4614      	mov	r4, r2
 8010286:	d50e      	bpl.n	80102a6 <_svfiprintf_r+0x32>
 8010288:	690b      	ldr	r3, [r1, #16]
 801028a:	b963      	cbnz	r3, 80102a6 <_svfiprintf_r+0x32>
 801028c:	2140      	movs	r1, #64	; 0x40
 801028e:	f7ff fe93 	bl	800ffb8 <_malloc_r>
 8010292:	6028      	str	r0, [r5, #0]
 8010294:	6128      	str	r0, [r5, #16]
 8010296:	b920      	cbnz	r0, 80102a2 <_svfiprintf_r+0x2e>
 8010298:	230c      	movs	r3, #12
 801029a:	603b      	str	r3, [r7, #0]
 801029c:	f04f 30ff 	mov.w	r0, #4294967295
 80102a0:	e0d1      	b.n	8010446 <_svfiprintf_r+0x1d2>
 80102a2:	2340      	movs	r3, #64	; 0x40
 80102a4:	616b      	str	r3, [r5, #20]
 80102a6:	2300      	movs	r3, #0
 80102a8:	9309      	str	r3, [sp, #36]	; 0x24
 80102aa:	2320      	movs	r3, #32
 80102ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80102b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80102b4:	2330      	movs	r3, #48	; 0x30
 80102b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010460 <_svfiprintf_r+0x1ec>
 80102ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80102be:	f04f 0901 	mov.w	r9, #1
 80102c2:	4623      	mov	r3, r4
 80102c4:	469a      	mov	sl, r3
 80102c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102ca:	b10a      	cbz	r2, 80102d0 <_svfiprintf_r+0x5c>
 80102cc:	2a25      	cmp	r2, #37	; 0x25
 80102ce:	d1f9      	bne.n	80102c4 <_svfiprintf_r+0x50>
 80102d0:	ebba 0b04 	subs.w	fp, sl, r4
 80102d4:	d00b      	beq.n	80102ee <_svfiprintf_r+0x7a>
 80102d6:	465b      	mov	r3, fp
 80102d8:	4622      	mov	r2, r4
 80102da:	4629      	mov	r1, r5
 80102dc:	4638      	mov	r0, r7
 80102de:	f7ff ff6e 	bl	80101be <__ssputs_r>
 80102e2:	3001      	adds	r0, #1
 80102e4:	f000 80aa 	beq.w	801043c <_svfiprintf_r+0x1c8>
 80102e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80102ea:	445a      	add	r2, fp
 80102ec:	9209      	str	r2, [sp, #36]	; 0x24
 80102ee:	f89a 3000 	ldrb.w	r3, [sl]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	f000 80a2 	beq.w	801043c <_svfiprintf_r+0x1c8>
 80102f8:	2300      	movs	r3, #0
 80102fa:	f04f 32ff 	mov.w	r2, #4294967295
 80102fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010302:	f10a 0a01 	add.w	sl, sl, #1
 8010306:	9304      	str	r3, [sp, #16]
 8010308:	9307      	str	r3, [sp, #28]
 801030a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801030e:	931a      	str	r3, [sp, #104]	; 0x68
 8010310:	4654      	mov	r4, sl
 8010312:	2205      	movs	r2, #5
 8010314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010318:	4851      	ldr	r0, [pc, #324]	; (8010460 <_svfiprintf_r+0x1ec>)
 801031a:	f7ef ff69 	bl	80001f0 <memchr>
 801031e:	9a04      	ldr	r2, [sp, #16]
 8010320:	b9d8      	cbnz	r0, 801035a <_svfiprintf_r+0xe6>
 8010322:	06d0      	lsls	r0, r2, #27
 8010324:	bf44      	itt	mi
 8010326:	2320      	movmi	r3, #32
 8010328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801032c:	0711      	lsls	r1, r2, #28
 801032e:	bf44      	itt	mi
 8010330:	232b      	movmi	r3, #43	; 0x2b
 8010332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010336:	f89a 3000 	ldrb.w	r3, [sl]
 801033a:	2b2a      	cmp	r3, #42	; 0x2a
 801033c:	d015      	beq.n	801036a <_svfiprintf_r+0xf6>
 801033e:	9a07      	ldr	r2, [sp, #28]
 8010340:	4654      	mov	r4, sl
 8010342:	2000      	movs	r0, #0
 8010344:	f04f 0c0a 	mov.w	ip, #10
 8010348:	4621      	mov	r1, r4
 801034a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801034e:	3b30      	subs	r3, #48	; 0x30
 8010350:	2b09      	cmp	r3, #9
 8010352:	d94e      	bls.n	80103f2 <_svfiprintf_r+0x17e>
 8010354:	b1b0      	cbz	r0, 8010384 <_svfiprintf_r+0x110>
 8010356:	9207      	str	r2, [sp, #28]
 8010358:	e014      	b.n	8010384 <_svfiprintf_r+0x110>
 801035a:	eba0 0308 	sub.w	r3, r0, r8
 801035e:	fa09 f303 	lsl.w	r3, r9, r3
 8010362:	4313      	orrs	r3, r2
 8010364:	9304      	str	r3, [sp, #16]
 8010366:	46a2      	mov	sl, r4
 8010368:	e7d2      	b.n	8010310 <_svfiprintf_r+0x9c>
 801036a:	9b03      	ldr	r3, [sp, #12]
 801036c:	1d19      	adds	r1, r3, #4
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	9103      	str	r1, [sp, #12]
 8010372:	2b00      	cmp	r3, #0
 8010374:	bfbb      	ittet	lt
 8010376:	425b      	neglt	r3, r3
 8010378:	f042 0202 	orrlt.w	r2, r2, #2
 801037c:	9307      	strge	r3, [sp, #28]
 801037e:	9307      	strlt	r3, [sp, #28]
 8010380:	bfb8      	it	lt
 8010382:	9204      	strlt	r2, [sp, #16]
 8010384:	7823      	ldrb	r3, [r4, #0]
 8010386:	2b2e      	cmp	r3, #46	; 0x2e
 8010388:	d10c      	bne.n	80103a4 <_svfiprintf_r+0x130>
 801038a:	7863      	ldrb	r3, [r4, #1]
 801038c:	2b2a      	cmp	r3, #42	; 0x2a
 801038e:	d135      	bne.n	80103fc <_svfiprintf_r+0x188>
 8010390:	9b03      	ldr	r3, [sp, #12]
 8010392:	1d1a      	adds	r2, r3, #4
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	9203      	str	r2, [sp, #12]
 8010398:	2b00      	cmp	r3, #0
 801039a:	bfb8      	it	lt
 801039c:	f04f 33ff 	movlt.w	r3, #4294967295
 80103a0:	3402      	adds	r4, #2
 80103a2:	9305      	str	r3, [sp, #20]
 80103a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010470 <_svfiprintf_r+0x1fc>
 80103a8:	7821      	ldrb	r1, [r4, #0]
 80103aa:	2203      	movs	r2, #3
 80103ac:	4650      	mov	r0, sl
 80103ae:	f7ef ff1f 	bl	80001f0 <memchr>
 80103b2:	b140      	cbz	r0, 80103c6 <_svfiprintf_r+0x152>
 80103b4:	2340      	movs	r3, #64	; 0x40
 80103b6:	eba0 000a 	sub.w	r0, r0, sl
 80103ba:	fa03 f000 	lsl.w	r0, r3, r0
 80103be:	9b04      	ldr	r3, [sp, #16]
 80103c0:	4303      	orrs	r3, r0
 80103c2:	3401      	adds	r4, #1
 80103c4:	9304      	str	r3, [sp, #16]
 80103c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103ca:	4826      	ldr	r0, [pc, #152]	; (8010464 <_svfiprintf_r+0x1f0>)
 80103cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80103d0:	2206      	movs	r2, #6
 80103d2:	f7ef ff0d 	bl	80001f0 <memchr>
 80103d6:	2800      	cmp	r0, #0
 80103d8:	d038      	beq.n	801044c <_svfiprintf_r+0x1d8>
 80103da:	4b23      	ldr	r3, [pc, #140]	; (8010468 <_svfiprintf_r+0x1f4>)
 80103dc:	bb1b      	cbnz	r3, 8010426 <_svfiprintf_r+0x1b2>
 80103de:	9b03      	ldr	r3, [sp, #12]
 80103e0:	3307      	adds	r3, #7
 80103e2:	f023 0307 	bic.w	r3, r3, #7
 80103e6:	3308      	adds	r3, #8
 80103e8:	9303      	str	r3, [sp, #12]
 80103ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103ec:	4433      	add	r3, r6
 80103ee:	9309      	str	r3, [sp, #36]	; 0x24
 80103f0:	e767      	b.n	80102c2 <_svfiprintf_r+0x4e>
 80103f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80103f6:	460c      	mov	r4, r1
 80103f8:	2001      	movs	r0, #1
 80103fa:	e7a5      	b.n	8010348 <_svfiprintf_r+0xd4>
 80103fc:	2300      	movs	r3, #0
 80103fe:	3401      	adds	r4, #1
 8010400:	9305      	str	r3, [sp, #20]
 8010402:	4619      	mov	r1, r3
 8010404:	f04f 0c0a 	mov.w	ip, #10
 8010408:	4620      	mov	r0, r4
 801040a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801040e:	3a30      	subs	r2, #48	; 0x30
 8010410:	2a09      	cmp	r2, #9
 8010412:	d903      	bls.n	801041c <_svfiprintf_r+0x1a8>
 8010414:	2b00      	cmp	r3, #0
 8010416:	d0c5      	beq.n	80103a4 <_svfiprintf_r+0x130>
 8010418:	9105      	str	r1, [sp, #20]
 801041a:	e7c3      	b.n	80103a4 <_svfiprintf_r+0x130>
 801041c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010420:	4604      	mov	r4, r0
 8010422:	2301      	movs	r3, #1
 8010424:	e7f0      	b.n	8010408 <_svfiprintf_r+0x194>
 8010426:	ab03      	add	r3, sp, #12
 8010428:	9300      	str	r3, [sp, #0]
 801042a:	462a      	mov	r2, r5
 801042c:	4b0f      	ldr	r3, [pc, #60]	; (801046c <_svfiprintf_r+0x1f8>)
 801042e:	a904      	add	r1, sp, #16
 8010430:	4638      	mov	r0, r7
 8010432:	f3af 8000 	nop.w
 8010436:	1c42      	adds	r2, r0, #1
 8010438:	4606      	mov	r6, r0
 801043a:	d1d6      	bne.n	80103ea <_svfiprintf_r+0x176>
 801043c:	89ab      	ldrh	r3, [r5, #12]
 801043e:	065b      	lsls	r3, r3, #25
 8010440:	f53f af2c 	bmi.w	801029c <_svfiprintf_r+0x28>
 8010444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010446:	b01d      	add	sp, #116	; 0x74
 8010448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801044c:	ab03      	add	r3, sp, #12
 801044e:	9300      	str	r3, [sp, #0]
 8010450:	462a      	mov	r2, r5
 8010452:	4b06      	ldr	r3, [pc, #24]	; (801046c <_svfiprintf_r+0x1f8>)
 8010454:	a904      	add	r1, sp, #16
 8010456:	4638      	mov	r0, r7
 8010458:	f000 f87a 	bl	8010550 <_printf_i>
 801045c:	e7eb      	b.n	8010436 <_svfiprintf_r+0x1c2>
 801045e:	bf00      	nop
 8010460:	08011198 	.word	0x08011198
 8010464:	080111a2 	.word	0x080111a2
 8010468:	00000000 	.word	0x00000000
 801046c:	080101bf 	.word	0x080101bf
 8010470:	0801119e 	.word	0x0801119e

08010474 <_printf_common>:
 8010474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010478:	4616      	mov	r6, r2
 801047a:	4699      	mov	r9, r3
 801047c:	688a      	ldr	r2, [r1, #8]
 801047e:	690b      	ldr	r3, [r1, #16]
 8010480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010484:	4293      	cmp	r3, r2
 8010486:	bfb8      	it	lt
 8010488:	4613      	movlt	r3, r2
 801048a:	6033      	str	r3, [r6, #0]
 801048c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010490:	4607      	mov	r7, r0
 8010492:	460c      	mov	r4, r1
 8010494:	b10a      	cbz	r2, 801049a <_printf_common+0x26>
 8010496:	3301      	adds	r3, #1
 8010498:	6033      	str	r3, [r6, #0]
 801049a:	6823      	ldr	r3, [r4, #0]
 801049c:	0699      	lsls	r1, r3, #26
 801049e:	bf42      	ittt	mi
 80104a0:	6833      	ldrmi	r3, [r6, #0]
 80104a2:	3302      	addmi	r3, #2
 80104a4:	6033      	strmi	r3, [r6, #0]
 80104a6:	6825      	ldr	r5, [r4, #0]
 80104a8:	f015 0506 	ands.w	r5, r5, #6
 80104ac:	d106      	bne.n	80104bc <_printf_common+0x48>
 80104ae:	f104 0a19 	add.w	sl, r4, #25
 80104b2:	68e3      	ldr	r3, [r4, #12]
 80104b4:	6832      	ldr	r2, [r6, #0]
 80104b6:	1a9b      	subs	r3, r3, r2
 80104b8:	42ab      	cmp	r3, r5
 80104ba:	dc26      	bgt.n	801050a <_printf_common+0x96>
 80104bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80104c0:	1e13      	subs	r3, r2, #0
 80104c2:	6822      	ldr	r2, [r4, #0]
 80104c4:	bf18      	it	ne
 80104c6:	2301      	movne	r3, #1
 80104c8:	0692      	lsls	r2, r2, #26
 80104ca:	d42b      	bmi.n	8010524 <_printf_common+0xb0>
 80104cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80104d0:	4649      	mov	r1, r9
 80104d2:	4638      	mov	r0, r7
 80104d4:	47c0      	blx	r8
 80104d6:	3001      	adds	r0, #1
 80104d8:	d01e      	beq.n	8010518 <_printf_common+0xa4>
 80104da:	6823      	ldr	r3, [r4, #0]
 80104dc:	68e5      	ldr	r5, [r4, #12]
 80104de:	6832      	ldr	r2, [r6, #0]
 80104e0:	f003 0306 	and.w	r3, r3, #6
 80104e4:	2b04      	cmp	r3, #4
 80104e6:	bf08      	it	eq
 80104e8:	1aad      	subeq	r5, r5, r2
 80104ea:	68a3      	ldr	r3, [r4, #8]
 80104ec:	6922      	ldr	r2, [r4, #16]
 80104ee:	bf0c      	ite	eq
 80104f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80104f4:	2500      	movne	r5, #0
 80104f6:	4293      	cmp	r3, r2
 80104f8:	bfc4      	itt	gt
 80104fa:	1a9b      	subgt	r3, r3, r2
 80104fc:	18ed      	addgt	r5, r5, r3
 80104fe:	2600      	movs	r6, #0
 8010500:	341a      	adds	r4, #26
 8010502:	42b5      	cmp	r5, r6
 8010504:	d11a      	bne.n	801053c <_printf_common+0xc8>
 8010506:	2000      	movs	r0, #0
 8010508:	e008      	b.n	801051c <_printf_common+0xa8>
 801050a:	2301      	movs	r3, #1
 801050c:	4652      	mov	r2, sl
 801050e:	4649      	mov	r1, r9
 8010510:	4638      	mov	r0, r7
 8010512:	47c0      	blx	r8
 8010514:	3001      	adds	r0, #1
 8010516:	d103      	bne.n	8010520 <_printf_common+0xac>
 8010518:	f04f 30ff 	mov.w	r0, #4294967295
 801051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010520:	3501      	adds	r5, #1
 8010522:	e7c6      	b.n	80104b2 <_printf_common+0x3e>
 8010524:	18e1      	adds	r1, r4, r3
 8010526:	1c5a      	adds	r2, r3, #1
 8010528:	2030      	movs	r0, #48	; 0x30
 801052a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801052e:	4422      	add	r2, r4
 8010530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010538:	3302      	adds	r3, #2
 801053a:	e7c7      	b.n	80104cc <_printf_common+0x58>
 801053c:	2301      	movs	r3, #1
 801053e:	4622      	mov	r2, r4
 8010540:	4649      	mov	r1, r9
 8010542:	4638      	mov	r0, r7
 8010544:	47c0      	blx	r8
 8010546:	3001      	adds	r0, #1
 8010548:	d0e6      	beq.n	8010518 <_printf_common+0xa4>
 801054a:	3601      	adds	r6, #1
 801054c:	e7d9      	b.n	8010502 <_printf_common+0x8e>
	...

08010550 <_printf_i>:
 8010550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010554:	7e0f      	ldrb	r7, [r1, #24]
 8010556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010558:	2f78      	cmp	r7, #120	; 0x78
 801055a:	4691      	mov	r9, r2
 801055c:	4680      	mov	r8, r0
 801055e:	460c      	mov	r4, r1
 8010560:	469a      	mov	sl, r3
 8010562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010566:	d807      	bhi.n	8010578 <_printf_i+0x28>
 8010568:	2f62      	cmp	r7, #98	; 0x62
 801056a:	d80a      	bhi.n	8010582 <_printf_i+0x32>
 801056c:	2f00      	cmp	r7, #0
 801056e:	f000 80d8 	beq.w	8010722 <_printf_i+0x1d2>
 8010572:	2f58      	cmp	r7, #88	; 0x58
 8010574:	f000 80a3 	beq.w	80106be <_printf_i+0x16e>
 8010578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801057c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010580:	e03a      	b.n	80105f8 <_printf_i+0xa8>
 8010582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010586:	2b15      	cmp	r3, #21
 8010588:	d8f6      	bhi.n	8010578 <_printf_i+0x28>
 801058a:	a101      	add	r1, pc, #4	; (adr r1, 8010590 <_printf_i+0x40>)
 801058c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010590:	080105e9 	.word	0x080105e9
 8010594:	080105fd 	.word	0x080105fd
 8010598:	08010579 	.word	0x08010579
 801059c:	08010579 	.word	0x08010579
 80105a0:	08010579 	.word	0x08010579
 80105a4:	08010579 	.word	0x08010579
 80105a8:	080105fd 	.word	0x080105fd
 80105ac:	08010579 	.word	0x08010579
 80105b0:	08010579 	.word	0x08010579
 80105b4:	08010579 	.word	0x08010579
 80105b8:	08010579 	.word	0x08010579
 80105bc:	08010709 	.word	0x08010709
 80105c0:	0801062d 	.word	0x0801062d
 80105c4:	080106eb 	.word	0x080106eb
 80105c8:	08010579 	.word	0x08010579
 80105cc:	08010579 	.word	0x08010579
 80105d0:	0801072b 	.word	0x0801072b
 80105d4:	08010579 	.word	0x08010579
 80105d8:	0801062d 	.word	0x0801062d
 80105dc:	08010579 	.word	0x08010579
 80105e0:	08010579 	.word	0x08010579
 80105e4:	080106f3 	.word	0x080106f3
 80105e8:	682b      	ldr	r3, [r5, #0]
 80105ea:	1d1a      	adds	r2, r3, #4
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	602a      	str	r2, [r5, #0]
 80105f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80105f8:	2301      	movs	r3, #1
 80105fa:	e0a3      	b.n	8010744 <_printf_i+0x1f4>
 80105fc:	6820      	ldr	r0, [r4, #0]
 80105fe:	6829      	ldr	r1, [r5, #0]
 8010600:	0606      	lsls	r6, r0, #24
 8010602:	f101 0304 	add.w	r3, r1, #4
 8010606:	d50a      	bpl.n	801061e <_printf_i+0xce>
 8010608:	680e      	ldr	r6, [r1, #0]
 801060a:	602b      	str	r3, [r5, #0]
 801060c:	2e00      	cmp	r6, #0
 801060e:	da03      	bge.n	8010618 <_printf_i+0xc8>
 8010610:	232d      	movs	r3, #45	; 0x2d
 8010612:	4276      	negs	r6, r6
 8010614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010618:	485e      	ldr	r0, [pc, #376]	; (8010794 <_printf_i+0x244>)
 801061a:	230a      	movs	r3, #10
 801061c:	e019      	b.n	8010652 <_printf_i+0x102>
 801061e:	680e      	ldr	r6, [r1, #0]
 8010620:	602b      	str	r3, [r5, #0]
 8010622:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010626:	bf18      	it	ne
 8010628:	b236      	sxthne	r6, r6
 801062a:	e7ef      	b.n	801060c <_printf_i+0xbc>
 801062c:	682b      	ldr	r3, [r5, #0]
 801062e:	6820      	ldr	r0, [r4, #0]
 8010630:	1d19      	adds	r1, r3, #4
 8010632:	6029      	str	r1, [r5, #0]
 8010634:	0601      	lsls	r1, r0, #24
 8010636:	d501      	bpl.n	801063c <_printf_i+0xec>
 8010638:	681e      	ldr	r6, [r3, #0]
 801063a:	e002      	b.n	8010642 <_printf_i+0xf2>
 801063c:	0646      	lsls	r6, r0, #25
 801063e:	d5fb      	bpl.n	8010638 <_printf_i+0xe8>
 8010640:	881e      	ldrh	r6, [r3, #0]
 8010642:	4854      	ldr	r0, [pc, #336]	; (8010794 <_printf_i+0x244>)
 8010644:	2f6f      	cmp	r7, #111	; 0x6f
 8010646:	bf0c      	ite	eq
 8010648:	2308      	moveq	r3, #8
 801064a:	230a      	movne	r3, #10
 801064c:	2100      	movs	r1, #0
 801064e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010652:	6865      	ldr	r5, [r4, #4]
 8010654:	60a5      	str	r5, [r4, #8]
 8010656:	2d00      	cmp	r5, #0
 8010658:	bfa2      	ittt	ge
 801065a:	6821      	ldrge	r1, [r4, #0]
 801065c:	f021 0104 	bicge.w	r1, r1, #4
 8010660:	6021      	strge	r1, [r4, #0]
 8010662:	b90e      	cbnz	r6, 8010668 <_printf_i+0x118>
 8010664:	2d00      	cmp	r5, #0
 8010666:	d04d      	beq.n	8010704 <_printf_i+0x1b4>
 8010668:	4615      	mov	r5, r2
 801066a:	fbb6 f1f3 	udiv	r1, r6, r3
 801066e:	fb03 6711 	mls	r7, r3, r1, r6
 8010672:	5dc7      	ldrb	r7, [r0, r7]
 8010674:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010678:	4637      	mov	r7, r6
 801067a:	42bb      	cmp	r3, r7
 801067c:	460e      	mov	r6, r1
 801067e:	d9f4      	bls.n	801066a <_printf_i+0x11a>
 8010680:	2b08      	cmp	r3, #8
 8010682:	d10b      	bne.n	801069c <_printf_i+0x14c>
 8010684:	6823      	ldr	r3, [r4, #0]
 8010686:	07de      	lsls	r6, r3, #31
 8010688:	d508      	bpl.n	801069c <_printf_i+0x14c>
 801068a:	6923      	ldr	r3, [r4, #16]
 801068c:	6861      	ldr	r1, [r4, #4]
 801068e:	4299      	cmp	r1, r3
 8010690:	bfde      	ittt	le
 8010692:	2330      	movle	r3, #48	; 0x30
 8010694:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010698:	f105 35ff 	addle.w	r5, r5, #4294967295
 801069c:	1b52      	subs	r2, r2, r5
 801069e:	6122      	str	r2, [r4, #16]
 80106a0:	f8cd a000 	str.w	sl, [sp]
 80106a4:	464b      	mov	r3, r9
 80106a6:	aa03      	add	r2, sp, #12
 80106a8:	4621      	mov	r1, r4
 80106aa:	4640      	mov	r0, r8
 80106ac:	f7ff fee2 	bl	8010474 <_printf_common>
 80106b0:	3001      	adds	r0, #1
 80106b2:	d14c      	bne.n	801074e <_printf_i+0x1fe>
 80106b4:	f04f 30ff 	mov.w	r0, #4294967295
 80106b8:	b004      	add	sp, #16
 80106ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106be:	4835      	ldr	r0, [pc, #212]	; (8010794 <_printf_i+0x244>)
 80106c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80106c4:	6829      	ldr	r1, [r5, #0]
 80106c6:	6823      	ldr	r3, [r4, #0]
 80106c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80106cc:	6029      	str	r1, [r5, #0]
 80106ce:	061d      	lsls	r5, r3, #24
 80106d0:	d514      	bpl.n	80106fc <_printf_i+0x1ac>
 80106d2:	07df      	lsls	r7, r3, #31
 80106d4:	bf44      	itt	mi
 80106d6:	f043 0320 	orrmi.w	r3, r3, #32
 80106da:	6023      	strmi	r3, [r4, #0]
 80106dc:	b91e      	cbnz	r6, 80106e6 <_printf_i+0x196>
 80106de:	6823      	ldr	r3, [r4, #0]
 80106e0:	f023 0320 	bic.w	r3, r3, #32
 80106e4:	6023      	str	r3, [r4, #0]
 80106e6:	2310      	movs	r3, #16
 80106e8:	e7b0      	b.n	801064c <_printf_i+0xfc>
 80106ea:	6823      	ldr	r3, [r4, #0]
 80106ec:	f043 0320 	orr.w	r3, r3, #32
 80106f0:	6023      	str	r3, [r4, #0]
 80106f2:	2378      	movs	r3, #120	; 0x78
 80106f4:	4828      	ldr	r0, [pc, #160]	; (8010798 <_printf_i+0x248>)
 80106f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80106fa:	e7e3      	b.n	80106c4 <_printf_i+0x174>
 80106fc:	0659      	lsls	r1, r3, #25
 80106fe:	bf48      	it	mi
 8010700:	b2b6      	uxthmi	r6, r6
 8010702:	e7e6      	b.n	80106d2 <_printf_i+0x182>
 8010704:	4615      	mov	r5, r2
 8010706:	e7bb      	b.n	8010680 <_printf_i+0x130>
 8010708:	682b      	ldr	r3, [r5, #0]
 801070a:	6826      	ldr	r6, [r4, #0]
 801070c:	6961      	ldr	r1, [r4, #20]
 801070e:	1d18      	adds	r0, r3, #4
 8010710:	6028      	str	r0, [r5, #0]
 8010712:	0635      	lsls	r5, r6, #24
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	d501      	bpl.n	801071c <_printf_i+0x1cc>
 8010718:	6019      	str	r1, [r3, #0]
 801071a:	e002      	b.n	8010722 <_printf_i+0x1d2>
 801071c:	0670      	lsls	r0, r6, #25
 801071e:	d5fb      	bpl.n	8010718 <_printf_i+0x1c8>
 8010720:	8019      	strh	r1, [r3, #0]
 8010722:	2300      	movs	r3, #0
 8010724:	6123      	str	r3, [r4, #16]
 8010726:	4615      	mov	r5, r2
 8010728:	e7ba      	b.n	80106a0 <_printf_i+0x150>
 801072a:	682b      	ldr	r3, [r5, #0]
 801072c:	1d1a      	adds	r2, r3, #4
 801072e:	602a      	str	r2, [r5, #0]
 8010730:	681d      	ldr	r5, [r3, #0]
 8010732:	6862      	ldr	r2, [r4, #4]
 8010734:	2100      	movs	r1, #0
 8010736:	4628      	mov	r0, r5
 8010738:	f7ef fd5a 	bl	80001f0 <memchr>
 801073c:	b108      	cbz	r0, 8010742 <_printf_i+0x1f2>
 801073e:	1b40      	subs	r0, r0, r5
 8010740:	6060      	str	r0, [r4, #4]
 8010742:	6863      	ldr	r3, [r4, #4]
 8010744:	6123      	str	r3, [r4, #16]
 8010746:	2300      	movs	r3, #0
 8010748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801074c:	e7a8      	b.n	80106a0 <_printf_i+0x150>
 801074e:	6923      	ldr	r3, [r4, #16]
 8010750:	462a      	mov	r2, r5
 8010752:	4649      	mov	r1, r9
 8010754:	4640      	mov	r0, r8
 8010756:	47d0      	blx	sl
 8010758:	3001      	adds	r0, #1
 801075a:	d0ab      	beq.n	80106b4 <_printf_i+0x164>
 801075c:	6823      	ldr	r3, [r4, #0]
 801075e:	079b      	lsls	r3, r3, #30
 8010760:	d413      	bmi.n	801078a <_printf_i+0x23a>
 8010762:	68e0      	ldr	r0, [r4, #12]
 8010764:	9b03      	ldr	r3, [sp, #12]
 8010766:	4298      	cmp	r0, r3
 8010768:	bfb8      	it	lt
 801076a:	4618      	movlt	r0, r3
 801076c:	e7a4      	b.n	80106b8 <_printf_i+0x168>
 801076e:	2301      	movs	r3, #1
 8010770:	4632      	mov	r2, r6
 8010772:	4649      	mov	r1, r9
 8010774:	4640      	mov	r0, r8
 8010776:	47d0      	blx	sl
 8010778:	3001      	adds	r0, #1
 801077a:	d09b      	beq.n	80106b4 <_printf_i+0x164>
 801077c:	3501      	adds	r5, #1
 801077e:	68e3      	ldr	r3, [r4, #12]
 8010780:	9903      	ldr	r1, [sp, #12]
 8010782:	1a5b      	subs	r3, r3, r1
 8010784:	42ab      	cmp	r3, r5
 8010786:	dcf2      	bgt.n	801076e <_printf_i+0x21e>
 8010788:	e7eb      	b.n	8010762 <_printf_i+0x212>
 801078a:	2500      	movs	r5, #0
 801078c:	f104 0619 	add.w	r6, r4, #25
 8010790:	e7f5      	b.n	801077e <_printf_i+0x22e>
 8010792:	bf00      	nop
 8010794:	080111a9 	.word	0x080111a9
 8010798:	080111ba 	.word	0x080111ba

0801079c <__retarget_lock_acquire_recursive>:
 801079c:	4770      	bx	lr

0801079e <__retarget_lock_release_recursive>:
 801079e:	4770      	bx	lr

080107a0 <memmove>:
 80107a0:	4288      	cmp	r0, r1
 80107a2:	b510      	push	{r4, lr}
 80107a4:	eb01 0402 	add.w	r4, r1, r2
 80107a8:	d902      	bls.n	80107b0 <memmove+0x10>
 80107aa:	4284      	cmp	r4, r0
 80107ac:	4623      	mov	r3, r4
 80107ae:	d807      	bhi.n	80107c0 <memmove+0x20>
 80107b0:	1e43      	subs	r3, r0, #1
 80107b2:	42a1      	cmp	r1, r4
 80107b4:	d008      	beq.n	80107c8 <memmove+0x28>
 80107b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80107be:	e7f8      	b.n	80107b2 <memmove+0x12>
 80107c0:	4402      	add	r2, r0
 80107c2:	4601      	mov	r1, r0
 80107c4:	428a      	cmp	r2, r1
 80107c6:	d100      	bne.n	80107ca <memmove+0x2a>
 80107c8:	bd10      	pop	{r4, pc}
 80107ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80107ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80107d2:	e7f7      	b.n	80107c4 <memmove+0x24>

080107d4 <_malloc_usable_size_r>:
 80107d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107d8:	1f18      	subs	r0, r3, #4
 80107da:	2b00      	cmp	r3, #0
 80107dc:	bfbc      	itt	lt
 80107de:	580b      	ldrlt	r3, [r1, r0]
 80107e0:	18c0      	addlt	r0, r0, r3
 80107e2:	4770      	bx	lr

080107e4 <_init>:
 80107e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107e6:	bf00      	nop
 80107e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107ea:	bc08      	pop	{r3}
 80107ec:	469e      	mov	lr, r3
 80107ee:	4770      	bx	lr

080107f0 <_fini>:
 80107f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107f2:	bf00      	nop
 80107f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107f6:	bc08      	pop	{r3}
 80107f8:	469e      	mov	lr, r3
 80107fa:	4770      	bx	lr
