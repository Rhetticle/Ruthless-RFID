
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  0800fd60  0800fd60  0001fd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801057c  0801057c  0003068c  2**0
                  CONTENTS
  4 .ARM          00000008  0801057c  0801057c  0002057c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010584  08010584  0003068c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010584  08010584  00020584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010588  08010588  00020588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000068c  20000000  0801058c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065b8  2000068c  08010c18  0003068c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006c44  08010c18  00036c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003068c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028297  00000000  00000000  000306bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a36  00000000  00000000  00058953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002120  00000000  00000000  0005e390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ee0  00000000  00000000  000604b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8d6  00000000  00000000  00062390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000278cf  00000000  00000000  0007fc66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ef25  00000000  00000000  000a7535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014645a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f88  00000000  00000000  001464ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000068c 	.word	0x2000068c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fd48 	.word	0x0800fd48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000690 	.word	0x20000690
 80001dc:	0800fd48 	.word	0x0800fd48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af04      	add	r7, sp, #16
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	f107 030f 	add.w	r3, r7, #15
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MFRC_REGW+0x44>)
 80005c0:	f003 fc6e 	bl	8003ea0 <HAL_I2C_Mem_Write>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 80005ca:	23bb      	movs	r3, #187	; 0xbb
 80005cc:	e000      	b.n	80005d0 <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 80005ce:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200006a8 	.word	0x200006a8

080005dc <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2150      	movs	r1, #80	; 0x50
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <MFRC_REGR+0x3c>)
 80005fe:	f003 fd49 	bl	8004094 <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000608:	23bb      	movs	r3, #187	; 0xbb
 800060a:	e000      	b.n	800060e <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 800060c:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200006a8 	.word	0x200006a8

0800061c <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e018      	b.n	8000660 <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	9202      	str	r2, [sp, #8]
 8000638:	2201      	movs	r2, #1
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2209      	movs	r2, #9
 8000642:	2150      	movs	r1, #80	; 0x50
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <MFRC_FIFOW+0x58>)
 8000646:	f003 fc2b 	bl	8003ea0 <HAL_I2C_Mem_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000650:	23bb      	movs	r3, #187	; 0xbb
 8000652:	e00a      	b.n	800066a <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f003 f80b 	bl	8003670 <HAL_Delay>
	for(int i=0;i<size;i++){
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	dbe2      	blt.n	800062e <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000668:	23cc      	movs	r3, #204	; 0xcc
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200006a8 	.word	0x200006a8

08000678 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e018      	b.n	80006bc <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	9202      	str	r2, [sp, #8]
 8000694:	2201      	movs	r2, #1
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	2209      	movs	r2, #9
 800069e:	2150      	movs	r1, #80	; 0x50
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MFRC_FIFOR+0x58>)
 80006a2:	f003 fcf7 	bl	8004094 <HAL_I2C_Mem_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 80006ac:	23bb      	movs	r3, #187	; 0xbb
 80006ae:	e00a      	b.n	80006c6 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f002 ffdd 	bl	8003670 <HAL_Delay>
	for(int i=0;i<size;i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe2      	blt.n	800068a <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 80006c4:	23cc      	movs	r3, #204	; 0xcc
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200006a8 	.word	0x200006a8

080006d4 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	4619      	mov	r1, r3
 80006de:	2014      	movs	r0, #20
 80006e0:	f7ff ff7c 	bl	80005dc <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d007      	beq.n	80006fe <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f043 0303 	orr.w	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2014      	movs	r0, #20
 80006fa:	f7ff ff4b 	bl	8000594 <MFRC_REGW>
	}
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	460a      	mov	r2, r1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000716:	f107 020f 	add.w	r2, r7, #15
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff5c 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000728:	43db      	mvns	r3, r3
 800072a:	b25a      	sxtb	r2, r3
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff2a 	bl	8000594 <MFRC_REGW>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 800074c:	2103      	movs	r1, #3
 800074e:	2014      	movs	r0, #20
 8000750:	f7ff ffd9 	bl	8000706 <ClearBitMask>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	460b      	mov	r3, r1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000766:	2100      	movs	r1, #0
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ff13 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 800076e:	2104      	movs	r1, #4
 8000770:	2005      	movs	r0, #5
 8000772:	f7ff ff0f 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	200a      	movs	r0, #10
 800077a:	f7ff ff0b 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	4619      	mov	r1, r3
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ff4a 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000788:	2103      	movs	r1, #3
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff02 	bl	8000594 <MFRC_REGW>
	HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f002 ff6d 	bl	8003670 <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000796:	f107 0317 	add.w	r3, r7, #23
 800079a:	4619      	mov	r1, r3
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff ff1d 	bl	80005dc <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 80007ac:	23ee      	movs	r3, #238	; 0xee
 80007ae:	e00e      	b.n	80007ce <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff feee 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	2022      	movs	r0, #34	; 0x22
 80007bc:	f7ff ff0e 	bl	80005dc <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	2021      	movs	r0, #33	; 0x21
 80007c8:	f7ff ff08 	bl	80005dc <MFRC_REGR>
	return(PCD_OK);
 80007cc:	23cc      	movs	r3, #204	; 0xcc

}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <MFRC_INIT+0x60>)
 80007e2:	f003 f9e7 	bl	8003bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <MFRC_INIT+0x60>)
 80007ec:	f003 f9e2 	bl	8003bb4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f002 ff3d 	bl	8003670 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2120      	movs	r1, #32
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <MFRC_INIT+0x60>)
 80007fc:	f003 f9da 	bl	8003bb4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	; 0x32
 8000802:	f002 ff35 	bl	8003670 <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	2012      	movs	r0, #18
 800080a:	f7ff fec3 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2013      	movs	r0, #19
 8000812:	f7ff febf 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000816:	2126      	movs	r1, #38	; 0x26
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f7ff febb 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	2015      	movs	r0, #21
 8000822:	f7ff feb7 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000826:	213d      	movs	r1, #61	; 0x3d
 8000828:	2011      	movs	r0, #17
 800082a:	f7ff feb3 	bl	8000594 <MFRC_REGW>
	MFRC_ANTON();
 800082e:	f7ff ff51 	bl	80006d4 <MFRC_ANTON>
	return(PCD_OK);
 8000832:	23cc      	movs	r3, #204	; 0xcc



}
 8000834:	4618      	mov	r0, r3
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020400 	.word	0x40020400

0800083c <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000854:	2300      	movs	r3, #0
 8000856:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe9a 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000860:	217f      	movs	r1, #127	; 0x7f
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff fe96 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	200a      	movs	r0, #10
 800086c:	f7ff fe92 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	4619      	mov	r1, r3
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fed1 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 800087a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087e:	4619      	mov	r1, r3
 8000880:	200d      	movs	r0, #13
 8000882:	f7ff fe87 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000886:	210c      	movs	r1, #12
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fe83 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 800088e:	f107 0316 	add.w	r3, r7, #22
 8000892:	4619      	mov	r1, r3
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff fea1 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	200d      	movs	r0, #13
 80008a6:	f7ff fe75 	bl	8000594 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 80008aa:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f002 fedf 	bl	8003670 <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 80008b2:	7abb      	ldrb	r3, [r7, #10]
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fede 	bl	8000678 <MFRC_FIFOR>


	return(PCD_OK);
 80008bc:	23cc      	movs	r3, #204	; 0xcc
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <MFRC_WUPA>:
 * Function to issue the WUPA command to PICC (We use this to go from HALT to READY state check ISO standard)
 *
 * @param reponse: PICC reponse to WUPA (Expect 0x44, 0x00 for ULTRALIGHT
 * */

PCD_StatusTypeDef MFRC_WUPA(uint8_t* response){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	6078      	str	r0, [r7, #4]
	uint8_t WUPA=0x52;
 80008ce:	2352      	movs	r3, #82	; 0x52
 80008d0:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	200e      	movs	r0, #14
 80008d6:	f7ff ff16 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&WUPA,1, response, 2, 7)!=PCD_OK){//WUPA is a 7-bit command
 80008da:	f107 000f 	add.w	r0, r7, #15
 80008de:	2307      	movs	r3, #7
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2302      	movs	r3, #2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	2101      	movs	r1, #1
 80008e8:	f7ff ffa8 	bl	800083c <MFRC_TRANSCEIVE>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2bcc      	cmp	r3, #204	; 0xcc
 80008f0:	d001      	beq.n	80008f6 <MFRC_WUPA+0x30>
		return(PCD_COMM_ERR);
 80008f2:	23aa      	movs	r3, #170	; 0xaa
 80008f4:	e000      	b.n	80008f8 <MFRC_WUPA+0x32>
	}

	else{
		return(PCD_OK);
 80008f6:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MFRC_HALTA>:

/*
 * Function to issue HALTA command to PICC (Change from READY to HALT state) Send WUPA and select sequence to re-select PICC
 * */

PCD_StatusTypeDef MFRC_HALTA(void){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
	uint8_t transaction[4]={ULTRA_HALTA,0x00};
 8000906:	2350      	movs	r3, #80	; 0x50
 8000908:	60fb      	str	r3, [r7, #12]
	uint8_t CRC_val[2];
	uint8_t ack;

	if(CALC_CRC(transaction, 2, CRC_val)!=PCD_OK){
 800090a:	f107 0208 	add.w	r2, r7, #8
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	2102      	movs	r1, #2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff1f 	bl	8000758 <CALC_CRC>
 800091a:	4603      	mov	r3, r0
 800091c:	2bcc      	cmp	r3, #204	; 0xcc
 800091e:	d001      	beq.n	8000924 <MFRC_HALTA+0x24>
		return(CRC_ERR);
 8000920:	23ee      	movs	r3, #238	; 0xee
 8000922:	e013      	b.n	800094c <MFRC_HALTA+0x4c>
	}
	memcpy(transaction+2,CRC_val,2);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	3302      	adds	r3, #2
 800092a:	893a      	ldrh	r2, [r7, #8]
 800092c:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, &ack, 1, 0)!=PCD_OK){
 800092e:	1dfa      	adds	r2, r7, #7
 8000930:	f107 000c 	add.w	r0, r7, #12
 8000934:	2300      	movs	r3, #0
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	2301      	movs	r3, #1
 800093a:	2104      	movs	r1, #4
 800093c:	f7ff ff7e 	bl	800083c <MFRC_TRANSCEIVE>
 8000940:	4603      	mov	r3, r0
 8000942:	2bcc      	cmp	r3, #204	; 0xcc
 8000944:	d001      	beq.n	800094a <MFRC_HALTA+0x4a>
		return(PCD_COMM_ERR);
 8000946:	23aa      	movs	r3, #170	; 0xaa
 8000948:	e000      	b.n	800094c <MFRC_HALTA+0x4c>
	}

	else{
		return(PCD_OK);
 800094a:	23cc      	movs	r3, #204	; 0xcc
	}
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af02      	add	r7, sp, #8
 800095a:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 800095c:	f242 0393 	movw	r3, #8339	; 0x2093
 8000960:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000962:	2180      	movs	r1, #128	; 0x80
 8000964:	200e      	movs	r0, #14
 8000966:	f7ff fece 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 800096a:	f107 000c 	add.w	r0, r7, #12
 800096e:	2300      	movs	r3, #0
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2305      	movs	r3, #5
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	2102      	movs	r1, #2
 8000978:	f7ff ff60 	bl	800083c <MFRC_TRANSCEIVE>
 800097c:	4603      	mov	r3, r0
 800097e:	2bcc      	cmp	r3, #204	; 0xcc
 8000980:	d001      	beq.n	8000986 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 8000982:	23aa      	movs	r3, #170	; 0xaa
 8000984:	e000      	b.n	8000988 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 8000986:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000988:	4618      	mov	r0, r3
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af02      	add	r7, sp, #8
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 800099a:	f247 0393 	movw	r3, #28819	; 0x7093
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	3302      	adds	r3, #2
 80009b0:	2205      	movs	r2, #5
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f00e fd35 	bl	800f424 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 80009ba:	f107 0208 	add.w	r2, r7, #8
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	2107      	movs	r1, #7
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fec7 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	3307      	adds	r3, #7
 80009d0:	893a      	ldrh	r2, [r7, #8]
 80009d2:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 80009d4:	f107 000c 	add.w	r0, r7, #12
 80009d8:	2300      	movs	r3, #0
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2303      	movs	r3, #3
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	2109      	movs	r1, #9
 80009e2:	f7ff ff2b 	bl	800083c <MFRC_TRANSCEIVE>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2bcc      	cmp	r3, #204	; 0xcc
 80009ea:	d001      	beq.n	80009f0 <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 80009ec:	23aa      	movs	r3, #170	; 0xaa
 80009ee:	e000      	b.n	80009f2 <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 80009f0:	23cc      	movs	r3, #204	; 0xcc
	}

}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af02      	add	r7, sp, #8
 8000a00:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 8000a02:	f242 0395 	movw	r3, #8341	; 0x2095
 8000a06:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	200e      	movs	r0, #14
 8000a0c:	f7ff fe7b 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000a10:	f107 000c 	add.w	r0, r7, #12
 8000a14:	2300      	movs	r3, #0
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2305      	movs	r3, #5
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	f7ff ff0d 	bl	800083c <MFRC_TRANSCEIVE>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2bcc      	cmp	r3, #204	; 0xcc
 8000a26:	d001      	beq.n	8000a2c <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 8000a28:	23aa      	movs	r3, #170	; 0xaa
 8000a2a:	e000      	b.n	8000a2e <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 8000a2c:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b088      	sub	sp, #32
 8000a3a:	af02      	add	r7, sp, #8
 8000a3c:	6078      	str	r0, [r7, #4]
 8000a3e:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 8000a40:	f247 0395 	movw	r3, #28821	; 0x7095
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	3302      	adds	r3, #2
 8000a56:	2205      	movs	r2, #5
 8000a58:	6879      	ldr	r1, [r7, #4]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f00e fce2 	bl	800f424 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000a60:	f107 0208 	add.w	r2, r7, #8
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2107      	movs	r1, #7
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fe74 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	3307      	adds	r3, #7
 8000a76:	893a      	ldrh	r2, [r7, #8]
 8000a78:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000a7a:	f107 000c 	add.w	r0, r7, #12
 8000a7e:	2300      	movs	r3, #0
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	2303      	movs	r3, #3
 8000a84:	683a      	ldr	r2, [r7, #0]
 8000a86:	2109      	movs	r1, #9
 8000a88:	f7ff fed8 	bl	800083c <MFRC_TRANSCEIVE>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2bcc      	cmp	r3, #204	; 0xcc
 8000a90:	d001      	beq.n	8000a96 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 8000a92:	23aa      	movs	r3, #170	; 0xaa
 8000a94:	e000      	b.n	8000a98 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 8000a96:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];
	  uint8_t ATQA[2];

	  if (PICC_CHECK() != PCD_OK) {
 8000aa6:	f000 f839 	bl	8000b1c <PICC_CHECK>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2bcc      	cmp	r3, #204	; 0xcc
 8000aae:	d001      	beq.n	8000ab4 <PICC_Select+0x14>
		  return PCD_COMM_ERR;
 8000ab0:	23aa      	movs	r3, #170	; 0xaa
 8000ab2:	e02f      	b.n	8000b14 <PICC_Select+0x74>
	  }
	  MFRC_WUPA(ATQA);
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff05 	bl	80008c6 <MFRC_WUPA>
	  MFRC_ANTICOL1(ANTICOL1);
 8000abc:	f107 0318 	add.w	r3, r7, #24
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff47 	bl	8000954 <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 8000ac6:	7e3b      	ldrb	r3, [r7, #24]
 8000ac8:	2b88      	cmp	r3, #136	; 0x88
 8000aca:	d001      	beq.n	8000ad0 <PICC_Select+0x30>
		  return(PCD_COMM_ERR);
 8000acc:	23aa      	movs	r3, #170	; 0xaa
 8000ace:	e021      	b.n	8000b14 <PICC_Select+0x74>
	  }
	  HAL_Delay(10);
 8000ad0:	200a      	movs	r0, #10
 8000ad2:	f002 fdcd 	bl	8003670 <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 8000ad6:	f107 0214 	add.w	r2, r7, #20
 8000ada:	f107 0318 	add.w	r3, r7, #24
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff55 	bl	8000990 <MFRC_SEL1>
	  HAL_Delay(10);
 8000ae6:	200a      	movs	r0, #10
 8000ae8:	f002 fdc2 	bl	8003670 <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff82 	bl	80009fa <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8000af6:	200a      	movs	r0, #10
 8000af8:	f002 fdba 	bl	8003670 <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8000afc:	f107 0208 	add.w	r2, r7, #8
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ff95 	bl	8000a36 <MFRC_SEL2>
	  HAL_Delay(10);
 8000b0c:	200a      	movs	r0, #10
 8000b0e:	f002 fdaf 	bl	8003670 <HAL_Delay>
	  return(PCD_OK);
 8000b12:	23cc      	movs	r3, #204	; 0xcc
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3720      	adds	r7, #32
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_WUPA(ATQA)!=PCD_OK){
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fece 	bl	80008c6 <MFRC_WUPA>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2bcc      	cmp	r3, #204	; 0xcc
 8000b2e:	d001      	beq.n	8000b34 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 8000b30:	23aa      	movs	r3, #170	; 0xaa
 8000b32:	e00a      	b.n	8000b4a <PICC_CHECK+0x2e>
	}

	else{
		if((ATQA[0]!=ULTRA_ATQA0) || (ATQA[1] != ULTRA_ATQA1)){
 8000b34:	793b      	ldrb	r3, [r7, #4]
 8000b36:	2b44      	cmp	r3, #68	; 0x44
 8000b38:	d102      	bne.n	8000b40 <PICC_CHECK+0x24>
 8000b3a:	797b      	ldrb	r3, [r7, #5]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <PICC_CHECK+0x28>
			return(PCD_COMM_ERR);
 8000b40:	23aa      	movs	r3, #170	; 0xaa
 8000b42:	e002      	b.n	8000b4a <PICC_CHECK+0x2e>
		}
		else{
			MFRC_HALTA();
 8000b44:	f7ff fedc 	bl	8000900 <MFRC_HALTA>
			return(PCD_OK);
 8000b48:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af02      	add	r7, sp, #8
 8000b58:	4603      	mov	r3, r0
 8000b5a:	6039      	str	r1, [r7, #0]
 8000b5c:	71fb      	strb	r3, [r7, #7]

	uint8_t transaction[4]={ULTRA_READ,addr};
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	2330      	movs	r3, #48	; 0x30
 8000b64:	733b      	strb	r3, [r7, #12]
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	737b      	strb	r3, [r7, #13]
	uint8_t CRC_val[2];

	CALC_CRC(transaction, 2, CRC_val);
 8000b6a:	f107 0208 	add.w	r2, r7, #8
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	2102      	movs	r1, #2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fdef 	bl	8000758 <CALC_CRC>

	memcpy(transaction+2,CRC_val,2);
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	3302      	adds	r3, #2
 8000b80:	893a      	ldrh	r2, [r7, #8]
 8000b82:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, data, UL_READSIZE, 0)!=PCD_OK){
 8000b84:	f107 000c 	add.w	r0, r7, #12
 8000b88:	2300      	movs	r3, #0
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	2104      	movs	r1, #4
 8000b92:	f7ff fe53 	bl	800083c <MFRC_TRANSCEIVE>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2bcc      	cmp	r3, #204	; 0xcc
 8000b9a:	d001      	beq.n	8000ba0 <UL_READ+0x4e>
		return(PCD_COMM_ERR);
 8000b9c:	23aa      	movs	r3, #170	; 0xaa
 8000b9e:	e000      	b.n	8000ba2 <UL_READ+0x50>
	}

	else{
		return(PCD_OK);
 8000ba0:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <UL_WRITE>:
 *
 * @param data: Array of 4 bytes to write
 *
 * */

PCD_StatusTypeDef UL_WRITE(uint8_t addr,uint8_t* data){
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b088      	sub	sp, #32
 8000bae:	af02      	add	r7, sp, #8
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	6039      	str	r1, [r7, #0]
 8000bb4:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[8]={ULTRA_WRITE,addr};
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	23a2      	movs	r3, #162	; 0xa2
 8000bc2:	743b      	strb	r3, [r7, #16]
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	747b      	strb	r3, [r7, #17]
	uint8_t ack;
	uint8_t CRC_val[2];

	//Safety check to see if we're trying to write to any of the first four pages which contain sensitive data (uid, OTP etc)
	if (addr <= 3) {
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d801      	bhi.n	8000bd2 <UL_WRITE+0x28>
		return PCD_PROTECTED_ERR;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	e022      	b.n	8000c18 <UL_WRITE+0x6e>
	}

	memcpy(transaction+2,data,4);
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	6812      	ldr	r2, [r2, #0]
 8000bdc:	601a      	str	r2, [r3, #0]

	CALC_CRC(transaction, 6, CRC_val);
 8000bde:	f107 020c 	add.w	r2, r7, #12
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	2106      	movs	r1, #6
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fdb5 	bl	8000758 <CALC_CRC>

	memcpy(transaction+6,CRC_val,2);
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	3306      	adds	r3, #6
 8000bf4:	89ba      	ldrh	r2, [r7, #12]
 8000bf6:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 8, &ack, 1, 0)!=PCD_OK){
 8000bf8:	f107 020f 	add.w	r2, r7, #15
 8000bfc:	f107 0010 	add.w	r0, r7, #16
 8000c00:	2300      	movs	r3, #0
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2301      	movs	r3, #1
 8000c06:	2108      	movs	r1, #8
 8000c08:	f7ff fe18 	bl	800083c <MFRC_TRANSCEIVE>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2bcc      	cmp	r3, #204	; 0xcc
 8000c10:	d001      	beq.n	8000c16 <UL_WRITE+0x6c>
		return(PCD_COMM_ERR);
 8000c12:	23aa      	movs	r3, #170	; 0xaa
 8000c14:	e000      	b.n	8000c18 <UL_WRITE+0x6e>
	}

	else{
		return(PCD_OK);
 8000c16:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <UL_getuid>:
 * Read the 7 byte uid of MIFARE Ultralight card
 *
 * @param uid - Array to store uid
 * @return PCD_OK if uid was successfully read
 * */
PCD_StatusTypeDef UL_getuid(uint8_t* uid) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	uint8_t read[UL_READSIZE];

	if (UL_READ(0x00, read) != PCD_OK) {
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff ff8f 	bl	8000b52 <UL_READ>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2bcc      	cmp	r3, #204	; 0xcc
 8000c38:	d001      	beq.n	8000c3e <UL_getuid+0x1e>
		return PCD_COMM_ERR;
 8000c3a:	23aa      	movs	r3, #170	; 0xaa
 8000c3c:	e007      	b.n	8000c4e <UL_getuid+0x2e>
	}

	memcpy(uid, read, UL_UIDSIZE);
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	2207      	movs	r2, #7
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f00e fbec 	bl	800f424 <memcpy>
	return PCD_OK;
 8000c4c:	23cc      	movs	r3, #204	; 0xcc
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <UL_getalldata>:
 * Get all 64 bytes of user data from card
 *
 * @param data - Array to store data
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_getalldata(uint8_t* data) {
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	e010      	b.n	8000c86 <UL_getalldata+0x30>
		if (UL_READ(i, data) != PCD_OK) {
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ff71 	bl	8000b52 <UL_READ>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2bcc      	cmp	r3, #204	; 0xcc
 8000c74:	d001      	beq.n	8000c7a <UL_getalldata+0x24>
			return PCD_COMM_ERR;
 8000c76:	23aa      	movs	r3, #170	; 0xaa
 8000c78:	e009      	b.n	8000c8e <UL_getalldata+0x38>
		}
		data += UL_READSIZE; //increment pointer
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3310      	adds	r3, #16
 8000c7e:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	3304      	adds	r3, #4
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2b0e      	cmp	r3, #14
 8000c8a:	ddeb      	ble.n	8000c64 <UL_getalldata+0xe>
	}

	return PCD_OK;
 8000c8c:	23cc      	movs	r3, #204	; 0xcc
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <UL_readcard>:
 * Read MIFARE Ultralight card data into card struct
 *
 * @param result - Card to store data into
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_readcard(Card* result) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

	result->type = "MIFARE Ultralight";
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a16      	ldr	r2, [pc, #88]	; (8000cfc <UL_readcard+0x64>)
 8000ca4:	60da      	str	r2, [r3, #12]
	result->name = "Test1";
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <UL_readcard+0x68>)
 8000caa:	609a      	str	r2, [r3, #8]
	result->uidsize = UL_UIDSIZE;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2207      	movs	r2, #7
 8000cb0:	711a      	strb	r2, [r3, #4]
	result->contents_size = UL_MEMSIZE;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2240      	movs	r2, #64	; 0x40
 8000cb6:	831a      	strh	r2, [r3, #24]
	result->read_protected = 0;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	741a      	strb	r2, [r3, #16]

	if (PICC_Select() != PCD_OK) { //Select PICC if available
 8000cbe:	f7ff feef 	bl	8000aa0 <PICC_Select>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2bcc      	cmp	r3, #204	; 0xcc
 8000cc6:	d001      	beq.n	8000ccc <UL_readcard+0x34>
		return PCD_NO_PICC;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e012      	b.n	8000cf2 <UL_readcard+0x5a>
	}
	if ((UL_getuid(result->uid) != PCD_OK) || (UL_getalldata(result->contents) !=  PCD_OK)) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ffa5 	bl	8000c20 <UL_getuid>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2bcc      	cmp	r3, #204	; 0xcc
 8000cda:	d107      	bne.n	8000cec <UL_readcard+0x54>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ffb8 	bl	8000c56 <UL_getalldata>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2bcc      	cmp	r3, #204	; 0xcc
 8000cea:	d001      	beq.n	8000cf0 <UL_readcard+0x58>
		return PCD_COMM_ERR;
 8000cec:	23aa      	movs	r3, #170	; 0xaa
 8000cee:	e000      	b.n	8000cf2 <UL_readcard+0x5a>
	}
	return PCD_OK;
 8000cf0:	23cc      	movs	r3, #204	; 0xcc
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	0800fdc0 	.word	0x0800fdc0
 8000d00:	0800fdd4 	.word	0x0800fdd4

08000d04 <UL_writecard>:
/**
 * Write a card object to a physical card
 * @param towrite - Card instance to write
 * @return PCD_OK if card was successfully written to and verified.
 * */
PCD_StatusTypeDef UL_writecard(Card* towrite) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	uint8_t* data_to_write = malloc(UL_DATASIZE * sizeof(uint8_t));
 8000d0c:	2030      	movs	r0, #48	; 0x30
 8000d0e:	f00e fb79 	bl	800f404 <malloc>
 8000d12:	4603      	mov	r3, r0
 8000d14:	60bb      	str	r3, [r7, #8]
	memcpy(data_to_write, towrite->contents + (UL_MEMSIZE - UL_DATASIZE), UL_DATASIZE);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	3310      	adds	r3, #16
 8000d1c:	2230      	movs	r2, #48	; 0x30
 8000d1e:	4619      	mov	r1, r3
 8000d20:	68b8      	ldr	r0, [r7, #8]
 8000d22:	f00e fb7f 	bl	800f424 <memcpy>

	if (PICC_Select() != PCD_OK) {
 8000d26:	f7ff febb 	bl	8000aa0 <PICC_Select>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2bcc      	cmp	r3, #204	; 0xcc
 8000d2e:	d004      	beq.n	8000d3a <UL_writecard+0x36>
		free(data_to_write);
 8000d30:	68b8      	ldr	r0, [r7, #8]
 8000d32:	f00e fb6f 	bl	800f414 <free>
		return PCD_NO_PICC;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e020      	b.n	8000d7c <UL_writecard+0x78>
	}

	for (int addr = UL_DATASTART; addr <= UL_DATAEND; addr++) {
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	e016      	b.n	8000d6e <UL_writecard+0x6a>
		if (UL_WRITE(addr, data_to_write + (UL_PAGESIZE * (addr - UL_DATASTART))) != PCD_OK) {
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3b04      	subs	r3, #4
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	440b      	add	r3, r1
 8000d50:	4619      	mov	r1, r3
 8000d52:	4610      	mov	r0, r2
 8000d54:	f7ff ff29 	bl	8000baa <UL_WRITE>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2bcc      	cmp	r3, #204	; 0xcc
 8000d5c:	d004      	beq.n	8000d68 <UL_writecard+0x64>
			free(data_to_write);
 8000d5e:	68b8      	ldr	r0, [r7, #8]
 8000d60:	f00e fb58 	bl	800f414 <free>
			return PCD_COMM_ERR;
 8000d64:	23aa      	movs	r3, #170	; 0xaa
 8000d66:	e009      	b.n	8000d7c <UL_writecard+0x78>
	for (int addr = UL_DATASTART; addr <= UL_DATAEND; addr++) {
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	dde5      	ble.n	8000d40 <UL_writecard+0x3c>
		}
	}
	free(data_to_write);
 8000d74:	68b8      	ldr	r0, [r7, #8]
 8000d76:	f00e fb4d 	bl	800f414 <free>
	return PCD_OK;
 8000d7a:	23cc      	movs	r3, #204	; 0xcc
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <uid_tostring>:
 *
 * @param uid - Uid
 * @param size - Size of uid
 * @return pointer to string of uid
 * */
char* uid_tostring(uint8_t* uid, uint8_t size) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	70fb      	strb	r3, [r7, #3]
	char* result = malloc((2 * size * sizeof(char)) + 1); //multiply by 2 since 1 byte is two hex digits
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	3301      	adds	r3, #1
 8000d96:	4618      	mov	r0, r3
 8000d98:	f00e fb34 	bl	800f404 <malloc>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < size; i++) {
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e023      	b.n	8000dee <uid_tostring+0x6a>
		if (uid[i] <= 0x0F) { //Only one hex character
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	4413      	add	r3, r2
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b0f      	cmp	r3, #15
 8000db0:	d80d      	bhi.n	8000dce <uid_tostring+0x4a>
			sprintf(result + (2 * i), "0%X", uid[i]);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	461a      	mov	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	1898      	adds	r0, r3, r2
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4912      	ldr	r1, [pc, #72]	; (8000e10 <uid_tostring+0x8c>)
 8000dc8:	f00e fc32 	bl	800f630 <siprintf>
 8000dcc:	e00c      	b.n	8000de8 <uid_tostring+0x64>
		} else {
			sprintf(result + (2 * i), "%X", uid[i]);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	1898      	adds	r0, r3, r2
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	490c      	ldr	r1, [pc, #48]	; (8000e14 <uid_tostring+0x90>)
 8000de4:	f00e fc24 	bl	800f630 <siprintf>
	for (int i = 0; i < size; i++) {
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3301      	adds	r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	78fb      	ldrb	r3, [r7, #3]
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	dbd7      	blt.n	8000da6 <uid_tostring+0x22>
		}
	}
	result[2 * size] = '\0'; //Add null
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4413      	add	r3, r2
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
	return result;
 8000e04:	68bb      	ldr	r3, [r7, #8]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	0800fddc 	.word	0x0800fddc
 8000e14:	0800fde0 	.word	0x0800fde0

08000e18 <UL_verify>:
/**
 * Verify that a phyiscal card's contents matches what was intended to be written
 * @param check - Card to check phyiscal card data against
 * @return PCD_OK if contents is correct
 * */
PCD_StatusTypeDef UL_verify(Card* check) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	Card* read = malloc(sizeof(Card));
 8000e20:	201c      	movs	r0, #28
 8000e22:	f00e faef 	bl	800f404 <malloc>
 8000e26:	4603      	mov	r3, r0
 8000e28:	60bb      	str	r3, [r7, #8]
	read->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 8000e2a:	2040      	movs	r0, #64	; 0x40
 8000e2c:	f00e faea 	bl	800f404 <malloc>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461a      	mov	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	615a      	str	r2, [r3, #20]
	read->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8000e38:	2007      	movs	r0, #7
 8000e3a:	f00e fae3 	bl	800f404 <malloc>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	601a      	str	r2, [r3, #0]

	if (UL_readcard(read) != PCD_OK) {
 8000e46:	68b8      	ldr	r0, [r7, #8]
 8000e48:	f7ff ff26 	bl	8000c98 <UL_readcard>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2bcc      	cmp	r3, #204	; 0xcc
 8000e50:	d001      	beq.n	8000e56 <UL_verify+0x3e>
		return PCD_COMM_ERR;
 8000e52:	23aa      	movs	r3, #170	; 0xaa
 8000e54:	e031      	b.n	8000eba <UL_verify+0xa2>
	}

	for (int byte = 0; byte < UL_MEMSIZE; byte++) {
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	e01d      	b.n	8000e98 <UL_verify+0x80>
		if (read->contents[byte] != check->contents[byte]) {
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	695a      	ldr	r2, [r3, #20]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4413      	add	r3, r2
 8000e64:	781a      	ldrb	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6959      	ldr	r1, [r3, #20]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	440b      	add	r3, r1
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d00e      	beq.n	8000e92 <UL_verify+0x7a>
			free(read->contents);
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f00e facb 	bl	800f414 <free>
			free(read->uid);
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f00e fac6 	bl	800f414 <free>
			free(read);
 8000e88:	68b8      	ldr	r0, [r7, #8]
 8000e8a:	f00e fac3 	bl	800f414 <free>
			return PCD_VERIFY_ERR;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e013      	b.n	8000eba <UL_verify+0xa2>
	for (int byte = 0; byte < UL_MEMSIZE; byte++) {
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	3301      	adds	r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e9c:	ddde      	ble.n	8000e5c <UL_verify+0x44>
		}
	}
	free(read->contents);
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f00e fab6 	bl	800f414 <free>
	free(read->uid);
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f00e fab1 	bl	800f414 <free>
	free(read);
 8000eb2:	68b8      	ldr	r0, [r7, #8]
 8000eb4:	f00e faae 	bl	800f414 <free>
	return PCD_OK;
 8000eb8:	23cc      	movs	r3, #204	; 0xcc
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000ec8:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8000eca:	463b      	mov	r3, r7
 8000ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f00e fab4 	bl	800f440 <memset>
	OLED_FLUSH(zeros);
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f87c 	bl	8000fd8 <OLED_FLUSH>

}
 8000ee0:	bf00      	nop
 8000ee2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2110      	movs	r1, #16
 8000efe:	4815      	ldr	r0, [pc, #84]	; (8000f54 <OLED_cmd+0x68>)
 8000f00:	f002 fe58 	bl	8003bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2102      	movs	r1, #2
 8000f08:	4813      	ldr	r0, [pc, #76]	; (8000f58 <OLED_cmd+0x6c>)
 8000f0a:	f002 fe53 	bl	8003bb4 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8000f0e:	f107 010f 	add.w	r1, r7, #15
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	2201      	movs	r2, #1
 8000f18:	4810      	ldr	r0, [pc, #64]	; (8000f5c <OLED_cmd+0x70>)
 8000f1a:	f005 fdf6 	bl	8006b0a <HAL_SPI_Transmit>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d009      	beq.n	8000f38 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2110      	movs	r1, #16
 8000f28:	480a      	ldr	r0, [pc, #40]	; (8000f54 <OLED_cmd+0x68>)
 8000f2a:	f002 fe43 	bl	8003bb4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f002 fb9e 	bl	8003670 <HAL_Delay>
		return(HAL_ERROR);
 8000f34:	2301      	movs	r3, #1
 8000f36:	e008      	b.n	8000f4a <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2110      	movs	r1, #16
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <OLED_cmd+0x68>)
 8000f3e:	f002 fe39 	bl	8003bb4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000f42:	2001      	movs	r0, #1
 8000f44:	f002 fb94 	bl	8003670 <HAL_Delay>
		return(HAL_OK);
 8000f48:	2300      	movs	r3, #0
	}

}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40020400 	.word	0x40020400
 8000f5c:	200006fc 	.word	0x200006fc

08000f60 <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2110      	movs	r1, #16
 8000f70:	4816      	ldr	r0, [pc, #88]	; (8000fcc <OLED_data+0x6c>)
 8000f72:	f002 fe1f 	bl	8003bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2102      	movs	r1, #2
 8000f7a:	4815      	ldr	r0, [pc, #84]	; (8000fd0 <OLED_data+0x70>)
 8000f7c:	f002 fe1a 	bl	8003bb4 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	4812      	ldr	r0, [pc, #72]	; (8000fd4 <OLED_data+0x74>)
 8000f8c:	f005 fdbd 	bl	8006b0a <HAL_SPI_Transmit>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00b      	beq.n	8000fae <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2102      	movs	r1, #2
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <OLED_data+0x70>)
 8000f9c:	f002 fe0a 	bl	8003bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	4809      	ldr	r0, [pc, #36]	; (8000fcc <OLED_data+0x6c>)
 8000fa6:	f002 fe05 	bl	8003bb4 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00a      	b.n	8000fc4 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <OLED_data+0x70>)
 8000fb4:	f002 fdfe 	bl	8003bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2110      	movs	r1, #16
 8000fbc:	4803      	ldr	r0, [pc, #12]	; (8000fcc <OLED_data+0x6c>)
 8000fbe:	f002 fdf9 	bl	8003bb4 <HAL_GPIO_WritePin>
		return(HAL_OK);
 8000fc2:	2300      	movs	r3, #0
	}



}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	200006fc 	.word	0x200006fc

08000fd8 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	e023      	b.n	800102e <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	3b50      	subs	r3, #80	; 0x50
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff7c 	bl	8000eec <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f7ff ff79 	bl	8000eec <OLED_cmd>
		OLED_cmd(UPPER_COL);
 8000ffa:	2010      	movs	r0, #16
 8000ffc:	f7ff ff76 	bl	8000eec <OLED_cmd>
		for(int i=0;i<128;i++){
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	e00d      	b.n	8001022 <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	01da      	lsls	r2, r3, #7
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	4413      	add	r3, r2
 800100e:	461a      	mov	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4413      	add	r3, r2
 8001014:	2101      	movs	r1, #1
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ffa2 	bl	8000f60 <OLED_data>
		for(int i=0;i<128;i++){
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	3301      	adds	r3, #1
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	2b7f      	cmp	r3, #127	; 0x7f
 8001026:	ddee      	ble.n	8001006 <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3301      	adds	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b07      	cmp	r3, #7
 8001032:	ddd8      	ble.n	8000fe6 <OLED_FLUSH+0xe>
		}


	}
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8001046:	2201      	movs	r2, #1
 8001048:	2110      	movs	r1, #16
 800104a:	482f      	ldr	r0, [pc, #188]	; (8001108 <OLED_INIT+0xc8>)
 800104c:	f002 fdb2 	bl	8003bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8001050:	2201      	movs	r2, #1
 8001052:	2108      	movs	r1, #8
 8001054:	482c      	ldr	r0, [pc, #176]	; (8001108 <OLED_INIT+0xc8>)
 8001056:	f002 fdad 	bl	8003bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2102      	movs	r1, #2
 800105e:	482b      	ldr	r0, [pc, #172]	; (800110c <OLED_INIT+0xcc>)
 8001060:	f002 fda8 	bl	8003bb4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001064:	2064      	movs	r0, #100	; 0x64
 8001066:	f002 fb03 	bl	8003670 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2108      	movs	r1, #8
 800106e:	4826      	ldr	r0, [pc, #152]	; (8001108 <OLED_INIT+0xc8>)
 8001070:	f002 fda0 	bl	8003bb4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001074:	2064      	movs	r0, #100	; 0x64
 8001076:	f002 fafb 	bl	8003670 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 800107a:	2201      	movs	r2, #1
 800107c:	2108      	movs	r1, #8
 800107e:	4822      	ldr	r0, [pc, #136]	; (8001108 <OLED_INIT+0xc8>)
 8001080:	f002 fd98 	bl	8003bb4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001084:	2064      	movs	r0, #100	; 0x64
 8001086:	f002 faf3 	bl	8003670 <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <OLED_INIT+0xd0>)
 800108c:	463c      	mov	r4, r7
 800108e:	461d      	mov	r5, r3
 8001090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001094:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001098:	c403      	stmia	r4!, {r0, r1}
 800109a:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i = 0; i < 25; i++){
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	e00c      	b.n	80010bc <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 80010a2:	463a      	mov	r2, r7
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	4413      	add	r3, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ff1e 	bl	8000eec <OLED_cmd>
		HAL_Delay(1);
 80010b0:	2001      	movs	r0, #1
 80010b2:	f002 fadd 	bl	8003670 <HAL_Delay>
	for(int i = 0; i < 25; i++){
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3301      	adds	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	2b18      	cmp	r3, #24
 80010c0:	ddef      	ble.n	80010a2 <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 80010c2:	20a7      	movs	r0, #167	; 0xa7
 80010c4:	f7ff ff12 	bl	8000eec <OLED_cmd>
	OLED_FLUSH(HVE);
 80010c8:	4812      	ldr	r0, [pc, #72]	; (8001114 <OLED_INIT+0xd4>)
 80010ca:	f7ff ff85 	bl	8000fd8 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 80010ce:	20af      	movs	r0, #175	; 0xaf
 80010d0:	f7ff ff0c 	bl	8000eec <OLED_cmd>
	HAL_Delay(1000);
 80010d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d8:	f002 faca 	bl	8003670 <HAL_Delay>
	OLED_cmd(DISP_OFF);
 80010dc:	20ae      	movs	r0, #174	; 0xae
 80010de:	f7ff ff05 	bl	8000eec <OLED_cmd>
	HAL_Delay(10);
 80010e2:	200a      	movs	r0, #10
 80010e4:	f002 fac4 	bl	8003670 <HAL_Delay>
	OLED_cmd(DISP_NORM);
 80010e8:	20a6      	movs	r0, #166	; 0xa6
 80010ea:	f7ff feff 	bl	8000eec <OLED_cmd>
	HAL_Delay(10);
 80010ee:	200a      	movs	r0, #10
 80010f0:	f002 fabe 	bl	8003670 <HAL_Delay>
	OLED_cmd(DISP_ON);
 80010f4:	20af      	movs	r0, #175	; 0xaf
 80010f6:	f7ff fef9 	bl	8000eec <OLED_cmd>
	OLED_Clear();
 80010fa:	f7ff fee2 	bl	8000ec2 <OLED_Clear>
	return HAL_OK;
 80010fe:	2300      	movs	r3, #0

}
 8001100:	4618      	mov	r0, r3
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bdb0      	pop	{r4, r5, r7, pc}
 8001108:	40020000 	.word	0x40020000
 800110c:	40020400 	.word	0x40020400
 8001110:	0800fde4 	.word	0x0800fde4
 8001114:	20000000 	.word	0x20000000

08001118 <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[OLED_CHARSIZE];

	for(int i=0;i<=OLED_CHARSIZE;i++){
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	e015      	b.n	8001156 <OLED_InvChar+0x3e>
			temp[i]=~(ASCII[(uint8_t)character-ASCII_START][i]);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f1a3 0220 	sub.w	r2, r3, #32
 8001130:	4913      	ldr	r1, [pc, #76]	; (8001180 <OLED_InvChar+0x68>)
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	18ca      	adds	r2, r1, r3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	4413      	add	r3, r2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	43db      	mvns	r3, r3
 8001142:	b2d9      	uxtb	r1, r3
 8001144:	f107 020c 	add.w	r2, r7, #12
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	4413      	add	r3, r2
 800114c:	460a      	mov	r2, r1
 800114e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<=OLED_CHARSIZE;i++){
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	3301      	adds	r3, #1
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	2b05      	cmp	r3, #5
 800115a:	dde6      	ble.n	800112a <OLED_InvChar+0x12>
	}
	memcpy(result,temp,5);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	6010      	str	r0, [r2, #0]
 8001168:	791b      	ldrb	r3, [r3, #4]
 800116a:	7113      	strb	r3, [r2, #4]
	free(temp);
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	4618      	mov	r0, r3
 8001172:	f00e f94f 	bl	800f414 <free>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	080100e4 	.word	0x080100e4

08001184 <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	4604      	mov	r4, r0
 800118c:	4608      	mov	r0, r1
 800118e:	4611      	mov	r1, r2
 8001190:	461a      	mov	r2, r3
 8001192:	4623      	mov	r3, r4
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	4603      	mov	r3, r0
 8001198:	71bb      	strb	r3, [r7, #6]
 800119a:	460b      	mov	r3, r1
 800119c:	717b      	strb	r3, [r7, #5]
 800119e:	4613      	mov	r3, r2
 80011a0:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	3b50      	subs	r3, #80	; 0x50
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fe9f 	bl	8000eec <OLED_cmd>
	OLED_cmd(col&0x0F);
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fe98 	bl	8000eec <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 80011bc:	79bb      	ldrb	r3, [r7, #6]
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fe8f 	bl	8000eec <OLED_cmd>
	uint8_t data[6];

	if(invert==NORMAL){
 80011ce:	793b      	ldrb	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10e      	bne.n	80011f2 <OLED_drawChar+0x6e>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 80011d4:	797b      	ldrb	r3, [r7, #5]
 80011d6:	f1a3 0220 	sub.w	r2, r3, #32
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <OLED_drawChar+0x94>)
 80011e2:	1899      	adds	r1, r3, r2
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	2205      	movs	r2, #5
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00e f91a 	bl	800f424 <memcpy>
 80011f0:	e006      	b.n	8001200 <OLED_drawChar+0x7c>
	}
	else{
		OLED_InvChar(character,data);
 80011f2:	f107 0208 	add.w	r2, r7, #8
 80011f6:	797b      	ldrb	r3, [r7, #5]
 80011f8:	4611      	mov	r1, r2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff8c 	bl	8001118 <OLED_InvChar>
	}

	data[5]=0x00;
 8001200:	2300      	movs	r3, #0
 8001202:	737b      	strb	r3, [r7, #13]
	OLED_data(data, 6);
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	2106      	movs	r1, #6
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fea8 	bl	8000f60 <OLED_data>

	}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	bd90      	pop	{r4, r7, pc}
 8001218:	080100e4 	.word	0x080100e4

0800121c <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	603a      	str	r2, [r7, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
 800122a:	460b      	mov	r3, r1
 800122c:	71bb      	strb	r3, [r7, #6]
 800122e:	4613      	mov	r3, r2
 8001230:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	e014      	b.n	8001262 <OLED_Printlin+0x46>
		OLED_drawChar(page, col+(i*6), string[i],invert);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	0052      	lsls	r2, r2, #1
 8001240:	4413      	add	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	b2da      	uxtb	r2, r3
 8001246:	79bb      	ldrb	r3, [r7, #6]
 8001248:	4413      	add	r3, r2
 800124a:	b2d9      	uxtb	r1, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	4413      	add	r3, r2
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	797b      	ldrb	r3, [r7, #5]
 8001256:	79f8      	ldrb	r0, [r7, #7]
 8001258:	f7ff ff94 	bl	8001184 <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	6838      	ldr	r0, [r7, #0]
 8001264:	f7fe ffbc 	bl	80001e0 <strlen>
 8001268:	4602      	mov	r2, r0
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	429a      	cmp	r2, r3
 800126e:	d8e3      	bhi.n	8001238 <OLED_Printlin+0x1c>
	}
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	6039      	str	r1, [r7, #0]
 8001284:	71fb      	strb	r3, [r7, #7]
 8001286:	4613      	mov	r3, r2
 8001288:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 800128a:	6838      	ldr	r0, [r7, #0]
 800128c:	f7fe ffa8 	bl	80001e0 <strlen>
 8001290:	4603      	mov	r3, r0
 8001292:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	0fda      	lsrs	r2, r3, #31
 8001298:	4413      	add	r3, r2
 800129a:	105b      	asrs	r3, r3, #1
 800129c:	425b      	negs	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	3340      	adds	r3, #64	; 0x40
 80012aa:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	b2d9      	uxtb	r1, r3
 80012b0:	79bb      	ldrb	r3, [r7, #6]
 80012b2:	79f8      	ldrb	r0, [r7, #7]
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	f7ff ffb1 	bl	800121c <OLED_Printlin>
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b094      	sub	sp, #80	; 0x50
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 80012ca:	2320      	movs	r3, #32
 80012cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 80012d8:	2300      	movs	r3, #0
 80012da:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 80012dc:	2300      	movs	r3, #0
 80012de:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 80012e0:	2300      	movs	r3, #0
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
 80012e4:	e018      	b.n	8001318 <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 80012e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012ea:	4413      	add	r3, r2
 80012ec:	461a      	mov	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b20      	cmp	r3, #32
 80012f6:	d10b      	bne.n	8001310 <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 80012f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012fa:	b2d9      	uxtb	r1, r3
 80012fc:	f107 020c 	add.w	r2, r7, #12
 8001300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001302:	4413      	add	r3, r2
 8001304:	460a      	mov	r2, r1
 8001306:	701a      	strb	r2, [r3, #0]
	                i++;
 8001308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800130a:	3301      	adds	r3, #1
 800130c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800130e:	e000      	b.n	8001312 <OLED_Print+0x50>
	            }
	            else{
	                continue;
 8001310:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 8001312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001314:	3301      	adds	r3, #1
 8001316:	643b      	str	r3, [r7, #64]	; 0x40
 8001318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800131a:	2b15      	cmp	r3, #21
 800131c:	dde3      	ble.n	80012e6 <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 800131e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	4413      	add	r3, r2
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b20      	cmp	r3, #32
 8001328:	d102      	bne.n	8001330 <OLED_Print+0x6e>
	            last_ind++;
 800132a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800132c:	3301      	adds	r3, #1
 800132e:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 8001330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f7fe ff52 	bl	80001e0 <strlen>
 800133c:	4603      	mov	r3, r0
 800133e:	2b15      	cmp	r3, #21
 8001340:	d828      	bhi.n	8001394 <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 8001342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7fe ff49 	bl	80001e0 <strlen>
 800134e:	4603      	mov	r3, r0
 8001350:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	18d1      	adds	r1, r2, r3
 8001358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	4618      	mov	r0, r3
 8001360:	f00e f98e 	bl	800f680 <strncpy>
	            memset(thisline+linend,fill,21-linend);
 8001364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001366:	f107 0220 	add.w	r2, r7, #32
 800136a:	18d0      	adds	r0, r2, r3
 800136c:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001372:	f1c3 0315 	rsb	r3, r3, #21
 8001376:	461a      	mov	r2, r3
 8001378:	f00e f862 	bl	800f440 <memset>
	            thisline[21]=' ';
 800137c:	2320      	movs	r3, #32
 800137e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 8001382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001384:	b2d8      	uxtb	r0, r3
 8001386:	f107 0220 	add.w	r2, r7, #32
 800138a:	2300      	movs	r3, #0
 800138c:	2102      	movs	r1, #2
 800138e:	f7ff ff45 	bl	800121c <OLED_Printlin>




	    }
}
 8001392:	e05e      	b.n	8001452 <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 8001394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001396:	3314      	adds	r3, #20
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b20      	cmp	r3, #32
 80013a0:	d03a      	beq.n	8001418 <OLED_Print+0x156>
 80013a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013a4:	3315      	adds	r3, #21
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b20      	cmp	r3, #32
 80013ae:	d033      	beq.n	8001418 <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 80013b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	18d1      	adds	r1, r2, r3
 80013b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013b8:	3b01      	subs	r3, #1
 80013ba:	3350      	adds	r3, #80	; 0x50
 80013bc:	443b      	add	r3, r7
 80013be:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80013c2:	461a      	mov	r2, r3
 80013c4:	f107 0320 	add.w	r3, r7, #32
 80013c8:	4618      	mov	r0, r3
 80013ca:	f00e f959 	bl	800f680 <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 80013ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013d0:	3b01      	subs	r3, #1
 80013d2:	3350      	adds	r3, #80	; 0x50
 80013d4:	443b      	add	r3, r7
 80013d6:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80013da:	461a      	mov	r2, r3
 80013dc:	f107 0320 	add.w	r3, r7, #32
 80013e0:	1898      	adds	r0, r3, r2
 80013e2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80013e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013e8:	3b01      	subs	r3, #1
 80013ea:	3350      	adds	r3, #80	; 0x50
 80013ec:	443b      	add	r3, r7
 80013ee:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80013f2:	f1c3 0315 	rsb	r3, r3, #21
 80013f6:	461a      	mov	r2, r3
 80013f8:	f00e f822 	bl	800f440 <memset>
	            thisline[21]=' ';
 80013fc:	2320      	movs	r3, #32
 80013fe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 8001402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001404:	3b01      	subs	r3, #1
 8001406:	3350      	adds	r3, #80	; 0x50
 8001408:	443b      	add	r3, r7
 800140a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800140e:	461a      	mov	r2, r3
 8001410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001412:	4413      	add	r3, r2
 8001414:	64bb      	str	r3, [r7, #72]	; 0x48
 8001416:	e00e      	b.n	8001436 <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 8001418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	18d1      	adds	r1, r2, r3
 800141e:	f107 0320 	add.w	r3, r7, #32
 8001422:	2215      	movs	r2, #21
 8001424:	4618      	mov	r0, r3
 8001426:	f00e f92b 	bl	800f680 <strncpy>
	            thisline[21]=' ';
 800142a:	2320      	movs	r3, #32
 800142c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 8001430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001432:	3315      	adds	r3, #21
 8001434:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 8001436:	2300      	movs	r3, #0
 8001438:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 800143a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800143c:	b2d8      	uxtb	r0, r3
 800143e:	f107 0220 	add.w	r2, r7, #32
 8001442:	2300      	movs	r3, #0
 8001444:	2102      	movs	r1, #2
 8001446:	f7ff fee9 	bl	800121c <OLED_Printlin>
	        line++;
 800144a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800144c:	3301      	adds	r3, #1
 800144e:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001450:	e746      	b.n	80012e0 <OLED_Print+0x1e>
}
 8001452:	3750      	adds	r7, #80	; 0x50
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert){
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 8001464:	f7ff fd2d 	bl	8000ec2 <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	78fa      	ldrb	r2, [r7, #3]
 8001470:	4619      	mov	r1, r3
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff ff01 	bl	800127a <OLED_PrintCent>

	for(int i=0;i<screen->datsize-1;i++){
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	e01a      	b.n	80014b4 <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	3301      	adds	r3, #1
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	7818      	ldrb	r0, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3301      	adds	r3, #1
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	7859      	ldrb	r1, [r3, #1]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3301      	adds	r3, #1
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	f7ff feb7 	bl	800121c <OLED_Printlin>
	for(int i=0;i<screen->datsize-1;i++){
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3301      	adds	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	dbde      	blt.n	800147e <OLED_SCREEN+0x26>
	}
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	460b      	mov	r3, r1
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	7afb      	ldrb	r3, [r7, #11]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe fe7b 	bl	80001e0 <strlen>
 80014ea:	4603      	mov	r3, r0
 80014ec:	617b      	str	r3, [r7, #20]
	int start_col=screen->dataloc[dataindx][1]+((len)*6);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	7afb      	ldrb	r3, [r7, #11]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	785b      	ldrb	r3, [r3, #1]
 80014fa:	4619      	mov	r1, r3
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	440b      	add	r3, r1
 8001508:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	7afb      	ldrb	r3, [r7, #11]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	7818      	ldrb	r0, [r3, #0]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	b2d9      	uxtb	r1, r3
 800151a:	2300      	movs	r3, #0
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	f7ff fe7d 	bl	800121c <OLED_Printlin>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	460b      	mov	r3, r1
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 800153a:	4a35      	ldr	r2, [pc, #212]	; (8001610 <OLED_SELECT+0xe4>)
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	4611      	mov	r1, r2
 8001544:	8019      	strh	r1, [r3, #0]
 8001546:	3302      	adds	r3, #2
 8001548:	0c12      	lsrs	r2, r2, #16
 800154a:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol,index;
	char* rest;

	    if(selopt == 0){
 800154c:	7afb      	ldrb	r3, [r7, #11]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d105      	bne.n	800155e <OLED_SELECT+0x32>
	    	index = screen->selsize - 1;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	3b01      	subs	r3, #1
 800155a:	77fb      	strb	r3, [r7, #31]
 800155c:	e002      	b.n	8001564 <OLED_SELECT+0x38>
	    }
		else{
			index = selopt - 1;
 800155e:	7afb      	ldrb	r3, [r7, #11]
 8001560:	3b01      	subs	r3, #1
 8001562:	77fb      	strb	r3, [r7, #31]
	    }

	    prevpage=screen->seldata[index][0];
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	691a      	ldr	r2, [r3, #16]
 8001568:	7ffb      	ldrb	r3, [r7, #31]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	75fb      	strb	r3, [r7, #23]
	    prevcol=screen->seldata[index][1];
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	7ffb      	ldrb	r3, [r7, #31]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	785b      	ldrb	r3, [r3, #1]
 800157e:	75bb      	strb	r3, [r7, #22]
	    thispage=screen->seldata[selopt][0];
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	7afb      	ldrb	r3, [r7, #11]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	757b      	strb	r3, [r7, #21]
	    thiscol=screen->seldata[selopt][1];
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	7afb      	ldrb	r3, [r7, #11]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	785b      	ldrb	r3, [r3, #1]
 800159a:	753b      	strb	r3, [r7, #20]

	    if(restore == OLED_RESTORE){
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d122      	bne.n	80015e8 <OLED_SELECT+0xbc>
	    	if (selopt == 0) {
 80015a2:	7afb      	ldrb	r3, [r7, #11]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d110      	bne.n	80015ca <OLED_SELECT+0x9e>
	    		rest=(char*)screen->data[find_restore_string(screen, screen->selsize - 1)]; //Here we may be wrapping around so we must restore the last select option
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	689c      	ldr	r4, [r3, #8]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	3b01      	subs	r3, #1
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4619      	mov	r1, r3
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f000 f893 	bl	80016e4 <find_restore_string>
 80015be:	4603      	mov	r3, r0
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4423      	add	r3, r4
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	61bb      	str	r3, [r7, #24]
 80015c8:	e010      	b.n	80015ec <OLED_SELECT+0xc0>
	    	} else {
	    		rest=(char*)screen->data[find_restore_string(screen, selopt - 1)];
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	689c      	ldr	r4, [r3, #8]
 80015ce:	7afb      	ldrb	r3, [r7, #11]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4619      	mov	r1, r3
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 f884 	bl	80016e4 <find_restore_string>
 80015dc:	4603      	mov	r3, r0
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4423      	add	r3, r4
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	e001      	b.n	80015ec <OLED_SELECT+0xc0>
	    	}
	    } else {
	    	rest = "  ";
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <OLED_SELECT+0xe8>)
 80015ea:	61bb      	str	r3, [r7, #24]
	    }

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 80015ec:	7db9      	ldrb	r1, [r7, #22]
 80015ee:	7df8      	ldrb	r0, [r7, #23]
 80015f0:	2300      	movs	r3, #0
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	f7ff fe12 	bl	800121c <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 80015f8:	f107 0210 	add.w	r2, r7, #16
 80015fc:	7d39      	ldrb	r1, [r7, #20]
 80015fe:	7d78      	ldrb	r0, [r7, #21]
 8001600:	2300      	movs	r3, #0
 8001602:	f7ff fe0b 	bl	800121c <OLED_Printlin>

}
 8001606:	bf00      	nop
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd90      	pop	{r4, r7, pc}
 800160e:	bf00      	nop
 8001610:	0800fe04 	.word	0x0800fe04
 8001614:	0800fe00 	.word	0x0800fe00

08001618 <OLED_display_files>:
 * Display filenames to OLED display (used in show files task)
 *
 * @param page - Page of files to display (page count is increased as user scrolls through files)
 * @return HAL_OK if files were successfully displayed
 * */
HAL_StatusTypeDef OLED_display_files(const Screen* screen, uint8_t page) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	70fb      	strb	r3, [r7, #3]
	if (get_number_files() == 0) {
 8001624:	f001 fc94 	bl	8002f50 <get_number_files>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <OLED_display_files+0x1a>
		return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e034      	b.n	800169c <OLED_display_files+0x84>
	}
	uint16_t file_count = get_number_files();
 8001632:	f001 fc8d 	bl	8002f50 <get_number_files>
 8001636:	4603      	mov	r3, r0
 8001638:	827b      	strh	r3, [r7, #18]

	char** file_names = malloc(file_count * sizeof(char*));
 800163a:	8a7b      	ldrh	r3, [r7, #18]
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4618      	mov	r0, r3
 8001640:	f00d fee0 	bl	800f404 <malloc>
 8001644:	4603      	mov	r3, r0
 8001646:	60fb      	str	r3, [r7, #12]

	if (get_all_files(file_names) != RFS_OK) {
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f001 fca2 	bl	8002f92 <get_all_files>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d006      	beq.n	8001662 <OLED_display_files+0x4a>
		free_filenames(file_names, file_count);
 8001654:	8a7b      	ldrh	r3, [r7, #18]
 8001656:	4619      	mov	r1, r3
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f000 f825 	bl	80016a8 <free_filenames>
		return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e01c      	b.n	800169c <OLED_display_files+0x84>
	}

	for (int i = 0; i < file_count; i++) {
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e00f      	b.n	8001688 <OLED_display_files+0x70>
		OLED_SCRNREF(&SCRN_ShowFiles, i + 1, file_names[i]);
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	3301      	adds	r3, #1
 800166e:	b2d9      	uxtb	r1, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	4809      	ldr	r0, [pc, #36]	; (80016a4 <OLED_display_files+0x8c>)
 800167e:	f7ff ff24 	bl	80014ca <OLED_SCRNREF>
	for (int i = 0; i < file_count; i++) {
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	8a7b      	ldrh	r3, [r7, #18]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	429a      	cmp	r2, r3
 800168e:	dbeb      	blt.n	8001668 <OLED_display_files+0x50>
	}

	free_filenames(file_names, file_count);
 8001690:	8a7b      	ldrh	r3, [r7, #18]
 8001692:	4619      	mov	r1, r3
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f000 f807 	bl	80016a8 <free_filenames>
	return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	080104f4 	.word	0x080104f4

080016a8 <free_filenames>:
/**
 * Free list of file names
 * @param file_names - File names
 * @param size -  Number of file names
 * */
void free_filenames(char** file_names, int size) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++) {
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	e00a      	b.n	80016ce <free_filenames+0x26>
		free(file_names[i]);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	4413      	add	r3, r2
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f00d fea6 	bl	800f414 <free>
	for (int i = 0; i < size; i++) {
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3301      	adds	r3, #1
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	dbf0      	blt.n	80016b8 <free_filenames+0x10>
	}
	free(file_names);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f00d fe9c 	bl	800f414 <free>
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <find_restore_string>:
 *
 * @param screen - Screen to update
 * @param prev_sel_opt - Previous selected option
 * @return index of string in screen->data to be used as replacement
 * */
uint8_t find_restore_string(const Screen* screen, uint8_t prev_sel_opt) {
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	70fb      	strb	r3, [r7, #3]
	uint8_t index_of_string;

	for (int i = 1; i < screen->datsize; i++) {
 80016f0:	2301      	movs	r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	e021      	b.n	800173a <find_restore_string+0x56>
		if((screen->dataloc[i][0] == screen->seldata[prev_sel_opt][0]) && (screen->dataloc[i][1] == screen->seldata[prev_sel_opt][1])) {
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4413      	add	r3, r2
 8001700:	781a      	ldrb	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6919      	ldr	r1, [r3, #16]
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	440b      	add	r3, r1
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d110      	bne.n	8001734 <find_restore_string+0x50>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	785a      	ldrb	r2, [r3, #1]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6919      	ldr	r1, [r3, #16]
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	440b      	add	r3, r1
 8001728:	785b      	ldrb	r3, [r3, #1]
 800172a:	429a      	cmp	r2, r3
 800172c:	d102      	bne.n	8001734 <find_restore_string+0x50>
			index_of_string = i;
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	73fb      	strb	r3, [r7, #15]
			break;
 8001732:	e007      	b.n	8001744 <find_restore_string+0x60>
	for (int i = 1; i < screen->datsize; i++) {
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	3301      	adds	r3, #1
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	429a      	cmp	r2, r3
 8001742:	dbd8      	blt.n	80016f6 <find_restore_string+0x12>
		}
	}

	return index_of_string;
 8001744:	7bfb      	ldrb	r3, [r7, #15]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <oled_show_file>:

/**
 * Show the file data of given file entry number
 * @param entry - Entry to show data of
 * */
void oled_show_file(uint16_t entry) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	4618      	mov	r0, r3
 8001762:	f001 fc6c 	bl	800303e <entry_present>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d12d      	bne.n	80017c8 <oled_show_file+0x74>
		return; //No card entry present
	}

	work = read_card_entry(entry);
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	4618      	mov	r0, r3
 8001770:	f001 fa95 	bl	8002c9e <read_card_entry>
 8001774:	60f8      	str	r0, [r7, #12]

	OLED_SCREEN(&SCRN_FileData, NORMAL);
 8001776:	2100      	movs	r1, #0
 8001778:	4815      	ldr	r0, [pc, #84]	; (80017d0 <oled_show_file+0x7c>)
 800177a:	f7ff fe6d 	bl	8001458 <OLED_SCREEN>
	OLED_SCRNREF(&SCRN_FileData, 0, work->name);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	461a      	mov	r2, r3
 8001784:	2100      	movs	r1, #0
 8001786:	4812      	ldr	r0, [pc, #72]	; (80017d0 <oled_show_file+0x7c>)
 8001788:	f7ff fe9f 	bl	80014ca <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_TYPE_LOC, work->type);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	461a      	mov	r2, r3
 8001792:	2101      	movs	r1, #1
 8001794:	480e      	ldr	r0, [pc, #56]	; (80017d0 <oled_show_file+0x7c>)
 8001796:	f7ff fe98 	bl	80014ca <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_UID_LOC, uid_tostring(work->uid, work->uidsize));
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	791b      	ldrb	r3, [r3, #4]
 80017a2:	4619      	mov	r1, r3
 80017a4:	4610      	mov	r0, r2
 80017a6:	f7ff faed 	bl	8000d84 <uid_tostring>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	2102      	movs	r1, #2
 80017b0:	4807      	ldr	r0, [pc, #28]	; (80017d0 <oled_show_file+0x7c>)
 80017b2:	f7ff fe8a 	bl	80014ca <OLED_SCRNREF>
	OLED_SELECT(&SCRN_FileData, 0, OLED_NORESTORE);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <oled_show_file+0x7c>)
 80017bc:	f7ff feb6 	bl	800152c <OLED_SELECT>

	free(work);
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f00d fe27 	bl	800f414 <free>
 80017c6:	e000      	b.n	80017ca <oled_show_file+0x76>
		return; //No card entry present
 80017c8:	bf00      	nop
}
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	08010508 	.word	0x08010508

080017d4 <oled_move_selection>:
 * Move selection arrow for given screen
 * @param screen - Screen to be modified
 * @param arrow_index - Pointer to variable which keeps track of arrow index
 * @param restore - Option to restore previous text or not
 * */
void oled_move_selection(const Screen* screen, uint8_t* arrow_index, uint8_t restore) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	4613      	mov	r3, r2
 80017e0:	71fb      	strb	r3, [r7, #7]
	uint8_t max_index = screen->selsize;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	75fb      	strb	r3, [r7, #23]

	if (*arrow_index >= max_index - 1) {
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	429a      	cmp	r2, r3
 80017f4:	db03      	blt.n	80017fe <oled_move_selection+0x2a>
		*arrow_index = 0;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	e005      	b.n	800180a <oled_move_selection+0x36>
	} else {
		*arrow_index += 1;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	3301      	adds	r3, #1
 8001804:	b2da      	uxtb	r2, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	701a      	strb	r2, [r3, #0]

	}
	OLED_SELECT(screen, *arrow_index, restore);
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	79fa      	ldrb	r2, [r7, #7]
 8001810:	4619      	mov	r1, r3
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f7ff fe8a 	bl	800152c <OLED_SELECT>
}
 8001818:	bf00      	nop
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af02      	add	r7, sp, #8
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT, addr, DUMMY};
 800182a:	230f      	movs	r3, #15
 800182c:	733b      	strb	r3, [r7, #12]
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	737b      	strb	r3, [r7, #13]
 8001832:	2300      	movs	r3, #0
 8001834:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	f44f 7180 	mov.w	r1, #256	; 0x100
 800183c:	480d      	ldr	r0, [pc, #52]	; (8001874 <STAT_READ+0x54>)
 800183e:	f002 f9b9 	bl	8003bb4 <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 8001842:	bf00      	nop
 8001844:	f107 0208 	add.w	r2, r7, #8
 8001848:	f107 010c 	add.w	r1, r7, #12
 800184c:	2364      	movs	r3, #100	; 0x64
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2303      	movs	r3, #3
 8001852:	4809      	ldr	r0, [pc, #36]	; (8001878 <STAT_READ+0x58>)
 8001854:	f005 fa95 	bl	8006d82 <HAL_SPI_TransmitReceive>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f2      	bne.n	8001844 <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800185e:	2201      	movs	r2, #1
 8001860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001864:	4803      	ldr	r0, [pc, #12]	; (8001874 <STAT_READ+0x54>)
 8001866:	f002 f9a5 	bl	8003bb4 <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 800186a:	7abb      	ldrb	r3, [r7, #10]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40020000 	.word	0x40020000
 8001878:	20000754 	.word	0x20000754

0800187c <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	460a      	mov	r2, r1
 8001886:	71fb      	strb	r3, [r7, #7]
 8001888:	4613      	mov	r3, r2
 800188a:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 800188c:	231f      	movs	r3, #31
 800188e:	733b      	strb	r3, [r7, #12]
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	737b      	strb	r3, [r7, #13]
 8001894:	79bb      	ldrb	r3, [r7, #6]
 8001896:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800189e:	480a      	ldr	r0, [pc, #40]	; (80018c8 <STAT_WRITE+0x4c>)
 80018a0:	f002 f988 	bl	8003bb4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 80018a4:	f107 010c 	add.w	r1, r7, #12
 80018a8:	2364      	movs	r3, #100	; 0x64
 80018aa:	2203      	movs	r2, #3
 80018ac:	4807      	ldr	r0, [pc, #28]	; (80018cc <STAT_WRITE+0x50>)
 80018ae:	f005 f92c 	bl	8006b0a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80018b2:	2201      	movs	r2, #1
 80018b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018b8:	4803      	ldr	r0, [pc, #12]	; (80018c8 <STAT_WRITE+0x4c>)
 80018ba:	f002 f97b 	bl	8003bb4 <HAL_GPIO_WritePin>

	return(HAL_OK);
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40020000 	.word	0x40020000
 80018cc:	20000754 	.word	0x20000754

080018d0 <WRIT_EN>:
 * 		Bad block manage
 *
 * The Write Enable bit in status register 3 will be reset to 0 after any of these instructions
 * */

void WRIT_EN(void){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
	uint8_t write_en=W_EN;
 80018d6:	2306      	movs	r3, #6
 80018d8:	71fb      	strb	r3, [r7, #7]
	WRITE_DIS();
 80018da:	f000 f825 	bl	8001928 <WRITE_DIS>

	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 80018de:	e011      	b.n	8001904 <WRIT_EN+0x34>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e6:	480e      	ldr	r0, [pc, #56]	; (8001920 <WRIT_EN+0x50>)
 80018e8:	f002 f964 	bl	8003bb4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &write_en, 1, 100);
 80018ec:	1df9      	adds	r1, r7, #7
 80018ee:	2364      	movs	r3, #100	; 0x64
 80018f0:	2201      	movs	r2, #1
 80018f2:	480c      	ldr	r0, [pc, #48]	; (8001924 <WRIT_EN+0x54>)
 80018f4:	f005 f909 	bl	8006b0a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80018f8:	2201      	movs	r2, #1
 80018fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018fe:	4808      	ldr	r0, [pc, #32]	; (8001920 <WRIT_EN+0x50>)
 8001900:	f002 f958 	bl	8003bb4 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 8001904:	20c0      	movs	r0, #192	; 0xc0
 8001906:	f7ff ff8b 	bl	8001820 <STAT_READ>
 800190a:	4603      	mov	r3, r0
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b02      	cmp	r3, #2
 8001912:	d1e5      	bne.n	80018e0 <WRIT_EN+0x10>
	}


}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40020000 	.word	0x40020000
 8001924:	20000754 	.word	0x20000754

08001928 <WRITE_DIS>:

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 800192e:	2304      	movs	r3, #4
 8001930:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 8001932:	e011      	b.n	8001958 <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800193a:	480e      	ldr	r0, [pc, #56]	; (8001974 <WRITE_DIS+0x4c>)
 800193c:	f002 f93a 	bl	8003bb4 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 8001940:	1df9      	adds	r1, r7, #7
 8001942:	2364      	movs	r3, #100	; 0x64
 8001944:	2201      	movs	r2, #1
 8001946:	480c      	ldr	r0, [pc, #48]	; (8001978 <WRITE_DIS+0x50>)
 8001948:	f005 f8df 	bl	8006b0a <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800194c:	2201      	movs	r2, #1
 800194e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001952:	4808      	ldr	r0, [pc, #32]	; (8001974 <WRITE_DIS+0x4c>)
 8001954:	f002 f92e 	bl	8003bb4 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 8001958:	20c0      	movs	r0, #192	; 0xc0
 800195a:	f7ff ff61 	bl	8001820 <STAT_READ>
 800195e:	4603      	mov	r3, r0
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b02      	cmp	r3, #2
 8001966:	d0e5      	beq.n	8001934 <WRITE_DIS+0xc>
		}
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40020000 	.word	0x40020000
 8001978:	20000754 	.word	0x20000754

0800197c <block_erase>:
/**
 * Erase a 128kB (64 pages) block to 0xFF
 *
 * @param block_num - Block number to erase
 * */
void block_erase(uint16_t block_num) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	80fb      	strh	r3, [r7, #6]
	uint16_t page_addr = block_num * BLOCK_PAGECOUNT;
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	019b      	lsls	r3, r3, #6
 800198a:	81fb      	strh	r3, [r7, #14]
	uint8_t transaction [] = {BLOCK_ERS, DUMMY, page_addr>>8, page_addr};
 800198c:	23d8      	movs	r3, #216	; 0xd8
 800198e:	723b      	strb	r3, [r7, #8]
 8001990:	2300      	movs	r3, #0
 8001992:	727b      	strb	r3, [r7, #9]
 8001994:	89fb      	ldrh	r3, [r7, #14]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	b29b      	uxth	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	72bb      	strb	r3, [r7, #10]
 800199e:	89fb      	ldrh	r3, [r7, #14]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	72fb      	strb	r3, [r7, #11]
	WRIT_EN();
 80019a4:	f7ff ff94 	bl	80018d0 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ae:	480f      	ldr	r0, [pc, #60]	; (80019ec <block_erase+0x70>)
 80019b0:	f002 f900 	bl	8003bb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, transaction, sizeof(transaction)/sizeof(transaction[0]), 100);
 80019b4:	f107 0108 	add.w	r1, r7, #8
 80019b8:	2364      	movs	r3, #100	; 0x64
 80019ba:	2204      	movs	r2, #4
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <block_erase+0x74>)
 80019be:	f005 f8a4 	bl	8006b0a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80019c2:	2201      	movs	r2, #1
 80019c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019c8:	4808      	ldr	r0, [pc, #32]	; (80019ec <block_erase+0x70>)
 80019ca:	f002 f8f3 	bl	8003bb4 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 80019ce:	bf00      	nop
 80019d0:	20c0      	movs	r0, #192	; 0xc0
 80019d2:	f7ff ff25 	bl	8001820 <STAT_READ>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d0f7      	beq.n	80019d0 <block_erase+0x54>
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40020000 	.word	0x40020000
 80019f0:	20000754 	.word	0x20000754

080019f4 <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80019f8:	2201      	movs	r2, #1
 80019fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019fe:	480a      	ldr	r0, [pc, #40]	; (8001a28 <MEM_INIT+0x34>)
 8001a00:	f002 f8d8 	bl	8003bb4 <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 8001a04:	2100      	movs	r1, #0
 8001a06:	20a0      	movs	r0, #160	; 0xa0
 8001a08:	f7ff ff38 	bl	800187c <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 8001a0c:	20a0      	movs	r0, #160	; 0xa0
 8001a0e:	f7ff ff07 	bl	8001820 <STAT_READ>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MEM_INIT+0x28>
		return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e002      	b.n	8001a22 <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 8001a1c:	f7ff ff84 	bl	8001928 <WRITE_DIS>
	return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40020000 	.word	0x40020000

08001a2c <MEM_WRITE>:
 * @param data: data to write
 *
 * @param bytes: Number of bytes to write to page
 * */

HAL_StatusTypeDef MEM_WRITE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60ba      	str	r2, [r7, #8]
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	4603      	mov	r3, r0
 8001a38:	81fb      	strh	r3, [r7, #14]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	81bb      	strh	r3, [r7, #12]
	uint8_t* setup = malloc((bytes+3)*sizeof(uint8_t)); //Extra 3 bytes for write opcode and column address
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3303      	adds	r3, #3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f00d fcde 	bl	800f404 <malloc>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	617b      	str	r3, [r7, #20]
	uint8_t execute[]={WRIT_EXE, DUMMY, page_addr>>8, page_addr};
 8001a4c:	2310      	movs	r3, #16
 8001a4e:	743b      	strb	r3, [r7, #16]
 8001a50:	2300      	movs	r3, #0
 8001a52:	747b      	strb	r3, [r7, #17]
 8001a54:	89fb      	ldrh	r3, [r7, #14]
 8001a56:	0a1b      	lsrs	r3, r3, #8
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	74bb      	strb	r3, [r7, #18]
 8001a5e:	89fb      	ldrh	r3, [r7, #14]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	74fb      	strb	r3, [r7, #19]

	setup[0] = WRIT_LOAD;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2202      	movs	r2, #2
 8001a68:	701a      	strb	r2, [r3, #0]
	setup[1] = col_addr>>8;
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	3301      	adds	r3, #1
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	701a      	strb	r2, [r3, #0]
	setup[2] = col_addr;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	89ba      	ldrh	r2, [r7, #12]
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]
	memcpy(&setup[3], data, bytes);
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3303      	adds	r3, #3
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f00d fcca 	bl	800f424 <memcpy>

	WRIT_EN();
 8001a90:	f7ff ff1e 	bl	80018d0 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a9a:	482d      	ldr	r0, [pc, #180]	; (8001b50 <MEM_WRITE+0x124>)
 8001a9c:	f002 f88a 	bl	8003bb4 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, setup, bytes+3, 100)!=HAL_OK){ //load data to internal buffer
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3303      	adds	r3, #3
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	2364      	movs	r3, #100	; 0x64
 8001aaa:	6979      	ldr	r1, [r7, #20]
 8001aac:	4829      	ldr	r0, [pc, #164]	; (8001b54 <MEM_WRITE+0x128>)
 8001aae:	f005 f82c 	bl	8006b0a <HAL_SPI_Transmit>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00a      	beq.n	8001ace <MEM_WRITE+0xa2>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001abe:	4824      	ldr	r0, [pc, #144]	; (8001b50 <MEM_WRITE+0x124>)
 8001ac0:	f002 f878 	bl	8003bb4 <HAL_GPIO_WritePin>
		free(setup);
 8001ac4:	6978      	ldr	r0, [r7, #20]
 8001ac6:	f00d fca5 	bl	800f414 <free>
		return(HAL_ERROR);
 8001aca:	2301      	movs	r3, #1
 8001acc:	e03c      	b.n	8001b48 <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad4:	481e      	ldr	r0, [pc, #120]	; (8001b50 <MEM_WRITE+0x124>)
 8001ad6:	f002 f86d 	bl	8003bb4 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until busy bit is cleared
 8001ada:	bf00      	nop
 8001adc:	20c0      	movs	r0, #192	; 0xc0
 8001ade:	f7ff fe9f 	bl	8001820 <STAT_READ>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d0f7      	beq.n	8001adc <MEM_WRITE+0xb0>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001aec:	2200      	movs	r2, #0
 8001aee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af2:	4817      	ldr	r0, [pc, #92]	; (8001b50 <MEM_WRITE+0x124>)
 8001af4:	f002 f85e 	bl	8003bb4 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, execute, 4, 100)!=HAL_OK){ //Send command to dump internal buffer data to memory array
 8001af8:	f107 0110 	add.w	r1, r7, #16
 8001afc:	2364      	movs	r3, #100	; 0x64
 8001afe:	2204      	movs	r2, #4
 8001b00:	4814      	ldr	r0, [pc, #80]	; (8001b54 <MEM_WRITE+0x128>)
 8001b02:	f005 f802 	bl	8006b0a <HAL_SPI_Transmit>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00a      	beq.n	8001b22 <MEM_WRITE+0xf6>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b12:	480f      	ldr	r0, [pc, #60]	; (8001b50 <MEM_WRITE+0x124>)
 8001b14:	f002 f84e 	bl	8003bb4 <HAL_GPIO_WritePin>
		free(setup);
 8001b18:	6978      	ldr	r0, [r7, #20]
 8001b1a:	f00d fc7b 	bl	800f414 <free>
		return(HAL_ERROR);
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e012      	b.n	8001b48 <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001b22:	2201      	movs	r2, #1
 8001b24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b28:	4809      	ldr	r0, [pc, #36]	; (8001b50 <MEM_WRITE+0x124>)
 8001b2a:	f002 f843 	bl	8003bb4 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001b2e:	bf00      	nop
 8001b30:	20c0      	movs	r0, #192	; 0xc0
 8001b32:	f7ff fe75 	bl	8001820 <STAT_READ>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d0f7      	beq.n	8001b30 <MEM_WRITE+0x104>
	free(setup);
 8001b40:	6978      	ldr	r0, [r7, #20]
 8001b42:	f00d fc67 	bl	800f414 <free>
	return(HAL_OK);
 8001b46:	2300      	movs	r3, #0

}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40020000 	.word	0x40020000
 8001b54:	20000754 	.word	0x20000754

08001b58 <MEM_READPAGE>:
 * @param bytes: Number of bytes to read from data buffer
 *
 * !!Note data must first be shifted from memory array into internal data buffer and then can be read!!
 * */

HAL_StatusTypeDef MEM_READPAGE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){ //Read one 2KiB page. Data will be put into internal buffer which can then be read. Wait at least tDR or until busy bit is clear
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08c      	sub	sp, #48	; 0x30
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	60ba      	str	r2, [r7, #8]
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	4603      	mov	r3, r0
 8001b64:	81fb      	strh	r3, [r7, #14]
 8001b66:	460b      	mov	r3, r1
 8001b68:	81bb      	strh	r3, [r7, #12]
	uint8_t transaction[]={READ_PAGE, DUMMY, page_addr>>8, page_addr};
 8001b6a:	2313      	movs	r3, #19
 8001b6c:	753b      	strb	r3, [r7, #20]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	757b      	strb	r3, [r7, #21]
 8001b72:	89fb      	ldrh	r3, [r7, #14]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	75bb      	strb	r3, [r7, #22]
 8001b7c:	89fb      	ldrh	r3, [r7, #14]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	75fb      	strb	r3, [r7, #23]
	uint8_t transaction_size = sizeof(transaction)/sizeof(transaction[0]);
 8001b82:	2304      	movs	r3, #4
 8001b84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t* read_command = malloc(bytes+transaction_size); //Must allocate here since array may be too big for FreeRTOS task stack
 8001b88:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4413      	add	r3, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f00d fc37 	bl	800f404 <malloc>
 8001b96:	4603      	mov	r3, r0
 8001b98:	61fb      	str	r3, [r7, #28]
	uint8_t* rec_data = malloc(bytes+transaction_size);
 8001b9a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f00d fc2e 	bl	800f404 <malloc>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	61bb      	str	r3, [r7, #24]

	memset(read_command, 0, bytes+transaction_size);
 8001bac:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	69f8      	ldr	r0, [r7, #28]
 8001bba:	f00d fc41 	bl	800f440 <memset>
	read_command[0]=READ_BUF;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	701a      	strb	r2, [r3, #0]
	read_command[1]= col_addr>>8;
 8001bc4:	89bb      	ldrh	r3, [r7, #12]
 8001bc6:	0a1b      	lsrs	r3, r3, #8
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]
	read_command[2] = col_addr;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	89ba      	ldrh	r2, [r7, #12]
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	701a      	strb	r2, [r3, #0]
	read_command[3] = DUMMY;
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	3303      	adds	r3, #3
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bea:	4842      	ldr	r0, [pc, #264]	; (8001cf4 <MEM_READPAGE+0x19c>)
 8001bec:	f001 ffe2 	bl	8003bb4 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, transaction, 4, 100)!=HAL_OK){ //load data to internal buffer
 8001bf0:	f107 0114 	add.w	r1, r7, #20
 8001bf4:	2364      	movs	r3, #100	; 0x64
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	483f      	ldr	r0, [pc, #252]	; (8001cf8 <MEM_READPAGE+0x1a0>)
 8001bfa:	f004 ff86 	bl	8006b0a <HAL_SPI_Transmit>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00d      	beq.n	8001c20 <MEM_READPAGE+0xc8>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001c04:	2201      	movs	r2, #1
 8001c06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c0a:	483a      	ldr	r0, [pc, #232]	; (8001cf4 <MEM_READPAGE+0x19c>)
 8001c0c:	f001 ffd2 	bl	8003bb4 <HAL_GPIO_WritePin>
		free(read_command);
 8001c10:	69f8      	ldr	r0, [r7, #28]
 8001c12:	f00d fbff 	bl	800f414 <free>
		free(rec_data);
 8001c16:	69b8      	ldr	r0, [r7, #24]
 8001c18:	f00d fbfc 	bl	800f414 <free>
		return(HAL_ERROR);
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e064      	b.n	8001cea <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001c20:	2201      	movs	r2, #1
 8001c22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c26:	4833      	ldr	r0, [pc, #204]	; (8001cf4 <MEM_READPAGE+0x19c>)
 8001c28:	f001 ffc4 	bl	8003bb4 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until BUSY bit is cleared
 8001c2c:	bf00      	nop
 8001c2e:	20c0      	movs	r0, #192	; 0xc0
 8001c30:	f7ff fdf6 	bl	8001820 <STAT_READ>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d0f7      	beq.n	8001c2e <MEM_READPAGE+0xd6>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c44:	482b      	ldr	r0, [pc, #172]	; (8001cf4 <MEM_READPAGE+0x19c>)
 8001c46:	f001 ffb5 	bl	8003bb4 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, read_command, rec_data, bytes+transaction_size, 100)!=HAL_OK){ //Send command to flush buffer to memory array
 8001c4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2264      	movs	r2, #100	; 0x64
 8001c5a:	9200      	str	r2, [sp, #0]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	69f9      	ldr	r1, [r7, #28]
 8001c60:	4825      	ldr	r0, [pc, #148]	; (8001cf8 <MEM_READPAGE+0x1a0>)
 8001c62:	f005 f88e 	bl	8006d82 <HAL_SPI_TransmitReceive>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00d      	beq.n	8001c88 <MEM_READPAGE+0x130>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c72:	4820      	ldr	r0, [pc, #128]	; (8001cf4 <MEM_READPAGE+0x19c>)
 8001c74:	f001 ff9e 	bl	8003bb4 <HAL_GPIO_WritePin>
		free(read_command);
 8001c78:	69f8      	ldr	r0, [r7, #28]
 8001c7a:	f00d fbcb 	bl	800f414 <free>
		free(rec_data);
 8001c7e:	69b8      	ldr	r0, [r7, #24]
 8001c80:	f00d fbc8 	bl	800f414 <free>
		return(HAL_ERROR);
 8001c84:	2301      	movs	r3, #1
 8001c86:	e030      	b.n	8001cea <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c8e:	4819      	ldr	r0, [pc, #100]	; (8001cf4 <MEM_READPAGE+0x19c>)
 8001c90:	f001 ff90 	bl	8003bb4 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001c94:	bf00      	nop
 8001c96:	20c0      	movs	r0, #192	; 0xc0
 8001c98:	f7ff fdc2 	bl	8001820 <STAT_READ>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d0f7      	beq.n	8001c96 <MEM_READPAGE+0x13e>

	if (bytes == 1) {
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d104      	bne.n	8001cb6 <MEM_READPAGE+0x15e>
		*data = rec_data[4];
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	791a      	ldrb	r2, [r3, #4]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	e012      	b.n	8001cdc <MEM_READPAGE+0x184>
	} else {
		for(int i = 0; i < bytes; i++){
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cba:	e00b      	b.n	8001cd4 <MEM_READPAGE+0x17c>
				data[i] = rec_data[i+4]; //+4 as first four elements of rec_data are meaningless
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	441a      	add	r2, r3
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	68b9      	ldr	r1, [r7, #8]
 8001cc8:	440b      	add	r3, r1
 8001cca:	7812      	ldrb	r2, [r2, #0]
 8001ccc:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < bytes; i++){
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d8ef      	bhi.n	8001cbc <MEM_READPAGE+0x164>
		}
	}
	free(read_command);
 8001cdc:	69f8      	ldr	r0, [r7, #28]
 8001cde:	f00d fb99 	bl	800f414 <free>
	free(rec_data);
 8001ce2:	69b8      	ldr	r0, [r7, #24]
 8001ce4:	f00d fb96 	bl	800f414 <free>
	return(HAL_OK);
 8001ce8:	2300      	movs	r3, #0

}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3728      	adds	r7, #40	; 0x28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40020000 	.word	0x40020000
 8001cf8:	20000754 	.word	0x20000754

08001cfc <mem_find_free_block>:
/**
 * Find the next free/empty block
 *
 * @return address of free block or -1 if no blocks available
 * */
int mem_find_free_block(void) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	e016      	b.n	8001d36 <mem_find_free_block+0x3a>
		uint8_t first_byte;
		if (MEM_READPAGE(i * BLOCK_PAGECOUNT, 0x0000, &first_byte, 1) != HAL_OK) {
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	019b      	lsls	r3, r3, #6
 8001d0e:	b298      	uxth	r0, r3
 8001d10:	1cfa      	adds	r2, r7, #3
 8001d12:	2301      	movs	r3, #1
 8001d14:	2100      	movs	r1, #0
 8001d16:	f7ff ff1f 	bl	8001b58 <MEM_READPAGE>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <mem_find_free_block+0x2a>
			return -1;
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295
 8001d24:	e00d      	b.n	8001d42 <mem_find_free_block+0x46>
		}

		if (first_byte == 0xFF) {
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	2bff      	cmp	r3, #255	; 0xff
 8001d2a:	d101      	bne.n	8001d30 <mem_find_free_block+0x34>
			return i;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	e008      	b.n	8001d42 <mem_find_free_block+0x46>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3301      	adds	r3, #1
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d3c:	dbe4      	blt.n	8001d08 <mem_find_free_block+0xc>
		}
	}
	return -1;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <memory_reset>:

/**
 * Clear entire memory array to 0xFF
 * */
void memory_reset(void) {
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8001d50:	2300      	movs	r3, #0
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	e007      	b.n	8001d66 <memory_reset+0x1c>
		block_erase(i);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fe0e 	bl	800197c <block_erase>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3301      	adds	r3, #1
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6c:	dbf3      	blt.n	8001d56 <memory_reset+0xc>
	}
}
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_GPIO_EXTI_Callback>:

/****************************************Button Interrupt Handler**************************************
 * Interrupt is triggered on falling (button pressed) and rising (button released) edges. On release the
 * value of timer 3 is checked to see if the time elapsed makes the press a short or long press
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80fb      	strh	r3, [r7, #6]
	uint16_t tim_val = __HAL_TIM_GET_COUNTER(&htim3);
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	81fb      	strh	r3, [r7, #14]
	uint8_t button_state = NO_PRESS;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	737b      	strb	r3, [r7, #13]

	if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1) && (tim_val > 0)) {
 8001d8e:	2102      	movs	r1, #2
 8001d90:	4815      	ldr	r0, [pc, #84]	; (8001de8 <HAL_GPIO_EXTI_Callback+0x70>)
 8001d92:	f001 fef7 	bl	8003b84 <HAL_GPIO_ReadPin>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d11b      	bne.n	8001dd4 <HAL_GPIO_EXTI_Callback+0x5c>
 8001d9c:	89fb      	ldrh	r3, [r7, #14]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d018      	beq.n	8001dd4 <HAL_GPIO_EXTI_Callback+0x5c>
		HAL_TIM_Base_Stop(&htim3);
 8001da2:	4810      	ldr	r0, [pc, #64]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001da4:	f005 fb04 	bl	80073b0 <HAL_TIM_Base_Stop>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2200      	movs	r2, #0
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24

		if (tim_val > LONG_PRESS_THRESH) {
 8001db0:	89fb      	ldrh	r3, [r7, #14]
 8001db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001db6:	d902      	bls.n	8001dbe <HAL_GPIO_EXTI_Callback+0x46>
			button_state = LONG_PRESS;
 8001db8:	2301      	movs	r3, #1
 8001dba:	737b      	strb	r3, [r7, #13]
 8001dbc:	e001      	b.n	8001dc2 <HAL_GPIO_EXTI_Callback+0x4a>
		} else {
			button_state = SHORT_PRESS;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	737b      	strb	r3, [r7, #13]
		}
		xQueueSendFromISR(UserInputHandle, &button_state, 0);
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_GPIO_EXTI_Callback+0x74>)
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	f107 010d 	add.w	r1, r7, #13
 8001dca:	2300      	movs	r3, #0
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f00a fb93 	bl	800c4f8 <xQueueGenericSendFromISR>
 8001dd2:	e003      	b.n	8001ddc <HAL_GPIO_EXTI_Callback+0x64>
	} else {
		HAL_TIM_Base_Start(&htim3);
 8001dd4:	4803      	ldr	r0, [pc, #12]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001dd6:	f005 fa91 	bl	80072fc <HAL_TIM_Base_Start>
	}
}
 8001dda:	bf00      	nop
 8001ddc:	bf00      	nop
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200007f4 	.word	0x200007f4
 8001de8:	40020000 	.word	0x40020000
 8001dec:	20000860 	.word	0x20000860

08001df0 <BUZZ>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void BUZZ(void){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001df4:	2108      	movs	r1, #8
 8001df6:	4806      	ldr	r0, [pc, #24]	; (8001e10 <BUZZ+0x20>)
 8001df8:	f005 fbbe 	bl	8007578 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 8001dfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e00:	f001 fc36 	bl	8003670 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001e04:	2108      	movs	r1, #8
 8001e06:	4802      	ldr	r0, [pc, #8]	; (8001e10 <BUZZ+0x20>)
 8001e08:	f005 fc66 	bl	80076d8 <HAL_TIM_PWM_Stop>
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	200007ac 	.word	0x200007ac

08001e14 <write_card>:

void write_card(Card* towrite) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	OLED_Clear();
 8001e1c:	f7ff f851 	bl	8000ec2 <OLED_Clear>
	MFRC_ANTON();
 8001e20:	f7fe fc58 	bl	80006d4 <MFRC_ANTON>
	OLED_PrintCent(2, "Writing...", NORMAL);
 8001e24:	2200      	movs	r2, #0
 8001e26:	4923      	ldr	r1, [pc, #140]	; (8001eb4 <write_card+0xa0>)
 8001e28:	2002      	movs	r0, #2
 8001e2a:	f7ff fa26 	bl	800127a <OLED_PrintCent>
	if (UL_writecard(towrite) == PCD_NO_PICC) {
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7fe ff68 	bl	8000d04 <UL_writecard>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d118      	bne.n	8001e6c <write_card+0x58>
		OLED_PrintCent(4, "ERROR: Couldn't find", NORMAL);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	491e      	ldr	r1, [pc, #120]	; (8001eb8 <write_card+0xa4>)
 8001e3e:	2004      	movs	r0, #4
 8001e40:	f7ff fa1b 	bl	800127a <OLED_PrintCent>
		OLED_PrintCent(6, "Card", NORMAL);
 8001e44:	2200      	movs	r2, #0
 8001e46:	491d      	ldr	r1, [pc, #116]	; (8001ebc <write_card+0xa8>)
 8001e48:	2006      	movs	r0, #6
 8001e4a:	f7ff fa16 	bl	800127a <OLED_PrintCent>
		MFRC_ANTOFF();
 8001e4e:	f7fe fc7b 	bl	8000748 <MFRC_ANTOFF>
		osDelay(2000);
 8001e52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e56:	f009 ff9c 	bl	800bd92 <osDelay>
		vTaskResume(HomeHandle);
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <write_card+0xac>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f00b f8b2 	bl	800cfc8 <vTaskResume>
		vTaskSuspend(NULL);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f00b f807 	bl	800ce78 <vTaskSuspend>
		MFRC_ANTOFF();
		osDelay(1000);
		vTaskResume(HomeHandle);
		vTaskSuspend(NULL);
	}
}
 8001e6a:	e01f      	b.n	8001eac <write_card+0x98>
		MFRC_HALTA(); //Deselect card
 8001e6c:	f7fe fd48 	bl	8000900 <MFRC_HALTA>
		OLED_PrintCent(4,"Verifying...", NORMAL);
 8001e70:	2200      	movs	r2, #0
 8001e72:	4914      	ldr	r1, [pc, #80]	; (8001ec4 <write_card+0xb0>)
 8001e74:	2004      	movs	r0, #4
 8001e76:	f7ff fa00 	bl	800127a <OLED_PrintCent>
		if (UL_verify(towrite) == PCD_OK) {
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7fe ffcc 	bl	8000e18 <UL_verify>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2bcc      	cmp	r3, #204	; 0xcc
 8001e84:	d104      	bne.n	8001e90 <write_card+0x7c>
			OLED_PrintCent(6, "Write verified :)", NORMAL);
 8001e86:	2200      	movs	r2, #0
 8001e88:	490f      	ldr	r1, [pc, #60]	; (8001ec8 <write_card+0xb4>)
 8001e8a:	2006      	movs	r0, #6
 8001e8c:	f7ff f9f5 	bl	800127a <OLED_PrintCent>
		MFRC_ANTOFF();
 8001e90:	f7fe fc5a 	bl	8000748 <MFRC_ANTOFF>
		osDelay(1000);
 8001e94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e98:	f009 ff7b 	bl	800bd92 <osDelay>
		vTaskResume(HomeHandle);
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <write_card+0xac>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f00b f891 	bl	800cfc8 <vTaskResume>
		vTaskSuspend(NULL);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f00a ffe6 	bl	800ce78 <vTaskSuspend>
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	0800fe88 	.word	0x0800fe88
 8001eb8:	0800fe94 	.word	0x0800fe94
 8001ebc:	0800feac 	.word	0x0800feac
 8001ec0:	20000848 	.word	0x20000848
 8001ec4:	0800feb4 	.word	0x0800feb4
 8001ec8:	0800fec4 	.word	0x0800fec4

08001ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed0:	f001 fb8c 	bl	80035ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ed4:	f000 f8a6 	bl	8002024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ed8:	f000 fa6e 	bl	80023b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001edc:	f000 f90c 	bl	80020f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001ee0:	f000 f938 	bl	8002154 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001ee4:	f000 f96e 	bl	80021c4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001ee8:	f000 f9a2 	bl	8002230 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001eec:	f000 fa16 	bl	800231c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ef0:	f009 fe72 	bl	800bbd8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(Card*), &UidtoFound_attributes);
 8001ef4:	4a2d      	ldr	r2, [pc, #180]	; (8001fac <main+0xe0>)
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f009 ff65 	bl	800bdc8 <osMessageQueueNew>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4a2b      	ldr	r2, [pc, #172]	; (8001fb0 <main+0xe4>)
 8001f02:	6013      	str	r3, [r2, #0]

  /* creation of UserInput */
  UserInputHandle = osMessageQueueNew (1, sizeof(uint8_t), &UserInput_attributes);
 8001f04:	4a2b      	ldr	r2, [pc, #172]	; (8001fb4 <main+0xe8>)
 8001f06:	2101      	movs	r1, #1
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f009 ff5d 	bl	800bdc8 <osMessageQueueNew>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4a29      	ldr	r2, [pc, #164]	; (8001fb8 <main+0xec>)
 8001f12:	6013      	str	r3, [r2, #0]

  /* creation of FileEntry */
  FileEntryHandle = osMessageQueueNew (1, sizeof(uint16_t), &FileEntry_attributes);
 8001f14:	4a29      	ldr	r2, [pc, #164]	; (8001fbc <main+0xf0>)
 8001f16:	2102      	movs	r1, #2
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f009 ff55 	bl	800bdc8 <osMessageQueueNew>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4a27      	ldr	r2, [pc, #156]	; (8001fc0 <main+0xf4>)
 8001f22:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 8001f24:	4a27      	ldr	r2, [pc, #156]	; (8001fc4 <main+0xf8>)
 8001f26:	2100      	movs	r1, #0
 8001f28:	4827      	ldr	r0, [pc, #156]	; (8001fc8 <main+0xfc>)
 8001f2a:	f009 fe9f 	bl	800bc6c <osThreadNew>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4a26      	ldr	r2, [pc, #152]	; (8001fcc <main+0x100>)
 8001f32:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 8001f34:	4a26      	ldr	r2, [pc, #152]	; (8001fd0 <main+0x104>)
 8001f36:	2100      	movs	r1, #0
 8001f38:	4826      	ldr	r0, [pc, #152]	; (8001fd4 <main+0x108>)
 8001f3a:	f009 fe97 	bl	800bc6c <osThreadNew>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <main+0x10c>)
 8001f42:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 8001f44:	4a25      	ldr	r2, [pc, #148]	; (8001fdc <main+0x110>)
 8001f46:	2100      	movs	r1, #0
 8001f48:	4825      	ldr	r0, [pc, #148]	; (8001fe0 <main+0x114>)
 8001f4a:	f009 fe8f 	bl	800bc6c <osThreadNew>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4a24      	ldr	r2, [pc, #144]	; (8001fe4 <main+0x118>)
 8001f52:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 8001f54:	4a24      	ldr	r2, [pc, #144]	; (8001fe8 <main+0x11c>)
 8001f56:	2100      	movs	r1, #0
 8001f58:	4824      	ldr	r0, [pc, #144]	; (8001fec <main+0x120>)
 8001f5a:	f009 fe87 	bl	800bc6c <osThreadNew>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4a23      	ldr	r2, [pc, #140]	; (8001ff0 <main+0x124>)
 8001f62:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 8001f64:	4a23      	ldr	r2, [pc, #140]	; (8001ff4 <main+0x128>)
 8001f66:	2100      	movs	r1, #0
 8001f68:	4823      	ldr	r0, [pc, #140]	; (8001ff8 <main+0x12c>)
 8001f6a:	f009 fe7f 	bl	800bc6c <osThreadNew>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4a22      	ldr	r2, [pc, #136]	; (8001ffc <main+0x130>)
 8001f72:	6013      	str	r3, [r2, #0]

  /* creation of ShowFiles */
  ShowFilesHandle = osThreadNew(StartShowFiles, NULL, &ShowFiles_attributes);
 8001f74:	4a22      	ldr	r2, [pc, #136]	; (8002000 <main+0x134>)
 8001f76:	2100      	movs	r1, #0
 8001f78:	4822      	ldr	r0, [pc, #136]	; (8002004 <main+0x138>)
 8001f7a:	f009 fe77 	bl	800bc6c <osThreadNew>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4a21      	ldr	r2, [pc, #132]	; (8002008 <main+0x13c>)
 8001f82:	6013      	str	r3, [r2, #0]

  /* creation of ShowFileData */
  ShowFileDataHandle = osThreadNew(StartShowFileData, NULL, &ShowFileData_attributes);
 8001f84:	4a21      	ldr	r2, [pc, #132]	; (800200c <main+0x140>)
 8001f86:	2100      	movs	r1, #0
 8001f88:	4821      	ldr	r0, [pc, #132]	; (8002010 <main+0x144>)
 8001f8a:	f009 fe6f 	bl	800bc6c <osThreadNew>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4a20      	ldr	r2, [pc, #128]	; (8002014 <main+0x148>)
 8001f92:	6013      	str	r3, [r2, #0]

  /* creation of Clone */
  CloneHandle = osThreadNew(StartClone, NULL, &Clone_attributes);
 8001f94:	4a20      	ldr	r2, [pc, #128]	; (8002018 <main+0x14c>)
 8001f96:	2100      	movs	r1, #0
 8001f98:	4820      	ldr	r0, [pc, #128]	; (800201c <main+0x150>)
 8001f9a:	f009 fe67 	bl	800bc6c <osThreadNew>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4a1f      	ldr	r2, [pc, #124]	; (8002020 <main+0x154>)
 8001fa2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001fa4:	f009 fe3c 	bl	800bc20 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <main+0xdc>
 8001faa:	bf00      	nop
 8001fac:	080103e4 	.word	0x080103e4
 8001fb0:	2000085c 	.word	0x2000085c
 8001fb4:	080103fc 	.word	0x080103fc
 8001fb8:	20000860 	.word	0x20000860
 8001fbc:	08010414 	.word	0x08010414
 8001fc0:	20000864 	.word	0x20000864
 8001fc4:	080102c4 	.word	0x080102c4
 8001fc8:	080024b1 	.word	0x080024b1
 8001fcc:	2000083c 	.word	0x2000083c
 8001fd0:	080102e8 	.word	0x080102e8
 8001fd4:	080025f9 	.word	0x080025f9
 8001fd8:	20000840 	.word	0x20000840
 8001fdc:	0801030c 	.word	0x0801030c
 8001fe0:	08002689 	.word	0x08002689
 8001fe4:	20000844 	.word	0x20000844
 8001fe8:	08010330 	.word	0x08010330
 8001fec:	08002729 	.word	0x08002729
 8001ff0:	20000848 	.word	0x20000848
 8001ff4:	08010354 	.word	0x08010354
 8001ff8:	080027fd 	.word	0x080027fd
 8001ffc:	2000084c 	.word	0x2000084c
 8002000:	08010378 	.word	0x08010378
 8002004:	080028e5 	.word	0x080028e5
 8002008:	20000850 	.word	0x20000850
 800200c:	0801039c 	.word	0x0801039c
 8002010:	080029bd 	.word	0x080029bd
 8002014:	20000854 	.word	0x20000854
 8002018:	080103c0 	.word	0x080103c0
 800201c:	08002a61 	.word	0x08002a61
 8002020:	20000858 	.word	0x20000858

08002024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b094      	sub	sp, #80	; 0x50
 8002028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800202a:	f107 0320 	add.w	r3, r7, #32
 800202e:	2230      	movs	r2, #48	; 0x30
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f00d fa04 	bl	800f440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <SystemClock_Config+0xcc>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	4a27      	ldr	r2, [pc, #156]	; (80020f0 <SystemClock_Config+0xcc>)
 8002052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002056:	6413      	str	r3, [r2, #64]	; 0x40
 8002058:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <SystemClock_Config+0xcc>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002064:	2300      	movs	r3, #0
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <SystemClock_Config+0xd0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002070:	4a20      	ldr	r2, [pc, #128]	; (80020f4 <SystemClock_Config+0xd0>)
 8002072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <SystemClock_Config+0xd0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002084:	2301      	movs	r3, #1
 8002086:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002088:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800208e:	2302      	movs	r3, #2
 8002090:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002092:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002096:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002098:	2308      	movs	r3, #8
 800209a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800209c:	23a8      	movs	r3, #168	; 0xa8
 800209e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80020a0:	2304      	movs	r3, #4
 80020a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80020a4:	2307      	movs	r3, #7
 80020a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020a8:	f107 0320 	add.w	r3, r7, #32
 80020ac:	4618      	mov	r0, r3
 80020ae:	f003 ffef 	bl	8006090 <HAL_RCC_OscConfig>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80020b8:	f000 fd38 	bl	8002b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020bc:	230f      	movs	r3, #15
 80020be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020c0:	2302      	movs	r3, #2
 80020c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	2102      	movs	r1, #2
 80020d8:	4618      	mov	r0, r3
 80020da:	f004 fa51 	bl	8006580 <HAL_RCC_ClockConfig>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80020e4:	f000 fd22 	bl	8002b2c <Error_Handler>
  }
}
 80020e8:	bf00      	nop
 80020ea:	3750      	adds	r7, #80	; 0x50
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40007000 	.word	0x40007000

080020f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <MX_I2C1_Init+0x50>)
 80020fe:	4a13      	ldr	r2, [pc, #76]	; (800214c <MX_I2C1_Init+0x54>)
 8002100:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002102:	4b11      	ldr	r3, [pc, #68]	; (8002148 <MX_I2C1_Init+0x50>)
 8002104:	4a12      	ldr	r2, [pc, #72]	; (8002150 <MX_I2C1_Init+0x58>)
 8002106:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002108:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <MX_I2C1_Init+0x50>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <MX_I2C1_Init+0x50>)
 8002110:	2200      	movs	r2, #0
 8002112:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <MX_I2C1_Init+0x50>)
 8002116:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800211a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800211c:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <MX_I2C1_Init+0x50>)
 800211e:	2200      	movs	r2, #0
 8002120:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <MX_I2C1_Init+0x50>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002128:	4b07      	ldr	r3, [pc, #28]	; (8002148 <MX_I2C1_Init+0x50>)
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <MX_I2C1_Init+0x50>)
 8002130:	2200      	movs	r2, #0
 8002132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002134:	4804      	ldr	r0, [pc, #16]	; (8002148 <MX_I2C1_Init+0x50>)
 8002136:	f001 fd6f 	bl	8003c18 <HAL_I2C_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002140:	f000 fcf4 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}
 8002148:	200006a8 	.word	0x200006a8
 800214c:	40005400 	.word	0x40005400
 8002150:	000186a0 	.word	0x000186a0

08002154 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002158:	4b18      	ldr	r3, [pc, #96]	; (80021bc <MX_SPI1_Init+0x68>)
 800215a:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <MX_SPI1_Init+0x6c>)
 800215c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800215e:	4b17      	ldr	r3, [pc, #92]	; (80021bc <MX_SPI1_Init+0x68>)
 8002160:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002164:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <MX_SPI1_Init+0x68>)
 8002168:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800216c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <MX_SPI1_Init+0x68>)
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <MX_SPI1_Init+0x68>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <MX_SPI1_Init+0x68>)
 800217c:	2200      	movs	r2, #0
 800217e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002180:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <MX_SPI1_Init+0x68>)
 8002182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002186:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <MX_SPI1_Init+0x68>)
 800218a:	2218      	movs	r2, #24
 800218c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800218e:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <MX_SPI1_Init+0x68>)
 8002190:	2200      	movs	r2, #0
 8002192:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <MX_SPI1_Init+0x68>)
 8002196:	2200      	movs	r2, #0
 8002198:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <MX_SPI1_Init+0x68>)
 800219c:	2200      	movs	r2, #0
 800219e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <MX_SPI1_Init+0x68>)
 80021a2:	220a      	movs	r2, #10
 80021a4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021a6:	4805      	ldr	r0, [pc, #20]	; (80021bc <MX_SPI1_Init+0x68>)
 80021a8:	f004 fc26 	bl	80069f8 <HAL_SPI_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80021b2:	f000 fcbb 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200006fc 	.word	0x200006fc
 80021c0:	40013000 	.word	0x40013000

080021c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <MX_SPI2_Init+0x64>)
 80021ca:	4a18      	ldr	r2, [pc, #96]	; (800222c <MX_SPI2_Init+0x68>)
 80021cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <MX_SPI2_Init+0x64>)
 80021d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021d6:	4b14      	ldr	r3, [pc, #80]	; (8002228 <MX_SPI2_Init+0x64>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <MX_SPI2_Init+0x64>)
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <MX_SPI2_Init+0x64>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021e8:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <MX_SPI2_Init+0x64>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <MX_SPI2_Init+0x64>)
 80021f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <MX_SPI2_Init+0x64>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <MX_SPI2_Init+0x64>)
 80021fe:	2200      	movs	r2, #0
 8002200:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <MX_SPI2_Init+0x64>)
 8002204:	2200      	movs	r2, #0
 8002206:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002208:	4b07      	ldr	r3, [pc, #28]	; (8002228 <MX_SPI2_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <MX_SPI2_Init+0x64>)
 8002210:	220a      	movs	r2, #10
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002214:	4804      	ldr	r0, [pc, #16]	; (8002228 <MX_SPI2_Init+0x64>)
 8002216:	f004 fbef 	bl	80069f8 <HAL_SPI_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002220:	f000 fc84 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000754 	.word	0x20000754
 800222c:	40003800 	.word	0x40003800

08002230 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08e      	sub	sp, #56	; 0x38
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	609a      	str	r2, [r3, #8]
 8002242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002244:	f107 0320 	add.w	r3, r7, #32
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
 800225c:	615a      	str	r2, [r3, #20]
 800225e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002260:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <MX_TIM2_Init+0xe8>)
 8002262:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002266:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8002268:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <MX_TIM2_Init+0xe8>)
 800226a:	f240 12a3 	movw	r2, #419	; 0x1a3
 800226e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002270:	4b29      	ldr	r3, [pc, #164]	; (8002318 <MX_TIM2_Init+0xe8>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8002276:	4b28      	ldr	r3, [pc, #160]	; (8002318 <MX_TIM2_Init+0xe8>)
 8002278:	2231      	movs	r2, #49	; 0x31
 800227a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800227c:	4b26      	ldr	r3, [pc, #152]	; (8002318 <MX_TIM2_Init+0xe8>)
 800227e:	2200      	movs	r2, #0
 8002280:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002282:	4b25      	ldr	r3, [pc, #148]	; (8002318 <MX_TIM2_Init+0xe8>)
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002288:	4823      	ldr	r0, [pc, #140]	; (8002318 <MX_TIM2_Init+0xe8>)
 800228a:	f004 ffe7 	bl	800725c <HAL_TIM_Base_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002294:	f000 fc4a 	bl	8002b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800229e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022a2:	4619      	mov	r1, r3
 80022a4:	481c      	ldr	r0, [pc, #112]	; (8002318 <MX_TIM2_Init+0xe8>)
 80022a6:	f005 fc45 	bl	8007b34 <HAL_TIM_ConfigClockSource>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80022b0:	f000 fc3c 	bl	8002b2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022b4:	4818      	ldr	r0, [pc, #96]	; (8002318 <MX_TIM2_Init+0xe8>)
 80022b6:	f005 f905 	bl	80074c4 <HAL_TIM_PWM_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80022c0:	f000 fc34 	bl	8002b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c4:	2300      	movs	r3, #0
 80022c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022cc:	f107 0320 	add.w	r3, r7, #32
 80022d0:	4619      	mov	r1, r3
 80022d2:	4811      	ldr	r0, [pc, #68]	; (8002318 <MX_TIM2_Init+0xe8>)
 80022d4:	f005 ffea 	bl	80082ac <HAL_TIMEx_MasterConfigSynchronization>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80022de:	f000 fc25 	bl	8002b2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022e2:	2360      	movs	r3, #96	; 0x60
 80022e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 80022e6:	2318      	movs	r3, #24
 80022e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	2208      	movs	r2, #8
 80022f6:	4619      	mov	r1, r3
 80022f8:	4807      	ldr	r0, [pc, #28]	; (8002318 <MX_TIM2_Init+0xe8>)
 80022fa:	f005 fb59 	bl	80079b0 <HAL_TIM_PWM_ConfigChannel>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002304:	f000 fc12 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002308:	4803      	ldr	r0, [pc, #12]	; (8002318 <MX_TIM2_Init+0xe8>)
 800230a:	f001 f817 	bl	800333c <HAL_TIM_MspPostInit>

}
 800230e:	bf00      	nop
 8002310:	3738      	adds	r7, #56	; 0x38
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200007ac 	.word	0x200007ac

0800231c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002322:	f107 0308 	add.w	r3, r7, #8
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002330:	463b      	mov	r3, r7
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <MX_TIM3_Init+0x94>)
 800233a:	4a1e      	ldr	r2, [pc, #120]	; (80023b4 <MX_TIM3_Init+0x98>)
 800233c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 800233e:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <MX_TIM3_Init+0x94>)
 8002340:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002344:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <MX_TIM3_Init+0x94>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800234c:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <MX_TIM3_Init+0x94>)
 800234e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002352:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <MX_TIM3_Init+0x94>)
 8002356:	2200      	movs	r2, #0
 8002358:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <MX_TIM3_Init+0x94>)
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002360:	4813      	ldr	r0, [pc, #76]	; (80023b0 <MX_TIM3_Init+0x94>)
 8002362:	f004 ff7b 	bl	800725c <HAL_TIM_Base_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800236c:	f000 fbde 	bl	8002b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002374:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002376:	f107 0308 	add.w	r3, r7, #8
 800237a:	4619      	mov	r1, r3
 800237c:	480c      	ldr	r0, [pc, #48]	; (80023b0 <MX_TIM3_Init+0x94>)
 800237e:	f005 fbd9 	bl	8007b34 <HAL_TIM_ConfigClockSource>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002388:	f000 fbd0 	bl	8002b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800238c:	2300      	movs	r3, #0
 800238e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002390:	2300      	movs	r3, #0
 8002392:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002394:	463b      	mov	r3, r7
 8002396:	4619      	mov	r1, r3
 8002398:	4805      	ldr	r0, [pc, #20]	; (80023b0 <MX_TIM3_Init+0x94>)
 800239a:	f005 ff87 	bl	80082ac <HAL_TIMEx_MasterConfigSynchronization>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80023a4:	f000 fbc2 	bl	8002b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023a8:	bf00      	nop
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	200007f4 	.word	0x200007f4
 80023b4:	40000400 	.word	0x40000400

080023b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	60da      	str	r2, [r3, #12]
 80023cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	4b34      	ldr	r3, [pc, #208]	; (80024a4 <MX_GPIO_Init+0xec>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a33      	ldr	r2, [pc, #204]	; (80024a4 <MX_GPIO_Init+0xec>)
 80023d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b31      	ldr	r3, [pc, #196]	; (80024a4 <MX_GPIO_Init+0xec>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	4b2d      	ldr	r3, [pc, #180]	; (80024a4 <MX_GPIO_Init+0xec>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a2c      	ldr	r2, [pc, #176]	; (80024a4 <MX_GPIO_Init+0xec>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <MX_GPIO_Init+0xec>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	603b      	str	r3, [r7, #0]
 800240a:	4b26      	ldr	r3, [pc, #152]	; (80024a4 <MX_GPIO_Init+0xec>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4a25      	ldr	r2, [pc, #148]	; (80024a4 <MX_GPIO_Init+0xec>)
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <MX_GPIO_Init+0xec>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 8002422:	2200      	movs	r2, #0
 8002424:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002428:	481f      	ldr	r0, [pc, #124]	; (80024a8 <MX_GPIO_Init+0xf0>)
 800242a:	f001 fbc3 	bl	8003bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 800242e:	2200      	movs	r2, #0
 8002430:	2122      	movs	r1, #34	; 0x22
 8002432:	481e      	ldr	r0, [pc, #120]	; (80024ac <MX_GPIO_Init+0xf4>)
 8002434:	f001 fbbe 	bl	8003bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002438:	2302      	movs	r3, #2
 800243a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800243c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002446:	f107 030c 	add.w	r3, r7, #12
 800244a:	4619      	mov	r1, r3
 800244c:	4816      	ldr	r0, [pc, #88]	; (80024a8 <MX_GPIO_Init+0xf0>)
 800244e:	f001 fa15 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 8002452:	f44f 738c 	mov.w	r3, #280	; 0x118
 8002456:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002458:	2301      	movs	r3, #1
 800245a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002460:	2300      	movs	r3, #0
 8002462:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002464:	f107 030c 	add.w	r3, r7, #12
 8002468:	4619      	mov	r1, r3
 800246a:	480f      	ldr	r0, [pc, #60]	; (80024a8 <MX_GPIO_Init+0xf0>)
 800246c:	f001 fa06 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 8002470:	2322      	movs	r3, #34	; 0x22
 8002472:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002474:	2301      	movs	r3, #1
 8002476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247c:	2300      	movs	r3, #0
 800247e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002480:	f107 030c 	add.w	r3, r7, #12
 8002484:	4619      	mov	r1, r3
 8002486:	4809      	ldr	r0, [pc, #36]	; (80024ac <MX_GPIO_Init+0xf4>)
 8002488:	f001 f9f8 	bl	800387c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800248c:	2200      	movs	r2, #0
 800248e:	2105      	movs	r1, #5
 8002490:	2007      	movs	r0, #7
 8002492:	f001 f9c9 	bl	8003828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002496:	2007      	movs	r0, #7
 8002498:	f001 f9e2 	bl	8003860 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800249c:	bf00      	nop
 800249e:	3720      	adds	r7, #32
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020000 	.word	0x40020000
 80024ac:	40020400 	.word	0x40020400

080024b0 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 80024b0:	b5b0      	push	{r4, r5, r7, lr}
 80024b2:	b09c      	sub	sp, #112	; 0x70
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80024b8:	f00c fa90 	bl	800e9dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(ReadCardHandle);
 80024bc:	4b40      	ldr	r3, [pc, #256]	; (80025c0 <Start_Init+0x110>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f00a fcd9 	bl	800ce78 <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 80024c6:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <Start_Init+0x114>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f00a fcd4 	bl	800ce78 <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 80024d0:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <Start_Init+0x118>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f00a fccf 	bl	800ce78 <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 80024da:	4b3c      	ldr	r3, [pc, #240]	; (80025cc <Start_Init+0x11c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f00a fcca 	bl	800ce78 <vTaskSuspend>
    vTaskSuspend(ShowFilesHandle);
 80024e4:	4b3a      	ldr	r3, [pc, #232]	; (80025d0 <Start_Init+0x120>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f00a fcc5 	bl	800ce78 <vTaskSuspend>
    vTaskSuspend(ShowFileDataHandle);
 80024ee:	4b39      	ldr	r3, [pc, #228]	; (80025d4 <Start_Init+0x124>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f00a fcc0 	bl	800ce78 <vTaskSuspend>
    vTaskSuspend(CloneHandle);
 80024f8:	4b37      	ldr	r3, [pc, #220]	; (80025d8 <Start_Init+0x128>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f00a fcbb 	bl	800ce78 <vTaskSuspend>

    MFRC_INIT();
 8002502:	f7fe f969 	bl	80007d8 <MFRC_INIT>
    MFRC_ANTOFF();
 8002506:	f7fe f91f 	bl	8000748 <MFRC_ANTOFF>
    OLED_INIT();
 800250a:	f7fe fd99 	bl	8001040 <OLED_INIT>
    OLED_Print(TC);
 800250e:	4833      	ldr	r0, [pc, #204]	; (80025dc <Start_Init+0x12c>)
 8002510:	f7fe fed7 	bl	80012c2 <OLED_Print>
    MEM_INIT();
 8002514:	f7ff fa6e 	bl	80019f4 <MEM_INIT>
    memory_reset();
 8002518:	f7ff fc17 	bl	8001d4a <memory_reset>

    uint8_t fake_contents[64] = {0x04, 0x41, 0xBF, 0x72,
 800251c:	4b30      	ldr	r3, [pc, #192]	; (80025e0 <Start_Init+0x130>)
 800251e:	f107 0408 	add.w	r4, r7, #8
 8002522:	461d      	mov	r5, r3
 8002524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800252a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800252c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800252e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002530:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    							0x00, 0x01, 0x00, 0x01,
    							0x00, 0x01, 0x00, 0x01,
    							0x00, 0x00, 0x00, 0x00,
    							0x00, 0x00, 0x00, 0x00,
    							0x00, 0x00, 0x00, 0x63};
    uint8_t uid[7] = {0x04, 0x41, 0xBF, 0x72, 0x1A, 0x06, 0x6C};
 8002538:	4a2a      	ldr	r2, [pc, #168]	; (80025e4 <Start_Init+0x134>)
 800253a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800253e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002542:	6018      	str	r0, [r3, #0]
 8002544:	3304      	adds	r3, #4
 8002546:	8019      	strh	r1, [r3, #0]
 8002548:	3302      	adds	r3, #2
 800254a:	0c0a      	lsrs	r2, r1, #16
 800254c:	701a      	strb	r2, [r3, #0]

    Card fake_card = {
 800254e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002554:	2307      	movs	r3, #7
 8002556:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800255a:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <Start_Init+0x138>)
 800255c:	657b      	str	r3, [r7, #84]	; 0x54
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <Start_Init+0x13c>)
 8002560:	65bb      	str	r3, [r7, #88]	; 0x58
 8002562:	2300      	movs	r3, #0
 8002564:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8002568:	f107 0308 	add.w	r3, r7, #8
 800256c:	663b      	str	r3, [r7, #96]	; 0x60
 800256e:	2340      	movs	r3, #64	; 0x40
 8002570:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    	.uidsize = 7,
		.name = "fake",
		.type = "MIFARE Ultralight",
		.read_protected = 0
    };
    enter_card(&fake_card, 0);
 8002574:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fadb 	bl	8002b36 <enter_card>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) != 0);
 8002580:	bf00      	nop
 8002582:	2102      	movs	r1, #2
 8002584:	481a      	ldr	r0, [pc, #104]	; (80025f0 <Start_Init+0x140>)
 8002586:	f001 fafd 	bl	8003b84 <HAL_GPIO_ReadPin>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f8      	bne.n	8002582 <Start_Init+0xd2>
    osDelay(10);
 8002590:	200a      	movs	r0, #10
 8002592:	f009 fbfe 	bl	800bd92 <osDelay>
    uint8_t clear = NO_PRESS;
 8002596:	2300      	movs	r3, #0
 8002598:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    xQueueSend(UserInputHandle, &clear, 0);
 800259c:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <Start_Init+0x144>)
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 80025a4:	2300      	movs	r3, #0
 80025a6:	2200      	movs	r2, #0
 80025a8:	f009 fea8 	bl	800c2fc <xQueueGenericSend>
    vTaskResume(HomeHandle);
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <Start_Init+0x118>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f00a fd09 	bl	800cfc8 <vTaskResume>
    vTaskSuspend(NULL);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f00a fc5e 	bl	800ce78 <vTaskSuspend>
  {
 80025bc:	e77e      	b.n	80024bc <Start_Init+0xc>
 80025be:	bf00      	nop
 80025c0:	20000840 	.word	0x20000840
 80025c4:	20000844 	.word	0x20000844
 80025c8:	20000848 	.word	0x20000848
 80025cc:	2000084c 	.word	0x2000084c
 80025d0:	20000850 	.word	0x20000850
 80025d4:	20000854 	.word	0x20000854
 80025d8:	20000858 	.word	0x20000858
 80025dc:	20000400 	.word	0x20000400
 80025e0:	0800fef4 	.word	0x0800fef4
 80025e4:	0800ff34 	.word	0x0800ff34
 80025e8:	0800fed8 	.word	0x0800fed8
 80025ec:	0800fee0 	.word	0x0800fee0
 80025f0:	40020000 	.word	0x40020000
 80025f4:	20000860 	.word	0x20000860

080025f8 <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 8002600:	201c      	movs	r0, #28
 8002602:	f00c feff 	bl	800f404 <malloc>
 8002606:	4603      	mov	r3, r0
 8002608:	60bb      	str	r3, [r7, #8]
	read_card->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 800260a:	68bc      	ldr	r4, [r7, #8]
 800260c:	2040      	movs	r0, #64	; 0x40
 800260e:	f00c fef9 	bl	800f404 <malloc>
 8002612:	4603      	mov	r3, r0
 8002614:	6163      	str	r3, [r4, #20]
	read_card->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8002616:	68bc      	ldr	r4, [r7, #8]
 8002618:	2007      	movs	r0, #7
 800261a:	f00c fef3 	bl	800f404 <malloc>
 800261e:	4603      	mov	r3, r0
 8002620:	6023      	str	r3, [r4, #0]
	int ranonce = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	MFRC_ANTON();
 8002626:	f7fe f855 	bl	80006d4 <MFRC_ANTON>
	if (ranonce == 0){
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d106      	bne.n	800263e <StartReadCard+0x46>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 8002630:	2100      	movs	r1, #0
 8002632:	4812      	ldr	r0, [pc, #72]	; (800267c <StartReadCard+0x84>)
 8002634:	f7fe ff10 	bl	8001458 <OLED_SCREEN>
		ranonce++;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3301      	adds	r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
	}
	if(UL_readcard(read_card) == PCD_OK){
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fb29 	bl	8000c98 <UL_readcard>
 8002646:	4603      	mov	r3, r0
 8002648:	2bcc      	cmp	r3, #204	; 0xcc
 800264a:	d1ec      	bne.n	8002626 <StartReadCard+0x2e>
			BUZZ();
 800264c:	f7ff fbd0 	bl	8001df0 <BUZZ>
			MFRC_ANTOFF();
 8002650:	f7fe f87a 	bl	8000748 <MFRC_ANTOFF>
			xQueueSend(UidtoFoundHandle,&read_card,0);
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <StartReadCard+0x88>)
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	f107 0108 	add.w	r1, r7, #8
 800265c:	2300      	movs	r3, #0
 800265e:	2200      	movs	r2, #0
 8002660:	f009 fe4c 	bl	800c2fc <xQueueGenericSend>
			vTaskResume(CardFoundHandle);
 8002664:	4b07      	ldr	r3, [pc, #28]	; (8002684 <StartReadCard+0x8c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f00a fcad 	bl	800cfc8 <vTaskResume>
			ranonce = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
			vTaskSuspend(NULL);
 8002672:	2000      	movs	r0, #0
 8002674:	f00a fc00 	bl	800ce78 <vTaskSuspend>
	MFRC_ANTON();
 8002678:	e7d5      	b.n	8002626 <StartReadCard+0x2e>
 800267a:	bf00      	nop
 800267c:	080104b8 	.word	0x080104b8
 8002680:	2000085c 	.word	0x2000085c
 8002684:	2000084c 	.word	0x2000084c

08002688 <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
	uint8_t file_select_count = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	75fb      	strb	r3, [r7, #23]
	int ranonce = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	61fb      	str	r3, [r7, #28]
	Button_StateTypeDef button_state;
	Card* towrite = NULL;
 8002698:	2300      	movs	r3, #0
 800269a:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d106      	bne.n	80026b0 <StartWriteCard+0x28>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 80026a2:	2100      	movs	r1, #0
 80026a4:	481e      	ldr	r0, [pc, #120]	; (8002720 <StartWriteCard+0x98>)
 80026a6:	f7fe fed7 	bl	8001458 <OLED_SCREEN>
	  	ranonce++;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3301      	adds	r3, #1
 80026ae:	61fb      	str	r3, [r7, #28]

	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 80026b0:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <StartWriteCard+0x9c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f107 010f 	add.w	r1, r7, #15
 80026b8:	2200      	movs	r2, #0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f009 ffb8 	bl	800c630 <xQueueReceive>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d1ea      	bne.n	800269c <StartWriteCard+0x14>
		  if (button_state == SHORT_PRESS) {
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d11c      	bne.n	8002706 <StartWriteCard+0x7e>
			  if (entry_present(file_select_count) == RFS_OK) {
 80026cc:	7dfb      	ldrb	r3, [r7, #23]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fcb4 	bl	800303e <entry_present>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1df      	bne.n	800269c <StartWriteCard+0x14>
				  towrite = read_card_entry(file_select_count);
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fadc 	bl	8002c9e <read_card_entry>
 80026e6:	61b8      	str	r0, [r7, #24]
				  char* file_name = get_file_name(file_select_count);
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fcc3 	bl	8003078 <get_file_name>
 80026f2:	6138      	str	r0, [r7, #16]
				  OLED_SCRNREF(&SCRN_WriteCard, WRITE_SRC_LOC, file_name);
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	2102      	movs	r1, #2
 80026f8:	4809      	ldr	r0, [pc, #36]	; (8002720 <StartWriteCard+0x98>)
 80026fa:	f7fe fee6 	bl	80014ca <OLED_SCRNREF>
				  free(file_name);
 80026fe:	6938      	ldr	r0, [r7, #16]
 8002700:	f00c fe88 	bl	800f414 <free>
 8002704:	e7ca      	b.n	800269c <StartWriteCard+0x14>
			  }

		  } else if ((button_state == LONG_PRESS) && (towrite != NULL)) {
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d1c7      	bne.n	800269c <StartWriteCard+0x14>
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0c4      	beq.n	800269c <StartWriteCard+0x14>
			  	ranonce= 0;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
			  	write_card(towrite);
 8002716:	69b8      	ldr	r0, [r7, #24]
 8002718:	f7ff fb7c 	bl	8001e14 <write_card>
	  if (ranonce == 0){
 800271c:	e7be      	b.n	800269c <StartWriteCard+0x14>
 800271e:	bf00      	nop
 8002720:	080104e0 	.word	0x080104e0
 8002724:	20000860 	.word	0x20000860

08002728 <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint8_t select_index = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0) {
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10c      	bne.n	8002758 <StartHome+0x30>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 800273e:	2100      	movs	r1, #0
 8002740:	4828      	ldr	r0, [pc, #160]	; (80027e4 <StartHome+0xbc>)
 8002742:	f7fe fe89 	bl	8001458 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, select_index, OLED_RESTORE);
 8002746:	7afb      	ldrb	r3, [r7, #11]
 8002748:	2201      	movs	r2, #1
 800274a:	4619      	mov	r1, r3
 800274c:	4825      	ldr	r0, [pc, #148]	; (80027e4 <StartHome+0xbc>)
 800274e:	f7fe feed 	bl	800152c <OLED_SELECT>
		  ranonce++;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	3301      	adds	r3, #1
 8002756:	60fb      	str	r3, [r7, #12]
	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8002758:	4b23      	ldr	r3, [pc, #140]	; (80027e8 <StartHome+0xc0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f107 010a 	add.w	r1, r7, #10
 8002760:	2200      	movs	r2, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f009 ff64 	bl	800c630 <xQueueReceive>
 8002768:	4603      	mov	r3, r0
 800276a:	2b01      	cmp	r3, #1
 800276c:	d1e4      	bne.n	8002738 <StartHome+0x10>
		  if (button_state == SHORT_PRESS) {
 800276e:	7abb      	ldrb	r3, [r7, #10]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d107      	bne.n	8002784 <StartHome+0x5c>
			  oled_move_selection(&SCRN_Home, &select_index, OLED_RESTORE);
 8002774:	f107 030b 	add.w	r3, r7, #11
 8002778:	2201      	movs	r2, #1
 800277a:	4619      	mov	r1, r3
 800277c:	4819      	ldr	r0, [pc, #100]	; (80027e4 <StartHome+0xbc>)
 800277e:	f7ff f829 	bl	80017d4 <oled_move_selection>
 8002782:	e7d9      	b.n	8002738 <StartHome+0x10>
		  } else if (button_state == LONG_PRESS) {
 8002784:	7abb      	ldrb	r3, [r7, #10]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d1d6      	bne.n	8002738 <StartHome+0x10>
			  switch(select_index) {
 800278a:	7afb      	ldrb	r3, [r7, #11]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d823      	bhi.n	80027d8 <StartHome+0xb0>
 8002790:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <StartHome+0x70>)
 8002792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002796:	bf00      	nop
 8002798:	080027a9 	.word	0x080027a9
 800279c:	080027b5 	.word	0x080027b5
 80027a0:	080027c1 	.word	0x080027c1
 80027a4:	080027cd 	.word	0x080027cd
			  	  case 0:
			  		  vTaskResume(ReadCardHandle);
 80027a8:	4b10      	ldr	r3, [pc, #64]	; (80027ec <StartHome+0xc4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f00a fc0b 	bl	800cfc8 <vTaskResume>
			  		  break;
 80027b2:	e011      	b.n	80027d8 <StartHome+0xb0>
			  	  case 1:
			  		  vTaskResume(WriteCardHandle);
 80027b4:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <StartHome+0xc8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f00a fc05 	bl	800cfc8 <vTaskResume>
			  		  break;
 80027be:	e00b      	b.n	80027d8 <StartHome+0xb0>
			  	  case 2:
			  		  vTaskResume(ShowFilesHandle);
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <StartHome+0xcc>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f00a fbff 	bl	800cfc8 <vTaskResume>
			  		  break;
 80027ca:	e005      	b.n	80027d8 <StartHome+0xb0>
			  	  case 3:
			  		  vTaskResume(CloneHandle);
 80027cc:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <StartHome+0xd0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f00a fbf9 	bl	800cfc8 <vTaskResume>
			  		  break;
 80027d6:	bf00      	nop
			  }
			  ranonce = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
			  vTaskSuspend(NULL);
 80027dc:	2000      	movs	r0, #0
 80027de:	f00a fb4b 	bl	800ce78 <vTaskSuspend>
	  if (ranonce == 0) {
 80027e2:	e7a9      	b.n	8002738 <StartHome+0x10>
 80027e4:	080104a4 	.word	0x080104a4
 80027e8:	20000860 	.word	0x20000860
 80027ec:	20000840 	.word	0x20000840
 80027f0:	20000844 	.word	0x20000844
 80027f4:	20000850 	.word	0x20000850
 80027f8:	20000858 	.word	0x20000858

080027fc <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 80027fc:	b590      	push	{r4, r7, lr}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	uint8_t select_index = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	73fb      	strb	r3, [r7, #15]
	int ranonce = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
	Card* read_card;
  /* Infinite loop */
  for(;;)
  {

	if (ranonce == 0) {
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d130      	bne.n	8002874 <CardFoundStart+0x78>
		while(xQueueReceive(UidtoFoundHandle, &read_card, 0) != pdTRUE);
 8002812:	bf00      	nop
 8002814:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <CardFoundStart+0xd8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f107 0108 	add.w	r1, r7, #8
 800281c:	2200      	movs	r2, #0
 800281e:	4618      	mov	r0, r3
 8002820:	f009 ff06 	bl	800c630 <xQueueReceive>
 8002824:	4603      	mov	r3, r0
 8002826:	2b01      	cmp	r3, #1
 8002828:	d1f4      	bne.n	8002814 <CardFoundStart+0x18>
		char* uid_str = uid_tostring(read_card->uid, read_card->uidsize);
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	791b      	ldrb	r3, [r3, #4]
 8002832:	4619      	mov	r1, r3
 8002834:	4610      	mov	r0, r2
 8002836:	f7fe faa5 	bl	8000d84 <uid_tostring>
 800283a:	6138      	str	r0, [r7, #16]
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 800283c:	2100      	movs	r1, #0
 800283e:	4826      	ldr	r0, [pc, #152]	; (80028d8 <CardFoundStart+0xdc>)
 8002840:	f7fe fe0a 	bl	8001458 <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_UID_LOC, uid_str);
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	2101      	movs	r1, #1
 8002848:	4823      	ldr	r0, [pc, #140]	; (80028d8 <CardFoundStart+0xdc>)
 800284a:	f7fe fe3e 	bl	80014ca <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_CARDTYPE_LOC, read_card->type);
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	461a      	mov	r2, r3
 8002854:	2102      	movs	r1, #2
 8002856:	4820      	ldr	r0, [pc, #128]	; (80028d8 <CardFoundStart+0xdc>)
 8002858:	f7fe fe37 	bl	80014ca <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, select_index, OLED_NORESTORE);
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	2200      	movs	r2, #0
 8002860:	4619      	mov	r1, r3
 8002862:	481d      	ldr	r0, [pc, #116]	; (80028d8 <CardFoundStart+0xdc>)
 8002864:	f7fe fe62 	bl	800152c <OLED_SELECT>
		ranonce++;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	3301      	adds	r3, #1
 800286c:	617b      	str	r3, [r7, #20]
		free(uid_str);
 800286e:	6938      	ldr	r0, [r7, #16]
 8002870:	f00c fdd0 	bl	800f414 <free>
	}

 	if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8002874:	4b19      	ldr	r3, [pc, #100]	; (80028dc <CardFoundStart+0xe0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f107 010e 	add.w	r1, r7, #14
 800287c:	2200      	movs	r2, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f009 fed6 	bl	800c630 <xQueueReceive>
 8002884:	4603      	mov	r3, r0
 8002886:	2b01      	cmp	r3, #1
 8002888:	d1c0      	bne.n	800280c <CardFoundStart+0x10>
 		if (button_state == SHORT_PRESS) {
 800288a:	7bbb      	ldrb	r3, [r7, #14]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d107      	bne.n	80028a0 <CardFoundStart+0xa4>
 			oled_move_selection(&SCRN_CardFound, &select_index, OLED_NORESTORE);
 8002890:	f107 030f 	add.w	r3, r7, #15
 8002894:	2200      	movs	r2, #0
 8002896:	4619      	mov	r1, r3
 8002898:	480f      	ldr	r0, [pc, #60]	; (80028d8 <CardFoundStart+0xdc>)
 800289a:	f7fe ff9b 	bl	80017d4 <oled_move_selection>
 800289e:	e7b5      	b.n	800280c <CardFoundStart+0x10>
 		} else if (button_state == LONG_PRESS) {
 80028a0:	7bbb      	ldrb	r3, [r7, #14]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d1b2      	bne.n	800280c <CardFoundStart+0x10>
 			if (select_index == 0) {
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d108      	bne.n	80028be <CardFoundStart+0xc2>
 				enter_card(read_card, mem_find_free_block());
 80028ac:	68bc      	ldr	r4, [r7, #8]
 80028ae:	f7ff fa25 	bl	8001cfc <mem_find_free_block>
 80028b2:	4603      	mov	r3, r0
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	4619      	mov	r1, r3
 80028b8:	4620      	mov	r0, r4
 80028ba:	f000 f93c 	bl	8002b36 <enter_card>
 			 }
 			vTaskResume(HomeHandle);
 80028be:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <CardFoundStart+0xe4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f00a fb80 	bl	800cfc8 <vTaskResume>
 			ranonce = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
 			vTaskSuspend(NULL);
 80028cc:	2000      	movs	r0, #0
 80028ce:	f00a fad3 	bl	800ce78 <vTaskSuspend>
	if (ranonce == 0) {
 80028d2:	e79b      	b.n	800280c <CardFoundStart+0x10>
 80028d4:	2000085c 	.word	0x2000085c
 80028d8:	080104cc 	.word	0x080104cc
 80028dc:	20000860 	.word	0x20000860
 80028e0:	20000848 	.word	0x20000848

080028e4 <StartShowFiles>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFiles */
void StartShowFiles(void *argument)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFiles */
	uint8_t select_index = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
	/* Infinite loop */
  for(;;)
  {

	  if (ranonce == 0) {
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d110      	bne.n	800291c <StartShowFiles+0x38>
		  OLED_SCREEN(&SCRN_ShowFiles, NORMAL);
 80028fa:	2100      	movs	r1, #0
 80028fc:	482a      	ldr	r0, [pc, #168]	; (80029a8 <StartShowFiles+0xc4>)
 80028fe:	f7fe fdab 	bl	8001458 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_ShowFiles, select_index, OLED_RESTORE);
 8002902:	7afb      	ldrb	r3, [r7, #11]
 8002904:	2201      	movs	r2, #1
 8002906:	4619      	mov	r1, r3
 8002908:	4827      	ldr	r0, [pc, #156]	; (80029a8 <StartShowFiles+0xc4>)
 800290a:	f7fe fe0f 	bl	800152c <OLED_SELECT>
		  OLED_display_files(&SCRN_ShowFiles, 0);
 800290e:	2100      	movs	r1, #0
 8002910:	4825      	ldr	r0, [pc, #148]	; (80029a8 <StartShowFiles+0xc4>)
 8002912:	f7fe fe81 	bl	8001618 <OLED_display_files>
		  ranonce++;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3301      	adds	r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 800291c:	4b23      	ldr	r3, [pc, #140]	; (80029ac <StartShowFiles+0xc8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f107 010a 	add.w	r1, r7, #10
 8002924:	2200      	movs	r2, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f009 fe82 	bl	800c630 <xQueueReceive>
 800292c:	4603      	mov	r3, r0
 800292e:	2b01      	cmp	r3, #1
 8002930:	d1e0      	bne.n	80028f4 <StartShowFiles+0x10>
		  if (button_state == SHORT_PRESS) {
 8002932:	7abb      	ldrb	r3, [r7, #10]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d107      	bne.n	8002948 <StartShowFiles+0x64>

			  oled_move_selection(&SCRN_ShowFiles, &select_index, OLED_RESTORE);
 8002938:	f107 030b 	add.w	r3, r7, #11
 800293c:	2201      	movs	r2, #1
 800293e:	4619      	mov	r1, r3
 8002940:	4819      	ldr	r0, [pc, #100]	; (80029a8 <StartShowFiles+0xc4>)
 8002942:	f7fe ff47 	bl	80017d4 <oled_move_selection>
 8002946:	e7d5      	b.n	80028f4 <StartShowFiles+0x10>

		  } else if (button_state == LONG_PRESS) {
 8002948:	7abb      	ldrb	r3, [r7, #10]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d1d2      	bne.n	80028f4 <StartShowFiles+0x10>

			  if (select_index == SHOWFILES_EXIT_LOC) {
 800294e:	7afb      	ldrb	r3, [r7, #11]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d10a      	bne.n	800296a <StartShowFiles+0x86>
				  vTaskResume(HomeHandle);
 8002954:	4b16      	ldr	r3, [pc, #88]	; (80029b0 <StartShowFiles+0xcc>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f00a fb35 	bl	800cfc8 <vTaskResume>
				  ranonce = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
				  vTaskSuspend(NULL);
 8002962:	2000      	movs	r0, #0
 8002964:	f00a fa88 	bl	800ce78 <vTaskSuspend>
 8002968:	e7c4      	b.n	80028f4 <StartShowFiles+0x10>
			  } else if ((entry_present(select_index) == RFS_OK)) {
 800296a:	7afb      	ldrb	r3, [r7, #11]
 800296c:	b29b      	uxth	r3, r3
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fb65 	bl	800303e <entry_present>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1bc      	bne.n	80028f4 <StartShowFiles+0x10>
				  uint16_t entry = select_index;
 800297a:	7afb      	ldrb	r3, [r7, #11]
 800297c:	b29b      	uxth	r3, r3
 800297e:	813b      	strh	r3, [r7, #8]
				  xQueueSend(FileEntryHandle, &entry, 0);
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <StartShowFiles+0xd0>)
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	f107 0108 	add.w	r1, r7, #8
 8002988:	2300      	movs	r3, #0
 800298a:	2200      	movs	r2, #0
 800298c:	f009 fcb6 	bl	800c2fc <xQueueGenericSend>
				  vTaskResume(ShowFileDataHandle);
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <StartShowFiles+0xd4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f00a fb17 	bl	800cfc8 <vTaskResume>
				  ranonce = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
				  vTaskSuspend(NULL);
 800299e:	2000      	movs	r0, #0
 80029a0:	f00a fa6a 	bl	800ce78 <vTaskSuspend>
	  if (ranonce == 0) {
 80029a4:	e7a6      	b.n	80028f4 <StartShowFiles+0x10>
 80029a6:	bf00      	nop
 80029a8:	080104f4 	.word	0x080104f4
 80029ac:	20000860 	.word	0x20000860
 80029b0:	20000848 	.word	0x20000848
 80029b4:	20000864 	.word	0x20000864
 80029b8:	20000854 	.word	0x20000854

080029bc <StartShowFileData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFileData */
void StartShowFileData(void *argument)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFileData */
	uint8_t select_index = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
	uint16_t entry_to_show;
  /* Infinite loop */
  for(;;)
  {

    if (ranonce == 0) {
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d112      	bne.n	80029f8 <StartShowFileData+0x3c>
    	while(xQueueReceive(FileEntryHandle, &entry_to_show, 0) != pdTRUE);
 80029d2:	bf00      	nop
 80029d4:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <StartShowFileData+0x94>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f107 0108 	add.w	r1, r7, #8
 80029dc:	2200      	movs	r2, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f009 fe26 	bl	800c630 <xQueueReceive>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d1f4      	bne.n	80029d4 <StartShowFileData+0x18>
    	oled_show_file(entry_to_show);
 80029ea:	893b      	ldrh	r3, [r7, #8]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe feb1 	bl	8001754 <oled_show_file>
    	ranonce++;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	3301      	adds	r3, #1
 80029f6:	60fb      	str	r3, [r7, #12]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 80029f8:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <StartShowFileData+0x98>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f107 010a 	add.w	r1, r7, #10
 8002a00:	2200      	movs	r2, #0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f009 fe14 	bl	800c630 <xQueueReceive>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d1de      	bne.n	80029cc <StartShowFileData+0x10>
    	if (button_state == SHORT_PRESS) {
 8002a0e:	7abb      	ldrb	r3, [r7, #10]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d107      	bne.n	8002a24 <StartShowFileData+0x68>
    		oled_move_selection(&SCRN_FileData, &select_index, OLED_NORESTORE);
 8002a14:	f107 030b 	add.w	r3, r7, #11
 8002a18:	2200      	movs	r2, #0
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	480e      	ldr	r0, [pc, #56]	; (8002a58 <StartShowFileData+0x9c>)
 8002a1e:	f7fe fed9 	bl	80017d4 <oled_move_selection>
 8002a22:	e7d3      	b.n	80029cc <StartShowFileData+0x10>
    	} else if (button_state == LONG_PRESS) {
 8002a24:	7abb      	ldrb	r3, [r7, #10]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d1d0      	bne.n	80029cc <StartShowFileData+0x10>
    		if (select_index == SHOWFILE_DELETE_LOC) {
 8002a2a:	7afb      	ldrb	r3, [r7, #11]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d103      	bne.n	8002a38 <StartShowFileData+0x7c>
    			remove_card(entry_to_show);
 8002a30:	893b      	ldrh	r3, [r7, #8]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fb4d 	bl	80030d2 <remove_card>
    		}
    		vTaskResume(ShowFilesHandle);
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <StartShowFileData+0xa0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f00a fac3 	bl	800cfc8 <vTaskResume>
    		ranonce = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
    		vTaskSuspend(NULL);
 8002a46:	2000      	movs	r0, #0
 8002a48:	f00a fa16 	bl	800ce78 <vTaskSuspend>
    if (ranonce == 0) {
 8002a4c:	e7be      	b.n	80029cc <StartShowFileData+0x10>
 8002a4e:	bf00      	nop
 8002a50:	20000864 	.word	0x20000864
 8002a54:	20000860 	.word	0x20000860
 8002a58:	08010508 	.word	0x08010508
 8002a5c:	20000850 	.word	0x20000850

08002a60 <StartClone>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClone */
void StartClone(void *argument)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartClone */
	int ranonce = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 8002a6c:	201c      	movs	r0, #28
 8002a6e:	f00c fcc9 	bl	800f404 <malloc>
 8002a72:	4603      	mov	r3, r0
 8002a74:	60bb      	str	r3, [r7, #8]
	read_card->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 8002a76:	2040      	movs	r0, #64	; 0x40
 8002a78:	f00c fcc4 	bl	800f404 <malloc>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	615a      	str	r2, [r3, #20]
	read_card->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8002a84:	2007      	movs	r0, #7
 8002a86:	f00c fcbd 	bl	800f404 <malloc>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	MFRC_ANTON();
 8002a92:	f7fd fe1f 	bl	80006d4 <MFRC_ANTON>
    if (ranonce == 0) {
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d106      	bne.n	8002aaa <StartClone+0x4a>
    	OLED_SCREEN(&SCRN_Clone, NORMAL);
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4817      	ldr	r0, [pc, #92]	; (8002afc <StartClone+0x9c>)
 8002aa0:	f7fe fcda 	bl	8001458 <OLED_SCREEN>
    	ranonce++;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	60fb      	str	r3, [r7, #12]
    }

    if (UL_readcard(read_card) == PCD_OK) {
 8002aaa:	68b8      	ldr	r0, [r7, #8]
 8002aac:	f7fe f8f4 	bl	8000c98 <UL_readcard>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2bcc      	cmp	r3, #204	; 0xcc
 8002ab4:	d1ed      	bne.n	8002a92 <StartClone+0x32>
    	MFRC_HALTA();
 8002ab6:	f7fd ff23 	bl	8000900 <MFRC_HALTA>
    	BUZZ();
 8002aba:	f7ff f999 	bl	8001df0 <BUZZ>
    	OLED_Clear();
 8002abe:	f7fe fa00 	bl	8000ec2 <OLED_Clear>
    	OLED_PrintCent(2, "PLACE CARD YOU WISH", NORMAL);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	490e      	ldr	r1, [pc, #56]	; (8002b00 <StartClone+0xa0>)
 8002ac6:	2002      	movs	r0, #2
 8002ac8:	f7fe fbd7 	bl	800127a <OLED_PrintCent>
    	OLED_PrintCent(4, "TO COPY TO", NORMAL);
 8002acc:	2200      	movs	r2, #0
 8002ace:	490d      	ldr	r1, [pc, #52]	; (8002b04 <StartClone+0xa4>)
 8002ad0:	2004      	movs	r0, #4
 8002ad2:	f7fe fbd2 	bl	800127a <OLED_PrintCent>
    	while(PICC_CHECK() == PCD_OK); //Hang until read card is removed
 8002ad6:	bf00      	nop
 8002ad8:	f7fe f820 	bl	8000b1c <PICC_CHECK>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2bcc      	cmp	r3, #204	; 0xcc
 8002ae0:	d0fa      	beq.n	8002ad8 <StartClone+0x78>
    	while(PICC_CHECK() != PCD_OK); //Hang until new card is placed
 8002ae2:	bf00      	nop
 8002ae4:	f7fe f81a 	bl	8000b1c <PICC_CHECK>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2bcc      	cmp	r3, #204	; 0xcc
 8002aec:	d1fa      	bne.n	8002ae4 <StartClone+0x84>
    	ranonce = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
    	write_card(read_card);
 8002af2:	68b8      	ldr	r0, [r7, #8]
 8002af4:	f7ff f98e 	bl	8001e14 <write_card>
	MFRC_ANTON();
 8002af8:	e7cb      	b.n	8002a92 <StartClone+0x32>
 8002afa:	bf00      	nop
 8002afc:	0801051c 	.word	0x0801051c
 8002b00:	0800ff3c 	.word	0x0800ff3c
 8002b04:	0800ff50 	.word	0x0800ff50

08002b08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d101      	bne.n	8002b1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b1a:	f000 fd89 	bl	8003630 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40000c00 	.word	0x40000c00

08002b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b30:	b672      	cpsid	i
}
 8002b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b34:	e7fe      	b.n	8002b34 <Error_Handler+0x8>

08002b36 <enter_card>:
 *
 * @param card - Card to store
 * @param entry - Entry (Block number) to store card
 * @return RFS_OK if card was successfully stored
 * */
RFS_StatusTypeDef enter_card(Card* card, uint16_t entry) {
 8002b36:	b5b0      	push	{r4, r5, r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	807b      	strh	r3, [r7, #2]
	uint16_t block_startaddr = entry * BLOCK_PAGECOUNT;
 8002b42:	887b      	ldrh	r3, [r7, #2]
 8002b44:	019b      	lsls	r3, r3, #6
 8002b46:	81fb      	strh	r3, [r7, #14]
	block_erase(entry); //Erase entire block ready for new data
 8002b48:	887b      	ldrh	r3, [r7, #2]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe ff16 	bl	800197c <block_erase>
	enter_metadata(card, entry);
 8002b50:	887b      	ldrh	r3, [r7, #2]
 8002b52:	4619      	mov	r1, r3
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f83f 	bl	8002bd8 <enter_metadata>

	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000, (uint8_t*)card->name, strlen(card->name)) != HAL_OK) {
 8002b5a:	89fb      	ldrh	r3, [r7, #14]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	b29c      	uxth	r4, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689d      	ldr	r5, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fb39 	bl	80001e0 <strlen>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	462a      	mov	r2, r5
 8002b72:	2100      	movs	r1, #0
 8002b74:	4620      	mov	r0, r4
 8002b76:	f7fe ff59 	bl	8001a2c <MEM_WRITE>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <enter_card+0x4e>
		return RFS_WRITE_ERROR;
 8002b80:	2304      	movs	r3, #4
 8002b82:	e025      	b.n	8002bd0 <enter_card+0x9a>
	}
	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000 + strlen(card->name),card->uid ,card->uidsize) != HAL_OK) {
 8002b84:	89fb      	ldrh	r3, [r7, #14]
 8002b86:	3301      	adds	r3, #1
 8002b88:	b29c      	uxth	r4, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fd fb26 	bl	80001e0 <strlen>
 8002b94:	4603      	mov	r3, r0
 8002b96:	b299      	uxth	r1, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	791b      	ldrb	r3, [r3, #4]
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f7fe ff43 	bl	8001a2c <MEM_WRITE>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <enter_card+0x7a>
		return RFS_WRITE_ERROR;
 8002bac:	2304      	movs	r3, #4
 8002bae:	e00f      	b.n	8002bd0 <enter_card+0x9a>
	}
	if (MEM_WRITE(block_startaddr + DATAPAGE_OFFSET, 0x0000, card->contents, card->contents_size) != HAL_OK) {
 8002bb0:	89fb      	ldrh	r3, [r7, #14]
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	b298      	uxth	r0, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	8b1b      	ldrh	r3, [r3, #24]
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	f7fe ff34 	bl	8001a2c <MEM_WRITE>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <enter_card+0x98>
		return RFS_WRITE_ERROR;
 8002bca:	2304      	movs	r3, #4
 8002bcc:	e000      	b.n	8002bd0 <enter_card+0x9a>
	}

	return RFS_OK;
 8002bce:	2300      	movs	r3, #0

}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bdb0      	pop	{r4, r5, r7, pc}

08002bd8 <enter_metadata>:
 * Write the card metadata into a block
 *
 * @param card - Card to write
 * @param block_num - Block number
 * */
RFS_StatusTypeDef enter_metadata(Card* card, uint16_t block_num) {
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	807b      	strh	r3, [r7, #2]
	uint8_t card_size = card->contents_size; //Card contents is uint8_t
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	8b1b      	ldrh	r3, [r3, #24]
 8002be8:	73fb      	strb	r3, [r7, #15]
	uint8_t read_protected = card->read_protected;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7c1b      	ldrb	r3, [r3, #16]
 8002bee:	73bb      	strb	r3, [r7, #14]
	uint8_t uid_size = card->uidsize;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	791b      	ldrb	r3, [r3, #4]
 8002bf4:	737b      	strb	r3, [r7, #13]
	uint8_t metasize = sizeof(card_size) + sizeof(uid_size) + sizeof(read_protected) + strlen(card->type);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd faf0 	bl	80001e0 <strlen>
 8002c00:	4603      	mov	r3, r0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	3303      	adds	r3, #3
 8002c06:	733b      	strb	r3, [r7, #12]
	uint8_t* metadata = malloc(metasize);
 8002c08:	7b3b      	ldrb	r3, [r7, #12]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f00c fbfa 	bl	800f404 <malloc>
 8002c10:	4603      	mov	r3, r0
 8002c12:	60bb      	str	r3, [r7, #8]

	memcpy(metadata, (uint8_t*) card->type, strlen(card->type));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68dc      	ldr	r4, [r3, #12]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fd fadf 	bl	80001e0 <strlen>
 8002c22:	4603      	mov	r3, r0
 8002c24:	461a      	mov	r2, r3
 8002c26:	4621      	mov	r1, r4
 8002c28:	68b8      	ldr	r0, [r7, #8]
 8002c2a:	f00c fbfb 	bl	800f424 <memcpy>
	metadata[strlen(card->type) + 0] = card_size;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd fad4 	bl	80001e0 <strlen>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 1] = uid_size;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd faca 	bl	80001e0 <strlen>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	3301      	adds	r3, #1
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	4413      	add	r3, r2
 8002c54:	7b7a      	ldrb	r2, [r7, #13]
 8002c56:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 2] = read_protected;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fabf 	bl	80001e0 <strlen>
 8002c62:	4603      	mov	r3, r0
 8002c64:	3302      	adds	r3, #2
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	4413      	add	r3, r2
 8002c6a:	7bba      	ldrb	r2, [r7, #14]
 8002c6c:	701a      	strb	r2, [r3, #0]

	if (MEM_WRITE(block_num * BLOCK_PAGECOUNT, 0x0000, metadata, metasize) != HAL_OK) {
 8002c6e:	887b      	ldrh	r3, [r7, #2]
 8002c70:	019b      	lsls	r3, r3, #6
 8002c72:	b298      	uxth	r0, r3
 8002c74:	7b3b      	ldrb	r3, [r7, #12]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	2100      	movs	r1, #0
 8002c7a:	f7fe fed7 	bl	8001a2c <MEM_WRITE>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d004      	beq.n	8002c8e <enter_metadata+0xb6>
		free(metadata);
 8002c84:	68b8      	ldr	r0, [r7, #8]
 8002c86:	f00c fbc5 	bl	800f414 <free>
		return RFS_WRITE_ERROR;
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	e003      	b.n	8002c96 <enter_metadata+0xbe>
	}
	free(metadata);
 8002c8e:	68b8      	ldr	r0, [r7, #8]
 8002c90:	f00c fbc0 	bl	800f414 <free>
	return RFS_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd90      	pop	{r4, r7, pc}

08002c9e <read_card_entry>:
 * Get card from entry number
 *
 * @param entry - Entry number of card
 * @return a new Card instance with read data
 * */
Card* read_card_entry(uint16_t entry) {
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	80fb      	strh	r3, [r7, #6]
	Card* result = malloc(sizeof(Card));
 8002ca8:	201c      	movs	r0, #28
 8002caa:	f00c fbab 	bl	800f404 <malloc>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	60fb      	str	r3, [r7, #12]

	if (read_metadata(result, entry) != RFS_OK) {
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f81e 	bl	8002cf8 <read_metadata>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <read_card_entry+0x28>
		return NULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e014      	b.n	8002cf0 <read_card_entry+0x52>
	}

	if (read_nameuid(result, entry) != RFS_OK) {
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f881 	bl	8002dd2 <read_nameuid>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <read_card_entry+0x3c>
		return NULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e00a      	b.n	8002cf0 <read_card_entry+0x52>
	}

	if(read_cardcontents(result, entry) != RFS_OK) {
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f8e2 	bl	8002ea8 <read_cardcontents>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <read_card_entry+0x50>
		return NULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	e000      	b.n	8002cf0 <read_card_entry+0x52>
	}

	return result;
 8002cee:	68fb      	ldr	r3, [r7, #12]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <read_metadata>:
 *
 * @param result - Card to store data to
 * @param entry - entry to read from
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_metadata(Card* result, uint16_t entry) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	807b      	strh	r3, [r7, #2]
	uint16_t metadata_size = get_datasize(entry, METAPAGE_OFFSET);
 8002d04:	887b      	ldrh	r3, [r7, #2]
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 f8f5 	bl	8002ef8 <get_datasize>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	82fb      	strh	r3, [r7, #22]
	uint8_t* metadata = malloc(metadata_size * sizeof(uint8_t));
 8002d12:	8afb      	ldrh	r3, [r7, #22]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f00c fb75 	bl	800f404 <malloc>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	613b      	str	r3, [r7, #16]
	char* type = malloc(((metadata_size - 3) + 1) * sizeof(char)); //+1 for null
 8002d1e:	8afb      	ldrh	r3, [r7, #22]
 8002d20:	3b02      	subs	r3, #2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f00c fb6e 	bl	800f404 <malloc>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, metadata, metadata_size) != HAL_OK) {
 8002d2c:	887b      	ldrh	r3, [r7, #2]
 8002d2e:	019b      	lsls	r3, r3, #6
 8002d30:	b298      	uxth	r0, r3
 8002d32:	8afb      	ldrh	r3, [r7, #22]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	2100      	movs	r1, #0
 8002d38:	f7fe ff0e 	bl	8001b58 <MEM_READPAGE>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d004      	beq.n	8002d4c <read_metadata+0x54>
		free(metadata);
 8002d42:	6938      	ldr	r0, [r7, #16]
 8002d44:	f00c fb66 	bl	800f414 <free>
		return RFS_READ_ERROR;
 8002d48:	2305      	movs	r3, #5
 8002d4a:	e03e      	b.n	8002dca <read_metadata+0xd2>
	}

	if ((uint8_t)type[0] == 0xFF) { //Simple check to see if we read an empty entry
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2bff      	cmp	r3, #255	; 0xff
 8002d52:	d104      	bne.n	8002d5e <read_metadata+0x66>
		free(metadata);
 8002d54:	6938      	ldr	r0, [r7, #16]
 8002d56:	f00c fb5d 	bl	800f414 <free>
		return RFS_NO_CARD;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e035      	b.n	8002dca <read_metadata+0xd2>
	}

	memcpy(type, metadata, metadata_size - 3);
 8002d5e:	8afb      	ldrh	r3, [r7, #22]
 8002d60:	3b03      	subs	r3, #3
 8002d62:	461a      	mov	r2, r3
 8002d64:	6939      	ldr	r1, [r7, #16]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f00c fb5c 	bl	800f424 <memcpy>
	type[metadata_size - 3] = '\0';
 8002d6c:	8afb      	ldrh	r3, [r7, #22]
 8002d6e:	3b03      	subs	r3, #3
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4413      	add	r3, r2
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
	result->type = type;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	60da      	str	r2, [r3, #12]
	result->contents_size = metadata[metadata_size - 3];
 8002d7e:	8afb      	ldrh	r3, [r7, #22]
 8002d80:	3b03      	subs	r3, #3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	831a      	strh	r2, [r3, #24]
	result->uidsize = metadata[metadata_size - 2];
 8002d8e:	8afb      	ldrh	r3, [r7, #22]
 8002d90:	3b02      	subs	r3, #2
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4413      	add	r3, r2
 8002d96:	781a      	ldrb	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	711a      	strb	r2, [r3, #4]
	if (metadata[metadata_size - 1] == READ_PROTECTED) { //Card is read protected
 8002d9c:	8afb      	ldrh	r3, [r7, #22]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4413      	add	r3, r2
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d104      	bne.n	8002db4 <read_metadata+0xbc>
		free(metadata);
 8002daa:	6938      	ldr	r0, [r7, #16]
 8002dac:	f00c fb32 	bl	800f414 <free>
		return RFS_CARD_PROTECTED;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e00a      	b.n	8002dca <read_metadata+0xd2>
	}
	result->read_protected = metadata[metadata_size - 1];
 8002db4:	8afb      	ldrh	r3, [r7, #22]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4413      	add	r3, r2
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	741a      	strb	r2, [r3, #16]
	free(metadata);
 8002dc2:	6938      	ldr	r0, [r7, #16]
 8002dc4:	f00c fb26 	bl	800f414 <free>

	return RFS_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <read_nameuid>:
 * Read the name and uid of card entry. Note that metadata must be read before name and uid can be read
 * @param result - Result to store data to
 * @param entry - Entry to read from
 * @return RFS_OK if name and uid was successfully read
 * */
RFS_StatusTypeDef read_nameuid(Card* result, uint16_t entry) {
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b086      	sub	sp, #24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	807b      	strh	r3, [r7, #2]
	uint16_t datasize = get_datasize(entry, NAMEPAGE_OFFSET);
 8002dde:	887b      	ldrh	r3, [r7, #2]
 8002de0:	2101      	movs	r1, #1
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 f888 	bl	8002ef8 <get_datasize>
 8002de8:	4603      	mov	r3, r0
 8002dea:	82fb      	strh	r3, [r7, #22]
	uint8_t* raw_data = malloc(datasize*sizeof(uint8_t));
 8002dec:	8afb      	ldrh	r3, [r7, #22]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f00c fb08 	bl	800f404 <malloc>
 8002df4:	4603      	mov	r3, r0
 8002df6:	613b      	str	r3, [r7, #16]
	char* name = malloc((datasize - result->uidsize + 1) * sizeof(char)); //+1 for null
 8002df8:	8afb      	ldrh	r3, [r7, #22]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	7912      	ldrb	r2, [r2, #4]
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	3301      	adds	r3, #1
 8002e02:	4618      	mov	r0, r3
 8002e04:	f00c fafe 	bl	800f404 <malloc>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	60fb      	str	r3, [r7, #12]
	uint8_t* uid = malloc((result->uidsize) * sizeof(uint8_t));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	791b      	ldrb	r3, [r3, #4]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f00c faf7 	bl	800f404 <malloc>
 8002e16:	4603      	mov	r3, r0
 8002e18:	60bb      	str	r3, [r7, #8]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + NAMEPAGE_OFFSET, 0x0000, raw_data, datasize) != HAL_OK) {
 8002e1a:	887b      	ldrh	r3, [r7, #2]
 8002e1c:	019b      	lsls	r3, r3, #6
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3301      	adds	r3, #1
 8002e22:	b298      	uxth	r0, r3
 8002e24:	8afb      	ldrh	r3, [r7, #22]
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	2100      	movs	r1, #0
 8002e2a:	f7fe fe95 	bl	8001b58 <MEM_READPAGE>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d004      	beq.n	8002e3e <read_nameuid+0x6c>
		free(raw_data);
 8002e34:	6938      	ldr	r0, [r7, #16]
 8002e36:	f00c faed 	bl	800f414 <free>
		return RFS_READ_ERROR;
 8002e3a:	2305      	movs	r3, #5
 8002e3c:	e030      	b.n	8002ea0 <read_nameuid+0xce>
	}

	if ((uint8_t)name[0] == 0xFF) { //Simple check to see if we read an empty entry
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2bff      	cmp	r3, #255	; 0xff
 8002e44:	d104      	bne.n	8002e50 <read_nameuid+0x7e>
		free(raw_data);
 8002e46:	6938      	ldr	r0, [r7, #16]
 8002e48:	f00c fae4 	bl	800f414 <free>
		return RFS_NO_CARD;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e027      	b.n	8002ea0 <read_nameuid+0xce>
	}

	memcpy(name, raw_data, datasize - result->uidsize);
 8002e50:	8afb      	ldrh	r3, [r7, #22]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	7912      	ldrb	r2, [r2, #4]
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	6939      	ldr	r1, [r7, #16]
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f00c fae1 	bl	800f424 <memcpy>
	name[datasize - result->uidsize] = '\0';
 8002e62:	8afb      	ldrh	r3, [r7, #22]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	7912      	ldrb	r2, [r2, #4]
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4413      	add	r3, r2
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
	result->name = name;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	609a      	str	r2, [r3, #8]

	memcpy(uid, raw_data + strlen(name), result->uidsize);
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f7fd f9b0 	bl	80001e0 <strlen>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1899      	adds	r1, r3, r2
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	791b      	ldrb	r3, [r3, #4]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68b8      	ldr	r0, [r7, #8]
 8002e8e:	f00c fac9 	bl	800f424 <memcpy>
	result->uid = uid;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	601a      	str	r2, [r3, #0]
	free(raw_data);
 8002e98:	6938      	ldr	r0, [r7, #16]
 8002e9a:	f00c fabb 	bl	800f414 <free>

	return RFS_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <read_cardcontents>:
/**
 * Read the contents of a card entry
 * @param entry - Entry to read contents of
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_cardcontents(Card* result, uint16_t entry) {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	807b      	strh	r3, [r7, #2]
	uint8_t* contents = malloc(result->contents_size * sizeof(uint8_t));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	8b1b      	ldrh	r3, [r3, #24]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f00c faa3 	bl	800f404 <malloc>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + DATAPAGE_OFFSET, 0x0000, contents, result->contents_size) != HAL_OK) {
 8002ec2:	887b      	ldrh	r3, [r7, #2]
 8002ec4:	019b      	lsls	r3, r3, #6
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3302      	adds	r3, #2
 8002eca:	b298      	uxth	r0, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	8b1b      	ldrh	r3, [r3, #24]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	f7fe fe40 	bl	8001b58 <MEM_READPAGE>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d004      	beq.n	8002ee8 <read_cardcontents+0x40>
		free(contents);
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f00c fa98 	bl	800f414 <free>
		return RFS_READ_ERROR;
 8002ee4:	2305      	movs	r3, #5
 8002ee6:	e003      	b.n	8002ef0 <read_cardcontents+0x48>
	}

	result->contents = contents;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	615a      	str	r2, [r3, #20]
	return RFS_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <get_datasize>:
 * Get the size of a chunk of data from specific block and page
 * @param entry - Entry to read from
 * @param page - Page to begin reading from
 * @return size of data in bytes
 * */
uint16_t get_datasize(uint16_t entry, uint8_t page) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	460a      	mov	r2, r1
 8002f02:	80fb      	strh	r3, [r7, #6]
 8002f04:	4613      	mov	r3, r2
 8002f06:	717b      	strb	r3, [r7, #5]
	uint16_t size = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	81fb      	strh	r3, [r7, #14]
	uint8_t byte_read = 0x00;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	737b      	strb	r3, [r7, #13]

	while(byte_read != 0xFF) {
 8002f10:	e014      	b.n	8002f3c <get_datasize+0x44>
		if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + page, size, &byte_read, 1) != HAL_OK) {
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	019b      	lsls	r3, r3, #6
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	797b      	ldrb	r3, [r7, #5]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	b298      	uxth	r0, r3
 8002f20:	f107 020d 	add.w	r2, r7, #13
 8002f24:	89f9      	ldrh	r1, [r7, #14]
 8002f26:	2301      	movs	r3, #1
 8002f28:	f7fe fe16 	bl	8001b58 <MEM_READPAGE>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <get_datasize+0x3e>
			return 0; //Error occured whilst reading
 8002f32:	2300      	movs	r3, #0
 8002f34:	e008      	b.n	8002f48 <get_datasize+0x50>
		}
		size++;
 8002f36:	89fb      	ldrh	r3, [r7, #14]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	81fb      	strh	r3, [r7, #14]
	while(byte_read != 0xFF) {
 8002f3c:	7b7b      	ldrb	r3, [r7, #13]
 8002f3e:	2bff      	cmp	r3, #255	; 0xff
 8002f40:	d1e7      	bne.n	8002f12 <get_datasize+0x1a>
	}

	return size - 1; //Last iteration will add 1 to true size so -1
 8002f42:	89fb      	ldrh	r3, [r7, #14]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29b      	uxth	r3, r3
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <get_number_files>:

/**
 * Get number of files currently stored
 * @return number of files stored
 * */
int get_number_files(void) {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
	int count = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	e00d      	b.n	8002f7c <get_number_files+0x2c>
		if (entry_present(i) == RFS_OK) {
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 f86a 	bl	800303e <entry_present>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <get_number_files+0x36>
			count++;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3301      	adds	r3, #1
 8002f74:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f82:	dbed      	blt.n	8002f60 <get_number_files+0x10>
 8002f84:	e000      	b.n	8002f88 <get_number_files+0x38>
		} else {
			break;
 8002f86:	bf00      	nop
		}

	}

	return count;
 8002f88:	687b      	ldr	r3, [r7, #4]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <get_all_files>:
 * Get the names of all currently stored cards
 *
 * @param result - Array to store file names
 * @return RFS_OK if all file names were read correctly
 * */
RFS_StatusTypeDef get_all_files(char** result) {
 8002f92:	b5b0      	push	{r4, r5, r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
	Card* work;

	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	e040      	b.n	8003022 <get_all_files+0x90>
		if (entry_present(i) == RFS_OK) {
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 f84a 	bl	800303e <entry_present>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d13d      	bne.n	800302c <get_all_files+0x9a>
			work = read_card_entry(i);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fe72 	bl	8002c9e <read_card_entry>
 8002fba:	60f8      	str	r0, [r7, #12]
			result[i] = malloc(strlen(work->name) + 1);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd f90d 	bl	80001e0 <strlen>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	1c59      	adds	r1, r3, #1
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	18d4      	adds	r4, r2, r3
 8002fd2:	4608      	mov	r0, r1
 8002fd4:	f00c fa16 	bl	800f404 <malloc>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	6023      	str	r3, [r4, #0]
			memcpy(result[i], work->name, strlen(work->name));
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	681c      	ldr	r4, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689d      	ldr	r5, [r3, #8]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd f8f6 	bl	80001e0 <strlen>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f00c fa12 	bl	800f424 <memcpy>
			result[i][strlen(work->name)] = '\0';
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	681c      	ldr	r4, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd f8e6 	bl	80001e0 <strlen>
 8003014:	4603      	mov	r3, r0
 8003016:	4423      	add	r3, r4
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < BLOCK_COUNT; i++) {
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	3301      	adds	r3, #1
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003028:	dbba      	blt.n	8002fa0 <get_all_files+0xe>
 800302a:	e000      	b.n	800302e <get_all_files+0x9c>
		} else {
			break;
 800302c:	bf00      	nop
		}
	}

	free(work);
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f00c f9f0 	bl	800f414 <free>
	return RFS_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bdb0      	pop	{r4, r5, r7, pc}

0800303e <entry_present>:
 * Check if entry is present
 *
 * @param entry - Entry to check
 * @return RFS_OK if entry is present
 * */
RFS_StatusTypeDef entry_present(uint16_t entry) {
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	4603      	mov	r3, r0
 8003046:	80fb      	strh	r3, [r7, #6]
	uint8_t byte_read;

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, &byte_read, 1) != HAL_OK) {
 8003048:	88fb      	ldrh	r3, [r7, #6]
 800304a:	019b      	lsls	r3, r3, #6
 800304c:	b298      	uxth	r0, r3
 800304e:	f107 020f 	add.w	r2, r7, #15
 8003052:	2301      	movs	r3, #1
 8003054:	2100      	movs	r1, #0
 8003056:	f7fe fd7f 	bl	8001b58 <MEM_READPAGE>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <entry_present+0x26>
		return RFS_READ_ERROR;
 8003060:	2305      	movs	r3, #5
 8003062:	e005      	b.n	8003070 <entry_present+0x32>
	}

	if (byte_read == 0xFF) {
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	2bff      	cmp	r3, #255	; 0xff
 8003068:	d101      	bne.n	800306e <entry_present+0x30>
		return RFS_NO_CARD;
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <entry_present+0x32>
	}

	return RFS_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <get_file_name>:
/**
 * Get the file name of a given entry
 * @param entry - Entry to get name of
 * @return pointer to name
 * */
char* get_file_name(uint16_t entry) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ffda 	bl	800303e <entry_present>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <get_file_name+0x1c>
		return NULL;
 8003090:	2300      	movs	r3, #0
 8003092:	e01a      	b.n	80030ca <get_file_name+0x52>
	}

	work = read_card_entry(entry);
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fe01 	bl	8002c9e <read_card_entry>
 800309c:	60f8      	str	r0, [r7, #12]

	char* name = malloc((strlen(work->name) + 1) * sizeof(char));
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd f89c 	bl	80001e0 <strlen>
 80030a8:	4603      	mov	r3, r0
 80030aa:	3301      	adds	r3, #1
 80030ac:	4618      	mov	r0, r3
 80030ae:	f00c f9a9 	bl	800f404 <malloc>
 80030b2:	4603      	mov	r3, r0
 80030b4:	60bb      	str	r3, [r7, #8]
	strcpy(name, work->name);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	4619      	mov	r1, r3
 80030bc:	68b8      	ldr	r0, [r7, #8]
 80030be:	f00c fad7 	bl	800f670 <strcpy>
	free(work);
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f00c f9a6 	bl	800f414 <free>

	return name;
 80030c8:	68bb      	ldr	r3, [r7, #8]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <remove_card>:

/**
 * Remove card from file system
 * @param entry - Entry to remove
 * */
void remove_card(uint16_t entry) {
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	4603      	mov	r3, r0
 80030da:	80fb      	strh	r3, [r7, #6]
	block_erase(entry);
 80030dc:	88fb      	ldrh	r3, [r7, #6]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe fc4c 	bl	800197c <block_erase>
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	607b      	str	r3, [r7, #4]
 80030f6:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_MspInit+0x54>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	4a11      	ldr	r2, [pc, #68]	; (8003140 <HAL_MspInit+0x54>)
 80030fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003100:	6453      	str	r3, [r2, #68]	; 0x44
 8003102:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <HAL_MspInit+0x54>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310a:	607b      	str	r3, [r7, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	603b      	str	r3, [r7, #0]
 8003112:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_MspInit+0x54>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <HAL_MspInit+0x54>)
 8003118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311c:	6413      	str	r3, [r2, #64]	; 0x40
 800311e:	4b08      	ldr	r3, [pc, #32]	; (8003140 <HAL_MspInit+0x54>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800312a:	2200      	movs	r2, #0
 800312c:	210f      	movs	r1, #15
 800312e:	f06f 0001 	mvn.w	r0, #1
 8003132:	f000 fb79 	bl	8003828 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800

08003144 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08a      	sub	sp, #40	; 0x28
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a19      	ldr	r2, [pc, #100]	; (80031c8 <HAL_I2C_MspInit+0x84>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d12b      	bne.n	80031be <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	4b18      	ldr	r3, [pc, #96]	; (80031cc <HAL_I2C_MspInit+0x88>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	4a17      	ldr	r2, [pc, #92]	; (80031cc <HAL_I2C_MspInit+0x88>)
 8003170:	f043 0302 	orr.w	r3, r3, #2
 8003174:	6313      	str	r3, [r2, #48]	; 0x30
 8003176:	4b15      	ldr	r3, [pc, #84]	; (80031cc <HAL_I2C_MspInit+0x88>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003182:	23c0      	movs	r3, #192	; 0xc0
 8003184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003186:	2312      	movs	r3, #18
 8003188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800318e:	2303      	movs	r3, #3
 8003190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003192:	2304      	movs	r3, #4
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003196:	f107 0314 	add.w	r3, r7, #20
 800319a:	4619      	mov	r1, r3
 800319c:	480c      	ldr	r0, [pc, #48]	; (80031d0 <HAL_I2C_MspInit+0x8c>)
 800319e:	f000 fb6d 	bl	800387c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_I2C_MspInit+0x88>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	4a08      	ldr	r2, [pc, #32]	; (80031cc <HAL_I2C_MspInit+0x88>)
 80031ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031b0:	6413      	str	r3, [r2, #64]	; 0x40
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_I2C_MspInit+0x88>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031be:	bf00      	nop
 80031c0:	3728      	adds	r7, #40	; 0x28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40005400 	.word	0x40005400
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40020400 	.word	0x40020400

080031d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08c      	sub	sp, #48	; 0x30
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031dc:	f107 031c 	add.w	r3, r7, #28
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a32      	ldr	r2, [pc, #200]	; (80032bc <HAL_SPI_MspInit+0xe8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d12c      	bne.n	8003250 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	4b31      	ldr	r3, [pc, #196]	; (80032c0 <HAL_SPI_MspInit+0xec>)
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	4a30      	ldr	r2, [pc, #192]	; (80032c0 <HAL_SPI_MspInit+0xec>)
 8003200:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003204:	6453      	str	r3, [r2, #68]	; 0x44
 8003206:	4b2e      	ldr	r3, [pc, #184]	; (80032c0 <HAL_SPI_MspInit+0xec>)
 8003208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800320e:	61bb      	str	r3, [r7, #24]
 8003210:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	4b2a      	ldr	r3, [pc, #168]	; (80032c0 <HAL_SPI_MspInit+0xec>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	4a29      	ldr	r2, [pc, #164]	; (80032c0 <HAL_SPI_MspInit+0xec>)
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	6313      	str	r3, [r2, #48]	; 0x30
 8003222:	4b27      	ldr	r3, [pc, #156]	; (80032c0 <HAL_SPI_MspInit+0xec>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800322e:	23a0      	movs	r3, #160	; 0xa0
 8003230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003232:	2302      	movs	r3, #2
 8003234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003236:	2300      	movs	r3, #0
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800323a:	2303      	movs	r3, #3
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800323e:	2305      	movs	r3, #5
 8003240:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003242:	f107 031c 	add.w	r3, r7, #28
 8003246:	4619      	mov	r1, r3
 8003248:	481e      	ldr	r0, [pc, #120]	; (80032c4 <HAL_SPI_MspInit+0xf0>)
 800324a:	f000 fb17 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800324e:	e031      	b.n	80032b4 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a1c      	ldr	r2, [pc, #112]	; (80032c8 <HAL_SPI_MspInit+0xf4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d12c      	bne.n	80032b4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <HAL_SPI_MspInit+0xec>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	4a17      	ldr	r2, [pc, #92]	; (80032c0 <HAL_SPI_MspInit+0xec>)
 8003264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003268:	6413      	str	r3, [r2, #64]	; 0x40
 800326a:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <HAL_SPI_MspInit+0xec>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <HAL_SPI_MspInit+0xec>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	4a10      	ldr	r2, [pc, #64]	; (80032c0 <HAL_SPI_MspInit+0xec>)
 8003280:	f043 0302 	orr.w	r3, r3, #2
 8003284:	6313      	str	r3, [r2, #48]	; 0x30
 8003286:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_SPI_MspInit+0xec>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003292:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8003296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003298:	2302      	movs	r3, #2
 800329a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329c:	2300      	movs	r3, #0
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a0:	2303      	movs	r3, #3
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032a4:	2305      	movs	r3, #5
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a8:	f107 031c 	add.w	r3, r7, #28
 80032ac:	4619      	mov	r1, r3
 80032ae:	4807      	ldr	r0, [pc, #28]	; (80032cc <HAL_SPI_MspInit+0xf8>)
 80032b0:	f000 fae4 	bl	800387c <HAL_GPIO_Init>
}
 80032b4:	bf00      	nop
 80032b6:	3730      	adds	r7, #48	; 0x30
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40013000 	.word	0x40013000
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40020000 	.word	0x40020000
 80032c8:	40003800 	.word	0x40003800
 80032cc:	40020400 	.word	0x40020400

080032d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e0:	d10e      	bne.n	8003300 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	4b13      	ldr	r3, [pc, #76]	; (8003334 <HAL_TIM_Base_MspInit+0x64>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	4a12      	ldr	r2, [pc, #72]	; (8003334 <HAL_TIM_Base_MspInit+0x64>)
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	6413      	str	r3, [r2, #64]	; 0x40
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <HAL_TIM_Base_MspInit+0x64>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80032fe:	e012      	b.n	8003326 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a0c      	ldr	r2, [pc, #48]	; (8003338 <HAL_TIM_Base_MspInit+0x68>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d10d      	bne.n	8003326 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <HAL_TIM_Base_MspInit+0x64>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	4a08      	ldr	r2, [pc, #32]	; (8003334 <HAL_TIM_Base_MspInit+0x64>)
 8003314:	f043 0302 	orr.w	r3, r3, #2
 8003318:	6413      	str	r3, [r2, #64]	; 0x40
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_TIM_Base_MspInit+0x64>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	68bb      	ldr	r3, [r7, #8]
}
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800
 8003338:	40000400 	.word	0x40000400

0800333c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003344:	f107 030c 	add.w	r3, r7, #12
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800335c:	d11d      	bne.n	800339a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <HAL_TIM_MspPostInit+0x68>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	4a0f      	ldr	r2, [pc, #60]	; (80033a4 <HAL_TIM_MspPostInit+0x68>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6313      	str	r3, [r2, #48]	; 0x30
 800336e:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <HAL_TIM_MspPostInit+0x68>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800337a:	2304      	movs	r3, #4
 800337c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337e:	2302      	movs	r3, #2
 8003380:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003386:	2300      	movs	r3, #0
 8003388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800338a:	2301      	movs	r3, #1
 800338c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338e:	f107 030c 	add.w	r3, r7, #12
 8003392:	4619      	mov	r1, r3
 8003394:	4804      	ldr	r0, [pc, #16]	; (80033a8 <HAL_TIM_MspPostInit+0x6c>)
 8003396:	f000 fa71 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800339a:	bf00      	nop
 800339c:	3720      	adds	r7, #32
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40020000 	.word	0x40020000

080033ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08e      	sub	sp, #56	; 0x38
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	4b33      	ldr	r3, [pc, #204]	; (8003490 <HAL_InitTick+0xe4>)
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	4a32      	ldr	r2, [pc, #200]	; (8003490 <HAL_InitTick+0xe4>)
 80033c6:	f043 0308 	orr.w	r3, r3, #8
 80033ca:	6413      	str	r3, [r2, #64]	; 0x40
 80033cc:	4b30      	ldr	r3, [pc, #192]	; (8003490 <HAL_InitTick+0xe4>)
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80033d8:	f107 0210 	add.w	r2, r7, #16
 80033dc:	f107 0314 	add.w	r3, r7, #20
 80033e0:	4611      	mov	r1, r2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f003 fad6 	bl	8006994 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d103      	bne.n	80033fa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80033f2:	f003 fabb 	bl	800696c <HAL_RCC_GetPCLK1Freq>
 80033f6:	6378      	str	r0, [r7, #52]	; 0x34
 80033f8:	e004      	b.n	8003404 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80033fa:	f003 fab7 	bl	800696c <HAL_RCC_GetPCLK1Freq>
 80033fe:	4603      	mov	r3, r0
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003406:	4a23      	ldr	r2, [pc, #140]	; (8003494 <HAL_InitTick+0xe8>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	0c9b      	lsrs	r3, r3, #18
 800340e:	3b01      	subs	r3, #1
 8003410:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8003412:	4b21      	ldr	r3, [pc, #132]	; (8003498 <HAL_InitTick+0xec>)
 8003414:	4a21      	ldr	r2, [pc, #132]	; (800349c <HAL_InitTick+0xf0>)
 8003416:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8003418:	4b1f      	ldr	r3, [pc, #124]	; (8003498 <HAL_InitTick+0xec>)
 800341a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800341e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8003420:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <HAL_InitTick+0xec>)
 8003422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003424:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8003426:	4b1c      	ldr	r3, [pc, #112]	; (8003498 <HAL_InitTick+0xec>)
 8003428:	2200      	movs	r2, #0
 800342a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800342c:	4b1a      	ldr	r3, [pc, #104]	; (8003498 <HAL_InitTick+0xec>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003432:	4b19      	ldr	r3, [pc, #100]	; (8003498 <HAL_InitTick+0xec>)
 8003434:	2200      	movs	r2, #0
 8003436:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8003438:	4817      	ldr	r0, [pc, #92]	; (8003498 <HAL_InitTick+0xec>)
 800343a:	f003 ff0f 	bl	800725c <HAL_TIM_Base_Init>
 800343e:	4603      	mov	r3, r0
 8003440:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003444:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003448:	2b00      	cmp	r3, #0
 800344a:	d11b      	bne.n	8003484 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800344c:	4812      	ldr	r0, [pc, #72]	; (8003498 <HAL_InitTick+0xec>)
 800344e:	f003 ffd7 	bl	8007400 <HAL_TIM_Base_Start_IT>
 8003452:	4603      	mov	r3, r0
 8003454:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003458:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800345c:	2b00      	cmp	r3, #0
 800345e:	d111      	bne.n	8003484 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003460:	2032      	movs	r0, #50	; 0x32
 8003462:	f000 f9fd 	bl	8003860 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b0f      	cmp	r3, #15
 800346a:	d808      	bhi.n	800347e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800346c:	2200      	movs	r2, #0
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	2032      	movs	r0, #50	; 0x32
 8003472:	f000 f9d9 	bl	8003828 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003476:	4a0a      	ldr	r2, [pc, #40]	; (80034a0 <HAL_InitTick+0xf4>)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	e002      	b.n	8003484 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003484:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003488:	4618      	mov	r0, r3
 800348a:	3738      	adds	r7, #56	; 0x38
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40023800 	.word	0x40023800
 8003494:	431bde83 	.word	0x431bde83
 8003498:	20000868 	.word	0x20000868
 800349c:	40000c00 	.word	0x40000c00
 80034a0:	2000052c 	.word	0x2000052c

080034a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034a8:	e7fe      	b.n	80034a8 <NMI_Handler+0x4>

080034aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034aa:	b480      	push	{r7}
 80034ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034ae:	e7fe      	b.n	80034ae <HardFault_Handler+0x4>

080034b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034b4:	e7fe      	b.n	80034b4 <MemManage_Handler+0x4>

080034b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034b6:	b480      	push	{r7}
 80034b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034ba:	e7fe      	b.n	80034ba <BusFault_Handler+0x4>

080034bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034c0:	e7fe      	b.n	80034c0 <UsageFault_Handler+0x4>

080034c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034c2:	b480      	push	{r7}
 80034c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034c6:	bf00      	nop
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80034d4:	2002      	movs	r0, #2
 80034d6:	f000 fb87 	bl	8003be8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80034e4:	4802      	ldr	r0, [pc, #8]	; (80034f0 <TIM5_IRQHandler+0x10>)
 80034e6:	f004 f95b 	bl	80077a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000868 	.word	0x20000868

080034f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80034f8:	4802      	ldr	r0, [pc, #8]	; (8003504 <OTG_FS_IRQHandler+0x10>)
 80034fa:	f001 fc9c 	bl	8004e36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20006508 	.word	0x20006508

08003508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003510:	4a14      	ldr	r2, [pc, #80]	; (8003564 <_sbrk+0x5c>)
 8003512:	4b15      	ldr	r3, [pc, #84]	; (8003568 <_sbrk+0x60>)
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800351c:	4b13      	ldr	r3, [pc, #76]	; (800356c <_sbrk+0x64>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003524:	4b11      	ldr	r3, [pc, #68]	; (800356c <_sbrk+0x64>)
 8003526:	4a12      	ldr	r2, [pc, #72]	; (8003570 <_sbrk+0x68>)
 8003528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800352a:	4b10      	ldr	r3, [pc, #64]	; (800356c <_sbrk+0x64>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	429a      	cmp	r2, r3
 8003536:	d207      	bcs.n	8003548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003538:	f00b ff3a 	bl	800f3b0 <__errno>
 800353c:	4603      	mov	r3, r0
 800353e:	220c      	movs	r2, #12
 8003540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003542:	f04f 33ff 	mov.w	r3, #4294967295
 8003546:	e009      	b.n	800355c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003548:	4b08      	ldr	r3, [pc, #32]	; (800356c <_sbrk+0x64>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <_sbrk+0x64>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	4a05      	ldr	r2, [pc, #20]	; (800356c <_sbrk+0x64>)
 8003558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800355a:	68fb      	ldr	r3, [r7, #12]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20010000 	.word	0x20010000
 8003568:	00000400 	.word	0x00000400
 800356c:	200008b0 	.word	0x200008b0
 8003570:	20006c48 	.word	0x20006c48

08003574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <SystemInit+0x20>)
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357e:	4a05      	ldr	r2, [pc, #20]	; (8003594 <SystemInit+0x20>)
 8003580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003588:	bf00      	nop
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	e000ed00 	.word	0xe000ed00

08003598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800359c:	480d      	ldr	r0, [pc, #52]	; (80035d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800359e:	490e      	ldr	r1, [pc, #56]	; (80035d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035a0:	4a0e      	ldr	r2, [pc, #56]	; (80035dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035a4:	e002      	b.n	80035ac <LoopCopyDataInit>

080035a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035aa:	3304      	adds	r3, #4

080035ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035b0:	d3f9      	bcc.n	80035a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035b2:	4a0b      	ldr	r2, [pc, #44]	; (80035e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035b4:	4c0b      	ldr	r4, [pc, #44]	; (80035e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80035b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035b8:	e001      	b.n	80035be <LoopFillZerobss>

080035ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035bc:	3204      	adds	r2, #4

080035be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035c0:	d3fb      	bcc.n	80035ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035c2:	f7ff ffd7 	bl	8003574 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035c6:	f00b fef9 	bl	800f3bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035ca:	f7fe fc7f 	bl	8001ecc <main>
  bx  lr    
 80035ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80035d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035d8:	2000068c 	.word	0x2000068c
  ldr r2, =_sidata
 80035dc:	0801058c 	.word	0x0801058c
  ldr r2, =_sbss
 80035e0:	2000068c 	.word	0x2000068c
  ldr r4, =_ebss
 80035e4:	20006c44 	.word	0x20006c44

080035e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035e8:	e7fe      	b.n	80035e8 <ADC_IRQHandler>
	...

080035ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035f0:	4b0e      	ldr	r3, [pc, #56]	; (800362c <HAL_Init+0x40>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a0d      	ldr	r2, [pc, #52]	; (800362c <HAL_Init+0x40>)
 80035f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035fc:	4b0b      	ldr	r3, [pc, #44]	; (800362c <HAL_Init+0x40>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a0a      	ldr	r2, [pc, #40]	; (800362c <HAL_Init+0x40>)
 8003602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003606:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003608:	4b08      	ldr	r3, [pc, #32]	; (800362c <HAL_Init+0x40>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a07      	ldr	r2, [pc, #28]	; (800362c <HAL_Init+0x40>)
 800360e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003612:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003614:	2003      	movs	r0, #3
 8003616:	f000 f8fc 	bl	8003812 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800361a:	200f      	movs	r0, #15
 800361c:	f7ff fec6 	bl	80033ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003620:	f7ff fd64 	bl	80030ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023c00 	.word	0x40023c00

08003630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003634:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_IncTick+0x20>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	4b06      	ldr	r3, [pc, #24]	; (8003654 <HAL_IncTick+0x24>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4413      	add	r3, r2
 8003640:	4a04      	ldr	r2, [pc, #16]	; (8003654 <HAL_IncTick+0x24>)
 8003642:	6013      	str	r3, [r2, #0]
}
 8003644:	bf00      	nop
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20000530 	.word	0x20000530
 8003654:	200008b4 	.word	0x200008b4

08003658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  return uwTick;
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <HAL_GetTick+0x14>)
 800365e:	681b      	ldr	r3, [r3, #0]
}
 8003660:	4618      	mov	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	200008b4 	.word	0x200008b4

08003670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003678:	f7ff ffee 	bl	8003658 <HAL_GetTick>
 800367c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d005      	beq.n	8003696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800368a:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <HAL_Delay+0x44>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4413      	add	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003696:	bf00      	nop
 8003698:	f7ff ffde 	bl	8003658 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d8f7      	bhi.n	8003698 <HAL_Delay+0x28>
  {
  }
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000530 	.word	0x20000530

080036b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036c8:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <__NVIC_SetPriorityGrouping+0x44>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036d4:	4013      	ands	r3, r2
 80036d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ea:	4a04      	ldr	r2, [pc, #16]	; (80036fc <__NVIC_SetPriorityGrouping+0x44>)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	60d3      	str	r3, [r2, #12]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	e000ed00 	.word	0xe000ed00

08003700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003704:	4b04      	ldr	r3, [pc, #16]	; (8003718 <__NVIC_GetPriorityGrouping+0x18>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	0a1b      	lsrs	r3, r3, #8
 800370a:	f003 0307 	and.w	r3, r3, #7
}
 800370e:	4618      	mov	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372a:	2b00      	cmp	r3, #0
 800372c:	db0b      	blt.n	8003746 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	f003 021f 	and.w	r2, r3, #31
 8003734:	4907      	ldr	r1, [pc, #28]	; (8003754 <__NVIC_EnableIRQ+0x38>)
 8003736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	2001      	movs	r0, #1
 800373e:	fa00 f202 	lsl.w	r2, r0, r2
 8003742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	e000e100 	.word	0xe000e100

08003758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	6039      	str	r1, [r7, #0]
 8003762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003768:	2b00      	cmp	r3, #0
 800376a:	db0a      	blt.n	8003782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	b2da      	uxtb	r2, r3
 8003770:	490c      	ldr	r1, [pc, #48]	; (80037a4 <__NVIC_SetPriority+0x4c>)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	0112      	lsls	r2, r2, #4
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	440b      	add	r3, r1
 800377c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003780:	e00a      	b.n	8003798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4908      	ldr	r1, [pc, #32]	; (80037a8 <__NVIC_SetPriority+0x50>)
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	3b04      	subs	r3, #4
 8003790:	0112      	lsls	r2, r2, #4
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	440b      	add	r3, r1
 8003796:	761a      	strb	r2, [r3, #24]
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	e000e100 	.word	0xe000e100
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b089      	sub	sp, #36	; 0x24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f1c3 0307 	rsb	r3, r3, #7
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	bf28      	it	cs
 80037ca:	2304      	movcs	r3, #4
 80037cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3304      	adds	r3, #4
 80037d2:	2b06      	cmp	r3, #6
 80037d4:	d902      	bls.n	80037dc <NVIC_EncodePriority+0x30>
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	3b03      	subs	r3, #3
 80037da:	e000      	b.n	80037de <NVIC_EncodePriority+0x32>
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e0:	f04f 32ff 	mov.w	r2, #4294967295
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43da      	mvns	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	401a      	ands	r2, r3
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037f4:	f04f 31ff 	mov.w	r1, #4294967295
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	fa01 f303 	lsl.w	r3, r1, r3
 80037fe:	43d9      	mvns	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003804:	4313      	orrs	r3, r2
         );
}
 8003806:	4618      	mov	r0, r3
 8003808:	3724      	adds	r7, #36	; 0x24
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff ff4c 	bl	80036b8 <__NVIC_SetPriorityGrouping>
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800383a:	f7ff ff61 	bl	8003700 <__NVIC_GetPriorityGrouping>
 800383e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	6978      	ldr	r0, [r7, #20]
 8003846:	f7ff ffb1 	bl	80037ac <NVIC_EncodePriority>
 800384a:	4602      	mov	r2, r0
 800384c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff ff80 	bl	8003758 <__NVIC_SetPriority>
}
 8003858:	bf00      	nop
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff ff54 	bl	800371c <__NVIC_EnableIRQ>
}
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800387c:	b480      	push	{r7}
 800387e:	b089      	sub	sp, #36	; 0x24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800388e:	2300      	movs	r3, #0
 8003890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	e159      	b.n	8003b4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003898:	2201      	movs	r2, #1
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4013      	ands	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	f040 8148 	bne.w	8003b46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d005      	beq.n	80038ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d130      	bne.n	8003930 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	2203      	movs	r2, #3
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003904:	2201      	movs	r2, #1
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f003 0201 	and.w	r2, r3, #1
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	2b03      	cmp	r3, #3
 800393a:	d017      	beq.n	800396c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	2203      	movs	r2, #3
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d123      	bne.n	80039c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	08da      	lsrs	r2, r3, #3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3208      	adds	r2, #8
 8003980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	220f      	movs	r2, #15
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	08da      	lsrs	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3208      	adds	r2, #8
 80039ba:	69b9      	ldr	r1, [r7, #24]
 80039bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	2203      	movs	r2, #3
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0203 	and.w	r2, r3, #3
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80a2 	beq.w	8003b46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	4b57      	ldr	r3, [pc, #348]	; (8003b64 <HAL_GPIO_Init+0x2e8>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	4a56      	ldr	r2, [pc, #344]	; (8003b64 <HAL_GPIO_Init+0x2e8>)
 8003a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a10:	6453      	str	r3, [r2, #68]	; 0x44
 8003a12:	4b54      	ldr	r3, [pc, #336]	; (8003b64 <HAL_GPIO_Init+0x2e8>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a1e:	4a52      	ldr	r2, [pc, #328]	; (8003b68 <HAL_GPIO_Init+0x2ec>)
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	3302      	adds	r3, #2
 8003a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	220f      	movs	r2, #15
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a49      	ldr	r2, [pc, #292]	; (8003b6c <HAL_GPIO_Init+0x2f0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d019      	beq.n	8003a7e <HAL_GPIO_Init+0x202>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a48      	ldr	r2, [pc, #288]	; (8003b70 <HAL_GPIO_Init+0x2f4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <HAL_GPIO_Init+0x1fe>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a47      	ldr	r2, [pc, #284]	; (8003b74 <HAL_GPIO_Init+0x2f8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00d      	beq.n	8003a76 <HAL_GPIO_Init+0x1fa>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a46      	ldr	r2, [pc, #280]	; (8003b78 <HAL_GPIO_Init+0x2fc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d007      	beq.n	8003a72 <HAL_GPIO_Init+0x1f6>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a45      	ldr	r2, [pc, #276]	; (8003b7c <HAL_GPIO_Init+0x300>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d101      	bne.n	8003a6e <HAL_GPIO_Init+0x1f2>
 8003a6a:	2304      	movs	r3, #4
 8003a6c:	e008      	b.n	8003a80 <HAL_GPIO_Init+0x204>
 8003a6e:	2307      	movs	r3, #7
 8003a70:	e006      	b.n	8003a80 <HAL_GPIO_Init+0x204>
 8003a72:	2303      	movs	r3, #3
 8003a74:	e004      	b.n	8003a80 <HAL_GPIO_Init+0x204>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e002      	b.n	8003a80 <HAL_GPIO_Init+0x204>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <HAL_GPIO_Init+0x204>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	f002 0203 	and.w	r2, r2, #3
 8003a86:	0092      	lsls	r2, r2, #2
 8003a88:	4093      	lsls	r3, r2
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a90:	4935      	ldr	r1, [pc, #212]	; (8003b68 <HAL_GPIO_Init+0x2ec>)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	089b      	lsrs	r3, r3, #2
 8003a96:	3302      	adds	r3, #2
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a9e:	4b38      	ldr	r3, [pc, #224]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ac2:	4a2f      	ldr	r2, [pc, #188]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ac8:	4b2d      	ldr	r3, [pc, #180]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aec:	4a24      	ldr	r2, [pc, #144]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003af2:	4b23      	ldr	r3, [pc, #140]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	43db      	mvns	r3, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4013      	ands	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b16:	4a1a      	ldr	r2, [pc, #104]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b1c:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b40:	4a0f      	ldr	r2, [pc, #60]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	2b0f      	cmp	r3, #15
 8003b50:	f67f aea2 	bls.w	8003898 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	3724      	adds	r7, #36	; 0x24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40013800 	.word	0x40013800
 8003b6c:	40020000 	.word	0x40020000
 8003b70:	40020400 	.word	0x40020400
 8003b74:	40020800 	.word	0x40020800
 8003b78:	40020c00 	.word	0x40020c00
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	40013c00 	.word	0x40013c00

08003b84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	887b      	ldrh	r3, [r7, #2]
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
 8003ba0:	e001      	b.n	8003ba6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	807b      	strh	r3, [r7, #2]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bc4:	787b      	ldrb	r3, [r7, #1]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bca:	887a      	ldrh	r2, [r7, #2]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bd0:	e003      	b.n	8003bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bd2:	887b      	ldrh	r3, [r7, #2]
 8003bd4:	041a      	lsls	r2, r3, #16
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	619a      	str	r2, [r3, #24]
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bf2:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	88fb      	ldrh	r3, [r7, #6]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d006      	beq.n	8003c0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bfe:	4a05      	ldr	r2, [pc, #20]	; (8003c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe f8b6 	bl	8001d78 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40013c00 	.word	0x40013c00

08003c18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e12b      	b.n	8003e82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff fa80 	bl	8003144 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2224      	movs	r2, #36	; 0x24
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0201 	bic.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c7c:	f002 fe76 	bl	800696c <HAL_RCC_GetPCLK1Freq>
 8003c80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	4a81      	ldr	r2, [pc, #516]	; (8003e8c <HAL_I2C_Init+0x274>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d807      	bhi.n	8003c9c <HAL_I2C_Init+0x84>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4a80      	ldr	r2, [pc, #512]	; (8003e90 <HAL_I2C_Init+0x278>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	bf94      	ite	ls
 8003c94:	2301      	movls	r3, #1
 8003c96:	2300      	movhi	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	e006      	b.n	8003caa <HAL_I2C_Init+0x92>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4a7d      	ldr	r2, [pc, #500]	; (8003e94 <HAL_I2C_Init+0x27c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	bf94      	ite	ls
 8003ca4:	2301      	movls	r3, #1
 8003ca6:	2300      	movhi	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e0e7      	b.n	8003e82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4a78      	ldr	r2, [pc, #480]	; (8003e98 <HAL_I2C_Init+0x280>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	0c9b      	lsrs	r3, r3, #18
 8003cbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4a6a      	ldr	r2, [pc, #424]	; (8003e8c <HAL_I2C_Init+0x274>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d802      	bhi.n	8003cec <HAL_I2C_Init+0xd4>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	e009      	b.n	8003d00 <HAL_I2C_Init+0xe8>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	4a69      	ldr	r2, [pc, #420]	; (8003e9c <HAL_I2C_Init+0x284>)
 8003cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfc:	099b      	lsrs	r3, r3, #6
 8003cfe:	3301      	adds	r3, #1
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	430b      	orrs	r3, r1
 8003d06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	495c      	ldr	r1, [pc, #368]	; (8003e8c <HAL_I2C_Init+0x274>)
 8003d1c:	428b      	cmp	r3, r1
 8003d1e:	d819      	bhi.n	8003d54 <HAL_I2C_Init+0x13c>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	1e59      	subs	r1, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d2e:	1c59      	adds	r1, r3, #1
 8003d30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d34:	400b      	ands	r3, r1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_I2C_Init+0x138>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1e59      	subs	r1, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d48:	3301      	adds	r3, #1
 8003d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4e:	e051      	b.n	8003df4 <HAL_I2C_Init+0x1dc>
 8003d50:	2304      	movs	r3, #4
 8003d52:	e04f      	b.n	8003df4 <HAL_I2C_Init+0x1dc>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d111      	bne.n	8003d80 <HAL_I2C_Init+0x168>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	1e58      	subs	r0, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	440b      	add	r3, r1
 8003d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d6e:	3301      	adds	r3, #1
 8003d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	e012      	b.n	8003da6 <HAL_I2C_Init+0x18e>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	1e58      	subs	r0, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6859      	ldr	r1, [r3, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	0099      	lsls	r1, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d96:	3301      	adds	r3, #1
 8003d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	bf0c      	ite	eq
 8003da0:	2301      	moveq	r3, #1
 8003da2:	2300      	movne	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_I2C_Init+0x196>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e022      	b.n	8003df4 <HAL_I2C_Init+0x1dc>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10e      	bne.n	8003dd4 <HAL_I2C_Init+0x1bc>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1e58      	subs	r0, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6859      	ldr	r1, [r3, #4]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	440b      	add	r3, r1
 8003dc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dc8:	3301      	adds	r3, #1
 8003dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd2:	e00f      	b.n	8003df4 <HAL_I2C_Init+0x1dc>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	1e58      	subs	r0, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6859      	ldr	r1, [r3, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	0099      	lsls	r1, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dea:	3301      	adds	r3, #1
 8003dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	6809      	ldr	r1, [r1, #0]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69da      	ldr	r2, [r3, #28]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6911      	ldr	r1, [r2, #16]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	68d2      	ldr	r2, [r2, #12]
 8003e2e:	4311      	orrs	r1, r2
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	000186a0 	.word	0x000186a0
 8003e90:	001e847f 	.word	0x001e847f
 8003e94:	003d08ff 	.word	0x003d08ff
 8003e98:	431bde83 	.word	0x431bde83
 8003e9c:	10624dd3 	.word	0x10624dd3

08003ea0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	4608      	mov	r0, r1
 8003eaa:	4611      	mov	r1, r2
 8003eac:	461a      	mov	r2, r3
 8003eae:	4603      	mov	r3, r0
 8003eb0:	817b      	strh	r3, [r7, #10]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	813b      	strh	r3, [r7, #8]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eba:	f7ff fbcd 	bl	8003658 <HAL_GetTick>
 8003ebe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	f040 80d9 	bne.w	8004080 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	2319      	movs	r3, #25
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	496d      	ldr	r1, [pc, #436]	; (800408c <HAL_I2C_Mem_Write+0x1ec>)
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 fc7f 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e0cc      	b.n	8004082 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_I2C_Mem_Write+0x56>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e0c5      	b.n	8004082 <HAL_I2C_Mem_Write+0x1e2>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d007      	beq.n	8003f1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2221      	movs	r2, #33	; 0x21
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2240      	movs	r2, #64	; 0x40
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a3a      	ldr	r2, [r7, #32]
 8003f46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4a4d      	ldr	r2, [pc, #308]	; (8004090 <HAL_I2C_Mem_Write+0x1f0>)
 8003f5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f5e:	88f8      	ldrh	r0, [r7, #6]
 8003f60:	893a      	ldrh	r2, [r7, #8]
 8003f62:	8979      	ldrh	r1, [r7, #10]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 fab6 	bl	80044e0 <I2C_RequestMemoryWrite>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d052      	beq.n	8004020 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e081      	b.n	8004082 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 fd00 	bl	8004988 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00d      	beq.n	8003faa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d107      	bne.n	8003fa6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e06b      	b.n	8004082 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	781a      	ldrb	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d11b      	bne.n	8004020 <HAL_I2C_Mem_Write+0x180>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d017      	beq.n	8004020 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	781a      	ldrb	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1aa      	bne.n	8003f7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 fcec 	bl	8004a0a <I2C_WaitOnBTFFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00d      	beq.n	8004054 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	2b04      	cmp	r3, #4
 800403e:	d107      	bne.n	8004050 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800404e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e016      	b.n	8004082 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	e000      	b.n	8004082 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004080:	2302      	movs	r3, #2
  }
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	00100002 	.word	0x00100002
 8004090:	ffff0000 	.word	0xffff0000

08004094 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08c      	sub	sp, #48	; 0x30
 8004098:	af02      	add	r7, sp, #8
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	4608      	mov	r0, r1
 800409e:	4611      	mov	r1, r2
 80040a0:	461a      	mov	r2, r3
 80040a2:	4603      	mov	r3, r0
 80040a4:	817b      	strh	r3, [r7, #10]
 80040a6:	460b      	mov	r3, r1
 80040a8:	813b      	strh	r3, [r7, #8]
 80040aa:	4613      	mov	r3, r2
 80040ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040ae:	f7ff fad3 	bl	8003658 <HAL_GetTick>
 80040b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b20      	cmp	r3, #32
 80040be:	f040 8208 	bne.w	80044d2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	2319      	movs	r3, #25
 80040c8:	2201      	movs	r2, #1
 80040ca:	497b      	ldr	r1, [pc, #492]	; (80042b8 <HAL_I2C_Mem_Read+0x224>)
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 fb85 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80040d8:	2302      	movs	r3, #2
 80040da:	e1fb      	b.n	80044d4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_I2C_Mem_Read+0x56>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e1f4      	b.n	80044d4 <HAL_I2C_Mem_Read+0x440>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d007      	beq.n	8004110 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800411e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2222      	movs	r2, #34	; 0x22
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2240      	movs	r2, #64	; 0x40
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004140:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4a5b      	ldr	r2, [pc, #364]	; (80042bc <HAL_I2C_Mem_Read+0x228>)
 8004150:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004152:	88f8      	ldrh	r0, [r7, #6]
 8004154:	893a      	ldrh	r2, [r7, #8]
 8004156:	8979      	ldrh	r1, [r7, #10]
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	4603      	mov	r3, r0
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 fa52 	bl	800460c <I2C_RequestMemoryRead>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e1b0      	b.n	80044d4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004176:	2b00      	cmp	r3, #0
 8004178:	d113      	bne.n	80041a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417a:	2300      	movs	r3, #0
 800417c:	623b      	str	r3, [r7, #32]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	623b      	str	r3, [r7, #32]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	623b      	str	r3, [r7, #32]
 800418e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	e184      	b.n	80044ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d11b      	bne.n	80041e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	61fb      	str	r3, [r7, #28]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	e164      	b.n	80044ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d11b      	bne.n	8004222 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004208:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420a:	2300      	movs	r3, #0
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	61bb      	str	r3, [r7, #24]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	61bb      	str	r3, [r7, #24]
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	e144      	b.n	80044ac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004238:	e138      	b.n	80044ac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423e:	2b03      	cmp	r3, #3
 8004240:	f200 80f1 	bhi.w	8004426 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004248:	2b01      	cmp	r3, #1
 800424a:	d123      	bne.n	8004294 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800424c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fc1b 	bl	8004a8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e139      	b.n	80044d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004292:	e10b      	b.n	80044ac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004298:	2b02      	cmp	r3, #2
 800429a:	d14e      	bne.n	800433a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a2:	2200      	movs	r2, #0
 80042a4:	4906      	ldr	r1, [pc, #24]	; (80042c0 <HAL_I2C_Mem_Read+0x22c>)
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 fa98 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d008      	beq.n	80042c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e10e      	b.n	80044d4 <HAL_I2C_Mem_Read+0x440>
 80042b6:	bf00      	nop
 80042b8:	00100002 	.word	0x00100002
 80042bc:	ffff0000 	.word	0xffff0000
 80042c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004338:	e0b8      	b.n	80044ac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004340:	2200      	movs	r2, #0
 8004342:	4966      	ldr	r1, [pc, #408]	; (80044dc <HAL_I2C_Mem_Read+0x448>)
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 fa49 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0bf      	b.n	80044d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004362:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691a      	ldr	r2, [r3, #16]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	2200      	movs	r2, #0
 800439e:	494f      	ldr	r1, [pc, #316]	; (80044dc <HAL_I2C_Mem_Read+0x448>)
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 fa1b 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e091      	b.n	80044d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691a      	ldr	r2, [r3, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004424:	e042      	b.n	80044ac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004428:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fb2e 	bl	8004a8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e04c      	b.n	80044d4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f003 0304 	and.w	r3, r3, #4
 8004476:	2b04      	cmp	r3, #4
 8004478:	d118      	bne.n	80044ac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	b2d2      	uxtb	r2, r2
 8004486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f47f aec2 	bne.w	800423a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	e000      	b.n	80044d4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80044d2:	2302      	movs	r3, #2
  }
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3728      	adds	r7, #40	; 0x28
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	00010004 	.word	0x00010004

080044e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	4608      	mov	r0, r1
 80044ea:	4611      	mov	r1, r2
 80044ec:	461a      	mov	r2, r3
 80044ee:	4603      	mov	r3, r0
 80044f0:	817b      	strh	r3, [r7, #10]
 80044f2:	460b      	mov	r3, r1
 80044f4:	813b      	strh	r3, [r7, #8]
 80044f6:	4613      	mov	r3, r2
 80044f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004508:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	2200      	movs	r2, #0
 8004512:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f960 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00d      	beq.n	800453e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004530:	d103      	bne.n	800453a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004538:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e05f      	b.n	80045fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800453e:	897b      	ldrh	r3, [r7, #10]
 8004540:	b2db      	uxtb	r3, r3
 8004542:	461a      	mov	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800454c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	6a3a      	ldr	r2, [r7, #32]
 8004552:	492d      	ldr	r1, [pc, #180]	; (8004608 <I2C_RequestMemoryWrite+0x128>)
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f998 	bl	800488a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e04c      	b.n	80045fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800457a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457c:	6a39      	ldr	r1, [r7, #32]
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 fa02 	bl	8004988 <I2C_WaitOnTXEFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00d      	beq.n	80045a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	2b04      	cmp	r3, #4
 8004590:	d107      	bne.n	80045a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e02b      	b.n	80045fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045a6:	88fb      	ldrh	r3, [r7, #6]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d105      	bne.n	80045b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045ac:	893b      	ldrh	r3, [r7, #8]
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	611a      	str	r2, [r3, #16]
 80045b6:	e021      	b.n	80045fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045b8:	893b      	ldrh	r3, [r7, #8]
 80045ba:	0a1b      	lsrs	r3, r3, #8
 80045bc:	b29b      	uxth	r3, r3
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c8:	6a39      	ldr	r1, [r7, #32]
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 f9dc 	bl	8004988 <I2C_WaitOnTXEFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00d      	beq.n	80045f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d107      	bne.n	80045ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e005      	b.n	80045fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045f2:	893b      	ldrh	r3, [r7, #8]
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	00010002 	.word	0x00010002

0800460c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	4608      	mov	r0, r1
 8004616:	4611      	mov	r1, r2
 8004618:	461a      	mov	r2, r3
 800461a:	4603      	mov	r3, r0
 800461c:	817b      	strh	r3, [r7, #10]
 800461e:	460b      	mov	r3, r1
 8004620:	813b      	strh	r3, [r7, #8]
 8004622:	4613      	mov	r3, r2
 8004624:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004634:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004644:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	2200      	movs	r2, #0
 800464e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f8c2 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00d      	beq.n	800467a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800466c:	d103      	bne.n	8004676 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004674:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e0aa      	b.n	80047d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800467a:	897b      	ldrh	r3, [r7, #10]
 800467c:	b2db      	uxtb	r3, r3
 800467e:	461a      	mov	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004688:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	6a3a      	ldr	r2, [r7, #32]
 800468e:	4952      	ldr	r1, [pc, #328]	; (80047d8 <I2C_RequestMemoryRead+0x1cc>)
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f8fa 	bl	800488a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e097      	b.n	80047d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b8:	6a39      	ldr	r1, [r7, #32]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f964 	bl	8004988 <I2C_WaitOnTXEFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00d      	beq.n	80046e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d107      	bne.n	80046de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e076      	b.n	80047d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046e2:	88fb      	ldrh	r3, [r7, #6]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d105      	bne.n	80046f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046e8:	893b      	ldrh	r3, [r7, #8]
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	611a      	str	r2, [r3, #16]
 80046f2:	e021      	b.n	8004738 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046f4:	893b      	ldrh	r3, [r7, #8]
 80046f6:	0a1b      	lsrs	r3, r3, #8
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004704:	6a39      	ldr	r1, [r7, #32]
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f93e 	bl	8004988 <I2C_WaitOnTXEFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	2b04      	cmp	r3, #4
 8004718:	d107      	bne.n	800472a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004728:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e050      	b.n	80047d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800472e:	893b      	ldrh	r3, [r7, #8]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473a:	6a39      	ldr	r1, [r7, #32]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f923 	bl	8004988 <I2C_WaitOnTXEFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00d      	beq.n	8004764 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	2b04      	cmp	r3, #4
 800474e:	d107      	bne.n	8004760 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800475e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e035      	b.n	80047d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004772:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	2200      	movs	r2, #0
 800477c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f82b 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00d      	beq.n	80047a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800479a:	d103      	bne.n	80047a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e013      	b.n	80047d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047a8:	897b      	ldrh	r3, [r7, #10]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	f043 0301 	orr.w	r3, r3, #1
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	6a3a      	ldr	r2, [r7, #32]
 80047bc:	4906      	ldr	r1, [pc, #24]	; (80047d8 <I2C_RequestMemoryRead+0x1cc>)
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 f863 	bl	800488a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	00010002 	.word	0x00010002

080047dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ec:	e025      	b.n	800483a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f4:	d021      	beq.n	800483a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f6:	f7fe ff2f 	bl	8003658 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d302      	bcc.n	800480c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d116      	bne.n	800483a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f043 0220 	orr.w	r2, r3, #32
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e023      	b.n	8004882 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	0c1b      	lsrs	r3, r3, #16
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	d10d      	bne.n	8004860 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	43da      	mvns	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4013      	ands	r3, r2
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	bf0c      	ite	eq
 8004856:	2301      	moveq	r3, #1
 8004858:	2300      	movne	r3, #0
 800485a:	b2db      	uxtb	r3, r3
 800485c:	461a      	mov	r2, r3
 800485e:	e00c      	b.n	800487a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	43da      	mvns	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4013      	ands	r3, r2
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	bf0c      	ite	eq
 8004872:	2301      	moveq	r3, #1
 8004874:	2300      	movne	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	429a      	cmp	r2, r3
 800487e:	d0b6      	beq.n	80047ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b084      	sub	sp, #16
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004898:	e051      	b.n	800493e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a8:	d123      	bne.n	80048f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	f043 0204 	orr.w	r2, r3, #4
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e046      	b.n	8004980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f8:	d021      	beq.n	800493e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fa:	f7fe fead 	bl	8003658 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	429a      	cmp	r2, r3
 8004908:	d302      	bcc.n	8004910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d116      	bne.n	800493e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	f043 0220 	orr.w	r2, r3, #32
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e020      	b.n	8004980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	0c1b      	lsrs	r3, r3, #16
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	d10c      	bne.n	8004962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	43da      	mvns	r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4013      	ands	r3, r2
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	bf14      	ite	ne
 800495a:	2301      	movne	r3, #1
 800495c:	2300      	moveq	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	e00b      	b.n	800497a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	43da      	mvns	r2, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	4013      	ands	r3, r2
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	bf14      	ite	ne
 8004974:	2301      	movne	r3, #1
 8004976:	2300      	moveq	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d18d      	bne.n	800489a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004994:	e02d      	b.n	80049f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f8ce 	bl	8004b38 <I2C_IsAcknowledgeFailed>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e02d      	b.n	8004a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ac:	d021      	beq.n	80049f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ae:	f7fe fe53 	bl	8003658 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d302      	bcc.n	80049c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d116      	bne.n	80049f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f043 0220 	orr.w	r2, r3, #32
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e007      	b.n	8004a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fc:	2b80      	cmp	r3, #128	; 0x80
 80049fe:	d1ca      	bne.n	8004996 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a16:	e02d      	b.n	8004a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 f88d 	bl	8004b38 <I2C_IsAcknowledgeFailed>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e02d      	b.n	8004a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2e:	d021      	beq.n	8004a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a30:	f7fe fe12 	bl	8003658 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d302      	bcc.n	8004a46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d116      	bne.n	8004a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	f043 0220 	orr.w	r2, r3, #32
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e007      	b.n	8004a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d1ca      	bne.n	8004a18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a98:	e042      	b.n	8004b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b10      	cmp	r3, #16
 8004aa6:	d119      	bne.n	8004adc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0210 	mvn.w	r2, #16
 8004ab0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e029      	b.n	8004b30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004adc:	f7fe fdbc 	bl	8003658 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d302      	bcc.n	8004af2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d116      	bne.n	8004b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	f043 0220 	orr.w	r2, r3, #32
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e007      	b.n	8004b30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2a:	2b40      	cmp	r3, #64	; 0x40
 8004b2c:	d1b5      	bne.n	8004a9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b4e:	d11b      	bne.n	8004b88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	f043 0204 	orr.w	r2, r3, #4
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b98:	b08f      	sub	sp, #60	; 0x3c
 8004b9a:	af0a      	add	r7, sp, #40	; 0x28
 8004b9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e10f      	b.n	8004dc8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f00a f8ea 	bl	800ed9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2203      	movs	r2, #3
 8004bcc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d102      	bne.n	8004be2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f003 fcf7 	bl	80085da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	603b      	str	r3, [r7, #0]
 8004bf2:	687e      	ldr	r6, [r7, #4]
 8004bf4:	466d      	mov	r5, sp
 8004bf6:	f106 0410 	add.w	r4, r6, #16
 8004bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c06:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c0a:	1d33      	adds	r3, r6, #4
 8004c0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c0e:	6838      	ldr	r0, [r7, #0]
 8004c10:	f003 fbce 	bl	80083b0 <USB_CoreInit>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d005      	beq.n	8004c26 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e0d0      	b.n	8004dc8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f003 fce5 	bl	80085fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c32:	2300      	movs	r3, #0
 8004c34:	73fb      	strb	r3, [r7, #15]
 8004c36:	e04a      	b.n	8004cce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c38:	7bfa      	ldrb	r2, [r7, #15]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	4413      	add	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	333d      	adds	r3, #61	; 0x3d
 8004c48:	2201      	movs	r2, #1
 8004c4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c4c:	7bfa      	ldrb	r2, [r7, #15]
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	4613      	mov	r3, r2
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	4413      	add	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	333c      	adds	r3, #60	; 0x3c
 8004c5c:	7bfa      	ldrb	r2, [r7, #15]
 8004c5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c60:	7bfa      	ldrb	r2, [r7, #15]
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	b298      	uxth	r0, r3
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	3344      	adds	r3, #68	; 0x44
 8004c74:	4602      	mov	r2, r0
 8004c76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c78:	7bfa      	ldrb	r2, [r7, #15]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	4413      	add	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	3340      	adds	r3, #64	; 0x40
 8004c88:	2200      	movs	r2, #0
 8004c8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c8c:	7bfa      	ldrb	r2, [r7, #15]
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	4613      	mov	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	3348      	adds	r3, #72	; 0x48
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ca0:	7bfa      	ldrb	r2, [r7, #15]
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	334c      	adds	r3, #76	; 0x4c
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004cb4:	7bfa      	ldrb	r2, [r7, #15]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	3354      	adds	r3, #84	; 0x54
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	73fb      	strb	r3, [r7, #15]
 8004cce:	7bfa      	ldrb	r2, [r7, #15]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d3af      	bcc.n	8004c38 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cd8:	2300      	movs	r3, #0
 8004cda:	73fb      	strb	r3, [r7, #15]
 8004cdc:	e044      	b.n	8004d68 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004cde:	7bfa      	ldrb	r2, [r7, #15]
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004cf4:	7bfa      	ldrb	r2, [r7, #15]
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004d06:	7bfa      	ldrb	r2, [r7, #15]
 8004d08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d0a:	7bfa      	ldrb	r2, [r7, #15]
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	4413      	add	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d20:	7bfa      	ldrb	r2, [r7, #15]
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	4613      	mov	r3, r2
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	4413      	add	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d36:	7bfa      	ldrb	r2, [r7, #15]
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	4413      	add	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d4c:	7bfa      	ldrb	r2, [r7, #15]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	3301      	adds	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
 8004d68:	7bfa      	ldrb	r2, [r7, #15]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d3b5      	bcc.n	8004cde <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	603b      	str	r3, [r7, #0]
 8004d78:	687e      	ldr	r6, [r7, #4]
 8004d7a:	466d      	mov	r5, sp
 8004d7c:	f106 0410 	add.w	r4, r6, #16
 8004d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d90:	1d33      	adds	r3, r6, #4
 8004d92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d94:	6838      	ldr	r0, [r7, #0]
 8004d96:	f003 fc7d 	bl	8008694 <USB_DevInit>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e00d      	b.n	8004dc8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f004 fdcc 	bl	800995e <USB_DevDisconnect>

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004dd0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d101      	bne.n	8004dec <HAL_PCD_Start+0x1c>
 8004de8:	2302      	movs	r3, #2
 8004dea:	e020      	b.n	8004e2e <HAL_PCD_Start+0x5e>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d109      	bne.n	8004e10 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d005      	beq.n	8004e10 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f003 fbcf 	bl	80085b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f004 fd7c 	bl	800991c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004e36:	b590      	push	{r4, r7, lr}
 8004e38:	b08d      	sub	sp, #52	; 0x34
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f004 fe3a 	bl	8009ac6 <USB_GetMode>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f040 848a 	bne.w	800576e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f004 fd9e 	bl	80099a0 <USB_ReadInterrupts>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 8480 	beq.w	800576c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	0a1b      	lsrs	r3, r3, #8
 8004e76:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f004 fd8b 	bl	80099a0 <USB_ReadInterrupts>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d107      	bne.n	8004ea4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695a      	ldr	r2, [r3, #20]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f002 0202 	and.w	r2, r2, #2
 8004ea2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f004 fd79 	bl	80099a0 <USB_ReadInterrupts>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	d161      	bne.n	8004f7c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699a      	ldr	r2, [r3, #24]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0210 	bic.w	r2, r2, #16
 8004ec6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	f003 020f 	and.w	r2, r3, #15
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	0c5b      	lsrs	r3, r3, #17
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d124      	bne.n	8004f3e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d035      	beq.n	8004f6c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	091b      	lsrs	r3, r3, #4
 8004f08:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	6a38      	ldr	r0, [r7, #32]
 8004f14:	f004 fbb0 	bl	8009678 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	091b      	lsrs	r3, r3, #4
 8004f20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f24:	441a      	add	r2, r3
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	6a1a      	ldr	r2, [r3, #32]
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	091b      	lsrs	r3, r3, #4
 8004f32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f36:	441a      	add	r2, r3
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	621a      	str	r2, [r3, #32]
 8004f3c:	e016      	b.n	8004f6c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	0c5b      	lsrs	r3, r3, #17
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	2b06      	cmp	r3, #6
 8004f48:	d110      	bne.n	8004f6c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f50:	2208      	movs	r2, #8
 8004f52:	4619      	mov	r1, r3
 8004f54:	6a38      	ldr	r0, [r7, #32]
 8004f56:	f004 fb8f 	bl	8009678 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	6a1a      	ldr	r2, [r3, #32]
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	091b      	lsrs	r3, r3, #4
 8004f62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f66:	441a      	add	r2, r3
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0210 	orr.w	r2, r2, #16
 8004f7a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f004 fd0d 	bl	80099a0 <USB_ReadInterrupts>
 8004f86:	4603      	mov	r3, r0
 8004f88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f90:	f040 80a7 	bne.w	80050e2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f004 fd12 	bl	80099c6 <USB_ReadDevAllOutEpInterrupt>
 8004fa2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004fa4:	e099      	b.n	80050da <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 808e 	beq.w	80050ce <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	4611      	mov	r1, r2
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f004 fd36 	bl	8009a2e <USB_ReadDevOutEPInterrupt>
 8004fc2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00c      	beq.n	8004fe8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fda:	461a      	mov	r2, r3
 8004fdc:	2301      	movs	r3, #1
 8004fde:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004fe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fec2 	bl	8005d6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00c      	beq.n	800500c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffe:	461a      	mov	r2, r3
 8005000:	2308      	movs	r3, #8
 8005002:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 ff98 	bl	8005f3c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f003 0310 	and.w	r3, r3, #16
 8005012:	2b00      	cmp	r3, #0
 8005014:	d008      	beq.n	8005028 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005022:	461a      	mov	r2, r3
 8005024:	2310      	movs	r3, #16
 8005026:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d030      	beq.n	8005094 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503a:	2b80      	cmp	r3, #128	; 0x80
 800503c:	d109      	bne.n	8005052 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	69fa      	ldr	r2, [r7, #28]
 8005048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800504c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005050:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005054:	4613      	mov	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	4413      	add	r3, r2
 8005064:	3304      	adds	r3, #4
 8005066:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	78db      	ldrb	r3, [r3, #3]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d108      	bne.n	8005082 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	2200      	movs	r2, #0
 8005074:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	b2db      	uxtb	r3, r3
 800507a:	4619      	mov	r1, r3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f009 ff89 	bl	800ef94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508e:	461a      	mov	r2, r3
 8005090:	2302      	movs	r3, #2
 8005092:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d008      	beq.n	80050b0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050aa:	461a      	mov	r2, r3
 80050ac:	2320      	movs	r3, #32
 80050ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d009      	beq.n	80050ce <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c6:	461a      	mov	r2, r3
 80050c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	3301      	adds	r3, #1
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	085b      	lsrs	r3, r3, #1
 80050d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80050da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f47f af62 	bne.w	8004fa6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f004 fc5a 	bl	80099a0 <USB_ReadInterrupts>
 80050ec:	4603      	mov	r3, r0
 80050ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050f6:	f040 80db 	bne.w	80052b0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f004 fc7b 	bl	80099fa <USB_ReadDevAllInEpInterrupt>
 8005104:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800510a:	e0cd      	b.n	80052a8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 80c2 	beq.w	800529c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	4611      	mov	r1, r2
 8005122:	4618      	mov	r0, r3
 8005124:	f004 fca1 	bl	8009a6a <USB_ReadDevInEPInterrupt>
 8005128:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d057      	beq.n	80051e4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	2201      	movs	r2, #1
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	43db      	mvns	r3, r3
 800514e:	69f9      	ldr	r1, [r7, #28]
 8005150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005154:	4013      	ands	r3, r2
 8005156:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005164:	461a      	mov	r2, r3
 8005166:	2301      	movs	r3, #1
 8005168:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d132      	bne.n	80051d8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005176:	4613      	mov	r3, r2
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	334c      	adds	r3, #76	; 0x4c
 8005182:	6819      	ldr	r1, [r3, #0]
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005188:	4613      	mov	r3, r2
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4403      	add	r3, r0
 8005192:	3348      	adds	r3, #72	; 0x48
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4419      	add	r1, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519c:	4613      	mov	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4403      	add	r3, r0
 80051a6:	334c      	adds	r3, #76	; 0x4c
 80051a8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d113      	bne.n	80051d8 <HAL_PCD_IRQHandler+0x3a2>
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b4:	4613      	mov	r3, r2
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	3354      	adds	r3, #84	; 0x54
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d108      	bne.n	80051d8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80051d0:	461a      	mov	r2, r3
 80051d2:	2101      	movs	r1, #1
 80051d4:	f004 fca8 	bl	8009b28 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	4619      	mov	r1, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f009 fe5d 	bl	800ee9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d008      	beq.n	8005200 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fa:	461a      	mov	r2, r3
 80051fc:	2308      	movs	r3, #8
 80051fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f003 0310 	and.w	r3, r3, #16
 8005206:	2b00      	cmp	r3, #0
 8005208:	d008      	beq.n	800521c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005216:	461a      	mov	r2, r3
 8005218:	2310      	movs	r3, #16
 800521a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	d008      	beq.n	8005238 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005232:	461a      	mov	r2, r3
 8005234:	2340      	movs	r3, #64	; 0x40
 8005236:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d023      	beq.n	800528a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005242:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005244:	6a38      	ldr	r0, [r7, #32]
 8005246:	f003 fb89 	bl	800895c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800524a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524c:	4613      	mov	r3, r2
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	4413      	add	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	3338      	adds	r3, #56	; 0x38
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	4413      	add	r3, r2
 800525a:	3304      	adds	r3, #4
 800525c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	78db      	ldrb	r3, [r3, #3]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d108      	bne.n	8005278 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2200      	movs	r2, #0
 800526a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	b2db      	uxtb	r3, r3
 8005270:	4619      	mov	r1, r3
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f009 fea0 	bl	800efb8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005284:	461a      	mov	r2, r3
 8005286:	2302      	movs	r3, #2
 8005288:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fcdb 	bl	8005c52 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	3301      	adds	r3, #1
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80052a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a4:	085b      	lsrs	r3, r3, #1
 80052a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f47f af2e 	bne.w	800510c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f004 fb73 	bl	80099a0 <USB_ReadInterrupts>
 80052ba:	4603      	mov	r3, r0
 80052bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052c4:	d122      	bne.n	800530c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052d4:	f023 0301 	bic.w	r3, r3, #1
 80052d8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d108      	bne.n	80052f6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80052ec:	2100      	movs	r1, #0
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fec2 	bl	8006078 <HAL_PCDEx_LPM_Callback>
 80052f4:	e002      	b.n	80052fc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f009 fe3e 	bl	800ef78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695a      	ldr	r2, [r3, #20]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800530a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	f004 fb45 	bl	80099a0 <USB_ReadInterrupts>
 8005316:	4603      	mov	r3, r0
 8005318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800531c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005320:	d112      	bne.n	8005348 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b01      	cmp	r3, #1
 8005330:	d102      	bne.n	8005338 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f009 fdfa 	bl	800ef2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695a      	ldr	r2, [r3, #20]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005346:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f004 fb27 	bl	80099a0 <USB_ReadInterrupts>
 8005352:	4603      	mov	r3, r0
 8005354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535c:	f040 80b7 	bne.w	80054ce <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	69fa      	ldr	r2, [r7, #28]
 800536a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800536e:	f023 0301 	bic.w	r3, r3, #1
 8005372:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2110      	movs	r1, #16
 800537a:	4618      	mov	r0, r3
 800537c:	f003 faee 	bl	800895c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005380:	2300      	movs	r3, #0
 8005382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005384:	e046      	b.n	8005414 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005392:	461a      	mov	r2, r3
 8005394:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005398:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800539a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053aa:	0151      	lsls	r1, r2, #5
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	440a      	add	r2, r1
 80053b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80053ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c6:	461a      	mov	r2, r3
 80053c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053de:	0151      	lsls	r1, r2, #5
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	440a      	add	r2, r1
 80053e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053fe:	0151      	lsls	r1, r2, #5
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	440a      	add	r2, r1
 8005404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005408:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800540c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005410:	3301      	adds	r3, #1
 8005412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800541a:	429a      	cmp	r2, r3
 800541c:	d3b3      	bcc.n	8005386 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800542c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005430:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	2b00      	cmp	r3, #0
 8005438:	d016      	beq.n	8005468 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800544a:	f043 030b 	orr.w	r3, r3, #11
 800544e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005460:	f043 030b 	orr.w	r3, r3, #11
 8005464:	6453      	str	r3, [r2, #68]	; 0x44
 8005466:	e015      	b.n	8005494 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005476:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800547a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800547e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	69fa      	ldr	r2, [r7, #28]
 800548a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800548e:	f043 030b 	orr.w	r3, r3, #11
 8005492:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80054a6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80054b8:	461a      	mov	r2, r3
 80054ba:	f004 fb35 	bl	8009b28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80054cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f004 fa64 	bl	80099a0 <USB_ReadInterrupts>
 80054d8:	4603      	mov	r3, r0
 80054da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e2:	d124      	bne.n	800552e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f004 fafa 	bl	8009ae2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f003 faaf 	bl	8008a56 <USB_GetDevSpeed>
 80054f8:	4603      	mov	r3, r0
 80054fa:	461a      	mov	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681c      	ldr	r4, [r3, #0]
 8005504:	f001 fa26 	bl	8006954 <HAL_RCC_GetHCLKFreq>
 8005508:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800550e:	b2db      	uxtb	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	4620      	mov	r0, r4
 8005514:	f002 ffae 	bl	8008474 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f009 fce8 	bl	800eeee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800552c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	f004 fa34 	bl	80099a0 <USB_ReadInterrupts>
 8005538:	4603      	mov	r3, r0
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b08      	cmp	r3, #8
 8005540:	d10a      	bne.n	8005558 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f009 fcc5 	bl	800eed2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695a      	ldr	r2, [r3, #20]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f002 0208 	and.w	r2, r2, #8
 8005556:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4618      	mov	r0, r3
 800555e:	f004 fa1f 	bl	80099a0 <USB_ReadInterrupts>
 8005562:	4603      	mov	r3, r0
 8005564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005568:	2b80      	cmp	r3, #128	; 0x80
 800556a:	d122      	bne.n	80055b2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005578:	2301      	movs	r3, #1
 800557a:	627b      	str	r3, [r7, #36]	; 0x24
 800557c:	e014      	b.n	80055a8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005582:	4613      	mov	r3, r2
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d105      	bne.n	80055a2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	b2db      	uxtb	r3, r3
 800559a:	4619      	mov	r1, r3
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fb27 	bl	8005bf0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	3301      	adds	r3, #1
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d3e5      	bcc.n	800557e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f004 f9f2 	bl	80099a0 <USB_ReadInterrupts>
 80055bc:	4603      	mov	r3, r0
 80055be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055c6:	d13b      	bne.n	8005640 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055c8:	2301      	movs	r3, #1
 80055ca:	627b      	str	r3, [r7, #36]	; 0x24
 80055cc:	e02b      	b.n	8005626 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e2:	4613      	mov	r3, r2
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	3340      	adds	r3, #64	; 0x40
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d115      	bne.n	8005620 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80055f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	da12      	bge.n	8005620 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fe:	4613      	mov	r3, r2
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	4413      	add	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	440b      	add	r3, r1
 8005608:	333f      	adds	r3, #63	; 0x3f
 800560a:	2201      	movs	r2, #1
 800560c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	b2db      	uxtb	r3, r3
 8005612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005616:	b2db      	uxtb	r3, r3
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fae8 	bl	8005bf0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	3301      	adds	r3, #1
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562c:	429a      	cmp	r2, r3
 800562e:	d3ce      	bcc.n	80055ce <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695a      	ldr	r2, [r3, #20]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800563e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f004 f9ab 	bl	80099a0 <USB_ReadInterrupts>
 800564a:	4603      	mov	r3, r0
 800564c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005650:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005654:	d155      	bne.n	8005702 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005656:	2301      	movs	r3, #1
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
 800565a:	e045      	b.n	80056e8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005670:	4613      	mov	r3, r2
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	440b      	add	r3, r1
 800567a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d12e      	bne.n	80056e2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005684:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005686:	2b00      	cmp	r3, #0
 8005688:	da2b      	bge.n	80056e2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005696:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800569a:	429a      	cmp	r2, r3
 800569c:	d121      	bne.n	80056e2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a2:	4613      	mov	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	440b      	add	r3, r1
 80056ac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80056b0:	2201      	movs	r2, #1
 80056b2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056de:	6053      	str	r3, [r2, #4]
            break;
 80056e0:	e007      	b.n	80056f2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	3301      	adds	r3, #1
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d3b4      	bcc.n	800565c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695a      	ldr	r2, [r3, #20]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f004 f94a 	bl	80099a0 <USB_ReadInterrupts>
 800570c:	4603      	mov	r3, r0
 800570e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005716:	d10a      	bne.n	800572e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f009 fc5f 	bl	800efdc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695a      	ldr	r2, [r3, #20]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800572c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f004 f934 	bl	80099a0 <USB_ReadInterrupts>
 8005738:	4603      	mov	r3, r0
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b04      	cmp	r3, #4
 8005740:	d115      	bne.n	800576e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f009 fc4f 	bl	800eff8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6859      	ldr	r1, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	430a      	orrs	r2, r1
 8005768:	605a      	str	r2, [r3, #4]
 800576a:	e000      	b.n	800576e <HAL_PCD_IRQHandler+0x938>
      return;
 800576c:	bf00      	nop
    }
  }
}
 800576e:	3734      	adds	r7, #52	; 0x34
 8005770:	46bd      	mov	sp, r7
 8005772:	bd90      	pop	{r4, r7, pc}

08005774 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005786:	2b01      	cmp	r3, #1
 8005788:	d101      	bne.n	800578e <HAL_PCD_SetAddress+0x1a>
 800578a:	2302      	movs	r3, #2
 800578c:	e013      	b.n	80057b6 <HAL_PCD_SetAddress+0x42>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	78fa      	ldrb	r2, [r7, #3]
 800579a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	78fa      	ldrb	r2, [r7, #3]
 80057a4:	4611      	mov	r1, r2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f004 f892 	bl	80098d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	4608      	mov	r0, r1
 80057c8:	4611      	mov	r1, r2
 80057ca:	461a      	mov	r2, r3
 80057cc:	4603      	mov	r3, r0
 80057ce:	70fb      	strb	r3, [r7, #3]
 80057d0:	460b      	mov	r3, r1
 80057d2:	803b      	strh	r3, [r7, #0]
 80057d4:	4613      	mov	r3, r2
 80057d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80057d8:	2300      	movs	r3, #0
 80057da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80057dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	da0f      	bge.n	8005804 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	f003 020f 	and.w	r2, r3, #15
 80057ea:	4613      	mov	r3, r2
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	3338      	adds	r3, #56	; 0x38
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	4413      	add	r3, r2
 80057f8:	3304      	adds	r3, #4
 80057fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	705a      	strb	r2, [r3, #1]
 8005802:	e00f      	b.n	8005824 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	f003 020f 	and.w	r2, r3, #15
 800580a:	4613      	mov	r3, r2
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	4413      	add	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	4413      	add	r3, r2
 800581a:	3304      	adds	r3, #4
 800581c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005824:	78fb      	ldrb	r3, [r7, #3]
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	b2da      	uxtb	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005830:	883a      	ldrh	r2, [r7, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	78ba      	ldrb	r2, [r7, #2]
 800583a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	785b      	ldrb	r3, [r3, #1]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d004      	beq.n	800584e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	b29a      	uxth	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800584e:	78bb      	ldrb	r3, [r7, #2]
 8005850:	2b02      	cmp	r3, #2
 8005852:	d102      	bne.n	800585a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_PCD_EP_Open+0xaa>
 8005864:	2302      	movs	r3, #2
 8005866:	e00e      	b.n	8005886 <HAL_PCD_EP_Open+0xc8>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68f9      	ldr	r1, [r7, #12]
 8005876:	4618      	mov	r0, r3
 8005878:	f003 f912 	bl	8008aa0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005884:	7afb      	ldrb	r3, [r7, #11]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	460b      	mov	r3, r1
 8005898:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800589a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	da0f      	bge.n	80058c2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058a2:	78fb      	ldrb	r3, [r7, #3]
 80058a4:	f003 020f 	and.w	r2, r3, #15
 80058a8:	4613      	mov	r3, r2
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	4413      	add	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	3338      	adds	r3, #56	; 0x38
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	4413      	add	r3, r2
 80058b6:	3304      	adds	r3, #4
 80058b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2201      	movs	r2, #1
 80058be:	705a      	strb	r2, [r3, #1]
 80058c0:	e00f      	b.n	80058e2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058c2:	78fb      	ldrb	r3, [r7, #3]
 80058c4:	f003 020f 	and.w	r2, r3, #15
 80058c8:	4613      	mov	r3, r2
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	4413      	add	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	4413      	add	r3, r2
 80058d8:	3304      	adds	r3, #4
 80058da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80058e2:	78fb      	ldrb	r3, [r7, #3]
 80058e4:	f003 030f 	and.w	r3, r3, #15
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_PCD_EP_Close+0x6e>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e00e      	b.n	800591a <HAL_PCD_EP_Close+0x8c>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68f9      	ldr	r1, [r7, #12]
 800590a:	4618      	mov	r0, r3
 800590c:	f003 f950 	bl	8008bb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b086      	sub	sp, #24
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	603b      	str	r3, [r7, #0]
 800592e:	460b      	mov	r3, r1
 8005930:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005932:	7afb      	ldrb	r3, [r7, #11]
 8005934:	f003 020f 	and.w	r2, r3, #15
 8005938:	4613      	mov	r3, r2
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4413      	add	r3, r2
 8005948:	3304      	adds	r3, #4
 800594a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2200      	movs	r2, #0
 800595c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2200      	movs	r2, #0
 8005962:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005964:	7afb      	ldrb	r3, [r7, #11]
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	b2da      	uxtb	r2, r3
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d102      	bne.n	800597e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800597e:	7afb      	ldrb	r3, [r7, #11]
 8005980:	f003 030f 	and.w	r3, r3, #15
 8005984:	2b00      	cmp	r3, #0
 8005986:	d109      	bne.n	800599c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6818      	ldr	r0, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	6979      	ldr	r1, [r7, #20]
 8005996:	f003 fc2f 	bl	80091f8 <USB_EP0StartXfer>
 800599a:	e008      	b.n	80059ae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6818      	ldr	r0, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	461a      	mov	r2, r3
 80059a8:	6979      	ldr	r1, [r7, #20]
 80059aa:	f003 f9dd 	bl	8008d68 <USB_EPStartXfer>
  }

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	f003 020f 	and.w	r2, r3, #15
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	4613      	mov	r3, r2
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80059da:	681b      	ldr	r3, [r3, #0]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	607a      	str	r2, [r7, #4]
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	460b      	mov	r3, r1
 80059f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059f8:	7afb      	ldrb	r3, [r7, #11]
 80059fa:	f003 020f 	and.w	r2, r3, #15
 80059fe:	4613      	mov	r3, r2
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	3338      	adds	r3, #56	; 0x38
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2201      	movs	r2, #1
 8005a26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a28:	7afb      	ldrb	r3, [r7, #11]
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d102      	bne.n	8005a42 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a42:	7afb      	ldrb	r3, [r7, #11]
 8005a44:	f003 030f 	and.w	r3, r3, #15
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d109      	bne.n	8005a60 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	6979      	ldr	r1, [r7, #20]
 8005a5a:	f003 fbcd 	bl	80091f8 <USB_EP0StartXfer>
 8005a5e:	e008      	b.n	8005a72 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6818      	ldr	r0, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	6979      	ldr	r1, [r7, #20]
 8005a6e:	f003 f97b 	bl	8008d68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a88:	78fb      	ldrb	r3, [r7, #3]
 8005a8a:	f003 020f 	and.w	r2, r3, #15
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d901      	bls.n	8005a9a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e050      	b.n	8005b3c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	da0f      	bge.n	8005ac2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005aa2:	78fb      	ldrb	r3, [r7, #3]
 8005aa4:	f003 020f 	and.w	r2, r3, #15
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	4413      	add	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	3338      	adds	r3, #56	; 0x38
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	705a      	strb	r2, [r3, #1]
 8005ac0:	e00d      	b.n	8005ade <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ac2:	78fa      	ldrb	r2, [r7, #3]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	4413      	add	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ae4:	78fb      	ldrb	r3, [r7, #3]
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d101      	bne.n	8005afe <HAL_PCD_EP_SetStall+0x82>
 8005afa:	2302      	movs	r3, #2
 8005afc:	e01e      	b.n	8005b3c <HAL_PCD_EP_SetStall+0xc0>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68f9      	ldr	r1, [r7, #12]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f003 fe0b 	bl	8009728 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b12:	78fb      	ldrb	r3, [r7, #3]
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10a      	bne.n	8005b32 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6818      	ldr	r0, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	b2d9      	uxtb	r1, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	f003 fffb 	bl	8009b28 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	f003 020f 	and.w	r2, r3, #15
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d901      	bls.n	8005b62 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e042      	b.n	8005be8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	da0f      	bge.n	8005b8a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b6a:	78fb      	ldrb	r3, [r7, #3]
 8005b6c:	f003 020f 	and.w	r2, r3, #15
 8005b70:	4613      	mov	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	3338      	adds	r3, #56	; 0x38
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	3304      	adds	r3, #4
 8005b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2201      	movs	r2, #1
 8005b86:	705a      	strb	r2, [r3, #1]
 8005b88:	e00f      	b.n	8005baa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b8a:	78fb      	ldrb	r3, [r7, #3]
 8005b8c:	f003 020f 	and.w	r2, r3, #15
 8005b90:	4613      	mov	r3, r2
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_PCD_EP_ClrStall+0x86>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e00e      	b.n	8005be8 <HAL_PCD_EP_ClrStall+0xa4>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68f9      	ldr	r1, [r7, #12]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f003 fe13 	bl	8009804 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	da0c      	bge.n	8005c1e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	f003 020f 	and.w	r2, r3, #15
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	4413      	add	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	3338      	adds	r3, #56	; 0x38
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	4413      	add	r3, r2
 8005c18:	3304      	adds	r3, #4
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	e00c      	b.n	8005c38 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c1e:	78fb      	ldrb	r3, [r7, #3]
 8005c20:	f003 020f 	and.w	r2, r3, #15
 8005c24:	4613      	mov	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	4413      	add	r3, r2
 8005c34:	3304      	adds	r3, #4
 8005c36:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68f9      	ldr	r1, [r7, #12]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f003 fc32 	bl	80094a8 <USB_EPStopXfer>
 8005c44:	4603      	mov	r3, r0
 8005c46:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005c48:	7afb      	ldrb	r3, [r7, #11]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b08a      	sub	sp, #40	; 0x28
 8005c56:	af02      	add	r7, sp, #8
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	4413      	add	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	3338      	adds	r3, #56	; 0x38
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	4413      	add	r3, r2
 8005c76:	3304      	adds	r3, #4
 8005c78:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a1a      	ldr	r2, [r3, #32]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d901      	bls.n	8005c8a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e06c      	b.n	8005d64 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	699a      	ldr	r2, [r3, #24]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	69fa      	ldr	r2, [r7, #28]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d902      	bls.n	8005ca6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	3303      	adds	r3, #3
 8005caa:	089b      	lsrs	r3, r3, #2
 8005cac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cae:	e02b      	b.n	8005d08 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	699a      	ldr	r2, [r3, #24]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d902      	bls.n	8005ccc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	3303      	adds	r3, #3
 8005cd0:	089b      	lsrs	r3, r3, #2
 8005cd2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6919      	ldr	r1, [r3, #16]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	4603      	mov	r3, r0
 8005cea:	6978      	ldr	r0, [r7, #20]
 8005cec:	f003 fc86 	bl	80095fc <USB_WritePacket>

    ep->xfer_buff  += len;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	691a      	ldr	r2, [r3, #16]
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	441a      	add	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a1a      	ldr	r2, [r3, #32]
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	441a      	add	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d809      	bhi.n	8005d32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6a1a      	ldr	r2, [r3, #32]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d203      	bcs.n	8005d32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1be      	bne.n	8005cb0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d811      	bhi.n	8005d62 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	f003 030f 	and.w	r3, r3, #15
 8005d44:	2201      	movs	r2, #1
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	43db      	mvns	r3, r3
 8005d58:	6939      	ldr	r1, [r7, #16]
 8005d5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d5e:	4013      	ands	r3, r2
 8005d60:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3720      	adds	r7, #32
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	333c      	adds	r3, #60	; 0x3c
 8005d84:	3304      	adds	r3, #4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d17b      	bne.n	8005e9a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f003 0308 	and.w	r3, r3, #8
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d015      	beq.n	8005dd8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	4a61      	ldr	r2, [pc, #388]	; (8005f34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	f240 80b9 	bls.w	8005f28 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 80b3 	beq.w	8005f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dd4:	6093      	str	r3, [r2, #8]
 8005dd6:	e0a7      	b.n	8005f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d009      	beq.n	8005df6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dee:	461a      	mov	r2, r3
 8005df0:	2320      	movs	r3, #32
 8005df2:	6093      	str	r3, [r2, #8]
 8005df4:	e098      	b.n	8005f28 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f040 8093 	bne.w	8005f28 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	4a4b      	ldr	r2, [pc, #300]	; (8005f34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d90f      	bls.n	8005e2a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e20:	461a      	mov	r2, r3
 8005e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e26:	6093      	str	r3, [r2, #8]
 8005e28:	e07e      	b.n	8005f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	0159      	lsls	r1, r3, #5
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	440b      	add	r3, r1
 8005e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e56:	1ad2      	subs	r2, r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d114      	bne.n	8005e8c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d109      	bne.n	8005e7e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6818      	ldr	r0, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e74:	461a      	mov	r2, r3
 8005e76:	2101      	movs	r1, #1
 8005e78:	f003 fe56 	bl	8009b28 <USB_EP0_OutStart>
 8005e7c:	e006      	b.n	8005e8c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	691a      	ldr	r2, [r3, #16]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	441a      	add	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	4619      	mov	r1, r3
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f008 ffe8 	bl	800ee68 <HAL_PCD_DataOutStageCallback>
 8005e98:	e046      	b.n	8005f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	4a26      	ldr	r2, [pc, #152]	; (8005f38 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d124      	bne.n	8005eec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00a      	beq.n	8005ec2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb8:	461a      	mov	r2, r3
 8005eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ebe:	6093      	str	r3, [r2, #8]
 8005ec0:	e032      	b.n	8005f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f003 0320 	and.w	r3, r3, #32
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d008      	beq.n	8005ede <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed8:	461a      	mov	r2, r3
 8005eda:	2320      	movs	r3, #32
 8005edc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f008 ffbf 	bl	800ee68 <HAL_PCD_DataOutStageCallback>
 8005eea:	e01d      	b.n	8005f28 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d114      	bne.n	8005f1c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005ef2:	6879      	ldr	r1, [r7, #4]
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	4413      	add	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d108      	bne.n	8005f1c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6818      	ldr	r0, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f14:	461a      	mov	r2, r3
 8005f16:	2100      	movs	r1, #0
 8005f18:	f003 fe06 	bl	8009b28 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	4619      	mov	r1, r3
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f008 ffa0 	bl	800ee68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3720      	adds	r7, #32
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	4f54300a 	.word	0x4f54300a
 8005f38:	4f54310a 	.word	0x4f54310a

08005f3c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	333c      	adds	r3, #60	; 0x3c
 8005f54:	3304      	adds	r3, #4
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4a15      	ldr	r2, [pc, #84]	; (8005fc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d90e      	bls.n	8005f90 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d009      	beq.n	8005f90 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f88:	461a      	mov	r2, r3
 8005f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f8e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f008 ff57 	bl	800ee44 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4a0a      	ldr	r2, [pc, #40]	; (8005fc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d90c      	bls.n	8005fb8 <PCD_EP_OutSetupPacket_int+0x7c>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d108      	bne.n	8005fb8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	f003 fdb8 	bl	8009b28 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	4f54300a 	.word	0x4f54300a

08005fc8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	70fb      	strb	r3, [r7, #3]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005fe0:	78fb      	ldrb	r3, [r7, #3]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d107      	bne.n	8005ff6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005fe6:	883b      	ldrh	r3, [r7, #0]
 8005fe8:	0419      	lsls	r1, r3, #16
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8005ff4:	e028      	b.n	8006048 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffc:	0c1b      	lsrs	r3, r3, #16
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	4413      	add	r3, r2
 8006002:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006004:	2300      	movs	r3, #0
 8006006:	73fb      	strb	r3, [r7, #15]
 8006008:	e00d      	b.n	8006026 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	7bfb      	ldrb	r3, [r7, #15]
 8006010:	3340      	adds	r3, #64	; 0x40
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	0c1b      	lsrs	r3, r3, #16
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	4413      	add	r3, r2
 800601e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006020:	7bfb      	ldrb	r3, [r7, #15]
 8006022:	3301      	adds	r3, #1
 8006024:	73fb      	strb	r3, [r7, #15]
 8006026:	7bfa      	ldrb	r2, [r7, #15]
 8006028:	78fb      	ldrb	r3, [r7, #3]
 800602a:	3b01      	subs	r3, #1
 800602c:	429a      	cmp	r2, r3
 800602e:	d3ec      	bcc.n	800600a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006030:	883b      	ldrh	r3, [r7, #0]
 8006032:	0418      	lsls	r0, r3, #16
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6819      	ldr	r1, [r3, #0]
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	3b01      	subs	r3, #1
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	4302      	orrs	r2, r0
 8006040:	3340      	adds	r3, #64	; 0x40
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	460b      	mov	r3, r1
 8006060:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	887a      	ldrh	r2, [r7, #2]
 8006068:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e267      	b.n	8006572 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d075      	beq.n	800619a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060ae:	4b88      	ldr	r3, [pc, #544]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 030c 	and.w	r3, r3, #12
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d00c      	beq.n	80060d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060ba:	4b85      	ldr	r3, [pc, #532]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d112      	bne.n	80060ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060c6:	4b82      	ldr	r3, [pc, #520]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060d2:	d10b      	bne.n	80060ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d4:	4b7e      	ldr	r3, [pc, #504]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d05b      	beq.n	8006198 <HAL_RCC_OscConfig+0x108>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d157      	bne.n	8006198 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e242      	b.n	8006572 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f4:	d106      	bne.n	8006104 <HAL_RCC_OscConfig+0x74>
 80060f6:	4b76      	ldr	r3, [pc, #472]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a75      	ldr	r2, [pc, #468]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 80060fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	e01d      	b.n	8006140 <HAL_RCC_OscConfig+0xb0>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800610c:	d10c      	bne.n	8006128 <HAL_RCC_OscConfig+0x98>
 800610e:	4b70      	ldr	r3, [pc, #448]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a6f      	ldr	r2, [pc, #444]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 8006114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	4b6d      	ldr	r3, [pc, #436]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a6c      	ldr	r2, [pc, #432]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 8006120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	e00b      	b.n	8006140 <HAL_RCC_OscConfig+0xb0>
 8006128:	4b69      	ldr	r3, [pc, #420]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a68      	ldr	r2, [pc, #416]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 800612e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	4b66      	ldr	r3, [pc, #408]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a65      	ldr	r2, [pc, #404]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 800613a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800613e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d013      	beq.n	8006170 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006148:	f7fd fa86 	bl	8003658 <HAL_GetTick>
 800614c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800614e:	e008      	b.n	8006162 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006150:	f7fd fa82 	bl	8003658 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b64      	cmp	r3, #100	; 0x64
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e207      	b.n	8006572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006162:	4b5b      	ldr	r3, [pc, #364]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0f0      	beq.n	8006150 <HAL_RCC_OscConfig+0xc0>
 800616e:	e014      	b.n	800619a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006170:	f7fd fa72 	bl	8003658 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006178:	f7fd fa6e 	bl	8003658 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b64      	cmp	r3, #100	; 0x64
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e1f3      	b.n	8006572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800618a:	4b51      	ldr	r3, [pc, #324]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1f0      	bne.n	8006178 <HAL_RCC_OscConfig+0xe8>
 8006196:	e000      	b.n	800619a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d063      	beq.n	800626e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061a6:	4b4a      	ldr	r3, [pc, #296]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 030c 	and.w	r3, r3, #12
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00b      	beq.n	80061ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061b2:	4b47      	ldr	r3, [pc, #284]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061ba:	2b08      	cmp	r3, #8
 80061bc:	d11c      	bne.n	80061f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061be:	4b44      	ldr	r3, [pc, #272]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d116      	bne.n	80061f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061ca:	4b41      	ldr	r3, [pc, #260]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d005      	beq.n	80061e2 <HAL_RCC_OscConfig+0x152>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d001      	beq.n	80061e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e1c7      	b.n	8006572 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061e2:	4b3b      	ldr	r3, [pc, #236]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	4937      	ldr	r1, [pc, #220]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061f6:	e03a      	b.n	800626e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d020      	beq.n	8006242 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006200:	4b34      	ldr	r3, [pc, #208]	; (80062d4 <HAL_RCC_OscConfig+0x244>)
 8006202:	2201      	movs	r2, #1
 8006204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006206:	f7fd fa27 	bl	8003658 <HAL_GetTick>
 800620a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800620c:	e008      	b.n	8006220 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800620e:	f7fd fa23 	bl	8003658 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e1a8      	b.n	8006572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006220:	4b2b      	ldr	r3, [pc, #172]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0f0      	beq.n	800620e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800622c:	4b28      	ldr	r3, [pc, #160]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	4925      	ldr	r1, [pc, #148]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 800623c:	4313      	orrs	r3, r2
 800623e:	600b      	str	r3, [r1, #0]
 8006240:	e015      	b.n	800626e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006242:	4b24      	ldr	r3, [pc, #144]	; (80062d4 <HAL_RCC_OscConfig+0x244>)
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006248:	f7fd fa06 	bl	8003658 <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006250:	f7fd fa02 	bl	8003658 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e187      	b.n	8006572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006262:	4b1b      	ldr	r3, [pc, #108]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1f0      	bne.n	8006250 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d036      	beq.n	80062e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d016      	beq.n	80062b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006282:	4b15      	ldr	r3, [pc, #84]	; (80062d8 <HAL_RCC_OscConfig+0x248>)
 8006284:	2201      	movs	r2, #1
 8006286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006288:	f7fd f9e6 	bl	8003658 <HAL_GetTick>
 800628c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006290:	f7fd f9e2 	bl	8003658 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e167      	b.n	8006572 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062a2:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <HAL_RCC_OscConfig+0x240>)
 80062a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0f0      	beq.n	8006290 <HAL_RCC_OscConfig+0x200>
 80062ae:	e01b      	b.n	80062e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062b0:	4b09      	ldr	r3, [pc, #36]	; (80062d8 <HAL_RCC_OscConfig+0x248>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062b6:	f7fd f9cf 	bl	8003658 <HAL_GetTick>
 80062ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062bc:	e00e      	b.n	80062dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062be:	f7fd f9cb 	bl	8003658 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d907      	bls.n	80062dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e150      	b.n	8006572 <HAL_RCC_OscConfig+0x4e2>
 80062d0:	40023800 	.word	0x40023800
 80062d4:	42470000 	.word	0x42470000
 80062d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062dc:	4b88      	ldr	r3, [pc, #544]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 80062de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1ea      	bne.n	80062be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 8097 	beq.w	8006424 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062f6:	2300      	movs	r3, #0
 80062f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062fa:	4b81      	ldr	r3, [pc, #516]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10f      	bne.n	8006326 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006306:	2300      	movs	r3, #0
 8006308:	60bb      	str	r3, [r7, #8]
 800630a:	4b7d      	ldr	r3, [pc, #500]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	4a7c      	ldr	r2, [pc, #496]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 8006310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006314:	6413      	str	r3, [r2, #64]	; 0x40
 8006316:	4b7a      	ldr	r3, [pc, #488]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800631e:	60bb      	str	r3, [r7, #8]
 8006320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006322:	2301      	movs	r3, #1
 8006324:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006326:	4b77      	ldr	r3, [pc, #476]	; (8006504 <HAL_RCC_OscConfig+0x474>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632e:	2b00      	cmp	r3, #0
 8006330:	d118      	bne.n	8006364 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006332:	4b74      	ldr	r3, [pc, #464]	; (8006504 <HAL_RCC_OscConfig+0x474>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a73      	ldr	r2, [pc, #460]	; (8006504 <HAL_RCC_OscConfig+0x474>)
 8006338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800633c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800633e:	f7fd f98b 	bl	8003658 <HAL_GetTick>
 8006342:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006344:	e008      	b.n	8006358 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006346:	f7fd f987 	bl	8003658 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d901      	bls.n	8006358 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e10c      	b.n	8006572 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006358:	4b6a      	ldr	r3, [pc, #424]	; (8006504 <HAL_RCC_OscConfig+0x474>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0f0      	beq.n	8006346 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d106      	bne.n	800637a <HAL_RCC_OscConfig+0x2ea>
 800636c:	4b64      	ldr	r3, [pc, #400]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 800636e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006370:	4a63      	ldr	r2, [pc, #396]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 8006372:	f043 0301 	orr.w	r3, r3, #1
 8006376:	6713      	str	r3, [r2, #112]	; 0x70
 8006378:	e01c      	b.n	80063b4 <HAL_RCC_OscConfig+0x324>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	2b05      	cmp	r3, #5
 8006380:	d10c      	bne.n	800639c <HAL_RCC_OscConfig+0x30c>
 8006382:	4b5f      	ldr	r3, [pc, #380]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 8006384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006386:	4a5e      	ldr	r2, [pc, #376]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 8006388:	f043 0304 	orr.w	r3, r3, #4
 800638c:	6713      	str	r3, [r2, #112]	; 0x70
 800638e:	4b5c      	ldr	r3, [pc, #368]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 8006390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006392:	4a5b      	ldr	r2, [pc, #364]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 8006394:	f043 0301 	orr.w	r3, r3, #1
 8006398:	6713      	str	r3, [r2, #112]	; 0x70
 800639a:	e00b      	b.n	80063b4 <HAL_RCC_OscConfig+0x324>
 800639c:	4b58      	ldr	r3, [pc, #352]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 800639e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a0:	4a57      	ldr	r2, [pc, #348]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 80063a2:	f023 0301 	bic.w	r3, r3, #1
 80063a6:	6713      	str	r3, [r2, #112]	; 0x70
 80063a8:	4b55      	ldr	r3, [pc, #340]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 80063aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ac:	4a54      	ldr	r2, [pc, #336]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 80063ae:	f023 0304 	bic.w	r3, r3, #4
 80063b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d015      	beq.n	80063e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063bc:	f7fd f94c 	bl	8003658 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063c2:	e00a      	b.n	80063da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063c4:	f7fd f948 	bl	8003658 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e0cb      	b.n	8006572 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063da:	4b49      	ldr	r3, [pc, #292]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 80063dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0ee      	beq.n	80063c4 <HAL_RCC_OscConfig+0x334>
 80063e6:	e014      	b.n	8006412 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063e8:	f7fd f936 	bl	8003658 <HAL_GetTick>
 80063ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063ee:	e00a      	b.n	8006406 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063f0:	f7fd f932 	bl	8003658 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fe:	4293      	cmp	r3, r2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e0b5      	b.n	8006572 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006406:	4b3e      	ldr	r3, [pc, #248]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 8006408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1ee      	bne.n	80063f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006412:	7dfb      	ldrb	r3, [r7, #23]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d105      	bne.n	8006424 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006418:	4b39      	ldr	r3, [pc, #228]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 800641a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641c:	4a38      	ldr	r2, [pc, #224]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 800641e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006422:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 80a1 	beq.w	8006570 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800642e:	4b34      	ldr	r3, [pc, #208]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 030c 	and.w	r3, r3, #12
 8006436:	2b08      	cmp	r3, #8
 8006438:	d05c      	beq.n	80064f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d141      	bne.n	80064c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006442:	4b31      	ldr	r3, [pc, #196]	; (8006508 <HAL_RCC_OscConfig+0x478>)
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006448:	f7fd f906 	bl	8003658 <HAL_GetTick>
 800644c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800644e:	e008      	b.n	8006462 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006450:	f7fd f902 	bl	8003658 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d901      	bls.n	8006462 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e087      	b.n	8006572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006462:	4b27      	ldr	r3, [pc, #156]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1f0      	bne.n	8006450 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69da      	ldr	r2, [r3, #28]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	431a      	orrs	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	019b      	lsls	r3, r3, #6
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006484:	085b      	lsrs	r3, r3, #1
 8006486:	3b01      	subs	r3, #1
 8006488:	041b      	lsls	r3, r3, #16
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	061b      	lsls	r3, r3, #24
 8006492:	491b      	ldr	r1, [pc, #108]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 8006494:	4313      	orrs	r3, r2
 8006496:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006498:	4b1b      	ldr	r3, [pc, #108]	; (8006508 <HAL_RCC_OscConfig+0x478>)
 800649a:	2201      	movs	r2, #1
 800649c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800649e:	f7fd f8db 	bl	8003658 <HAL_GetTick>
 80064a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064a4:	e008      	b.n	80064b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064a6:	f7fd f8d7 	bl	8003658 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d901      	bls.n	80064b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e05c      	b.n	8006572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064b8:	4b11      	ldr	r3, [pc, #68]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0f0      	beq.n	80064a6 <HAL_RCC_OscConfig+0x416>
 80064c4:	e054      	b.n	8006570 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c6:	4b10      	ldr	r3, [pc, #64]	; (8006508 <HAL_RCC_OscConfig+0x478>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064cc:	f7fd f8c4 	bl	8003658 <HAL_GetTick>
 80064d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064d4:	f7fd f8c0 	bl	8003658 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e045      	b.n	8006572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064e6:	4b06      	ldr	r3, [pc, #24]	; (8006500 <HAL_RCC_OscConfig+0x470>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1f0      	bne.n	80064d4 <HAL_RCC_OscConfig+0x444>
 80064f2:	e03d      	b.n	8006570 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d107      	bne.n	800650c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e038      	b.n	8006572 <HAL_RCC_OscConfig+0x4e2>
 8006500:	40023800 	.word	0x40023800
 8006504:	40007000 	.word	0x40007000
 8006508:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800650c:	4b1b      	ldr	r3, [pc, #108]	; (800657c <HAL_RCC_OscConfig+0x4ec>)
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d028      	beq.n	800656c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006524:	429a      	cmp	r2, r3
 8006526:	d121      	bne.n	800656c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006532:	429a      	cmp	r2, r3
 8006534:	d11a      	bne.n	800656c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800653c:	4013      	ands	r3, r2
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006542:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006544:	4293      	cmp	r3, r2
 8006546:	d111      	bne.n	800656c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	085b      	lsrs	r3, r3, #1
 8006554:	3b01      	subs	r3, #1
 8006556:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006558:	429a      	cmp	r2, r3
 800655a:	d107      	bne.n	800656c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006566:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006568:	429a      	cmp	r2, r3
 800656a:	d001      	beq.n	8006570 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e000      	b.n	8006572 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	40023800 	.word	0x40023800

08006580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e0cc      	b.n	800672e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006594:	4b68      	ldr	r3, [pc, #416]	; (8006738 <HAL_RCC_ClockConfig+0x1b8>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d90c      	bls.n	80065bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065a2:	4b65      	ldr	r3, [pc, #404]	; (8006738 <HAL_RCC_ClockConfig+0x1b8>)
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065aa:	4b63      	ldr	r3, [pc, #396]	; (8006738 <HAL_RCC_ClockConfig+0x1b8>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d001      	beq.n	80065bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e0b8      	b.n	800672e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d020      	beq.n	800660a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d005      	beq.n	80065e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065d4:	4b59      	ldr	r3, [pc, #356]	; (800673c <HAL_RCC_ClockConfig+0x1bc>)
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	4a58      	ldr	r2, [pc, #352]	; (800673c <HAL_RCC_ClockConfig+0x1bc>)
 80065da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80065de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0308 	and.w	r3, r3, #8
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d005      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065ec:	4b53      	ldr	r3, [pc, #332]	; (800673c <HAL_RCC_ClockConfig+0x1bc>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	4a52      	ldr	r2, [pc, #328]	; (800673c <HAL_RCC_ClockConfig+0x1bc>)
 80065f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80065f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065f8:	4b50      	ldr	r3, [pc, #320]	; (800673c <HAL_RCC_ClockConfig+0x1bc>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	494d      	ldr	r1, [pc, #308]	; (800673c <HAL_RCC_ClockConfig+0x1bc>)
 8006606:	4313      	orrs	r3, r2
 8006608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d044      	beq.n	80066a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d107      	bne.n	800662e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800661e:	4b47      	ldr	r3, [pc, #284]	; (800673c <HAL_RCC_ClockConfig+0x1bc>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d119      	bne.n	800665e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e07f      	b.n	800672e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2b02      	cmp	r3, #2
 8006634:	d003      	beq.n	800663e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800663a:	2b03      	cmp	r3, #3
 800663c:	d107      	bne.n	800664e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800663e:	4b3f      	ldr	r3, [pc, #252]	; (800673c <HAL_RCC_ClockConfig+0x1bc>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d109      	bne.n	800665e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e06f      	b.n	800672e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800664e:	4b3b      	ldr	r3, [pc, #236]	; (800673c <HAL_RCC_ClockConfig+0x1bc>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e067      	b.n	800672e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800665e:	4b37      	ldr	r3, [pc, #220]	; (800673c <HAL_RCC_ClockConfig+0x1bc>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f023 0203 	bic.w	r2, r3, #3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	4934      	ldr	r1, [pc, #208]	; (800673c <HAL_RCC_ClockConfig+0x1bc>)
 800666c:	4313      	orrs	r3, r2
 800666e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006670:	f7fc fff2 	bl	8003658 <HAL_GetTick>
 8006674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006676:	e00a      	b.n	800668e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006678:	f7fc ffee 	bl	8003658 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	f241 3288 	movw	r2, #5000	; 0x1388
 8006686:	4293      	cmp	r3, r2
 8006688:	d901      	bls.n	800668e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e04f      	b.n	800672e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800668e:	4b2b      	ldr	r3, [pc, #172]	; (800673c <HAL_RCC_ClockConfig+0x1bc>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 020c 	and.w	r2, r3, #12
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	429a      	cmp	r2, r3
 800669e:	d1eb      	bne.n	8006678 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066a0:	4b25      	ldr	r3, [pc, #148]	; (8006738 <HAL_RCC_ClockConfig+0x1b8>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d20c      	bcs.n	80066c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ae:	4b22      	ldr	r3, [pc, #136]	; (8006738 <HAL_RCC_ClockConfig+0x1b8>)
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066b6:	4b20      	ldr	r3, [pc, #128]	; (8006738 <HAL_RCC_ClockConfig+0x1b8>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d001      	beq.n	80066c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e032      	b.n	800672e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d008      	beq.n	80066e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066d4:	4b19      	ldr	r3, [pc, #100]	; (800673c <HAL_RCC_ClockConfig+0x1bc>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	4916      	ldr	r1, [pc, #88]	; (800673c <HAL_RCC_ClockConfig+0x1bc>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0308 	and.w	r3, r3, #8
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d009      	beq.n	8006706 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066f2:	4b12      	ldr	r3, [pc, #72]	; (800673c <HAL_RCC_ClockConfig+0x1bc>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	00db      	lsls	r3, r3, #3
 8006700:	490e      	ldr	r1, [pc, #56]	; (800673c <HAL_RCC_ClockConfig+0x1bc>)
 8006702:	4313      	orrs	r3, r2
 8006704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006706:	f000 f821 	bl	800674c <HAL_RCC_GetSysClockFreq>
 800670a:	4602      	mov	r2, r0
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <HAL_RCC_ClockConfig+0x1bc>)
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	091b      	lsrs	r3, r3, #4
 8006712:	f003 030f 	and.w	r3, r3, #15
 8006716:	490a      	ldr	r1, [pc, #40]	; (8006740 <HAL_RCC_ClockConfig+0x1c0>)
 8006718:	5ccb      	ldrb	r3, [r1, r3]
 800671a:	fa22 f303 	lsr.w	r3, r2, r3
 800671e:	4a09      	ldr	r2, [pc, #36]	; (8006744 <HAL_RCC_ClockConfig+0x1c4>)
 8006720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006722:	4b09      	ldr	r3, [pc, #36]	; (8006748 <HAL_RCC_ClockConfig+0x1c8>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4618      	mov	r0, r3
 8006728:	f7fc fe40 	bl	80033ac <HAL_InitTick>

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	40023c00 	.word	0x40023c00
 800673c:	40023800 	.word	0x40023800
 8006740:	08010530 	.word	0x08010530
 8006744:	20000528 	.word	0x20000528
 8006748:	2000052c 	.word	0x2000052c

0800674c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800674c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006750:	b094      	sub	sp, #80	; 0x50
 8006752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	647b      	str	r3, [r7, #68]	; 0x44
 8006758:	2300      	movs	r3, #0
 800675a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800675c:	2300      	movs	r3, #0
 800675e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006764:	4b79      	ldr	r3, [pc, #484]	; (800694c <HAL_RCC_GetSysClockFreq+0x200>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f003 030c 	and.w	r3, r3, #12
 800676c:	2b08      	cmp	r3, #8
 800676e:	d00d      	beq.n	800678c <HAL_RCC_GetSysClockFreq+0x40>
 8006770:	2b08      	cmp	r3, #8
 8006772:	f200 80e1 	bhi.w	8006938 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <HAL_RCC_GetSysClockFreq+0x34>
 800677a:	2b04      	cmp	r3, #4
 800677c:	d003      	beq.n	8006786 <HAL_RCC_GetSysClockFreq+0x3a>
 800677e:	e0db      	b.n	8006938 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006780:	4b73      	ldr	r3, [pc, #460]	; (8006950 <HAL_RCC_GetSysClockFreq+0x204>)
 8006782:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006784:	e0db      	b.n	800693e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006786:	4b72      	ldr	r3, [pc, #456]	; (8006950 <HAL_RCC_GetSysClockFreq+0x204>)
 8006788:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800678a:	e0d8      	b.n	800693e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800678c:	4b6f      	ldr	r3, [pc, #444]	; (800694c <HAL_RCC_GetSysClockFreq+0x200>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006794:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006796:	4b6d      	ldr	r3, [pc, #436]	; (800694c <HAL_RCC_GetSysClockFreq+0x200>)
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d063      	beq.n	800686a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067a2:	4b6a      	ldr	r3, [pc, #424]	; (800694c <HAL_RCC_GetSysClockFreq+0x200>)
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	099b      	lsrs	r3, r3, #6
 80067a8:	2200      	movs	r2, #0
 80067aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80067ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80067ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b4:	633b      	str	r3, [r7, #48]	; 0x30
 80067b6:	2300      	movs	r3, #0
 80067b8:	637b      	str	r3, [r7, #52]	; 0x34
 80067ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80067be:	4622      	mov	r2, r4
 80067c0:	462b      	mov	r3, r5
 80067c2:	f04f 0000 	mov.w	r0, #0
 80067c6:	f04f 0100 	mov.w	r1, #0
 80067ca:	0159      	lsls	r1, r3, #5
 80067cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067d0:	0150      	lsls	r0, r2, #5
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	4621      	mov	r1, r4
 80067d8:	1a51      	subs	r1, r2, r1
 80067da:	6139      	str	r1, [r7, #16]
 80067dc:	4629      	mov	r1, r5
 80067de:	eb63 0301 	sbc.w	r3, r3, r1
 80067e2:	617b      	str	r3, [r7, #20]
 80067e4:	f04f 0200 	mov.w	r2, #0
 80067e8:	f04f 0300 	mov.w	r3, #0
 80067ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067f0:	4659      	mov	r1, fp
 80067f2:	018b      	lsls	r3, r1, #6
 80067f4:	4651      	mov	r1, sl
 80067f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067fa:	4651      	mov	r1, sl
 80067fc:	018a      	lsls	r2, r1, #6
 80067fe:	4651      	mov	r1, sl
 8006800:	ebb2 0801 	subs.w	r8, r2, r1
 8006804:	4659      	mov	r1, fp
 8006806:	eb63 0901 	sbc.w	r9, r3, r1
 800680a:	f04f 0200 	mov.w	r2, #0
 800680e:	f04f 0300 	mov.w	r3, #0
 8006812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800681a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800681e:	4690      	mov	r8, r2
 8006820:	4699      	mov	r9, r3
 8006822:	4623      	mov	r3, r4
 8006824:	eb18 0303 	adds.w	r3, r8, r3
 8006828:	60bb      	str	r3, [r7, #8]
 800682a:	462b      	mov	r3, r5
 800682c:	eb49 0303 	adc.w	r3, r9, r3
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	f04f 0200 	mov.w	r2, #0
 8006836:	f04f 0300 	mov.w	r3, #0
 800683a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800683e:	4629      	mov	r1, r5
 8006840:	028b      	lsls	r3, r1, #10
 8006842:	4621      	mov	r1, r4
 8006844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006848:	4621      	mov	r1, r4
 800684a:	028a      	lsls	r2, r1, #10
 800684c:	4610      	mov	r0, r2
 800684e:	4619      	mov	r1, r3
 8006850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006852:	2200      	movs	r2, #0
 8006854:	62bb      	str	r3, [r7, #40]	; 0x28
 8006856:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006858:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800685c:	f7f9 fd18 	bl	8000290 <__aeabi_uldivmod>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	4613      	mov	r3, r2
 8006866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006868:	e058      	b.n	800691c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800686a:	4b38      	ldr	r3, [pc, #224]	; (800694c <HAL_RCC_GetSysClockFreq+0x200>)
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	099b      	lsrs	r3, r3, #6
 8006870:	2200      	movs	r2, #0
 8006872:	4618      	mov	r0, r3
 8006874:	4611      	mov	r1, r2
 8006876:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800687a:	623b      	str	r3, [r7, #32]
 800687c:	2300      	movs	r3, #0
 800687e:	627b      	str	r3, [r7, #36]	; 0x24
 8006880:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006884:	4642      	mov	r2, r8
 8006886:	464b      	mov	r3, r9
 8006888:	f04f 0000 	mov.w	r0, #0
 800688c:	f04f 0100 	mov.w	r1, #0
 8006890:	0159      	lsls	r1, r3, #5
 8006892:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006896:	0150      	lsls	r0, r2, #5
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	4641      	mov	r1, r8
 800689e:	ebb2 0a01 	subs.w	sl, r2, r1
 80068a2:	4649      	mov	r1, r9
 80068a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	f04f 0300 	mov.w	r3, #0
 80068b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80068b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80068b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80068bc:	ebb2 040a 	subs.w	r4, r2, sl
 80068c0:	eb63 050b 	sbc.w	r5, r3, fp
 80068c4:	f04f 0200 	mov.w	r2, #0
 80068c8:	f04f 0300 	mov.w	r3, #0
 80068cc:	00eb      	lsls	r3, r5, #3
 80068ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068d2:	00e2      	lsls	r2, r4, #3
 80068d4:	4614      	mov	r4, r2
 80068d6:	461d      	mov	r5, r3
 80068d8:	4643      	mov	r3, r8
 80068da:	18e3      	adds	r3, r4, r3
 80068dc:	603b      	str	r3, [r7, #0]
 80068de:	464b      	mov	r3, r9
 80068e0:	eb45 0303 	adc.w	r3, r5, r3
 80068e4:	607b      	str	r3, [r7, #4]
 80068e6:	f04f 0200 	mov.w	r2, #0
 80068ea:	f04f 0300 	mov.w	r3, #0
 80068ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068f2:	4629      	mov	r1, r5
 80068f4:	028b      	lsls	r3, r1, #10
 80068f6:	4621      	mov	r1, r4
 80068f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068fc:	4621      	mov	r1, r4
 80068fe:	028a      	lsls	r2, r1, #10
 8006900:	4610      	mov	r0, r2
 8006902:	4619      	mov	r1, r3
 8006904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006906:	2200      	movs	r2, #0
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	61fa      	str	r2, [r7, #28]
 800690c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006910:	f7f9 fcbe 	bl	8000290 <__aeabi_uldivmod>
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	4613      	mov	r3, r2
 800691a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800691c:	4b0b      	ldr	r3, [pc, #44]	; (800694c <HAL_RCC_GetSysClockFreq+0x200>)
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	0c1b      	lsrs	r3, r3, #16
 8006922:	f003 0303 	and.w	r3, r3, #3
 8006926:	3301      	adds	r3, #1
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800692c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800692e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006930:	fbb2 f3f3 	udiv	r3, r2, r3
 8006934:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006936:	e002      	b.n	800693e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006938:	4b05      	ldr	r3, [pc, #20]	; (8006950 <HAL_RCC_GetSysClockFreq+0x204>)
 800693a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800693c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800693e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006940:	4618      	mov	r0, r3
 8006942:	3750      	adds	r7, #80	; 0x50
 8006944:	46bd      	mov	sp, r7
 8006946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800694a:	bf00      	nop
 800694c:	40023800 	.word	0x40023800
 8006950:	00f42400 	.word	0x00f42400

08006954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006954:	b480      	push	{r7}
 8006956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006958:	4b03      	ldr	r3, [pc, #12]	; (8006968 <HAL_RCC_GetHCLKFreq+0x14>)
 800695a:	681b      	ldr	r3, [r3, #0]
}
 800695c:	4618      	mov	r0, r3
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	20000528 	.word	0x20000528

0800696c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006970:	f7ff fff0 	bl	8006954 <HAL_RCC_GetHCLKFreq>
 8006974:	4602      	mov	r2, r0
 8006976:	4b05      	ldr	r3, [pc, #20]	; (800698c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	0a9b      	lsrs	r3, r3, #10
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	4903      	ldr	r1, [pc, #12]	; (8006990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006982:	5ccb      	ldrb	r3, [r1, r3]
 8006984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006988:	4618      	mov	r0, r3
 800698a:	bd80      	pop	{r7, pc}
 800698c:	40023800 	.word	0x40023800
 8006990:	08010540 	.word	0x08010540

08006994 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	220f      	movs	r2, #15
 80069a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80069a4:	4b12      	ldr	r3, [pc, #72]	; (80069f0 <HAL_RCC_GetClockConfig+0x5c>)
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 0203 	and.w	r2, r3, #3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80069b0:	4b0f      	ldr	r3, [pc, #60]	; (80069f0 <HAL_RCC_GetClockConfig+0x5c>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80069bc:	4b0c      	ldr	r3, [pc, #48]	; (80069f0 <HAL_RCC_GetClockConfig+0x5c>)
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80069c8:	4b09      	ldr	r3, [pc, #36]	; (80069f0 <HAL_RCC_GetClockConfig+0x5c>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	08db      	lsrs	r3, r3, #3
 80069ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80069d6:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <HAL_RCC_GetClockConfig+0x60>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0207 	and.w	r2, r3, #7
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	601a      	str	r2, [r3, #0]
}
 80069e2:	bf00      	nop
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	40023800 	.word	0x40023800
 80069f4:	40023c00 	.word	0x40023c00

080069f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e07b      	b.n	8006b02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d108      	bne.n	8006a24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a1a:	d009      	beq.n	8006a30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	61da      	str	r2, [r3, #28]
 8006a22:	e005      	b.n	8006a30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d106      	bne.n	8006a50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7fc fbc2 	bl	80031d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a82:	431a      	orrs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	431a      	orrs	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab4:	ea42 0103 	orr.w	r1, r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	0c1b      	lsrs	r3, r3, #16
 8006ace:	f003 0104 	and.w	r1, r3, #4
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad6:	f003 0210 	and.w	r2, r3, #16
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69da      	ldr	r2, [r3, #28]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006af0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b088      	sub	sp, #32
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	603b      	str	r3, [r7, #0]
 8006b16:	4613      	mov	r3, r2
 8006b18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d101      	bne.n	8006b2c <HAL_SPI_Transmit+0x22>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e126      	b.n	8006d7a <HAL_SPI_Transmit+0x270>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b34:	f7fc fd90 	bl	8003658 <HAL_GetTick>
 8006b38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b3a:	88fb      	ldrh	r3, [r7, #6]
 8006b3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d002      	beq.n	8006b50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b4e:	e10b      	b.n	8006d68 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <HAL_SPI_Transmit+0x52>
 8006b56:	88fb      	ldrh	r3, [r7, #6]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d102      	bne.n	8006b62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b60:	e102      	b.n	8006d68 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2203      	movs	r2, #3
 8006b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	88fa      	ldrh	r2, [r7, #6]
 8006b7a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	88fa      	ldrh	r2, [r7, #6]
 8006b80:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ba8:	d10f      	bne.n	8006bca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd4:	2b40      	cmp	r3, #64	; 0x40
 8006bd6:	d007      	beq.n	8006be8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006be6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bf0:	d14b      	bne.n	8006c8a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <HAL_SPI_Transmit+0xf6>
 8006bfa:	8afb      	ldrh	r3, [r7, #22]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d13e      	bne.n	8006c7e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	881a      	ldrh	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c10:	1c9a      	adds	r2, r3, #2
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c24:	e02b      	b.n	8006c7e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d112      	bne.n	8006c5a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c38:	881a      	ldrh	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c44:	1c9a      	adds	r2, r3, #2
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	3b01      	subs	r3, #1
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c58:	e011      	b.n	8006c7e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c5a:	f7fc fcfd 	bl	8003658 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d803      	bhi.n	8006c72 <HAL_SPI_Transmit+0x168>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c70:	d102      	bne.n	8006c78 <HAL_SPI_Transmit+0x16e>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d102      	bne.n	8006c7e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c7c:	e074      	b.n	8006d68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1ce      	bne.n	8006c26 <HAL_SPI_Transmit+0x11c>
 8006c88:	e04c      	b.n	8006d24 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <HAL_SPI_Transmit+0x18e>
 8006c92:	8afb      	ldrh	r3, [r7, #22]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d140      	bne.n	8006d1a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	330c      	adds	r3, #12
 8006ca2:	7812      	ldrb	r2, [r2, #0]
 8006ca4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006caa:	1c5a      	adds	r2, r3, #1
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006cbe:	e02c      	b.n	8006d1a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d113      	bne.n	8006cf6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	330c      	adds	r3, #12
 8006cd8:	7812      	ldrb	r2, [r2, #0]
 8006cda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	3b01      	subs	r3, #1
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	86da      	strh	r2, [r3, #54]	; 0x36
 8006cf4:	e011      	b.n	8006d1a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cf6:	f7fc fcaf 	bl	8003658 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d803      	bhi.n	8006d0e <HAL_SPI_Transmit+0x204>
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0c:	d102      	bne.n	8006d14 <HAL_SPI_Transmit+0x20a>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d102      	bne.n	8006d1a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d18:	e026      	b.n	8006d68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1cd      	bne.n	8006cc0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 fa55 	bl	80071d8 <SPI_EndRxTxTransaction>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2220      	movs	r2, #32
 8006d38:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10a      	bne.n	8006d58 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d42:	2300      	movs	r3, #0
 8006d44:	613b      	str	r3, [r7, #16]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	613b      	str	r3, [r7, #16]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	613b      	str	r3, [r7, #16]
 8006d56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d002      	beq.n	8006d66 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	77fb      	strb	r3, [r7, #31]
 8006d64:	e000      	b.n	8006d68 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006d66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d78:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3720      	adds	r7, #32
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b08c      	sub	sp, #48	; 0x30
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	607a      	str	r2, [r7, #4]
 8006d8e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d90:	2301      	movs	r3, #1
 8006d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d101      	bne.n	8006da8 <HAL_SPI_TransmitReceive+0x26>
 8006da4:	2302      	movs	r3, #2
 8006da6:	e18a      	b.n	80070be <HAL_SPI_TransmitReceive+0x33c>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006db0:	f7fc fc52 	bl	8003658 <HAL_GetTick>
 8006db4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006dc6:	887b      	ldrh	r3, [r7, #2]
 8006dc8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006dca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d00f      	beq.n	8006df2 <HAL_SPI_TransmitReceive+0x70>
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dd8:	d107      	bne.n	8006dea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d103      	bne.n	8006dea <HAL_SPI_TransmitReceive+0x68>
 8006de2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	d003      	beq.n	8006df2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006dea:	2302      	movs	r3, #2
 8006dec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006df0:	e15b      	b.n	80070aa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d005      	beq.n	8006e04 <HAL_SPI_TransmitReceive+0x82>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <HAL_SPI_TransmitReceive+0x82>
 8006dfe:	887b      	ldrh	r3, [r7, #2]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d103      	bne.n	8006e0c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006e0a:	e14e      	b.n	80070aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	d003      	beq.n	8006e20 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2205      	movs	r2, #5
 8006e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	887a      	ldrh	r2, [r7, #2]
 8006e30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	887a      	ldrh	r2, [r7, #2]
 8006e36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	887a      	ldrh	r2, [r7, #2]
 8006e42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	887a      	ldrh	r2, [r7, #2]
 8006e48:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e60:	2b40      	cmp	r3, #64	; 0x40
 8006e62:	d007      	beq.n	8006e74 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e7c:	d178      	bne.n	8006f70 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <HAL_SPI_TransmitReceive+0x10a>
 8006e86:	8b7b      	ldrh	r3, [r7, #26]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d166      	bne.n	8006f5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e90:	881a      	ldrh	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9c:	1c9a      	adds	r2, r3, #2
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006eb0:	e053      	b.n	8006f5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d11b      	bne.n	8006ef8 <HAL_SPI_TransmitReceive+0x176>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d016      	beq.n	8006ef8 <HAL_SPI_TransmitReceive+0x176>
 8006eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d113      	bne.n	8006ef8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed4:	881a      	ldrh	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee0:	1c9a      	adds	r2, r3, #2
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	3b01      	subs	r3, #1
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d119      	bne.n	8006f3a <HAL_SPI_TransmitReceive+0x1b8>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d014      	beq.n	8006f3a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	b292      	uxth	r2, r2
 8006f1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f22:	1c9a      	adds	r2, r3, #2
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f36:	2301      	movs	r3, #1
 8006f38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f3a:	f7fc fb8d 	bl	8003658 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d807      	bhi.n	8006f5a <HAL_SPI_TransmitReceive+0x1d8>
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f50:	d003      	beq.n	8006f5a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006f58:	e0a7      	b.n	80070aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1a6      	bne.n	8006eb2 <HAL_SPI_TransmitReceive+0x130>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1a1      	bne.n	8006eb2 <HAL_SPI_TransmitReceive+0x130>
 8006f6e:	e07c      	b.n	800706a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d002      	beq.n	8006f7e <HAL_SPI_TransmitReceive+0x1fc>
 8006f78:	8b7b      	ldrh	r3, [r7, #26]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d16b      	bne.n	8007056 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	330c      	adds	r3, #12
 8006f88:	7812      	ldrb	r2, [r2, #0]
 8006f8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fa4:	e057      	b.n	8007056 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f003 0302 	and.w	r3, r3, #2
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d11c      	bne.n	8006fee <HAL_SPI_TransmitReceive+0x26c>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d017      	beq.n	8006fee <HAL_SPI_TransmitReceive+0x26c>
 8006fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d114      	bne.n	8006fee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	330c      	adds	r3, #12
 8006fce:	7812      	ldrb	r2, [r2, #0]
 8006fd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d119      	bne.n	8007030 <HAL_SPI_TransmitReceive+0x2ae>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007000:	b29b      	uxth	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d014      	beq.n	8007030 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	b2d2      	uxtb	r2, r2
 8007012:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007022:	b29b      	uxth	r3, r3
 8007024:	3b01      	subs	r3, #1
 8007026:	b29a      	uxth	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800702c:	2301      	movs	r3, #1
 800702e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007030:	f7fc fb12 	bl	8003658 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800703c:	429a      	cmp	r2, r3
 800703e:	d803      	bhi.n	8007048 <HAL_SPI_TransmitReceive+0x2c6>
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007046:	d102      	bne.n	800704e <HAL_SPI_TransmitReceive+0x2cc>
 8007048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704a:	2b00      	cmp	r3, #0
 800704c:	d103      	bne.n	8007056 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007054:	e029      	b.n	80070aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800705a:	b29b      	uxth	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1a2      	bne.n	8006fa6 <HAL_SPI_TransmitReceive+0x224>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007064:	b29b      	uxth	r3, r3
 8007066:	2b00      	cmp	r3, #0
 8007068:	d19d      	bne.n	8006fa6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800706a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800706c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 f8b2 	bl	80071d8 <SPI_EndRxTxTransaction>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d006      	beq.n	8007088 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2220      	movs	r2, #32
 8007084:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007086:	e010      	b.n	80070aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10b      	bne.n	80070a8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007090:	2300      	movs	r3, #0
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	e000      	b.n	80070aa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80070a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3730      	adds	r7, #48	; 0x30
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	603b      	str	r3, [r7, #0]
 80070d4:	4613      	mov	r3, r2
 80070d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80070d8:	f7fc fabe 	bl	8003658 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e0:	1a9b      	subs	r3, r3, r2
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	4413      	add	r3, r2
 80070e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80070e8:	f7fc fab6 	bl	8003658 <HAL_GetTick>
 80070ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80070ee:	4b39      	ldr	r3, [pc, #228]	; (80071d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	015b      	lsls	r3, r3, #5
 80070f4:	0d1b      	lsrs	r3, r3, #20
 80070f6:	69fa      	ldr	r2, [r7, #28]
 80070f8:	fb02 f303 	mul.w	r3, r2, r3
 80070fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070fe:	e054      	b.n	80071aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007106:	d050      	beq.n	80071aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007108:	f7fc faa6 	bl	8003658 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	429a      	cmp	r2, r3
 8007116:	d902      	bls.n	800711e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d13d      	bne.n	800719a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800712c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007136:	d111      	bne.n	800715c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007140:	d004      	beq.n	800714c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800714a:	d107      	bne.n	800715c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800715a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007164:	d10f      	bne.n	8007186 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007184:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e017      	b.n	80071ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	4013      	ands	r3, r2
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	bf0c      	ite	eq
 80071ba:	2301      	moveq	r3, #1
 80071bc:	2300      	movne	r3, #0
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	461a      	mov	r2, r3
 80071c2:	79fb      	ldrb	r3, [r7, #7]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d19b      	bne.n	8007100 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3720      	adds	r7, #32
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	20000528 	.word	0x20000528

080071d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af02      	add	r7, sp, #8
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80071e4:	4b1b      	ldr	r3, [pc, #108]	; (8007254 <SPI_EndRxTxTransaction+0x7c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a1b      	ldr	r2, [pc, #108]	; (8007258 <SPI_EndRxTxTransaction+0x80>)
 80071ea:	fba2 2303 	umull	r2, r3, r2, r3
 80071ee:	0d5b      	lsrs	r3, r3, #21
 80071f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80071f4:	fb02 f303 	mul.w	r3, r2, r3
 80071f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007202:	d112      	bne.n	800722a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2200      	movs	r2, #0
 800720c:	2180      	movs	r1, #128	; 0x80
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f7ff ff5a 	bl	80070c8 <SPI_WaitFlagStateUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d016      	beq.n	8007248 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721e:	f043 0220 	orr.w	r2, r3, #32
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e00f      	b.n	800724a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	3b01      	subs	r3, #1
 8007234:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007240:	2b80      	cmp	r3, #128	; 0x80
 8007242:	d0f2      	beq.n	800722a <SPI_EndRxTxTransaction+0x52>
 8007244:	e000      	b.n	8007248 <SPI_EndRxTxTransaction+0x70>
        break;
 8007246:	bf00      	nop
  }

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20000528 	.word	0x20000528
 8007258:	165e9f81 	.word	0x165e9f81

0800725c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e041      	b.n	80072f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d106      	bne.n	8007288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7fc f824 	bl	80032d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3304      	adds	r3, #4
 8007298:	4619      	mov	r1, r3
 800729a:	4610      	mov	r0, r2
 800729c:	f000 fd3a 	bl	8007d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b01      	cmp	r3, #1
 800730e:	d001      	beq.n	8007314 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e03c      	b.n	800738e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a1e      	ldr	r2, [pc, #120]	; (800739c <HAL_TIM_Base_Start+0xa0>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d018      	beq.n	8007358 <HAL_TIM_Base_Start+0x5c>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800732e:	d013      	beq.n	8007358 <HAL_TIM_Base_Start+0x5c>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a1a      	ldr	r2, [pc, #104]	; (80073a0 <HAL_TIM_Base_Start+0xa4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d00e      	beq.n	8007358 <HAL_TIM_Base_Start+0x5c>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a19      	ldr	r2, [pc, #100]	; (80073a4 <HAL_TIM_Base_Start+0xa8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d009      	beq.n	8007358 <HAL_TIM_Base_Start+0x5c>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a17      	ldr	r2, [pc, #92]	; (80073a8 <HAL_TIM_Base_Start+0xac>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d004      	beq.n	8007358 <HAL_TIM_Base_Start+0x5c>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a16      	ldr	r2, [pc, #88]	; (80073ac <HAL_TIM_Base_Start+0xb0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d111      	bne.n	800737c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b06      	cmp	r3, #6
 8007368:	d010      	beq.n	800738c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f042 0201 	orr.w	r2, r2, #1
 8007378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800737a:	e007      	b.n	800738c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f042 0201 	orr.w	r2, r2, #1
 800738a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	40010000 	.word	0x40010000
 80073a0:	40000400 	.word	0x40000400
 80073a4:	40000800 	.word	0x40000800
 80073a8:	40000c00 	.word	0x40000c00
 80073ac:	40014000 	.word	0x40014000

080073b0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6a1a      	ldr	r2, [r3, #32]
 80073be:	f241 1311 	movw	r3, #4369	; 0x1111
 80073c2:	4013      	ands	r3, r2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10f      	bne.n	80073e8 <HAL_TIM_Base_Stop+0x38>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6a1a      	ldr	r2, [r3, #32]
 80073ce:	f240 4344 	movw	r3, #1092	; 0x444
 80073d2:	4013      	ands	r3, r2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d107      	bne.n	80073e8 <HAL_TIM_Base_Stop+0x38>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 0201 	bic.w	r2, r2, #1
 80073e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
	...

08007400 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b01      	cmp	r3, #1
 8007412:	d001      	beq.n	8007418 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e044      	b.n	80074a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68da      	ldr	r2, [r3, #12]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f042 0201 	orr.w	r2, r2, #1
 800742e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a1e      	ldr	r2, [pc, #120]	; (80074b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d018      	beq.n	800746c <HAL_TIM_Base_Start_IT+0x6c>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007442:	d013      	beq.n	800746c <HAL_TIM_Base_Start_IT+0x6c>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a1a      	ldr	r2, [pc, #104]	; (80074b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d00e      	beq.n	800746c <HAL_TIM_Base_Start_IT+0x6c>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a19      	ldr	r2, [pc, #100]	; (80074b8 <HAL_TIM_Base_Start_IT+0xb8>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d009      	beq.n	800746c <HAL_TIM_Base_Start_IT+0x6c>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a17      	ldr	r2, [pc, #92]	; (80074bc <HAL_TIM_Base_Start_IT+0xbc>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d004      	beq.n	800746c <HAL_TIM_Base_Start_IT+0x6c>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a16      	ldr	r2, [pc, #88]	; (80074c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d111      	bne.n	8007490 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f003 0307 	and.w	r3, r3, #7
 8007476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2b06      	cmp	r3, #6
 800747c:	d010      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f042 0201 	orr.w	r2, r2, #1
 800748c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800748e:	e007      	b.n	80074a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f042 0201 	orr.w	r2, r2, #1
 800749e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	40010000 	.word	0x40010000
 80074b4:	40000400 	.word	0x40000400
 80074b8:	40000800 	.word	0x40000800
 80074bc:	40000c00 	.word	0x40000c00
 80074c0:	40014000 	.word	0x40014000

080074c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e041      	b.n	800755a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d106      	bne.n	80074f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f839 	bl	8007562 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3304      	adds	r3, #4
 8007500:	4619      	mov	r1, r3
 8007502:	4610      	mov	r0, r2
 8007504:	f000 fc06 	bl	8007d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007562:	b480      	push	{r7}
 8007564:	b083      	sub	sp, #12
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800756a:	bf00      	nop
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
	...

08007578 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d109      	bne.n	800759c <HAL_TIM_PWM_Start+0x24>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b01      	cmp	r3, #1
 8007592:	bf14      	ite	ne
 8007594:	2301      	movne	r3, #1
 8007596:	2300      	moveq	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	e022      	b.n	80075e2 <HAL_TIM_PWM_Start+0x6a>
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d109      	bne.n	80075b6 <HAL_TIM_PWM_Start+0x3e>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	bf14      	ite	ne
 80075ae:	2301      	movne	r3, #1
 80075b0:	2300      	moveq	r3, #0
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	e015      	b.n	80075e2 <HAL_TIM_PWM_Start+0x6a>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b08      	cmp	r3, #8
 80075ba:	d109      	bne.n	80075d0 <HAL_TIM_PWM_Start+0x58>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	bf14      	ite	ne
 80075c8:	2301      	movne	r3, #1
 80075ca:	2300      	moveq	r3, #0
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	e008      	b.n	80075e2 <HAL_TIM_PWM_Start+0x6a>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b01      	cmp	r3, #1
 80075da:	bf14      	ite	ne
 80075dc:	2301      	movne	r3, #1
 80075de:	2300      	moveq	r3, #0
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e068      	b.n	80076bc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d104      	bne.n	80075fa <HAL_TIM_PWM_Start+0x82>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075f8:	e013      	b.n	8007622 <HAL_TIM_PWM_Start+0xaa>
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	2b04      	cmp	r3, #4
 80075fe:	d104      	bne.n	800760a <HAL_TIM_PWM_Start+0x92>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007608:	e00b      	b.n	8007622 <HAL_TIM_PWM_Start+0xaa>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b08      	cmp	r3, #8
 800760e:	d104      	bne.n	800761a <HAL_TIM_PWM_Start+0xa2>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007618:	e003      	b.n	8007622 <HAL_TIM_PWM_Start+0xaa>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2202      	movs	r2, #2
 800761e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2201      	movs	r2, #1
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	4618      	mov	r0, r3
 800762c:	f000 fe18 	bl	8008260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a23      	ldr	r2, [pc, #140]	; (80076c4 <HAL_TIM_PWM_Start+0x14c>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d107      	bne.n	800764a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007648:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a1d      	ldr	r2, [pc, #116]	; (80076c4 <HAL_TIM_PWM_Start+0x14c>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d018      	beq.n	8007686 <HAL_TIM_PWM_Start+0x10e>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800765c:	d013      	beq.n	8007686 <HAL_TIM_PWM_Start+0x10e>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a19      	ldr	r2, [pc, #100]	; (80076c8 <HAL_TIM_PWM_Start+0x150>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d00e      	beq.n	8007686 <HAL_TIM_PWM_Start+0x10e>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a17      	ldr	r2, [pc, #92]	; (80076cc <HAL_TIM_PWM_Start+0x154>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d009      	beq.n	8007686 <HAL_TIM_PWM_Start+0x10e>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a16      	ldr	r2, [pc, #88]	; (80076d0 <HAL_TIM_PWM_Start+0x158>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d004      	beq.n	8007686 <HAL_TIM_PWM_Start+0x10e>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a14      	ldr	r2, [pc, #80]	; (80076d4 <HAL_TIM_PWM_Start+0x15c>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d111      	bne.n	80076aa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f003 0307 	and.w	r3, r3, #7
 8007690:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2b06      	cmp	r3, #6
 8007696:	d010      	beq.n	80076ba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0201 	orr.w	r2, r2, #1
 80076a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a8:	e007      	b.n	80076ba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f042 0201 	orr.w	r2, r2, #1
 80076b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	40010000 	.word	0x40010000
 80076c8:	40000400 	.word	0x40000400
 80076cc:	40000800 	.word	0x40000800
 80076d0:	40000c00 	.word	0x40000c00
 80076d4:	40014000 	.word	0x40014000

080076d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2200      	movs	r2, #0
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 fdb8 	bl	8008260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a29      	ldr	r2, [pc, #164]	; (800779c <HAL_TIM_PWM_Stop+0xc4>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d117      	bne.n	800772a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	6a1a      	ldr	r2, [r3, #32]
 8007700:	f241 1311 	movw	r3, #4369	; 0x1111
 8007704:	4013      	ands	r3, r2
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10f      	bne.n	800772a <HAL_TIM_PWM_Stop+0x52>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6a1a      	ldr	r2, [r3, #32]
 8007710:	f240 4344 	movw	r3, #1092	; 0x444
 8007714:	4013      	ands	r3, r2
 8007716:	2b00      	cmp	r3, #0
 8007718:	d107      	bne.n	800772a <HAL_TIM_PWM_Stop+0x52>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007728:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6a1a      	ldr	r2, [r3, #32]
 8007730:	f241 1311 	movw	r3, #4369	; 0x1111
 8007734:	4013      	ands	r3, r2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10f      	bne.n	800775a <HAL_TIM_PWM_Stop+0x82>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6a1a      	ldr	r2, [r3, #32]
 8007740:	f240 4344 	movw	r3, #1092	; 0x444
 8007744:	4013      	ands	r3, r2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d107      	bne.n	800775a <HAL_TIM_PWM_Stop+0x82>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0201 	bic.w	r2, r2, #1
 8007758:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d104      	bne.n	800776a <HAL_TIM_PWM_Stop+0x92>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007768:	e013      	b.n	8007792 <HAL_TIM_PWM_Stop+0xba>
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b04      	cmp	r3, #4
 800776e:	d104      	bne.n	800777a <HAL_TIM_PWM_Stop+0xa2>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007778:	e00b      	b.n	8007792 <HAL_TIM_PWM_Stop+0xba>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b08      	cmp	r3, #8
 800777e:	d104      	bne.n	800778a <HAL_TIM_PWM_Stop+0xb2>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007788:	e003      	b.n	8007792 <HAL_TIM_PWM_Stop+0xba>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	40010000 	.word	0x40010000

080077a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d122      	bne.n	80077fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d11b      	bne.n	80077fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f06f 0202 	mvn.w	r2, #2
 80077cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	f003 0303 	and.w	r3, r3, #3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fa77 	bl	8007cd6 <HAL_TIM_IC_CaptureCallback>
 80077e8:	e005      	b.n	80077f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fa69 	bl	8007cc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fa7a 	bl	8007cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f003 0304 	and.w	r3, r3, #4
 8007806:	2b04      	cmp	r3, #4
 8007808:	d122      	bne.n	8007850 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b04      	cmp	r3, #4
 8007816:	d11b      	bne.n	8007850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f06f 0204 	mvn.w	r2, #4
 8007820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2202      	movs	r2, #2
 8007826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fa4d 	bl	8007cd6 <HAL_TIM_IC_CaptureCallback>
 800783c:	e005      	b.n	800784a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fa3f 	bl	8007cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fa50 	bl	8007cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f003 0308 	and.w	r3, r3, #8
 800785a:	2b08      	cmp	r3, #8
 800785c:	d122      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f003 0308 	and.w	r3, r3, #8
 8007868:	2b08      	cmp	r3, #8
 800786a:	d11b      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f06f 0208 	mvn.w	r2, #8
 8007874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2204      	movs	r2, #4
 800787a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	f003 0303 	and.w	r3, r3, #3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fa23 	bl	8007cd6 <HAL_TIM_IC_CaptureCallback>
 8007890:	e005      	b.n	800789e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fa15 	bl	8007cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fa26 	bl	8007cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	f003 0310 	and.w	r3, r3, #16
 80078ae:	2b10      	cmp	r3, #16
 80078b0:	d122      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f003 0310 	and.w	r3, r3, #16
 80078bc:	2b10      	cmp	r3, #16
 80078be:	d11b      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f06f 0210 	mvn.w	r2, #16
 80078c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2208      	movs	r2, #8
 80078ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f9f9 	bl	8007cd6 <HAL_TIM_IC_CaptureCallback>
 80078e4:	e005      	b.n	80078f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f9eb 	bl	8007cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f9fc 	bl	8007cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b01      	cmp	r3, #1
 8007904:	d10e      	bne.n	8007924 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	2b01      	cmp	r3, #1
 8007912:	d107      	bne.n	8007924 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f06f 0201 	mvn.w	r2, #1
 800791c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7fb f8f2 	bl	8002b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792e:	2b80      	cmp	r3, #128	; 0x80
 8007930:	d10e      	bne.n	8007950 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793c:	2b80      	cmp	r3, #128	; 0x80
 800793e:	d107      	bne.n	8007950 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fd26 	bl	800839c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795a:	2b40      	cmp	r3, #64	; 0x40
 800795c:	d10e      	bne.n	800797c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007968:	2b40      	cmp	r3, #64	; 0x40
 800796a:	d107      	bne.n	800797c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f9c1 	bl	8007cfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b20      	cmp	r3, #32
 8007988:	d10e      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f003 0320 	and.w	r3, r3, #32
 8007994:	2b20      	cmp	r3, #32
 8007996:	d107      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f06f 0220 	mvn.w	r2, #32
 80079a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fcf0 	bl	8008388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079a8:	bf00      	nop
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079bc:	2300      	movs	r3, #0
 80079be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d101      	bne.n	80079ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079ca:	2302      	movs	r3, #2
 80079cc:	e0ae      	b.n	8007b2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b0c      	cmp	r3, #12
 80079da:	f200 809f 	bhi.w	8007b1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80079de:	a201      	add	r2, pc, #4	; (adr r2, 80079e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e4:	08007a19 	.word	0x08007a19
 80079e8:	08007b1d 	.word	0x08007b1d
 80079ec:	08007b1d 	.word	0x08007b1d
 80079f0:	08007b1d 	.word	0x08007b1d
 80079f4:	08007a59 	.word	0x08007a59
 80079f8:	08007b1d 	.word	0x08007b1d
 80079fc:	08007b1d 	.word	0x08007b1d
 8007a00:	08007b1d 	.word	0x08007b1d
 8007a04:	08007a9b 	.word	0x08007a9b
 8007a08:	08007b1d 	.word	0x08007b1d
 8007a0c:	08007b1d 	.word	0x08007b1d
 8007a10:	08007b1d 	.word	0x08007b1d
 8007a14:	08007adb 	.word	0x08007adb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68b9      	ldr	r1, [r7, #8]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f000 f9f8 	bl	8007e14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699a      	ldr	r2, [r3, #24]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f042 0208 	orr.w	r2, r2, #8
 8007a32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699a      	ldr	r2, [r3, #24]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f022 0204 	bic.w	r2, r2, #4
 8007a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6999      	ldr	r1, [r3, #24]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	691a      	ldr	r2, [r3, #16]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	619a      	str	r2, [r3, #24]
      break;
 8007a56:	e064      	b.n	8007b22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68b9      	ldr	r1, [r7, #8]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 fa3e 	bl	8007ee0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	699a      	ldr	r2, [r3, #24]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	699a      	ldr	r2, [r3, #24]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6999      	ldr	r1, [r3, #24]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	021a      	lsls	r2, r3, #8
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	430a      	orrs	r2, r1
 8007a96:	619a      	str	r2, [r3, #24]
      break;
 8007a98:	e043      	b.n	8007b22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68b9      	ldr	r1, [r7, #8]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 fa89 	bl	8007fb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	69da      	ldr	r2, [r3, #28]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f042 0208 	orr.w	r2, r2, #8
 8007ab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	69da      	ldr	r2, [r3, #28]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0204 	bic.w	r2, r2, #4
 8007ac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	69d9      	ldr	r1, [r3, #28]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	691a      	ldr	r2, [r3, #16]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	61da      	str	r2, [r3, #28]
      break;
 8007ad8:	e023      	b.n	8007b22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68b9      	ldr	r1, [r7, #8]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 fad3 	bl	800808c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	69da      	ldr	r2, [r3, #28]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69da      	ldr	r2, [r3, #28]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	69d9      	ldr	r1, [r3, #28]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	021a      	lsls	r2, r3, #8
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	61da      	str	r2, [r3, #28]
      break;
 8007b1a:	e002      	b.n	8007b22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d101      	bne.n	8007b50 <HAL_TIM_ConfigClockSource+0x1c>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	e0b4      	b.n	8007cba <HAL_TIM_ConfigClockSource+0x186>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b88:	d03e      	beq.n	8007c08 <HAL_TIM_ConfigClockSource+0xd4>
 8007b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b8e:	f200 8087 	bhi.w	8007ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8007b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b96:	f000 8086 	beq.w	8007ca6 <HAL_TIM_ConfigClockSource+0x172>
 8007b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b9e:	d87f      	bhi.n	8007ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ba0:	2b70      	cmp	r3, #112	; 0x70
 8007ba2:	d01a      	beq.n	8007bda <HAL_TIM_ConfigClockSource+0xa6>
 8007ba4:	2b70      	cmp	r3, #112	; 0x70
 8007ba6:	d87b      	bhi.n	8007ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ba8:	2b60      	cmp	r3, #96	; 0x60
 8007baa:	d050      	beq.n	8007c4e <HAL_TIM_ConfigClockSource+0x11a>
 8007bac:	2b60      	cmp	r3, #96	; 0x60
 8007bae:	d877      	bhi.n	8007ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8007bb0:	2b50      	cmp	r3, #80	; 0x50
 8007bb2:	d03c      	beq.n	8007c2e <HAL_TIM_ConfigClockSource+0xfa>
 8007bb4:	2b50      	cmp	r3, #80	; 0x50
 8007bb6:	d873      	bhi.n	8007ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8007bb8:	2b40      	cmp	r3, #64	; 0x40
 8007bba:	d058      	beq.n	8007c6e <HAL_TIM_ConfigClockSource+0x13a>
 8007bbc:	2b40      	cmp	r3, #64	; 0x40
 8007bbe:	d86f      	bhi.n	8007ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8007bc0:	2b30      	cmp	r3, #48	; 0x30
 8007bc2:	d064      	beq.n	8007c8e <HAL_TIM_ConfigClockSource+0x15a>
 8007bc4:	2b30      	cmp	r3, #48	; 0x30
 8007bc6:	d86b      	bhi.n	8007ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8007bc8:	2b20      	cmp	r3, #32
 8007bca:	d060      	beq.n	8007c8e <HAL_TIM_ConfigClockSource+0x15a>
 8007bcc:	2b20      	cmp	r3, #32
 8007bce:	d867      	bhi.n	8007ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d05c      	beq.n	8007c8e <HAL_TIM_ConfigClockSource+0x15a>
 8007bd4:	2b10      	cmp	r3, #16
 8007bd6:	d05a      	beq.n	8007c8e <HAL_TIM_ConfigClockSource+0x15a>
 8007bd8:	e062      	b.n	8007ca0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6818      	ldr	r0, [r3, #0]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	6899      	ldr	r1, [r3, #8]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	f000 fb19 	bl	8008220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	609a      	str	r2, [r3, #8]
      break;
 8007c06:	e04f      	b.n	8007ca8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6818      	ldr	r0, [r3, #0]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	6899      	ldr	r1, [r3, #8]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f000 fb02 	bl	8008220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	689a      	ldr	r2, [r3, #8]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c2a:	609a      	str	r2, [r3, #8]
      break;
 8007c2c:	e03c      	b.n	8007ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6818      	ldr	r0, [r3, #0]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	6859      	ldr	r1, [r3, #4]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	f000 fa76 	bl	800812c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2150      	movs	r1, #80	; 0x50
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 facf 	bl	80081ea <TIM_ITRx_SetConfig>
      break;
 8007c4c:	e02c      	b.n	8007ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6818      	ldr	r0, [r3, #0]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	6859      	ldr	r1, [r3, #4]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f000 fa95 	bl	800818a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2160      	movs	r1, #96	; 0x60
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 fabf 	bl	80081ea <TIM_ITRx_SetConfig>
      break;
 8007c6c:	e01c      	b.n	8007ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6818      	ldr	r0, [r3, #0]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	6859      	ldr	r1, [r3, #4]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f000 fa56 	bl	800812c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2140      	movs	r1, #64	; 0x40
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 faaf 	bl	80081ea <TIM_ITRx_SetConfig>
      break;
 8007c8c:	e00c      	b.n	8007ca8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4619      	mov	r1, r3
 8007c98:	4610      	mov	r0, r2
 8007c9a:	f000 faa6 	bl	80081ea <TIM_ITRx_SetConfig>
      break;
 8007c9e:	e003      	b.n	8007ca8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca4:	e000      	b.n	8007ca8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ca6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b083      	sub	sp, #12
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cca:	bf00      	nop
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b083      	sub	sp, #12
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cde:	bf00      	nop
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cf2:	bf00      	nop
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b083      	sub	sp, #12
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d06:	bf00      	nop
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
	...

08007d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a34      	ldr	r2, [pc, #208]	; (8007df8 <TIM_Base_SetConfig+0xe4>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d00f      	beq.n	8007d4c <TIM_Base_SetConfig+0x38>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d32:	d00b      	beq.n	8007d4c <TIM_Base_SetConfig+0x38>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a31      	ldr	r2, [pc, #196]	; (8007dfc <TIM_Base_SetConfig+0xe8>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d007      	beq.n	8007d4c <TIM_Base_SetConfig+0x38>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a30      	ldr	r2, [pc, #192]	; (8007e00 <TIM_Base_SetConfig+0xec>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d003      	beq.n	8007d4c <TIM_Base_SetConfig+0x38>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a2f      	ldr	r2, [pc, #188]	; (8007e04 <TIM_Base_SetConfig+0xf0>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d108      	bne.n	8007d5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a25      	ldr	r2, [pc, #148]	; (8007df8 <TIM_Base_SetConfig+0xe4>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d01b      	beq.n	8007d9e <TIM_Base_SetConfig+0x8a>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d6c:	d017      	beq.n	8007d9e <TIM_Base_SetConfig+0x8a>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a22      	ldr	r2, [pc, #136]	; (8007dfc <TIM_Base_SetConfig+0xe8>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d013      	beq.n	8007d9e <TIM_Base_SetConfig+0x8a>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a21      	ldr	r2, [pc, #132]	; (8007e00 <TIM_Base_SetConfig+0xec>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d00f      	beq.n	8007d9e <TIM_Base_SetConfig+0x8a>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a20      	ldr	r2, [pc, #128]	; (8007e04 <TIM_Base_SetConfig+0xf0>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d00b      	beq.n	8007d9e <TIM_Base_SetConfig+0x8a>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a1f      	ldr	r2, [pc, #124]	; (8007e08 <TIM_Base_SetConfig+0xf4>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d007      	beq.n	8007d9e <TIM_Base_SetConfig+0x8a>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a1e      	ldr	r2, [pc, #120]	; (8007e0c <TIM_Base_SetConfig+0xf8>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d003      	beq.n	8007d9e <TIM_Base_SetConfig+0x8a>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a1d      	ldr	r2, [pc, #116]	; (8007e10 <TIM_Base_SetConfig+0xfc>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d108      	bne.n	8007db0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a08      	ldr	r2, [pc, #32]	; (8007df8 <TIM_Base_SetConfig+0xe4>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d103      	bne.n	8007de4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	691a      	ldr	r2, [r3, #16]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	615a      	str	r2, [r3, #20]
}
 8007dea:	bf00      	nop
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	40010000 	.word	0x40010000
 8007dfc:	40000400 	.word	0x40000400
 8007e00:	40000800 	.word	0x40000800
 8007e04:	40000c00 	.word	0x40000c00
 8007e08:	40014000 	.word	0x40014000
 8007e0c:	40014400 	.word	0x40014400
 8007e10:	40014800 	.word	0x40014800

08007e14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b087      	sub	sp, #28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	f023 0201 	bic.w	r2, r3, #1
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f023 0303 	bic.w	r3, r3, #3
 8007e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f023 0302 	bic.w	r3, r3, #2
 8007e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a1c      	ldr	r2, [pc, #112]	; (8007edc <TIM_OC1_SetConfig+0xc8>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d10c      	bne.n	8007e8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	f023 0308 	bic.w	r3, r3, #8
 8007e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f023 0304 	bic.w	r3, r3, #4
 8007e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a13      	ldr	r2, [pc, #76]	; (8007edc <TIM_OC1_SetConfig+0xc8>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d111      	bne.n	8007eb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	621a      	str	r2, [r3, #32]
}
 8007ed0:	bf00      	nop
 8007ed2:	371c      	adds	r7, #28
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	40010000 	.word	0x40010000

08007ee0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	f023 0210 	bic.w	r2, r3, #16
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
 8007efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	021b      	lsls	r3, r3, #8
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f023 0320 	bic.w	r3, r3, #32
 8007f2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	011b      	lsls	r3, r3, #4
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a1e      	ldr	r2, [pc, #120]	; (8007fb4 <TIM_OC2_SetConfig+0xd4>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d10d      	bne.n	8007f5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	011b      	lsls	r3, r3, #4
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a15      	ldr	r2, [pc, #84]	; (8007fb4 <TIM_OC2_SetConfig+0xd4>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d113      	bne.n	8007f8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	695b      	ldr	r3, [r3, #20]
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	621a      	str	r2, [r3, #32]
}
 8007fa6:	bf00      	nop
 8007fa8:	371c      	adds	r7, #28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	40010000 	.word	0x40010000

08007fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	69db      	ldr	r3, [r3, #28]
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f023 0303 	bic.w	r3, r3, #3
 8007fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	021b      	lsls	r3, r3, #8
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	4313      	orrs	r3, r2
 800800c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a1d      	ldr	r2, [pc, #116]	; (8008088 <TIM_OC3_SetConfig+0xd0>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d10d      	bne.n	8008032 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800801c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	021b      	lsls	r3, r3, #8
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	4313      	orrs	r3, r2
 8008028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a14      	ldr	r2, [pc, #80]	; (8008088 <TIM_OC3_SetConfig+0xd0>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d113      	bne.n	8008062 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	011b      	lsls	r3, r3, #4
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	4313      	orrs	r3, r2
 8008054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	011b      	lsls	r3, r3, #4
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	4313      	orrs	r3, r2
 8008060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	621a      	str	r2, [r3, #32]
}
 800807c:	bf00      	nop
 800807e:	371c      	adds	r7, #28
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	40010000 	.word	0x40010000

0800808c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	69db      	ldr	r3, [r3, #28]
 80080b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	021b      	lsls	r3, r3, #8
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	031b      	lsls	r3, r3, #12
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a10      	ldr	r2, [pc, #64]	; (8008128 <TIM_OC4_SetConfig+0x9c>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d109      	bne.n	8008100 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	019b      	lsls	r3, r3, #6
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	621a      	str	r2, [r3, #32]
}
 800811a:	bf00      	nop
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	40010000 	.word	0x40010000

0800812c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800812c:	b480      	push	{r7}
 800812e:	b087      	sub	sp, #28
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	f023 0201 	bic.w	r2, r3, #1
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	011b      	lsls	r3, r3, #4
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	4313      	orrs	r3, r2
 8008160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f023 030a 	bic.w	r3, r3, #10
 8008168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	4313      	orrs	r3, r2
 8008170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	621a      	str	r2, [r3, #32]
}
 800817e:	bf00      	nop
 8008180:	371c      	adds	r7, #28
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800818a:	b480      	push	{r7}
 800818c:	b087      	sub	sp, #28
 800818e:	af00      	add	r7, sp, #0
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	f023 0210 	bic.w	r2, r3, #16
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	031b      	lsls	r3, r3, #12
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	4313      	orrs	r3, r2
 80081be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	011b      	lsls	r3, r3, #4
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	621a      	str	r2, [r3, #32]
}
 80081de:	bf00      	nop
 80081e0:	371c      	adds	r7, #28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b085      	sub	sp, #20
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	4313      	orrs	r3, r2
 8008208:	f043 0307 	orr.w	r3, r3, #7
 800820c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	609a      	str	r2, [r3, #8]
}
 8008214:	bf00      	nop
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008220:	b480      	push	{r7}
 8008222:	b087      	sub	sp, #28
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
 800822c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800823a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	021a      	lsls	r2, r3, #8
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	431a      	orrs	r2, r3
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	4313      	orrs	r3, r2
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	4313      	orrs	r3, r2
 800824c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	609a      	str	r2, [r3, #8]
}
 8008254:	bf00      	nop
 8008256:	371c      	adds	r7, #28
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008260:	b480      	push	{r7}
 8008262:	b087      	sub	sp, #28
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f003 031f 	and.w	r3, r3, #31
 8008272:	2201      	movs	r2, #1
 8008274:	fa02 f303 	lsl.w	r3, r2, r3
 8008278:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6a1a      	ldr	r2, [r3, #32]
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	43db      	mvns	r3, r3
 8008282:	401a      	ands	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6a1a      	ldr	r2, [r3, #32]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	f003 031f 	and.w	r3, r3, #31
 8008292:	6879      	ldr	r1, [r7, #4]
 8008294:	fa01 f303 	lsl.w	r3, r1, r3
 8008298:	431a      	orrs	r2, r3
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	621a      	str	r2, [r3, #32]
}
 800829e:	bf00      	nop
 80082a0:	371c      	adds	r7, #28
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
	...

080082ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d101      	bne.n	80082c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082c0:	2302      	movs	r3, #2
 80082c2:	e050      	b.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2202      	movs	r2, #2
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a1c      	ldr	r2, [pc, #112]	; (8008374 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d018      	beq.n	800833a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008310:	d013      	beq.n	800833a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a18      	ldr	r2, [pc, #96]	; (8008378 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d00e      	beq.n	800833a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a16      	ldr	r2, [pc, #88]	; (800837c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d009      	beq.n	800833a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a15      	ldr	r2, [pc, #84]	; (8008380 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d004      	beq.n	800833a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a13      	ldr	r2, [pc, #76]	; (8008384 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d10c      	bne.n	8008354 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	4313      	orrs	r3, r2
 800834a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	40010000 	.word	0x40010000
 8008378:	40000400 	.word	0x40000400
 800837c:	40000800 	.word	0x40000800
 8008380:	40000c00 	.word	0x40000c00
 8008384:	40014000 	.word	0x40014000

08008388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083b0:	b084      	sub	sp, #16
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b084      	sub	sp, #16
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	f107 001c 	add.w	r0, r7, #28
 80083be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d122      	bne.n	800840e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80083dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80083f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d105      	bne.n	8008402 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f001 fbee 	bl	8009be4 <USB_CoreReset>
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]
 800840c:	e01a      	b.n	8008444 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f001 fbe2 	bl	8009be4 <USB_CoreReset>
 8008420:	4603      	mov	r3, r0
 8008422:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008426:	2b00      	cmp	r3, #0
 8008428:	d106      	bne.n	8008438 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	639a      	str	r2, [r3, #56]	; 0x38
 8008436:	e005      	b.n	8008444 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	2b01      	cmp	r3, #1
 8008448:	d10b      	bne.n	8008462 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f043 0206 	orr.w	r2, r3, #6
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f043 0220 	orr.w	r2, r3, #32
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800846e:	b004      	add	sp, #16
 8008470:	4770      	bx	lr
	...

08008474 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008474:	b480      	push	{r7}
 8008476:	b087      	sub	sp, #28
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	4613      	mov	r3, r2
 8008480:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	2b02      	cmp	r3, #2
 8008486:	d165      	bne.n	8008554 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	4a41      	ldr	r2, [pc, #260]	; (8008590 <USB_SetTurnaroundTime+0x11c>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d906      	bls.n	800849e <USB_SetTurnaroundTime+0x2a>
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	4a40      	ldr	r2, [pc, #256]	; (8008594 <USB_SetTurnaroundTime+0x120>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d202      	bcs.n	800849e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008498:	230f      	movs	r3, #15
 800849a:	617b      	str	r3, [r7, #20]
 800849c:	e062      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	4a3c      	ldr	r2, [pc, #240]	; (8008594 <USB_SetTurnaroundTime+0x120>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d306      	bcc.n	80084b4 <USB_SetTurnaroundTime+0x40>
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	4a3b      	ldr	r2, [pc, #236]	; (8008598 <USB_SetTurnaroundTime+0x124>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d202      	bcs.n	80084b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80084ae:	230e      	movs	r3, #14
 80084b0:	617b      	str	r3, [r7, #20]
 80084b2:	e057      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	4a38      	ldr	r2, [pc, #224]	; (8008598 <USB_SetTurnaroundTime+0x124>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d306      	bcc.n	80084ca <USB_SetTurnaroundTime+0x56>
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	4a37      	ldr	r2, [pc, #220]	; (800859c <USB_SetTurnaroundTime+0x128>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d202      	bcs.n	80084ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80084c4:	230d      	movs	r3, #13
 80084c6:	617b      	str	r3, [r7, #20]
 80084c8:	e04c      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	4a33      	ldr	r2, [pc, #204]	; (800859c <USB_SetTurnaroundTime+0x128>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d306      	bcc.n	80084e0 <USB_SetTurnaroundTime+0x6c>
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	4a32      	ldr	r2, [pc, #200]	; (80085a0 <USB_SetTurnaroundTime+0x12c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d802      	bhi.n	80084e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80084da:	230c      	movs	r3, #12
 80084dc:	617b      	str	r3, [r7, #20]
 80084de:	e041      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	4a2f      	ldr	r2, [pc, #188]	; (80085a0 <USB_SetTurnaroundTime+0x12c>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d906      	bls.n	80084f6 <USB_SetTurnaroundTime+0x82>
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	4a2e      	ldr	r2, [pc, #184]	; (80085a4 <USB_SetTurnaroundTime+0x130>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d802      	bhi.n	80084f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80084f0:	230b      	movs	r3, #11
 80084f2:	617b      	str	r3, [r7, #20]
 80084f4:	e036      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	4a2a      	ldr	r2, [pc, #168]	; (80085a4 <USB_SetTurnaroundTime+0x130>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d906      	bls.n	800850c <USB_SetTurnaroundTime+0x98>
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	4a29      	ldr	r2, [pc, #164]	; (80085a8 <USB_SetTurnaroundTime+0x134>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d802      	bhi.n	800850c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008506:	230a      	movs	r3, #10
 8008508:	617b      	str	r3, [r7, #20]
 800850a:	e02b      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	4a26      	ldr	r2, [pc, #152]	; (80085a8 <USB_SetTurnaroundTime+0x134>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d906      	bls.n	8008522 <USB_SetTurnaroundTime+0xae>
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	4a25      	ldr	r2, [pc, #148]	; (80085ac <USB_SetTurnaroundTime+0x138>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d202      	bcs.n	8008522 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800851c:	2309      	movs	r3, #9
 800851e:	617b      	str	r3, [r7, #20]
 8008520:	e020      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	4a21      	ldr	r2, [pc, #132]	; (80085ac <USB_SetTurnaroundTime+0x138>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d306      	bcc.n	8008538 <USB_SetTurnaroundTime+0xc4>
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	4a20      	ldr	r2, [pc, #128]	; (80085b0 <USB_SetTurnaroundTime+0x13c>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d802      	bhi.n	8008538 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008532:	2308      	movs	r3, #8
 8008534:	617b      	str	r3, [r7, #20]
 8008536:	e015      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	4a1d      	ldr	r2, [pc, #116]	; (80085b0 <USB_SetTurnaroundTime+0x13c>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d906      	bls.n	800854e <USB_SetTurnaroundTime+0xda>
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	4a1c      	ldr	r2, [pc, #112]	; (80085b4 <USB_SetTurnaroundTime+0x140>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d202      	bcs.n	800854e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008548:	2307      	movs	r3, #7
 800854a:	617b      	str	r3, [r7, #20]
 800854c:	e00a      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800854e:	2306      	movs	r3, #6
 8008550:	617b      	str	r3, [r7, #20]
 8008552:	e007      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008554:	79fb      	ldrb	r3, [r7, #7]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d102      	bne.n	8008560 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800855a:	2309      	movs	r3, #9
 800855c:	617b      	str	r3, [r7, #20]
 800855e:	e001      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008560:	2309      	movs	r3, #9
 8008562:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	68da      	ldr	r2, [r3, #12]
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	029b      	lsls	r3, r3, #10
 8008578:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800857c:	431a      	orrs	r2, r3
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	371c      	adds	r7, #28
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	00d8acbf 	.word	0x00d8acbf
 8008594:	00e4e1c0 	.word	0x00e4e1c0
 8008598:	00f42400 	.word	0x00f42400
 800859c:	01067380 	.word	0x01067380
 80085a0:	011a499f 	.word	0x011a499f
 80085a4:	01312cff 	.word	0x01312cff
 80085a8:	014ca43f 	.word	0x014ca43f
 80085ac:	016e3600 	.word	0x016e3600
 80085b0:	01a6ab1f 	.word	0x01a6ab1f
 80085b4:	01e84800 	.word	0x01e84800

080085b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f043 0201 	orr.w	r2, r3, #1
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80085da:	b480      	push	{r7}
 80085dc:	b083      	sub	sp, #12
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	f023 0201 	bic.w	r2, r3, #1
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008608:	2300      	movs	r3, #0
 800860a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008618:	78fb      	ldrb	r3, [r7, #3]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d115      	bne.n	800864a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800862a:	2001      	movs	r0, #1
 800862c:	f7fb f820 	bl	8003670 <HAL_Delay>
      ms++;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	3301      	adds	r3, #1
 8008634:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f001 fa45 	bl	8009ac6 <USB_GetMode>
 800863c:	4603      	mov	r3, r0
 800863e:	2b01      	cmp	r3, #1
 8008640:	d01e      	beq.n	8008680 <USB_SetCurrentMode+0x84>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b31      	cmp	r3, #49	; 0x31
 8008646:	d9f0      	bls.n	800862a <USB_SetCurrentMode+0x2e>
 8008648:	e01a      	b.n	8008680 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d115      	bne.n	800867c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800865c:	2001      	movs	r0, #1
 800865e:	f7fb f807 	bl	8003670 <HAL_Delay>
      ms++;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3301      	adds	r3, #1
 8008666:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f001 fa2c 	bl	8009ac6 <USB_GetMode>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d005      	beq.n	8008680 <USB_SetCurrentMode+0x84>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2b31      	cmp	r3, #49	; 0x31
 8008678:	d9f0      	bls.n	800865c <USB_SetCurrentMode+0x60>
 800867a:	e001      	b.n	8008680 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e005      	b.n	800868c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b32      	cmp	r3, #50	; 0x32
 8008684:	d101      	bne.n	800868a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e000      	b.n	800868c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008694:	b084      	sub	sp, #16
 8008696:	b580      	push	{r7, lr}
 8008698:	b086      	sub	sp, #24
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80086a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80086ae:	2300      	movs	r3, #0
 80086b0:	613b      	str	r3, [r7, #16]
 80086b2:	e009      	b.n	80086c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	3340      	adds	r3, #64	; 0x40
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	2200      	movs	r2, #0
 80086c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	3301      	adds	r3, #1
 80086c6:	613b      	str	r3, [r7, #16]
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	2b0e      	cmp	r3, #14
 80086cc:	d9f2      	bls.n	80086b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80086ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d11c      	bne.n	800870e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086e2:	f043 0302 	orr.w	r3, r3, #2
 80086e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008704:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	639a      	str	r2, [r3, #56]	; 0x38
 800870c:	e00b      	b.n	8008726 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008712:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800872c:	461a      	mov	r2, r3
 800872e:	2300      	movs	r3, #0
 8008730:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008738:	4619      	mov	r1, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008740:	461a      	mov	r2, r3
 8008742:	680b      	ldr	r3, [r1, #0]
 8008744:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008748:	2b01      	cmp	r3, #1
 800874a:	d10c      	bne.n	8008766 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800874c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874e:	2b00      	cmp	r3, #0
 8008750:	d104      	bne.n	800875c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008752:	2100      	movs	r1, #0
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f965 	bl	8008a24 <USB_SetDevSpeed>
 800875a:	e008      	b.n	800876e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800875c:	2101      	movs	r1, #1
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f960 	bl	8008a24 <USB_SetDevSpeed>
 8008764:	e003      	b.n	800876e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008766:	2103      	movs	r1, #3
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f95b 	bl	8008a24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800876e:	2110      	movs	r1, #16
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f8f3 	bl	800895c <USB_FlushTxFifo>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f91f 	bl	80089c4 <USB_FlushRxFifo>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008796:	461a      	mov	r2, r3
 8008798:	2300      	movs	r3, #0
 800879a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a2:	461a      	mov	r2, r3
 80087a4:	2300      	movs	r3, #0
 80087a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ae:	461a      	mov	r2, r3
 80087b0:	2300      	movs	r3, #0
 80087b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087b4:	2300      	movs	r3, #0
 80087b6:	613b      	str	r3, [r7, #16]
 80087b8:	e043      	b.n	8008842 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087d0:	d118      	bne.n	8008804 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10a      	bne.n	80087ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e4:	461a      	mov	r2, r3
 80087e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80087ea:	6013      	str	r3, [r2, #0]
 80087ec:	e013      	b.n	8008816 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	015a      	lsls	r2, r3, #5
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	4413      	add	r3, r2
 80087f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087fa:	461a      	mov	r2, r3
 80087fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008800:	6013      	str	r3, [r2, #0]
 8008802:	e008      	b.n	8008816 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4413      	add	r3, r2
 800880c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008810:	461a      	mov	r2, r3
 8008812:	2300      	movs	r3, #0
 8008814:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	4413      	add	r3, r2
 800881e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008822:	461a      	mov	r2, r3
 8008824:	2300      	movs	r3, #0
 8008826:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008834:	461a      	mov	r2, r3
 8008836:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800883a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	3301      	adds	r3, #1
 8008840:	613b      	str	r3, [r7, #16]
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	429a      	cmp	r2, r3
 8008848:	d3b7      	bcc.n	80087ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800884a:	2300      	movs	r3, #0
 800884c:	613b      	str	r3, [r7, #16]
 800884e:	e043      	b.n	80088d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008866:	d118      	bne.n	800889a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10a      	bne.n	8008884 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	015a      	lsls	r2, r3, #5
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4413      	add	r3, r2
 8008876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800887a:	461a      	mov	r2, r3
 800887c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008880:	6013      	str	r3, [r2, #0]
 8008882:	e013      	b.n	80088ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	015a      	lsls	r2, r3, #5
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	4413      	add	r3, r2
 800888c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008890:	461a      	mov	r2, r3
 8008892:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	e008      	b.n	80088ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	015a      	lsls	r2, r3, #5
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	4413      	add	r3, r2
 80088a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a6:	461a      	mov	r2, r3
 80088a8:	2300      	movs	r3, #0
 80088aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b8:	461a      	mov	r2, r3
 80088ba:	2300      	movs	r3, #0
 80088bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ca:	461a      	mov	r2, r3
 80088cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80088d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	3301      	adds	r3, #1
 80088d6:	613b      	str	r3, [r7, #16]
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d3b7      	bcc.n	8008850 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008900:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008904:	2b00      	cmp	r3, #0
 8008906:	d105      	bne.n	8008914 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	f043 0210 	orr.w	r2, r3, #16
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	699a      	ldr	r2, [r3, #24]
 8008918:	4b0f      	ldr	r3, [pc, #60]	; (8008958 <USB_DevInit+0x2c4>)
 800891a:	4313      	orrs	r3, r2
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008922:	2b00      	cmp	r3, #0
 8008924:	d005      	beq.n	8008932 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	f043 0208 	orr.w	r2, r3, #8
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008934:	2b01      	cmp	r3, #1
 8008936:	d107      	bne.n	8008948 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008940:	f043 0304 	orr.w	r3, r3, #4
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008948:	7dfb      	ldrb	r3, [r7, #23]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3718      	adds	r7, #24
 800894e:	46bd      	mov	sp, r7
 8008950:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008954:	b004      	add	sp, #16
 8008956:	4770      	bx	lr
 8008958:	803c3800 	.word	0x803c3800

0800895c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008966:	2300      	movs	r3, #0
 8008968:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3301      	adds	r3, #1
 800896e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4a13      	ldr	r2, [pc, #76]	; (80089c0 <USB_FlushTxFifo+0x64>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d901      	bls.n	800897c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008978:	2303      	movs	r3, #3
 800897a:	e01b      	b.n	80089b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	2b00      	cmp	r3, #0
 8008982:	daf2      	bge.n	800896a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008984:	2300      	movs	r3, #0
 8008986:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	019b      	lsls	r3, r3, #6
 800898c:	f043 0220 	orr.w	r2, r3, #32
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	3301      	adds	r3, #1
 8008998:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	4a08      	ldr	r2, [pc, #32]	; (80089c0 <USB_FlushTxFifo+0x64>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d901      	bls.n	80089a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e006      	b.n	80089b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	f003 0320 	and.w	r3, r3, #32
 80089ae:	2b20      	cmp	r3, #32
 80089b0:	d0f0      	beq.n	8008994 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	00030d40 	.word	0x00030d40

080089c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089cc:	2300      	movs	r3, #0
 80089ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	3301      	adds	r3, #1
 80089d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	4a11      	ldr	r2, [pc, #68]	; (8008a20 <USB_FlushRxFifo+0x5c>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d901      	bls.n	80089e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	e018      	b.n	8008a14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	daf2      	bge.n	80089d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80089ea:	2300      	movs	r3, #0
 80089ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2210      	movs	r2, #16
 80089f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3301      	adds	r3, #1
 80089f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	4a08      	ldr	r2, [pc, #32]	; (8008a20 <USB_FlushRxFifo+0x5c>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d901      	bls.n	8008a06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e006      	b.n	8008a14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	f003 0310 	and.w	r3, r3, #16
 8008a0e:	2b10      	cmp	r3, #16
 8008a10:	d0f0      	beq.n	80089f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	00030d40 	.word	0x00030d40

08008a24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	78fb      	ldrb	r3, [r7, #3]
 8008a3e:	68f9      	ldr	r1, [r7, #12]
 8008a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a44:	4313      	orrs	r3, r2
 8008a46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b087      	sub	sp, #28
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f003 0306 	and.w	r3, r3, #6
 8008a6e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d102      	bne.n	8008a7c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008a76:	2300      	movs	r3, #0
 8008a78:	75fb      	strb	r3, [r7, #23]
 8008a7a:	e00a      	b.n	8008a92 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d002      	beq.n	8008a88 <USB_GetDevSpeed+0x32>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2b06      	cmp	r3, #6
 8008a86:	d102      	bne.n	8008a8e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008a88:	2302      	movs	r3, #2
 8008a8a:	75fb      	strb	r3, [r7, #23]
 8008a8c:	e001      	b.n	8008a92 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008a8e:	230f      	movs	r3, #15
 8008a90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	371c      	adds	r7, #28
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	785b      	ldrb	r3, [r3, #1]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d13a      	bne.n	8008b32 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac2:	69da      	ldr	r2, [r3, #28]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	f003 030f 	and.w	r3, r3, #15
 8008acc:	2101      	movs	r1, #1
 8008ace:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	68f9      	ldr	r1, [r7, #12]
 8008ad6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ada:	4313      	orrs	r3, r2
 8008adc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d155      	bne.n	8008ba0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	791b      	ldrb	r3, [r3, #4]
 8008b0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	059b      	lsls	r3, r3, #22
 8008b16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	0151      	lsls	r1, r2, #5
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	440a      	add	r2, r1
 8008b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b2e:	6013      	str	r3, [r2, #0]
 8008b30:	e036      	b.n	8008ba0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b38:	69da      	ldr	r2, [r3, #28]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	f003 030f 	and.w	r3, r3, #15
 8008b42:	2101      	movs	r1, #1
 8008b44:	fa01 f303 	lsl.w	r3, r1, r3
 8008b48:	041b      	lsls	r3, r3, #16
 8008b4a:	68f9      	ldr	r1, [r7, #12]
 8008b4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b50:	4313      	orrs	r3, r2
 8008b52:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	015a      	lsls	r2, r3, #5
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d11a      	bne.n	8008ba0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	791b      	ldrb	r3, [r3, #4]
 8008b84:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008b86:	430b      	orrs	r3, r1
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	0151      	lsls	r1, r2, #5
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	440a      	add	r2, r1
 8008b92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b9e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
	...

08008bb0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	785b      	ldrb	r3, [r3, #1]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d161      	bne.n	8008c90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	015a      	lsls	r2, r3, #5
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008be2:	d11f      	bne.n	8008c24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	0151      	lsls	r1, r2, #5
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	440a      	add	r2, r1
 8008bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	015a      	lsls	r2, r3, #5
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	0151      	lsls	r1, r2, #5
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	440a      	add	r2, r1
 8008c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	f003 030f 	and.w	r3, r3, #15
 8008c34:	2101      	movs	r1, #1
 8008c36:	fa01 f303 	lsl.w	r3, r1, r3
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	43db      	mvns	r3, r3
 8008c3e:	68f9      	ldr	r1, [r7, #12]
 8008c40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c44:	4013      	ands	r3, r2
 8008c46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c4e:	69da      	ldr	r2, [r3, #28]
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	f003 030f 	and.w	r3, r3, #15
 8008c58:	2101      	movs	r1, #1
 8008c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	43db      	mvns	r3, r3
 8008c62:	68f9      	ldr	r1, [r7, #12]
 8008c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c68:	4013      	ands	r3, r2
 8008c6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	0159      	lsls	r1, r3, #5
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	440b      	add	r3, r1
 8008c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c86:	4619      	mov	r1, r3
 8008c88:	4b35      	ldr	r3, [pc, #212]	; (8008d60 <USB_DeactivateEndpoint+0x1b0>)
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	600b      	str	r3, [r1, #0]
 8008c8e:	e060      	b.n	8008d52 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ca2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ca6:	d11f      	bne.n	8008ce8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	0151      	lsls	r1, r2, #5
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	440a      	add	r2, r1
 8008cbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cc6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	015a      	lsls	r2, r3, #5
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	0151      	lsls	r1, r2, #5
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	440a      	add	r2, r1
 8008cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ce2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ce6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	f003 030f 	and.w	r3, r3, #15
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8008cfe:	041b      	lsls	r3, r3, #16
 8008d00:	43db      	mvns	r3, r3
 8008d02:	68f9      	ldr	r1, [r7, #12]
 8008d04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d08:	4013      	ands	r3, r2
 8008d0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d12:	69da      	ldr	r2, [r3, #28]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	f003 030f 	and.w	r3, r3, #15
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d22:	041b      	lsls	r3, r3, #16
 8008d24:	43db      	mvns	r3, r3
 8008d26:	68f9      	ldr	r1, [r7, #12]
 8008d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	0159      	lsls	r1, r3, #5
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	440b      	add	r3, r1
 8008d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	4b05      	ldr	r3, [pc, #20]	; (8008d64 <USB_DeactivateEndpoint+0x1b4>)
 8008d4e:	4013      	ands	r3, r2
 8008d50:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	ec337800 	.word	0xec337800
 8008d64:	eff37800 	.word	0xeff37800

08008d68 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b08a      	sub	sp, #40	; 0x28
 8008d6c:	af02      	add	r7, sp, #8
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	4613      	mov	r3, r2
 8008d74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	785b      	ldrb	r3, [r3, #1]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	f040 815c 	bne.w	8009042 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d132      	bne.n	8008df8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	015a      	lsls	r2, r3, #5
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	4413      	add	r3, r2
 8008d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	69ba      	ldr	r2, [r7, #24]
 8008da2:	0151      	lsls	r1, r2, #5
 8008da4:	69fa      	ldr	r2, [r7, #28]
 8008da6:	440a      	add	r2, r1
 8008da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008db0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008db4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	0151      	lsls	r1, r2, #5
 8008dc8:	69fa      	ldr	r2, [r7, #28]
 8008dca:	440a      	add	r2, r1
 8008dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008dd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	69ba      	ldr	r2, [r7, #24]
 8008de6:	0151      	lsls	r1, r2, #5
 8008de8:	69fa      	ldr	r2, [r7, #28]
 8008dea:	440a      	add	r2, r1
 8008dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008df0:	0cdb      	lsrs	r3, r3, #19
 8008df2:	04db      	lsls	r3, r3, #19
 8008df4:	6113      	str	r3, [r2, #16]
 8008df6:	e074      	b.n	8008ee2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	69ba      	ldr	r2, [r7, #24]
 8008e08:	0151      	lsls	r1, r2, #5
 8008e0a:	69fa      	ldr	r2, [r7, #28]
 8008e0c:	440a      	add	r2, r1
 8008e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e12:	0cdb      	lsrs	r3, r3, #19
 8008e14:	04db      	lsls	r3, r3, #19
 8008e16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	015a      	lsls	r2, r3, #5
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	69ba      	ldr	r2, [r7, #24]
 8008e28:	0151      	lsls	r1, r2, #5
 8008e2a:	69fa      	ldr	r2, [r7, #28]
 8008e2c:	440a      	add	r2, r1
 8008e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e48:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	6999      	ldr	r1, [r3, #24]
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	440b      	add	r3, r1
 8008e54:	1e59      	subs	r1, r3, #1
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e5e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008e60:	4b9d      	ldr	r3, [pc, #628]	; (80090d8 <USB_EPStartXfer+0x370>)
 8008e62:	400b      	ands	r3, r1
 8008e64:	69b9      	ldr	r1, [r7, #24]
 8008e66:	0148      	lsls	r0, r1, #5
 8008e68:	69f9      	ldr	r1, [r7, #28]
 8008e6a:	4401      	add	r1, r0
 8008e6c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e70:	4313      	orrs	r3, r2
 8008e72:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e80:	691a      	ldr	r2, [r3, #16]
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e8a:	69b9      	ldr	r1, [r7, #24]
 8008e8c:	0148      	lsls	r0, r1, #5
 8008e8e:	69f9      	ldr	r1, [r7, #28]
 8008e90:	4401      	add	r1, r0
 8008e92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e96:	4313      	orrs	r3, r2
 8008e98:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	791b      	ldrb	r3, [r3, #4]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d11f      	bne.n	8008ee2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	015a      	lsls	r2, r3, #5
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	69ba      	ldr	r2, [r7, #24]
 8008eb2:	0151      	lsls	r1, r2, #5
 8008eb4:	69fa      	ldr	r2, [r7, #28]
 8008eb6:	440a      	add	r2, r1
 8008eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ebc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008ec0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	69ba      	ldr	r2, [r7, #24]
 8008ed2:	0151      	lsls	r1, r2, #5
 8008ed4:	69fa      	ldr	r2, [r7, #28]
 8008ed6:	440a      	add	r2, r1
 8008ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008edc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ee0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008ee2:	79fb      	ldrb	r3, [r7, #7]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d14b      	bne.n	8008f80 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	695b      	ldr	r3, [r3, #20]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d009      	beq.n	8008f04 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008efc:	461a      	mov	r2, r3
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	791b      	ldrb	r3, [r3, #4]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d128      	bne.n	8008f5e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d110      	bne.n	8008f3e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	69ba      	ldr	r2, [r7, #24]
 8008f2c:	0151      	lsls	r1, r2, #5
 8008f2e:	69fa      	ldr	r2, [r7, #28]
 8008f30:	440a      	add	r2, r1
 8008f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f3a:	6013      	str	r3, [r2, #0]
 8008f3c:	e00f      	b.n	8008f5e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	015a      	lsls	r2, r3, #5
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	69ba      	ldr	r2, [r7, #24]
 8008f4e:	0151      	lsls	r1, r2, #5
 8008f50:	69fa      	ldr	r2, [r7, #28]
 8008f52:	440a      	add	r2, r1
 8008f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f5c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	015a      	lsls	r2, r3, #5
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	4413      	add	r3, r2
 8008f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	0151      	lsls	r1, r2, #5
 8008f70:	69fa      	ldr	r2, [r7, #28]
 8008f72:	440a      	add	r2, r1
 8008f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f7c:	6013      	str	r3, [r2, #0]
 8008f7e:	e133      	b.n	80091e8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	015a      	lsls	r2, r3, #5
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	4413      	add	r3, r2
 8008f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	0151      	lsls	r1, r2, #5
 8008f92:	69fa      	ldr	r2, [r7, #28]
 8008f94:	440a      	add	r2, r1
 8008f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f9e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	791b      	ldrb	r3, [r3, #4]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d015      	beq.n	8008fd4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 811b 	beq.w	80091e8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	f003 030f 	and.w	r3, r3, #15
 8008fc2:	2101      	movs	r1, #1
 8008fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc8:	69f9      	ldr	r1, [r7, #28]
 8008fca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	634b      	str	r3, [r1, #52]	; 0x34
 8008fd2:	e109      	b.n	80091e8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d110      	bne.n	8009006 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	69ba      	ldr	r2, [r7, #24]
 8008ff4:	0151      	lsls	r1, r2, #5
 8008ff6:	69fa      	ldr	r2, [r7, #28]
 8008ff8:	440a      	add	r2, r1
 8008ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ffe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009002:	6013      	str	r3, [r2, #0]
 8009004:	e00f      	b.n	8009026 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	4413      	add	r3, r2
 800900e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	69ba      	ldr	r2, [r7, #24]
 8009016:	0151      	lsls	r1, r2, #5
 8009018:	69fa      	ldr	r2, [r7, #28]
 800901a:	440a      	add	r2, r1
 800901c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009024:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	6919      	ldr	r1, [r3, #16]
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	781a      	ldrb	r2, [r3, #0]
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	b298      	uxth	r0, r3
 8009034:	79fb      	ldrb	r3, [r7, #7]
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	4603      	mov	r3, r0
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f000 fade 	bl	80095fc <USB_WritePacket>
 8009040:	e0d2      	b.n	80091e8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	015a      	lsls	r2, r3, #5
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	4413      	add	r3, r2
 800904a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	69ba      	ldr	r2, [r7, #24]
 8009052:	0151      	lsls	r1, r2, #5
 8009054:	69fa      	ldr	r2, [r7, #28]
 8009056:	440a      	add	r2, r1
 8009058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800905c:	0cdb      	lsrs	r3, r3, #19
 800905e:	04db      	lsls	r3, r3, #19
 8009060:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	015a      	lsls	r2, r3, #5
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	4413      	add	r3, r2
 800906a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	69ba      	ldr	r2, [r7, #24]
 8009072:	0151      	lsls	r1, r2, #5
 8009074:	69fa      	ldr	r2, [r7, #28]
 8009076:	440a      	add	r2, r1
 8009078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800907c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009080:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009084:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d126      	bne.n	80090dc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	015a      	lsls	r2, r3, #5
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	4413      	add	r3, r2
 8009096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800909a:	691a      	ldr	r2, [r3, #16]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090a4:	69b9      	ldr	r1, [r7, #24]
 80090a6:	0148      	lsls	r0, r1, #5
 80090a8:	69f9      	ldr	r1, [r7, #28]
 80090aa:	4401      	add	r1, r0
 80090ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80090b0:	4313      	orrs	r3, r2
 80090b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	0151      	lsls	r1, r2, #5
 80090c6:	69fa      	ldr	r2, [r7, #28]
 80090c8:	440a      	add	r2, r1
 80090ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090d2:	6113      	str	r3, [r2, #16]
 80090d4:	e03a      	b.n	800914c <USB_EPStartXfer+0x3e4>
 80090d6:	bf00      	nop
 80090d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	699a      	ldr	r2, [r3, #24]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	4413      	add	r3, r2
 80090e6:	1e5a      	subs	r2, r3, #1
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80090f0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	8afa      	ldrh	r2, [r7, #22]
 80090f8:	fb03 f202 	mul.w	r2, r3, r2
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	015a      	lsls	r2, r3, #5
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	4413      	add	r3, r2
 8009108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800910c:	691a      	ldr	r2, [r3, #16]
 800910e:	8afb      	ldrh	r3, [r7, #22]
 8009110:	04d9      	lsls	r1, r3, #19
 8009112:	4b38      	ldr	r3, [pc, #224]	; (80091f4 <USB_EPStartXfer+0x48c>)
 8009114:	400b      	ands	r3, r1
 8009116:	69b9      	ldr	r1, [r7, #24]
 8009118:	0148      	lsls	r0, r1, #5
 800911a:	69f9      	ldr	r1, [r7, #28]
 800911c:	4401      	add	r1, r0
 800911e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009122:	4313      	orrs	r3, r2
 8009124:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	015a      	lsls	r2, r3, #5
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	4413      	add	r3, r2
 800912e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009132:	691a      	ldr	r2, [r3, #16]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	69db      	ldr	r3, [r3, #28]
 8009138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800913c:	69b9      	ldr	r1, [r7, #24]
 800913e:	0148      	lsls	r0, r1, #5
 8009140:	69f9      	ldr	r1, [r7, #28]
 8009142:	4401      	add	r1, r0
 8009144:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009148:	4313      	orrs	r3, r2
 800914a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800914c:	79fb      	ldrb	r3, [r7, #7]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d10d      	bne.n	800916e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d009      	beq.n	800916e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	6919      	ldr	r1, [r3, #16]
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	015a      	lsls	r2, r3, #5
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	4413      	add	r3, r2
 8009166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800916a:	460a      	mov	r2, r1
 800916c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	791b      	ldrb	r3, [r3, #4]
 8009172:	2b01      	cmp	r3, #1
 8009174:	d128      	bne.n	80091c8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009182:	2b00      	cmp	r3, #0
 8009184:	d110      	bne.n	80091a8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	4413      	add	r3, r2
 800918e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	0151      	lsls	r1, r2, #5
 8009198:	69fa      	ldr	r2, [r7, #28]
 800919a:	440a      	add	r2, r1
 800919c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80091a4:	6013      	str	r3, [r2, #0]
 80091a6:	e00f      	b.n	80091c8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	69ba      	ldr	r2, [r7, #24]
 80091b8:	0151      	lsls	r1, r2, #5
 80091ba:	69fa      	ldr	r2, [r7, #28]
 80091bc:	440a      	add	r2, r1
 80091be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	69ba      	ldr	r2, [r7, #24]
 80091d8:	0151      	lsls	r1, r2, #5
 80091da:	69fa      	ldr	r2, [r7, #28]
 80091dc:	440a      	add	r2, r1
 80091de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3720      	adds	r7, #32
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	1ff80000 	.word	0x1ff80000

080091f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b087      	sub	sp, #28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	4613      	mov	r3, r2
 8009204:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	785b      	ldrb	r3, [r3, #1]
 8009214:	2b01      	cmp	r3, #1
 8009216:	f040 80ce 	bne.w	80093b6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d132      	bne.n	8009288 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	015a      	lsls	r2, r3, #5
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	4413      	add	r3, r2
 800922a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	0151      	lsls	r1, r2, #5
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	440a      	add	r2, r1
 8009238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800923c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009240:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009244:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	015a      	lsls	r2, r3, #5
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	4413      	add	r3, r2
 800924e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	0151      	lsls	r1, r2, #5
 8009258:	697a      	ldr	r2, [r7, #20]
 800925a:	440a      	add	r2, r1
 800925c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009260:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009264:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	4413      	add	r3, r2
 800926e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	0151      	lsls	r1, r2, #5
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	440a      	add	r2, r1
 800927c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009280:	0cdb      	lsrs	r3, r3, #19
 8009282:	04db      	lsls	r3, r3, #19
 8009284:	6113      	str	r3, [r2, #16]
 8009286:	e04e      	b.n	8009326 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	4413      	add	r3, r2
 8009290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	693a      	ldr	r2, [r7, #16]
 8009298:	0151      	lsls	r1, r2, #5
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	440a      	add	r2, r1
 800929e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092a2:	0cdb      	lsrs	r3, r3, #19
 80092a4:	04db      	lsls	r3, r3, #19
 80092a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	0151      	lsls	r1, r2, #5
 80092ba:	697a      	ldr	r2, [r7, #20]
 80092bc:	440a      	add	r2, r1
 80092be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	699a      	ldr	r2, [r3, #24]
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d903      	bls.n	80092e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	68da      	ldr	r2, [r3, #12]
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	015a      	lsls	r2, r3, #5
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	693a      	ldr	r2, [r7, #16]
 80092f0:	0151      	lsls	r1, r2, #5
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	440a      	add	r2, r1
 80092f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930c:	691a      	ldr	r2, [r3, #16]
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009316:	6939      	ldr	r1, [r7, #16]
 8009318:	0148      	lsls	r0, r1, #5
 800931a:	6979      	ldr	r1, [r7, #20]
 800931c:	4401      	add	r1, r0
 800931e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009322:	4313      	orrs	r3, r2
 8009324:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009326:	79fb      	ldrb	r3, [r7, #7]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d11e      	bne.n	800936a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d009      	beq.n	8009348 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	015a      	lsls	r2, r3, #5
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	4413      	add	r3, r2
 800933c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009340:	461a      	mov	r2, r3
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	695b      	ldr	r3, [r3, #20]
 8009346:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	015a      	lsls	r2, r3, #5
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	4413      	add	r3, r2
 8009350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	0151      	lsls	r1, r2, #5
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	440a      	add	r2, r1
 800935e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009362:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009366:	6013      	str	r3, [r2, #0]
 8009368:	e097      	b.n	800949a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	4413      	add	r3, r2
 8009372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	0151      	lsls	r1, r2, #5
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	440a      	add	r2, r1
 8009380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009384:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009388:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	2b00      	cmp	r3, #0
 8009390:	f000 8083 	beq.w	800949a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800939a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	f003 030f 	and.w	r3, r3, #15
 80093a4:	2101      	movs	r1, #1
 80093a6:	fa01 f303 	lsl.w	r3, r1, r3
 80093aa:	6979      	ldr	r1, [r7, #20]
 80093ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093b0:	4313      	orrs	r3, r2
 80093b2:	634b      	str	r3, [r1, #52]	; 0x34
 80093b4:	e071      	b.n	800949a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	015a      	lsls	r2, r3, #5
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	4413      	add	r3, r2
 80093be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	693a      	ldr	r2, [r7, #16]
 80093c6:	0151      	lsls	r1, r2, #5
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	440a      	add	r2, r1
 80093cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093d0:	0cdb      	lsrs	r3, r3, #19
 80093d2:	04db      	lsls	r3, r3, #19
 80093d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	015a      	lsls	r2, r3, #5
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	4413      	add	r3, r2
 80093de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	0151      	lsls	r1, r2, #5
 80093e8:	697a      	ldr	r2, [r7, #20]
 80093ea:	440a      	add	r2, r1
 80093ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d003      	beq.n	800940a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	68da      	ldr	r2, [r3, #12]
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	68da      	ldr	r2, [r3, #12]
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	015a      	lsls	r2, r3, #5
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	4413      	add	r3, r2
 800941a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	0151      	lsls	r1, r2, #5
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	440a      	add	r2, r1
 8009428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800942c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009430:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	4413      	add	r3, r2
 800943a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800943e:	691a      	ldr	r2, [r3, #16]
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	69db      	ldr	r3, [r3, #28]
 8009444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009448:	6939      	ldr	r1, [r7, #16]
 800944a:	0148      	lsls	r0, r1, #5
 800944c:	6979      	ldr	r1, [r7, #20]
 800944e:	4401      	add	r1, r0
 8009450:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009454:	4313      	orrs	r3, r2
 8009456:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009458:	79fb      	ldrb	r3, [r7, #7]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d10d      	bne.n	800947a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d009      	beq.n	800947a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	6919      	ldr	r1, [r3, #16]
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	4413      	add	r3, r2
 8009472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009476:	460a      	mov	r2, r1
 8009478:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	4413      	add	r3, r2
 8009482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	693a      	ldr	r2, [r7, #16]
 800948a:	0151      	lsls	r1, r2, #5
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	440a      	add	r2, r1
 8009490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009494:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009498:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	371c      	adds	r7, #28
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b087      	sub	sp, #28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80094b2:	2300      	movs	r3, #0
 80094b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	785b      	ldrb	r3, [r3, #1]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d14a      	bne.n	800955c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094de:	f040 8086 	bne.w	80095ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	015a      	lsls	r2, r3, #5
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	7812      	ldrb	r2, [r2, #0]
 80094f6:	0151      	lsls	r1, r2, #5
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	440a      	add	r2, r1
 80094fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009500:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009504:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	015a      	lsls	r2, r3, #5
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	4413      	add	r3, r2
 8009510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	7812      	ldrb	r2, [r2, #0]
 800951a:	0151      	lsls	r1, r2, #5
 800951c:	693a      	ldr	r2, [r7, #16]
 800951e:	440a      	add	r2, r1
 8009520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009524:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009528:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	3301      	adds	r3, #1
 800952e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f242 7210 	movw	r2, #10000	; 0x2710
 8009536:	4293      	cmp	r3, r2
 8009538:	d902      	bls.n	8009540 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	75fb      	strb	r3, [r7, #23]
          break;
 800953e:	e056      	b.n	80095ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	015a      	lsls	r2, r3, #5
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	4413      	add	r3, r2
 800954a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009558:	d0e7      	beq.n	800952a <USB_EPStopXfer+0x82>
 800955a:	e048      	b.n	80095ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	015a      	lsls	r2, r3, #5
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	4413      	add	r3, r2
 8009566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009574:	d13b      	bne.n	80095ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	4413      	add	r3, r2
 8009580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	7812      	ldrb	r2, [r2, #0]
 800958a:	0151      	lsls	r1, r2, #5
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	440a      	add	r2, r1
 8009590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009594:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009598:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	7812      	ldrb	r2, [r2, #0]
 80095ae:	0151      	lsls	r1, r2, #5
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	440a      	add	r2, r1
 80095b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	3301      	adds	r3, #1
 80095c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d902      	bls.n	80095d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	75fb      	strb	r3, [r7, #23]
          break;
 80095d2:	e00c      	b.n	80095ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	015a      	lsls	r2, r3, #5
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	4413      	add	r3, r2
 80095de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095ec:	d0e7      	beq.n	80095be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	371c      	adds	r7, #28
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b089      	sub	sp, #36	; 0x24
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	4611      	mov	r1, r2
 8009608:	461a      	mov	r2, r3
 800960a:	460b      	mov	r3, r1
 800960c:	71fb      	strb	r3, [r7, #7]
 800960e:	4613      	mov	r3, r2
 8009610:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800961a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800961e:	2b00      	cmp	r3, #0
 8009620:	d123      	bne.n	800966a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009622:	88bb      	ldrh	r3, [r7, #4]
 8009624:	3303      	adds	r3, #3
 8009626:	089b      	lsrs	r3, r3, #2
 8009628:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800962a:	2300      	movs	r3, #0
 800962c:	61bb      	str	r3, [r7, #24]
 800962e:	e018      	b.n	8009662 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009630:	79fb      	ldrb	r3, [r7, #7]
 8009632:	031a      	lsls	r2, r3, #12
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	4413      	add	r3, r2
 8009638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800963c:	461a      	mov	r2, r3
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	3301      	adds	r3, #1
 8009648:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	3301      	adds	r3, #1
 800964e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	3301      	adds	r3, #1
 8009654:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	3301      	adds	r3, #1
 800965a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	3301      	adds	r3, #1
 8009660:	61bb      	str	r3, [r7, #24]
 8009662:	69ba      	ldr	r2, [r7, #24]
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	429a      	cmp	r2, r3
 8009668:	d3e2      	bcc.n	8009630 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3724      	adds	r7, #36	; 0x24
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009678:	b480      	push	{r7}
 800967a:	b08b      	sub	sp, #44	; 0x2c
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	4613      	mov	r3, r2
 8009684:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800968e:	88fb      	ldrh	r3, [r7, #6]
 8009690:	089b      	lsrs	r3, r3, #2
 8009692:	b29b      	uxth	r3, r3
 8009694:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009696:	88fb      	ldrh	r3, [r7, #6]
 8009698:	f003 0303 	and.w	r3, r3, #3
 800969c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800969e:	2300      	movs	r3, #0
 80096a0:	623b      	str	r3, [r7, #32]
 80096a2:	e014      	b.n	80096ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80096b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b2:	3301      	adds	r3, #1
 80096b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80096b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b8:	3301      	adds	r3, #1
 80096ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80096bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096be:	3301      	adds	r3, #1
 80096c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80096c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c4:	3301      	adds	r3, #1
 80096c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80096c8:	6a3b      	ldr	r3, [r7, #32]
 80096ca:	3301      	adds	r3, #1
 80096cc:	623b      	str	r3, [r7, #32]
 80096ce:	6a3a      	ldr	r2, [r7, #32]
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d3e6      	bcc.n	80096a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80096d6:	8bfb      	ldrh	r3, [r7, #30]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d01e      	beq.n	800971a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80096dc:	2300      	movs	r3, #0
 80096de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096e6:	461a      	mov	r2, r3
 80096e8:	f107 0310 	add.w	r3, r7, #16
 80096ec:	6812      	ldr	r2, [r2, #0]
 80096ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80096f0:	693a      	ldr	r2, [r7, #16]
 80096f2:	6a3b      	ldr	r3, [r7, #32]
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	00db      	lsls	r3, r3, #3
 80096f8:	fa22 f303 	lsr.w	r3, r2, r3
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009700:	701a      	strb	r2, [r3, #0]
      i++;
 8009702:	6a3b      	ldr	r3, [r7, #32]
 8009704:	3301      	adds	r3, #1
 8009706:	623b      	str	r3, [r7, #32]
      pDest++;
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	3301      	adds	r3, #1
 800970c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800970e:	8bfb      	ldrh	r3, [r7, #30]
 8009710:	3b01      	subs	r3, #1
 8009712:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009714:	8bfb      	ldrh	r3, [r7, #30]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1ea      	bne.n	80096f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800971c:	4618      	mov	r0, r3
 800971e:	372c      	adds	r7, #44	; 0x2c
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	785b      	ldrb	r3, [r3, #1]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d12c      	bne.n	800979e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	015a      	lsls	r2, r3, #5
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	4413      	add	r3, r2
 800974c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	db12      	blt.n	800977c <USB_EPSetStall+0x54>
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00f      	beq.n	800977c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	015a      	lsls	r2, r3, #5
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	4413      	add	r3, r2
 8009764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	0151      	lsls	r1, r2, #5
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	440a      	add	r2, r1
 8009772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009776:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800977a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	0151      	lsls	r1, r2, #5
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	440a      	add	r2, r1
 8009792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009796:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800979a:	6013      	str	r3, [r2, #0]
 800979c:	e02b      	b.n	80097f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	015a      	lsls	r2, r3, #5
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	4413      	add	r3, r2
 80097a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	db12      	blt.n	80097d6 <USB_EPSetStall+0xae>
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00f      	beq.n	80097d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	015a      	lsls	r2, r3, #5
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	4413      	add	r3, r2
 80097be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	0151      	lsls	r1, r2, #5
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	440a      	add	r2, r1
 80097cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80097d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	015a      	lsls	r2, r3, #5
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	4413      	add	r3, r2
 80097de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	0151      	lsls	r1, r2, #5
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	440a      	add	r2, r1
 80097ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80097f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3714      	adds	r7, #20
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	785b      	ldrb	r3, [r3, #1]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d128      	bne.n	8009872 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	015a      	lsls	r2, r3, #5
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	4413      	add	r3, r2
 8009828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	0151      	lsls	r1, r2, #5
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	440a      	add	r2, r1
 8009836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800983a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800983e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	791b      	ldrb	r3, [r3, #4]
 8009844:	2b03      	cmp	r3, #3
 8009846:	d003      	beq.n	8009850 <USB_EPClearStall+0x4c>
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	791b      	ldrb	r3, [r3, #4]
 800984c:	2b02      	cmp	r3, #2
 800984e:	d138      	bne.n	80098c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	015a      	lsls	r2, r3, #5
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	4413      	add	r3, r2
 8009858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	0151      	lsls	r1, r2, #5
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	440a      	add	r2, r1
 8009866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800986a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	e027      	b.n	80098c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	015a      	lsls	r2, r3, #5
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	4413      	add	r3, r2
 800987a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	0151      	lsls	r1, r2, #5
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	440a      	add	r2, r1
 8009888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800988c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009890:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	791b      	ldrb	r3, [r3, #4]
 8009896:	2b03      	cmp	r3, #3
 8009898:	d003      	beq.n	80098a2 <USB_EPClearStall+0x9e>
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	791b      	ldrb	r3, [r3, #4]
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d10f      	bne.n	80098c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	015a      	lsls	r2, r3, #5
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	4413      	add	r3, r2
 80098aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	0151      	lsls	r1, r2, #5
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	440a      	add	r2, r1
 80098b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	460b      	mov	r3, r1
 80098da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80098f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	78fb      	ldrb	r3, [r7, #3]
 80098fe:	011b      	lsls	r3, r3, #4
 8009900:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009904:	68f9      	ldr	r1, [r7, #12]
 8009906:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800990a:	4313      	orrs	r3, r2
 800990c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009936:	f023 0303 	bic.w	r3, r3, #3
 800993a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800994a:	f023 0302 	bic.w	r3, r3, #2
 800994e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800995e:	b480      	push	{r7}
 8009960:	b085      	sub	sp, #20
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009978:	f023 0303 	bic.w	r3, r3, #3
 800997c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800998c:	f043 0302 	orr.w	r3, r3, #2
 8009990:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	4013      	ands	r3, r2
 80099b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80099b8:	68fb      	ldr	r3, [r7, #12]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80099c6:	b480      	push	{r7}
 80099c8:	b085      	sub	sp, #20
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099d8:	699b      	ldr	r3, [r3, #24]
 80099da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	4013      	ands	r3, r2
 80099e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	0c1b      	lsrs	r3, r3, #16
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3714      	adds	r7, #20
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr

080099fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80099fa:	b480      	push	{r7}
 80099fc:	b085      	sub	sp, #20
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a16:	69db      	ldr	r3, [r3, #28]
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	b29b      	uxth	r3, r3
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3714      	adds	r7, #20
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b085      	sub	sp, #20
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	460b      	mov	r3, r1
 8009a38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009a3e:	78fb      	ldrb	r3, [r7, #3]
 8009a40:	015a      	lsls	r2, r3, #5
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	4413      	add	r3, r2
 8009a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	68ba      	ldr	r2, [r7, #8]
 8009a58:	4013      	ands	r3, r2
 8009a5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a5c:	68bb      	ldr	r3, [r7, #8]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a6a:	b480      	push	{r7}
 8009a6c:	b087      	sub	sp, #28
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	460b      	mov	r3, r1
 8009a74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a8c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009a8e:	78fb      	ldrb	r3, [r7, #3]
 8009a90:	f003 030f 	and.w	r3, r3, #15
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	fa22 f303 	lsr.w	r3, r2, r3
 8009a9a:	01db      	lsls	r3, r3, #7
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009aa4:	78fb      	ldrb	r3, [r7, #3]
 8009aa6:	015a      	lsls	r2, r3, #5
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	4413      	add	r3, r2
 8009aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ab8:	68bb      	ldr	r3, [r7, #8]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	371c      	adds	r7, #28
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b083      	sub	sp, #12
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	695b      	ldr	r3, [r3, #20]
 8009ad2:	f003 0301 	and.w	r3, r3, #1
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009ae2:	b480      	push	{r7}
 8009ae4:	b085      	sub	sp, #20
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009afc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009b00:	f023 0307 	bic.w	r3, r3, #7
 8009b04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3714      	adds	r7, #20
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b087      	sub	sp, #28
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	460b      	mov	r3, r1
 8009b32:	607a      	str	r2, [r7, #4]
 8009b34:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	333c      	adds	r3, #60	; 0x3c
 8009b3e:	3304      	adds	r3, #4
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	4a26      	ldr	r2, [pc, #152]	; (8009be0 <USB_EP0_OutStart+0xb8>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d90a      	bls.n	8009b62 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b5c:	d101      	bne.n	8009b62 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	e037      	b.n	8009bd2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b68:	461a      	mov	r2, r3
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b90:	f043 0318 	orr.w	r3, r3, #24
 8009b94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	697a      	ldr	r2, [r7, #20]
 8009ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ba4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009ba8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009baa:	7afb      	ldrb	r3, [r7, #11]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d10f      	bne.n	8009bd0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	697a      	ldr	r2, [r7, #20]
 8009bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009bce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	371c      	adds	r7, #28
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	4f54300a 	.word	0x4f54300a

08009be4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	4a13      	ldr	r2, [pc, #76]	; (8009c48 <USB_CoreReset+0x64>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d901      	bls.n	8009c02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e01b      	b.n	8009c3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	daf2      	bge.n	8009bf0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	f043 0201 	orr.w	r2, r3, #1
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	4a09      	ldr	r2, [pc, #36]	; (8009c48 <USB_CoreReset+0x64>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d901      	bls.n	8009c2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e006      	b.n	8009c3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	f003 0301 	and.w	r3, r3, #1
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d0f0      	beq.n	8009c1a <USB_CoreReset+0x36>

  return HAL_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3714      	adds	r7, #20
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	00030d40 	.word	0x00030d40

08009c4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	460b      	mov	r3, r1
 8009c56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009c58:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009c5c:	f005 fb64 	bl	800f328 <USBD_static_malloc>
 8009c60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d109      	bne.n	8009c7c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	32b0      	adds	r2, #176	; 0xb0
 8009c72:	2100      	movs	r1, #0
 8009c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009c78:	2302      	movs	r3, #2
 8009c7a:	e0d4      	b.n	8009e26 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009c7c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009c80:	2100      	movs	r1, #0
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f005 fbdc 	bl	800f440 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	32b0      	adds	r2, #176	; 0xb0
 8009c92:	68f9      	ldr	r1, [r7, #12]
 8009c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	32b0      	adds	r2, #176	; 0xb0
 8009ca2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	7c1b      	ldrb	r3, [r3, #16]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d138      	bne.n	8009d26 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009cb4:	4b5e      	ldr	r3, [pc, #376]	; (8009e30 <USBD_CDC_Init+0x1e4>)
 8009cb6:	7819      	ldrb	r1, [r3, #0]
 8009cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cbc:	2202      	movs	r2, #2
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f005 fa0f 	bl	800f0e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009cc4:	4b5a      	ldr	r3, [pc, #360]	; (8009e30 <USBD_CDC_Init+0x1e4>)
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	f003 020f 	and.w	r2, r3, #15
 8009ccc:	6879      	ldr	r1, [r7, #4]
 8009cce:	4613      	mov	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4413      	add	r3, r2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	440b      	add	r3, r1
 8009cd8:	3324      	adds	r3, #36	; 0x24
 8009cda:	2201      	movs	r2, #1
 8009cdc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009cde:	4b55      	ldr	r3, [pc, #340]	; (8009e34 <USBD_CDC_Init+0x1e8>)
 8009ce0:	7819      	ldrb	r1, [r3, #0]
 8009ce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f005 f9fa 	bl	800f0e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009cee:	4b51      	ldr	r3, [pc, #324]	; (8009e34 <USBD_CDC_Init+0x1e8>)
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	f003 020f 	and.w	r2, r3, #15
 8009cf6:	6879      	ldr	r1, [r7, #4]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4413      	add	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	440b      	add	r3, r1
 8009d02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d06:	2201      	movs	r2, #1
 8009d08:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009d0a:	4b4b      	ldr	r3, [pc, #300]	; (8009e38 <USBD_CDC_Init+0x1ec>)
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	f003 020f 	and.w	r2, r3, #15
 8009d12:	6879      	ldr	r1, [r7, #4]
 8009d14:	4613      	mov	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4413      	add	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	440b      	add	r3, r1
 8009d1e:	3326      	adds	r3, #38	; 0x26
 8009d20:	2210      	movs	r2, #16
 8009d22:	801a      	strh	r2, [r3, #0]
 8009d24:	e035      	b.n	8009d92 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009d26:	4b42      	ldr	r3, [pc, #264]	; (8009e30 <USBD_CDC_Init+0x1e4>)
 8009d28:	7819      	ldrb	r1, [r3, #0]
 8009d2a:	2340      	movs	r3, #64	; 0x40
 8009d2c:	2202      	movs	r2, #2
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f005 f9d7 	bl	800f0e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009d34:	4b3e      	ldr	r3, [pc, #248]	; (8009e30 <USBD_CDC_Init+0x1e4>)
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	f003 020f 	and.w	r2, r3, #15
 8009d3c:	6879      	ldr	r1, [r7, #4]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	440b      	add	r3, r1
 8009d48:	3324      	adds	r3, #36	; 0x24
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009d4e:	4b39      	ldr	r3, [pc, #228]	; (8009e34 <USBD_CDC_Init+0x1e8>)
 8009d50:	7819      	ldrb	r1, [r3, #0]
 8009d52:	2340      	movs	r3, #64	; 0x40
 8009d54:	2202      	movs	r2, #2
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f005 f9c3 	bl	800f0e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009d5c:	4b35      	ldr	r3, [pc, #212]	; (8009e34 <USBD_CDC_Init+0x1e8>)
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	f003 020f 	and.w	r2, r3, #15
 8009d64:	6879      	ldr	r1, [r7, #4]
 8009d66:	4613      	mov	r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	4413      	add	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	440b      	add	r3, r1
 8009d70:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d74:	2201      	movs	r2, #1
 8009d76:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009d78:	4b2f      	ldr	r3, [pc, #188]	; (8009e38 <USBD_CDC_Init+0x1ec>)
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	f003 020f 	and.w	r2, r3, #15
 8009d80:	6879      	ldr	r1, [r7, #4]
 8009d82:	4613      	mov	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	440b      	add	r3, r1
 8009d8c:	3326      	adds	r3, #38	; 0x26
 8009d8e:	2210      	movs	r2, #16
 8009d90:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d92:	4b29      	ldr	r3, [pc, #164]	; (8009e38 <USBD_CDC_Init+0x1ec>)
 8009d94:	7819      	ldrb	r1, [r3, #0]
 8009d96:	2308      	movs	r3, #8
 8009d98:	2203      	movs	r2, #3
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f005 f9a1 	bl	800f0e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009da0:	4b25      	ldr	r3, [pc, #148]	; (8009e38 <USBD_CDC_Init+0x1ec>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	f003 020f 	and.w	r2, r3, #15
 8009da8:	6879      	ldr	r1, [r7, #4]
 8009daa:	4613      	mov	r3, r2
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	4413      	add	r3, r2
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	440b      	add	r3, r1
 8009db4:	3324      	adds	r3, #36	; 0x24
 8009db6:	2201      	movs	r2, #1
 8009db8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	33b0      	adds	r3, #176	; 0xb0
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4413      	add	r3, r2
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d101      	bne.n	8009df4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009df0:	2302      	movs	r3, #2
 8009df2:	e018      	b.n	8009e26 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	7c1b      	ldrb	r3, [r3, #16]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10a      	bne.n	8009e12 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009dfc:	4b0d      	ldr	r3, [pc, #52]	; (8009e34 <USBD_CDC_Init+0x1e8>)
 8009dfe:	7819      	ldrb	r1, [r3, #0]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f005 fa58 	bl	800f2c0 <USBD_LL_PrepareReceive>
 8009e10:	e008      	b.n	8009e24 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e12:	4b08      	ldr	r3, [pc, #32]	; (8009e34 <USBD_CDC_Init+0x1e8>)
 8009e14:	7819      	ldrb	r1, [r3, #0]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e1c:	2340      	movs	r3, #64	; 0x40
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f005 fa4e 	bl	800f2c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3710      	adds	r7, #16
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	200005bb 	.word	0x200005bb
 8009e34:	200005bc 	.word	0x200005bc
 8009e38:	200005bd 	.word	0x200005bd

08009e3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	460b      	mov	r3, r1
 8009e46:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009e48:	4b3a      	ldr	r3, [pc, #232]	; (8009f34 <USBD_CDC_DeInit+0xf8>)
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f005 f96d 	bl	800f12e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009e54:	4b37      	ldr	r3, [pc, #220]	; (8009f34 <USBD_CDC_DeInit+0xf8>)
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	f003 020f 	and.w	r2, r3, #15
 8009e5c:	6879      	ldr	r1, [r7, #4]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	4413      	add	r3, r2
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	440b      	add	r3, r1
 8009e68:	3324      	adds	r3, #36	; 0x24
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009e6e:	4b32      	ldr	r3, [pc, #200]	; (8009f38 <USBD_CDC_DeInit+0xfc>)
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	4619      	mov	r1, r3
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f005 f95a 	bl	800f12e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009e7a:	4b2f      	ldr	r3, [pc, #188]	; (8009f38 <USBD_CDC_DeInit+0xfc>)
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	f003 020f 	and.w	r2, r3, #15
 8009e82:	6879      	ldr	r1, [r7, #4]
 8009e84:	4613      	mov	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4413      	add	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	440b      	add	r3, r1
 8009e8e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e92:	2200      	movs	r2, #0
 8009e94:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009e96:	4b29      	ldr	r3, [pc, #164]	; (8009f3c <USBD_CDC_DeInit+0x100>)
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f005 f946 	bl	800f12e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009ea2:	4b26      	ldr	r3, [pc, #152]	; (8009f3c <USBD_CDC_DeInit+0x100>)
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	f003 020f 	and.w	r2, r3, #15
 8009eaa:	6879      	ldr	r1, [r7, #4]
 8009eac:	4613      	mov	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	440b      	add	r3, r1
 8009eb6:	3324      	adds	r3, #36	; 0x24
 8009eb8:	2200      	movs	r2, #0
 8009eba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009ebc:	4b1f      	ldr	r3, [pc, #124]	; (8009f3c <USBD_CDC_DeInit+0x100>)
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	f003 020f 	and.w	r2, r3, #15
 8009ec4:	6879      	ldr	r1, [r7, #4]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	4413      	add	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	440b      	add	r3, r1
 8009ed0:	3326      	adds	r3, #38	; 0x26
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	32b0      	adds	r2, #176	; 0xb0
 8009ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d01f      	beq.n	8009f28 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	33b0      	adds	r3, #176	; 0xb0
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	4413      	add	r3, r2
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	32b0      	adds	r2, #176	; 0xb0
 8009f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f005 fa1a 	bl	800f344 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	32b0      	adds	r2, #176	; 0xb0
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	200005bb 	.word	0x200005bb
 8009f38:	200005bc 	.word	0x200005bc
 8009f3c:	200005bd 	.word	0x200005bd

08009f40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	32b0      	adds	r2, #176	; 0xb0
 8009f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f58:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f62:	2300      	movs	r3, #0
 8009f64:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d101      	bne.n	8009f70 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009f6c:	2303      	movs	r3, #3
 8009f6e:	e0bf      	b.n	800a0f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d050      	beq.n	800a01e <USBD_CDC_Setup+0xde>
 8009f7c:	2b20      	cmp	r3, #32
 8009f7e:	f040 80af 	bne.w	800a0e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	88db      	ldrh	r3, [r3, #6]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d03a      	beq.n	800a000 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	b25b      	sxtb	r3, r3
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	da1b      	bge.n	8009fcc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	33b0      	adds	r3, #176	; 0xb0
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	683a      	ldr	r2, [r7, #0]
 8009fa8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009faa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009fac:	683a      	ldr	r2, [r7, #0]
 8009fae:	88d2      	ldrh	r2, [r2, #6]
 8009fb0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	88db      	ldrh	r3, [r3, #6]
 8009fb6:	2b07      	cmp	r3, #7
 8009fb8:	bf28      	it	cs
 8009fba:	2307      	movcs	r3, #7
 8009fbc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	89fa      	ldrh	r2, [r7, #14]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f001 fd43 	bl	800ba50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009fca:	e090      	b.n	800a0ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	785a      	ldrb	r2, [r3, #1]
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	88db      	ldrh	r3, [r3, #6]
 8009fda:	2b3f      	cmp	r3, #63	; 0x3f
 8009fdc:	d803      	bhi.n	8009fe6 <USBD_CDC_Setup+0xa6>
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	88db      	ldrh	r3, [r3, #6]
 8009fe2:	b2da      	uxtb	r2, r3
 8009fe4:	e000      	b.n	8009fe8 <USBD_CDC_Setup+0xa8>
 8009fe6:	2240      	movs	r2, #64	; 0x40
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009fee:	6939      	ldr	r1, [r7, #16]
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f001 fd55 	bl	800baa8 <USBD_CtlPrepareRx>
      break;
 8009ffe:	e076      	b.n	800a0ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	33b0      	adds	r3, #176	; 0xb0
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	7850      	ldrb	r0, [r2, #1]
 800a016:	2200      	movs	r2, #0
 800a018:	6839      	ldr	r1, [r7, #0]
 800a01a:	4798      	blx	r3
      break;
 800a01c:	e067      	b.n	800a0ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	785b      	ldrb	r3, [r3, #1]
 800a022:	2b0b      	cmp	r3, #11
 800a024:	d851      	bhi.n	800a0ca <USBD_CDC_Setup+0x18a>
 800a026:	a201      	add	r2, pc, #4	; (adr r2, 800a02c <USBD_CDC_Setup+0xec>)
 800a028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02c:	0800a05d 	.word	0x0800a05d
 800a030:	0800a0d9 	.word	0x0800a0d9
 800a034:	0800a0cb 	.word	0x0800a0cb
 800a038:	0800a0cb 	.word	0x0800a0cb
 800a03c:	0800a0cb 	.word	0x0800a0cb
 800a040:	0800a0cb 	.word	0x0800a0cb
 800a044:	0800a0cb 	.word	0x0800a0cb
 800a048:	0800a0cb 	.word	0x0800a0cb
 800a04c:	0800a0cb 	.word	0x0800a0cb
 800a050:	0800a0cb 	.word	0x0800a0cb
 800a054:	0800a087 	.word	0x0800a087
 800a058:	0800a0b1 	.word	0x0800a0b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a062:	b2db      	uxtb	r3, r3
 800a064:	2b03      	cmp	r3, #3
 800a066:	d107      	bne.n	800a078 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a068:	f107 030a 	add.w	r3, r7, #10
 800a06c:	2202      	movs	r2, #2
 800a06e:	4619      	mov	r1, r3
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f001 fced 	bl	800ba50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a076:	e032      	b.n	800a0de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f001 fc77 	bl	800b96e <USBD_CtlError>
            ret = USBD_FAIL;
 800a080:	2303      	movs	r3, #3
 800a082:	75fb      	strb	r3, [r7, #23]
          break;
 800a084:	e02b      	b.n	800a0de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	2b03      	cmp	r3, #3
 800a090:	d107      	bne.n	800a0a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a092:	f107 030d 	add.w	r3, r7, #13
 800a096:	2201      	movs	r2, #1
 800a098:	4619      	mov	r1, r3
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f001 fcd8 	bl	800ba50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a0a0:	e01d      	b.n	800a0de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a0a2:	6839      	ldr	r1, [r7, #0]
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f001 fc62 	bl	800b96e <USBD_CtlError>
            ret = USBD_FAIL;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	75fb      	strb	r3, [r7, #23]
          break;
 800a0ae:	e016      	b.n	800a0de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b03      	cmp	r3, #3
 800a0ba:	d00f      	beq.n	800a0dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f001 fc55 	bl	800b96e <USBD_CtlError>
            ret = USBD_FAIL;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a0c8:	e008      	b.n	800a0dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f001 fc4e 	bl	800b96e <USBD_CtlError>
          ret = USBD_FAIL;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	75fb      	strb	r3, [r7, #23]
          break;
 800a0d6:	e002      	b.n	800a0de <USBD_CDC_Setup+0x19e>
          break;
 800a0d8:	bf00      	nop
 800a0da:	e008      	b.n	800a0ee <USBD_CDC_Setup+0x1ae>
          break;
 800a0dc:	bf00      	nop
      }
      break;
 800a0de:	e006      	b.n	800a0ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a0e0:	6839      	ldr	r1, [r7, #0]
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f001 fc43 	bl	800b96e <USBD_CtlError>
      ret = USBD_FAIL;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	75fb      	strb	r3, [r7, #23]
      break;
 800a0ec:	bf00      	nop
  }

  return (uint8_t)ret;
 800a0ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3718      	adds	r7, #24
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	460b      	mov	r3, r1
 800a102:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a10a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	32b0      	adds	r2, #176	; 0xb0
 800a116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a11e:	2303      	movs	r3, #3
 800a120:	e065      	b.n	800a1ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	32b0      	adds	r2, #176	; 0xb0
 800a12c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a130:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a132:	78fb      	ldrb	r3, [r7, #3]
 800a134:	f003 020f 	and.w	r2, r3, #15
 800a138:	6879      	ldr	r1, [r7, #4]
 800a13a:	4613      	mov	r3, r2
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4413      	add	r3, r2
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	440b      	add	r3, r1
 800a144:	3318      	adds	r3, #24
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d02f      	beq.n	800a1ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a14c:	78fb      	ldrb	r3, [r7, #3]
 800a14e:	f003 020f 	and.w	r2, r3, #15
 800a152:	6879      	ldr	r1, [r7, #4]
 800a154:	4613      	mov	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4413      	add	r3, r2
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	440b      	add	r3, r1
 800a15e:	3318      	adds	r3, #24
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	78fb      	ldrb	r3, [r7, #3]
 800a164:	f003 010f 	and.w	r1, r3, #15
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	460b      	mov	r3, r1
 800a16c:	00db      	lsls	r3, r3, #3
 800a16e:	440b      	add	r3, r1
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4403      	add	r3, r0
 800a174:	3348      	adds	r3, #72	; 0x48
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	fbb2 f1f3 	udiv	r1, r2, r3
 800a17c:	fb01 f303 	mul.w	r3, r1, r3
 800a180:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a182:	2b00      	cmp	r3, #0
 800a184:	d112      	bne.n	800a1ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a186:	78fb      	ldrb	r3, [r7, #3]
 800a188:	f003 020f 	and.w	r2, r3, #15
 800a18c:	6879      	ldr	r1, [r7, #4]
 800a18e:	4613      	mov	r3, r2
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	4413      	add	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	440b      	add	r3, r1
 800a198:	3318      	adds	r3, #24
 800a19a:	2200      	movs	r2, #0
 800a19c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a19e:	78f9      	ldrb	r1, [r7, #3]
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f005 f86a 	bl	800f27e <USBD_LL_Transmit>
 800a1aa:	e01f      	b.n	800a1ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	33b0      	adds	r3, #176	; 0xb0
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4413      	add	r3, r2
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d010      	beq.n	800a1ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	33b0      	adds	r3, #176	; 0xb0
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4413      	add	r3, r2
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a1e8:	78fa      	ldrb	r2, [r7, #3]
 800a1ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b084      	sub	sp, #16
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
 800a1fe:	460b      	mov	r3, r1
 800a200:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	32b0      	adds	r2, #176	; 0xb0
 800a20c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a210:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	32b0      	adds	r2, #176	; 0xb0
 800a21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a224:	2303      	movs	r3, #3
 800a226:	e01a      	b.n	800a25e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a228:	78fb      	ldrb	r3, [r7, #3]
 800a22a:	4619      	mov	r1, r3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f005 f868 	bl	800f302 <USBD_LL_GetRxDataSize>
 800a232:	4602      	mov	r2, r0
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	33b0      	adds	r3, #176	; 0xb0
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4413      	add	r3, r2
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a258:	4611      	mov	r1, r2
 800a25a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a25c:	2300      	movs	r3, #0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b084      	sub	sp, #16
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	32b0      	adds	r2, #176	; 0xb0
 800a278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a27c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d101      	bne.n	800a288 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a284:	2303      	movs	r3, #3
 800a286:	e025      	b.n	800a2d4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	33b0      	adds	r3, #176	; 0xb0
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4413      	add	r3, r2
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d01a      	beq.n	800a2d2 <USBD_CDC_EP0_RxReady+0x6c>
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a2a2:	2bff      	cmp	r3, #255	; 0xff
 800a2a4:	d015      	beq.n	800a2d2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	33b0      	adds	r3, #176	; 0xb0
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	4413      	add	r3, r2
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a2be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a2c6:	b292      	uxth	r2, r2
 800a2c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	22ff      	movs	r2, #255	; 0xff
 800a2ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2e4:	2182      	movs	r1, #130	; 0x82
 800a2e6:	4818      	ldr	r0, [pc, #96]	; (800a348 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a2e8:	f000 fd09 	bl	800acfe <USBD_GetEpDesc>
 800a2ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2ee:	2101      	movs	r1, #1
 800a2f0:	4815      	ldr	r0, [pc, #84]	; (800a348 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a2f2:	f000 fd04 	bl	800acfe <USBD_GetEpDesc>
 800a2f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a2f8:	2181      	movs	r1, #129	; 0x81
 800a2fa:	4813      	ldr	r0, [pc, #76]	; (800a348 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a2fc:	f000 fcff 	bl	800acfe <USBD_GetEpDesc>
 800a300:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	2210      	movs	r2, #16
 800a30c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d006      	beq.n	800a322 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	2200      	movs	r2, #0
 800a318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a31c:	711a      	strb	r2, [r3, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d006      	beq.n	800a336 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a330:	711a      	strb	r2, [r3, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2243      	movs	r2, #67	; 0x43
 800a33a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a33c:	4b02      	ldr	r3, [pc, #8]	; (800a348 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3718      	adds	r7, #24
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	20000578 	.word	0x20000578

0800a34c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b086      	sub	sp, #24
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a354:	2182      	movs	r1, #130	; 0x82
 800a356:	4818      	ldr	r0, [pc, #96]	; (800a3b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a358:	f000 fcd1 	bl	800acfe <USBD_GetEpDesc>
 800a35c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a35e:	2101      	movs	r1, #1
 800a360:	4815      	ldr	r0, [pc, #84]	; (800a3b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a362:	f000 fccc 	bl	800acfe <USBD_GetEpDesc>
 800a366:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a368:	2181      	movs	r1, #129	; 0x81
 800a36a:	4813      	ldr	r0, [pc, #76]	; (800a3b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a36c:	f000 fcc7 	bl	800acfe <USBD_GetEpDesc>
 800a370:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d002      	beq.n	800a37e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	2210      	movs	r2, #16
 800a37c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d006      	beq.n	800a392 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	2200      	movs	r2, #0
 800a388:	711a      	strb	r2, [r3, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f042 0202 	orr.w	r2, r2, #2
 800a390:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d006      	beq.n	800a3a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2200      	movs	r2, #0
 800a39c:	711a      	strb	r2, [r3, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f042 0202 	orr.w	r2, r2, #2
 800a3a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2243      	movs	r2, #67	; 0x43
 800a3aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a3ac:	4b02      	ldr	r3, [pc, #8]	; (800a3b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3718      	adds	r7, #24
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	20000578 	.word	0x20000578

0800a3bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b086      	sub	sp, #24
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a3c4:	2182      	movs	r1, #130	; 0x82
 800a3c6:	4818      	ldr	r0, [pc, #96]	; (800a428 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a3c8:	f000 fc99 	bl	800acfe <USBD_GetEpDesc>
 800a3cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	4815      	ldr	r0, [pc, #84]	; (800a428 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a3d2:	f000 fc94 	bl	800acfe <USBD_GetEpDesc>
 800a3d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a3d8:	2181      	movs	r1, #129	; 0x81
 800a3da:	4813      	ldr	r0, [pc, #76]	; (800a428 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a3dc:	f000 fc8f 	bl	800acfe <USBD_GetEpDesc>
 800a3e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	2210      	movs	r2, #16
 800a3ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d006      	beq.n	800a402 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3fc:	711a      	strb	r2, [r3, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d006      	beq.n	800a416 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a410:	711a      	strb	r2, [r3, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2243      	movs	r2, #67	; 0x43
 800a41a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a41c:	4b02      	ldr	r3, [pc, #8]	; (800a428 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3718      	adds	r7, #24
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	20000578 	.word	0x20000578

0800a42c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	220a      	movs	r2, #10
 800a438:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a43a:	4b03      	ldr	r3, [pc, #12]	; (800a448 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr
 800a448:	20000534 	.word	0x20000534

0800a44c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d101      	bne.n	800a460 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a45c:	2303      	movs	r3, #3
 800a45e:	e009      	b.n	800a474 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	33b0      	adds	r3, #176	; 0xb0
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	4413      	add	r3, r2
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a480:	b480      	push	{r7}
 800a482:	b087      	sub	sp, #28
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	32b0      	adds	r2, #176	; 0xb0
 800a496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a49a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d101      	bne.n	800a4a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	e008      	b.n	800a4b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	371c      	adds	r7, #28
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	32b0      	adds	r2, #176	; 0xb0
 800a4d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d101      	bne.n	800a4e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e004      	b.n	800a4f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
	...

0800a500 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	32b0      	adds	r2, #176	; 0xb0
 800a512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a516:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	32b0      	adds	r2, #176	; 0xb0
 800a522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d101      	bne.n	800a52e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a52a:	2303      	movs	r3, #3
 800a52c:	e018      	b.n	800a560 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	7c1b      	ldrb	r3, [r3, #16]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d10a      	bne.n	800a54c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a536:	4b0c      	ldr	r3, [pc, #48]	; (800a568 <USBD_CDC_ReceivePacket+0x68>)
 800a538:	7819      	ldrb	r1, [r3, #0]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a540:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f004 febb 	bl	800f2c0 <USBD_LL_PrepareReceive>
 800a54a:	e008      	b.n	800a55e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a54c:	4b06      	ldr	r3, [pc, #24]	; (800a568 <USBD_CDC_ReceivePacket+0x68>)
 800a54e:	7819      	ldrb	r1, [r3, #0]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a556:	2340      	movs	r3, #64	; 0x40
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f004 feb1 	bl	800f2c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	200005bc 	.word	0x200005bc

0800a56c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b086      	sub	sp, #24
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	4613      	mov	r3, r2
 800a578:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d101      	bne.n	800a584 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a580:	2303      	movs	r3, #3
 800a582:	e01f      	b.n	800a5c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2200      	movs	r2, #0
 800a588:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2200      	movs	r2, #0
 800a598:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d003      	beq.n	800a5aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	68ba      	ldr	r2, [r7, #8]
 800a5a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	79fa      	ldrb	r2, [r7, #7]
 800a5b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f004 fd2b 	bl	800f014 <USBD_LL_Init>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a5c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3718      	adds	r7, #24
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d101      	bne.n	800a5e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	e025      	b.n	800a630 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	683a      	ldr	r2, [r7, #0]
 800a5e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	32ae      	adds	r2, #174	; 0xae
 800a5f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d00f      	beq.n	800a620 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	32ae      	adds	r2, #174	; 0xae
 800a60a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a610:	f107 020e 	add.w	r2, r7, #14
 800a614:	4610      	mov	r0, r2
 800a616:	4798      	blx	r3
 800a618:	4602      	mov	r2, r0
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a626:	1c5a      	adds	r2, r3, #1
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a62e:	2300      	movs	r3, #0
}
 800a630:	4618      	mov	r0, r3
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f004 fd33 	bl	800f0ac <USBD_LL_Start>
 800a646:	4603      	mov	r3, r0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3708      	adds	r7, #8
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a658:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	370c      	adds	r7, #12
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr

0800a666 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b084      	sub	sp, #16
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
 800a66e:	460b      	mov	r3, r1
 800a670:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a672:	2300      	movs	r3, #0
 800a674:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d009      	beq.n	800a694 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	78fa      	ldrb	r2, [r7, #3]
 800a68a:	4611      	mov	r1, r2
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	4798      	blx	r3
 800a690:	4603      	mov	r3, r0
 800a692:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a694:	7bfb      	ldrb	r3, [r7, #15]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b084      	sub	sp, #16
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	78fa      	ldrb	r2, [r7, #3]
 800a6b8:	4611      	mov	r1, r2
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	4798      	blx	r3
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d001      	beq.n	800a6c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a6c4:	2303      	movs	r3, #3
 800a6c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b084      	sub	sp, #16
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6e2:	6839      	ldr	r1, [r7, #0]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f001 f908 	bl	800b8fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a706:	f003 031f 	and.w	r3, r3, #31
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d01a      	beq.n	800a744 <USBD_LL_SetupStage+0x72>
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d822      	bhi.n	800a758 <USBD_LL_SetupStage+0x86>
 800a712:	2b00      	cmp	r3, #0
 800a714:	d002      	beq.n	800a71c <USBD_LL_SetupStage+0x4a>
 800a716:	2b01      	cmp	r3, #1
 800a718:	d00a      	beq.n	800a730 <USBD_LL_SetupStage+0x5e>
 800a71a:	e01d      	b.n	800a758 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a722:	4619      	mov	r1, r3
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fb5f 	bl	800ade8 <USBD_StdDevReq>
 800a72a:	4603      	mov	r3, r0
 800a72c:	73fb      	strb	r3, [r7, #15]
      break;
 800a72e:	e020      	b.n	800a772 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a736:	4619      	mov	r1, r3
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 fbc7 	bl	800aecc <USBD_StdItfReq>
 800a73e:	4603      	mov	r3, r0
 800a740:	73fb      	strb	r3, [r7, #15]
      break;
 800a742:	e016      	b.n	800a772 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a74a:	4619      	mov	r1, r3
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fc29 	bl	800afa4 <USBD_StdEPReq>
 800a752:	4603      	mov	r3, r0
 800a754:	73fb      	strb	r3, [r7, #15]
      break;
 800a756:	e00c      	b.n	800a772 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a75e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a762:	b2db      	uxtb	r3, r3
 800a764:	4619      	mov	r1, r3
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f004 fd00 	bl	800f16c <USBD_LL_StallEP>
 800a76c:	4603      	mov	r3, r0
 800a76e:	73fb      	strb	r3, [r7, #15]
      break;
 800a770:	bf00      	nop
  }

  return ret;
 800a772:	7bfb      	ldrb	r3, [r7, #15]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b086      	sub	sp, #24
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	460b      	mov	r3, r1
 800a786:	607a      	str	r2, [r7, #4]
 800a788:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a78e:	7afb      	ldrb	r3, [r7, #11]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d16e      	bne.n	800a872 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a79a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a7a2:	2b03      	cmp	r3, #3
 800a7a4:	f040 8098 	bne.w	800a8d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	689a      	ldr	r2, [r3, #8]
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d913      	bls.n	800a7dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	689a      	ldr	r2, [r3, #8]
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	1ad2      	subs	r2, r2, r3
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	68da      	ldr	r2, [r3, #12]
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	bf28      	it	cs
 800a7ce:	4613      	movcs	r3, r2
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	6879      	ldr	r1, [r7, #4]
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f001 f984 	bl	800bae2 <USBD_CtlContinueRx>
 800a7da:	e07d      	b.n	800a8d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a7e2:	f003 031f 	and.w	r3, r3, #31
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d014      	beq.n	800a814 <USBD_LL_DataOutStage+0x98>
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d81d      	bhi.n	800a82a <USBD_LL_DataOutStage+0xae>
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d002      	beq.n	800a7f8 <USBD_LL_DataOutStage+0x7c>
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d003      	beq.n	800a7fe <USBD_LL_DataOutStage+0x82>
 800a7f6:	e018      	b.n	800a82a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	75bb      	strb	r3, [r7, #22]
            break;
 800a7fc:	e018      	b.n	800a830 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a804:	b2db      	uxtb	r3, r3
 800a806:	4619      	mov	r1, r3
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f000 fa5e 	bl	800acca <USBD_CoreFindIF>
 800a80e:	4603      	mov	r3, r0
 800a810:	75bb      	strb	r3, [r7, #22]
            break;
 800a812:	e00d      	b.n	800a830 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	4619      	mov	r1, r3
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f000 fa60 	bl	800ace4 <USBD_CoreFindEP>
 800a824:	4603      	mov	r3, r0
 800a826:	75bb      	strb	r3, [r7, #22]
            break;
 800a828:	e002      	b.n	800a830 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a82a:	2300      	movs	r3, #0
 800a82c:	75bb      	strb	r3, [r7, #22]
            break;
 800a82e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a830:	7dbb      	ldrb	r3, [r7, #22]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d119      	bne.n	800a86a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	2b03      	cmp	r3, #3
 800a840:	d113      	bne.n	800a86a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a842:	7dba      	ldrb	r2, [r7, #22]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	32ae      	adds	r2, #174	; 0xae
 800a848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00b      	beq.n	800a86a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a852:	7dba      	ldrb	r2, [r7, #22]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a85a:	7dba      	ldrb	r2, [r7, #22]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	32ae      	adds	r2, #174	; 0xae
 800a860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f001 f94a 	bl	800bb04 <USBD_CtlSendStatus>
 800a870:	e032      	b.n	800a8d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a872:	7afb      	ldrb	r3, [r7, #11]
 800a874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	4619      	mov	r1, r3
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f000 fa31 	bl	800ace4 <USBD_CoreFindEP>
 800a882:	4603      	mov	r3, r0
 800a884:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a886:	7dbb      	ldrb	r3, [r7, #22]
 800a888:	2bff      	cmp	r3, #255	; 0xff
 800a88a:	d025      	beq.n	800a8d8 <USBD_LL_DataOutStage+0x15c>
 800a88c:	7dbb      	ldrb	r3, [r7, #22]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d122      	bne.n	800a8d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	2b03      	cmp	r3, #3
 800a89c:	d117      	bne.n	800a8ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a89e:	7dba      	ldrb	r2, [r7, #22]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	32ae      	adds	r2, #174	; 0xae
 800a8a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a8:	699b      	ldr	r3, [r3, #24]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00f      	beq.n	800a8ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a8ae:	7dba      	ldrb	r2, [r7, #22]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a8b6:	7dba      	ldrb	r2, [r7, #22]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	32ae      	adds	r2, #174	; 0xae
 800a8bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	7afa      	ldrb	r2, [r7, #11]
 800a8c4:	4611      	mov	r1, r2
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	4798      	blx	r3
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a8ce:	7dfb      	ldrb	r3, [r7, #23]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d001      	beq.n	800a8d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a8d4:	7dfb      	ldrb	r3, [r7, #23]
 800a8d6:	e000      	b.n	800a8da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3718      	adds	r7, #24
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b086      	sub	sp, #24
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	60f8      	str	r0, [r7, #12]
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	607a      	str	r2, [r7, #4]
 800a8ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a8f0:	7afb      	ldrb	r3, [r7, #11]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d16f      	bne.n	800a9d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	3314      	adds	r3, #20
 800a8fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a902:	2b02      	cmp	r3, #2
 800a904:	d15a      	bne.n	800a9bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	689a      	ldr	r2, [r3, #8]
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d914      	bls.n	800a93c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	689a      	ldr	r2, [r3, #8]
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	1ad2      	subs	r2, r2, r3
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	461a      	mov	r2, r3
 800a926:	6879      	ldr	r1, [r7, #4]
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f001 f8ac 	bl	800ba86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a92e:	2300      	movs	r3, #0
 800a930:	2200      	movs	r2, #0
 800a932:	2100      	movs	r1, #0
 800a934:	68f8      	ldr	r0, [r7, #12]
 800a936:	f004 fcc3 	bl	800f2c0 <USBD_LL_PrepareReceive>
 800a93a:	e03f      	b.n	800a9bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	68da      	ldr	r2, [r3, #12]
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	429a      	cmp	r2, r3
 800a946:	d11c      	bne.n	800a982 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	685a      	ldr	r2, [r3, #4]
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a950:	429a      	cmp	r2, r3
 800a952:	d316      	bcc.n	800a982 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	685a      	ldr	r2, [r3, #4]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a95e:	429a      	cmp	r2, r3
 800a960:	d20f      	bcs.n	800a982 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a962:	2200      	movs	r2, #0
 800a964:	2100      	movs	r1, #0
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f001 f88d 	bl	800ba86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a974:	2300      	movs	r3, #0
 800a976:	2200      	movs	r2, #0
 800a978:	2100      	movs	r1, #0
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f004 fca0 	bl	800f2c0 <USBD_LL_PrepareReceive>
 800a980:	e01c      	b.n	800a9bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	d10f      	bne.n	800a9ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d009      	beq.n	800a9ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9ae:	2180      	movs	r1, #128	; 0x80
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	f004 fbdb 	bl	800f16c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f001 f8b7 	bl	800bb2a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d03a      	beq.n	800aa3c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f7ff fe42 	bl	800a650 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a9d4:	e032      	b.n	800aa3c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a9d6:	7afb      	ldrb	r3, [r7, #11]
 800a9d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	4619      	mov	r1, r3
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f000 f97f 	bl	800ace4 <USBD_CoreFindEP>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9ea:	7dfb      	ldrb	r3, [r7, #23]
 800a9ec:	2bff      	cmp	r3, #255	; 0xff
 800a9ee:	d025      	beq.n	800aa3c <USBD_LL_DataInStage+0x15a>
 800a9f0:	7dfb      	ldrb	r3, [r7, #23]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d122      	bne.n	800aa3c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	2b03      	cmp	r3, #3
 800aa00:	d11c      	bne.n	800aa3c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800aa02:	7dfa      	ldrb	r2, [r7, #23]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	32ae      	adds	r2, #174	; 0xae
 800aa08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa0c:	695b      	ldr	r3, [r3, #20]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d014      	beq.n	800aa3c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800aa12:	7dfa      	ldrb	r2, [r7, #23]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800aa1a:	7dfa      	ldrb	r2, [r7, #23]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	32ae      	adds	r2, #174	; 0xae
 800aa20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa24:	695b      	ldr	r3, [r3, #20]
 800aa26:	7afa      	ldrb	r2, [r7, #11]
 800aa28:	4611      	mov	r1, r2
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	4798      	blx	r3
 800aa2e:	4603      	mov	r3, r0
 800aa30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aa32:	7dbb      	ldrb	r3, [r7, #22]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d001      	beq.n	800aa3c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aa38:	7dbb      	ldrb	r3, [r7, #22]
 800aa3a:	e000      	b.n	800aa3e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3718      	adds	r7, #24
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b084      	sub	sp, #16
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2201      	movs	r2, #1
 800aa56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d014      	beq.n	800aaac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00e      	beq.n	800aaac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	6852      	ldr	r2, [r2, #4]
 800aa9a:	b2d2      	uxtb	r2, r2
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	4798      	blx	r3
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d001      	beq.n	800aaac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aaa8:	2303      	movs	r3, #3
 800aaaa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aaac:	2340      	movs	r3, #64	; 0x40
 800aaae:	2200      	movs	r2, #0
 800aab0:	2100      	movs	r1, #0
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f004 fb15 	bl	800f0e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2240      	movs	r2, #64	; 0x40
 800aac4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aac8:	2340      	movs	r3, #64	; 0x40
 800aaca:	2200      	movs	r2, #0
 800aacc:	2180      	movs	r1, #128	; 0x80
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f004 fb07 	bl	800f0e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2240      	movs	r2, #64	; 0x40
 800aade:	621a      	str	r2, [r3, #32]

  return ret;
 800aae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}

0800aaea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aaea:	b480      	push	{r7}
 800aaec:	b083      	sub	sp, #12
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	78fa      	ldrb	r2, [r7, #3]
 800aafa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	370c      	adds	r7, #12
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab0a:	b480      	push	{r7}
 800ab0c:	b083      	sub	sp, #12
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab18:	b2da      	uxtb	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2204      	movs	r2, #4
 800ab24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	370c      	adds	r7, #12
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr

0800ab36 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab36:	b480      	push	{r7}
 800ab38:	b083      	sub	sp, #12
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	2b04      	cmp	r3, #4
 800ab48:	d106      	bne.n	800ab58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ab50:	b2da      	uxtb	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ab58:	2300      	movs	r3, #0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	370c      	adds	r7, #12
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr

0800ab66 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b082      	sub	sp, #8
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b03      	cmp	r3, #3
 800ab78:	d110      	bne.n	800ab9c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00b      	beq.n	800ab9c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab8a:	69db      	ldr	r3, [r3, #28]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d005      	beq.n	800ab9c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab96:	69db      	ldr	r3, [r3, #28]
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b082      	sub	sp, #8
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
 800abae:	460b      	mov	r3, r1
 800abb0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	32ae      	adds	r2, #174	; 0xae
 800abbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d101      	bne.n	800abc8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e01c      	b.n	800ac02 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b03      	cmp	r3, #3
 800abd2:	d115      	bne.n	800ac00 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	32ae      	adds	r2, #174	; 0xae
 800abde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abe2:	6a1b      	ldr	r3, [r3, #32]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00b      	beq.n	800ac00 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	32ae      	adds	r2, #174	; 0xae
 800abf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abf6:	6a1b      	ldr	r3, [r3, #32]
 800abf8:	78fa      	ldrb	r2, [r7, #3]
 800abfa:	4611      	mov	r1, r2
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b082      	sub	sp, #8
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
 800ac12:	460b      	mov	r3, r1
 800ac14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	32ae      	adds	r2, #174	; 0xae
 800ac20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d101      	bne.n	800ac2c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	e01c      	b.n	800ac66 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	2b03      	cmp	r3, #3
 800ac36:	d115      	bne.n	800ac64 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	32ae      	adds	r2, #174	; 0xae
 800ac42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d00b      	beq.n	800ac64 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	32ae      	adds	r2, #174	; 0xae
 800ac56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5c:	78fa      	ldrb	r2, [r7, #3]
 800ac5e:	4611      	mov	r1, r2
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ac6e:	b480      	push	{r7}
 800ac70:	b083      	sub	sp, #12
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00e      	beq.n	800acc0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	6852      	ldr	r2, [r2, #4]
 800acae:	b2d2      	uxtb	r2, r2
 800acb0:	4611      	mov	r1, r2
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	4798      	blx	r3
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d001      	beq.n	800acc0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800acbc:	2303      	movs	r3, #3
 800acbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800acc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800acca:	b480      	push	{r7}
 800accc:	b083      	sub	sp, #12
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
 800acd2:	460b      	mov	r3, r1
 800acd4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800acd6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800acd8:	4618      	mov	r0, r3
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	460b      	mov	r3, r1
 800acee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800acf0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	370c      	adds	r7, #12
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b086      	sub	sp, #24
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	460b      	mov	r3, r1
 800ad08:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ad12:	2300      	movs	r3, #0
 800ad14:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	885b      	ldrh	r3, [r3, #2]
 800ad1a:	b29a      	uxth	r2, r3
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d920      	bls.n	800ad68 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ad2e:	e013      	b.n	800ad58 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ad30:	f107 030a 	add.w	r3, r7, #10
 800ad34:	4619      	mov	r1, r3
 800ad36:	6978      	ldr	r0, [r7, #20]
 800ad38:	f000 f81b 	bl	800ad72 <USBD_GetNextDesc>
 800ad3c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	785b      	ldrb	r3, [r3, #1]
 800ad42:	2b05      	cmp	r3, #5
 800ad44:	d108      	bne.n	800ad58 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	789b      	ldrb	r3, [r3, #2]
 800ad4e:	78fa      	ldrb	r2, [r7, #3]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d008      	beq.n	800ad66 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ad54:	2300      	movs	r3, #0
 800ad56:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	885b      	ldrh	r3, [r3, #2]
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	897b      	ldrh	r3, [r7, #10]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d8e5      	bhi.n	800ad30 <USBD_GetEpDesc+0x32>
 800ad64:	e000      	b.n	800ad68 <USBD_GetEpDesc+0x6a>
          break;
 800ad66:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ad68:	693b      	ldr	r3, [r7, #16]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3718      	adds	r7, #24
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ad72:	b480      	push	{r7}
 800ad74:	b085      	sub	sp, #20
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
 800ad7a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	881a      	ldrh	r2, [r3, #0]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	4413      	add	r3, r2
 800ad8c:	b29a      	uxth	r2, r3
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	461a      	mov	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3714      	adds	r7, #20
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800adac:	b480      	push	{r7}
 800adae:	b087      	sub	sp, #28
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	3301      	adds	r3, #1
 800adc2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800adca:	8a3b      	ldrh	r3, [r7, #16]
 800adcc:	021b      	lsls	r3, r3, #8
 800adce:	b21a      	sxth	r2, r3
 800add0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800add4:	4313      	orrs	r3, r2
 800add6:	b21b      	sxth	r3, r3
 800add8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800adda:	89fb      	ldrh	r3, [r7, #14]
}
 800addc:	4618      	mov	r0, r3
 800adde:	371c      	adds	r7, #28
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adf2:	2300      	movs	r3, #0
 800adf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adfe:	2b40      	cmp	r3, #64	; 0x40
 800ae00:	d005      	beq.n	800ae0e <USBD_StdDevReq+0x26>
 800ae02:	2b40      	cmp	r3, #64	; 0x40
 800ae04:	d857      	bhi.n	800aeb6 <USBD_StdDevReq+0xce>
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00f      	beq.n	800ae2a <USBD_StdDevReq+0x42>
 800ae0a:	2b20      	cmp	r3, #32
 800ae0c:	d153      	bne.n	800aeb6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	32ae      	adds	r2, #174	; 0xae
 800ae18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	6839      	ldr	r1, [r7, #0]
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	4798      	blx	r3
 800ae24:	4603      	mov	r3, r0
 800ae26:	73fb      	strb	r3, [r7, #15]
      break;
 800ae28:	e04a      	b.n	800aec0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	785b      	ldrb	r3, [r3, #1]
 800ae2e:	2b09      	cmp	r3, #9
 800ae30:	d83b      	bhi.n	800aeaa <USBD_StdDevReq+0xc2>
 800ae32:	a201      	add	r2, pc, #4	; (adr r2, 800ae38 <USBD_StdDevReq+0x50>)
 800ae34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae38:	0800ae8d 	.word	0x0800ae8d
 800ae3c:	0800aea1 	.word	0x0800aea1
 800ae40:	0800aeab 	.word	0x0800aeab
 800ae44:	0800ae97 	.word	0x0800ae97
 800ae48:	0800aeab 	.word	0x0800aeab
 800ae4c:	0800ae6b 	.word	0x0800ae6b
 800ae50:	0800ae61 	.word	0x0800ae61
 800ae54:	0800aeab 	.word	0x0800aeab
 800ae58:	0800ae83 	.word	0x0800ae83
 800ae5c:	0800ae75 	.word	0x0800ae75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ae60:	6839      	ldr	r1, [r7, #0]
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 fa3c 	bl	800b2e0 <USBD_GetDescriptor>
          break;
 800ae68:	e024      	b.n	800aeb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae6a:	6839      	ldr	r1, [r7, #0]
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 fba1 	bl	800b5b4 <USBD_SetAddress>
          break;
 800ae72:	e01f      	b.n	800aeb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fbe0 	bl	800b63c <USBD_SetConfig>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	73fb      	strb	r3, [r7, #15]
          break;
 800ae80:	e018      	b.n	800aeb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 fc83 	bl	800b790 <USBD_GetConfig>
          break;
 800ae8a:	e013      	b.n	800aeb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae8c:	6839      	ldr	r1, [r7, #0]
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fcb4 	bl	800b7fc <USBD_GetStatus>
          break;
 800ae94:	e00e      	b.n	800aeb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae96:	6839      	ldr	r1, [r7, #0]
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fce3 	bl	800b864 <USBD_SetFeature>
          break;
 800ae9e:	e009      	b.n	800aeb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aea0:	6839      	ldr	r1, [r7, #0]
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 fd07 	bl	800b8b6 <USBD_ClrFeature>
          break;
 800aea8:	e004      	b.n	800aeb4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800aeaa:	6839      	ldr	r1, [r7, #0]
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 fd5e 	bl	800b96e <USBD_CtlError>
          break;
 800aeb2:	bf00      	nop
      }
      break;
 800aeb4:	e004      	b.n	800aec0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800aeb6:	6839      	ldr	r1, [r7, #0]
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fd58 	bl	800b96e <USBD_CtlError>
      break;
 800aebe:	bf00      	nop
  }

  return ret;
 800aec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop

0800aecc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aee2:	2b40      	cmp	r3, #64	; 0x40
 800aee4:	d005      	beq.n	800aef2 <USBD_StdItfReq+0x26>
 800aee6:	2b40      	cmp	r3, #64	; 0x40
 800aee8:	d852      	bhi.n	800af90 <USBD_StdItfReq+0xc4>
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d001      	beq.n	800aef2 <USBD_StdItfReq+0x26>
 800aeee:	2b20      	cmp	r3, #32
 800aef0:	d14e      	bne.n	800af90 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	3b01      	subs	r3, #1
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d840      	bhi.n	800af82 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	889b      	ldrh	r3, [r3, #4]
 800af04:	b2db      	uxtb	r3, r3
 800af06:	2b01      	cmp	r3, #1
 800af08:	d836      	bhi.n	800af78 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	889b      	ldrh	r3, [r3, #4]
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	4619      	mov	r1, r3
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f7ff fed9 	bl	800acca <USBD_CoreFindIF>
 800af18:	4603      	mov	r3, r0
 800af1a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af1c:	7bbb      	ldrb	r3, [r7, #14]
 800af1e:	2bff      	cmp	r3, #255	; 0xff
 800af20:	d01d      	beq.n	800af5e <USBD_StdItfReq+0x92>
 800af22:	7bbb      	ldrb	r3, [r7, #14]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d11a      	bne.n	800af5e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800af28:	7bba      	ldrb	r2, [r7, #14]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	32ae      	adds	r2, #174	; 0xae
 800af2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00f      	beq.n	800af58 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800af38:	7bba      	ldrb	r2, [r7, #14]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800af40:	7bba      	ldrb	r2, [r7, #14]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	32ae      	adds	r2, #174	; 0xae
 800af46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	6839      	ldr	r1, [r7, #0]
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	4798      	blx	r3
 800af52:	4603      	mov	r3, r0
 800af54:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af56:	e004      	b.n	800af62 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800af58:	2303      	movs	r3, #3
 800af5a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af5c:	e001      	b.n	800af62 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800af5e:	2303      	movs	r3, #3
 800af60:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	88db      	ldrh	r3, [r3, #6]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d110      	bne.n	800af8c <USBD_StdItfReq+0xc0>
 800af6a:	7bfb      	ldrb	r3, [r7, #15]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d10d      	bne.n	800af8c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fdc7 	bl	800bb04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af76:	e009      	b.n	800af8c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800af78:	6839      	ldr	r1, [r7, #0]
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 fcf7 	bl	800b96e <USBD_CtlError>
          break;
 800af80:	e004      	b.n	800af8c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800af82:	6839      	ldr	r1, [r7, #0]
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 fcf2 	bl	800b96e <USBD_CtlError>
          break;
 800af8a:	e000      	b.n	800af8e <USBD_StdItfReq+0xc2>
          break;
 800af8c:	bf00      	nop
      }
      break;
 800af8e:	e004      	b.n	800af9a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800af90:	6839      	ldr	r1, [r7, #0]
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 fceb 	bl	800b96e <USBD_CtlError>
      break;
 800af98:	bf00      	nop
  }

  return ret;
 800af9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800afae:	2300      	movs	r3, #0
 800afb0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	889b      	ldrh	r3, [r3, #4]
 800afb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afc0:	2b40      	cmp	r3, #64	; 0x40
 800afc2:	d007      	beq.n	800afd4 <USBD_StdEPReq+0x30>
 800afc4:	2b40      	cmp	r3, #64	; 0x40
 800afc6:	f200 817f 	bhi.w	800b2c8 <USBD_StdEPReq+0x324>
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d02a      	beq.n	800b024 <USBD_StdEPReq+0x80>
 800afce:	2b20      	cmp	r3, #32
 800afd0:	f040 817a 	bne.w	800b2c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800afd4:	7bbb      	ldrb	r3, [r7, #14]
 800afd6:	4619      	mov	r1, r3
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f7ff fe83 	bl	800ace4 <USBD_CoreFindEP>
 800afde:	4603      	mov	r3, r0
 800afe0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800afe2:	7b7b      	ldrb	r3, [r7, #13]
 800afe4:	2bff      	cmp	r3, #255	; 0xff
 800afe6:	f000 8174 	beq.w	800b2d2 <USBD_StdEPReq+0x32e>
 800afea:	7b7b      	ldrb	r3, [r7, #13]
 800afec:	2b00      	cmp	r3, #0
 800afee:	f040 8170 	bne.w	800b2d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aff2:	7b7a      	ldrb	r2, [r7, #13]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800affa:	7b7a      	ldrb	r2, [r7, #13]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	32ae      	adds	r2, #174	; 0xae
 800b000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	2b00      	cmp	r3, #0
 800b008:	f000 8163 	beq.w	800b2d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b00c:	7b7a      	ldrb	r2, [r7, #13]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	32ae      	adds	r2, #174	; 0xae
 800b012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	6839      	ldr	r1, [r7, #0]
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	4798      	blx	r3
 800b01e:	4603      	mov	r3, r0
 800b020:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b022:	e156      	b.n	800b2d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	785b      	ldrb	r3, [r3, #1]
 800b028:	2b03      	cmp	r3, #3
 800b02a:	d008      	beq.n	800b03e <USBD_StdEPReq+0x9a>
 800b02c:	2b03      	cmp	r3, #3
 800b02e:	f300 8145 	bgt.w	800b2bc <USBD_StdEPReq+0x318>
 800b032:	2b00      	cmp	r3, #0
 800b034:	f000 809b 	beq.w	800b16e <USBD_StdEPReq+0x1ca>
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d03c      	beq.n	800b0b6 <USBD_StdEPReq+0x112>
 800b03c:	e13e      	b.n	800b2bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b044:	b2db      	uxtb	r3, r3
 800b046:	2b02      	cmp	r3, #2
 800b048:	d002      	beq.n	800b050 <USBD_StdEPReq+0xac>
 800b04a:	2b03      	cmp	r3, #3
 800b04c:	d016      	beq.n	800b07c <USBD_StdEPReq+0xd8>
 800b04e:	e02c      	b.n	800b0aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b050:	7bbb      	ldrb	r3, [r7, #14]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00d      	beq.n	800b072 <USBD_StdEPReq+0xce>
 800b056:	7bbb      	ldrb	r3, [r7, #14]
 800b058:	2b80      	cmp	r3, #128	; 0x80
 800b05a:	d00a      	beq.n	800b072 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b05c:	7bbb      	ldrb	r3, [r7, #14]
 800b05e:	4619      	mov	r1, r3
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f004 f883 	bl	800f16c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b066:	2180      	movs	r1, #128	; 0x80
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f004 f87f 	bl	800f16c <USBD_LL_StallEP>
 800b06e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b070:	e020      	b.n	800b0b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fc7a 	bl	800b96e <USBD_CtlError>
              break;
 800b07a:	e01b      	b.n	800b0b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	885b      	ldrh	r3, [r3, #2]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d10e      	bne.n	800b0a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b084:	7bbb      	ldrb	r3, [r7, #14]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00b      	beq.n	800b0a2 <USBD_StdEPReq+0xfe>
 800b08a:	7bbb      	ldrb	r3, [r7, #14]
 800b08c:	2b80      	cmp	r3, #128	; 0x80
 800b08e:	d008      	beq.n	800b0a2 <USBD_StdEPReq+0xfe>
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	88db      	ldrh	r3, [r3, #6]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d104      	bne.n	800b0a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b098:	7bbb      	ldrb	r3, [r7, #14]
 800b09a:	4619      	mov	r1, r3
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f004 f865 	bl	800f16c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 fd2e 	bl	800bb04 <USBD_CtlSendStatus>

              break;
 800b0a8:	e004      	b.n	800b0b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b0aa:	6839      	ldr	r1, [r7, #0]
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 fc5e 	bl	800b96e <USBD_CtlError>
              break;
 800b0b2:	bf00      	nop
          }
          break;
 800b0b4:	e107      	b.n	800b2c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	2b02      	cmp	r3, #2
 800b0c0:	d002      	beq.n	800b0c8 <USBD_StdEPReq+0x124>
 800b0c2:	2b03      	cmp	r3, #3
 800b0c4:	d016      	beq.n	800b0f4 <USBD_StdEPReq+0x150>
 800b0c6:	e04b      	b.n	800b160 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0c8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00d      	beq.n	800b0ea <USBD_StdEPReq+0x146>
 800b0ce:	7bbb      	ldrb	r3, [r7, #14]
 800b0d0:	2b80      	cmp	r3, #128	; 0x80
 800b0d2:	d00a      	beq.n	800b0ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0d4:	7bbb      	ldrb	r3, [r7, #14]
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f004 f847 	bl	800f16c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0de:	2180      	movs	r1, #128	; 0x80
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f004 f843 	bl	800f16c <USBD_LL_StallEP>
 800b0e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0e8:	e040      	b.n	800b16c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b0ea:	6839      	ldr	r1, [r7, #0]
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 fc3e 	bl	800b96e <USBD_CtlError>
              break;
 800b0f2:	e03b      	b.n	800b16c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	885b      	ldrh	r3, [r3, #2]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d136      	bne.n	800b16a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b0fc:	7bbb      	ldrb	r3, [r7, #14]
 800b0fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b102:	2b00      	cmp	r3, #0
 800b104:	d004      	beq.n	800b110 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b106:	7bbb      	ldrb	r3, [r7, #14]
 800b108:	4619      	mov	r1, r3
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f004 f84d 	bl	800f1aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 fcf7 	bl	800bb04 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b116:	7bbb      	ldrb	r3, [r7, #14]
 800b118:	4619      	mov	r1, r3
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f7ff fde2 	bl	800ace4 <USBD_CoreFindEP>
 800b120:	4603      	mov	r3, r0
 800b122:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b124:	7b7b      	ldrb	r3, [r7, #13]
 800b126:	2bff      	cmp	r3, #255	; 0xff
 800b128:	d01f      	beq.n	800b16a <USBD_StdEPReq+0x1c6>
 800b12a:	7b7b      	ldrb	r3, [r7, #13]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d11c      	bne.n	800b16a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b130:	7b7a      	ldrb	r2, [r7, #13]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b138:	7b7a      	ldrb	r2, [r7, #13]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	32ae      	adds	r2, #174	; 0xae
 800b13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d010      	beq.n	800b16a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b148:	7b7a      	ldrb	r2, [r7, #13]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	32ae      	adds	r2, #174	; 0xae
 800b14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	6839      	ldr	r1, [r7, #0]
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	4798      	blx	r3
 800b15a:	4603      	mov	r3, r0
 800b15c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b15e:	e004      	b.n	800b16a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 fc03 	bl	800b96e <USBD_CtlError>
              break;
 800b168:	e000      	b.n	800b16c <USBD_StdEPReq+0x1c8>
              break;
 800b16a:	bf00      	nop
          }
          break;
 800b16c:	e0ab      	b.n	800b2c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b174:	b2db      	uxtb	r3, r3
 800b176:	2b02      	cmp	r3, #2
 800b178:	d002      	beq.n	800b180 <USBD_StdEPReq+0x1dc>
 800b17a:	2b03      	cmp	r3, #3
 800b17c:	d032      	beq.n	800b1e4 <USBD_StdEPReq+0x240>
 800b17e:	e097      	b.n	800b2b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b180:	7bbb      	ldrb	r3, [r7, #14]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d007      	beq.n	800b196 <USBD_StdEPReq+0x1f2>
 800b186:	7bbb      	ldrb	r3, [r7, #14]
 800b188:	2b80      	cmp	r3, #128	; 0x80
 800b18a:	d004      	beq.n	800b196 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b18c:	6839      	ldr	r1, [r7, #0]
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 fbed 	bl	800b96e <USBD_CtlError>
                break;
 800b194:	e091      	b.n	800b2ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b196:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	da0b      	bge.n	800b1b6 <USBD_StdEPReq+0x212>
 800b19e:	7bbb      	ldrb	r3, [r7, #14]
 800b1a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	4413      	add	r3, r2
 800b1aa:	009b      	lsls	r3, r3, #2
 800b1ac:	3310      	adds	r3, #16
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	3304      	adds	r3, #4
 800b1b4:	e00b      	b.n	800b1ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1b6:	7bbb      	ldrb	r3, [r7, #14]
 800b1b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1bc:	4613      	mov	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4413      	add	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	3304      	adds	r3, #4
 800b1ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	2202      	movs	r2, #2
 800b1da:	4619      	mov	r1, r3
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fc37 	bl	800ba50 <USBD_CtlSendData>
              break;
 800b1e2:	e06a      	b.n	800b2ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b1e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	da11      	bge.n	800b210 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b1ec:	7bbb      	ldrb	r3, [r7, #14]
 800b1ee:	f003 020f 	and.w	r2, r3, #15
 800b1f2:	6879      	ldr	r1, [r7, #4]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	4413      	add	r3, r2
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	440b      	add	r3, r1
 800b1fe:	3324      	adds	r3, #36	; 0x24
 800b200:	881b      	ldrh	r3, [r3, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d117      	bne.n	800b236 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b206:	6839      	ldr	r1, [r7, #0]
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 fbb0 	bl	800b96e <USBD_CtlError>
                  break;
 800b20e:	e054      	b.n	800b2ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b210:	7bbb      	ldrb	r3, [r7, #14]
 800b212:	f003 020f 	and.w	r2, r3, #15
 800b216:	6879      	ldr	r1, [r7, #4]
 800b218:	4613      	mov	r3, r2
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	4413      	add	r3, r2
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	440b      	add	r3, r1
 800b222:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b226:	881b      	ldrh	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d104      	bne.n	800b236 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b22c:	6839      	ldr	r1, [r7, #0]
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 fb9d 	bl	800b96e <USBD_CtlError>
                  break;
 800b234:	e041      	b.n	800b2ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b236:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	da0b      	bge.n	800b256 <USBD_StdEPReq+0x2b2>
 800b23e:	7bbb      	ldrb	r3, [r7, #14]
 800b240:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b244:	4613      	mov	r3, r2
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	4413      	add	r3, r2
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	3310      	adds	r3, #16
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	4413      	add	r3, r2
 800b252:	3304      	adds	r3, #4
 800b254:	e00b      	b.n	800b26e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b256:	7bbb      	ldrb	r3, [r7, #14]
 800b258:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b25c:	4613      	mov	r3, r2
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	4413      	add	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	4413      	add	r3, r2
 800b26c:	3304      	adds	r3, #4
 800b26e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b270:	7bbb      	ldrb	r3, [r7, #14]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d002      	beq.n	800b27c <USBD_StdEPReq+0x2d8>
 800b276:	7bbb      	ldrb	r3, [r7, #14]
 800b278:	2b80      	cmp	r3, #128	; 0x80
 800b27a:	d103      	bne.n	800b284 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	2200      	movs	r2, #0
 800b280:	601a      	str	r2, [r3, #0]
 800b282:	e00e      	b.n	800b2a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b284:	7bbb      	ldrb	r3, [r7, #14]
 800b286:	4619      	mov	r1, r3
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f003 ffad 	bl	800f1e8 <USBD_LL_IsStallEP>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d003      	beq.n	800b29c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	2201      	movs	r2, #1
 800b298:	601a      	str	r2, [r3, #0]
 800b29a:	e002      	b.n	800b2a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	2202      	movs	r2, #2
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 fbd1 	bl	800ba50 <USBD_CtlSendData>
              break;
 800b2ae:	e004      	b.n	800b2ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fb5b 	bl	800b96e <USBD_CtlError>
              break;
 800b2b8:	bf00      	nop
          }
          break;
 800b2ba:	e004      	b.n	800b2c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b2bc:	6839      	ldr	r1, [r7, #0]
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 fb55 	bl	800b96e <USBD_CtlError>
          break;
 800b2c4:	bf00      	nop
      }
      break;
 800b2c6:	e005      	b.n	800b2d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b2c8:	6839      	ldr	r1, [r7, #0]
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 fb4f 	bl	800b96e <USBD_CtlError>
      break;
 800b2d0:	e000      	b.n	800b2d4 <USBD_StdEPReq+0x330>
      break;
 800b2d2:	bf00      	nop
  }

  return ret;
 800b2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
	...

0800b2e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	885b      	ldrh	r3, [r3, #2]
 800b2fa:	0a1b      	lsrs	r3, r3, #8
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	3b01      	subs	r3, #1
 800b300:	2b06      	cmp	r3, #6
 800b302:	f200 8128 	bhi.w	800b556 <USBD_GetDescriptor+0x276>
 800b306:	a201      	add	r2, pc, #4	; (adr r2, 800b30c <USBD_GetDescriptor+0x2c>)
 800b308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b30c:	0800b329 	.word	0x0800b329
 800b310:	0800b341 	.word	0x0800b341
 800b314:	0800b381 	.word	0x0800b381
 800b318:	0800b557 	.word	0x0800b557
 800b31c:	0800b557 	.word	0x0800b557
 800b320:	0800b4f7 	.word	0x0800b4f7
 800b324:	0800b523 	.word	0x0800b523
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	7c12      	ldrb	r2, [r2, #16]
 800b334:	f107 0108 	add.w	r1, r7, #8
 800b338:	4610      	mov	r0, r2
 800b33a:	4798      	blx	r3
 800b33c:	60f8      	str	r0, [r7, #12]
      break;
 800b33e:	e112      	b.n	800b566 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	7c1b      	ldrb	r3, [r3, #16]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d10d      	bne.n	800b364 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b350:	f107 0208 	add.w	r2, r7, #8
 800b354:	4610      	mov	r0, r2
 800b356:	4798      	blx	r3
 800b358:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	3301      	adds	r3, #1
 800b35e:	2202      	movs	r2, #2
 800b360:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b362:	e100      	b.n	800b566 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36c:	f107 0208 	add.w	r2, r7, #8
 800b370:	4610      	mov	r0, r2
 800b372:	4798      	blx	r3
 800b374:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	3301      	adds	r3, #1
 800b37a:	2202      	movs	r2, #2
 800b37c:	701a      	strb	r2, [r3, #0]
      break;
 800b37e:	e0f2      	b.n	800b566 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	885b      	ldrh	r3, [r3, #2]
 800b384:	b2db      	uxtb	r3, r3
 800b386:	2b05      	cmp	r3, #5
 800b388:	f200 80ac 	bhi.w	800b4e4 <USBD_GetDescriptor+0x204>
 800b38c:	a201      	add	r2, pc, #4	; (adr r2, 800b394 <USBD_GetDescriptor+0xb4>)
 800b38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b392:	bf00      	nop
 800b394:	0800b3ad 	.word	0x0800b3ad
 800b398:	0800b3e1 	.word	0x0800b3e1
 800b39c:	0800b415 	.word	0x0800b415
 800b3a0:	0800b449 	.word	0x0800b449
 800b3a4:	0800b47d 	.word	0x0800b47d
 800b3a8:	0800b4b1 	.word	0x0800b4b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00b      	beq.n	800b3d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	7c12      	ldrb	r2, [r2, #16]
 800b3c4:	f107 0108 	add.w	r1, r7, #8
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	4798      	blx	r3
 800b3cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ce:	e091      	b.n	800b4f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3d0:	6839      	ldr	r1, [r7, #0]
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 facb 	bl	800b96e <USBD_CtlError>
            err++;
 800b3d8:	7afb      	ldrb	r3, [r7, #11]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b3de:	e089      	b.n	800b4f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d00b      	beq.n	800b404 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	7c12      	ldrb	r2, [r2, #16]
 800b3f8:	f107 0108 	add.w	r1, r7, #8
 800b3fc:	4610      	mov	r0, r2
 800b3fe:	4798      	blx	r3
 800b400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b402:	e077      	b.n	800b4f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b404:	6839      	ldr	r1, [r7, #0]
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fab1 	bl	800b96e <USBD_CtlError>
            err++;
 800b40c:	7afb      	ldrb	r3, [r7, #11]
 800b40e:	3301      	adds	r3, #1
 800b410:	72fb      	strb	r3, [r7, #11]
          break;
 800b412:	e06f      	b.n	800b4f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00b      	beq.n	800b438 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	7c12      	ldrb	r2, [r2, #16]
 800b42c:	f107 0108 	add.w	r1, r7, #8
 800b430:	4610      	mov	r0, r2
 800b432:	4798      	blx	r3
 800b434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b436:	e05d      	b.n	800b4f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 fa97 	bl	800b96e <USBD_CtlError>
            err++;
 800b440:	7afb      	ldrb	r3, [r7, #11]
 800b442:	3301      	adds	r3, #1
 800b444:	72fb      	strb	r3, [r7, #11]
          break;
 800b446:	e055      	b.n	800b4f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d00b      	beq.n	800b46c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	7c12      	ldrb	r2, [r2, #16]
 800b460:	f107 0108 	add.w	r1, r7, #8
 800b464:	4610      	mov	r0, r2
 800b466:	4798      	blx	r3
 800b468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b46a:	e043      	b.n	800b4f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b46c:	6839      	ldr	r1, [r7, #0]
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 fa7d 	bl	800b96e <USBD_CtlError>
            err++;
 800b474:	7afb      	ldrb	r3, [r7, #11]
 800b476:	3301      	adds	r3, #1
 800b478:	72fb      	strb	r3, [r7, #11]
          break;
 800b47a:	e03b      	b.n	800b4f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b482:	695b      	ldr	r3, [r3, #20]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00b      	beq.n	800b4a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b48e:	695b      	ldr	r3, [r3, #20]
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	7c12      	ldrb	r2, [r2, #16]
 800b494:	f107 0108 	add.w	r1, r7, #8
 800b498:	4610      	mov	r0, r2
 800b49a:	4798      	blx	r3
 800b49c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b49e:	e029      	b.n	800b4f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4a0:	6839      	ldr	r1, [r7, #0]
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 fa63 	bl	800b96e <USBD_CtlError>
            err++;
 800b4a8:	7afb      	ldrb	r3, [r7, #11]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	72fb      	strb	r3, [r7, #11]
          break;
 800b4ae:	e021      	b.n	800b4f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4b6:	699b      	ldr	r3, [r3, #24]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00b      	beq.n	800b4d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4c2:	699b      	ldr	r3, [r3, #24]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	7c12      	ldrb	r2, [r2, #16]
 800b4c8:	f107 0108 	add.w	r1, r7, #8
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	4798      	blx	r3
 800b4d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4d2:	e00f      	b.n	800b4f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4d4:	6839      	ldr	r1, [r7, #0]
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 fa49 	bl	800b96e <USBD_CtlError>
            err++;
 800b4dc:	7afb      	ldrb	r3, [r7, #11]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	72fb      	strb	r3, [r7, #11]
          break;
 800b4e2:	e007      	b.n	800b4f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b4e4:	6839      	ldr	r1, [r7, #0]
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 fa41 	bl	800b96e <USBD_CtlError>
          err++;
 800b4ec:	7afb      	ldrb	r3, [r7, #11]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b4f2:	bf00      	nop
      }
      break;
 800b4f4:	e037      	b.n	800b566 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	7c1b      	ldrb	r3, [r3, #16]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d109      	bne.n	800b512 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b506:	f107 0208 	add.w	r2, r7, #8
 800b50a:	4610      	mov	r0, r2
 800b50c:	4798      	blx	r3
 800b50e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b510:	e029      	b.n	800b566 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b512:	6839      	ldr	r1, [r7, #0]
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 fa2a 	bl	800b96e <USBD_CtlError>
        err++;
 800b51a:	7afb      	ldrb	r3, [r7, #11]
 800b51c:	3301      	adds	r3, #1
 800b51e:	72fb      	strb	r3, [r7, #11]
      break;
 800b520:	e021      	b.n	800b566 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	7c1b      	ldrb	r3, [r3, #16]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d10d      	bne.n	800b546 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b532:	f107 0208 	add.w	r2, r7, #8
 800b536:	4610      	mov	r0, r2
 800b538:	4798      	blx	r3
 800b53a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	3301      	adds	r3, #1
 800b540:	2207      	movs	r2, #7
 800b542:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b544:	e00f      	b.n	800b566 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b546:	6839      	ldr	r1, [r7, #0]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 fa10 	bl	800b96e <USBD_CtlError>
        err++;
 800b54e:	7afb      	ldrb	r3, [r7, #11]
 800b550:	3301      	adds	r3, #1
 800b552:	72fb      	strb	r3, [r7, #11]
      break;
 800b554:	e007      	b.n	800b566 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b556:	6839      	ldr	r1, [r7, #0]
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 fa08 	bl	800b96e <USBD_CtlError>
      err++;
 800b55e:	7afb      	ldrb	r3, [r7, #11]
 800b560:	3301      	adds	r3, #1
 800b562:	72fb      	strb	r3, [r7, #11]
      break;
 800b564:	bf00      	nop
  }

  if (err != 0U)
 800b566:	7afb      	ldrb	r3, [r7, #11]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d11e      	bne.n	800b5aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	88db      	ldrh	r3, [r3, #6]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d016      	beq.n	800b5a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b574:	893b      	ldrh	r3, [r7, #8]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00e      	beq.n	800b598 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	88da      	ldrh	r2, [r3, #6]
 800b57e:	893b      	ldrh	r3, [r7, #8]
 800b580:	4293      	cmp	r3, r2
 800b582:	bf28      	it	cs
 800b584:	4613      	movcs	r3, r2
 800b586:	b29b      	uxth	r3, r3
 800b588:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b58a:	893b      	ldrh	r3, [r7, #8]
 800b58c:	461a      	mov	r2, r3
 800b58e:	68f9      	ldr	r1, [r7, #12]
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 fa5d 	bl	800ba50 <USBD_CtlSendData>
 800b596:	e009      	b.n	800b5ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b598:	6839      	ldr	r1, [r7, #0]
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f9e7 	bl	800b96e <USBD_CtlError>
 800b5a0:	e004      	b.n	800b5ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 faae 	bl	800bb04 <USBD_CtlSendStatus>
 800b5a8:	e000      	b.n	800b5ac <USBD_GetDescriptor+0x2cc>
    return;
 800b5aa:	bf00      	nop
  }
}
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop

0800b5b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	889b      	ldrh	r3, [r3, #4]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d131      	bne.n	800b62a <USBD_SetAddress+0x76>
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	88db      	ldrh	r3, [r3, #6]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d12d      	bne.n	800b62a <USBD_SetAddress+0x76>
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	885b      	ldrh	r3, [r3, #2]
 800b5d2:	2b7f      	cmp	r3, #127	; 0x7f
 800b5d4:	d829      	bhi.n	800b62a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	885b      	ldrh	r3, [r3, #2]
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b03      	cmp	r3, #3
 800b5ec:	d104      	bne.n	800b5f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b5ee:	6839      	ldr	r1, [r7, #0]
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 f9bc 	bl	800b96e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5f6:	e01d      	b.n	800b634 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	7bfa      	ldrb	r2, [r7, #15]
 800b5fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b600:	7bfb      	ldrb	r3, [r7, #15]
 800b602:	4619      	mov	r1, r3
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f003 fe1b 	bl	800f240 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 fa7a 	bl	800bb04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b610:	7bfb      	ldrb	r3, [r7, #15]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d004      	beq.n	800b620 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2202      	movs	r2, #2
 800b61a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b61e:	e009      	b.n	800b634 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2201      	movs	r2, #1
 800b624:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b628:	e004      	b.n	800b634 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b62a:	6839      	ldr	r1, [r7, #0]
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 f99e 	bl	800b96e <USBD_CtlError>
  }
}
 800b632:	bf00      	nop
 800b634:	bf00      	nop
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	885b      	ldrh	r3, [r3, #2]
 800b64e:	b2da      	uxtb	r2, r3
 800b650:	4b4e      	ldr	r3, [pc, #312]	; (800b78c <USBD_SetConfig+0x150>)
 800b652:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b654:	4b4d      	ldr	r3, [pc, #308]	; (800b78c <USBD_SetConfig+0x150>)
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d905      	bls.n	800b668 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b65c:	6839      	ldr	r1, [r7, #0]
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 f985 	bl	800b96e <USBD_CtlError>
    return USBD_FAIL;
 800b664:	2303      	movs	r3, #3
 800b666:	e08c      	b.n	800b782 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	2b02      	cmp	r3, #2
 800b672:	d002      	beq.n	800b67a <USBD_SetConfig+0x3e>
 800b674:	2b03      	cmp	r3, #3
 800b676:	d029      	beq.n	800b6cc <USBD_SetConfig+0x90>
 800b678:	e075      	b.n	800b766 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b67a:	4b44      	ldr	r3, [pc, #272]	; (800b78c <USBD_SetConfig+0x150>)
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d020      	beq.n	800b6c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b682:	4b42      	ldr	r3, [pc, #264]	; (800b78c <USBD_SetConfig+0x150>)
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	461a      	mov	r2, r3
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b68c:	4b3f      	ldr	r3, [pc, #252]	; (800b78c <USBD_SetConfig+0x150>)
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7fe ffe7 	bl	800a666 <USBD_SetClassConfig>
 800b698:	4603      	mov	r3, r0
 800b69a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d008      	beq.n	800b6b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 f962 	bl	800b96e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2202      	movs	r2, #2
 800b6ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b6b2:	e065      	b.n	800b780 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 fa25 	bl	800bb04 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2203      	movs	r2, #3
 800b6be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b6c2:	e05d      	b.n	800b780 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 fa1d 	bl	800bb04 <USBD_CtlSendStatus>
      break;
 800b6ca:	e059      	b.n	800b780 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b6cc:	4b2f      	ldr	r3, [pc, #188]	; (800b78c <USBD_SetConfig+0x150>)
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d112      	bne.n	800b6fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2202      	movs	r2, #2
 800b6d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b6dc:	4b2b      	ldr	r3, [pc, #172]	; (800b78c <USBD_SetConfig+0x150>)
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b6e6:	4b29      	ldr	r3, [pc, #164]	; (800b78c <USBD_SetConfig+0x150>)
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f7fe ffd6 	bl	800a69e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 fa06 	bl	800bb04 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b6f8:	e042      	b.n	800b780 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b6fa:	4b24      	ldr	r3, [pc, #144]	; (800b78c <USBD_SetConfig+0x150>)
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	461a      	mov	r2, r3
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	429a      	cmp	r2, r3
 800b706:	d02a      	beq.n	800b75e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	4619      	mov	r1, r3
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f7fe ffc4 	bl	800a69e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b716:	4b1d      	ldr	r3, [pc, #116]	; (800b78c <USBD_SetConfig+0x150>)
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	461a      	mov	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b720:	4b1a      	ldr	r3, [pc, #104]	; (800b78c <USBD_SetConfig+0x150>)
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	4619      	mov	r1, r3
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f7fe ff9d 	bl	800a666 <USBD_SetClassConfig>
 800b72c:	4603      	mov	r3, r0
 800b72e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b730:	7bfb      	ldrb	r3, [r7, #15]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00f      	beq.n	800b756 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b736:	6839      	ldr	r1, [r7, #0]
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 f918 	bl	800b96e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	b2db      	uxtb	r3, r3
 800b744:	4619      	mov	r1, r3
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f7fe ffa9 	bl	800a69e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2202      	movs	r2, #2
 800b750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b754:	e014      	b.n	800b780 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 f9d4 	bl	800bb04 <USBD_CtlSendStatus>
      break;
 800b75c:	e010      	b.n	800b780 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f9d0 	bl	800bb04 <USBD_CtlSendStatus>
      break;
 800b764:	e00c      	b.n	800b780 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b766:	6839      	ldr	r1, [r7, #0]
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 f900 	bl	800b96e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b76e:	4b07      	ldr	r3, [pc, #28]	; (800b78c <USBD_SetConfig+0x150>)
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	4619      	mov	r1, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f7fe ff92 	bl	800a69e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b77a:	2303      	movs	r3, #3
 800b77c:	73fb      	strb	r3, [r7, #15]
      break;
 800b77e:	bf00      	nop
  }

  return ret;
 800b780:	7bfb      	ldrb	r3, [r7, #15]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	200008b8 	.word	0x200008b8

0800b790 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	88db      	ldrh	r3, [r3, #6]
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d004      	beq.n	800b7ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b7a2:	6839      	ldr	r1, [r7, #0]
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 f8e2 	bl	800b96e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b7aa:	e023      	b.n	800b7f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	dc02      	bgt.n	800b7be <USBD_GetConfig+0x2e>
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	dc03      	bgt.n	800b7c4 <USBD_GetConfig+0x34>
 800b7bc:	e015      	b.n	800b7ea <USBD_GetConfig+0x5a>
 800b7be:	2b03      	cmp	r3, #3
 800b7c0:	d00b      	beq.n	800b7da <USBD_GetConfig+0x4a>
 800b7c2:	e012      	b.n	800b7ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	3308      	adds	r3, #8
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f93c 	bl	800ba50 <USBD_CtlSendData>
        break;
 800b7d8:	e00c      	b.n	800b7f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	3304      	adds	r3, #4
 800b7de:	2201      	movs	r2, #1
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 f934 	bl	800ba50 <USBD_CtlSendData>
        break;
 800b7e8:	e004      	b.n	800b7f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b7ea:	6839      	ldr	r1, [r7, #0]
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 f8be 	bl	800b96e <USBD_CtlError>
        break;
 800b7f2:	bf00      	nop
}
 800b7f4:	bf00      	nop
 800b7f6:	3708      	adds	r7, #8
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	3b01      	subs	r3, #1
 800b810:	2b02      	cmp	r3, #2
 800b812:	d81e      	bhi.n	800b852 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	88db      	ldrh	r3, [r3, #6]
 800b818:	2b02      	cmp	r3, #2
 800b81a:	d004      	beq.n	800b826 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b81c:	6839      	ldr	r1, [r7, #0]
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 f8a5 	bl	800b96e <USBD_CtlError>
        break;
 800b824:	e01a      	b.n	800b85c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2201      	movs	r2, #1
 800b82a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b832:	2b00      	cmp	r3, #0
 800b834:	d005      	beq.n	800b842 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	f043 0202 	orr.w	r2, r3, #2
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	330c      	adds	r3, #12
 800b846:	2202      	movs	r2, #2
 800b848:	4619      	mov	r1, r3
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 f900 	bl	800ba50 <USBD_CtlSendData>
      break;
 800b850:	e004      	b.n	800b85c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b852:	6839      	ldr	r1, [r7, #0]
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 f88a 	bl	800b96e <USBD_CtlError>
      break;
 800b85a:	bf00      	nop
  }
}
 800b85c:	bf00      	nop
 800b85e:	3708      	adds	r7, #8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	885b      	ldrh	r3, [r3, #2]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d107      	bne.n	800b886 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2201      	movs	r2, #1
 800b87a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 f940 	bl	800bb04 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b884:	e013      	b.n	800b8ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	885b      	ldrh	r3, [r3, #2]
 800b88a:	2b02      	cmp	r3, #2
 800b88c:	d10b      	bne.n	800b8a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	889b      	ldrh	r3, [r3, #4]
 800b892:	0a1b      	lsrs	r3, r3, #8
 800b894:	b29b      	uxth	r3, r3
 800b896:	b2da      	uxtb	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 f930 	bl	800bb04 <USBD_CtlSendStatus>
}
 800b8a4:	e003      	b.n	800b8ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b8a6:	6839      	ldr	r1, [r7, #0]
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 f860 	bl	800b96e <USBD_CtlError>
}
 800b8ae:	bf00      	nop
 800b8b0:	3708      	adds	r7, #8
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b082      	sub	sp, #8
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
 800b8be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	2b02      	cmp	r3, #2
 800b8cc:	d80b      	bhi.n	800b8e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	885b      	ldrh	r3, [r3, #2]
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d10c      	bne.n	800b8f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 f910 	bl	800bb04 <USBD_CtlSendStatus>
      }
      break;
 800b8e4:	e004      	b.n	800b8f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b8e6:	6839      	ldr	r1, [r7, #0]
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 f840 	bl	800b96e <USBD_CtlError>
      break;
 800b8ee:	e000      	b.n	800b8f2 <USBD_ClrFeature+0x3c>
      break;
 800b8f0:	bf00      	nop
  }
}
 800b8f2:	bf00      	nop
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}

0800b8fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b084      	sub	sp, #16
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
 800b902:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	781a      	ldrb	r2, [r3, #0]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	3301      	adds	r3, #1
 800b914:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	781a      	ldrb	r2, [r3, #0]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	3301      	adds	r3, #1
 800b922:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f7ff fa41 	bl	800adac <SWAPBYTE>
 800b92a:	4603      	mov	r3, r0
 800b92c:	461a      	mov	r2, r3
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	3301      	adds	r3, #1
 800b936:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	3301      	adds	r3, #1
 800b93c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f7ff fa34 	bl	800adac <SWAPBYTE>
 800b944:	4603      	mov	r3, r0
 800b946:	461a      	mov	r2, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	3301      	adds	r3, #1
 800b950:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	3301      	adds	r3, #1
 800b956:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	f7ff fa27 	bl	800adac <SWAPBYTE>
 800b95e:	4603      	mov	r3, r0
 800b960:	461a      	mov	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	80da      	strh	r2, [r3, #6]
}
 800b966:	bf00      	nop
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b082      	sub	sp, #8
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
 800b976:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b978:	2180      	movs	r1, #128	; 0x80
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f003 fbf6 	bl	800f16c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b980:	2100      	movs	r1, #0
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f003 fbf2 	bl	800f16c <USBD_LL_StallEP>
}
 800b988:	bf00      	nop
 800b98a:	3708      	adds	r7, #8
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b99c:	2300      	movs	r3, #0
 800b99e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d036      	beq.n	800ba14 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b9aa:	6938      	ldr	r0, [r7, #16]
 800b9ac:	f000 f836 	bl	800ba1c <USBD_GetLen>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	005b      	lsls	r3, r3, #1
 800b9b8:	b29a      	uxth	r2, r3
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b9be:	7dfb      	ldrb	r3, [r7, #23]
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	7812      	ldrb	r2, [r2, #0]
 800b9c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b9ca:	7dfb      	ldrb	r3, [r7, #23]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b9d0:	7dfb      	ldrb	r3, [r7, #23]
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	2203      	movs	r2, #3
 800b9d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b9da:	7dfb      	ldrb	r3, [r7, #23]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b9e0:	e013      	b.n	800ba0a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b9e2:	7dfb      	ldrb	r3, [r7, #23]
 800b9e4:	68ba      	ldr	r2, [r7, #8]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	693a      	ldr	r2, [r7, #16]
 800b9ea:	7812      	ldrb	r2, [r2, #0]
 800b9ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	613b      	str	r3, [r7, #16]
    idx++;
 800b9f4:	7dfb      	ldrb	r3, [r7, #23]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b9fa:	7dfb      	ldrb	r3, [r7, #23]
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	4413      	add	r3, r2
 800ba00:	2200      	movs	r2, #0
 800ba02:	701a      	strb	r2, [r3, #0]
    idx++;
 800ba04:	7dfb      	ldrb	r3, [r7, #23]
 800ba06:	3301      	adds	r3, #1
 800ba08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1e7      	bne.n	800b9e2 <USBD_GetString+0x52>
 800ba12:	e000      	b.n	800ba16 <USBD_GetString+0x86>
    return;
 800ba14:	bf00      	nop
  }
}
 800ba16:	3718      	adds	r7, #24
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba24:	2300      	movs	r3, #0
 800ba26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ba2c:	e005      	b.n	800ba3a <USBD_GetLen+0x1e>
  {
    len++;
 800ba2e:	7bfb      	ldrb	r3, [r7, #15]
 800ba30:	3301      	adds	r3, #1
 800ba32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	3301      	adds	r3, #1
 800ba38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1f5      	bne.n	800ba2e <USBD_GetLen+0x12>
  }

  return len;
 800ba42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3714      	adds	r7, #20
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b084      	sub	sp, #16
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2202      	movs	r2, #2
 800ba60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	68ba      	ldr	r2, [r7, #8]
 800ba74:	2100      	movs	r1, #0
 800ba76:	68f8      	ldr	r0, [r7, #12]
 800ba78:	f003 fc01 	bl	800f27e <USBD_LL_Transmit>

  return USBD_OK;
 800ba7c:	2300      	movs	r3, #0
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3710      	adds	r7, #16
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b084      	sub	sp, #16
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	60f8      	str	r0, [r7, #12]
 800ba8e:	60b9      	str	r1, [r7, #8]
 800ba90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	68ba      	ldr	r2, [r7, #8]
 800ba96:	2100      	movs	r1, #0
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f003 fbf0 	bl	800f27e <USBD_LL_Transmit>

  return USBD_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2203      	movs	r2, #3
 800bab8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	68ba      	ldr	r2, [r7, #8]
 800bad0:	2100      	movs	r1, #0
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f003 fbf4 	bl	800f2c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b084      	sub	sp, #16
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	60f8      	str	r0, [r7, #12]
 800baea:	60b9      	str	r1, [r7, #8]
 800baec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	68ba      	ldr	r2, [r7, #8]
 800baf2:	2100      	movs	r1, #0
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f003 fbe3 	bl	800f2c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2204      	movs	r2, #4
 800bb10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb14:	2300      	movs	r3, #0
 800bb16:	2200      	movs	r2, #0
 800bb18:	2100      	movs	r1, #0
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f003 fbaf 	bl	800f27e <USBD_LL_Transmit>

  return USBD_OK;
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}

0800bb2a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b082      	sub	sp, #8
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2205      	movs	r2, #5
 800bb36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	2100      	movs	r1, #0
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f003 fbbd 	bl	800f2c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3708      	adds	r7, #8
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <__NVIC_SetPriority>:
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	4603      	mov	r3, r0
 800bb58:	6039      	str	r1, [r7, #0]
 800bb5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bb5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	db0a      	blt.n	800bb7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	490c      	ldr	r1, [pc, #48]	; (800bb9c <__NVIC_SetPriority+0x4c>)
 800bb6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb6e:	0112      	lsls	r2, r2, #4
 800bb70:	b2d2      	uxtb	r2, r2
 800bb72:	440b      	add	r3, r1
 800bb74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bb78:	e00a      	b.n	800bb90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	b2da      	uxtb	r2, r3
 800bb7e:	4908      	ldr	r1, [pc, #32]	; (800bba0 <__NVIC_SetPriority+0x50>)
 800bb80:	79fb      	ldrb	r3, [r7, #7]
 800bb82:	f003 030f 	and.w	r3, r3, #15
 800bb86:	3b04      	subs	r3, #4
 800bb88:	0112      	lsls	r2, r2, #4
 800bb8a:	b2d2      	uxtb	r2, r2
 800bb8c:	440b      	add	r3, r1
 800bb8e:	761a      	strb	r2, [r3, #24]
}
 800bb90:	bf00      	nop
 800bb92:	370c      	adds	r7, #12
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr
 800bb9c:	e000e100 	.word	0xe000e100
 800bba0:	e000ed00 	.word	0xe000ed00

0800bba4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bba4:	b580      	push	{r7, lr}
 800bba6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bba8:	4b05      	ldr	r3, [pc, #20]	; (800bbc0 <SysTick_Handler+0x1c>)
 800bbaa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bbac:	f001 feb2 	bl	800d914 <xTaskGetSchedulerState>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d001      	beq.n	800bbba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bbb6:	f002 fc97 	bl	800e4e8 <xPortSysTickHandler>
  }
}
 800bbba:	bf00      	nop
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	e000e010 	.word	0xe000e010

0800bbc4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bbc8:	2100      	movs	r1, #0
 800bbca:	f06f 0004 	mvn.w	r0, #4
 800bbce:	f7ff ffbf 	bl	800bb50 <__NVIC_SetPriority>
#endif
}
 800bbd2:	bf00      	nop
 800bbd4:	bd80      	pop	{r7, pc}
	...

0800bbd8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbde:	f3ef 8305 	mrs	r3, IPSR
 800bbe2:	603b      	str	r3, [r7, #0]
  return(result);
 800bbe4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d003      	beq.n	800bbf2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bbea:	f06f 0305 	mvn.w	r3, #5
 800bbee:	607b      	str	r3, [r7, #4]
 800bbf0:	e00c      	b.n	800bc0c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bbf2:	4b0a      	ldr	r3, [pc, #40]	; (800bc1c <osKernelInitialize+0x44>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d105      	bne.n	800bc06 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bbfa:	4b08      	ldr	r3, [pc, #32]	; (800bc1c <osKernelInitialize+0x44>)
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bc00:	2300      	movs	r3, #0
 800bc02:	607b      	str	r3, [r7, #4]
 800bc04:	e002      	b.n	800bc0c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bc06:	f04f 33ff 	mov.w	r3, #4294967295
 800bc0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc0c:	687b      	ldr	r3, [r7, #4]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	370c      	adds	r7, #12
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	200008bc 	.word	0x200008bc

0800bc20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc26:	f3ef 8305 	mrs	r3, IPSR
 800bc2a:	603b      	str	r3, [r7, #0]
  return(result);
 800bc2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d003      	beq.n	800bc3a <osKernelStart+0x1a>
    stat = osErrorISR;
 800bc32:	f06f 0305 	mvn.w	r3, #5
 800bc36:	607b      	str	r3, [r7, #4]
 800bc38:	e010      	b.n	800bc5c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bc3a:	4b0b      	ldr	r3, [pc, #44]	; (800bc68 <osKernelStart+0x48>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d109      	bne.n	800bc56 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bc42:	f7ff ffbf 	bl	800bbc4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bc46:	4b08      	ldr	r3, [pc, #32]	; (800bc68 <osKernelStart+0x48>)
 800bc48:	2202      	movs	r2, #2
 800bc4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bc4c:	f001 fa1a 	bl	800d084 <vTaskStartScheduler>
      stat = osOK;
 800bc50:	2300      	movs	r3, #0
 800bc52:	607b      	str	r3, [r7, #4]
 800bc54:	e002      	b.n	800bc5c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bc56:	f04f 33ff 	mov.w	r3, #4294967295
 800bc5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc5c:	687b      	ldr	r3, [r7, #4]
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3708      	adds	r7, #8
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	200008bc 	.word	0x200008bc

0800bc6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b08e      	sub	sp, #56	; 0x38
 800bc70:	af04      	add	r7, sp, #16
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc7c:	f3ef 8305 	mrs	r3, IPSR
 800bc80:	617b      	str	r3, [r7, #20]
  return(result);
 800bc82:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d17f      	bne.n	800bd88 <osThreadNew+0x11c>
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d07c      	beq.n	800bd88 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800bc8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc92:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bc94:	2318      	movs	r3, #24
 800bc96:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bc9c:	f04f 33ff 	mov.w	r3, #4294967295
 800bca0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d045      	beq.n	800bd34 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d002      	beq.n	800bcb6 <osThreadNew+0x4a>
        name = attr->name;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	699b      	ldr	r3, [r3, #24]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d002      	beq.n	800bcc4 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	699b      	ldr	r3, [r3, #24]
 800bcc2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bcc4:	69fb      	ldr	r3, [r7, #28]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d008      	beq.n	800bcdc <osThreadNew+0x70>
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	2b38      	cmp	r3, #56	; 0x38
 800bcce:	d805      	bhi.n	800bcdc <osThreadNew+0x70>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	f003 0301 	and.w	r3, r3, #1
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d001      	beq.n	800bce0 <osThreadNew+0x74>
        return (NULL);
 800bcdc:	2300      	movs	r3, #0
 800bcde:	e054      	b.n	800bd8a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	695b      	ldr	r3, [r3, #20]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d003      	beq.n	800bcf0 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	695b      	ldr	r3, [r3, #20]
 800bcec:	089b      	lsrs	r3, r3, #2
 800bcee:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00e      	beq.n	800bd16 <osThreadNew+0xaa>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	2b6b      	cmp	r3, #107	; 0x6b
 800bcfe:	d90a      	bls.n	800bd16 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d006      	beq.n	800bd16 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	695b      	ldr	r3, [r3, #20]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d002      	beq.n	800bd16 <osThreadNew+0xaa>
        mem = 1;
 800bd10:	2301      	movs	r3, #1
 800bd12:	61bb      	str	r3, [r7, #24]
 800bd14:	e010      	b.n	800bd38 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d10c      	bne.n	800bd38 <osThreadNew+0xcc>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d108      	bne.n	800bd38 <osThreadNew+0xcc>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	691b      	ldr	r3, [r3, #16]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d104      	bne.n	800bd38 <osThreadNew+0xcc>
          mem = 0;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	61bb      	str	r3, [r7, #24]
 800bd32:	e001      	b.n	800bd38 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800bd34:	2300      	movs	r3, #0
 800bd36:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bd38:	69bb      	ldr	r3, [r7, #24]
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d110      	bne.n	800bd60 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bd46:	9202      	str	r2, [sp, #8]
 800bd48:	9301      	str	r3, [sp, #4]
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	9300      	str	r3, [sp, #0]
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	6a3a      	ldr	r2, [r7, #32]
 800bd52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f000 feb9 	bl	800cacc <xTaskCreateStatic>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	613b      	str	r3, [r7, #16]
 800bd5e:	e013      	b.n	800bd88 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d110      	bne.n	800bd88 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bd66:	6a3b      	ldr	r3, [r7, #32]
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	f107 0310 	add.w	r3, r7, #16
 800bd6e:	9301      	str	r3, [sp, #4]
 800bd70:	69fb      	ldr	r3, [r7, #28]
 800bd72:	9300      	str	r3, [sp, #0]
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	f000 ff04 	bl	800cb86 <xTaskCreate>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d001      	beq.n	800bd88 <osThreadNew+0x11c>
            hTask = NULL;
 800bd84:	2300      	movs	r3, #0
 800bd86:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bd88:	693b      	ldr	r3, [r7, #16]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3728      	adds	r7, #40	; 0x28
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}

0800bd92 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b084      	sub	sp, #16
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd9a:	f3ef 8305 	mrs	r3, IPSR
 800bd9e:	60bb      	str	r3, [r7, #8]
  return(result);
 800bda0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d003      	beq.n	800bdae <osDelay+0x1c>
    stat = osErrorISR;
 800bda6:	f06f 0305 	mvn.w	r3, #5
 800bdaa:	60fb      	str	r3, [r7, #12]
 800bdac:	e007      	b.n	800bdbe <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d002      	beq.n	800bdbe <osDelay+0x2c>
      vTaskDelay(ticks);
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f001 f829 	bl	800ce10 <vTaskDelay>
    }
  }

  return (stat);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3710      	adds	r7, #16
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b08a      	sub	sp, #40	; 0x28
 800bdcc:	af02      	add	r7, sp, #8
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdd8:	f3ef 8305 	mrs	r3, IPSR
 800bddc:	613b      	str	r3, [r7, #16]
  return(result);
 800bdde:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d15f      	bne.n	800bea4 <osMessageQueueNew+0xdc>
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d05c      	beq.n	800bea4 <osMessageQueueNew+0xdc>
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d059      	beq.n	800bea4 <osMessageQueueNew+0xdc>
    mem = -1;
 800bdf0:	f04f 33ff 	mov.w	r3, #4294967295
 800bdf4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d029      	beq.n	800be50 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	689b      	ldr	r3, [r3, #8]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d012      	beq.n	800be2a <osMessageQueueNew+0x62>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	2b4f      	cmp	r3, #79	; 0x4f
 800be0a:	d90e      	bls.n	800be2a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00a      	beq.n	800be2a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	695a      	ldr	r2, [r3, #20]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	68b9      	ldr	r1, [r7, #8]
 800be1c:	fb01 f303 	mul.w	r3, r1, r3
 800be20:	429a      	cmp	r2, r3
 800be22:	d302      	bcc.n	800be2a <osMessageQueueNew+0x62>
        mem = 1;
 800be24:	2301      	movs	r3, #1
 800be26:	61bb      	str	r3, [r7, #24]
 800be28:	e014      	b.n	800be54 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d110      	bne.n	800be54 <osMessageQueueNew+0x8c>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10c      	bne.n	800be54 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d108      	bne.n	800be54 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	695b      	ldr	r3, [r3, #20]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d104      	bne.n	800be54 <osMessageQueueNew+0x8c>
          mem = 0;
 800be4a:	2300      	movs	r3, #0
 800be4c:	61bb      	str	r3, [r7, #24]
 800be4e:	e001      	b.n	800be54 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800be50:	2300      	movs	r3, #0
 800be52:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800be54:	69bb      	ldr	r3, [r7, #24]
 800be56:	2b01      	cmp	r3, #1
 800be58:	d10b      	bne.n	800be72 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	691a      	ldr	r2, [r3, #16]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	689b      	ldr	r3, [r3, #8]
 800be62:	2100      	movs	r1, #0
 800be64:	9100      	str	r1, [sp, #0]
 800be66:	68b9      	ldr	r1, [r7, #8]
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	f000 f971 	bl	800c150 <xQueueGenericCreateStatic>
 800be6e:	61f8      	str	r0, [r7, #28]
 800be70:	e008      	b.n	800be84 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d105      	bne.n	800be84 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800be78:	2200      	movs	r2, #0
 800be7a:	68b9      	ldr	r1, [r7, #8]
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	f000 f9df 	bl	800c240 <xQueueGenericCreate>
 800be82:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00c      	beq.n	800bea4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d003      	beq.n	800be98 <osMessageQueueNew+0xd0>
        name = attr->name;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	617b      	str	r3, [r7, #20]
 800be96:	e001      	b.n	800be9c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800be98:	2300      	movs	r3, #0
 800be9a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800be9c:	6979      	ldr	r1, [r7, #20]
 800be9e:	69f8      	ldr	r0, [r7, #28]
 800bea0:	f000 fdb6 	bl	800ca10 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bea4:	69fb      	ldr	r3, [r7, #28]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3720      	adds	r7, #32
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
	...

0800beb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	4a07      	ldr	r2, [pc, #28]	; (800bedc <vApplicationGetIdleTaskMemory+0x2c>)
 800bec0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	4a06      	ldr	r2, [pc, #24]	; (800bee0 <vApplicationGetIdleTaskMemory+0x30>)
 800bec6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bece:	601a      	str	r2, [r3, #0]
}
 800bed0:	bf00      	nop
 800bed2:	3714      	adds	r7, #20
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr
 800bedc:	200008c0 	.word	0x200008c0
 800bee0:	2000092c 	.word	0x2000092c

0800bee4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	4a07      	ldr	r2, [pc, #28]	; (800bf10 <vApplicationGetTimerTaskMemory+0x2c>)
 800bef4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	4a06      	ldr	r2, [pc, #24]	; (800bf14 <vApplicationGetTimerTaskMemory+0x30>)
 800befa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf02:	601a      	str	r2, [r3, #0]
}
 800bf04:	bf00      	nop
 800bf06:	3714      	adds	r7, #20
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr
 800bf10:	20000d2c 	.word	0x20000d2c
 800bf14:	20000d98 	.word	0x20000d98

0800bf18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f103 0208 	add.w	r2, r3, #8
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f04f 32ff 	mov.w	r2, #4294967295
 800bf30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f103 0208 	add.w	r2, r3, #8
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f103 0208 	add.w	r2, r3, #8
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bf4c:	bf00      	nop
 800bf4e:	370c      	adds	r7, #12
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr

0800bf58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b083      	sub	sp, #12
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf66:	bf00      	nop
 800bf68:	370c      	adds	r7, #12
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr

0800bf72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf72:	b480      	push	{r7}
 800bf74:	b085      	sub	sp, #20
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
 800bf7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	689a      	ldr	r2, [r3, #8]
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	683a      	ldr	r2, [r7, #0]
 800bf96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	683a      	ldr	r2, [r7, #0]
 800bf9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	1c5a      	adds	r2, r3, #1
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	601a      	str	r2, [r3, #0]
}
 800bfae:	bf00      	nop
 800bfb0:	3714      	adds	r7, #20
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr

0800bfba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bfba:	b480      	push	{r7}
 800bfbc:	b085      	sub	sp, #20
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
 800bfc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd0:	d103      	bne.n	800bfda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	60fb      	str	r3, [r7, #12]
 800bfd8:	e00c      	b.n	800bff4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	3308      	adds	r3, #8
 800bfde:	60fb      	str	r3, [r7, #12]
 800bfe0:	e002      	b.n	800bfe8 <vListInsert+0x2e>
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	60fb      	str	r3, [r7, #12]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	68ba      	ldr	r2, [r7, #8]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d2f6      	bcs.n	800bfe2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	685a      	ldr	r2, [r3, #4]
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	683a      	ldr	r2, [r7, #0]
 800c002:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	683a      	ldr	r2, [r7, #0]
 800c00e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	1c5a      	adds	r2, r3, #1
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	601a      	str	r2, [r3, #0]
}
 800c020:	bf00      	nop
 800c022:	3714      	adds	r7, #20
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr

0800c02c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c02c:	b480      	push	{r7}
 800c02e:	b085      	sub	sp, #20
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	6892      	ldr	r2, [r2, #8]
 800c042:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	6852      	ldr	r2, [r2, #4]
 800c04c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	687a      	ldr	r2, [r7, #4]
 800c054:	429a      	cmp	r2, r3
 800c056:	d103      	bne.n	800c060 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	689a      	ldr	r2, [r3, #8]
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	1e5a      	subs	r2, r3, #1
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
}
 800c074:	4618      	mov	r0, r3
 800c076:	3714      	adds	r7, #20
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10a      	bne.n	800c0aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c098:	f383 8811 	msr	BASEPRI, r3
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	f3bf 8f4f 	dsb	sy
 800c0a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c0a6:	bf00      	nop
 800c0a8:	e7fe      	b.n	800c0a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c0aa:	f002 f98b 	bl	800e3c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0b6:	68f9      	ldr	r1, [r7, #12]
 800c0b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c0ba:	fb01 f303 	mul.w	r3, r1, r3
 800c0be:	441a      	add	r2, r3
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	68f9      	ldr	r1, [r7, #12]
 800c0de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c0e0:	fb01 f303 	mul.w	r3, r1, r3
 800c0e4:	441a      	add	r2, r3
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	22ff      	movs	r2, #255	; 0xff
 800c0ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	22ff      	movs	r2, #255	; 0xff
 800c0f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d114      	bne.n	800c12a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d01a      	beq.n	800c13e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	3310      	adds	r3, #16
 800c10c:	4618      	mov	r0, r3
 800c10e:	f001 fa43 	bl	800d598 <xTaskRemoveFromEventList>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d012      	beq.n	800c13e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c118:	4b0c      	ldr	r3, [pc, #48]	; (800c14c <xQueueGenericReset+0xcc>)
 800c11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c11e:	601a      	str	r2, [r3, #0]
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	f3bf 8f6f 	isb	sy
 800c128:	e009      	b.n	800c13e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	3310      	adds	r3, #16
 800c12e:	4618      	mov	r0, r3
 800c130:	f7ff fef2 	bl	800bf18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	3324      	adds	r3, #36	; 0x24
 800c138:	4618      	mov	r0, r3
 800c13a:	f7ff feed 	bl	800bf18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c13e:	f002 f971 	bl	800e424 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c142:	2301      	movs	r3, #1
}
 800c144:	4618      	mov	r0, r3
 800c146:	3710      	adds	r7, #16
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}
 800c14c:	e000ed04 	.word	0xe000ed04

0800c150 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c150:	b580      	push	{r7, lr}
 800c152:	b08e      	sub	sp, #56	; 0x38
 800c154:	af02      	add	r7, sp, #8
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
 800c15c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10a      	bne.n	800c17a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	f383 8811 	msr	BASEPRI, r3
 800c16c:	f3bf 8f6f 	isb	sy
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c176:	bf00      	nop
 800c178:	e7fe      	b.n	800c178 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10a      	bne.n	800c196 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c192:	bf00      	nop
 800c194:	e7fe      	b.n	800c194 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d002      	beq.n	800c1a2 <xQueueGenericCreateStatic+0x52>
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d001      	beq.n	800c1a6 <xQueueGenericCreateStatic+0x56>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e000      	b.n	800c1a8 <xQueueGenericCreateStatic+0x58>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10a      	bne.n	800c1c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b0:	f383 8811 	msr	BASEPRI, r3
 800c1b4:	f3bf 8f6f 	isb	sy
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	623b      	str	r3, [r7, #32]
}
 800c1be:	bf00      	nop
 800c1c0:	e7fe      	b.n	800c1c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d102      	bne.n	800c1ce <xQueueGenericCreateStatic+0x7e>
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d101      	bne.n	800c1d2 <xQueueGenericCreateStatic+0x82>
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e000      	b.n	800c1d4 <xQueueGenericCreateStatic+0x84>
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d10a      	bne.n	800c1ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1dc:	f383 8811 	msr	BASEPRI, r3
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	61fb      	str	r3, [r7, #28]
}
 800c1ea:	bf00      	nop
 800c1ec:	e7fe      	b.n	800c1ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c1ee:	2350      	movs	r3, #80	; 0x50
 800c1f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	2b50      	cmp	r3, #80	; 0x50
 800c1f6:	d00a      	beq.n	800c20e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fc:	f383 8811 	msr	BASEPRI, r3
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	f3bf 8f4f 	dsb	sy
 800c208:	61bb      	str	r3, [r7, #24]
}
 800c20a:	bf00      	nop
 800c20c:	e7fe      	b.n	800c20c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c20e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c216:	2b00      	cmp	r3, #0
 800c218:	d00d      	beq.n	800c236 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21c:	2201      	movs	r2, #1
 800c21e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c222:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c228:	9300      	str	r3, [sp, #0]
 800c22a:	4613      	mov	r3, r2
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	68b9      	ldr	r1, [r7, #8]
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f000 f83f 	bl	800c2b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c238:	4618      	mov	r0, r3
 800c23a:	3730      	adds	r7, #48	; 0x30
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c240:	b580      	push	{r7, lr}
 800c242:	b08a      	sub	sp, #40	; 0x28
 800c244:	af02      	add	r7, sp, #8
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	4613      	mov	r3, r2
 800c24c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d10a      	bne.n	800c26a <xQueueGenericCreate+0x2a>
	__asm volatile
 800c254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c258:	f383 8811 	msr	BASEPRI, r3
 800c25c:	f3bf 8f6f 	isb	sy
 800c260:	f3bf 8f4f 	dsb	sy
 800c264:	613b      	str	r3, [r7, #16]
}
 800c266:	bf00      	nop
 800c268:	e7fe      	b.n	800c268 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	fb02 f303 	mul.w	r3, r2, r3
 800c272:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	3350      	adds	r3, #80	; 0x50
 800c278:	4618      	mov	r0, r3
 800c27a:	f002 f9c5 	bl	800e608 <pvPortMalloc>
 800c27e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d011      	beq.n	800c2aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	3350      	adds	r3, #80	; 0x50
 800c28e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c298:	79fa      	ldrb	r2, [r7, #7]
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	9300      	str	r3, [sp, #0]
 800c29e:	4613      	mov	r3, r2
 800c2a0:	697a      	ldr	r2, [r7, #20]
 800c2a2:	68b9      	ldr	r1, [r7, #8]
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f000 f805 	bl	800c2b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c2aa:	69bb      	ldr	r3, [r7, #24]
	}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3720      	adds	r7, #32
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
 800c2c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d103      	bne.n	800c2d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	69ba      	ldr	r2, [r7, #24]
 800c2cc:	601a      	str	r2, [r3, #0]
 800c2ce:	e002      	b.n	800c2d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c2d0:	69bb      	ldr	r3, [r7, #24]
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c2e2:	2101      	movs	r1, #1
 800c2e4:	69b8      	ldr	r0, [r7, #24]
 800c2e6:	f7ff fecb 	bl	800c080 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	78fa      	ldrb	r2, [r7, #3]
 800c2ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c2f2:	bf00      	nop
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
	...

0800c2fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b08e      	sub	sp, #56	; 0x38
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	607a      	str	r2, [r7, #4]
 800c308:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c30a:	2300      	movs	r3, #0
 800c30c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c314:	2b00      	cmp	r3, #0
 800c316:	d10a      	bne.n	800c32e <xQueueGenericSend+0x32>
	__asm volatile
 800c318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31c:	f383 8811 	msr	BASEPRI, r3
 800c320:	f3bf 8f6f 	isb	sy
 800c324:	f3bf 8f4f 	dsb	sy
 800c328:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c32a:	bf00      	nop
 800c32c:	e7fe      	b.n	800c32c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d103      	bne.n	800c33c <xQueueGenericSend+0x40>
 800c334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d101      	bne.n	800c340 <xQueueGenericSend+0x44>
 800c33c:	2301      	movs	r3, #1
 800c33e:	e000      	b.n	800c342 <xQueueGenericSend+0x46>
 800c340:	2300      	movs	r3, #0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d10a      	bne.n	800c35c <xQueueGenericSend+0x60>
	__asm volatile
 800c346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34a:	f383 8811 	msr	BASEPRI, r3
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f3bf 8f4f 	dsb	sy
 800c356:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c358:	bf00      	nop
 800c35a:	e7fe      	b.n	800c35a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	2b02      	cmp	r3, #2
 800c360:	d103      	bne.n	800c36a <xQueueGenericSend+0x6e>
 800c362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c366:	2b01      	cmp	r3, #1
 800c368:	d101      	bne.n	800c36e <xQueueGenericSend+0x72>
 800c36a:	2301      	movs	r3, #1
 800c36c:	e000      	b.n	800c370 <xQueueGenericSend+0x74>
 800c36e:	2300      	movs	r3, #0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d10a      	bne.n	800c38a <xQueueGenericSend+0x8e>
	__asm volatile
 800c374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c378:	f383 8811 	msr	BASEPRI, r3
 800c37c:	f3bf 8f6f 	isb	sy
 800c380:	f3bf 8f4f 	dsb	sy
 800c384:	623b      	str	r3, [r7, #32]
}
 800c386:	bf00      	nop
 800c388:	e7fe      	b.n	800c388 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c38a:	f001 fac3 	bl	800d914 <xTaskGetSchedulerState>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	d102      	bne.n	800c39a <xQueueGenericSend+0x9e>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d101      	bne.n	800c39e <xQueueGenericSend+0xa2>
 800c39a:	2301      	movs	r3, #1
 800c39c:	e000      	b.n	800c3a0 <xQueueGenericSend+0xa4>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d10a      	bne.n	800c3ba <xQueueGenericSend+0xbe>
	__asm volatile
 800c3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	61fb      	str	r3, [r7, #28]
}
 800c3b6:	bf00      	nop
 800c3b8:	e7fe      	b.n	800c3b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3ba:	f002 f803 	bl	800e3c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d302      	bcc.n	800c3d0 <xQueueGenericSend+0xd4>
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	2b02      	cmp	r3, #2
 800c3ce:	d129      	bne.n	800c424 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c3d0:	683a      	ldr	r2, [r7, #0]
 800c3d2:	68b9      	ldr	r1, [r7, #8]
 800c3d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3d6:	f000 fa0b 	bl	800c7f0 <prvCopyDataToQueue>
 800c3da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d010      	beq.n	800c406 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e6:	3324      	adds	r3, #36	; 0x24
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f001 f8d5 	bl	800d598 <xTaskRemoveFromEventList>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d013      	beq.n	800c41c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c3f4:	4b3f      	ldr	r3, [pc, #252]	; (800c4f4 <xQueueGenericSend+0x1f8>)
 800c3f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3fa:	601a      	str	r2, [r3, #0]
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	f3bf 8f6f 	isb	sy
 800c404:	e00a      	b.n	800c41c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d007      	beq.n	800c41c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c40c:	4b39      	ldr	r3, [pc, #228]	; (800c4f4 <xQueueGenericSend+0x1f8>)
 800c40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c412:	601a      	str	r2, [r3, #0]
 800c414:	f3bf 8f4f 	dsb	sy
 800c418:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c41c:	f002 f802 	bl	800e424 <vPortExitCritical>
				return pdPASS;
 800c420:	2301      	movs	r3, #1
 800c422:	e063      	b.n	800c4ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d103      	bne.n	800c432 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c42a:	f001 fffb 	bl	800e424 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c42e:	2300      	movs	r3, #0
 800c430:	e05c      	b.n	800c4ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c434:	2b00      	cmp	r3, #0
 800c436:	d106      	bne.n	800c446 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c438:	f107 0314 	add.w	r3, r7, #20
 800c43c:	4618      	mov	r0, r3
 800c43e:	f001 f90f 	bl	800d660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c442:	2301      	movs	r3, #1
 800c444:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c446:	f001 ffed 	bl	800e424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c44a:	f000 fe81 	bl	800d150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c44e:	f001 ffb9 	bl	800e3c4 <vPortEnterCritical>
 800c452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c458:	b25b      	sxtb	r3, r3
 800c45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c45e:	d103      	bne.n	800c468 <xQueueGenericSend+0x16c>
 800c460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c462:	2200      	movs	r2, #0
 800c464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c46e:	b25b      	sxtb	r3, r3
 800c470:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c474:	d103      	bne.n	800c47e <xQueueGenericSend+0x182>
 800c476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c478:	2200      	movs	r2, #0
 800c47a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c47e:	f001 ffd1 	bl	800e424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c482:	1d3a      	adds	r2, r7, #4
 800c484:	f107 0314 	add.w	r3, r7, #20
 800c488:	4611      	mov	r1, r2
 800c48a:	4618      	mov	r0, r3
 800c48c:	f001 f8fe 	bl	800d68c <xTaskCheckForTimeOut>
 800c490:	4603      	mov	r3, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	d124      	bne.n	800c4e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c496:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c498:	f000 faa2 	bl	800c9e0 <prvIsQueueFull>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d018      	beq.n	800c4d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a4:	3310      	adds	r3, #16
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	4611      	mov	r1, r2
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f001 f824 	bl	800d4f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c4b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4b2:	f000 fa2d 	bl	800c910 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c4b6:	f000 fe59 	bl	800d16c <xTaskResumeAll>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f47f af7c 	bne.w	800c3ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c4c2:	4b0c      	ldr	r3, [pc, #48]	; (800c4f4 <xQueueGenericSend+0x1f8>)
 800c4c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4c8:	601a      	str	r2, [r3, #0]
 800c4ca:	f3bf 8f4f 	dsb	sy
 800c4ce:	f3bf 8f6f 	isb	sy
 800c4d2:	e772      	b.n	800c3ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c4d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4d6:	f000 fa1b 	bl	800c910 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4da:	f000 fe47 	bl	800d16c <xTaskResumeAll>
 800c4de:	e76c      	b.n	800c3ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c4e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4e2:	f000 fa15 	bl	800c910 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4e6:	f000 fe41 	bl	800d16c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c4ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3738      	adds	r7, #56	; 0x38
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	e000ed04 	.word	0xe000ed04

0800c4f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b090      	sub	sp, #64	; 0x40
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	60b9      	str	r1, [r7, #8]
 800c502:	607a      	str	r2, [r7, #4]
 800c504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10a      	bne.n	800c526 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c522:	bf00      	nop
 800c524:	e7fe      	b.n	800c524 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d103      	bne.n	800c534 <xQueueGenericSendFromISR+0x3c>
 800c52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c530:	2b00      	cmp	r3, #0
 800c532:	d101      	bne.n	800c538 <xQueueGenericSendFromISR+0x40>
 800c534:	2301      	movs	r3, #1
 800c536:	e000      	b.n	800c53a <xQueueGenericSendFromISR+0x42>
 800c538:	2300      	movs	r3, #0
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d10a      	bne.n	800c554 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c542:	f383 8811 	msr	BASEPRI, r3
 800c546:	f3bf 8f6f 	isb	sy
 800c54a:	f3bf 8f4f 	dsb	sy
 800c54e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c550:	bf00      	nop
 800c552:	e7fe      	b.n	800c552 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	2b02      	cmp	r3, #2
 800c558:	d103      	bne.n	800c562 <xQueueGenericSendFromISR+0x6a>
 800c55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d101      	bne.n	800c566 <xQueueGenericSendFromISR+0x6e>
 800c562:	2301      	movs	r3, #1
 800c564:	e000      	b.n	800c568 <xQueueGenericSendFromISR+0x70>
 800c566:	2300      	movs	r3, #0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d10a      	bne.n	800c582 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c570:	f383 8811 	msr	BASEPRI, r3
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	623b      	str	r3, [r7, #32]
}
 800c57e:	bf00      	nop
 800c580:	e7fe      	b.n	800c580 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c582:	f002 f801 	bl	800e588 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c586:	f3ef 8211 	mrs	r2, BASEPRI
 800c58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58e:	f383 8811 	msr	BASEPRI, r3
 800c592:	f3bf 8f6f 	isb	sy
 800c596:	f3bf 8f4f 	dsb	sy
 800c59a:	61fa      	str	r2, [r7, #28]
 800c59c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c59e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d302      	bcc.n	800c5b4 <xQueueGenericSendFromISR+0xbc>
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	2b02      	cmp	r3, #2
 800c5b2:	d12f      	bne.n	800c614 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c5c4:	683a      	ldr	r2, [r7, #0]
 800c5c6:	68b9      	ldr	r1, [r7, #8]
 800c5c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5ca:	f000 f911 	bl	800c7f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c5ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c5d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5d6:	d112      	bne.n	800c5fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d016      	beq.n	800c60e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e2:	3324      	adds	r3, #36	; 0x24
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f000 ffd7 	bl	800d598 <xTaskRemoveFromEventList>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00e      	beq.n	800c60e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00b      	beq.n	800c60e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	601a      	str	r2, [r3, #0]
 800c5fc:	e007      	b.n	800c60e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c5fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c602:	3301      	adds	r3, #1
 800c604:	b2db      	uxtb	r3, r3
 800c606:	b25a      	sxtb	r2, r3
 800c608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c60e:	2301      	movs	r3, #1
 800c610:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c612:	e001      	b.n	800c618 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c614:	2300      	movs	r3, #0
 800c616:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c622:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c626:	4618      	mov	r0, r3
 800c628:	3740      	adds	r7, #64	; 0x40
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
	...

0800c630 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b08c      	sub	sp, #48	; 0x30
 800c634:	af00      	add	r7, sp, #0
 800c636:	60f8      	str	r0, [r7, #12]
 800c638:	60b9      	str	r1, [r7, #8]
 800c63a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c63c:	2300      	movs	r3, #0
 800c63e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c646:	2b00      	cmp	r3, #0
 800c648:	d10a      	bne.n	800c660 <xQueueReceive+0x30>
	__asm volatile
 800c64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64e:	f383 8811 	msr	BASEPRI, r3
 800c652:	f3bf 8f6f 	isb	sy
 800c656:	f3bf 8f4f 	dsb	sy
 800c65a:	623b      	str	r3, [r7, #32]
}
 800c65c:	bf00      	nop
 800c65e:	e7fe      	b.n	800c65e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d103      	bne.n	800c66e <xQueueReceive+0x3e>
 800c666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d101      	bne.n	800c672 <xQueueReceive+0x42>
 800c66e:	2301      	movs	r3, #1
 800c670:	e000      	b.n	800c674 <xQueueReceive+0x44>
 800c672:	2300      	movs	r3, #0
 800c674:	2b00      	cmp	r3, #0
 800c676:	d10a      	bne.n	800c68e <xQueueReceive+0x5e>
	__asm volatile
 800c678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c67c:	f383 8811 	msr	BASEPRI, r3
 800c680:	f3bf 8f6f 	isb	sy
 800c684:	f3bf 8f4f 	dsb	sy
 800c688:	61fb      	str	r3, [r7, #28]
}
 800c68a:	bf00      	nop
 800c68c:	e7fe      	b.n	800c68c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c68e:	f001 f941 	bl	800d914 <xTaskGetSchedulerState>
 800c692:	4603      	mov	r3, r0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d102      	bne.n	800c69e <xQueueReceive+0x6e>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d101      	bne.n	800c6a2 <xQueueReceive+0x72>
 800c69e:	2301      	movs	r3, #1
 800c6a0:	e000      	b.n	800c6a4 <xQueueReceive+0x74>
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d10a      	bne.n	800c6be <xQueueReceive+0x8e>
	__asm volatile
 800c6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ac:	f383 8811 	msr	BASEPRI, r3
 800c6b0:	f3bf 8f6f 	isb	sy
 800c6b4:	f3bf 8f4f 	dsb	sy
 800c6b8:	61bb      	str	r3, [r7, #24]
}
 800c6ba:	bf00      	nop
 800c6bc:	e7fe      	b.n	800c6bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c6be:	f001 fe81 	bl	800e3c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d01f      	beq.n	800c70e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c6ce:	68b9      	ldr	r1, [r7, #8]
 800c6d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6d2:	f000 f8f7 	bl	800c8c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d8:	1e5a      	subs	r2, r3, #1
 800c6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d00f      	beq.n	800c706 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e8:	3310      	adds	r3, #16
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f000 ff54 	bl	800d598 <xTaskRemoveFromEventList>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d007      	beq.n	800c706 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c6f6:	4b3d      	ldr	r3, [pc, #244]	; (800c7ec <xQueueReceive+0x1bc>)
 800c6f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6fc:	601a      	str	r2, [r3, #0]
 800c6fe:	f3bf 8f4f 	dsb	sy
 800c702:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c706:	f001 fe8d 	bl	800e424 <vPortExitCritical>
				return pdPASS;
 800c70a:	2301      	movs	r3, #1
 800c70c:	e069      	b.n	800c7e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d103      	bne.n	800c71c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c714:	f001 fe86 	bl	800e424 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c718:	2300      	movs	r3, #0
 800c71a:	e062      	b.n	800c7e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d106      	bne.n	800c730 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c722:	f107 0310 	add.w	r3, r7, #16
 800c726:	4618      	mov	r0, r3
 800c728:	f000 ff9a 	bl	800d660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c72c:	2301      	movs	r3, #1
 800c72e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c730:	f001 fe78 	bl	800e424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c734:	f000 fd0c 	bl	800d150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c738:	f001 fe44 	bl	800e3c4 <vPortEnterCritical>
 800c73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c742:	b25b      	sxtb	r3, r3
 800c744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c748:	d103      	bne.n	800c752 <xQueueReceive+0x122>
 800c74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74c:	2200      	movs	r2, #0
 800c74e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c758:	b25b      	sxtb	r3, r3
 800c75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c75e:	d103      	bne.n	800c768 <xQueueReceive+0x138>
 800c760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c762:	2200      	movs	r2, #0
 800c764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c768:	f001 fe5c 	bl	800e424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c76c:	1d3a      	adds	r2, r7, #4
 800c76e:	f107 0310 	add.w	r3, r7, #16
 800c772:	4611      	mov	r1, r2
 800c774:	4618      	mov	r0, r3
 800c776:	f000 ff89 	bl	800d68c <xTaskCheckForTimeOut>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d123      	bne.n	800c7c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c782:	f000 f917 	bl	800c9b4 <prvIsQueueEmpty>
 800c786:	4603      	mov	r3, r0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d017      	beq.n	800c7bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78e:	3324      	adds	r3, #36	; 0x24
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	4611      	mov	r1, r2
 800c794:	4618      	mov	r0, r3
 800c796:	f000 feaf 	bl	800d4f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c79a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c79c:	f000 f8b8 	bl	800c910 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c7a0:	f000 fce4 	bl	800d16c <xTaskResumeAll>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d189      	bne.n	800c6be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c7aa:	4b10      	ldr	r3, [pc, #64]	; (800c7ec <xQueueReceive+0x1bc>)
 800c7ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7b0:	601a      	str	r2, [r3, #0]
 800c7b2:	f3bf 8f4f 	dsb	sy
 800c7b6:	f3bf 8f6f 	isb	sy
 800c7ba:	e780      	b.n	800c6be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c7bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7be:	f000 f8a7 	bl	800c910 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c7c2:	f000 fcd3 	bl	800d16c <xTaskResumeAll>
 800c7c6:	e77a      	b.n	800c6be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7ca:	f000 f8a1 	bl	800c910 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7ce:	f000 fccd 	bl	800d16c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7d4:	f000 f8ee 	bl	800c9b4 <prvIsQueueEmpty>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	f43f af6f 	beq.w	800c6be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3730      	adds	r7, #48	; 0x30
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	e000ed04 	.word	0xe000ed04

0800c7f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b086      	sub	sp, #24
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c804:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d10d      	bne.n	800c82a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d14d      	bne.n	800c8b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	689b      	ldr	r3, [r3, #8]
 800c81a:	4618      	mov	r0, r3
 800c81c:	f001 f898 	bl	800d950 <xTaskPriorityDisinherit>
 800c820:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	2200      	movs	r2, #0
 800c826:	609a      	str	r2, [r3, #8]
 800c828:	e043      	b.n	800c8b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d119      	bne.n	800c864 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6858      	ldr	r0, [r3, #4]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c838:	461a      	mov	r2, r3
 800c83a:	68b9      	ldr	r1, [r7, #8]
 800c83c:	f002 fdf2 	bl	800f424 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	685a      	ldr	r2, [r3, #4]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c848:	441a      	add	r2, r3
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	685a      	ldr	r2, [r3, #4]
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	689b      	ldr	r3, [r3, #8]
 800c856:	429a      	cmp	r2, r3
 800c858:	d32b      	bcc.n	800c8b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	605a      	str	r2, [r3, #4]
 800c862:	e026      	b.n	800c8b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	68d8      	ldr	r0, [r3, #12]
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c86c:	461a      	mov	r2, r3
 800c86e:	68b9      	ldr	r1, [r7, #8]
 800c870:	f002 fdd8 	bl	800f424 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	68da      	ldr	r2, [r3, #12]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c87c:	425b      	negs	r3, r3
 800c87e:	441a      	add	r2, r3
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	68da      	ldr	r2, [r3, #12]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d207      	bcs.n	800c8a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	689a      	ldr	r2, [r3, #8]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c898:	425b      	negs	r3, r3
 800c89a:	441a      	add	r2, r3
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2b02      	cmp	r3, #2
 800c8a4:	d105      	bne.n	800c8b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d002      	beq.n	800c8b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	3b01      	subs	r3, #1
 800c8b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	1c5a      	adds	r2, r3, #1
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c8ba:	697b      	ldr	r3, [r7, #20]
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3718      	adds	r7, #24
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d018      	beq.n	800c908 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	68da      	ldr	r2, [r3, #12]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8de:	441a      	add	r2, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	68da      	ldr	r2, [r3, #12]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d303      	bcc.n	800c8f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	68d9      	ldr	r1, [r3, #12]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c900:	461a      	mov	r2, r3
 800c902:	6838      	ldr	r0, [r7, #0]
 800c904:	f002 fd8e 	bl	800f424 <memcpy>
	}
}
 800c908:	bf00      	nop
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c918:	f001 fd54 	bl	800e3c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c922:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c924:	e011      	b.n	800c94a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d012      	beq.n	800c954 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	3324      	adds	r3, #36	; 0x24
 800c932:	4618      	mov	r0, r3
 800c934:	f000 fe30 	bl	800d598 <xTaskRemoveFromEventList>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d001      	beq.n	800c942 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c93e:	f000 ff07 	bl	800d750 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c942:	7bfb      	ldrb	r3, [r7, #15]
 800c944:	3b01      	subs	r3, #1
 800c946:	b2db      	uxtb	r3, r3
 800c948:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c94a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	dce9      	bgt.n	800c926 <prvUnlockQueue+0x16>
 800c952:	e000      	b.n	800c956 <prvUnlockQueue+0x46>
					break;
 800c954:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	22ff      	movs	r2, #255	; 0xff
 800c95a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c95e:	f001 fd61 	bl	800e424 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c962:	f001 fd2f 	bl	800e3c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c96c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c96e:	e011      	b.n	800c994 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	691b      	ldr	r3, [r3, #16]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d012      	beq.n	800c99e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	3310      	adds	r3, #16
 800c97c:	4618      	mov	r0, r3
 800c97e:	f000 fe0b 	bl	800d598 <xTaskRemoveFromEventList>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d001      	beq.n	800c98c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c988:	f000 fee2 	bl	800d750 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c98c:	7bbb      	ldrb	r3, [r7, #14]
 800c98e:	3b01      	subs	r3, #1
 800c990:	b2db      	uxtb	r3, r3
 800c992:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c994:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	dce9      	bgt.n	800c970 <prvUnlockQueue+0x60>
 800c99c:	e000      	b.n	800c9a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c99e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	22ff      	movs	r2, #255	; 0xff
 800c9a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c9a8:	f001 fd3c 	bl	800e424 <vPortExitCritical>
}
 800c9ac:	bf00      	nop
 800c9ae:	3710      	adds	r7, #16
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9bc:	f001 fd02 	bl	800e3c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d102      	bne.n	800c9ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	60fb      	str	r3, [r7, #12]
 800c9cc:	e001      	b.n	800c9d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9d2:	f001 fd27 	bl	800e424 <vPortExitCritical>

	return xReturn;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3710      	adds	r7, #16
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9e8:	f001 fcec 	bl	800e3c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d102      	bne.n	800c9fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	60fb      	str	r3, [r7, #12]
 800c9fc:	e001      	b.n	800ca02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca02:	f001 fd0f 	bl	800e424 <vPortExitCritical>

	return xReturn;
 800ca06:	68fb      	ldr	r3, [r7, #12]
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	60fb      	str	r3, [r7, #12]
 800ca1e:	e014      	b.n	800ca4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ca20:	4a0f      	ldr	r2, [pc, #60]	; (800ca60 <vQueueAddToRegistry+0x50>)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d10b      	bne.n	800ca44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ca2c:	490c      	ldr	r1, [pc, #48]	; (800ca60 <vQueueAddToRegistry+0x50>)
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	683a      	ldr	r2, [r7, #0]
 800ca32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ca36:	4a0a      	ldr	r2, [pc, #40]	; (800ca60 <vQueueAddToRegistry+0x50>)
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	00db      	lsls	r3, r3, #3
 800ca3c:	4413      	add	r3, r2
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ca42:	e006      	b.n	800ca52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	3301      	adds	r3, #1
 800ca48:	60fb      	str	r3, [r7, #12]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2b07      	cmp	r3, #7
 800ca4e:	d9e7      	bls.n	800ca20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ca50:	bf00      	nop
 800ca52:	bf00      	nop
 800ca54:	3714      	adds	r7, #20
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop
 800ca60:	20001598 	.word	0x20001598

0800ca64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b086      	sub	sp, #24
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ca74:	f001 fca6 	bl	800e3c4 <vPortEnterCritical>
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca7e:	b25b      	sxtb	r3, r3
 800ca80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca84:	d103      	bne.n	800ca8e <vQueueWaitForMessageRestricted+0x2a>
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca94:	b25b      	sxtb	r3, r3
 800ca96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca9a:	d103      	bne.n	800caa4 <vQueueWaitForMessageRestricted+0x40>
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800caa4:	f001 fcbe 	bl	800e424 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caac:	2b00      	cmp	r3, #0
 800caae:	d106      	bne.n	800cabe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	3324      	adds	r3, #36	; 0x24
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	68b9      	ldr	r1, [r7, #8]
 800cab8:	4618      	mov	r0, r3
 800caba:	f000 fd41 	bl	800d540 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cabe:	6978      	ldr	r0, [r7, #20]
 800cac0:	f7ff ff26 	bl	800c910 <prvUnlockQueue>
	}
 800cac4:	bf00      	nop
 800cac6:	3718      	adds	r7, #24
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b08e      	sub	sp, #56	; 0x38
 800cad0:	af04      	add	r7, sp, #16
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	607a      	str	r2, [r7, #4]
 800cad8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d10a      	bne.n	800caf6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae4:	f383 8811 	msr	BASEPRI, r3
 800cae8:	f3bf 8f6f 	isb	sy
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	623b      	str	r3, [r7, #32]
}
 800caf2:	bf00      	nop
 800caf4:	e7fe      	b.n	800caf4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800caf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d10a      	bne.n	800cb12 <xTaskCreateStatic+0x46>
	__asm volatile
 800cafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb00:	f383 8811 	msr	BASEPRI, r3
 800cb04:	f3bf 8f6f 	isb	sy
 800cb08:	f3bf 8f4f 	dsb	sy
 800cb0c:	61fb      	str	r3, [r7, #28]
}
 800cb0e:	bf00      	nop
 800cb10:	e7fe      	b.n	800cb10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cb12:	236c      	movs	r3, #108	; 0x6c
 800cb14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	2b6c      	cmp	r3, #108	; 0x6c
 800cb1a:	d00a      	beq.n	800cb32 <xTaskCreateStatic+0x66>
	__asm volatile
 800cb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb20:	f383 8811 	msr	BASEPRI, r3
 800cb24:	f3bf 8f6f 	isb	sy
 800cb28:	f3bf 8f4f 	dsb	sy
 800cb2c:	61bb      	str	r3, [r7, #24]
}
 800cb2e:	bf00      	nop
 800cb30:	e7fe      	b.n	800cb30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cb32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d01e      	beq.n	800cb78 <xTaskCreateStatic+0xac>
 800cb3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d01b      	beq.n	800cb78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4c:	2202      	movs	r2, #2
 800cb4e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cb52:	2300      	movs	r3, #0
 800cb54:	9303      	str	r3, [sp, #12]
 800cb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb58:	9302      	str	r3, [sp, #8]
 800cb5a:	f107 0314 	add.w	r3, r7, #20
 800cb5e:	9301      	str	r3, [sp, #4]
 800cb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb62:	9300      	str	r3, [sp, #0]
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	68b9      	ldr	r1, [r7, #8]
 800cb6a:	68f8      	ldr	r0, [r7, #12]
 800cb6c:	f000 f850 	bl	800cc10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb72:	f000 f8dd 	bl	800cd30 <prvAddNewTaskToReadyList>
 800cb76:	e001      	b.n	800cb7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cb7c:	697b      	ldr	r3, [r7, #20]
	}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3728      	adds	r7, #40	; 0x28
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cb86:	b580      	push	{r7, lr}
 800cb88:	b08c      	sub	sp, #48	; 0x30
 800cb8a:	af04      	add	r7, sp, #16
 800cb8c:	60f8      	str	r0, [r7, #12]
 800cb8e:	60b9      	str	r1, [r7, #8]
 800cb90:	603b      	str	r3, [r7, #0]
 800cb92:	4613      	mov	r3, r2
 800cb94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cb96:	88fb      	ldrh	r3, [r7, #6]
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f001 fd34 	bl	800e608 <pvPortMalloc>
 800cba0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d00e      	beq.n	800cbc6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cba8:	206c      	movs	r0, #108	; 0x6c
 800cbaa:	f001 fd2d 	bl	800e608 <pvPortMalloc>
 800cbae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d003      	beq.n	800cbbe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	697a      	ldr	r2, [r7, #20]
 800cbba:	631a      	str	r2, [r3, #48]	; 0x30
 800cbbc:	e005      	b.n	800cbca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cbbe:	6978      	ldr	r0, [r7, #20]
 800cbc0:	f001 fdee 	bl	800e7a0 <vPortFree>
 800cbc4:	e001      	b.n	800cbca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d017      	beq.n	800cc00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cbd8:	88fa      	ldrh	r2, [r7, #6]
 800cbda:	2300      	movs	r3, #0
 800cbdc:	9303      	str	r3, [sp, #12]
 800cbde:	69fb      	ldr	r3, [r7, #28]
 800cbe0:	9302      	str	r3, [sp, #8]
 800cbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe4:	9301      	str	r3, [sp, #4]
 800cbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe8:	9300      	str	r3, [sp, #0]
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	68b9      	ldr	r1, [r7, #8]
 800cbee:	68f8      	ldr	r0, [r7, #12]
 800cbf0:	f000 f80e 	bl	800cc10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cbf4:	69f8      	ldr	r0, [r7, #28]
 800cbf6:	f000 f89b 	bl	800cd30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	61bb      	str	r3, [r7, #24]
 800cbfe:	e002      	b.n	800cc06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc00:	f04f 33ff 	mov.w	r3, #4294967295
 800cc04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cc06:	69bb      	ldr	r3, [r7, #24]
	}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3720      	adds	r7, #32
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b088      	sub	sp, #32
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	60b9      	str	r1, [r7, #8]
 800cc1a:	607a      	str	r2, [r7, #4]
 800cc1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	461a      	mov	r2, r3
 800cc28:	21a5      	movs	r1, #165	; 0xa5
 800cc2a:	f002 fc09 	bl	800f440 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cc38:	3b01      	subs	r3, #1
 800cc3a:	009b      	lsls	r3, r3, #2
 800cc3c:	4413      	add	r3, r2
 800cc3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cc40:	69bb      	ldr	r3, [r7, #24]
 800cc42:	f023 0307 	bic.w	r3, r3, #7
 800cc46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	f003 0307 	and.w	r3, r3, #7
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d00a      	beq.n	800cc68 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc56:	f383 8811 	msr	BASEPRI, r3
 800cc5a:	f3bf 8f6f 	isb	sy
 800cc5e:	f3bf 8f4f 	dsb	sy
 800cc62:	617b      	str	r3, [r7, #20]
}
 800cc64:	bf00      	nop
 800cc66:	e7fe      	b.n	800cc66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d01f      	beq.n	800ccae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc6e:	2300      	movs	r3, #0
 800cc70:	61fb      	str	r3, [r7, #28]
 800cc72:	e012      	b.n	800cc9a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc74:	68ba      	ldr	r2, [r7, #8]
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	4413      	add	r3, r2
 800cc7a:	7819      	ldrb	r1, [r3, #0]
 800cc7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	4413      	add	r3, r2
 800cc82:	3334      	adds	r3, #52	; 0x34
 800cc84:	460a      	mov	r2, r1
 800cc86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cc88:	68ba      	ldr	r2, [r7, #8]
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	4413      	add	r3, r2
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d006      	beq.n	800cca2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	3301      	adds	r3, #1
 800cc98:	61fb      	str	r3, [r7, #28]
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	2b1d      	cmp	r3, #29
 800cc9e:	d9e9      	bls.n	800cc74 <prvInitialiseNewTask+0x64>
 800cca0:	e000      	b.n	800cca4 <prvInitialiseNewTask+0x94>
			{
				break;
 800cca2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca6:	2200      	movs	r2, #0
 800cca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800ccac:	e003      	b.n	800ccb6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ccae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ccb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb8:	2b37      	cmp	r3, #55	; 0x37
 800ccba:	d901      	bls.n	800ccc0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ccbc:	2337      	movs	r3, #55	; 0x37
 800ccbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ccc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ccc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccca:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800cccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccce:	2200      	movs	r2, #0
 800ccd0:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ccd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd4:	3304      	adds	r3, #4
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7ff f93e 	bl	800bf58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ccdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccde:	3318      	adds	r3, #24
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7ff f939 	bl	800bf58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ccf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ccf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ccfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfe:	2200      	movs	r2, #0
 800cd00:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd04:	2200      	movs	r2, #0
 800cd06:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd0a:	683a      	ldr	r2, [r7, #0]
 800cd0c:	68f9      	ldr	r1, [r7, #12]
 800cd0e:	69b8      	ldr	r0, [r7, #24]
 800cd10:	f001 fa2e 	bl	800e170 <pxPortInitialiseStack>
 800cd14:	4602      	mov	r2, r0
 800cd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d002      	beq.n	800cd26 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd26:	bf00      	nop
 800cd28:	3720      	adds	r7, #32
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
	...

0800cd30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cd38:	f001 fb44 	bl	800e3c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cd3c:	4b2d      	ldr	r3, [pc, #180]	; (800cdf4 <prvAddNewTaskToReadyList+0xc4>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	3301      	adds	r3, #1
 800cd42:	4a2c      	ldr	r2, [pc, #176]	; (800cdf4 <prvAddNewTaskToReadyList+0xc4>)
 800cd44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cd46:	4b2c      	ldr	r3, [pc, #176]	; (800cdf8 <prvAddNewTaskToReadyList+0xc8>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d109      	bne.n	800cd62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cd4e:	4a2a      	ldr	r2, [pc, #168]	; (800cdf8 <prvAddNewTaskToReadyList+0xc8>)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cd54:	4b27      	ldr	r3, [pc, #156]	; (800cdf4 <prvAddNewTaskToReadyList+0xc4>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d110      	bne.n	800cd7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cd5c:	f000 fd1c 	bl	800d798 <prvInitialiseTaskLists>
 800cd60:	e00d      	b.n	800cd7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cd62:	4b26      	ldr	r3, [pc, #152]	; (800cdfc <prvAddNewTaskToReadyList+0xcc>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d109      	bne.n	800cd7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cd6a:	4b23      	ldr	r3, [pc, #140]	; (800cdf8 <prvAddNewTaskToReadyList+0xc8>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d802      	bhi.n	800cd7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cd78:	4a1f      	ldr	r2, [pc, #124]	; (800cdf8 <prvAddNewTaskToReadyList+0xc8>)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cd7e:	4b20      	ldr	r3, [pc, #128]	; (800ce00 <prvAddNewTaskToReadyList+0xd0>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	3301      	adds	r3, #1
 800cd84:	4a1e      	ldr	r2, [pc, #120]	; (800ce00 <prvAddNewTaskToReadyList+0xd0>)
 800cd86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cd88:	4b1d      	ldr	r3, [pc, #116]	; (800ce00 <prvAddNewTaskToReadyList+0xd0>)
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd94:	4b1b      	ldr	r3, [pc, #108]	; (800ce04 <prvAddNewTaskToReadyList+0xd4>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d903      	bls.n	800cda4 <prvAddNewTaskToReadyList+0x74>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda0:	4a18      	ldr	r2, [pc, #96]	; (800ce04 <prvAddNewTaskToReadyList+0xd4>)
 800cda2:	6013      	str	r3, [r2, #0]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda8:	4613      	mov	r3, r2
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	4413      	add	r3, r2
 800cdae:	009b      	lsls	r3, r3, #2
 800cdb0:	4a15      	ldr	r2, [pc, #84]	; (800ce08 <prvAddNewTaskToReadyList+0xd8>)
 800cdb2:	441a      	add	r2, r3
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	3304      	adds	r3, #4
 800cdb8:	4619      	mov	r1, r3
 800cdba:	4610      	mov	r0, r2
 800cdbc:	f7ff f8d9 	bl	800bf72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cdc0:	f001 fb30 	bl	800e424 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cdc4:	4b0d      	ldr	r3, [pc, #52]	; (800cdfc <prvAddNewTaskToReadyList+0xcc>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d00e      	beq.n	800cdea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cdcc:	4b0a      	ldr	r3, [pc, #40]	; (800cdf8 <prvAddNewTaskToReadyList+0xc8>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d207      	bcs.n	800cdea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cdda:	4b0c      	ldr	r3, [pc, #48]	; (800ce0c <prvAddNewTaskToReadyList+0xdc>)
 800cddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cde0:	601a      	str	r2, [r3, #0]
 800cde2:	f3bf 8f4f 	dsb	sy
 800cde6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdea:	bf00      	nop
 800cdec:	3708      	adds	r7, #8
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	20001aac 	.word	0x20001aac
 800cdf8:	200015d8 	.word	0x200015d8
 800cdfc:	20001ab8 	.word	0x20001ab8
 800ce00:	20001ac8 	.word	0x20001ac8
 800ce04:	20001ab4 	.word	0x20001ab4
 800ce08:	200015dc 	.word	0x200015dc
 800ce0c:	e000ed04 	.word	0xe000ed04

0800ce10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d017      	beq.n	800ce52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ce22:	4b13      	ldr	r3, [pc, #76]	; (800ce70 <vTaskDelay+0x60>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d00a      	beq.n	800ce40 <vTaskDelay+0x30>
	__asm volatile
 800ce2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2e:	f383 8811 	msr	BASEPRI, r3
 800ce32:	f3bf 8f6f 	isb	sy
 800ce36:	f3bf 8f4f 	dsb	sy
 800ce3a:	60bb      	str	r3, [r7, #8]
}
 800ce3c:	bf00      	nop
 800ce3e:	e7fe      	b.n	800ce3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ce40:	f000 f986 	bl	800d150 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ce44:	2100      	movs	r1, #0
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 fdf0 	bl	800da2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ce4c:	f000 f98e 	bl	800d16c <xTaskResumeAll>
 800ce50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d107      	bne.n	800ce68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ce58:	4b06      	ldr	r3, [pc, #24]	; (800ce74 <vTaskDelay+0x64>)
 800ce5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce5e:	601a      	str	r2, [r3, #0]
 800ce60:	f3bf 8f4f 	dsb	sy
 800ce64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce68:	bf00      	nop
 800ce6a:	3710      	adds	r7, #16
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	20001ad4 	.word	0x20001ad4
 800ce74:	e000ed04 	.word	0xe000ed04

0800ce78 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ce80:	f001 faa0 	bl	800e3c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d102      	bne.n	800ce90 <vTaskSuspend+0x18>
 800ce8a:	4b30      	ldr	r3, [pc, #192]	; (800cf4c <vTaskSuspend+0xd4>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	e000      	b.n	800ce92 <vTaskSuspend+0x1a>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	3304      	adds	r3, #4
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7ff f8c7 	bl	800c02c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d004      	beq.n	800ceb0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	3318      	adds	r3, #24
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7ff f8be 	bl	800c02c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	3304      	adds	r3, #4
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	4826      	ldr	r0, [pc, #152]	; (800cf50 <vTaskSuspend+0xd8>)
 800ceb8:	f7ff f85b 	bl	800bf72 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d103      	bne.n	800ced0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2200      	movs	r2, #0
 800cecc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800ced0:	f001 faa8 	bl	800e424 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800ced4:	4b1f      	ldr	r3, [pc, #124]	; (800cf54 <vTaskSuspend+0xdc>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d005      	beq.n	800cee8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800cedc:	f001 fa72 	bl	800e3c4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800cee0:	f000 fcf8 	bl	800d8d4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800cee4:	f001 fa9e 	bl	800e424 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800cee8:	4b18      	ldr	r3, [pc, #96]	; (800cf4c <vTaskSuspend+0xd4>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d127      	bne.n	800cf42 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800cef2:	4b18      	ldr	r3, [pc, #96]	; (800cf54 <vTaskSuspend+0xdc>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d017      	beq.n	800cf2a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800cefa:	4b17      	ldr	r3, [pc, #92]	; (800cf58 <vTaskSuspend+0xe0>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d00a      	beq.n	800cf18 <vTaskSuspend+0xa0>
	__asm volatile
 800cf02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf06:	f383 8811 	msr	BASEPRI, r3
 800cf0a:	f3bf 8f6f 	isb	sy
 800cf0e:	f3bf 8f4f 	dsb	sy
 800cf12:	60bb      	str	r3, [r7, #8]
}
 800cf14:	bf00      	nop
 800cf16:	e7fe      	b.n	800cf16 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800cf18:	4b10      	ldr	r3, [pc, #64]	; (800cf5c <vTaskSuspend+0xe4>)
 800cf1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf1e:	601a      	str	r2, [r3, #0]
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf28:	e00b      	b.n	800cf42 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800cf2a:	4b09      	ldr	r3, [pc, #36]	; (800cf50 <vTaskSuspend+0xd8>)
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	4b0c      	ldr	r3, [pc, #48]	; (800cf60 <vTaskSuspend+0xe8>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d103      	bne.n	800cf3e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800cf36:	4b05      	ldr	r3, [pc, #20]	; (800cf4c <vTaskSuspend+0xd4>)
 800cf38:	2200      	movs	r2, #0
 800cf3a:	601a      	str	r2, [r3, #0]
	}
 800cf3c:	e001      	b.n	800cf42 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800cf3e:	f000 fa7d 	bl	800d43c <vTaskSwitchContext>
	}
 800cf42:	bf00      	nop
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	200015d8 	.word	0x200015d8
 800cf50:	20001a98 	.word	0x20001a98
 800cf54:	20001ab8 	.word	0x20001ab8
 800cf58:	20001ad4 	.word	0x20001ad4
 800cf5c:	e000ed04 	.word	0xe000ed04
 800cf60:	20001aac 	.word	0x20001aac

0800cf64 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800cf64:	b480      	push	{r7}
 800cf66:	b087      	sub	sp, #28
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d10a      	bne.n	800cf90 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800cf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	60fb      	str	r3, [r7, #12]
}
 800cf8c:	bf00      	nop
 800cf8e:	e7fe      	b.n	800cf8e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	695b      	ldr	r3, [r3, #20]
 800cf94:	4a0a      	ldr	r2, [pc, #40]	; (800cfc0 <prvTaskIsTaskSuspended+0x5c>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d10a      	bne.n	800cfb0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf9e:	4a09      	ldr	r2, [pc, #36]	; (800cfc4 <prvTaskIsTaskSuspended+0x60>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d005      	beq.n	800cfb0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d101      	bne.n	800cfb0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800cfac:	2301      	movs	r3, #1
 800cfae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cfb0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	371c      	adds	r7, #28
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr
 800cfbe:	bf00      	nop
 800cfc0:	20001a98 	.word	0x20001a98
 800cfc4:	20001a6c 	.word	0x20001a6c

0800cfc8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b084      	sub	sp, #16
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d10a      	bne.n	800cff0 <vTaskResume+0x28>
	__asm volatile
 800cfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfde:	f383 8811 	msr	BASEPRI, r3
 800cfe2:	f3bf 8f6f 	isb	sy
 800cfe6:	f3bf 8f4f 	dsb	sy
 800cfea:	60bb      	str	r3, [r7, #8]
}
 800cfec:	bf00      	nop
 800cfee:	e7fe      	b.n	800cfee <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800cff0:	4b20      	ldr	r3, [pc, #128]	; (800d074 <vTaskResume+0xac>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d038      	beq.n	800d06c <vTaskResume+0xa4>
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d035      	beq.n	800d06c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800d000:	f001 f9e0 	bl	800e3c4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800d004:	68f8      	ldr	r0, [r7, #12]
 800d006:	f7ff ffad 	bl	800cf64 <prvTaskIsTaskSuspended>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d02b      	beq.n	800d068 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	3304      	adds	r3, #4
 800d014:	4618      	mov	r0, r3
 800d016:	f7ff f809 	bl	800c02c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d01e:	4b16      	ldr	r3, [pc, #88]	; (800d078 <vTaskResume+0xb0>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	429a      	cmp	r2, r3
 800d024:	d903      	bls.n	800d02e <vTaskResume+0x66>
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d02a:	4a13      	ldr	r2, [pc, #76]	; (800d078 <vTaskResume+0xb0>)
 800d02c:	6013      	str	r3, [r2, #0]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d032:	4613      	mov	r3, r2
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	4413      	add	r3, r2
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	4a10      	ldr	r2, [pc, #64]	; (800d07c <vTaskResume+0xb4>)
 800d03c:	441a      	add	r2, r3
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	3304      	adds	r3, #4
 800d042:	4619      	mov	r1, r3
 800d044:	4610      	mov	r0, r2
 800d046:	f7fe ff94 	bl	800bf72 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d04e:	4b09      	ldr	r3, [pc, #36]	; (800d074 <vTaskResume+0xac>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d054:	429a      	cmp	r2, r3
 800d056:	d307      	bcc.n	800d068 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800d058:	4b09      	ldr	r3, [pc, #36]	; (800d080 <vTaskResume+0xb8>)
 800d05a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d05e:	601a      	str	r2, [r3, #0]
 800d060:	f3bf 8f4f 	dsb	sy
 800d064:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800d068:	f001 f9dc 	bl	800e424 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d06c:	bf00      	nop
 800d06e:	3710      	adds	r7, #16
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	200015d8 	.word	0x200015d8
 800d078:	20001ab4 	.word	0x20001ab4
 800d07c:	200015dc 	.word	0x200015dc
 800d080:	e000ed04 	.word	0xe000ed04

0800d084 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b08a      	sub	sp, #40	; 0x28
 800d088:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d08a:	2300      	movs	r3, #0
 800d08c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d08e:	2300      	movs	r3, #0
 800d090:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d092:	463a      	mov	r2, r7
 800d094:	1d39      	adds	r1, r7, #4
 800d096:	f107 0308 	add.w	r3, r7, #8
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7fe ff08 	bl	800beb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d0a0:	6839      	ldr	r1, [r7, #0]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	68ba      	ldr	r2, [r7, #8]
 800d0a6:	9202      	str	r2, [sp, #8]
 800d0a8:	9301      	str	r3, [sp, #4]
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	9300      	str	r3, [sp, #0]
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	460a      	mov	r2, r1
 800d0b2:	4921      	ldr	r1, [pc, #132]	; (800d138 <vTaskStartScheduler+0xb4>)
 800d0b4:	4821      	ldr	r0, [pc, #132]	; (800d13c <vTaskStartScheduler+0xb8>)
 800d0b6:	f7ff fd09 	bl	800cacc <xTaskCreateStatic>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	4a20      	ldr	r2, [pc, #128]	; (800d140 <vTaskStartScheduler+0xbc>)
 800d0be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d0c0:	4b1f      	ldr	r3, [pc, #124]	; (800d140 <vTaskStartScheduler+0xbc>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d002      	beq.n	800d0ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	617b      	str	r3, [r7, #20]
 800d0cc:	e001      	b.n	800d0d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d102      	bne.n	800d0de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d0d8:	f000 fcfc 	bl	800dad4 <xTimerCreateTimerTask>
 800d0dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d116      	bne.n	800d112 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e8:	f383 8811 	msr	BASEPRI, r3
 800d0ec:	f3bf 8f6f 	isb	sy
 800d0f0:	f3bf 8f4f 	dsb	sy
 800d0f4:	613b      	str	r3, [r7, #16]
}
 800d0f6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d0f8:	4b12      	ldr	r3, [pc, #72]	; (800d144 <vTaskStartScheduler+0xc0>)
 800d0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d0fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d100:	4b11      	ldr	r3, [pc, #68]	; (800d148 <vTaskStartScheduler+0xc4>)
 800d102:	2201      	movs	r2, #1
 800d104:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d106:	4b11      	ldr	r3, [pc, #68]	; (800d14c <vTaskStartScheduler+0xc8>)
 800d108:	2200      	movs	r2, #0
 800d10a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d10c:	f001 f8b8 	bl	800e280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d110:	e00e      	b.n	800d130 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d118:	d10a      	bne.n	800d130 <vTaskStartScheduler+0xac>
	__asm volatile
 800d11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11e:	f383 8811 	msr	BASEPRI, r3
 800d122:	f3bf 8f6f 	isb	sy
 800d126:	f3bf 8f4f 	dsb	sy
 800d12a:	60fb      	str	r3, [r7, #12]
}
 800d12c:	bf00      	nop
 800d12e:	e7fe      	b.n	800d12e <vTaskStartScheduler+0xaa>
}
 800d130:	bf00      	nop
 800d132:	3718      	adds	r7, #24
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	08010084 	.word	0x08010084
 800d13c:	0800d769 	.word	0x0800d769
 800d140:	20001ad0 	.word	0x20001ad0
 800d144:	20001acc 	.word	0x20001acc
 800d148:	20001ab8 	.word	0x20001ab8
 800d14c:	20001ab0 	.word	0x20001ab0

0800d150 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d150:	b480      	push	{r7}
 800d152:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d154:	4b04      	ldr	r3, [pc, #16]	; (800d168 <vTaskSuspendAll+0x18>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	3301      	adds	r3, #1
 800d15a:	4a03      	ldr	r2, [pc, #12]	; (800d168 <vTaskSuspendAll+0x18>)
 800d15c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d15e:	bf00      	nop
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr
 800d168:	20001ad4 	.word	0x20001ad4

0800d16c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d172:	2300      	movs	r3, #0
 800d174:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d176:	2300      	movs	r3, #0
 800d178:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d17a:	4b42      	ldr	r3, [pc, #264]	; (800d284 <xTaskResumeAll+0x118>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d10a      	bne.n	800d198 <xTaskResumeAll+0x2c>
	__asm volatile
 800d182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d186:	f383 8811 	msr	BASEPRI, r3
 800d18a:	f3bf 8f6f 	isb	sy
 800d18e:	f3bf 8f4f 	dsb	sy
 800d192:	603b      	str	r3, [r7, #0]
}
 800d194:	bf00      	nop
 800d196:	e7fe      	b.n	800d196 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d198:	f001 f914 	bl	800e3c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d19c:	4b39      	ldr	r3, [pc, #228]	; (800d284 <xTaskResumeAll+0x118>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	3b01      	subs	r3, #1
 800d1a2:	4a38      	ldr	r2, [pc, #224]	; (800d284 <xTaskResumeAll+0x118>)
 800d1a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1a6:	4b37      	ldr	r3, [pc, #220]	; (800d284 <xTaskResumeAll+0x118>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d162      	bne.n	800d274 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d1ae:	4b36      	ldr	r3, [pc, #216]	; (800d288 <xTaskResumeAll+0x11c>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d05e      	beq.n	800d274 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d1b6:	e02f      	b.n	800d218 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1b8:	4b34      	ldr	r3, [pc, #208]	; (800d28c <xTaskResumeAll+0x120>)
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	68db      	ldr	r3, [r3, #12]
 800d1be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	3318      	adds	r3, #24
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7fe ff31 	bl	800c02c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	3304      	adds	r3, #4
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7fe ff2c 	bl	800c02c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1d8:	4b2d      	ldr	r3, [pc, #180]	; (800d290 <xTaskResumeAll+0x124>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d903      	bls.n	800d1e8 <xTaskResumeAll+0x7c>
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e4:	4a2a      	ldr	r2, [pc, #168]	; (800d290 <xTaskResumeAll+0x124>)
 800d1e6:	6013      	str	r3, [r2, #0]
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ec:	4613      	mov	r3, r2
 800d1ee:	009b      	lsls	r3, r3, #2
 800d1f0:	4413      	add	r3, r2
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	4a27      	ldr	r2, [pc, #156]	; (800d294 <xTaskResumeAll+0x128>)
 800d1f6:	441a      	add	r2, r3
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	3304      	adds	r3, #4
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	4610      	mov	r0, r2
 800d200:	f7fe feb7 	bl	800bf72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d208:	4b23      	ldr	r3, [pc, #140]	; (800d298 <xTaskResumeAll+0x12c>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d20e:	429a      	cmp	r2, r3
 800d210:	d302      	bcc.n	800d218 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d212:	4b22      	ldr	r3, [pc, #136]	; (800d29c <xTaskResumeAll+0x130>)
 800d214:	2201      	movs	r2, #1
 800d216:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d218:	4b1c      	ldr	r3, [pc, #112]	; (800d28c <xTaskResumeAll+0x120>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d1cb      	bne.n	800d1b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d001      	beq.n	800d22a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d226:	f000 fb55 	bl	800d8d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d22a:	4b1d      	ldr	r3, [pc, #116]	; (800d2a0 <xTaskResumeAll+0x134>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d010      	beq.n	800d258 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d236:	f000 f847 	bl	800d2c8 <xTaskIncrementTick>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d002      	beq.n	800d246 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d240:	4b16      	ldr	r3, [pc, #88]	; (800d29c <xTaskResumeAll+0x130>)
 800d242:	2201      	movs	r2, #1
 800d244:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	3b01      	subs	r3, #1
 800d24a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d1f1      	bne.n	800d236 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d252:	4b13      	ldr	r3, [pc, #76]	; (800d2a0 <xTaskResumeAll+0x134>)
 800d254:	2200      	movs	r2, #0
 800d256:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d258:	4b10      	ldr	r3, [pc, #64]	; (800d29c <xTaskResumeAll+0x130>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d009      	beq.n	800d274 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d260:	2301      	movs	r3, #1
 800d262:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d264:	4b0f      	ldr	r3, [pc, #60]	; (800d2a4 <xTaskResumeAll+0x138>)
 800d266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d26a:	601a      	str	r2, [r3, #0]
 800d26c:	f3bf 8f4f 	dsb	sy
 800d270:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d274:	f001 f8d6 	bl	800e424 <vPortExitCritical>

	return xAlreadyYielded;
 800d278:	68bb      	ldr	r3, [r7, #8]
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3710      	adds	r7, #16
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	20001ad4 	.word	0x20001ad4
 800d288:	20001aac 	.word	0x20001aac
 800d28c:	20001a6c 	.word	0x20001a6c
 800d290:	20001ab4 	.word	0x20001ab4
 800d294:	200015dc 	.word	0x200015dc
 800d298:	200015d8 	.word	0x200015d8
 800d29c:	20001ac0 	.word	0x20001ac0
 800d2a0:	20001abc 	.word	0x20001abc
 800d2a4:	e000ed04 	.word	0xe000ed04

0800d2a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d2ae:	4b05      	ldr	r3, [pc, #20]	; (800d2c4 <xTaskGetTickCount+0x1c>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d2b4:	687b      	ldr	r3, [r7, #4]
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	370c      	adds	r7, #12
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr
 800d2c2:	bf00      	nop
 800d2c4:	20001ab0 	.word	0x20001ab0

0800d2c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b086      	sub	sp, #24
 800d2cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2d2:	4b4f      	ldr	r3, [pc, #316]	; (800d410 <xTaskIncrementTick+0x148>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	f040 808f 	bne.w	800d3fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d2dc:	4b4d      	ldr	r3, [pc, #308]	; (800d414 <xTaskIncrementTick+0x14c>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d2e4:	4a4b      	ldr	r2, [pc, #300]	; (800d414 <xTaskIncrementTick+0x14c>)
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d120      	bne.n	800d332 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d2f0:	4b49      	ldr	r3, [pc, #292]	; (800d418 <xTaskIncrementTick+0x150>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d00a      	beq.n	800d310 <xTaskIncrementTick+0x48>
	__asm volatile
 800d2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fe:	f383 8811 	msr	BASEPRI, r3
 800d302:	f3bf 8f6f 	isb	sy
 800d306:	f3bf 8f4f 	dsb	sy
 800d30a:	603b      	str	r3, [r7, #0]
}
 800d30c:	bf00      	nop
 800d30e:	e7fe      	b.n	800d30e <xTaskIncrementTick+0x46>
 800d310:	4b41      	ldr	r3, [pc, #260]	; (800d418 <xTaskIncrementTick+0x150>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	60fb      	str	r3, [r7, #12]
 800d316:	4b41      	ldr	r3, [pc, #260]	; (800d41c <xTaskIncrementTick+0x154>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	4a3f      	ldr	r2, [pc, #252]	; (800d418 <xTaskIncrementTick+0x150>)
 800d31c:	6013      	str	r3, [r2, #0]
 800d31e:	4a3f      	ldr	r2, [pc, #252]	; (800d41c <xTaskIncrementTick+0x154>)
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	6013      	str	r3, [r2, #0]
 800d324:	4b3e      	ldr	r3, [pc, #248]	; (800d420 <xTaskIncrementTick+0x158>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	3301      	adds	r3, #1
 800d32a:	4a3d      	ldr	r2, [pc, #244]	; (800d420 <xTaskIncrementTick+0x158>)
 800d32c:	6013      	str	r3, [r2, #0]
 800d32e:	f000 fad1 	bl	800d8d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d332:	4b3c      	ldr	r3, [pc, #240]	; (800d424 <xTaskIncrementTick+0x15c>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	693a      	ldr	r2, [r7, #16]
 800d338:	429a      	cmp	r2, r3
 800d33a:	d349      	bcc.n	800d3d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d33c:	4b36      	ldr	r3, [pc, #216]	; (800d418 <xTaskIncrementTick+0x150>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d104      	bne.n	800d350 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d346:	4b37      	ldr	r3, [pc, #220]	; (800d424 <xTaskIncrementTick+0x15c>)
 800d348:	f04f 32ff 	mov.w	r2, #4294967295
 800d34c:	601a      	str	r2, [r3, #0]
					break;
 800d34e:	e03f      	b.n	800d3d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d350:	4b31      	ldr	r3, [pc, #196]	; (800d418 <xTaskIncrementTick+0x150>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	68db      	ldr	r3, [r3, #12]
 800d356:	68db      	ldr	r3, [r3, #12]
 800d358:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d360:	693a      	ldr	r2, [r7, #16]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	429a      	cmp	r2, r3
 800d366:	d203      	bcs.n	800d370 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d368:	4a2e      	ldr	r2, [pc, #184]	; (800d424 <xTaskIncrementTick+0x15c>)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d36e:	e02f      	b.n	800d3d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	3304      	adds	r3, #4
 800d374:	4618      	mov	r0, r3
 800d376:	f7fe fe59 	bl	800c02c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d004      	beq.n	800d38c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	3318      	adds	r3, #24
 800d386:	4618      	mov	r0, r3
 800d388:	f7fe fe50 	bl	800c02c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d390:	4b25      	ldr	r3, [pc, #148]	; (800d428 <xTaskIncrementTick+0x160>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	429a      	cmp	r2, r3
 800d396:	d903      	bls.n	800d3a0 <xTaskIncrementTick+0xd8>
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d39c:	4a22      	ldr	r2, [pc, #136]	; (800d428 <xTaskIncrementTick+0x160>)
 800d39e:	6013      	str	r3, [r2, #0]
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3a4:	4613      	mov	r3, r2
 800d3a6:	009b      	lsls	r3, r3, #2
 800d3a8:	4413      	add	r3, r2
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	4a1f      	ldr	r2, [pc, #124]	; (800d42c <xTaskIncrementTick+0x164>)
 800d3ae:	441a      	add	r2, r3
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	3304      	adds	r3, #4
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	4610      	mov	r0, r2
 800d3b8:	f7fe fddb 	bl	800bf72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c0:	4b1b      	ldr	r3, [pc, #108]	; (800d430 <xTaskIncrementTick+0x168>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d3b8      	bcc.n	800d33c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d3ce:	e7b5      	b.n	800d33c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d3d0:	4b17      	ldr	r3, [pc, #92]	; (800d430 <xTaskIncrementTick+0x168>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3d6:	4915      	ldr	r1, [pc, #84]	; (800d42c <xTaskIncrementTick+0x164>)
 800d3d8:	4613      	mov	r3, r2
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	4413      	add	r3, r2
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	440b      	add	r3, r1
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	d901      	bls.n	800d3ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d3ec:	4b11      	ldr	r3, [pc, #68]	; (800d434 <xTaskIncrementTick+0x16c>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d007      	beq.n	800d404 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	617b      	str	r3, [r7, #20]
 800d3f8:	e004      	b.n	800d404 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d3fa:	4b0f      	ldr	r3, [pc, #60]	; (800d438 <xTaskIncrementTick+0x170>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	3301      	adds	r3, #1
 800d400:	4a0d      	ldr	r2, [pc, #52]	; (800d438 <xTaskIncrementTick+0x170>)
 800d402:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d404:	697b      	ldr	r3, [r7, #20]
}
 800d406:	4618      	mov	r0, r3
 800d408:	3718      	adds	r7, #24
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	20001ad4 	.word	0x20001ad4
 800d414:	20001ab0 	.word	0x20001ab0
 800d418:	20001a64 	.word	0x20001a64
 800d41c:	20001a68 	.word	0x20001a68
 800d420:	20001ac4 	.word	0x20001ac4
 800d424:	20001acc 	.word	0x20001acc
 800d428:	20001ab4 	.word	0x20001ab4
 800d42c:	200015dc 	.word	0x200015dc
 800d430:	200015d8 	.word	0x200015d8
 800d434:	20001ac0 	.word	0x20001ac0
 800d438:	20001abc 	.word	0x20001abc

0800d43c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d43c:	b480      	push	{r7}
 800d43e:	b085      	sub	sp, #20
 800d440:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d442:	4b28      	ldr	r3, [pc, #160]	; (800d4e4 <vTaskSwitchContext+0xa8>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d003      	beq.n	800d452 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d44a:	4b27      	ldr	r3, [pc, #156]	; (800d4e8 <vTaskSwitchContext+0xac>)
 800d44c:	2201      	movs	r2, #1
 800d44e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d450:	e041      	b.n	800d4d6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d452:	4b25      	ldr	r3, [pc, #148]	; (800d4e8 <vTaskSwitchContext+0xac>)
 800d454:	2200      	movs	r2, #0
 800d456:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d458:	4b24      	ldr	r3, [pc, #144]	; (800d4ec <vTaskSwitchContext+0xb0>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	60fb      	str	r3, [r7, #12]
 800d45e:	e010      	b.n	800d482 <vTaskSwitchContext+0x46>
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d10a      	bne.n	800d47c <vTaskSwitchContext+0x40>
	__asm volatile
 800d466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46a:	f383 8811 	msr	BASEPRI, r3
 800d46e:	f3bf 8f6f 	isb	sy
 800d472:	f3bf 8f4f 	dsb	sy
 800d476:	607b      	str	r3, [r7, #4]
}
 800d478:	bf00      	nop
 800d47a:	e7fe      	b.n	800d47a <vTaskSwitchContext+0x3e>
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	3b01      	subs	r3, #1
 800d480:	60fb      	str	r3, [r7, #12]
 800d482:	491b      	ldr	r1, [pc, #108]	; (800d4f0 <vTaskSwitchContext+0xb4>)
 800d484:	68fa      	ldr	r2, [r7, #12]
 800d486:	4613      	mov	r3, r2
 800d488:	009b      	lsls	r3, r3, #2
 800d48a:	4413      	add	r3, r2
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	440b      	add	r3, r1
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d0e4      	beq.n	800d460 <vTaskSwitchContext+0x24>
 800d496:	68fa      	ldr	r2, [r7, #12]
 800d498:	4613      	mov	r3, r2
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	4413      	add	r3, r2
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	4a13      	ldr	r2, [pc, #76]	; (800d4f0 <vTaskSwitchContext+0xb4>)
 800d4a2:	4413      	add	r3, r2
 800d4a4:	60bb      	str	r3, [r7, #8]
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	685b      	ldr	r3, [r3, #4]
 800d4aa:	685a      	ldr	r2, [r3, #4]
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	605a      	str	r2, [r3, #4]
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	685a      	ldr	r2, [r3, #4]
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	3308      	adds	r3, #8
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d104      	bne.n	800d4c6 <vTaskSwitchContext+0x8a>
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	685a      	ldr	r2, [r3, #4]
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	605a      	str	r2, [r3, #4]
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	68db      	ldr	r3, [r3, #12]
 800d4cc:	4a09      	ldr	r2, [pc, #36]	; (800d4f4 <vTaskSwitchContext+0xb8>)
 800d4ce:	6013      	str	r3, [r2, #0]
 800d4d0:	4a06      	ldr	r2, [pc, #24]	; (800d4ec <vTaskSwitchContext+0xb0>)
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	6013      	str	r3, [r2, #0]
}
 800d4d6:	bf00      	nop
 800d4d8:	3714      	adds	r7, #20
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr
 800d4e2:	bf00      	nop
 800d4e4:	20001ad4 	.word	0x20001ad4
 800d4e8:	20001ac0 	.word	0x20001ac0
 800d4ec:	20001ab4 	.word	0x20001ab4
 800d4f0:	200015dc 	.word	0x200015dc
 800d4f4:	200015d8 	.word	0x200015d8

0800d4f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d10a      	bne.n	800d51e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50c:	f383 8811 	msr	BASEPRI, r3
 800d510:	f3bf 8f6f 	isb	sy
 800d514:	f3bf 8f4f 	dsb	sy
 800d518:	60fb      	str	r3, [r7, #12]
}
 800d51a:	bf00      	nop
 800d51c:	e7fe      	b.n	800d51c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d51e:	4b07      	ldr	r3, [pc, #28]	; (800d53c <vTaskPlaceOnEventList+0x44>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	3318      	adds	r3, #24
 800d524:	4619      	mov	r1, r3
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f7fe fd47 	bl	800bfba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d52c:	2101      	movs	r1, #1
 800d52e:	6838      	ldr	r0, [r7, #0]
 800d530:	f000 fa7c 	bl	800da2c <prvAddCurrentTaskToDelayedList>
}
 800d534:	bf00      	nop
 800d536:	3710      	adds	r7, #16
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	200015d8 	.word	0x200015d8

0800d540 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d540:	b580      	push	{r7, lr}
 800d542:	b086      	sub	sp, #24
 800d544:	af00      	add	r7, sp, #0
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d10a      	bne.n	800d568 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d556:	f383 8811 	msr	BASEPRI, r3
 800d55a:	f3bf 8f6f 	isb	sy
 800d55e:	f3bf 8f4f 	dsb	sy
 800d562:	617b      	str	r3, [r7, #20]
}
 800d564:	bf00      	nop
 800d566:	e7fe      	b.n	800d566 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d568:	4b0a      	ldr	r3, [pc, #40]	; (800d594 <vTaskPlaceOnEventListRestricted+0x54>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	3318      	adds	r3, #24
 800d56e:	4619      	mov	r1, r3
 800d570:	68f8      	ldr	r0, [r7, #12]
 800d572:	f7fe fcfe 	bl	800bf72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d002      	beq.n	800d582 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d57c:	f04f 33ff 	mov.w	r3, #4294967295
 800d580:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d582:	6879      	ldr	r1, [r7, #4]
 800d584:	68b8      	ldr	r0, [r7, #8]
 800d586:	f000 fa51 	bl	800da2c <prvAddCurrentTaskToDelayedList>
	}
 800d58a:	bf00      	nop
 800d58c:	3718      	adds	r7, #24
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	200015d8 	.word	0x200015d8

0800d598 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b086      	sub	sp, #24
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d10a      	bne.n	800d5c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b2:	f383 8811 	msr	BASEPRI, r3
 800d5b6:	f3bf 8f6f 	isb	sy
 800d5ba:	f3bf 8f4f 	dsb	sy
 800d5be:	60fb      	str	r3, [r7, #12]
}
 800d5c0:	bf00      	nop
 800d5c2:	e7fe      	b.n	800d5c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	3318      	adds	r3, #24
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f7fe fd2f 	bl	800c02c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5ce:	4b1e      	ldr	r3, [pc, #120]	; (800d648 <xTaskRemoveFromEventList+0xb0>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d11d      	bne.n	800d612 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	3304      	adds	r3, #4
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7fe fd26 	bl	800c02c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5e4:	4b19      	ldr	r3, [pc, #100]	; (800d64c <xTaskRemoveFromEventList+0xb4>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d903      	bls.n	800d5f4 <xTaskRemoveFromEventList+0x5c>
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f0:	4a16      	ldr	r2, [pc, #88]	; (800d64c <xTaskRemoveFromEventList+0xb4>)
 800d5f2:	6013      	str	r3, [r2, #0]
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5f8:	4613      	mov	r3, r2
 800d5fa:	009b      	lsls	r3, r3, #2
 800d5fc:	4413      	add	r3, r2
 800d5fe:	009b      	lsls	r3, r3, #2
 800d600:	4a13      	ldr	r2, [pc, #76]	; (800d650 <xTaskRemoveFromEventList+0xb8>)
 800d602:	441a      	add	r2, r3
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	3304      	adds	r3, #4
 800d608:	4619      	mov	r1, r3
 800d60a:	4610      	mov	r0, r2
 800d60c:	f7fe fcb1 	bl	800bf72 <vListInsertEnd>
 800d610:	e005      	b.n	800d61e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	3318      	adds	r3, #24
 800d616:	4619      	mov	r1, r3
 800d618:	480e      	ldr	r0, [pc, #56]	; (800d654 <xTaskRemoveFromEventList+0xbc>)
 800d61a:	f7fe fcaa 	bl	800bf72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d622:	4b0d      	ldr	r3, [pc, #52]	; (800d658 <xTaskRemoveFromEventList+0xc0>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d628:	429a      	cmp	r2, r3
 800d62a:	d905      	bls.n	800d638 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d62c:	2301      	movs	r3, #1
 800d62e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d630:	4b0a      	ldr	r3, [pc, #40]	; (800d65c <xTaskRemoveFromEventList+0xc4>)
 800d632:	2201      	movs	r2, #1
 800d634:	601a      	str	r2, [r3, #0]
 800d636:	e001      	b.n	800d63c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d638:	2300      	movs	r3, #0
 800d63a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d63c:	697b      	ldr	r3, [r7, #20]
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3718      	adds	r7, #24
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	20001ad4 	.word	0x20001ad4
 800d64c:	20001ab4 	.word	0x20001ab4
 800d650:	200015dc 	.word	0x200015dc
 800d654:	20001a6c 	.word	0x20001a6c
 800d658:	200015d8 	.word	0x200015d8
 800d65c:	20001ac0 	.word	0x20001ac0

0800d660 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d668:	4b06      	ldr	r3, [pc, #24]	; (800d684 <vTaskInternalSetTimeOutState+0x24>)
 800d66a:	681a      	ldr	r2, [r3, #0]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d670:	4b05      	ldr	r3, [pc, #20]	; (800d688 <vTaskInternalSetTimeOutState+0x28>)
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	605a      	str	r2, [r3, #4]
}
 800d678:	bf00      	nop
 800d67a:	370c      	adds	r7, #12
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr
 800d684:	20001ac4 	.word	0x20001ac4
 800d688:	20001ab0 	.word	0x20001ab0

0800d68c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b088      	sub	sp, #32
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d10a      	bne.n	800d6b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a0:	f383 8811 	msr	BASEPRI, r3
 800d6a4:	f3bf 8f6f 	isb	sy
 800d6a8:	f3bf 8f4f 	dsb	sy
 800d6ac:	613b      	str	r3, [r7, #16]
}
 800d6ae:	bf00      	nop
 800d6b0:	e7fe      	b.n	800d6b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d10a      	bne.n	800d6ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6bc:	f383 8811 	msr	BASEPRI, r3
 800d6c0:	f3bf 8f6f 	isb	sy
 800d6c4:	f3bf 8f4f 	dsb	sy
 800d6c8:	60fb      	str	r3, [r7, #12]
}
 800d6ca:	bf00      	nop
 800d6cc:	e7fe      	b.n	800d6cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d6ce:	f000 fe79 	bl	800e3c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d6d2:	4b1d      	ldr	r3, [pc, #116]	; (800d748 <xTaskCheckForTimeOut+0xbc>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	69ba      	ldr	r2, [r7, #24]
 800d6de:	1ad3      	subs	r3, r2, r3
 800d6e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ea:	d102      	bne.n	800d6f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	61fb      	str	r3, [r7, #28]
 800d6f0:	e023      	b.n	800d73a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	4b15      	ldr	r3, [pc, #84]	; (800d74c <xTaskCheckForTimeOut+0xc0>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d007      	beq.n	800d70e <xTaskCheckForTimeOut+0x82>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	69ba      	ldr	r2, [r7, #24]
 800d704:	429a      	cmp	r2, r3
 800d706:	d302      	bcc.n	800d70e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d708:	2301      	movs	r3, #1
 800d70a:	61fb      	str	r3, [r7, #28]
 800d70c:	e015      	b.n	800d73a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	697a      	ldr	r2, [r7, #20]
 800d714:	429a      	cmp	r2, r3
 800d716:	d20b      	bcs.n	800d730 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	681a      	ldr	r2, [r3, #0]
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	1ad2      	subs	r2, r2, r3
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f7ff ff9b 	bl	800d660 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d72a:	2300      	movs	r3, #0
 800d72c:	61fb      	str	r3, [r7, #28]
 800d72e:	e004      	b.n	800d73a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	2200      	movs	r2, #0
 800d734:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d736:	2301      	movs	r3, #1
 800d738:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d73a:	f000 fe73 	bl	800e424 <vPortExitCritical>

	return xReturn;
 800d73e:	69fb      	ldr	r3, [r7, #28]
}
 800d740:	4618      	mov	r0, r3
 800d742:	3720      	adds	r7, #32
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	20001ab0 	.word	0x20001ab0
 800d74c:	20001ac4 	.word	0x20001ac4

0800d750 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d750:	b480      	push	{r7}
 800d752:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d754:	4b03      	ldr	r3, [pc, #12]	; (800d764 <vTaskMissedYield+0x14>)
 800d756:	2201      	movs	r2, #1
 800d758:	601a      	str	r2, [r3, #0]
}
 800d75a:	bf00      	nop
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr
 800d764:	20001ac0 	.word	0x20001ac0

0800d768 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d770:	f000 f852 	bl	800d818 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d774:	4b06      	ldr	r3, [pc, #24]	; (800d790 <prvIdleTask+0x28>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d9f9      	bls.n	800d770 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d77c:	4b05      	ldr	r3, [pc, #20]	; (800d794 <prvIdleTask+0x2c>)
 800d77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d782:	601a      	str	r2, [r3, #0]
 800d784:	f3bf 8f4f 	dsb	sy
 800d788:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d78c:	e7f0      	b.n	800d770 <prvIdleTask+0x8>
 800d78e:	bf00      	nop
 800d790:	200015dc 	.word	0x200015dc
 800d794:	e000ed04 	.word	0xe000ed04

0800d798 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d79e:	2300      	movs	r3, #0
 800d7a0:	607b      	str	r3, [r7, #4]
 800d7a2:	e00c      	b.n	800d7be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	4613      	mov	r3, r2
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	4413      	add	r3, r2
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	4a12      	ldr	r2, [pc, #72]	; (800d7f8 <prvInitialiseTaskLists+0x60>)
 800d7b0:	4413      	add	r3, r2
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7fe fbb0 	bl	800bf18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	607b      	str	r3, [r7, #4]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2b37      	cmp	r3, #55	; 0x37
 800d7c2:	d9ef      	bls.n	800d7a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d7c4:	480d      	ldr	r0, [pc, #52]	; (800d7fc <prvInitialiseTaskLists+0x64>)
 800d7c6:	f7fe fba7 	bl	800bf18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d7ca:	480d      	ldr	r0, [pc, #52]	; (800d800 <prvInitialiseTaskLists+0x68>)
 800d7cc:	f7fe fba4 	bl	800bf18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d7d0:	480c      	ldr	r0, [pc, #48]	; (800d804 <prvInitialiseTaskLists+0x6c>)
 800d7d2:	f7fe fba1 	bl	800bf18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d7d6:	480c      	ldr	r0, [pc, #48]	; (800d808 <prvInitialiseTaskLists+0x70>)
 800d7d8:	f7fe fb9e 	bl	800bf18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d7dc:	480b      	ldr	r0, [pc, #44]	; (800d80c <prvInitialiseTaskLists+0x74>)
 800d7de:	f7fe fb9b 	bl	800bf18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d7e2:	4b0b      	ldr	r3, [pc, #44]	; (800d810 <prvInitialiseTaskLists+0x78>)
 800d7e4:	4a05      	ldr	r2, [pc, #20]	; (800d7fc <prvInitialiseTaskLists+0x64>)
 800d7e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d7e8:	4b0a      	ldr	r3, [pc, #40]	; (800d814 <prvInitialiseTaskLists+0x7c>)
 800d7ea:	4a05      	ldr	r2, [pc, #20]	; (800d800 <prvInitialiseTaskLists+0x68>)
 800d7ec:	601a      	str	r2, [r3, #0]
}
 800d7ee:	bf00      	nop
 800d7f0:	3708      	adds	r7, #8
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}
 800d7f6:	bf00      	nop
 800d7f8:	200015dc 	.word	0x200015dc
 800d7fc:	20001a3c 	.word	0x20001a3c
 800d800:	20001a50 	.word	0x20001a50
 800d804:	20001a6c 	.word	0x20001a6c
 800d808:	20001a80 	.word	0x20001a80
 800d80c:	20001a98 	.word	0x20001a98
 800d810:	20001a64 	.word	0x20001a64
 800d814:	20001a68 	.word	0x20001a68

0800d818 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d81e:	e019      	b.n	800d854 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d820:	f000 fdd0 	bl	800e3c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d824:	4b10      	ldr	r3, [pc, #64]	; (800d868 <prvCheckTasksWaitingTermination+0x50>)
 800d826:	68db      	ldr	r3, [r3, #12]
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	3304      	adds	r3, #4
 800d830:	4618      	mov	r0, r3
 800d832:	f7fe fbfb 	bl	800c02c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d836:	4b0d      	ldr	r3, [pc, #52]	; (800d86c <prvCheckTasksWaitingTermination+0x54>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	3b01      	subs	r3, #1
 800d83c:	4a0b      	ldr	r2, [pc, #44]	; (800d86c <prvCheckTasksWaitingTermination+0x54>)
 800d83e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d840:	4b0b      	ldr	r3, [pc, #44]	; (800d870 <prvCheckTasksWaitingTermination+0x58>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	3b01      	subs	r3, #1
 800d846:	4a0a      	ldr	r2, [pc, #40]	; (800d870 <prvCheckTasksWaitingTermination+0x58>)
 800d848:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d84a:	f000 fdeb 	bl	800e424 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f000 f810 	bl	800d874 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d854:	4b06      	ldr	r3, [pc, #24]	; (800d870 <prvCheckTasksWaitingTermination+0x58>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d1e1      	bne.n	800d820 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d85c:	bf00      	nop
 800d85e:	bf00      	nop
 800d860:	3708      	adds	r7, #8
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
 800d866:	bf00      	nop
 800d868:	20001a80 	.word	0x20001a80
 800d86c:	20001aac 	.word	0x20001aac
 800d870:	20001a94 	.word	0x20001a94

0800d874 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d882:	2b00      	cmp	r3, #0
 800d884:	d108      	bne.n	800d898 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d88a:	4618      	mov	r0, r3
 800d88c:	f000 ff88 	bl	800e7a0 <vPortFree>
				vPortFree( pxTCB );
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 ff85 	bl	800e7a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d896:	e018      	b.n	800d8ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d89e:	2b01      	cmp	r3, #1
 800d8a0:	d103      	bne.n	800d8aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f000 ff7c 	bl	800e7a0 <vPortFree>
	}
 800d8a8:	e00f      	b.n	800d8ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d8b0:	2b02      	cmp	r3, #2
 800d8b2:	d00a      	beq.n	800d8ca <prvDeleteTCB+0x56>
	__asm volatile
 800d8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b8:	f383 8811 	msr	BASEPRI, r3
 800d8bc:	f3bf 8f6f 	isb	sy
 800d8c0:	f3bf 8f4f 	dsb	sy
 800d8c4:	60fb      	str	r3, [r7, #12]
}
 800d8c6:	bf00      	nop
 800d8c8:	e7fe      	b.n	800d8c8 <prvDeleteTCB+0x54>
	}
 800d8ca:	bf00      	nop
 800d8cc:	3710      	adds	r7, #16
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
	...

0800d8d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8da:	4b0c      	ldr	r3, [pc, #48]	; (800d90c <prvResetNextTaskUnblockTime+0x38>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d104      	bne.n	800d8ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d8e4:	4b0a      	ldr	r3, [pc, #40]	; (800d910 <prvResetNextTaskUnblockTime+0x3c>)
 800d8e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d8ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d8ec:	e008      	b.n	800d900 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8ee:	4b07      	ldr	r3, [pc, #28]	; (800d90c <prvResetNextTaskUnblockTime+0x38>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	68db      	ldr	r3, [r3, #12]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	4a04      	ldr	r2, [pc, #16]	; (800d910 <prvResetNextTaskUnblockTime+0x3c>)
 800d8fe:	6013      	str	r3, [r2, #0]
}
 800d900:	bf00      	nop
 800d902:	370c      	adds	r7, #12
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr
 800d90c:	20001a64 	.word	0x20001a64
 800d910:	20001acc 	.word	0x20001acc

0800d914 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d914:	b480      	push	{r7}
 800d916:	b083      	sub	sp, #12
 800d918:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d91a:	4b0b      	ldr	r3, [pc, #44]	; (800d948 <xTaskGetSchedulerState+0x34>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d102      	bne.n	800d928 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d922:	2301      	movs	r3, #1
 800d924:	607b      	str	r3, [r7, #4]
 800d926:	e008      	b.n	800d93a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d928:	4b08      	ldr	r3, [pc, #32]	; (800d94c <xTaskGetSchedulerState+0x38>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d102      	bne.n	800d936 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d930:	2302      	movs	r3, #2
 800d932:	607b      	str	r3, [r7, #4]
 800d934:	e001      	b.n	800d93a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d936:	2300      	movs	r3, #0
 800d938:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d93a:	687b      	ldr	r3, [r7, #4]
	}
 800d93c:	4618      	mov	r0, r3
 800d93e:	370c      	adds	r7, #12
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr
 800d948:	20001ab8 	.word	0x20001ab8
 800d94c:	20001ad4 	.word	0x20001ad4

0800d950 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d950:	b580      	push	{r7, lr}
 800d952:	b086      	sub	sp, #24
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d95c:	2300      	movs	r3, #0
 800d95e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d056      	beq.n	800da14 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d966:	4b2e      	ldr	r3, [pc, #184]	; (800da20 <xTaskPriorityDisinherit+0xd0>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	693a      	ldr	r2, [r7, #16]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d00a      	beq.n	800d986 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d974:	f383 8811 	msr	BASEPRI, r3
 800d978:	f3bf 8f6f 	isb	sy
 800d97c:	f3bf 8f4f 	dsb	sy
 800d980:	60fb      	str	r3, [r7, #12]
}
 800d982:	bf00      	nop
 800d984:	e7fe      	b.n	800d984 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d10a      	bne.n	800d9a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d992:	f383 8811 	msr	BASEPRI, r3
 800d996:	f3bf 8f6f 	isb	sy
 800d99a:	f3bf 8f4f 	dsb	sy
 800d99e:	60bb      	str	r3, [r7, #8]
}
 800d9a0:	bf00      	nop
 800d9a2:	e7fe      	b.n	800d9a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9a8:	1e5a      	subs	r2, r3, #1
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9b2:	693b      	ldr	r3, [r7, #16]
 800d9b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d02c      	beq.n	800da14 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d128      	bne.n	800da14 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	3304      	adds	r3, #4
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7fe fb30 	bl	800c02c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9e4:	4b0f      	ldr	r3, [pc, #60]	; (800da24 <xTaskPriorityDisinherit+0xd4>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d903      	bls.n	800d9f4 <xTaskPriorityDisinherit+0xa4>
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f0:	4a0c      	ldr	r2, [pc, #48]	; (800da24 <xTaskPriorityDisinherit+0xd4>)
 800d9f2:	6013      	str	r3, [r2, #0]
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9f8:	4613      	mov	r3, r2
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	4413      	add	r3, r2
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	4a09      	ldr	r2, [pc, #36]	; (800da28 <xTaskPriorityDisinherit+0xd8>)
 800da02:	441a      	add	r2, r3
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	3304      	adds	r3, #4
 800da08:	4619      	mov	r1, r3
 800da0a:	4610      	mov	r0, r2
 800da0c:	f7fe fab1 	bl	800bf72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800da10:	2301      	movs	r3, #1
 800da12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da14:	697b      	ldr	r3, [r7, #20]
	}
 800da16:	4618      	mov	r0, r3
 800da18:	3718      	adds	r7, #24
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	200015d8 	.word	0x200015d8
 800da24:	20001ab4 	.word	0x20001ab4
 800da28:	200015dc 	.word	0x200015dc

0800da2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800da36:	4b21      	ldr	r3, [pc, #132]	; (800dabc <prvAddCurrentTaskToDelayedList+0x90>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da3c:	4b20      	ldr	r3, [pc, #128]	; (800dac0 <prvAddCurrentTaskToDelayedList+0x94>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	3304      	adds	r3, #4
 800da42:	4618      	mov	r0, r3
 800da44:	f7fe faf2 	bl	800c02c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da4e:	d10a      	bne.n	800da66 <prvAddCurrentTaskToDelayedList+0x3a>
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d007      	beq.n	800da66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da56:	4b1a      	ldr	r3, [pc, #104]	; (800dac0 <prvAddCurrentTaskToDelayedList+0x94>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	3304      	adds	r3, #4
 800da5c:	4619      	mov	r1, r3
 800da5e:	4819      	ldr	r0, [pc, #100]	; (800dac4 <prvAddCurrentTaskToDelayedList+0x98>)
 800da60:	f7fe fa87 	bl	800bf72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800da64:	e026      	b.n	800dab4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	4413      	add	r3, r2
 800da6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800da6e:	4b14      	ldr	r3, [pc, #80]	; (800dac0 <prvAddCurrentTaskToDelayedList+0x94>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	68ba      	ldr	r2, [r7, #8]
 800da74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800da76:	68ba      	ldr	r2, [r7, #8]
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d209      	bcs.n	800da92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da7e:	4b12      	ldr	r3, [pc, #72]	; (800dac8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	4b0f      	ldr	r3, [pc, #60]	; (800dac0 <prvAddCurrentTaskToDelayedList+0x94>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	3304      	adds	r3, #4
 800da88:	4619      	mov	r1, r3
 800da8a:	4610      	mov	r0, r2
 800da8c:	f7fe fa95 	bl	800bfba <vListInsert>
}
 800da90:	e010      	b.n	800dab4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da92:	4b0e      	ldr	r3, [pc, #56]	; (800dacc <prvAddCurrentTaskToDelayedList+0xa0>)
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	4b0a      	ldr	r3, [pc, #40]	; (800dac0 <prvAddCurrentTaskToDelayedList+0x94>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	3304      	adds	r3, #4
 800da9c:	4619      	mov	r1, r3
 800da9e:	4610      	mov	r0, r2
 800daa0:	f7fe fa8b 	bl	800bfba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800daa4:	4b0a      	ldr	r3, [pc, #40]	; (800dad0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	68ba      	ldr	r2, [r7, #8]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d202      	bcs.n	800dab4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800daae:	4a08      	ldr	r2, [pc, #32]	; (800dad0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	6013      	str	r3, [r2, #0]
}
 800dab4:	bf00      	nop
 800dab6:	3710      	adds	r7, #16
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	20001ab0 	.word	0x20001ab0
 800dac0:	200015d8 	.word	0x200015d8
 800dac4:	20001a98 	.word	0x20001a98
 800dac8:	20001a68 	.word	0x20001a68
 800dacc:	20001a64 	.word	0x20001a64
 800dad0:	20001acc 	.word	0x20001acc

0800dad4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b08a      	sub	sp, #40	; 0x28
 800dad8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dada:	2300      	movs	r3, #0
 800dadc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dade:	f000 fb07 	bl	800e0f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dae2:	4b1c      	ldr	r3, [pc, #112]	; (800db54 <xTimerCreateTimerTask+0x80>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d021      	beq.n	800db2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800daea:	2300      	movs	r3, #0
 800daec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800daee:	2300      	movs	r3, #0
 800daf0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800daf2:	1d3a      	adds	r2, r7, #4
 800daf4:	f107 0108 	add.w	r1, r7, #8
 800daf8:	f107 030c 	add.w	r3, r7, #12
 800dafc:	4618      	mov	r0, r3
 800dafe:	f7fe f9f1 	bl	800bee4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800db02:	6879      	ldr	r1, [r7, #4]
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	68fa      	ldr	r2, [r7, #12]
 800db08:	9202      	str	r2, [sp, #8]
 800db0a:	9301      	str	r3, [sp, #4]
 800db0c:	2302      	movs	r3, #2
 800db0e:	9300      	str	r3, [sp, #0]
 800db10:	2300      	movs	r3, #0
 800db12:	460a      	mov	r2, r1
 800db14:	4910      	ldr	r1, [pc, #64]	; (800db58 <xTimerCreateTimerTask+0x84>)
 800db16:	4811      	ldr	r0, [pc, #68]	; (800db5c <xTimerCreateTimerTask+0x88>)
 800db18:	f7fe ffd8 	bl	800cacc <xTaskCreateStatic>
 800db1c:	4603      	mov	r3, r0
 800db1e:	4a10      	ldr	r2, [pc, #64]	; (800db60 <xTimerCreateTimerTask+0x8c>)
 800db20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800db22:	4b0f      	ldr	r3, [pc, #60]	; (800db60 <xTimerCreateTimerTask+0x8c>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d001      	beq.n	800db2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800db2a:	2301      	movs	r3, #1
 800db2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d10a      	bne.n	800db4a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800db34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db38:	f383 8811 	msr	BASEPRI, r3
 800db3c:	f3bf 8f6f 	isb	sy
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	613b      	str	r3, [r7, #16]
}
 800db46:	bf00      	nop
 800db48:	e7fe      	b.n	800db48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800db4a:	697b      	ldr	r3, [r7, #20]
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3718      	adds	r7, #24
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}
 800db54:	20001b08 	.word	0x20001b08
 800db58:	0801008c 	.word	0x0801008c
 800db5c:	0800dc99 	.word	0x0800dc99
 800db60:	20001b0c 	.word	0x20001b0c

0800db64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b08a      	sub	sp, #40	; 0x28
 800db68:	af00      	add	r7, sp, #0
 800db6a:	60f8      	str	r0, [r7, #12]
 800db6c:	60b9      	str	r1, [r7, #8]
 800db6e:	607a      	str	r2, [r7, #4]
 800db70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800db72:	2300      	movs	r3, #0
 800db74:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d10a      	bne.n	800db92 <xTimerGenericCommand+0x2e>
	__asm volatile
 800db7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db80:	f383 8811 	msr	BASEPRI, r3
 800db84:	f3bf 8f6f 	isb	sy
 800db88:	f3bf 8f4f 	dsb	sy
 800db8c:	623b      	str	r3, [r7, #32]
}
 800db8e:	bf00      	nop
 800db90:	e7fe      	b.n	800db90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800db92:	4b1a      	ldr	r3, [pc, #104]	; (800dbfc <xTimerGenericCommand+0x98>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d02a      	beq.n	800dbf0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	2b05      	cmp	r3, #5
 800dbaa:	dc18      	bgt.n	800dbde <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dbac:	f7ff feb2 	bl	800d914 <xTaskGetSchedulerState>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	2b02      	cmp	r3, #2
 800dbb4:	d109      	bne.n	800dbca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dbb6:	4b11      	ldr	r3, [pc, #68]	; (800dbfc <xTimerGenericCommand+0x98>)
 800dbb8:	6818      	ldr	r0, [r3, #0]
 800dbba:	f107 0110 	add.w	r1, r7, #16
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbc2:	f7fe fb9b 	bl	800c2fc <xQueueGenericSend>
 800dbc6:	6278      	str	r0, [r7, #36]	; 0x24
 800dbc8:	e012      	b.n	800dbf0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dbca:	4b0c      	ldr	r3, [pc, #48]	; (800dbfc <xTimerGenericCommand+0x98>)
 800dbcc:	6818      	ldr	r0, [r3, #0]
 800dbce:	f107 0110 	add.w	r1, r7, #16
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	f7fe fb91 	bl	800c2fc <xQueueGenericSend>
 800dbda:	6278      	str	r0, [r7, #36]	; 0x24
 800dbdc:	e008      	b.n	800dbf0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dbde:	4b07      	ldr	r3, [pc, #28]	; (800dbfc <xTimerGenericCommand+0x98>)
 800dbe0:	6818      	ldr	r0, [r3, #0]
 800dbe2:	f107 0110 	add.w	r1, r7, #16
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	683a      	ldr	r2, [r7, #0]
 800dbea:	f7fe fc85 	bl	800c4f8 <xQueueGenericSendFromISR>
 800dbee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3728      	adds	r7, #40	; 0x28
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	20001b08 	.word	0x20001b08

0800dc00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b088      	sub	sp, #32
 800dc04:	af02      	add	r7, sp, #8
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc0a:	4b22      	ldr	r3, [pc, #136]	; (800dc94 <prvProcessExpiredTimer+0x94>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	3304      	adds	r3, #4
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7fe fa07 	bl	800c02c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc24:	f003 0304 	and.w	r3, r3, #4
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d022      	beq.n	800dc72 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	699a      	ldr	r2, [r3, #24]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	18d1      	adds	r1, r2, r3
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	683a      	ldr	r2, [r7, #0]
 800dc38:	6978      	ldr	r0, [r7, #20]
 800dc3a:	f000 f8d1 	bl	800dde0 <prvInsertTimerInActiveList>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d01f      	beq.n	800dc84 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dc44:	2300      	movs	r3, #0
 800dc46:	9300      	str	r3, [sp, #0]
 800dc48:	2300      	movs	r3, #0
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	6978      	ldr	r0, [r7, #20]
 800dc50:	f7ff ff88 	bl	800db64 <xTimerGenericCommand>
 800dc54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d113      	bne.n	800dc84 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800dc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc60:	f383 8811 	msr	BASEPRI, r3
 800dc64:	f3bf 8f6f 	isb	sy
 800dc68:	f3bf 8f4f 	dsb	sy
 800dc6c:	60fb      	str	r3, [r7, #12]
}
 800dc6e:	bf00      	nop
 800dc70:	e7fe      	b.n	800dc70 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc78:	f023 0301 	bic.w	r3, r3, #1
 800dc7c:	b2da      	uxtb	r2, r3
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	6a1b      	ldr	r3, [r3, #32]
 800dc88:	6978      	ldr	r0, [r7, #20]
 800dc8a:	4798      	blx	r3
}
 800dc8c:	bf00      	nop
 800dc8e:	3718      	adds	r7, #24
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	20001b00 	.word	0x20001b00

0800dc98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dca0:	f107 0308 	add.w	r3, r7, #8
 800dca4:	4618      	mov	r0, r3
 800dca6:	f000 f857 	bl	800dd58 <prvGetNextExpireTime>
 800dcaa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	4619      	mov	r1, r3
 800dcb0:	68f8      	ldr	r0, [r7, #12]
 800dcb2:	f000 f803 	bl	800dcbc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dcb6:	f000 f8d5 	bl	800de64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dcba:	e7f1      	b.n	800dca0 <prvTimerTask+0x8>

0800dcbc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b084      	sub	sp, #16
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dcc6:	f7ff fa43 	bl	800d150 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dcca:	f107 0308 	add.w	r3, r7, #8
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f000 f866 	bl	800dda0 <prvSampleTimeNow>
 800dcd4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d130      	bne.n	800dd3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d10a      	bne.n	800dcf8 <prvProcessTimerOrBlockTask+0x3c>
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d806      	bhi.n	800dcf8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dcea:	f7ff fa3f 	bl	800d16c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dcee:	68f9      	ldr	r1, [r7, #12]
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f7ff ff85 	bl	800dc00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dcf6:	e024      	b.n	800dd42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d008      	beq.n	800dd10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dcfe:	4b13      	ldr	r3, [pc, #76]	; (800dd4c <prvProcessTimerOrBlockTask+0x90>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d101      	bne.n	800dd0c <prvProcessTimerOrBlockTask+0x50>
 800dd08:	2301      	movs	r3, #1
 800dd0a:	e000      	b.n	800dd0e <prvProcessTimerOrBlockTask+0x52>
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dd10:	4b0f      	ldr	r3, [pc, #60]	; (800dd50 <prvProcessTimerOrBlockTask+0x94>)
 800dd12:	6818      	ldr	r0, [r3, #0]
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	1ad3      	subs	r3, r2, r3
 800dd1a:	683a      	ldr	r2, [r7, #0]
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	f7fe fea1 	bl	800ca64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dd22:	f7ff fa23 	bl	800d16c <xTaskResumeAll>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d10a      	bne.n	800dd42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dd2c:	4b09      	ldr	r3, [pc, #36]	; (800dd54 <prvProcessTimerOrBlockTask+0x98>)
 800dd2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd32:	601a      	str	r2, [r3, #0]
 800dd34:	f3bf 8f4f 	dsb	sy
 800dd38:	f3bf 8f6f 	isb	sy
}
 800dd3c:	e001      	b.n	800dd42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dd3e:	f7ff fa15 	bl	800d16c <xTaskResumeAll>
}
 800dd42:	bf00      	nop
 800dd44:	3710      	adds	r7, #16
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	20001b04 	.word	0x20001b04
 800dd50:	20001b08 	.word	0x20001b08
 800dd54:	e000ed04 	.word	0xe000ed04

0800dd58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b085      	sub	sp, #20
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dd60:	4b0e      	ldr	r3, [pc, #56]	; (800dd9c <prvGetNextExpireTime+0x44>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d101      	bne.n	800dd6e <prvGetNextExpireTime+0x16>
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	e000      	b.n	800dd70 <prvGetNextExpireTime+0x18>
 800dd6e:	2200      	movs	r2, #0
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d105      	bne.n	800dd88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd7c:	4b07      	ldr	r3, [pc, #28]	; (800dd9c <prvGetNextExpireTime+0x44>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	68db      	ldr	r3, [r3, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	60fb      	str	r3, [r7, #12]
 800dd86:	e001      	b.n	800dd8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3714      	adds	r7, #20
 800dd92:	46bd      	mov	sp, r7
 800dd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd98:	4770      	bx	lr
 800dd9a:	bf00      	nop
 800dd9c:	20001b00 	.word	0x20001b00

0800dda0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b084      	sub	sp, #16
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dda8:	f7ff fa7e 	bl	800d2a8 <xTaskGetTickCount>
 800ddac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ddae:	4b0b      	ldr	r3, [pc, #44]	; (800dddc <prvSampleTimeNow+0x3c>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	68fa      	ldr	r2, [r7, #12]
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d205      	bcs.n	800ddc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ddb8:	f000 f936 	bl	800e028 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	601a      	str	r2, [r3, #0]
 800ddc2:	e002      	b.n	800ddca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ddca:	4a04      	ldr	r2, [pc, #16]	; (800dddc <prvSampleTimeNow+0x3c>)
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3710      	adds	r7, #16
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	20001b10 	.word	0x20001b10

0800dde0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b086      	sub	sp, #24
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	60f8      	str	r0, [r7, #12]
 800dde8:	60b9      	str	r1, [r7, #8]
 800ddea:	607a      	str	r2, [r7, #4]
 800ddec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	68ba      	ldr	r2, [r7, #8]
 800ddf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	68fa      	ldr	r2, [r7, #12]
 800ddfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ddfe:	68ba      	ldr	r2, [r7, #8]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	429a      	cmp	r2, r3
 800de04:	d812      	bhi.n	800de2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	1ad2      	subs	r2, r2, r3
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	699b      	ldr	r3, [r3, #24]
 800de10:	429a      	cmp	r2, r3
 800de12:	d302      	bcc.n	800de1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800de14:	2301      	movs	r3, #1
 800de16:	617b      	str	r3, [r7, #20]
 800de18:	e01b      	b.n	800de52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800de1a:	4b10      	ldr	r3, [pc, #64]	; (800de5c <prvInsertTimerInActiveList+0x7c>)
 800de1c:	681a      	ldr	r2, [r3, #0]
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	3304      	adds	r3, #4
 800de22:	4619      	mov	r1, r3
 800de24:	4610      	mov	r0, r2
 800de26:	f7fe f8c8 	bl	800bfba <vListInsert>
 800de2a:	e012      	b.n	800de52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	429a      	cmp	r2, r3
 800de32:	d206      	bcs.n	800de42 <prvInsertTimerInActiveList+0x62>
 800de34:	68ba      	ldr	r2, [r7, #8]
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	429a      	cmp	r2, r3
 800de3a:	d302      	bcc.n	800de42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800de3c:	2301      	movs	r3, #1
 800de3e:	617b      	str	r3, [r7, #20]
 800de40:	e007      	b.n	800de52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de42:	4b07      	ldr	r3, [pc, #28]	; (800de60 <prvInsertTimerInActiveList+0x80>)
 800de44:	681a      	ldr	r2, [r3, #0]
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	3304      	adds	r3, #4
 800de4a:	4619      	mov	r1, r3
 800de4c:	4610      	mov	r0, r2
 800de4e:	f7fe f8b4 	bl	800bfba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800de52:	697b      	ldr	r3, [r7, #20]
}
 800de54:	4618      	mov	r0, r3
 800de56:	3718      	adds	r7, #24
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	20001b04 	.word	0x20001b04
 800de60:	20001b00 	.word	0x20001b00

0800de64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b08e      	sub	sp, #56	; 0x38
 800de68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800de6a:	e0ca      	b.n	800e002 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	da18      	bge.n	800dea4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800de72:	1d3b      	adds	r3, r7, #4
 800de74:	3304      	adds	r3, #4
 800de76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800de78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d10a      	bne.n	800de94 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800de7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de82:	f383 8811 	msr	BASEPRI, r3
 800de86:	f3bf 8f6f 	isb	sy
 800de8a:	f3bf 8f4f 	dsb	sy
 800de8e:	61fb      	str	r3, [r7, #28]
}
 800de90:	bf00      	nop
 800de92:	e7fe      	b.n	800de92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800de94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de9a:	6850      	ldr	r0, [r2, #4]
 800de9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de9e:	6892      	ldr	r2, [r2, #8]
 800dea0:	4611      	mov	r1, r2
 800dea2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	f2c0 80aa 	blt.w	800e000 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800deb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb2:	695b      	ldr	r3, [r3, #20]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d004      	beq.n	800dec2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800deb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deba:	3304      	adds	r3, #4
 800debc:	4618      	mov	r0, r3
 800debe:	f7fe f8b5 	bl	800c02c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dec2:	463b      	mov	r3, r7
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7ff ff6b 	bl	800dda0 <prvSampleTimeNow>
 800deca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2b09      	cmp	r3, #9
 800ded0:	f200 8097 	bhi.w	800e002 <prvProcessReceivedCommands+0x19e>
 800ded4:	a201      	add	r2, pc, #4	; (adr r2, 800dedc <prvProcessReceivedCommands+0x78>)
 800ded6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deda:	bf00      	nop
 800dedc:	0800df05 	.word	0x0800df05
 800dee0:	0800df05 	.word	0x0800df05
 800dee4:	0800df05 	.word	0x0800df05
 800dee8:	0800df79 	.word	0x0800df79
 800deec:	0800df8d 	.word	0x0800df8d
 800def0:	0800dfd7 	.word	0x0800dfd7
 800def4:	0800df05 	.word	0x0800df05
 800def8:	0800df05 	.word	0x0800df05
 800defc:	0800df79 	.word	0x0800df79
 800df00:	0800df8d 	.word	0x0800df8d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df0a:	f043 0301 	orr.w	r3, r3, #1
 800df0e:	b2da      	uxtb	r2, r3
 800df10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800df16:	68ba      	ldr	r2, [r7, #8]
 800df18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1a:	699b      	ldr	r3, [r3, #24]
 800df1c:	18d1      	adds	r1, r2, r3
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df24:	f7ff ff5c 	bl	800dde0 <prvInsertTimerInActiveList>
 800df28:	4603      	mov	r3, r0
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d069      	beq.n	800e002 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df30:	6a1b      	ldr	r3, [r3, #32]
 800df32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df3c:	f003 0304 	and.w	r3, r3, #4
 800df40:	2b00      	cmp	r3, #0
 800df42:	d05e      	beq.n	800e002 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800df44:	68ba      	ldr	r2, [r7, #8]
 800df46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df48:	699b      	ldr	r3, [r3, #24]
 800df4a:	441a      	add	r2, r3
 800df4c:	2300      	movs	r3, #0
 800df4e:	9300      	str	r3, [sp, #0]
 800df50:	2300      	movs	r3, #0
 800df52:	2100      	movs	r1, #0
 800df54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df56:	f7ff fe05 	bl	800db64 <xTimerGenericCommand>
 800df5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800df5c:	6a3b      	ldr	r3, [r7, #32]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d14f      	bne.n	800e002 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800df62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df66:	f383 8811 	msr	BASEPRI, r3
 800df6a:	f3bf 8f6f 	isb	sy
 800df6e:	f3bf 8f4f 	dsb	sy
 800df72:	61bb      	str	r3, [r7, #24]
}
 800df74:	bf00      	nop
 800df76:	e7fe      	b.n	800df76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df7e:	f023 0301 	bic.w	r3, r3, #1
 800df82:	b2da      	uxtb	r2, r3
 800df84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800df8a:	e03a      	b.n	800e002 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df92:	f043 0301 	orr.w	r3, r3, #1
 800df96:	b2da      	uxtb	r2, r3
 800df98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800df9e:	68ba      	ldr	r2, [r7, #8]
 800dfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa6:	699b      	ldr	r3, [r3, #24]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d10a      	bne.n	800dfc2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800dfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb0:	f383 8811 	msr	BASEPRI, r3
 800dfb4:	f3bf 8f6f 	isb	sy
 800dfb8:	f3bf 8f4f 	dsb	sy
 800dfbc:	617b      	str	r3, [r7, #20]
}
 800dfbe:	bf00      	nop
 800dfc0:	e7fe      	b.n	800dfc0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc4:	699a      	ldr	r2, [r3, #24]
 800dfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc8:	18d1      	adds	r1, r2, r3
 800dfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfd0:	f7ff ff06 	bl	800dde0 <prvInsertTimerInActiveList>
					break;
 800dfd4:	e015      	b.n	800e002 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfdc:	f003 0302 	and.w	r3, r3, #2
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d103      	bne.n	800dfec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dfe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfe6:	f000 fbdb 	bl	800e7a0 <vPortFree>
 800dfea:	e00a      	b.n	800e002 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dff2:	f023 0301 	bic.w	r3, r3, #1
 800dff6:	b2da      	uxtb	r2, r3
 800dff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dffe:	e000      	b.n	800e002 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e000:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e002:	4b08      	ldr	r3, [pc, #32]	; (800e024 <prvProcessReceivedCommands+0x1c0>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	1d39      	adds	r1, r7, #4
 800e008:	2200      	movs	r2, #0
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7fe fb10 	bl	800c630 <xQueueReceive>
 800e010:	4603      	mov	r3, r0
 800e012:	2b00      	cmp	r3, #0
 800e014:	f47f af2a 	bne.w	800de6c <prvProcessReceivedCommands+0x8>
	}
}
 800e018:	bf00      	nop
 800e01a:	bf00      	nop
 800e01c:	3730      	adds	r7, #48	; 0x30
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
 800e022:	bf00      	nop
 800e024:	20001b08 	.word	0x20001b08

0800e028 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b088      	sub	sp, #32
 800e02c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e02e:	e048      	b.n	800e0c2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e030:	4b2d      	ldr	r3, [pc, #180]	; (800e0e8 <prvSwitchTimerLists+0xc0>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	68db      	ldr	r3, [r3, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e03a:	4b2b      	ldr	r3, [pc, #172]	; (800e0e8 <prvSwitchTimerLists+0xc0>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	68db      	ldr	r3, [r3, #12]
 800e040:	68db      	ldr	r3, [r3, #12]
 800e042:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	3304      	adds	r3, #4
 800e048:	4618      	mov	r0, r3
 800e04a:	f7fd ffef 	bl	800c02c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	6a1b      	ldr	r3, [r3, #32]
 800e052:	68f8      	ldr	r0, [r7, #12]
 800e054:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e05c:	f003 0304 	and.w	r3, r3, #4
 800e060:	2b00      	cmp	r3, #0
 800e062:	d02e      	beq.n	800e0c2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	699b      	ldr	r3, [r3, #24]
 800e068:	693a      	ldr	r2, [r7, #16]
 800e06a:	4413      	add	r3, r2
 800e06c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e06e:	68ba      	ldr	r2, [r7, #8]
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	429a      	cmp	r2, r3
 800e074:	d90e      	bls.n	800e094 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	68ba      	ldr	r2, [r7, #8]
 800e07a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	68fa      	ldr	r2, [r7, #12]
 800e080:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e082:	4b19      	ldr	r3, [pc, #100]	; (800e0e8 <prvSwitchTimerLists+0xc0>)
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	3304      	adds	r3, #4
 800e08a:	4619      	mov	r1, r3
 800e08c:	4610      	mov	r0, r2
 800e08e:	f7fd ff94 	bl	800bfba <vListInsert>
 800e092:	e016      	b.n	800e0c2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e094:	2300      	movs	r3, #0
 800e096:	9300      	str	r3, [sp, #0]
 800e098:	2300      	movs	r3, #0
 800e09a:	693a      	ldr	r2, [r7, #16]
 800e09c:	2100      	movs	r1, #0
 800e09e:	68f8      	ldr	r0, [r7, #12]
 800e0a0:	f7ff fd60 	bl	800db64 <xTimerGenericCommand>
 800e0a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d10a      	bne.n	800e0c2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b0:	f383 8811 	msr	BASEPRI, r3
 800e0b4:	f3bf 8f6f 	isb	sy
 800e0b8:	f3bf 8f4f 	dsb	sy
 800e0bc:	603b      	str	r3, [r7, #0]
}
 800e0be:	bf00      	nop
 800e0c0:	e7fe      	b.n	800e0c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e0c2:	4b09      	ldr	r3, [pc, #36]	; (800e0e8 <prvSwitchTimerLists+0xc0>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d1b1      	bne.n	800e030 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e0cc:	4b06      	ldr	r3, [pc, #24]	; (800e0e8 <prvSwitchTimerLists+0xc0>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e0d2:	4b06      	ldr	r3, [pc, #24]	; (800e0ec <prvSwitchTimerLists+0xc4>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	4a04      	ldr	r2, [pc, #16]	; (800e0e8 <prvSwitchTimerLists+0xc0>)
 800e0d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e0da:	4a04      	ldr	r2, [pc, #16]	; (800e0ec <prvSwitchTimerLists+0xc4>)
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	6013      	str	r3, [r2, #0]
}
 800e0e0:	bf00      	nop
 800e0e2:	3718      	adds	r7, #24
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	20001b00 	.word	0x20001b00
 800e0ec:	20001b04 	.word	0x20001b04

0800e0f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b082      	sub	sp, #8
 800e0f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e0f6:	f000 f965 	bl	800e3c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e0fa:	4b15      	ldr	r3, [pc, #84]	; (800e150 <prvCheckForValidListAndQueue+0x60>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d120      	bne.n	800e144 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e102:	4814      	ldr	r0, [pc, #80]	; (800e154 <prvCheckForValidListAndQueue+0x64>)
 800e104:	f7fd ff08 	bl	800bf18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e108:	4813      	ldr	r0, [pc, #76]	; (800e158 <prvCheckForValidListAndQueue+0x68>)
 800e10a:	f7fd ff05 	bl	800bf18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e10e:	4b13      	ldr	r3, [pc, #76]	; (800e15c <prvCheckForValidListAndQueue+0x6c>)
 800e110:	4a10      	ldr	r2, [pc, #64]	; (800e154 <prvCheckForValidListAndQueue+0x64>)
 800e112:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e114:	4b12      	ldr	r3, [pc, #72]	; (800e160 <prvCheckForValidListAndQueue+0x70>)
 800e116:	4a10      	ldr	r2, [pc, #64]	; (800e158 <prvCheckForValidListAndQueue+0x68>)
 800e118:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e11a:	2300      	movs	r3, #0
 800e11c:	9300      	str	r3, [sp, #0]
 800e11e:	4b11      	ldr	r3, [pc, #68]	; (800e164 <prvCheckForValidListAndQueue+0x74>)
 800e120:	4a11      	ldr	r2, [pc, #68]	; (800e168 <prvCheckForValidListAndQueue+0x78>)
 800e122:	2110      	movs	r1, #16
 800e124:	200a      	movs	r0, #10
 800e126:	f7fe f813 	bl	800c150 <xQueueGenericCreateStatic>
 800e12a:	4603      	mov	r3, r0
 800e12c:	4a08      	ldr	r2, [pc, #32]	; (800e150 <prvCheckForValidListAndQueue+0x60>)
 800e12e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e130:	4b07      	ldr	r3, [pc, #28]	; (800e150 <prvCheckForValidListAndQueue+0x60>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d005      	beq.n	800e144 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e138:	4b05      	ldr	r3, [pc, #20]	; (800e150 <prvCheckForValidListAndQueue+0x60>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	490b      	ldr	r1, [pc, #44]	; (800e16c <prvCheckForValidListAndQueue+0x7c>)
 800e13e:	4618      	mov	r0, r3
 800e140:	f7fe fc66 	bl	800ca10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e144:	f000 f96e 	bl	800e424 <vPortExitCritical>
}
 800e148:	bf00      	nop
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
 800e14e:	bf00      	nop
 800e150:	20001b08 	.word	0x20001b08
 800e154:	20001ad8 	.word	0x20001ad8
 800e158:	20001aec 	.word	0x20001aec
 800e15c:	20001b00 	.word	0x20001b00
 800e160:	20001b04 	.word	0x20001b04
 800e164:	20001bb4 	.word	0x20001bb4
 800e168:	20001b14 	.word	0x20001b14
 800e16c:	08010094 	.word	0x08010094

0800e170 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e170:	b480      	push	{r7}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	3b04      	subs	r3, #4
 800e180:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	3b04      	subs	r3, #4
 800e18e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	f023 0201 	bic.w	r2, r3, #1
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	3b04      	subs	r3, #4
 800e19e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e1a0:	4a0c      	ldr	r2, [pc, #48]	; (800e1d4 <pxPortInitialiseStack+0x64>)
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	3b14      	subs	r3, #20
 800e1aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e1ac:	687a      	ldr	r2, [r7, #4]
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	3b04      	subs	r3, #4
 800e1b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f06f 0202 	mvn.w	r2, #2
 800e1be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	3b20      	subs	r3, #32
 800e1c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3714      	adds	r7, #20
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr
 800e1d4:	0800e1d9 	.word	0x0800e1d9

0800e1d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b085      	sub	sp, #20
 800e1dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e1e2:	4b12      	ldr	r3, [pc, #72]	; (800e22c <prvTaskExitError+0x54>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ea:	d00a      	beq.n	800e202 <prvTaskExitError+0x2a>
	__asm volatile
 800e1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f0:	f383 8811 	msr	BASEPRI, r3
 800e1f4:	f3bf 8f6f 	isb	sy
 800e1f8:	f3bf 8f4f 	dsb	sy
 800e1fc:	60fb      	str	r3, [r7, #12]
}
 800e1fe:	bf00      	nop
 800e200:	e7fe      	b.n	800e200 <prvTaskExitError+0x28>
	__asm volatile
 800e202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e206:	f383 8811 	msr	BASEPRI, r3
 800e20a:	f3bf 8f6f 	isb	sy
 800e20e:	f3bf 8f4f 	dsb	sy
 800e212:	60bb      	str	r3, [r7, #8]
}
 800e214:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e216:	bf00      	nop
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d0fc      	beq.n	800e218 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e21e:	bf00      	nop
 800e220:	bf00      	nop
 800e222:	3714      	adds	r7, #20
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr
 800e22c:	200005c0 	.word	0x200005c0

0800e230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e230:	4b07      	ldr	r3, [pc, #28]	; (800e250 <pxCurrentTCBConst2>)
 800e232:	6819      	ldr	r1, [r3, #0]
 800e234:	6808      	ldr	r0, [r1, #0]
 800e236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e23a:	f380 8809 	msr	PSP, r0
 800e23e:	f3bf 8f6f 	isb	sy
 800e242:	f04f 0000 	mov.w	r0, #0
 800e246:	f380 8811 	msr	BASEPRI, r0
 800e24a:	4770      	bx	lr
 800e24c:	f3af 8000 	nop.w

0800e250 <pxCurrentTCBConst2>:
 800e250:	200015d8 	.word	0x200015d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e254:	bf00      	nop
 800e256:	bf00      	nop

0800e258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e258:	4808      	ldr	r0, [pc, #32]	; (800e27c <prvPortStartFirstTask+0x24>)
 800e25a:	6800      	ldr	r0, [r0, #0]
 800e25c:	6800      	ldr	r0, [r0, #0]
 800e25e:	f380 8808 	msr	MSP, r0
 800e262:	f04f 0000 	mov.w	r0, #0
 800e266:	f380 8814 	msr	CONTROL, r0
 800e26a:	b662      	cpsie	i
 800e26c:	b661      	cpsie	f
 800e26e:	f3bf 8f4f 	dsb	sy
 800e272:	f3bf 8f6f 	isb	sy
 800e276:	df00      	svc	0
 800e278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e27a:	bf00      	nop
 800e27c:	e000ed08 	.word	0xe000ed08

0800e280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b086      	sub	sp, #24
 800e284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e286:	4b46      	ldr	r3, [pc, #280]	; (800e3a0 <xPortStartScheduler+0x120>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	4a46      	ldr	r2, [pc, #280]	; (800e3a4 <xPortStartScheduler+0x124>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d10a      	bne.n	800e2a6 <xPortStartScheduler+0x26>
	__asm volatile
 800e290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e294:	f383 8811 	msr	BASEPRI, r3
 800e298:	f3bf 8f6f 	isb	sy
 800e29c:	f3bf 8f4f 	dsb	sy
 800e2a0:	613b      	str	r3, [r7, #16]
}
 800e2a2:	bf00      	nop
 800e2a4:	e7fe      	b.n	800e2a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e2a6:	4b3e      	ldr	r3, [pc, #248]	; (800e3a0 <xPortStartScheduler+0x120>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4a3f      	ldr	r2, [pc, #252]	; (800e3a8 <xPortStartScheduler+0x128>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d10a      	bne.n	800e2c6 <xPortStartScheduler+0x46>
	__asm volatile
 800e2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b4:	f383 8811 	msr	BASEPRI, r3
 800e2b8:	f3bf 8f6f 	isb	sy
 800e2bc:	f3bf 8f4f 	dsb	sy
 800e2c0:	60fb      	str	r3, [r7, #12]
}
 800e2c2:	bf00      	nop
 800e2c4:	e7fe      	b.n	800e2c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e2c6:	4b39      	ldr	r3, [pc, #228]	; (800e3ac <xPortStartScheduler+0x12c>)
 800e2c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	22ff      	movs	r2, #255	; 0xff
 800e2d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	b2db      	uxtb	r3, r3
 800e2de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e2e0:	78fb      	ldrb	r3, [r7, #3]
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e2e8:	b2da      	uxtb	r2, r3
 800e2ea:	4b31      	ldr	r3, [pc, #196]	; (800e3b0 <xPortStartScheduler+0x130>)
 800e2ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e2ee:	4b31      	ldr	r3, [pc, #196]	; (800e3b4 <xPortStartScheduler+0x134>)
 800e2f0:	2207      	movs	r2, #7
 800e2f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e2f4:	e009      	b.n	800e30a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e2f6:	4b2f      	ldr	r3, [pc, #188]	; (800e3b4 <xPortStartScheduler+0x134>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	4a2d      	ldr	r2, [pc, #180]	; (800e3b4 <xPortStartScheduler+0x134>)
 800e2fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e300:	78fb      	ldrb	r3, [r7, #3]
 800e302:	b2db      	uxtb	r3, r3
 800e304:	005b      	lsls	r3, r3, #1
 800e306:	b2db      	uxtb	r3, r3
 800e308:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e30a:	78fb      	ldrb	r3, [r7, #3]
 800e30c:	b2db      	uxtb	r3, r3
 800e30e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e312:	2b80      	cmp	r3, #128	; 0x80
 800e314:	d0ef      	beq.n	800e2f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e316:	4b27      	ldr	r3, [pc, #156]	; (800e3b4 <xPortStartScheduler+0x134>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f1c3 0307 	rsb	r3, r3, #7
 800e31e:	2b04      	cmp	r3, #4
 800e320:	d00a      	beq.n	800e338 <xPortStartScheduler+0xb8>
	__asm volatile
 800e322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e326:	f383 8811 	msr	BASEPRI, r3
 800e32a:	f3bf 8f6f 	isb	sy
 800e32e:	f3bf 8f4f 	dsb	sy
 800e332:	60bb      	str	r3, [r7, #8]
}
 800e334:	bf00      	nop
 800e336:	e7fe      	b.n	800e336 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e338:	4b1e      	ldr	r3, [pc, #120]	; (800e3b4 <xPortStartScheduler+0x134>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	021b      	lsls	r3, r3, #8
 800e33e:	4a1d      	ldr	r2, [pc, #116]	; (800e3b4 <xPortStartScheduler+0x134>)
 800e340:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e342:	4b1c      	ldr	r3, [pc, #112]	; (800e3b4 <xPortStartScheduler+0x134>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e34a:	4a1a      	ldr	r2, [pc, #104]	; (800e3b4 <xPortStartScheduler+0x134>)
 800e34c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	b2da      	uxtb	r2, r3
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e356:	4b18      	ldr	r3, [pc, #96]	; (800e3b8 <xPortStartScheduler+0x138>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4a17      	ldr	r2, [pc, #92]	; (800e3b8 <xPortStartScheduler+0x138>)
 800e35c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e360:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e362:	4b15      	ldr	r3, [pc, #84]	; (800e3b8 <xPortStartScheduler+0x138>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	4a14      	ldr	r2, [pc, #80]	; (800e3b8 <xPortStartScheduler+0x138>)
 800e368:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e36c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e36e:	f000 f8dd 	bl	800e52c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e372:	4b12      	ldr	r3, [pc, #72]	; (800e3bc <xPortStartScheduler+0x13c>)
 800e374:	2200      	movs	r2, #0
 800e376:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e378:	f000 f8fc 	bl	800e574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e37c:	4b10      	ldr	r3, [pc, #64]	; (800e3c0 <xPortStartScheduler+0x140>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4a0f      	ldr	r2, [pc, #60]	; (800e3c0 <xPortStartScheduler+0x140>)
 800e382:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e386:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e388:	f7ff ff66 	bl	800e258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e38c:	f7ff f856 	bl	800d43c <vTaskSwitchContext>
	prvTaskExitError();
 800e390:	f7ff ff22 	bl	800e1d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e394:	2300      	movs	r3, #0
}
 800e396:	4618      	mov	r0, r3
 800e398:	3718      	adds	r7, #24
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	e000ed00 	.word	0xe000ed00
 800e3a4:	410fc271 	.word	0x410fc271
 800e3a8:	410fc270 	.word	0x410fc270
 800e3ac:	e000e400 	.word	0xe000e400
 800e3b0:	20001c04 	.word	0x20001c04
 800e3b4:	20001c08 	.word	0x20001c08
 800e3b8:	e000ed20 	.word	0xe000ed20
 800e3bc:	200005c0 	.word	0x200005c0
 800e3c0:	e000ef34 	.word	0xe000ef34

0800e3c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b083      	sub	sp, #12
 800e3c8:	af00      	add	r7, sp, #0
	__asm volatile
 800e3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ce:	f383 8811 	msr	BASEPRI, r3
 800e3d2:	f3bf 8f6f 	isb	sy
 800e3d6:	f3bf 8f4f 	dsb	sy
 800e3da:	607b      	str	r3, [r7, #4]
}
 800e3dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e3de:	4b0f      	ldr	r3, [pc, #60]	; (800e41c <vPortEnterCritical+0x58>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	4a0d      	ldr	r2, [pc, #52]	; (800e41c <vPortEnterCritical+0x58>)
 800e3e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e3e8:	4b0c      	ldr	r3, [pc, #48]	; (800e41c <vPortEnterCritical+0x58>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d10f      	bne.n	800e410 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e3f0:	4b0b      	ldr	r3, [pc, #44]	; (800e420 <vPortEnterCritical+0x5c>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	b2db      	uxtb	r3, r3
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d00a      	beq.n	800e410 <vPortEnterCritical+0x4c>
	__asm volatile
 800e3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fe:	f383 8811 	msr	BASEPRI, r3
 800e402:	f3bf 8f6f 	isb	sy
 800e406:	f3bf 8f4f 	dsb	sy
 800e40a:	603b      	str	r3, [r7, #0]
}
 800e40c:	bf00      	nop
 800e40e:	e7fe      	b.n	800e40e <vPortEnterCritical+0x4a>
	}
}
 800e410:	bf00      	nop
 800e412:	370c      	adds	r7, #12
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr
 800e41c:	200005c0 	.word	0x200005c0
 800e420:	e000ed04 	.word	0xe000ed04

0800e424 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e424:	b480      	push	{r7}
 800e426:	b083      	sub	sp, #12
 800e428:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e42a:	4b12      	ldr	r3, [pc, #72]	; (800e474 <vPortExitCritical+0x50>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d10a      	bne.n	800e448 <vPortExitCritical+0x24>
	__asm volatile
 800e432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e436:	f383 8811 	msr	BASEPRI, r3
 800e43a:	f3bf 8f6f 	isb	sy
 800e43e:	f3bf 8f4f 	dsb	sy
 800e442:	607b      	str	r3, [r7, #4]
}
 800e444:	bf00      	nop
 800e446:	e7fe      	b.n	800e446 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e448:	4b0a      	ldr	r3, [pc, #40]	; (800e474 <vPortExitCritical+0x50>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	3b01      	subs	r3, #1
 800e44e:	4a09      	ldr	r2, [pc, #36]	; (800e474 <vPortExitCritical+0x50>)
 800e450:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e452:	4b08      	ldr	r3, [pc, #32]	; (800e474 <vPortExitCritical+0x50>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d105      	bne.n	800e466 <vPortExitCritical+0x42>
 800e45a:	2300      	movs	r3, #0
 800e45c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	f383 8811 	msr	BASEPRI, r3
}
 800e464:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e466:	bf00      	nop
 800e468:	370c      	adds	r7, #12
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop
 800e474:	200005c0 	.word	0x200005c0
	...

0800e480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e480:	f3ef 8009 	mrs	r0, PSP
 800e484:	f3bf 8f6f 	isb	sy
 800e488:	4b15      	ldr	r3, [pc, #84]	; (800e4e0 <pxCurrentTCBConst>)
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	f01e 0f10 	tst.w	lr, #16
 800e490:	bf08      	it	eq
 800e492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e49a:	6010      	str	r0, [r2, #0]
 800e49c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e4a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e4a4:	f380 8811 	msr	BASEPRI, r0
 800e4a8:	f3bf 8f4f 	dsb	sy
 800e4ac:	f3bf 8f6f 	isb	sy
 800e4b0:	f7fe ffc4 	bl	800d43c <vTaskSwitchContext>
 800e4b4:	f04f 0000 	mov.w	r0, #0
 800e4b8:	f380 8811 	msr	BASEPRI, r0
 800e4bc:	bc09      	pop	{r0, r3}
 800e4be:	6819      	ldr	r1, [r3, #0]
 800e4c0:	6808      	ldr	r0, [r1, #0]
 800e4c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c6:	f01e 0f10 	tst.w	lr, #16
 800e4ca:	bf08      	it	eq
 800e4cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e4d0:	f380 8809 	msr	PSP, r0
 800e4d4:	f3bf 8f6f 	isb	sy
 800e4d8:	4770      	bx	lr
 800e4da:	bf00      	nop
 800e4dc:	f3af 8000 	nop.w

0800e4e0 <pxCurrentTCBConst>:
 800e4e0:	200015d8 	.word	0x200015d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e4e4:	bf00      	nop
 800e4e6:	bf00      	nop

0800e4e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b082      	sub	sp, #8
 800e4ec:	af00      	add	r7, sp, #0
	__asm volatile
 800e4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f2:	f383 8811 	msr	BASEPRI, r3
 800e4f6:	f3bf 8f6f 	isb	sy
 800e4fa:	f3bf 8f4f 	dsb	sy
 800e4fe:	607b      	str	r3, [r7, #4]
}
 800e500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e502:	f7fe fee1 	bl	800d2c8 <xTaskIncrementTick>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d003      	beq.n	800e514 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e50c:	4b06      	ldr	r3, [pc, #24]	; (800e528 <xPortSysTickHandler+0x40>)
 800e50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e512:	601a      	str	r2, [r3, #0]
 800e514:	2300      	movs	r3, #0
 800e516:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	f383 8811 	msr	BASEPRI, r3
}
 800e51e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e520:	bf00      	nop
 800e522:	3708      	adds	r7, #8
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}
 800e528:	e000ed04 	.word	0xe000ed04

0800e52c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e52c:	b480      	push	{r7}
 800e52e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e530:	4b0b      	ldr	r3, [pc, #44]	; (800e560 <vPortSetupTimerInterrupt+0x34>)
 800e532:	2200      	movs	r2, #0
 800e534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e536:	4b0b      	ldr	r3, [pc, #44]	; (800e564 <vPortSetupTimerInterrupt+0x38>)
 800e538:	2200      	movs	r2, #0
 800e53a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e53c:	4b0a      	ldr	r3, [pc, #40]	; (800e568 <vPortSetupTimerInterrupt+0x3c>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4a0a      	ldr	r2, [pc, #40]	; (800e56c <vPortSetupTimerInterrupt+0x40>)
 800e542:	fba2 2303 	umull	r2, r3, r2, r3
 800e546:	099b      	lsrs	r3, r3, #6
 800e548:	4a09      	ldr	r2, [pc, #36]	; (800e570 <vPortSetupTimerInterrupt+0x44>)
 800e54a:	3b01      	subs	r3, #1
 800e54c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e54e:	4b04      	ldr	r3, [pc, #16]	; (800e560 <vPortSetupTimerInterrupt+0x34>)
 800e550:	2207      	movs	r2, #7
 800e552:	601a      	str	r2, [r3, #0]
}
 800e554:	bf00      	nop
 800e556:	46bd      	mov	sp, r7
 800e558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55c:	4770      	bx	lr
 800e55e:	bf00      	nop
 800e560:	e000e010 	.word	0xe000e010
 800e564:	e000e018 	.word	0xe000e018
 800e568:	20000528 	.word	0x20000528
 800e56c:	10624dd3 	.word	0x10624dd3
 800e570:	e000e014 	.word	0xe000e014

0800e574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e574:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e584 <vPortEnableVFP+0x10>
 800e578:	6801      	ldr	r1, [r0, #0]
 800e57a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e57e:	6001      	str	r1, [r0, #0]
 800e580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e582:	bf00      	nop
 800e584:	e000ed88 	.word	0xe000ed88

0800e588 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e588:	b480      	push	{r7}
 800e58a:	b085      	sub	sp, #20
 800e58c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e58e:	f3ef 8305 	mrs	r3, IPSR
 800e592:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	2b0f      	cmp	r3, #15
 800e598:	d914      	bls.n	800e5c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e59a:	4a17      	ldr	r2, [pc, #92]	; (800e5f8 <vPortValidateInterruptPriority+0x70>)
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	4413      	add	r3, r2
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e5a4:	4b15      	ldr	r3, [pc, #84]	; (800e5fc <vPortValidateInterruptPriority+0x74>)
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	7afa      	ldrb	r2, [r7, #11]
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d20a      	bcs.n	800e5c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b2:	f383 8811 	msr	BASEPRI, r3
 800e5b6:	f3bf 8f6f 	isb	sy
 800e5ba:	f3bf 8f4f 	dsb	sy
 800e5be:	607b      	str	r3, [r7, #4]
}
 800e5c0:	bf00      	nop
 800e5c2:	e7fe      	b.n	800e5c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e5c4:	4b0e      	ldr	r3, [pc, #56]	; (800e600 <vPortValidateInterruptPriority+0x78>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e5cc:	4b0d      	ldr	r3, [pc, #52]	; (800e604 <vPortValidateInterruptPriority+0x7c>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d90a      	bls.n	800e5ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d8:	f383 8811 	msr	BASEPRI, r3
 800e5dc:	f3bf 8f6f 	isb	sy
 800e5e0:	f3bf 8f4f 	dsb	sy
 800e5e4:	603b      	str	r3, [r7, #0]
}
 800e5e6:	bf00      	nop
 800e5e8:	e7fe      	b.n	800e5e8 <vPortValidateInterruptPriority+0x60>
	}
 800e5ea:	bf00      	nop
 800e5ec:	3714      	adds	r7, #20
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr
 800e5f6:	bf00      	nop
 800e5f8:	e000e3f0 	.word	0xe000e3f0
 800e5fc:	20001c04 	.word	0x20001c04
 800e600:	e000ed0c 	.word	0xe000ed0c
 800e604:	20001c08 	.word	0x20001c08

0800e608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b08a      	sub	sp, #40	; 0x28
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e610:	2300      	movs	r3, #0
 800e612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e614:	f7fe fd9c 	bl	800d150 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e618:	4b5b      	ldr	r3, [pc, #364]	; (800e788 <pvPortMalloc+0x180>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d101      	bne.n	800e624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e620:	f000 f920 	bl	800e864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e624:	4b59      	ldr	r3, [pc, #356]	; (800e78c <pvPortMalloc+0x184>)
 800e626:	681a      	ldr	r2, [r3, #0]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	4013      	ands	r3, r2
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	f040 8093 	bne.w	800e758 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d01d      	beq.n	800e674 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e638:	2208      	movs	r2, #8
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	4413      	add	r3, r2
 800e63e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f003 0307 	and.w	r3, r3, #7
 800e646:	2b00      	cmp	r3, #0
 800e648:	d014      	beq.n	800e674 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f023 0307 	bic.w	r3, r3, #7
 800e650:	3308      	adds	r3, #8
 800e652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f003 0307 	and.w	r3, r3, #7
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d00a      	beq.n	800e674 <pvPortMalloc+0x6c>
	__asm volatile
 800e65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e662:	f383 8811 	msr	BASEPRI, r3
 800e666:	f3bf 8f6f 	isb	sy
 800e66a:	f3bf 8f4f 	dsb	sy
 800e66e:	617b      	str	r3, [r7, #20]
}
 800e670:	bf00      	nop
 800e672:	e7fe      	b.n	800e672 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d06e      	beq.n	800e758 <pvPortMalloc+0x150>
 800e67a:	4b45      	ldr	r3, [pc, #276]	; (800e790 <pvPortMalloc+0x188>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	429a      	cmp	r2, r3
 800e682:	d869      	bhi.n	800e758 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e684:	4b43      	ldr	r3, [pc, #268]	; (800e794 <pvPortMalloc+0x18c>)
 800e686:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e688:	4b42      	ldr	r3, [pc, #264]	; (800e794 <pvPortMalloc+0x18c>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e68e:	e004      	b.n	800e69a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e692:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	687a      	ldr	r2, [r7, #4]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d903      	bls.n	800e6ac <pvPortMalloc+0xa4>
 800e6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d1f1      	bne.n	800e690 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e6ac:	4b36      	ldr	r3, [pc, #216]	; (800e788 <pvPortMalloc+0x180>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d050      	beq.n	800e758 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e6b6:	6a3b      	ldr	r3, [r7, #32]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	2208      	movs	r2, #8
 800e6bc:	4413      	add	r3, r2
 800e6be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	6a3b      	ldr	r3, [r7, #32]
 800e6c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ca:	685a      	ldr	r2, [r3, #4]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	1ad2      	subs	r2, r2, r3
 800e6d0:	2308      	movs	r3, #8
 800e6d2:	005b      	lsls	r3, r3, #1
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d91f      	bls.n	800e718 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e6d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	4413      	add	r3, r2
 800e6de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6e0:	69bb      	ldr	r3, [r7, #24]
 800e6e2:	f003 0307 	and.w	r3, r3, #7
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00a      	beq.n	800e700 <pvPortMalloc+0xf8>
	__asm volatile
 800e6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ee:	f383 8811 	msr	BASEPRI, r3
 800e6f2:	f3bf 8f6f 	isb	sy
 800e6f6:	f3bf 8f4f 	dsb	sy
 800e6fa:	613b      	str	r3, [r7, #16]
}
 800e6fc:	bf00      	nop
 800e6fe:	e7fe      	b.n	800e6fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e702:	685a      	ldr	r2, [r3, #4]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	1ad2      	subs	r2, r2, r3
 800e708:	69bb      	ldr	r3, [r7, #24]
 800e70a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e712:	69b8      	ldr	r0, [r7, #24]
 800e714:	f000 f908 	bl	800e928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e718:	4b1d      	ldr	r3, [pc, #116]	; (800e790 <pvPortMalloc+0x188>)
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	1ad3      	subs	r3, r2, r3
 800e722:	4a1b      	ldr	r2, [pc, #108]	; (800e790 <pvPortMalloc+0x188>)
 800e724:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e726:	4b1a      	ldr	r3, [pc, #104]	; (800e790 <pvPortMalloc+0x188>)
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	4b1b      	ldr	r3, [pc, #108]	; (800e798 <pvPortMalloc+0x190>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	429a      	cmp	r2, r3
 800e730:	d203      	bcs.n	800e73a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e732:	4b17      	ldr	r3, [pc, #92]	; (800e790 <pvPortMalloc+0x188>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	4a18      	ldr	r2, [pc, #96]	; (800e798 <pvPortMalloc+0x190>)
 800e738:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73c:	685a      	ldr	r2, [r3, #4]
 800e73e:	4b13      	ldr	r3, [pc, #76]	; (800e78c <pvPortMalloc+0x184>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	431a      	orrs	r2, r3
 800e744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e746:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74a:	2200      	movs	r2, #0
 800e74c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e74e:	4b13      	ldr	r3, [pc, #76]	; (800e79c <pvPortMalloc+0x194>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	3301      	adds	r3, #1
 800e754:	4a11      	ldr	r2, [pc, #68]	; (800e79c <pvPortMalloc+0x194>)
 800e756:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e758:	f7fe fd08 	bl	800d16c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e75c:	69fb      	ldr	r3, [r7, #28]
 800e75e:	f003 0307 	and.w	r3, r3, #7
 800e762:	2b00      	cmp	r3, #0
 800e764:	d00a      	beq.n	800e77c <pvPortMalloc+0x174>
	__asm volatile
 800e766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76a:	f383 8811 	msr	BASEPRI, r3
 800e76e:	f3bf 8f6f 	isb	sy
 800e772:	f3bf 8f4f 	dsb	sy
 800e776:	60fb      	str	r3, [r7, #12]
}
 800e778:	bf00      	nop
 800e77a:	e7fe      	b.n	800e77a <pvPortMalloc+0x172>
	return pvReturn;
 800e77c:	69fb      	ldr	r3, [r7, #28]
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3728      	adds	r7, #40	; 0x28
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}
 800e786:	bf00      	nop
 800e788:	20005814 	.word	0x20005814
 800e78c:	20005828 	.word	0x20005828
 800e790:	20005818 	.word	0x20005818
 800e794:	2000580c 	.word	0x2000580c
 800e798:	2000581c 	.word	0x2000581c
 800e79c:	20005820 	.word	0x20005820

0800e7a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b086      	sub	sp, #24
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d04d      	beq.n	800e84e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e7b2:	2308      	movs	r3, #8
 800e7b4:	425b      	negs	r3, r3
 800e7b6:	697a      	ldr	r2, [r7, #20]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	685a      	ldr	r2, [r3, #4]
 800e7c4:	4b24      	ldr	r3, [pc, #144]	; (800e858 <vPortFree+0xb8>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	4013      	ands	r3, r2
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d10a      	bne.n	800e7e4 <vPortFree+0x44>
	__asm volatile
 800e7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d2:	f383 8811 	msr	BASEPRI, r3
 800e7d6:	f3bf 8f6f 	isb	sy
 800e7da:	f3bf 8f4f 	dsb	sy
 800e7de:	60fb      	str	r3, [r7, #12]
}
 800e7e0:	bf00      	nop
 800e7e2:	e7fe      	b.n	800e7e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d00a      	beq.n	800e802 <vPortFree+0x62>
	__asm volatile
 800e7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f0:	f383 8811 	msr	BASEPRI, r3
 800e7f4:	f3bf 8f6f 	isb	sy
 800e7f8:	f3bf 8f4f 	dsb	sy
 800e7fc:	60bb      	str	r3, [r7, #8]
}
 800e7fe:	bf00      	nop
 800e800:	e7fe      	b.n	800e800 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	685a      	ldr	r2, [r3, #4]
 800e806:	4b14      	ldr	r3, [pc, #80]	; (800e858 <vPortFree+0xb8>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	4013      	ands	r3, r2
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d01e      	beq.n	800e84e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d11a      	bne.n	800e84e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	685a      	ldr	r2, [r3, #4]
 800e81c:	4b0e      	ldr	r3, [pc, #56]	; (800e858 <vPortFree+0xb8>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	43db      	mvns	r3, r3
 800e822:	401a      	ands	r2, r3
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e828:	f7fe fc92 	bl	800d150 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	685a      	ldr	r2, [r3, #4]
 800e830:	4b0a      	ldr	r3, [pc, #40]	; (800e85c <vPortFree+0xbc>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4413      	add	r3, r2
 800e836:	4a09      	ldr	r2, [pc, #36]	; (800e85c <vPortFree+0xbc>)
 800e838:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e83a:	6938      	ldr	r0, [r7, #16]
 800e83c:	f000 f874 	bl	800e928 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e840:	4b07      	ldr	r3, [pc, #28]	; (800e860 <vPortFree+0xc0>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	3301      	adds	r3, #1
 800e846:	4a06      	ldr	r2, [pc, #24]	; (800e860 <vPortFree+0xc0>)
 800e848:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e84a:	f7fe fc8f 	bl	800d16c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e84e:	bf00      	nop
 800e850:	3718      	adds	r7, #24
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	20005828 	.word	0x20005828
 800e85c:	20005818 	.word	0x20005818
 800e860:	20005824 	.word	0x20005824

0800e864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e864:	b480      	push	{r7}
 800e866:	b085      	sub	sp, #20
 800e868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e86a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e86e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e870:	4b27      	ldr	r3, [pc, #156]	; (800e910 <prvHeapInit+0xac>)
 800e872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f003 0307 	and.w	r3, r3, #7
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d00c      	beq.n	800e898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	3307      	adds	r3, #7
 800e882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f023 0307 	bic.w	r3, r3, #7
 800e88a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e88c:	68ba      	ldr	r2, [r7, #8]
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	1ad3      	subs	r3, r2, r3
 800e892:	4a1f      	ldr	r2, [pc, #124]	; (800e910 <prvHeapInit+0xac>)
 800e894:	4413      	add	r3, r2
 800e896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e89c:	4a1d      	ldr	r2, [pc, #116]	; (800e914 <prvHeapInit+0xb0>)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e8a2:	4b1c      	ldr	r3, [pc, #112]	; (800e914 <prvHeapInit+0xb0>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	68ba      	ldr	r2, [r7, #8]
 800e8ac:	4413      	add	r3, r2
 800e8ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e8b0:	2208      	movs	r2, #8
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	1a9b      	subs	r3, r3, r2
 800e8b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	f023 0307 	bic.w	r3, r3, #7
 800e8be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	4a15      	ldr	r2, [pc, #84]	; (800e918 <prvHeapInit+0xb4>)
 800e8c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e8c6:	4b14      	ldr	r3, [pc, #80]	; (800e918 <prvHeapInit+0xb4>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e8ce:	4b12      	ldr	r3, [pc, #72]	; (800e918 <prvHeapInit+0xb4>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	68fa      	ldr	r2, [r7, #12]
 800e8de:	1ad2      	subs	r2, r2, r3
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e8e4:	4b0c      	ldr	r3, [pc, #48]	; (800e918 <prvHeapInit+0xb4>)
 800e8e6:	681a      	ldr	r2, [r3, #0]
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	4a0a      	ldr	r2, [pc, #40]	; (800e91c <prvHeapInit+0xb8>)
 800e8f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	4a09      	ldr	r2, [pc, #36]	; (800e920 <prvHeapInit+0xbc>)
 800e8fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e8fc:	4b09      	ldr	r3, [pc, #36]	; (800e924 <prvHeapInit+0xc0>)
 800e8fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e902:	601a      	str	r2, [r3, #0]
}
 800e904:	bf00      	nop
 800e906:	3714      	adds	r7, #20
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr
 800e910:	20001c0c 	.word	0x20001c0c
 800e914:	2000580c 	.word	0x2000580c
 800e918:	20005814 	.word	0x20005814
 800e91c:	2000581c 	.word	0x2000581c
 800e920:	20005818 	.word	0x20005818
 800e924:	20005828 	.word	0x20005828

0800e928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e928:	b480      	push	{r7}
 800e92a:	b085      	sub	sp, #20
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e930:	4b28      	ldr	r3, [pc, #160]	; (800e9d4 <prvInsertBlockIntoFreeList+0xac>)
 800e932:	60fb      	str	r3, [r7, #12]
 800e934:	e002      	b.n	800e93c <prvInsertBlockIntoFreeList+0x14>
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	60fb      	str	r3, [r7, #12]
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	429a      	cmp	r2, r3
 800e944:	d8f7      	bhi.n	800e936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	68ba      	ldr	r2, [r7, #8]
 800e950:	4413      	add	r3, r2
 800e952:	687a      	ldr	r2, [r7, #4]
 800e954:	429a      	cmp	r2, r3
 800e956:	d108      	bne.n	800e96a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	685a      	ldr	r2, [r3, #4]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	441a      	add	r2, r3
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	685b      	ldr	r3, [r3, #4]
 800e972:	68ba      	ldr	r2, [r7, #8]
 800e974:	441a      	add	r2, r3
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d118      	bne.n	800e9b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	4b15      	ldr	r3, [pc, #84]	; (800e9d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	429a      	cmp	r2, r3
 800e988:	d00d      	beq.n	800e9a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	685a      	ldr	r2, [r3, #4]
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	685b      	ldr	r3, [r3, #4]
 800e994:	441a      	add	r2, r3
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	681a      	ldr	r2, [r3, #0]
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	601a      	str	r2, [r3, #0]
 800e9a4:	e008      	b.n	800e9b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e9a6:	4b0c      	ldr	r3, [pc, #48]	; (800e9d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	601a      	str	r2, [r3, #0]
 800e9ae:	e003      	b.n	800e9b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e9b8:	68fa      	ldr	r2, [r7, #12]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d002      	beq.n	800e9c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	687a      	ldr	r2, [r7, #4]
 800e9c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e9c6:	bf00      	nop
 800e9c8:	3714      	adds	r7, #20
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr
 800e9d2:	bf00      	nop
 800e9d4:	2000580c 	.word	0x2000580c
 800e9d8:	20005814 	.word	0x20005814

0800e9dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	4912      	ldr	r1, [pc, #72]	; (800ea2c <MX_USB_DEVICE_Init+0x50>)
 800e9e4:	4812      	ldr	r0, [pc, #72]	; (800ea30 <MX_USB_DEVICE_Init+0x54>)
 800e9e6:	f7fb fdc1 	bl	800a56c <USBD_Init>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d001      	beq.n	800e9f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e9f0:	f7f4 f89c 	bl	8002b2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e9f4:	490f      	ldr	r1, [pc, #60]	; (800ea34 <MX_USB_DEVICE_Init+0x58>)
 800e9f6:	480e      	ldr	r0, [pc, #56]	; (800ea30 <MX_USB_DEVICE_Init+0x54>)
 800e9f8:	f7fb fde8 	bl	800a5cc <USBD_RegisterClass>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d001      	beq.n	800ea06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ea02:	f7f4 f893 	bl	8002b2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ea06:	490c      	ldr	r1, [pc, #48]	; (800ea38 <MX_USB_DEVICE_Init+0x5c>)
 800ea08:	4809      	ldr	r0, [pc, #36]	; (800ea30 <MX_USB_DEVICE_Init+0x54>)
 800ea0a:	f7fb fd1f 	bl	800a44c <USBD_CDC_RegisterInterface>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d001      	beq.n	800ea18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ea14:	f7f4 f88a 	bl	8002b2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ea18:	4805      	ldr	r0, [pc, #20]	; (800ea30 <MX_USB_DEVICE_Init+0x54>)
 800ea1a:	f7fb fe0d 	bl	800a638 <USBD_Start>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d001      	beq.n	800ea28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ea24:	f7f4 f882 	bl	8002b2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ea28:	bf00      	nop
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	200005d8 	.word	0x200005d8
 800ea30:	2000582c 	.word	0x2000582c
 800ea34:	20000540 	.word	0x20000540
 800ea38:	200005c4 	.word	0x200005c4

0800ea3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ea40:	2200      	movs	r2, #0
 800ea42:	4905      	ldr	r1, [pc, #20]	; (800ea58 <CDC_Init_FS+0x1c>)
 800ea44:	4805      	ldr	r0, [pc, #20]	; (800ea5c <CDC_Init_FS+0x20>)
 800ea46:	f7fb fd1b 	bl	800a480 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ea4a:	4905      	ldr	r1, [pc, #20]	; (800ea60 <CDC_Init_FS+0x24>)
 800ea4c:	4803      	ldr	r0, [pc, #12]	; (800ea5c <CDC_Init_FS+0x20>)
 800ea4e:	f7fb fd39 	bl	800a4c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ea52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	bd80      	pop	{r7, pc}
 800ea58:	20005f08 	.word	0x20005f08
 800ea5c:	2000582c 	.word	0x2000582c
 800ea60:	20005b08 	.word	0x20005b08

0800ea64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ea64:	b480      	push	{r7}
 800ea66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ea68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea72:	4770      	bx	lr

0800ea74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b083      	sub	sp, #12
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	6039      	str	r1, [r7, #0]
 800ea7e:	71fb      	strb	r3, [r7, #7]
 800ea80:	4613      	mov	r3, r2
 800ea82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ea84:	79fb      	ldrb	r3, [r7, #7]
 800ea86:	2b23      	cmp	r3, #35	; 0x23
 800ea88:	d84a      	bhi.n	800eb20 <CDC_Control_FS+0xac>
 800ea8a:	a201      	add	r2, pc, #4	; (adr r2, 800ea90 <CDC_Control_FS+0x1c>)
 800ea8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea90:	0800eb21 	.word	0x0800eb21
 800ea94:	0800eb21 	.word	0x0800eb21
 800ea98:	0800eb21 	.word	0x0800eb21
 800ea9c:	0800eb21 	.word	0x0800eb21
 800eaa0:	0800eb21 	.word	0x0800eb21
 800eaa4:	0800eb21 	.word	0x0800eb21
 800eaa8:	0800eb21 	.word	0x0800eb21
 800eaac:	0800eb21 	.word	0x0800eb21
 800eab0:	0800eb21 	.word	0x0800eb21
 800eab4:	0800eb21 	.word	0x0800eb21
 800eab8:	0800eb21 	.word	0x0800eb21
 800eabc:	0800eb21 	.word	0x0800eb21
 800eac0:	0800eb21 	.word	0x0800eb21
 800eac4:	0800eb21 	.word	0x0800eb21
 800eac8:	0800eb21 	.word	0x0800eb21
 800eacc:	0800eb21 	.word	0x0800eb21
 800ead0:	0800eb21 	.word	0x0800eb21
 800ead4:	0800eb21 	.word	0x0800eb21
 800ead8:	0800eb21 	.word	0x0800eb21
 800eadc:	0800eb21 	.word	0x0800eb21
 800eae0:	0800eb21 	.word	0x0800eb21
 800eae4:	0800eb21 	.word	0x0800eb21
 800eae8:	0800eb21 	.word	0x0800eb21
 800eaec:	0800eb21 	.word	0x0800eb21
 800eaf0:	0800eb21 	.word	0x0800eb21
 800eaf4:	0800eb21 	.word	0x0800eb21
 800eaf8:	0800eb21 	.word	0x0800eb21
 800eafc:	0800eb21 	.word	0x0800eb21
 800eb00:	0800eb21 	.word	0x0800eb21
 800eb04:	0800eb21 	.word	0x0800eb21
 800eb08:	0800eb21 	.word	0x0800eb21
 800eb0c:	0800eb21 	.word	0x0800eb21
 800eb10:	0800eb21 	.word	0x0800eb21
 800eb14:	0800eb21 	.word	0x0800eb21
 800eb18:	0800eb21 	.word	0x0800eb21
 800eb1c:	0800eb21 	.word	0x0800eb21
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eb20:	bf00      	nop
  }

  return (USBD_OK);
 800eb22:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	370c      	adds	r7, #12
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr

0800eb30 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800eb3a:	6879      	ldr	r1, [r7, #4]
 800eb3c:	4805      	ldr	r0, [pc, #20]	; (800eb54 <CDC_Receive_FS+0x24>)
 800eb3e:	f7fb fcc1 	bl	800a4c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800eb42:	4804      	ldr	r0, [pc, #16]	; (800eb54 <CDC_Receive_FS+0x24>)
 800eb44:	f7fb fcdc 	bl	800a500 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800eb48:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3708      	adds	r7, #8
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	2000582c 	.word	0x2000582c

0800eb58 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b087      	sub	sp, #28
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	60f8      	str	r0, [r7, #12]
 800eb60:	60b9      	str	r1, [r7, #8]
 800eb62:	4613      	mov	r3, r2
 800eb64:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eb66:	2300      	movs	r3, #0
 800eb68:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eb6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	371c      	adds	r7, #28
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr
	...

0800eb7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b083      	sub	sp, #12
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	4603      	mov	r3, r0
 800eb84:	6039      	str	r1, [r7, #0]
 800eb86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	2212      	movs	r2, #18
 800eb8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eb8e:	4b03      	ldr	r3, [pc, #12]	; (800eb9c <USBD_FS_DeviceDescriptor+0x20>)
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	370c      	adds	r7, #12
 800eb94:	46bd      	mov	sp, r7
 800eb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9a:	4770      	bx	lr
 800eb9c:	200005f4 	.word	0x200005f4

0800eba0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b083      	sub	sp, #12
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	4603      	mov	r3, r0
 800eba8:	6039      	str	r1, [r7, #0]
 800ebaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	2204      	movs	r2, #4
 800ebb0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ebb2:	4b03      	ldr	r3, [pc, #12]	; (800ebc0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	370c      	adds	r7, #12
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr
 800ebc0:	20000608 	.word	0x20000608

0800ebc4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	4603      	mov	r3, r0
 800ebcc:	6039      	str	r1, [r7, #0]
 800ebce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ebd0:	79fb      	ldrb	r3, [r7, #7]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d105      	bne.n	800ebe2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ebd6:	683a      	ldr	r2, [r7, #0]
 800ebd8:	4907      	ldr	r1, [pc, #28]	; (800ebf8 <USBD_FS_ProductStrDescriptor+0x34>)
 800ebda:	4808      	ldr	r0, [pc, #32]	; (800ebfc <USBD_FS_ProductStrDescriptor+0x38>)
 800ebdc:	f7fc fed8 	bl	800b990 <USBD_GetString>
 800ebe0:	e004      	b.n	800ebec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ebe2:	683a      	ldr	r2, [r7, #0]
 800ebe4:	4904      	ldr	r1, [pc, #16]	; (800ebf8 <USBD_FS_ProductStrDescriptor+0x34>)
 800ebe6:	4805      	ldr	r0, [pc, #20]	; (800ebfc <USBD_FS_ProductStrDescriptor+0x38>)
 800ebe8:	f7fc fed2 	bl	800b990 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebec:	4b02      	ldr	r3, [pc, #8]	; (800ebf8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3708      	adds	r7, #8
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	20006308 	.word	0x20006308
 800ebfc:	0801009c 	.word	0x0801009c

0800ec00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	4603      	mov	r3, r0
 800ec08:	6039      	str	r1, [r7, #0]
 800ec0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ec0c:	683a      	ldr	r2, [r7, #0]
 800ec0e:	4904      	ldr	r1, [pc, #16]	; (800ec20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ec10:	4804      	ldr	r0, [pc, #16]	; (800ec24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ec12:	f7fc febd 	bl	800b990 <USBD_GetString>
  return USBD_StrDesc;
 800ec16:	4b02      	ldr	r3, [pc, #8]	; (800ec20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3708      	adds	r7, #8
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	20006308 	.word	0x20006308
 800ec24:	080100b4 	.word	0x080100b4

0800ec28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	4603      	mov	r3, r0
 800ec30:	6039      	str	r1, [r7, #0]
 800ec32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	221a      	movs	r2, #26
 800ec38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ec3a:	f000 f843 	bl	800ecc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ec3e:	4b02      	ldr	r3, [pc, #8]	; (800ec48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3708      	adds	r7, #8
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	2000060c 	.word	0x2000060c

0800ec4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	4603      	mov	r3, r0
 800ec54:	6039      	str	r1, [r7, #0]
 800ec56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ec58:	79fb      	ldrb	r3, [r7, #7]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d105      	bne.n	800ec6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ec5e:	683a      	ldr	r2, [r7, #0]
 800ec60:	4907      	ldr	r1, [pc, #28]	; (800ec80 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ec62:	4808      	ldr	r0, [pc, #32]	; (800ec84 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ec64:	f7fc fe94 	bl	800b990 <USBD_GetString>
 800ec68:	e004      	b.n	800ec74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ec6a:	683a      	ldr	r2, [r7, #0]
 800ec6c:	4904      	ldr	r1, [pc, #16]	; (800ec80 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ec6e:	4805      	ldr	r0, [pc, #20]	; (800ec84 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ec70:	f7fc fe8e 	bl	800b990 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec74:	4b02      	ldr	r3, [pc, #8]	; (800ec80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3708      	adds	r7, #8
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
 800ec7e:	bf00      	nop
 800ec80:	20006308 	.word	0x20006308
 800ec84:	080100c8 	.word	0x080100c8

0800ec88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b082      	sub	sp, #8
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	4603      	mov	r3, r0
 800ec90:	6039      	str	r1, [r7, #0]
 800ec92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ec94:	79fb      	ldrb	r3, [r7, #7]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d105      	bne.n	800eca6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ec9a:	683a      	ldr	r2, [r7, #0]
 800ec9c:	4907      	ldr	r1, [pc, #28]	; (800ecbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ec9e:	4808      	ldr	r0, [pc, #32]	; (800ecc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eca0:	f7fc fe76 	bl	800b990 <USBD_GetString>
 800eca4:	e004      	b.n	800ecb0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eca6:	683a      	ldr	r2, [r7, #0]
 800eca8:	4904      	ldr	r1, [pc, #16]	; (800ecbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ecaa:	4805      	ldr	r0, [pc, #20]	; (800ecc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ecac:	f7fc fe70 	bl	800b990 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ecb0:	4b02      	ldr	r3, [pc, #8]	; (800ecbc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3708      	adds	r7, #8
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	20006308 	.word	0x20006308
 800ecc0:	080100d4 	.word	0x080100d4

0800ecc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ecca:	4b0f      	ldr	r3, [pc, #60]	; (800ed08 <Get_SerialNum+0x44>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ecd0:	4b0e      	ldr	r3, [pc, #56]	; (800ed0c <Get_SerialNum+0x48>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ecd6:	4b0e      	ldr	r3, [pc, #56]	; (800ed10 <Get_SerialNum+0x4c>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ecdc:	68fa      	ldr	r2, [r7, #12]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	4413      	add	r3, r2
 800ece2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d009      	beq.n	800ecfe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ecea:	2208      	movs	r2, #8
 800ecec:	4909      	ldr	r1, [pc, #36]	; (800ed14 <Get_SerialNum+0x50>)
 800ecee:	68f8      	ldr	r0, [r7, #12]
 800ecf0:	f000 f814 	bl	800ed1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ecf4:	2204      	movs	r2, #4
 800ecf6:	4908      	ldr	r1, [pc, #32]	; (800ed18 <Get_SerialNum+0x54>)
 800ecf8:	68b8      	ldr	r0, [r7, #8]
 800ecfa:	f000 f80f 	bl	800ed1c <IntToUnicode>
  }
}
 800ecfe:	bf00      	nop
 800ed00:	3710      	adds	r7, #16
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop
 800ed08:	1fff7a10 	.word	0x1fff7a10
 800ed0c:	1fff7a14 	.word	0x1fff7a14
 800ed10:	1fff7a18 	.word	0x1fff7a18
 800ed14:	2000060e 	.word	0x2000060e
 800ed18:	2000061e 	.word	0x2000061e

0800ed1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b087      	sub	sp, #28
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	60f8      	str	r0, [r7, #12]
 800ed24:	60b9      	str	r1, [r7, #8]
 800ed26:	4613      	mov	r3, r2
 800ed28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ed2e:	2300      	movs	r3, #0
 800ed30:	75fb      	strb	r3, [r7, #23]
 800ed32:	e027      	b.n	800ed84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	0f1b      	lsrs	r3, r3, #28
 800ed38:	2b09      	cmp	r3, #9
 800ed3a:	d80b      	bhi.n	800ed54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	0f1b      	lsrs	r3, r3, #28
 800ed40:	b2da      	uxtb	r2, r3
 800ed42:	7dfb      	ldrb	r3, [r7, #23]
 800ed44:	005b      	lsls	r3, r3, #1
 800ed46:	4619      	mov	r1, r3
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	440b      	add	r3, r1
 800ed4c:	3230      	adds	r2, #48	; 0x30
 800ed4e:	b2d2      	uxtb	r2, r2
 800ed50:	701a      	strb	r2, [r3, #0]
 800ed52:	e00a      	b.n	800ed6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	0f1b      	lsrs	r3, r3, #28
 800ed58:	b2da      	uxtb	r2, r3
 800ed5a:	7dfb      	ldrb	r3, [r7, #23]
 800ed5c:	005b      	lsls	r3, r3, #1
 800ed5e:	4619      	mov	r1, r3
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	440b      	add	r3, r1
 800ed64:	3237      	adds	r2, #55	; 0x37
 800ed66:	b2d2      	uxtb	r2, r2
 800ed68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	011b      	lsls	r3, r3, #4
 800ed6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ed70:	7dfb      	ldrb	r3, [r7, #23]
 800ed72:	005b      	lsls	r3, r3, #1
 800ed74:	3301      	adds	r3, #1
 800ed76:	68ba      	ldr	r2, [r7, #8]
 800ed78:	4413      	add	r3, r2
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ed7e:	7dfb      	ldrb	r3, [r7, #23]
 800ed80:	3301      	adds	r3, #1
 800ed82:	75fb      	strb	r3, [r7, #23]
 800ed84:	7dfa      	ldrb	r2, [r7, #23]
 800ed86:	79fb      	ldrb	r3, [r7, #7]
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d3d3      	bcc.n	800ed34 <IntToUnicode+0x18>
  }
}
 800ed8c:	bf00      	nop
 800ed8e:	bf00      	nop
 800ed90:	371c      	adds	r7, #28
 800ed92:	46bd      	mov	sp, r7
 800ed94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed98:	4770      	bx	lr
	...

0800ed9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b08a      	sub	sp, #40	; 0x28
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eda4:	f107 0314 	add.w	r3, r7, #20
 800eda8:	2200      	movs	r2, #0
 800edaa:	601a      	str	r2, [r3, #0]
 800edac:	605a      	str	r2, [r3, #4]
 800edae:	609a      	str	r2, [r3, #8]
 800edb0:	60da      	str	r2, [r3, #12]
 800edb2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800edbc:	d13a      	bne.n	800ee34 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800edbe:	2300      	movs	r3, #0
 800edc0:	613b      	str	r3, [r7, #16]
 800edc2:	4b1e      	ldr	r3, [pc, #120]	; (800ee3c <HAL_PCD_MspInit+0xa0>)
 800edc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edc6:	4a1d      	ldr	r2, [pc, #116]	; (800ee3c <HAL_PCD_MspInit+0xa0>)
 800edc8:	f043 0301 	orr.w	r3, r3, #1
 800edcc:	6313      	str	r3, [r2, #48]	; 0x30
 800edce:	4b1b      	ldr	r3, [pc, #108]	; (800ee3c <HAL_PCD_MspInit+0xa0>)
 800edd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edd2:	f003 0301 	and.w	r3, r3, #1
 800edd6:	613b      	str	r3, [r7, #16]
 800edd8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800edda:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800edde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ede0:	2302      	movs	r3, #2
 800ede2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ede4:	2300      	movs	r3, #0
 800ede6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ede8:	2303      	movs	r3, #3
 800edea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800edec:	230a      	movs	r3, #10
 800edee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800edf0:	f107 0314 	add.w	r3, r7, #20
 800edf4:	4619      	mov	r1, r3
 800edf6:	4812      	ldr	r0, [pc, #72]	; (800ee40 <HAL_PCD_MspInit+0xa4>)
 800edf8:	f7f4 fd40 	bl	800387c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800edfc:	4b0f      	ldr	r3, [pc, #60]	; (800ee3c <HAL_PCD_MspInit+0xa0>)
 800edfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee00:	4a0e      	ldr	r2, [pc, #56]	; (800ee3c <HAL_PCD_MspInit+0xa0>)
 800ee02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee06:	6353      	str	r3, [r2, #52]	; 0x34
 800ee08:	2300      	movs	r3, #0
 800ee0a:	60fb      	str	r3, [r7, #12]
 800ee0c:	4b0b      	ldr	r3, [pc, #44]	; (800ee3c <HAL_PCD_MspInit+0xa0>)
 800ee0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee10:	4a0a      	ldr	r2, [pc, #40]	; (800ee3c <HAL_PCD_MspInit+0xa0>)
 800ee12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ee16:	6453      	str	r3, [r2, #68]	; 0x44
 800ee18:	4b08      	ldr	r3, [pc, #32]	; (800ee3c <HAL_PCD_MspInit+0xa0>)
 800ee1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ee20:	60fb      	str	r3, [r7, #12]
 800ee22:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ee24:	2200      	movs	r2, #0
 800ee26:	2105      	movs	r1, #5
 800ee28:	2043      	movs	r0, #67	; 0x43
 800ee2a:	f7f4 fcfd 	bl	8003828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ee2e:	2043      	movs	r0, #67	; 0x43
 800ee30:	f7f4 fd16 	bl	8003860 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ee34:	bf00      	nop
 800ee36:	3728      	adds	r7, #40	; 0x28
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}
 800ee3c:	40023800 	.word	0x40023800
 800ee40:	40020000 	.word	0x40020000

0800ee44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ee58:	4619      	mov	r1, r3
 800ee5a:	4610      	mov	r0, r2
 800ee5c:	f7fb fc39 	bl	800a6d2 <USBD_LL_SetupStage>
}
 800ee60:	bf00      	nop
 800ee62:	3708      	adds	r7, #8
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}

0800ee68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	460b      	mov	r3, r1
 800ee72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ee7a:	78fa      	ldrb	r2, [r7, #3]
 800ee7c:	6879      	ldr	r1, [r7, #4]
 800ee7e:	4613      	mov	r3, r2
 800ee80:	00db      	lsls	r3, r3, #3
 800ee82:	4413      	add	r3, r2
 800ee84:	009b      	lsls	r3, r3, #2
 800ee86:	440b      	add	r3, r1
 800ee88:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	78fb      	ldrb	r3, [r7, #3]
 800ee90:	4619      	mov	r1, r3
 800ee92:	f7fb fc73 	bl	800a77c <USBD_LL_DataOutStage>
}
 800ee96:	bf00      	nop
 800ee98:	3708      	adds	r7, #8
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}

0800ee9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee9e:	b580      	push	{r7, lr}
 800eea0:	b082      	sub	sp, #8
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]
 800eea6:	460b      	mov	r3, r1
 800eea8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800eeb0:	78fa      	ldrb	r2, [r7, #3]
 800eeb2:	6879      	ldr	r1, [r7, #4]
 800eeb4:	4613      	mov	r3, r2
 800eeb6:	00db      	lsls	r3, r3, #3
 800eeb8:	4413      	add	r3, r2
 800eeba:	009b      	lsls	r3, r3, #2
 800eebc:	440b      	add	r3, r1
 800eebe:	334c      	adds	r3, #76	; 0x4c
 800eec0:	681a      	ldr	r2, [r3, #0]
 800eec2:	78fb      	ldrb	r3, [r7, #3]
 800eec4:	4619      	mov	r1, r3
 800eec6:	f7fb fd0c 	bl	800a8e2 <USBD_LL_DataInStage>
}
 800eeca:	bf00      	nop
 800eecc:	3708      	adds	r7, #8
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}

0800eed2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eed2:	b580      	push	{r7, lr}
 800eed4:	b082      	sub	sp, #8
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7fb fe40 	bl	800ab66 <USBD_LL_SOF>
}
 800eee6:	bf00      	nop
 800eee8:	3708      	adds	r7, #8
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}

0800eeee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eeee:	b580      	push	{r7, lr}
 800eef0:	b084      	sub	sp, #16
 800eef2:	af00      	add	r7, sp, #0
 800eef4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eef6:	2301      	movs	r3, #1
 800eef8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	2b02      	cmp	r3, #2
 800ef00:	d001      	beq.n	800ef06 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ef02:	f7f3 fe13 	bl	8002b2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef0c:	7bfa      	ldrb	r2, [r7, #15]
 800ef0e:	4611      	mov	r1, r2
 800ef10:	4618      	mov	r0, r3
 800ef12:	f7fb fdea 	bl	800aaea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7fb fd92 	bl	800aa46 <USBD_LL_Reset>
}
 800ef22:	bf00      	nop
 800ef24:	3710      	adds	r7, #16
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
	...

0800ef2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7fb fde5 	bl	800ab0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	6812      	ldr	r2, [r2, #0]
 800ef4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ef52:	f043 0301 	orr.w	r3, r3, #1
 800ef56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6a1b      	ldr	r3, [r3, #32]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d005      	beq.n	800ef6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef60:	4b04      	ldr	r3, [pc, #16]	; (800ef74 <HAL_PCD_SuspendCallback+0x48>)
 800ef62:	691b      	ldr	r3, [r3, #16]
 800ef64:	4a03      	ldr	r2, [pc, #12]	; (800ef74 <HAL_PCD_SuspendCallback+0x48>)
 800ef66:	f043 0306 	orr.w	r3, r3, #6
 800ef6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ef6c:	bf00      	nop
 800ef6e:	3708      	adds	r7, #8
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}
 800ef74:	e000ed00 	.word	0xe000ed00

0800ef78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b082      	sub	sp, #8
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fb fdd5 	bl	800ab36 <USBD_LL_Resume>
}
 800ef8c:	bf00      	nop
 800ef8e:	3708      	adds	r7, #8
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	460b      	mov	r3, r1
 800ef9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efa6:	78fa      	ldrb	r2, [r7, #3]
 800efa8:	4611      	mov	r1, r2
 800efaa:	4618      	mov	r0, r3
 800efac:	f7fb fe2d 	bl	800ac0a <USBD_LL_IsoOUTIncomplete>
}
 800efb0:	bf00      	nop
 800efb2:	3708      	adds	r7, #8
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}

0800efb8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	460b      	mov	r3, r1
 800efc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efca:	78fa      	ldrb	r2, [r7, #3]
 800efcc:	4611      	mov	r1, r2
 800efce:	4618      	mov	r0, r3
 800efd0:	f7fb fde9 	bl	800aba6 <USBD_LL_IsoINIncomplete>
}
 800efd4:	bf00      	nop
 800efd6:	3708      	adds	r7, #8
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efea:	4618      	mov	r0, r3
 800efec:	f7fb fe3f 	bl	800ac6e <USBD_LL_DevConnected>
}
 800eff0:	bf00      	nop
 800eff2:	3708      	adds	r7, #8
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f006:	4618      	mov	r0, r3
 800f008:	f7fb fe3c 	bl	800ac84 <USBD_LL_DevDisconnected>
}
 800f00c:	bf00      	nop
 800f00e:	3708      	adds	r7, #8
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b082      	sub	sp, #8
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d13c      	bne.n	800f09e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f024:	4a20      	ldr	r2, [pc, #128]	; (800f0a8 <USBD_LL_Init+0x94>)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	4a1e      	ldr	r2, [pc, #120]	; (800f0a8 <USBD_LL_Init+0x94>)
 800f030:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f034:	4b1c      	ldr	r3, [pc, #112]	; (800f0a8 <USBD_LL_Init+0x94>)
 800f036:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f03a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f03c:	4b1a      	ldr	r3, [pc, #104]	; (800f0a8 <USBD_LL_Init+0x94>)
 800f03e:	2204      	movs	r2, #4
 800f040:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f042:	4b19      	ldr	r3, [pc, #100]	; (800f0a8 <USBD_LL_Init+0x94>)
 800f044:	2202      	movs	r2, #2
 800f046:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f048:	4b17      	ldr	r3, [pc, #92]	; (800f0a8 <USBD_LL_Init+0x94>)
 800f04a:	2200      	movs	r2, #0
 800f04c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f04e:	4b16      	ldr	r3, [pc, #88]	; (800f0a8 <USBD_LL_Init+0x94>)
 800f050:	2202      	movs	r2, #2
 800f052:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f054:	4b14      	ldr	r3, [pc, #80]	; (800f0a8 <USBD_LL_Init+0x94>)
 800f056:	2200      	movs	r2, #0
 800f058:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f05a:	4b13      	ldr	r3, [pc, #76]	; (800f0a8 <USBD_LL_Init+0x94>)
 800f05c:	2200      	movs	r2, #0
 800f05e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f060:	4b11      	ldr	r3, [pc, #68]	; (800f0a8 <USBD_LL_Init+0x94>)
 800f062:	2200      	movs	r2, #0
 800f064:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f066:	4b10      	ldr	r3, [pc, #64]	; (800f0a8 <USBD_LL_Init+0x94>)
 800f068:	2200      	movs	r2, #0
 800f06a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f06c:	4b0e      	ldr	r3, [pc, #56]	; (800f0a8 <USBD_LL_Init+0x94>)
 800f06e:	2200      	movs	r2, #0
 800f070:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f072:	480d      	ldr	r0, [pc, #52]	; (800f0a8 <USBD_LL_Init+0x94>)
 800f074:	f7f5 fd8f 	bl	8004b96 <HAL_PCD_Init>
 800f078:	4603      	mov	r3, r0
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d001      	beq.n	800f082 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f07e:	f7f3 fd55 	bl	8002b2c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f082:	2180      	movs	r1, #128	; 0x80
 800f084:	4808      	ldr	r0, [pc, #32]	; (800f0a8 <USBD_LL_Init+0x94>)
 800f086:	f7f6 ffe6 	bl	8006056 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f08a:	2240      	movs	r2, #64	; 0x40
 800f08c:	2100      	movs	r1, #0
 800f08e:	4806      	ldr	r0, [pc, #24]	; (800f0a8 <USBD_LL_Init+0x94>)
 800f090:	f7f6 ff9a 	bl	8005fc8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f094:	2280      	movs	r2, #128	; 0x80
 800f096:	2101      	movs	r1, #1
 800f098:	4803      	ldr	r0, [pc, #12]	; (800f0a8 <USBD_LL_Init+0x94>)
 800f09a:	f7f6 ff95 	bl	8005fc8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f09e:	2300      	movs	r3, #0
}
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	3708      	adds	r7, #8
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}
 800f0a8:	20006508 	.word	0x20006508

0800f0ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7f5 fe84 	bl	8004dd0 <HAL_PCD_Start>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0cc:	7bfb      	ldrb	r3, [r7, #15]
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f000 f942 	bl	800f358 <USBD_Get_USB_Status>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3710      	adds	r7, #16
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}

0800f0e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f0e2:	b580      	push	{r7, lr}
 800f0e4:	b084      	sub	sp, #16
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
 800f0ea:	4608      	mov	r0, r1
 800f0ec:	4611      	mov	r1, r2
 800f0ee:	461a      	mov	r2, r3
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	70fb      	strb	r3, [r7, #3]
 800f0f4:	460b      	mov	r3, r1
 800f0f6:	70bb      	strb	r3, [r7, #2]
 800f0f8:	4613      	mov	r3, r2
 800f0fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f100:	2300      	movs	r3, #0
 800f102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f10a:	78bb      	ldrb	r3, [r7, #2]
 800f10c:	883a      	ldrh	r2, [r7, #0]
 800f10e:	78f9      	ldrb	r1, [r7, #3]
 800f110:	f7f6 fb55 	bl	80057be <HAL_PCD_EP_Open>
 800f114:	4603      	mov	r3, r0
 800f116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f118:	7bfb      	ldrb	r3, [r7, #15]
 800f11a:	4618      	mov	r0, r3
 800f11c:	f000 f91c 	bl	800f358 <USBD_Get_USB_Status>
 800f120:	4603      	mov	r3, r0
 800f122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f124:	7bbb      	ldrb	r3, [r7, #14]
}
 800f126:	4618      	mov	r0, r3
 800f128:	3710      	adds	r7, #16
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}

0800f12e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f12e:	b580      	push	{r7, lr}
 800f130:	b084      	sub	sp, #16
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
 800f136:	460b      	mov	r3, r1
 800f138:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f13a:	2300      	movs	r3, #0
 800f13c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f13e:	2300      	movs	r3, #0
 800f140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f148:	78fa      	ldrb	r2, [r7, #3]
 800f14a:	4611      	mov	r1, r2
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7f6 fb9e 	bl	800588e <HAL_PCD_EP_Close>
 800f152:	4603      	mov	r3, r0
 800f154:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f156:	7bfb      	ldrb	r3, [r7, #15]
 800f158:	4618      	mov	r0, r3
 800f15a:	f000 f8fd 	bl	800f358 <USBD_Get_USB_Status>
 800f15e:	4603      	mov	r3, r0
 800f160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f162:	7bbb      	ldrb	r3, [r7, #14]
}
 800f164:	4618      	mov	r0, r3
 800f166:	3710      	adds	r7, #16
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b084      	sub	sp, #16
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	460b      	mov	r3, r1
 800f176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f178:	2300      	movs	r3, #0
 800f17a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f17c:	2300      	movs	r3, #0
 800f17e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f186:	78fa      	ldrb	r2, [r7, #3]
 800f188:	4611      	mov	r1, r2
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7f6 fc76 	bl	8005a7c <HAL_PCD_EP_SetStall>
 800f190:	4603      	mov	r3, r0
 800f192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f194:	7bfb      	ldrb	r3, [r7, #15]
 800f196:	4618      	mov	r0, r3
 800f198:	f000 f8de 	bl	800f358 <USBD_Get_USB_Status>
 800f19c:	4603      	mov	r3, r0
 800f19e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3710      	adds	r7, #16
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}

0800f1aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1aa:	b580      	push	{r7, lr}
 800f1ac:	b084      	sub	sp, #16
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
 800f1b2:	460b      	mov	r3, r1
 800f1b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f1c4:	78fa      	ldrb	r2, [r7, #3]
 800f1c6:	4611      	mov	r1, r2
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7f6 fcbb 	bl	8005b44 <HAL_PCD_EP_ClrStall>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1d2:	7bfb      	ldrb	r3, [r7, #15]
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f000 f8bf 	bl	800f358 <USBD_Get_USB_Status>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1de:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3710      	adds	r7, #16
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b085      	sub	sp, #20
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	460b      	mov	r3, r1
 800f1f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f1fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f1fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f200:	2b00      	cmp	r3, #0
 800f202:	da0b      	bge.n	800f21c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f204:	78fb      	ldrb	r3, [r7, #3]
 800f206:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f20a:	68f9      	ldr	r1, [r7, #12]
 800f20c:	4613      	mov	r3, r2
 800f20e:	00db      	lsls	r3, r3, #3
 800f210:	4413      	add	r3, r2
 800f212:	009b      	lsls	r3, r3, #2
 800f214:	440b      	add	r3, r1
 800f216:	333e      	adds	r3, #62	; 0x3e
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	e00b      	b.n	800f234 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f21c:	78fb      	ldrb	r3, [r7, #3]
 800f21e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f222:	68f9      	ldr	r1, [r7, #12]
 800f224:	4613      	mov	r3, r2
 800f226:	00db      	lsls	r3, r3, #3
 800f228:	4413      	add	r3, r2
 800f22a:	009b      	lsls	r3, r3, #2
 800f22c:	440b      	add	r3, r1
 800f22e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f232:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f234:	4618      	mov	r0, r3
 800f236:	3714      	adds	r7, #20
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr

0800f240 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b084      	sub	sp, #16
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	460b      	mov	r3, r1
 800f24a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f24c:	2300      	movs	r3, #0
 800f24e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f250:	2300      	movs	r3, #0
 800f252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f25a:	78fa      	ldrb	r2, [r7, #3]
 800f25c:	4611      	mov	r1, r2
 800f25e:	4618      	mov	r0, r3
 800f260:	f7f6 fa88 	bl	8005774 <HAL_PCD_SetAddress>
 800f264:	4603      	mov	r3, r0
 800f266:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f268:	7bfb      	ldrb	r3, [r7, #15]
 800f26a:	4618      	mov	r0, r3
 800f26c:	f000 f874 	bl	800f358 <USBD_Get_USB_Status>
 800f270:	4603      	mov	r3, r0
 800f272:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f274:	7bbb      	ldrb	r3, [r7, #14]
}
 800f276:	4618      	mov	r0, r3
 800f278:	3710      	adds	r7, #16
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}

0800f27e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f27e:	b580      	push	{r7, lr}
 800f280:	b086      	sub	sp, #24
 800f282:	af00      	add	r7, sp, #0
 800f284:	60f8      	str	r0, [r7, #12]
 800f286:	607a      	str	r2, [r7, #4]
 800f288:	603b      	str	r3, [r7, #0]
 800f28a:	460b      	mov	r3, r1
 800f28c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f28e:	2300      	movs	r3, #0
 800f290:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f292:	2300      	movs	r3, #0
 800f294:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f29c:	7af9      	ldrb	r1, [r7, #11]
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	f7f6 fba1 	bl	80059e8 <HAL_PCD_EP_Transmit>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2aa:	7dfb      	ldrb	r3, [r7, #23]
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f000 f853 	bl	800f358 <USBD_Get_USB_Status>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f2b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3718      	adds	r7, #24
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b086      	sub	sp, #24
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	607a      	str	r2, [r7, #4]
 800f2ca:	603b      	str	r3, [r7, #0]
 800f2cc:	460b      	mov	r3, r1
 800f2ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f2de:	7af9      	ldrb	r1, [r7, #11]
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	687a      	ldr	r2, [r7, #4]
 800f2e4:	f7f6 fb1d 	bl	8005922 <HAL_PCD_EP_Receive>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2ec:	7dfb      	ldrb	r3, [r7, #23]
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f000 f832 	bl	800f358 <USBD_Get_USB_Status>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f2f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3718      	adds	r7, #24
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}

0800f302 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f302:	b580      	push	{r7, lr}
 800f304:	b082      	sub	sp, #8
 800f306:	af00      	add	r7, sp, #0
 800f308:	6078      	str	r0, [r7, #4]
 800f30a:	460b      	mov	r3, r1
 800f30c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f314:	78fa      	ldrb	r2, [r7, #3]
 800f316:	4611      	mov	r1, r2
 800f318:	4618      	mov	r0, r3
 800f31a:	f7f6 fb4d 	bl	80059b8 <HAL_PCD_EP_GetRxCount>
 800f31e:	4603      	mov	r3, r0
}
 800f320:	4618      	mov	r0, r3
 800f322:	3708      	adds	r7, #8
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f328:	b480      	push	{r7}
 800f32a:	b083      	sub	sp, #12
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f330:	4b03      	ldr	r3, [pc, #12]	; (800f340 <USBD_static_malloc+0x18>)
}
 800f332:	4618      	mov	r0, r3
 800f334:	370c      	adds	r7, #12
 800f336:	46bd      	mov	sp, r7
 800f338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33c:	4770      	bx	lr
 800f33e:	bf00      	nop
 800f340:	20006a14 	.word	0x20006a14

0800f344 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f344:	b480      	push	{r7}
 800f346:	b083      	sub	sp, #12
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]

}
 800f34c:	bf00      	nop
 800f34e:	370c      	adds	r7, #12
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr

0800f358 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f358:	b480      	push	{r7}
 800f35a:	b085      	sub	sp, #20
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	4603      	mov	r3, r0
 800f360:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f362:	2300      	movs	r3, #0
 800f364:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f366:	79fb      	ldrb	r3, [r7, #7]
 800f368:	2b03      	cmp	r3, #3
 800f36a:	d817      	bhi.n	800f39c <USBD_Get_USB_Status+0x44>
 800f36c:	a201      	add	r2, pc, #4	; (adr r2, 800f374 <USBD_Get_USB_Status+0x1c>)
 800f36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f372:	bf00      	nop
 800f374:	0800f385 	.word	0x0800f385
 800f378:	0800f38b 	.word	0x0800f38b
 800f37c:	0800f391 	.word	0x0800f391
 800f380:	0800f397 	.word	0x0800f397
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f384:	2300      	movs	r3, #0
 800f386:	73fb      	strb	r3, [r7, #15]
    break;
 800f388:	e00b      	b.n	800f3a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f38a:	2303      	movs	r3, #3
 800f38c:	73fb      	strb	r3, [r7, #15]
    break;
 800f38e:	e008      	b.n	800f3a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f390:	2301      	movs	r3, #1
 800f392:	73fb      	strb	r3, [r7, #15]
    break;
 800f394:	e005      	b.n	800f3a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f396:	2303      	movs	r3, #3
 800f398:	73fb      	strb	r3, [r7, #15]
    break;
 800f39a:	e002      	b.n	800f3a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f39c:	2303      	movs	r3, #3
 800f39e:	73fb      	strb	r3, [r7, #15]
    break;
 800f3a0:	bf00      	nop
  }
  return usb_status;
 800f3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3714      	adds	r7, #20
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr

0800f3b0 <__errno>:
 800f3b0:	4b01      	ldr	r3, [pc, #4]	; (800f3b8 <__errno+0x8>)
 800f3b2:	6818      	ldr	r0, [r3, #0]
 800f3b4:	4770      	bx	lr
 800f3b6:	bf00      	nop
 800f3b8:	20000628 	.word	0x20000628

0800f3bc <__libc_init_array>:
 800f3bc:	b570      	push	{r4, r5, r6, lr}
 800f3be:	4d0d      	ldr	r5, [pc, #52]	; (800f3f4 <__libc_init_array+0x38>)
 800f3c0:	4c0d      	ldr	r4, [pc, #52]	; (800f3f8 <__libc_init_array+0x3c>)
 800f3c2:	1b64      	subs	r4, r4, r5
 800f3c4:	10a4      	asrs	r4, r4, #2
 800f3c6:	2600      	movs	r6, #0
 800f3c8:	42a6      	cmp	r6, r4
 800f3ca:	d109      	bne.n	800f3e0 <__libc_init_array+0x24>
 800f3cc:	4d0b      	ldr	r5, [pc, #44]	; (800f3fc <__libc_init_array+0x40>)
 800f3ce:	4c0c      	ldr	r4, [pc, #48]	; (800f400 <__libc_init_array+0x44>)
 800f3d0:	f000 fcba 	bl	800fd48 <_init>
 800f3d4:	1b64      	subs	r4, r4, r5
 800f3d6:	10a4      	asrs	r4, r4, #2
 800f3d8:	2600      	movs	r6, #0
 800f3da:	42a6      	cmp	r6, r4
 800f3dc:	d105      	bne.n	800f3ea <__libc_init_array+0x2e>
 800f3de:	bd70      	pop	{r4, r5, r6, pc}
 800f3e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3e4:	4798      	blx	r3
 800f3e6:	3601      	adds	r6, #1
 800f3e8:	e7ee      	b.n	800f3c8 <__libc_init_array+0xc>
 800f3ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3ee:	4798      	blx	r3
 800f3f0:	3601      	adds	r6, #1
 800f3f2:	e7f2      	b.n	800f3da <__libc_init_array+0x1e>
 800f3f4:	08010584 	.word	0x08010584
 800f3f8:	08010584 	.word	0x08010584
 800f3fc:	08010584 	.word	0x08010584
 800f400:	08010588 	.word	0x08010588

0800f404 <malloc>:
 800f404:	4b02      	ldr	r3, [pc, #8]	; (800f410 <malloc+0xc>)
 800f406:	4601      	mov	r1, r0
 800f408:	6818      	ldr	r0, [r3, #0]
 800f40a:	f000 b88d 	b.w	800f528 <_malloc_r>
 800f40e:	bf00      	nop
 800f410:	20000628 	.word	0x20000628

0800f414 <free>:
 800f414:	4b02      	ldr	r3, [pc, #8]	; (800f420 <free+0xc>)
 800f416:	4601      	mov	r1, r0
 800f418:	6818      	ldr	r0, [r3, #0]
 800f41a:	f000 b819 	b.w	800f450 <_free_r>
 800f41e:	bf00      	nop
 800f420:	20000628 	.word	0x20000628

0800f424 <memcpy>:
 800f424:	440a      	add	r2, r1
 800f426:	4291      	cmp	r1, r2
 800f428:	f100 33ff 	add.w	r3, r0, #4294967295
 800f42c:	d100      	bne.n	800f430 <memcpy+0xc>
 800f42e:	4770      	bx	lr
 800f430:	b510      	push	{r4, lr}
 800f432:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f436:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f43a:	4291      	cmp	r1, r2
 800f43c:	d1f9      	bne.n	800f432 <memcpy+0xe>
 800f43e:	bd10      	pop	{r4, pc}

0800f440 <memset>:
 800f440:	4402      	add	r2, r0
 800f442:	4603      	mov	r3, r0
 800f444:	4293      	cmp	r3, r2
 800f446:	d100      	bne.n	800f44a <memset+0xa>
 800f448:	4770      	bx	lr
 800f44a:	f803 1b01 	strb.w	r1, [r3], #1
 800f44e:	e7f9      	b.n	800f444 <memset+0x4>

0800f450 <_free_r>:
 800f450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f452:	2900      	cmp	r1, #0
 800f454:	d044      	beq.n	800f4e0 <_free_r+0x90>
 800f456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f45a:	9001      	str	r0, [sp, #4]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	f1a1 0404 	sub.w	r4, r1, #4
 800f462:	bfb8      	it	lt
 800f464:	18e4      	addlt	r4, r4, r3
 800f466:	f000 f91f 	bl	800f6a8 <__malloc_lock>
 800f46a:	4a1e      	ldr	r2, [pc, #120]	; (800f4e4 <_free_r+0x94>)
 800f46c:	9801      	ldr	r0, [sp, #4]
 800f46e:	6813      	ldr	r3, [r2, #0]
 800f470:	b933      	cbnz	r3, 800f480 <_free_r+0x30>
 800f472:	6063      	str	r3, [r4, #4]
 800f474:	6014      	str	r4, [r2, #0]
 800f476:	b003      	add	sp, #12
 800f478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f47c:	f000 b91a 	b.w	800f6b4 <__malloc_unlock>
 800f480:	42a3      	cmp	r3, r4
 800f482:	d908      	bls.n	800f496 <_free_r+0x46>
 800f484:	6825      	ldr	r5, [r4, #0]
 800f486:	1961      	adds	r1, r4, r5
 800f488:	428b      	cmp	r3, r1
 800f48a:	bf01      	itttt	eq
 800f48c:	6819      	ldreq	r1, [r3, #0]
 800f48e:	685b      	ldreq	r3, [r3, #4]
 800f490:	1949      	addeq	r1, r1, r5
 800f492:	6021      	streq	r1, [r4, #0]
 800f494:	e7ed      	b.n	800f472 <_free_r+0x22>
 800f496:	461a      	mov	r2, r3
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	b10b      	cbz	r3, 800f4a0 <_free_r+0x50>
 800f49c:	42a3      	cmp	r3, r4
 800f49e:	d9fa      	bls.n	800f496 <_free_r+0x46>
 800f4a0:	6811      	ldr	r1, [r2, #0]
 800f4a2:	1855      	adds	r5, r2, r1
 800f4a4:	42a5      	cmp	r5, r4
 800f4a6:	d10b      	bne.n	800f4c0 <_free_r+0x70>
 800f4a8:	6824      	ldr	r4, [r4, #0]
 800f4aa:	4421      	add	r1, r4
 800f4ac:	1854      	adds	r4, r2, r1
 800f4ae:	42a3      	cmp	r3, r4
 800f4b0:	6011      	str	r1, [r2, #0]
 800f4b2:	d1e0      	bne.n	800f476 <_free_r+0x26>
 800f4b4:	681c      	ldr	r4, [r3, #0]
 800f4b6:	685b      	ldr	r3, [r3, #4]
 800f4b8:	6053      	str	r3, [r2, #4]
 800f4ba:	4421      	add	r1, r4
 800f4bc:	6011      	str	r1, [r2, #0]
 800f4be:	e7da      	b.n	800f476 <_free_r+0x26>
 800f4c0:	d902      	bls.n	800f4c8 <_free_r+0x78>
 800f4c2:	230c      	movs	r3, #12
 800f4c4:	6003      	str	r3, [r0, #0]
 800f4c6:	e7d6      	b.n	800f476 <_free_r+0x26>
 800f4c8:	6825      	ldr	r5, [r4, #0]
 800f4ca:	1961      	adds	r1, r4, r5
 800f4cc:	428b      	cmp	r3, r1
 800f4ce:	bf04      	itt	eq
 800f4d0:	6819      	ldreq	r1, [r3, #0]
 800f4d2:	685b      	ldreq	r3, [r3, #4]
 800f4d4:	6063      	str	r3, [r4, #4]
 800f4d6:	bf04      	itt	eq
 800f4d8:	1949      	addeq	r1, r1, r5
 800f4da:	6021      	streq	r1, [r4, #0]
 800f4dc:	6054      	str	r4, [r2, #4]
 800f4de:	e7ca      	b.n	800f476 <_free_r+0x26>
 800f4e0:	b003      	add	sp, #12
 800f4e2:	bd30      	pop	{r4, r5, pc}
 800f4e4:	20006c34 	.word	0x20006c34

0800f4e8 <sbrk_aligned>:
 800f4e8:	b570      	push	{r4, r5, r6, lr}
 800f4ea:	4e0e      	ldr	r6, [pc, #56]	; (800f524 <sbrk_aligned+0x3c>)
 800f4ec:	460c      	mov	r4, r1
 800f4ee:	6831      	ldr	r1, [r6, #0]
 800f4f0:	4605      	mov	r5, r0
 800f4f2:	b911      	cbnz	r1, 800f4fa <sbrk_aligned+0x12>
 800f4f4:	f000 f88c 	bl	800f610 <_sbrk_r>
 800f4f8:	6030      	str	r0, [r6, #0]
 800f4fa:	4621      	mov	r1, r4
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	f000 f887 	bl	800f610 <_sbrk_r>
 800f502:	1c43      	adds	r3, r0, #1
 800f504:	d00a      	beq.n	800f51c <sbrk_aligned+0x34>
 800f506:	1cc4      	adds	r4, r0, #3
 800f508:	f024 0403 	bic.w	r4, r4, #3
 800f50c:	42a0      	cmp	r0, r4
 800f50e:	d007      	beq.n	800f520 <sbrk_aligned+0x38>
 800f510:	1a21      	subs	r1, r4, r0
 800f512:	4628      	mov	r0, r5
 800f514:	f000 f87c 	bl	800f610 <_sbrk_r>
 800f518:	3001      	adds	r0, #1
 800f51a:	d101      	bne.n	800f520 <sbrk_aligned+0x38>
 800f51c:	f04f 34ff 	mov.w	r4, #4294967295
 800f520:	4620      	mov	r0, r4
 800f522:	bd70      	pop	{r4, r5, r6, pc}
 800f524:	20006c38 	.word	0x20006c38

0800f528 <_malloc_r>:
 800f528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f52c:	1ccd      	adds	r5, r1, #3
 800f52e:	f025 0503 	bic.w	r5, r5, #3
 800f532:	3508      	adds	r5, #8
 800f534:	2d0c      	cmp	r5, #12
 800f536:	bf38      	it	cc
 800f538:	250c      	movcc	r5, #12
 800f53a:	2d00      	cmp	r5, #0
 800f53c:	4607      	mov	r7, r0
 800f53e:	db01      	blt.n	800f544 <_malloc_r+0x1c>
 800f540:	42a9      	cmp	r1, r5
 800f542:	d905      	bls.n	800f550 <_malloc_r+0x28>
 800f544:	230c      	movs	r3, #12
 800f546:	603b      	str	r3, [r7, #0]
 800f548:	2600      	movs	r6, #0
 800f54a:	4630      	mov	r0, r6
 800f54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f550:	4e2e      	ldr	r6, [pc, #184]	; (800f60c <_malloc_r+0xe4>)
 800f552:	f000 f8a9 	bl	800f6a8 <__malloc_lock>
 800f556:	6833      	ldr	r3, [r6, #0]
 800f558:	461c      	mov	r4, r3
 800f55a:	bb34      	cbnz	r4, 800f5aa <_malloc_r+0x82>
 800f55c:	4629      	mov	r1, r5
 800f55e:	4638      	mov	r0, r7
 800f560:	f7ff ffc2 	bl	800f4e8 <sbrk_aligned>
 800f564:	1c43      	adds	r3, r0, #1
 800f566:	4604      	mov	r4, r0
 800f568:	d14d      	bne.n	800f606 <_malloc_r+0xde>
 800f56a:	6834      	ldr	r4, [r6, #0]
 800f56c:	4626      	mov	r6, r4
 800f56e:	2e00      	cmp	r6, #0
 800f570:	d140      	bne.n	800f5f4 <_malloc_r+0xcc>
 800f572:	6823      	ldr	r3, [r4, #0]
 800f574:	4631      	mov	r1, r6
 800f576:	4638      	mov	r0, r7
 800f578:	eb04 0803 	add.w	r8, r4, r3
 800f57c:	f000 f848 	bl	800f610 <_sbrk_r>
 800f580:	4580      	cmp	r8, r0
 800f582:	d13a      	bne.n	800f5fa <_malloc_r+0xd2>
 800f584:	6821      	ldr	r1, [r4, #0]
 800f586:	3503      	adds	r5, #3
 800f588:	1a6d      	subs	r5, r5, r1
 800f58a:	f025 0503 	bic.w	r5, r5, #3
 800f58e:	3508      	adds	r5, #8
 800f590:	2d0c      	cmp	r5, #12
 800f592:	bf38      	it	cc
 800f594:	250c      	movcc	r5, #12
 800f596:	4629      	mov	r1, r5
 800f598:	4638      	mov	r0, r7
 800f59a:	f7ff ffa5 	bl	800f4e8 <sbrk_aligned>
 800f59e:	3001      	adds	r0, #1
 800f5a0:	d02b      	beq.n	800f5fa <_malloc_r+0xd2>
 800f5a2:	6823      	ldr	r3, [r4, #0]
 800f5a4:	442b      	add	r3, r5
 800f5a6:	6023      	str	r3, [r4, #0]
 800f5a8:	e00e      	b.n	800f5c8 <_malloc_r+0xa0>
 800f5aa:	6822      	ldr	r2, [r4, #0]
 800f5ac:	1b52      	subs	r2, r2, r5
 800f5ae:	d41e      	bmi.n	800f5ee <_malloc_r+0xc6>
 800f5b0:	2a0b      	cmp	r2, #11
 800f5b2:	d916      	bls.n	800f5e2 <_malloc_r+0xba>
 800f5b4:	1961      	adds	r1, r4, r5
 800f5b6:	42a3      	cmp	r3, r4
 800f5b8:	6025      	str	r5, [r4, #0]
 800f5ba:	bf18      	it	ne
 800f5bc:	6059      	strne	r1, [r3, #4]
 800f5be:	6863      	ldr	r3, [r4, #4]
 800f5c0:	bf08      	it	eq
 800f5c2:	6031      	streq	r1, [r6, #0]
 800f5c4:	5162      	str	r2, [r4, r5]
 800f5c6:	604b      	str	r3, [r1, #4]
 800f5c8:	4638      	mov	r0, r7
 800f5ca:	f104 060b 	add.w	r6, r4, #11
 800f5ce:	f000 f871 	bl	800f6b4 <__malloc_unlock>
 800f5d2:	f026 0607 	bic.w	r6, r6, #7
 800f5d6:	1d23      	adds	r3, r4, #4
 800f5d8:	1af2      	subs	r2, r6, r3
 800f5da:	d0b6      	beq.n	800f54a <_malloc_r+0x22>
 800f5dc:	1b9b      	subs	r3, r3, r6
 800f5de:	50a3      	str	r3, [r4, r2]
 800f5e0:	e7b3      	b.n	800f54a <_malloc_r+0x22>
 800f5e2:	6862      	ldr	r2, [r4, #4]
 800f5e4:	42a3      	cmp	r3, r4
 800f5e6:	bf0c      	ite	eq
 800f5e8:	6032      	streq	r2, [r6, #0]
 800f5ea:	605a      	strne	r2, [r3, #4]
 800f5ec:	e7ec      	b.n	800f5c8 <_malloc_r+0xa0>
 800f5ee:	4623      	mov	r3, r4
 800f5f0:	6864      	ldr	r4, [r4, #4]
 800f5f2:	e7b2      	b.n	800f55a <_malloc_r+0x32>
 800f5f4:	4634      	mov	r4, r6
 800f5f6:	6876      	ldr	r6, [r6, #4]
 800f5f8:	e7b9      	b.n	800f56e <_malloc_r+0x46>
 800f5fa:	230c      	movs	r3, #12
 800f5fc:	603b      	str	r3, [r7, #0]
 800f5fe:	4638      	mov	r0, r7
 800f600:	f000 f858 	bl	800f6b4 <__malloc_unlock>
 800f604:	e7a1      	b.n	800f54a <_malloc_r+0x22>
 800f606:	6025      	str	r5, [r4, #0]
 800f608:	e7de      	b.n	800f5c8 <_malloc_r+0xa0>
 800f60a:	bf00      	nop
 800f60c:	20006c34 	.word	0x20006c34

0800f610 <_sbrk_r>:
 800f610:	b538      	push	{r3, r4, r5, lr}
 800f612:	4d06      	ldr	r5, [pc, #24]	; (800f62c <_sbrk_r+0x1c>)
 800f614:	2300      	movs	r3, #0
 800f616:	4604      	mov	r4, r0
 800f618:	4608      	mov	r0, r1
 800f61a:	602b      	str	r3, [r5, #0]
 800f61c:	f7f3 ff74 	bl	8003508 <_sbrk>
 800f620:	1c43      	adds	r3, r0, #1
 800f622:	d102      	bne.n	800f62a <_sbrk_r+0x1a>
 800f624:	682b      	ldr	r3, [r5, #0]
 800f626:	b103      	cbz	r3, 800f62a <_sbrk_r+0x1a>
 800f628:	6023      	str	r3, [r4, #0]
 800f62a:	bd38      	pop	{r3, r4, r5, pc}
 800f62c:	20006c3c 	.word	0x20006c3c

0800f630 <siprintf>:
 800f630:	b40e      	push	{r1, r2, r3}
 800f632:	b500      	push	{lr}
 800f634:	b09c      	sub	sp, #112	; 0x70
 800f636:	ab1d      	add	r3, sp, #116	; 0x74
 800f638:	9002      	str	r0, [sp, #8]
 800f63a:	9006      	str	r0, [sp, #24]
 800f63c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f640:	4809      	ldr	r0, [pc, #36]	; (800f668 <siprintf+0x38>)
 800f642:	9107      	str	r1, [sp, #28]
 800f644:	9104      	str	r1, [sp, #16]
 800f646:	4909      	ldr	r1, [pc, #36]	; (800f66c <siprintf+0x3c>)
 800f648:	f853 2b04 	ldr.w	r2, [r3], #4
 800f64c:	9105      	str	r1, [sp, #20]
 800f64e:	6800      	ldr	r0, [r0, #0]
 800f650:	9301      	str	r3, [sp, #4]
 800f652:	a902      	add	r1, sp, #8
 800f654:	f000 f890 	bl	800f778 <_svfiprintf_r>
 800f658:	9b02      	ldr	r3, [sp, #8]
 800f65a:	2200      	movs	r2, #0
 800f65c:	701a      	strb	r2, [r3, #0]
 800f65e:	b01c      	add	sp, #112	; 0x70
 800f660:	f85d eb04 	ldr.w	lr, [sp], #4
 800f664:	b003      	add	sp, #12
 800f666:	4770      	bx	lr
 800f668:	20000628 	.word	0x20000628
 800f66c:	ffff0208 	.word	0xffff0208

0800f670 <strcpy>:
 800f670:	4603      	mov	r3, r0
 800f672:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f676:	f803 2b01 	strb.w	r2, [r3], #1
 800f67a:	2a00      	cmp	r2, #0
 800f67c:	d1f9      	bne.n	800f672 <strcpy+0x2>
 800f67e:	4770      	bx	lr

0800f680 <strncpy>:
 800f680:	b510      	push	{r4, lr}
 800f682:	3901      	subs	r1, #1
 800f684:	4603      	mov	r3, r0
 800f686:	b132      	cbz	r2, 800f696 <strncpy+0x16>
 800f688:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f68c:	f803 4b01 	strb.w	r4, [r3], #1
 800f690:	3a01      	subs	r2, #1
 800f692:	2c00      	cmp	r4, #0
 800f694:	d1f7      	bne.n	800f686 <strncpy+0x6>
 800f696:	441a      	add	r2, r3
 800f698:	2100      	movs	r1, #0
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d100      	bne.n	800f6a0 <strncpy+0x20>
 800f69e:	bd10      	pop	{r4, pc}
 800f6a0:	f803 1b01 	strb.w	r1, [r3], #1
 800f6a4:	e7f9      	b.n	800f69a <strncpy+0x1a>
	...

0800f6a8 <__malloc_lock>:
 800f6a8:	4801      	ldr	r0, [pc, #4]	; (800f6b0 <__malloc_lock+0x8>)
 800f6aa:	f000 baf9 	b.w	800fca0 <__retarget_lock_acquire_recursive>
 800f6ae:	bf00      	nop
 800f6b0:	20006c40 	.word	0x20006c40

0800f6b4 <__malloc_unlock>:
 800f6b4:	4801      	ldr	r0, [pc, #4]	; (800f6bc <__malloc_unlock+0x8>)
 800f6b6:	f000 baf4 	b.w	800fca2 <__retarget_lock_release_recursive>
 800f6ba:	bf00      	nop
 800f6bc:	20006c40 	.word	0x20006c40

0800f6c0 <__ssputs_r>:
 800f6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6c4:	688e      	ldr	r6, [r1, #8]
 800f6c6:	429e      	cmp	r6, r3
 800f6c8:	4682      	mov	sl, r0
 800f6ca:	460c      	mov	r4, r1
 800f6cc:	4690      	mov	r8, r2
 800f6ce:	461f      	mov	r7, r3
 800f6d0:	d838      	bhi.n	800f744 <__ssputs_r+0x84>
 800f6d2:	898a      	ldrh	r2, [r1, #12]
 800f6d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f6d8:	d032      	beq.n	800f740 <__ssputs_r+0x80>
 800f6da:	6825      	ldr	r5, [r4, #0]
 800f6dc:	6909      	ldr	r1, [r1, #16]
 800f6de:	eba5 0901 	sub.w	r9, r5, r1
 800f6e2:	6965      	ldr	r5, [r4, #20]
 800f6e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f6e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f6ec:	3301      	adds	r3, #1
 800f6ee:	444b      	add	r3, r9
 800f6f0:	106d      	asrs	r5, r5, #1
 800f6f2:	429d      	cmp	r5, r3
 800f6f4:	bf38      	it	cc
 800f6f6:	461d      	movcc	r5, r3
 800f6f8:	0553      	lsls	r3, r2, #21
 800f6fa:	d531      	bpl.n	800f760 <__ssputs_r+0xa0>
 800f6fc:	4629      	mov	r1, r5
 800f6fe:	f7ff ff13 	bl	800f528 <_malloc_r>
 800f702:	4606      	mov	r6, r0
 800f704:	b950      	cbnz	r0, 800f71c <__ssputs_r+0x5c>
 800f706:	230c      	movs	r3, #12
 800f708:	f8ca 3000 	str.w	r3, [sl]
 800f70c:	89a3      	ldrh	r3, [r4, #12]
 800f70e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f712:	81a3      	strh	r3, [r4, #12]
 800f714:	f04f 30ff 	mov.w	r0, #4294967295
 800f718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f71c:	6921      	ldr	r1, [r4, #16]
 800f71e:	464a      	mov	r2, r9
 800f720:	f7ff fe80 	bl	800f424 <memcpy>
 800f724:	89a3      	ldrh	r3, [r4, #12]
 800f726:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f72a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f72e:	81a3      	strh	r3, [r4, #12]
 800f730:	6126      	str	r6, [r4, #16]
 800f732:	6165      	str	r5, [r4, #20]
 800f734:	444e      	add	r6, r9
 800f736:	eba5 0509 	sub.w	r5, r5, r9
 800f73a:	6026      	str	r6, [r4, #0]
 800f73c:	60a5      	str	r5, [r4, #8]
 800f73e:	463e      	mov	r6, r7
 800f740:	42be      	cmp	r6, r7
 800f742:	d900      	bls.n	800f746 <__ssputs_r+0x86>
 800f744:	463e      	mov	r6, r7
 800f746:	6820      	ldr	r0, [r4, #0]
 800f748:	4632      	mov	r2, r6
 800f74a:	4641      	mov	r1, r8
 800f74c:	f000 faaa 	bl	800fca4 <memmove>
 800f750:	68a3      	ldr	r3, [r4, #8]
 800f752:	1b9b      	subs	r3, r3, r6
 800f754:	60a3      	str	r3, [r4, #8]
 800f756:	6823      	ldr	r3, [r4, #0]
 800f758:	4433      	add	r3, r6
 800f75a:	6023      	str	r3, [r4, #0]
 800f75c:	2000      	movs	r0, #0
 800f75e:	e7db      	b.n	800f718 <__ssputs_r+0x58>
 800f760:	462a      	mov	r2, r5
 800f762:	f000 fab9 	bl	800fcd8 <_realloc_r>
 800f766:	4606      	mov	r6, r0
 800f768:	2800      	cmp	r0, #0
 800f76a:	d1e1      	bne.n	800f730 <__ssputs_r+0x70>
 800f76c:	6921      	ldr	r1, [r4, #16]
 800f76e:	4650      	mov	r0, sl
 800f770:	f7ff fe6e 	bl	800f450 <_free_r>
 800f774:	e7c7      	b.n	800f706 <__ssputs_r+0x46>
	...

0800f778 <_svfiprintf_r>:
 800f778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f77c:	4698      	mov	r8, r3
 800f77e:	898b      	ldrh	r3, [r1, #12]
 800f780:	061b      	lsls	r3, r3, #24
 800f782:	b09d      	sub	sp, #116	; 0x74
 800f784:	4607      	mov	r7, r0
 800f786:	460d      	mov	r5, r1
 800f788:	4614      	mov	r4, r2
 800f78a:	d50e      	bpl.n	800f7aa <_svfiprintf_r+0x32>
 800f78c:	690b      	ldr	r3, [r1, #16]
 800f78e:	b963      	cbnz	r3, 800f7aa <_svfiprintf_r+0x32>
 800f790:	2140      	movs	r1, #64	; 0x40
 800f792:	f7ff fec9 	bl	800f528 <_malloc_r>
 800f796:	6028      	str	r0, [r5, #0]
 800f798:	6128      	str	r0, [r5, #16]
 800f79a:	b920      	cbnz	r0, 800f7a6 <_svfiprintf_r+0x2e>
 800f79c:	230c      	movs	r3, #12
 800f79e:	603b      	str	r3, [r7, #0]
 800f7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7a4:	e0d1      	b.n	800f94a <_svfiprintf_r+0x1d2>
 800f7a6:	2340      	movs	r3, #64	; 0x40
 800f7a8:	616b      	str	r3, [r5, #20]
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	9309      	str	r3, [sp, #36]	; 0x24
 800f7ae:	2320      	movs	r3, #32
 800f7b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f7b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7b8:	2330      	movs	r3, #48	; 0x30
 800f7ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f964 <_svfiprintf_r+0x1ec>
 800f7be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f7c2:	f04f 0901 	mov.w	r9, #1
 800f7c6:	4623      	mov	r3, r4
 800f7c8:	469a      	mov	sl, r3
 800f7ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7ce:	b10a      	cbz	r2, 800f7d4 <_svfiprintf_r+0x5c>
 800f7d0:	2a25      	cmp	r2, #37	; 0x25
 800f7d2:	d1f9      	bne.n	800f7c8 <_svfiprintf_r+0x50>
 800f7d4:	ebba 0b04 	subs.w	fp, sl, r4
 800f7d8:	d00b      	beq.n	800f7f2 <_svfiprintf_r+0x7a>
 800f7da:	465b      	mov	r3, fp
 800f7dc:	4622      	mov	r2, r4
 800f7de:	4629      	mov	r1, r5
 800f7e0:	4638      	mov	r0, r7
 800f7e2:	f7ff ff6d 	bl	800f6c0 <__ssputs_r>
 800f7e6:	3001      	adds	r0, #1
 800f7e8:	f000 80aa 	beq.w	800f940 <_svfiprintf_r+0x1c8>
 800f7ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7ee:	445a      	add	r2, fp
 800f7f0:	9209      	str	r2, [sp, #36]	; 0x24
 800f7f2:	f89a 3000 	ldrb.w	r3, [sl]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	f000 80a2 	beq.w	800f940 <_svfiprintf_r+0x1c8>
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800f802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f806:	f10a 0a01 	add.w	sl, sl, #1
 800f80a:	9304      	str	r3, [sp, #16]
 800f80c:	9307      	str	r3, [sp, #28]
 800f80e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f812:	931a      	str	r3, [sp, #104]	; 0x68
 800f814:	4654      	mov	r4, sl
 800f816:	2205      	movs	r2, #5
 800f818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f81c:	4851      	ldr	r0, [pc, #324]	; (800f964 <_svfiprintf_r+0x1ec>)
 800f81e:	f7f0 fce7 	bl	80001f0 <memchr>
 800f822:	9a04      	ldr	r2, [sp, #16]
 800f824:	b9d8      	cbnz	r0, 800f85e <_svfiprintf_r+0xe6>
 800f826:	06d0      	lsls	r0, r2, #27
 800f828:	bf44      	itt	mi
 800f82a:	2320      	movmi	r3, #32
 800f82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f830:	0711      	lsls	r1, r2, #28
 800f832:	bf44      	itt	mi
 800f834:	232b      	movmi	r3, #43	; 0x2b
 800f836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f83a:	f89a 3000 	ldrb.w	r3, [sl]
 800f83e:	2b2a      	cmp	r3, #42	; 0x2a
 800f840:	d015      	beq.n	800f86e <_svfiprintf_r+0xf6>
 800f842:	9a07      	ldr	r2, [sp, #28]
 800f844:	4654      	mov	r4, sl
 800f846:	2000      	movs	r0, #0
 800f848:	f04f 0c0a 	mov.w	ip, #10
 800f84c:	4621      	mov	r1, r4
 800f84e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f852:	3b30      	subs	r3, #48	; 0x30
 800f854:	2b09      	cmp	r3, #9
 800f856:	d94e      	bls.n	800f8f6 <_svfiprintf_r+0x17e>
 800f858:	b1b0      	cbz	r0, 800f888 <_svfiprintf_r+0x110>
 800f85a:	9207      	str	r2, [sp, #28]
 800f85c:	e014      	b.n	800f888 <_svfiprintf_r+0x110>
 800f85e:	eba0 0308 	sub.w	r3, r0, r8
 800f862:	fa09 f303 	lsl.w	r3, r9, r3
 800f866:	4313      	orrs	r3, r2
 800f868:	9304      	str	r3, [sp, #16]
 800f86a:	46a2      	mov	sl, r4
 800f86c:	e7d2      	b.n	800f814 <_svfiprintf_r+0x9c>
 800f86e:	9b03      	ldr	r3, [sp, #12]
 800f870:	1d19      	adds	r1, r3, #4
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	9103      	str	r1, [sp, #12]
 800f876:	2b00      	cmp	r3, #0
 800f878:	bfbb      	ittet	lt
 800f87a:	425b      	neglt	r3, r3
 800f87c:	f042 0202 	orrlt.w	r2, r2, #2
 800f880:	9307      	strge	r3, [sp, #28]
 800f882:	9307      	strlt	r3, [sp, #28]
 800f884:	bfb8      	it	lt
 800f886:	9204      	strlt	r2, [sp, #16]
 800f888:	7823      	ldrb	r3, [r4, #0]
 800f88a:	2b2e      	cmp	r3, #46	; 0x2e
 800f88c:	d10c      	bne.n	800f8a8 <_svfiprintf_r+0x130>
 800f88e:	7863      	ldrb	r3, [r4, #1]
 800f890:	2b2a      	cmp	r3, #42	; 0x2a
 800f892:	d135      	bne.n	800f900 <_svfiprintf_r+0x188>
 800f894:	9b03      	ldr	r3, [sp, #12]
 800f896:	1d1a      	adds	r2, r3, #4
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	9203      	str	r2, [sp, #12]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	bfb8      	it	lt
 800f8a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f8a4:	3402      	adds	r4, #2
 800f8a6:	9305      	str	r3, [sp, #20]
 800f8a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f974 <_svfiprintf_r+0x1fc>
 800f8ac:	7821      	ldrb	r1, [r4, #0]
 800f8ae:	2203      	movs	r2, #3
 800f8b0:	4650      	mov	r0, sl
 800f8b2:	f7f0 fc9d 	bl	80001f0 <memchr>
 800f8b6:	b140      	cbz	r0, 800f8ca <_svfiprintf_r+0x152>
 800f8b8:	2340      	movs	r3, #64	; 0x40
 800f8ba:	eba0 000a 	sub.w	r0, r0, sl
 800f8be:	fa03 f000 	lsl.w	r0, r3, r0
 800f8c2:	9b04      	ldr	r3, [sp, #16]
 800f8c4:	4303      	orrs	r3, r0
 800f8c6:	3401      	adds	r4, #1
 800f8c8:	9304      	str	r3, [sp, #16]
 800f8ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8ce:	4826      	ldr	r0, [pc, #152]	; (800f968 <_svfiprintf_r+0x1f0>)
 800f8d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f8d4:	2206      	movs	r2, #6
 800f8d6:	f7f0 fc8b 	bl	80001f0 <memchr>
 800f8da:	2800      	cmp	r0, #0
 800f8dc:	d038      	beq.n	800f950 <_svfiprintf_r+0x1d8>
 800f8de:	4b23      	ldr	r3, [pc, #140]	; (800f96c <_svfiprintf_r+0x1f4>)
 800f8e0:	bb1b      	cbnz	r3, 800f92a <_svfiprintf_r+0x1b2>
 800f8e2:	9b03      	ldr	r3, [sp, #12]
 800f8e4:	3307      	adds	r3, #7
 800f8e6:	f023 0307 	bic.w	r3, r3, #7
 800f8ea:	3308      	adds	r3, #8
 800f8ec:	9303      	str	r3, [sp, #12]
 800f8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8f0:	4433      	add	r3, r6
 800f8f2:	9309      	str	r3, [sp, #36]	; 0x24
 800f8f4:	e767      	b.n	800f7c6 <_svfiprintf_r+0x4e>
 800f8f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8fa:	460c      	mov	r4, r1
 800f8fc:	2001      	movs	r0, #1
 800f8fe:	e7a5      	b.n	800f84c <_svfiprintf_r+0xd4>
 800f900:	2300      	movs	r3, #0
 800f902:	3401      	adds	r4, #1
 800f904:	9305      	str	r3, [sp, #20]
 800f906:	4619      	mov	r1, r3
 800f908:	f04f 0c0a 	mov.w	ip, #10
 800f90c:	4620      	mov	r0, r4
 800f90e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f912:	3a30      	subs	r2, #48	; 0x30
 800f914:	2a09      	cmp	r2, #9
 800f916:	d903      	bls.n	800f920 <_svfiprintf_r+0x1a8>
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d0c5      	beq.n	800f8a8 <_svfiprintf_r+0x130>
 800f91c:	9105      	str	r1, [sp, #20]
 800f91e:	e7c3      	b.n	800f8a8 <_svfiprintf_r+0x130>
 800f920:	fb0c 2101 	mla	r1, ip, r1, r2
 800f924:	4604      	mov	r4, r0
 800f926:	2301      	movs	r3, #1
 800f928:	e7f0      	b.n	800f90c <_svfiprintf_r+0x194>
 800f92a:	ab03      	add	r3, sp, #12
 800f92c:	9300      	str	r3, [sp, #0]
 800f92e:	462a      	mov	r2, r5
 800f930:	4b0f      	ldr	r3, [pc, #60]	; (800f970 <_svfiprintf_r+0x1f8>)
 800f932:	a904      	add	r1, sp, #16
 800f934:	4638      	mov	r0, r7
 800f936:	f3af 8000 	nop.w
 800f93a:	1c42      	adds	r2, r0, #1
 800f93c:	4606      	mov	r6, r0
 800f93e:	d1d6      	bne.n	800f8ee <_svfiprintf_r+0x176>
 800f940:	89ab      	ldrh	r3, [r5, #12]
 800f942:	065b      	lsls	r3, r3, #25
 800f944:	f53f af2c 	bmi.w	800f7a0 <_svfiprintf_r+0x28>
 800f948:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f94a:	b01d      	add	sp, #116	; 0x74
 800f94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f950:	ab03      	add	r3, sp, #12
 800f952:	9300      	str	r3, [sp, #0]
 800f954:	462a      	mov	r2, r5
 800f956:	4b06      	ldr	r3, [pc, #24]	; (800f970 <_svfiprintf_r+0x1f8>)
 800f958:	a904      	add	r1, sp, #16
 800f95a:	4638      	mov	r0, r7
 800f95c:	f000 f87a 	bl	800fa54 <_printf_i>
 800f960:	e7eb      	b.n	800f93a <_svfiprintf_r+0x1c2>
 800f962:	bf00      	nop
 800f964:	08010548 	.word	0x08010548
 800f968:	08010552 	.word	0x08010552
 800f96c:	00000000 	.word	0x00000000
 800f970:	0800f6c1 	.word	0x0800f6c1
 800f974:	0801054e 	.word	0x0801054e

0800f978 <_printf_common>:
 800f978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f97c:	4616      	mov	r6, r2
 800f97e:	4699      	mov	r9, r3
 800f980:	688a      	ldr	r2, [r1, #8]
 800f982:	690b      	ldr	r3, [r1, #16]
 800f984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f988:	4293      	cmp	r3, r2
 800f98a:	bfb8      	it	lt
 800f98c:	4613      	movlt	r3, r2
 800f98e:	6033      	str	r3, [r6, #0]
 800f990:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f994:	4607      	mov	r7, r0
 800f996:	460c      	mov	r4, r1
 800f998:	b10a      	cbz	r2, 800f99e <_printf_common+0x26>
 800f99a:	3301      	adds	r3, #1
 800f99c:	6033      	str	r3, [r6, #0]
 800f99e:	6823      	ldr	r3, [r4, #0]
 800f9a0:	0699      	lsls	r1, r3, #26
 800f9a2:	bf42      	ittt	mi
 800f9a4:	6833      	ldrmi	r3, [r6, #0]
 800f9a6:	3302      	addmi	r3, #2
 800f9a8:	6033      	strmi	r3, [r6, #0]
 800f9aa:	6825      	ldr	r5, [r4, #0]
 800f9ac:	f015 0506 	ands.w	r5, r5, #6
 800f9b0:	d106      	bne.n	800f9c0 <_printf_common+0x48>
 800f9b2:	f104 0a19 	add.w	sl, r4, #25
 800f9b6:	68e3      	ldr	r3, [r4, #12]
 800f9b8:	6832      	ldr	r2, [r6, #0]
 800f9ba:	1a9b      	subs	r3, r3, r2
 800f9bc:	42ab      	cmp	r3, r5
 800f9be:	dc26      	bgt.n	800fa0e <_printf_common+0x96>
 800f9c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f9c4:	1e13      	subs	r3, r2, #0
 800f9c6:	6822      	ldr	r2, [r4, #0]
 800f9c8:	bf18      	it	ne
 800f9ca:	2301      	movne	r3, #1
 800f9cc:	0692      	lsls	r2, r2, #26
 800f9ce:	d42b      	bmi.n	800fa28 <_printf_common+0xb0>
 800f9d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f9d4:	4649      	mov	r1, r9
 800f9d6:	4638      	mov	r0, r7
 800f9d8:	47c0      	blx	r8
 800f9da:	3001      	adds	r0, #1
 800f9dc:	d01e      	beq.n	800fa1c <_printf_common+0xa4>
 800f9de:	6823      	ldr	r3, [r4, #0]
 800f9e0:	68e5      	ldr	r5, [r4, #12]
 800f9e2:	6832      	ldr	r2, [r6, #0]
 800f9e4:	f003 0306 	and.w	r3, r3, #6
 800f9e8:	2b04      	cmp	r3, #4
 800f9ea:	bf08      	it	eq
 800f9ec:	1aad      	subeq	r5, r5, r2
 800f9ee:	68a3      	ldr	r3, [r4, #8]
 800f9f0:	6922      	ldr	r2, [r4, #16]
 800f9f2:	bf0c      	ite	eq
 800f9f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f9f8:	2500      	movne	r5, #0
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	bfc4      	itt	gt
 800f9fe:	1a9b      	subgt	r3, r3, r2
 800fa00:	18ed      	addgt	r5, r5, r3
 800fa02:	2600      	movs	r6, #0
 800fa04:	341a      	adds	r4, #26
 800fa06:	42b5      	cmp	r5, r6
 800fa08:	d11a      	bne.n	800fa40 <_printf_common+0xc8>
 800fa0a:	2000      	movs	r0, #0
 800fa0c:	e008      	b.n	800fa20 <_printf_common+0xa8>
 800fa0e:	2301      	movs	r3, #1
 800fa10:	4652      	mov	r2, sl
 800fa12:	4649      	mov	r1, r9
 800fa14:	4638      	mov	r0, r7
 800fa16:	47c0      	blx	r8
 800fa18:	3001      	adds	r0, #1
 800fa1a:	d103      	bne.n	800fa24 <_printf_common+0xac>
 800fa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa24:	3501      	adds	r5, #1
 800fa26:	e7c6      	b.n	800f9b6 <_printf_common+0x3e>
 800fa28:	18e1      	adds	r1, r4, r3
 800fa2a:	1c5a      	adds	r2, r3, #1
 800fa2c:	2030      	movs	r0, #48	; 0x30
 800fa2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa32:	4422      	add	r2, r4
 800fa34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa3c:	3302      	adds	r3, #2
 800fa3e:	e7c7      	b.n	800f9d0 <_printf_common+0x58>
 800fa40:	2301      	movs	r3, #1
 800fa42:	4622      	mov	r2, r4
 800fa44:	4649      	mov	r1, r9
 800fa46:	4638      	mov	r0, r7
 800fa48:	47c0      	blx	r8
 800fa4a:	3001      	adds	r0, #1
 800fa4c:	d0e6      	beq.n	800fa1c <_printf_common+0xa4>
 800fa4e:	3601      	adds	r6, #1
 800fa50:	e7d9      	b.n	800fa06 <_printf_common+0x8e>
	...

0800fa54 <_printf_i>:
 800fa54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa58:	7e0f      	ldrb	r7, [r1, #24]
 800fa5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa5c:	2f78      	cmp	r7, #120	; 0x78
 800fa5e:	4691      	mov	r9, r2
 800fa60:	4680      	mov	r8, r0
 800fa62:	460c      	mov	r4, r1
 800fa64:	469a      	mov	sl, r3
 800fa66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fa6a:	d807      	bhi.n	800fa7c <_printf_i+0x28>
 800fa6c:	2f62      	cmp	r7, #98	; 0x62
 800fa6e:	d80a      	bhi.n	800fa86 <_printf_i+0x32>
 800fa70:	2f00      	cmp	r7, #0
 800fa72:	f000 80d8 	beq.w	800fc26 <_printf_i+0x1d2>
 800fa76:	2f58      	cmp	r7, #88	; 0x58
 800fa78:	f000 80a3 	beq.w	800fbc2 <_printf_i+0x16e>
 800fa7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fa84:	e03a      	b.n	800fafc <_printf_i+0xa8>
 800fa86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fa8a:	2b15      	cmp	r3, #21
 800fa8c:	d8f6      	bhi.n	800fa7c <_printf_i+0x28>
 800fa8e:	a101      	add	r1, pc, #4	; (adr r1, 800fa94 <_printf_i+0x40>)
 800fa90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fa94:	0800faed 	.word	0x0800faed
 800fa98:	0800fb01 	.word	0x0800fb01
 800fa9c:	0800fa7d 	.word	0x0800fa7d
 800faa0:	0800fa7d 	.word	0x0800fa7d
 800faa4:	0800fa7d 	.word	0x0800fa7d
 800faa8:	0800fa7d 	.word	0x0800fa7d
 800faac:	0800fb01 	.word	0x0800fb01
 800fab0:	0800fa7d 	.word	0x0800fa7d
 800fab4:	0800fa7d 	.word	0x0800fa7d
 800fab8:	0800fa7d 	.word	0x0800fa7d
 800fabc:	0800fa7d 	.word	0x0800fa7d
 800fac0:	0800fc0d 	.word	0x0800fc0d
 800fac4:	0800fb31 	.word	0x0800fb31
 800fac8:	0800fbef 	.word	0x0800fbef
 800facc:	0800fa7d 	.word	0x0800fa7d
 800fad0:	0800fa7d 	.word	0x0800fa7d
 800fad4:	0800fc2f 	.word	0x0800fc2f
 800fad8:	0800fa7d 	.word	0x0800fa7d
 800fadc:	0800fb31 	.word	0x0800fb31
 800fae0:	0800fa7d 	.word	0x0800fa7d
 800fae4:	0800fa7d 	.word	0x0800fa7d
 800fae8:	0800fbf7 	.word	0x0800fbf7
 800faec:	682b      	ldr	r3, [r5, #0]
 800faee:	1d1a      	adds	r2, r3, #4
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	602a      	str	r2, [r5, #0]
 800faf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800faf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fafc:	2301      	movs	r3, #1
 800fafe:	e0a3      	b.n	800fc48 <_printf_i+0x1f4>
 800fb00:	6820      	ldr	r0, [r4, #0]
 800fb02:	6829      	ldr	r1, [r5, #0]
 800fb04:	0606      	lsls	r6, r0, #24
 800fb06:	f101 0304 	add.w	r3, r1, #4
 800fb0a:	d50a      	bpl.n	800fb22 <_printf_i+0xce>
 800fb0c:	680e      	ldr	r6, [r1, #0]
 800fb0e:	602b      	str	r3, [r5, #0]
 800fb10:	2e00      	cmp	r6, #0
 800fb12:	da03      	bge.n	800fb1c <_printf_i+0xc8>
 800fb14:	232d      	movs	r3, #45	; 0x2d
 800fb16:	4276      	negs	r6, r6
 800fb18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb1c:	485e      	ldr	r0, [pc, #376]	; (800fc98 <_printf_i+0x244>)
 800fb1e:	230a      	movs	r3, #10
 800fb20:	e019      	b.n	800fb56 <_printf_i+0x102>
 800fb22:	680e      	ldr	r6, [r1, #0]
 800fb24:	602b      	str	r3, [r5, #0]
 800fb26:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fb2a:	bf18      	it	ne
 800fb2c:	b236      	sxthne	r6, r6
 800fb2e:	e7ef      	b.n	800fb10 <_printf_i+0xbc>
 800fb30:	682b      	ldr	r3, [r5, #0]
 800fb32:	6820      	ldr	r0, [r4, #0]
 800fb34:	1d19      	adds	r1, r3, #4
 800fb36:	6029      	str	r1, [r5, #0]
 800fb38:	0601      	lsls	r1, r0, #24
 800fb3a:	d501      	bpl.n	800fb40 <_printf_i+0xec>
 800fb3c:	681e      	ldr	r6, [r3, #0]
 800fb3e:	e002      	b.n	800fb46 <_printf_i+0xf2>
 800fb40:	0646      	lsls	r6, r0, #25
 800fb42:	d5fb      	bpl.n	800fb3c <_printf_i+0xe8>
 800fb44:	881e      	ldrh	r6, [r3, #0]
 800fb46:	4854      	ldr	r0, [pc, #336]	; (800fc98 <_printf_i+0x244>)
 800fb48:	2f6f      	cmp	r7, #111	; 0x6f
 800fb4a:	bf0c      	ite	eq
 800fb4c:	2308      	moveq	r3, #8
 800fb4e:	230a      	movne	r3, #10
 800fb50:	2100      	movs	r1, #0
 800fb52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb56:	6865      	ldr	r5, [r4, #4]
 800fb58:	60a5      	str	r5, [r4, #8]
 800fb5a:	2d00      	cmp	r5, #0
 800fb5c:	bfa2      	ittt	ge
 800fb5e:	6821      	ldrge	r1, [r4, #0]
 800fb60:	f021 0104 	bicge.w	r1, r1, #4
 800fb64:	6021      	strge	r1, [r4, #0]
 800fb66:	b90e      	cbnz	r6, 800fb6c <_printf_i+0x118>
 800fb68:	2d00      	cmp	r5, #0
 800fb6a:	d04d      	beq.n	800fc08 <_printf_i+0x1b4>
 800fb6c:	4615      	mov	r5, r2
 800fb6e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb72:	fb03 6711 	mls	r7, r3, r1, r6
 800fb76:	5dc7      	ldrb	r7, [r0, r7]
 800fb78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fb7c:	4637      	mov	r7, r6
 800fb7e:	42bb      	cmp	r3, r7
 800fb80:	460e      	mov	r6, r1
 800fb82:	d9f4      	bls.n	800fb6e <_printf_i+0x11a>
 800fb84:	2b08      	cmp	r3, #8
 800fb86:	d10b      	bne.n	800fba0 <_printf_i+0x14c>
 800fb88:	6823      	ldr	r3, [r4, #0]
 800fb8a:	07de      	lsls	r6, r3, #31
 800fb8c:	d508      	bpl.n	800fba0 <_printf_i+0x14c>
 800fb8e:	6923      	ldr	r3, [r4, #16]
 800fb90:	6861      	ldr	r1, [r4, #4]
 800fb92:	4299      	cmp	r1, r3
 800fb94:	bfde      	ittt	le
 800fb96:	2330      	movle	r3, #48	; 0x30
 800fb98:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fb9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fba0:	1b52      	subs	r2, r2, r5
 800fba2:	6122      	str	r2, [r4, #16]
 800fba4:	f8cd a000 	str.w	sl, [sp]
 800fba8:	464b      	mov	r3, r9
 800fbaa:	aa03      	add	r2, sp, #12
 800fbac:	4621      	mov	r1, r4
 800fbae:	4640      	mov	r0, r8
 800fbb0:	f7ff fee2 	bl	800f978 <_printf_common>
 800fbb4:	3001      	adds	r0, #1
 800fbb6:	d14c      	bne.n	800fc52 <_printf_i+0x1fe>
 800fbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbbc:	b004      	add	sp, #16
 800fbbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbc2:	4835      	ldr	r0, [pc, #212]	; (800fc98 <_printf_i+0x244>)
 800fbc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fbc8:	6829      	ldr	r1, [r5, #0]
 800fbca:	6823      	ldr	r3, [r4, #0]
 800fbcc:	f851 6b04 	ldr.w	r6, [r1], #4
 800fbd0:	6029      	str	r1, [r5, #0]
 800fbd2:	061d      	lsls	r5, r3, #24
 800fbd4:	d514      	bpl.n	800fc00 <_printf_i+0x1ac>
 800fbd6:	07df      	lsls	r7, r3, #31
 800fbd8:	bf44      	itt	mi
 800fbda:	f043 0320 	orrmi.w	r3, r3, #32
 800fbde:	6023      	strmi	r3, [r4, #0]
 800fbe0:	b91e      	cbnz	r6, 800fbea <_printf_i+0x196>
 800fbe2:	6823      	ldr	r3, [r4, #0]
 800fbe4:	f023 0320 	bic.w	r3, r3, #32
 800fbe8:	6023      	str	r3, [r4, #0]
 800fbea:	2310      	movs	r3, #16
 800fbec:	e7b0      	b.n	800fb50 <_printf_i+0xfc>
 800fbee:	6823      	ldr	r3, [r4, #0]
 800fbf0:	f043 0320 	orr.w	r3, r3, #32
 800fbf4:	6023      	str	r3, [r4, #0]
 800fbf6:	2378      	movs	r3, #120	; 0x78
 800fbf8:	4828      	ldr	r0, [pc, #160]	; (800fc9c <_printf_i+0x248>)
 800fbfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fbfe:	e7e3      	b.n	800fbc8 <_printf_i+0x174>
 800fc00:	0659      	lsls	r1, r3, #25
 800fc02:	bf48      	it	mi
 800fc04:	b2b6      	uxthmi	r6, r6
 800fc06:	e7e6      	b.n	800fbd6 <_printf_i+0x182>
 800fc08:	4615      	mov	r5, r2
 800fc0a:	e7bb      	b.n	800fb84 <_printf_i+0x130>
 800fc0c:	682b      	ldr	r3, [r5, #0]
 800fc0e:	6826      	ldr	r6, [r4, #0]
 800fc10:	6961      	ldr	r1, [r4, #20]
 800fc12:	1d18      	adds	r0, r3, #4
 800fc14:	6028      	str	r0, [r5, #0]
 800fc16:	0635      	lsls	r5, r6, #24
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	d501      	bpl.n	800fc20 <_printf_i+0x1cc>
 800fc1c:	6019      	str	r1, [r3, #0]
 800fc1e:	e002      	b.n	800fc26 <_printf_i+0x1d2>
 800fc20:	0670      	lsls	r0, r6, #25
 800fc22:	d5fb      	bpl.n	800fc1c <_printf_i+0x1c8>
 800fc24:	8019      	strh	r1, [r3, #0]
 800fc26:	2300      	movs	r3, #0
 800fc28:	6123      	str	r3, [r4, #16]
 800fc2a:	4615      	mov	r5, r2
 800fc2c:	e7ba      	b.n	800fba4 <_printf_i+0x150>
 800fc2e:	682b      	ldr	r3, [r5, #0]
 800fc30:	1d1a      	adds	r2, r3, #4
 800fc32:	602a      	str	r2, [r5, #0]
 800fc34:	681d      	ldr	r5, [r3, #0]
 800fc36:	6862      	ldr	r2, [r4, #4]
 800fc38:	2100      	movs	r1, #0
 800fc3a:	4628      	mov	r0, r5
 800fc3c:	f7f0 fad8 	bl	80001f0 <memchr>
 800fc40:	b108      	cbz	r0, 800fc46 <_printf_i+0x1f2>
 800fc42:	1b40      	subs	r0, r0, r5
 800fc44:	6060      	str	r0, [r4, #4]
 800fc46:	6863      	ldr	r3, [r4, #4]
 800fc48:	6123      	str	r3, [r4, #16]
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc50:	e7a8      	b.n	800fba4 <_printf_i+0x150>
 800fc52:	6923      	ldr	r3, [r4, #16]
 800fc54:	462a      	mov	r2, r5
 800fc56:	4649      	mov	r1, r9
 800fc58:	4640      	mov	r0, r8
 800fc5a:	47d0      	blx	sl
 800fc5c:	3001      	adds	r0, #1
 800fc5e:	d0ab      	beq.n	800fbb8 <_printf_i+0x164>
 800fc60:	6823      	ldr	r3, [r4, #0]
 800fc62:	079b      	lsls	r3, r3, #30
 800fc64:	d413      	bmi.n	800fc8e <_printf_i+0x23a>
 800fc66:	68e0      	ldr	r0, [r4, #12]
 800fc68:	9b03      	ldr	r3, [sp, #12]
 800fc6a:	4298      	cmp	r0, r3
 800fc6c:	bfb8      	it	lt
 800fc6e:	4618      	movlt	r0, r3
 800fc70:	e7a4      	b.n	800fbbc <_printf_i+0x168>
 800fc72:	2301      	movs	r3, #1
 800fc74:	4632      	mov	r2, r6
 800fc76:	4649      	mov	r1, r9
 800fc78:	4640      	mov	r0, r8
 800fc7a:	47d0      	blx	sl
 800fc7c:	3001      	adds	r0, #1
 800fc7e:	d09b      	beq.n	800fbb8 <_printf_i+0x164>
 800fc80:	3501      	adds	r5, #1
 800fc82:	68e3      	ldr	r3, [r4, #12]
 800fc84:	9903      	ldr	r1, [sp, #12]
 800fc86:	1a5b      	subs	r3, r3, r1
 800fc88:	42ab      	cmp	r3, r5
 800fc8a:	dcf2      	bgt.n	800fc72 <_printf_i+0x21e>
 800fc8c:	e7eb      	b.n	800fc66 <_printf_i+0x212>
 800fc8e:	2500      	movs	r5, #0
 800fc90:	f104 0619 	add.w	r6, r4, #25
 800fc94:	e7f5      	b.n	800fc82 <_printf_i+0x22e>
 800fc96:	bf00      	nop
 800fc98:	08010559 	.word	0x08010559
 800fc9c:	0801056a 	.word	0x0801056a

0800fca0 <__retarget_lock_acquire_recursive>:
 800fca0:	4770      	bx	lr

0800fca2 <__retarget_lock_release_recursive>:
 800fca2:	4770      	bx	lr

0800fca4 <memmove>:
 800fca4:	4288      	cmp	r0, r1
 800fca6:	b510      	push	{r4, lr}
 800fca8:	eb01 0402 	add.w	r4, r1, r2
 800fcac:	d902      	bls.n	800fcb4 <memmove+0x10>
 800fcae:	4284      	cmp	r4, r0
 800fcb0:	4623      	mov	r3, r4
 800fcb2:	d807      	bhi.n	800fcc4 <memmove+0x20>
 800fcb4:	1e43      	subs	r3, r0, #1
 800fcb6:	42a1      	cmp	r1, r4
 800fcb8:	d008      	beq.n	800fccc <memmove+0x28>
 800fcba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fcbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fcc2:	e7f8      	b.n	800fcb6 <memmove+0x12>
 800fcc4:	4402      	add	r2, r0
 800fcc6:	4601      	mov	r1, r0
 800fcc8:	428a      	cmp	r2, r1
 800fcca:	d100      	bne.n	800fcce <memmove+0x2a>
 800fccc:	bd10      	pop	{r4, pc}
 800fcce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fcd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fcd6:	e7f7      	b.n	800fcc8 <memmove+0x24>

0800fcd8 <_realloc_r>:
 800fcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcdc:	4680      	mov	r8, r0
 800fcde:	4614      	mov	r4, r2
 800fce0:	460e      	mov	r6, r1
 800fce2:	b921      	cbnz	r1, 800fcee <_realloc_r+0x16>
 800fce4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fce8:	4611      	mov	r1, r2
 800fcea:	f7ff bc1d 	b.w	800f528 <_malloc_r>
 800fcee:	b92a      	cbnz	r2, 800fcfc <_realloc_r+0x24>
 800fcf0:	f7ff fbae 	bl	800f450 <_free_r>
 800fcf4:	4625      	mov	r5, r4
 800fcf6:	4628      	mov	r0, r5
 800fcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcfc:	f000 f81b 	bl	800fd36 <_malloc_usable_size_r>
 800fd00:	4284      	cmp	r4, r0
 800fd02:	4607      	mov	r7, r0
 800fd04:	d802      	bhi.n	800fd0c <_realloc_r+0x34>
 800fd06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fd0a:	d812      	bhi.n	800fd32 <_realloc_r+0x5a>
 800fd0c:	4621      	mov	r1, r4
 800fd0e:	4640      	mov	r0, r8
 800fd10:	f7ff fc0a 	bl	800f528 <_malloc_r>
 800fd14:	4605      	mov	r5, r0
 800fd16:	2800      	cmp	r0, #0
 800fd18:	d0ed      	beq.n	800fcf6 <_realloc_r+0x1e>
 800fd1a:	42bc      	cmp	r4, r7
 800fd1c:	4622      	mov	r2, r4
 800fd1e:	4631      	mov	r1, r6
 800fd20:	bf28      	it	cs
 800fd22:	463a      	movcs	r2, r7
 800fd24:	f7ff fb7e 	bl	800f424 <memcpy>
 800fd28:	4631      	mov	r1, r6
 800fd2a:	4640      	mov	r0, r8
 800fd2c:	f7ff fb90 	bl	800f450 <_free_r>
 800fd30:	e7e1      	b.n	800fcf6 <_realloc_r+0x1e>
 800fd32:	4635      	mov	r5, r6
 800fd34:	e7df      	b.n	800fcf6 <_realloc_r+0x1e>

0800fd36 <_malloc_usable_size_r>:
 800fd36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd3a:	1f18      	subs	r0, r3, #4
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	bfbc      	itt	lt
 800fd40:	580b      	ldrlt	r3, [r1, r0]
 800fd42:	18c0      	addlt	r0, r0, r3
 800fd44:	4770      	bx	lr
	...

0800fd48 <_init>:
 800fd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd4a:	bf00      	nop
 800fd4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd4e:	bc08      	pop	{r3}
 800fd50:	469e      	mov	lr, r3
 800fd52:	4770      	bx	lr

0800fd54 <_fini>:
 800fd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd56:	bf00      	nop
 800fd58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd5a:	bc08      	pop	{r3}
 800fd5c:	469e      	mov	lr, r3
 800fd5e:	4770      	bx	lr
