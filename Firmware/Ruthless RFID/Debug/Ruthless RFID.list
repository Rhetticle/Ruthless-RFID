
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000694  08012cfc  08012cfc  00022cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013390  08013390  00030664  2**0
                  CONTENTS
  4 .ARM          00000008  08013390  08013390  00023390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013398  08013398  00030664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013398  08013398  00023398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801339c  0801339c  0002339c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000664  20000000  080133a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006e1c  20000664  08013a04  00030664  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007480  08013a04  00037480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030664  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a4e9  00000000  00000000  00030694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006066  00000000  00000000  0005ab7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002350  00000000  00000000  00060be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020d0  00000000  00000000  00062f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ebcf  00000000  00000000  00065008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c498  00000000  00000000  00083bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0379  00000000  00000000  000b006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001503e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009848  00000000  00000000  00150438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000664 	.word	0x20000664
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012ce4 	.word	0x08012ce4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000668 	.word	0x20000668
 80001dc:	08012ce4 	.word	0x08012ce4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af04      	add	r7, sp, #16
 800059a:	4603      	mov	r3, r0
 800059c:	460a      	mov	r2, r1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	4613      	mov	r3, r2
 80005a2:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2364      	movs	r3, #100	; 0x64
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	f107 030f 	add.w	r3, r7, #15
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	2150      	movs	r1, #80	; 0x50
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MFRC_REGW+0x44>)
 80005c0:	f002 fe28 	bl	8003214 <HAL_I2C_Mem_Write>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 80005ca:	23bb      	movs	r3, #187	; 0xbb
 80005cc:	e000      	b.n	80005d0 <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 80005ce:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000684 	.word	0x20000684

080005dc <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af04      	add	r7, sp, #16
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2150      	movs	r1, #80	; 0x50
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <MFRC_REGR+0x3c>)
 80005fe:	f002 ff03 	bl	8003408 <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000608:	23bb      	movs	r3, #187	; 0xbb
 800060a:	e000      	b.n	800060e <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 800060c:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000684 	.word	0x20000684

0800061c <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af04      	add	r7, sp, #16
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e018      	b.n	8000660 <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	2264      	movs	r2, #100	; 0x64
 8000636:	9202      	str	r2, [sp, #8]
 8000638:	2201      	movs	r2, #1
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2209      	movs	r2, #9
 8000642:	2150      	movs	r1, #80	; 0x50
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <MFRC_FIFOW+0x58>)
 8000646:	f002 fde5 	bl	8003214 <HAL_I2C_Mem_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000650:	23bb      	movs	r3, #187	; 0xbb
 8000652:	e00a      	b.n	800066a <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f002 f9dd 	bl	8002a14 <HAL_Delay>
	for(int i=0;i<size;i++){
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	dbe2      	blt.n	800062e <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000668:	23cc      	movs	r3, #204	; 0xcc
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000684 	.word	0x20000684

08000678 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af04      	add	r7, sp, #16
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e018      	b.n	80006bc <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	2264      	movs	r2, #100	; 0x64
 8000692:	9202      	str	r2, [sp, #8]
 8000694:	2201      	movs	r2, #1
 8000696:	9201      	str	r2, [sp, #4]
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	2209      	movs	r2, #9
 800069e:	2150      	movs	r1, #80	; 0x50
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MFRC_FIFOR+0x58>)
 80006a2:	f002 feb1 	bl	8003408 <HAL_I2C_Mem_Read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 80006ac:	23bb      	movs	r3, #187	; 0xbb
 80006ae:	e00a      	b.n	80006c6 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f002 f9af 	bl	8002a14 <HAL_Delay>
	for(int i=0;i<size;i++){
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbe2      	blt.n	800068a <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 80006c4:	23cc      	movs	r3, #204	; 0xcc
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000684 	.word	0x20000684

080006d4 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	4619      	mov	r1, r3
 80006de:	2014      	movs	r0, #20
 80006e0:	f7ff ff7c 	bl	80005dc <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d007      	beq.n	80006fe <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f043 0303 	orr.w	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2014      	movs	r0, #20
 80006fa:	f7ff ff4b 	bl	8000594 <MFRC_REGW>
	}
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	460a      	mov	r2, r1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	4613      	mov	r3, r2
 8000714:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000716:	f107 020f 	add.w	r2, r7, #15
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff5c 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000728:	43db      	mvns	r3, r3
 800072a:	b25a      	sxtb	r2, r3
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff2a 	bl	8000594 <MFRC_REGW>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 800074c:	2103      	movs	r1, #3
 800074e:	2014      	movs	r0, #20
 8000750:	f7ff ffd9 	bl	8000706 <ClearBitMask>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	460b      	mov	r3, r1
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000766:	2100      	movs	r1, #0
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff ff13 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 800076e:	2104      	movs	r1, #4
 8000770:	2005      	movs	r0, #5
 8000772:	f7ff ff0f 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	200a      	movs	r0, #10
 800077a:	f7ff ff0b 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	4619      	mov	r1, r3
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ff4a 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000788:	2103      	movs	r1, #3
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff02 	bl	8000594 <MFRC_REGW>
	HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f002 f93f 	bl	8002a14 <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000796:	f107 0317 	add.w	r3, r7, #23
 800079a:	4619      	mov	r1, r3
 800079c:	2005      	movs	r0, #5
 800079e:	f7ff ff1d 	bl	80005dc <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d101      	bne.n	80007b0 <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 80007ac:	23ee      	movs	r3, #238	; 0xee
 80007ae:	e00e      	b.n	80007ce <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff feee 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	2022      	movs	r0, #34	; 0x22
 80007bc:	f7ff ff0e 	bl	80005dc <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	2021      	movs	r0, #33	; 0x21
 80007c8:	f7ff ff08 	bl	80005dc <MFRC_REGR>
	return(PCD_OK);
 80007cc:	23cc      	movs	r3, #204	; 0xcc

}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <MFRC_INIT+0x60>)
 80007e2:	f002 fbb9 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4813      	ldr	r0, [pc, #76]	; (8000838 <MFRC_INIT+0x60>)
 80007ec:	f002 fbb4 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f002 f90f 	bl	8002a14 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2120      	movs	r1, #32
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <MFRC_INIT+0x60>)
 80007fc:	f002 fbac 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000800:	2032      	movs	r0, #50	; 0x32
 8000802:	f002 f907 	bl	8002a14 <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000806:	2100      	movs	r1, #0
 8000808:	2012      	movs	r0, #18
 800080a:	f7ff fec3 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2013      	movs	r0, #19
 8000812:	f7ff febf 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000816:	2126      	movs	r1, #38	; 0x26
 8000818:	2024      	movs	r0, #36	; 0x24
 800081a:	f7ff febb 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	2015      	movs	r0, #21
 8000822:	f7ff feb7 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000826:	213d      	movs	r1, #61	; 0x3d
 8000828:	2011      	movs	r0, #17
 800082a:	f7ff feb3 	bl	8000594 <MFRC_REGW>
	MFRC_ANTON();
 800082e:	f7ff ff51 	bl	80006d4 <MFRC_ANTON>
	return(PCD_OK);
 8000832:	23cc      	movs	r3, #204	; 0xcc



}
 8000834:	4618      	mov	r0, r3
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020400 	.word	0x40020400

0800083c <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	607a      	str	r2, [r7, #4]
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	72fb      	strb	r3, [r7, #11]
 800084c:	4613      	mov	r3, r2
 800084e:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000850:	2300      	movs	r3, #0
 8000852:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000854:	2300      	movs	r3, #0
 8000856:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe9a 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000860:	217f      	movs	r1, #127	; 0x7f
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff fe96 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	200a      	movs	r0, #10
 800086c:	f7ff fe92 	bl	8000594 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	4619      	mov	r1, r3
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fed1 	bl	800061c <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 800087a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087e:	4619      	mov	r1, r3
 8000880:	200d      	movs	r0, #13
 8000882:	f7ff fe87 	bl	8000594 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000886:	210c      	movs	r1, #12
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fe83 	bl	8000594 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 800088e:	f107 0316 	add.w	r3, r7, #22
 8000892:	4619      	mov	r1, r3
 8000894:	200d      	movs	r0, #13
 8000896:	f7ff fea1 	bl	80005dc <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	200d      	movs	r0, #13
 80008a6:	f7ff fe75 	bl	8000594 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 80008aa:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f002 f8b1 	bl	8002a14 <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 80008b2:	7abb      	ldrb	r3, [r7, #10]
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fede 	bl	8000678 <MFRC_FIFOR>


	return(PCD_OK);
 80008bc:	23cc      	movs	r3, #204	; 0xcc
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <MFRC_REQA>:
 *
 * @param response: Array to store response from PICC
 *
 * */

PCD_StatusTypeDef MFRC_REQA(uint8_t* response){
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af02      	add	r7, sp, #8
 80008cc:	6078      	str	r0, [r7, #4]
	uint8_t REQ=0x26;
 80008ce:	2326      	movs	r3, #38	; 0x26
 80008d0:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	200e      	movs	r0, #14
 80008d6:	f7ff ff16 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&REQ,1, response, 2, 7)!=PCD_OK){//REQA is a 7-bit command
 80008da:	f107 000f 	add.w	r0, r7, #15
 80008de:	2307      	movs	r3, #7
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2302      	movs	r3, #2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	2101      	movs	r1, #1
 80008e8:	f7ff ffa8 	bl	800083c <MFRC_TRANSCEIVE>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2bcc      	cmp	r3, #204	; 0xcc
 80008f0:	d001      	beq.n	80008f6 <MFRC_REQA+0x30>
		return(PCD_COMM_ERR);
 80008f2:	23aa      	movs	r3, #170	; 0xaa
 80008f4:	e000      	b.n	80008f8 <MFRC_REQA+0x32>
	}

	else{
		return(PCD_OK);
 80008f6:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MFRC_WUPA>:
 * Function to issue the WUPA command to PICC (We use this to go from HALT to READY state check ISO standard)
 *
 * @param reponse: PICC reponse to WUPA (Expect 0x44, 0x00 for ULTRALIGHT
 * */

PCD_StatusTypeDef MFRC_WUPA(uint8_t* response){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
	uint8_t WUPA=0x52;
 8000908:	2352      	movs	r3, #82	; 0x52
 800090a:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	200e      	movs	r0, #14
 8000910:	f7ff fef9 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&WUPA,1, response, 2, 7)!=PCD_OK){//WUPA is a 7-bit command
 8000914:	f107 000f 	add.w	r0, r7, #15
 8000918:	2307      	movs	r3, #7
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2302      	movs	r3, #2
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	2101      	movs	r1, #1
 8000922:	f7ff ff8b 	bl	800083c <MFRC_TRANSCEIVE>
 8000926:	4603      	mov	r3, r0
 8000928:	2bcc      	cmp	r3, #204	; 0xcc
 800092a:	d001      	beq.n	8000930 <MFRC_WUPA+0x30>
		return(PCD_COMM_ERR);
 800092c:	23aa      	movs	r3, #170	; 0xaa
 800092e:	e000      	b.n	8000932 <MFRC_WUPA+0x32>
	}

	else{
		return(PCD_OK);
 8000930:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000932:	4618      	mov	r0, r3
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <MFRC_HALTA>:

/*
 * Function to issue HALTA command to PICC (Change from READY to HALT state) Send WUPA and select sequence to re-select PICC
 * */

PCD_StatusTypeDef MFRC_HALTA(void){
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af02      	add	r7, sp, #8
	uint8_t transaction[4]={ULTRA_HALTA,0x00};
 8000940:	2350      	movs	r3, #80	; 0x50
 8000942:	60fb      	str	r3, [r7, #12]
	uint8_t CRC_val[2];
	uint8_t ack;

	if(CALC_CRC(transaction, 2, CRC_val)!=PCD_OK){
 8000944:	f107 0208 	add.w	r2, r7, #8
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2102      	movs	r1, #2
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff02 	bl	8000758 <CALC_CRC>
 8000954:	4603      	mov	r3, r0
 8000956:	2bcc      	cmp	r3, #204	; 0xcc
 8000958:	d001      	beq.n	800095e <MFRC_HALTA+0x24>
		return(CRC_ERR);
 800095a:	23ee      	movs	r3, #238	; 0xee
 800095c:	e013      	b.n	8000986 <MFRC_HALTA+0x4c>
	}
	memcpy(transaction+2,CRC_val,2);
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	3302      	adds	r3, #2
 8000964:	893a      	ldrh	r2, [r7, #8]
 8000966:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, &ack, 1, 0)!=PCD_OK){
 8000968:	1dfa      	adds	r2, r7, #7
 800096a:	f107 000c 	add.w	r0, r7, #12
 800096e:	2300      	movs	r3, #0
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	2104      	movs	r1, #4
 8000976:	f7ff ff61 	bl	800083c <MFRC_TRANSCEIVE>
 800097a:	4603      	mov	r3, r0
 800097c:	2bcc      	cmp	r3, #204	; 0xcc
 800097e:	d001      	beq.n	8000984 <MFRC_HALTA+0x4a>
		return(PCD_COMM_ERR);
 8000980:	23aa      	movs	r3, #170	; 0xaa
 8000982:	e000      	b.n	8000986 <MFRC_HALTA+0x4c>
	}

	else{
		return(PCD_OK);
 8000984:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af02      	add	r7, sp, #8
 8000994:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000996:	f242 0393 	movw	r3, #8339	; 0x2093
 800099a:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	200e      	movs	r0, #14
 80009a0:	f7ff feb1 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 80009a4:	f107 000c 	add.w	r0, r7, #12
 80009a8:	2300      	movs	r3, #0
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2305      	movs	r3, #5
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	2102      	movs	r1, #2
 80009b2:	f7ff ff43 	bl	800083c <MFRC_TRANSCEIVE>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2bcc      	cmp	r3, #204	; 0xcc
 80009ba:	d001      	beq.n	80009c0 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 80009bc:	23aa      	movs	r3, #170	; 0xaa
 80009be:	e000      	b.n	80009c2 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 80009c0:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b088      	sub	sp, #32
 80009ce:	af02      	add	r7, sp, #8
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 80009d4:	f247 0393 	movw	r3, #28819	; 0x7093
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	3302      	adds	r3, #2
 80009ea:	2205      	movs	r2, #5
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f011 fcee 	bl	80123d0 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 80009f4:	f107 0208 	add.w	r2, r7, #8
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2107      	movs	r1, #7
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff feaa 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	3307      	adds	r3, #7
 8000a0a:	893a      	ldrh	r2, [r7, #8]
 8000a0c:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000a0e:	f107 000c 	add.w	r0, r7, #12
 8000a12:	2300      	movs	r3, #0
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2303      	movs	r3, #3
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	2109      	movs	r1, #9
 8000a1c:	f7ff ff0e 	bl	800083c <MFRC_TRANSCEIVE>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2bcc      	cmp	r3, #204	; 0xcc
 8000a24:	d001      	beq.n	8000a2a <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000a26:	23aa      	movs	r3, #170	; 0xaa
 8000a28:	e000      	b.n	8000a2c <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 8000a2a:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 8000a3c:	f242 0395 	movw	r3, #8341	; 0x2095
 8000a40:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	200e      	movs	r0, #14
 8000a46:	f7ff fe5e 	bl	8000706 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000a4a:	f107 000c 	add.w	r0, r7, #12
 8000a4e:	2300      	movs	r3, #0
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2305      	movs	r3, #5
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	2102      	movs	r1, #2
 8000a58:	f7ff fef0 	bl	800083c <MFRC_TRANSCEIVE>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2bcc      	cmp	r3, #204	; 0xcc
 8000a60:	d001      	beq.n	8000a66 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 8000a62:	23aa      	movs	r3, #170	; 0xaa
 8000a64:	e000      	b.n	8000a68 <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 8000a66:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 8000a7a:	f247 0395 	movw	r3, #28821	; 0x7095
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	3302      	adds	r3, #2
 8000a90:	2205      	movs	r2, #5
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f011 fc9b 	bl	80123d0 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000a9a:	f107 0208 	add.w	r2, r7, #8
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2107      	movs	r1, #7
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe57 	bl	8000758 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	3307      	adds	r3, #7
 8000ab0:	893a      	ldrh	r2, [r7, #8]
 8000ab2:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000ab4:	f107 000c 	add.w	r0, r7, #12
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2303      	movs	r3, #3
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	2109      	movs	r1, #9
 8000ac2:	f7ff febb 	bl	800083c <MFRC_TRANSCEIVE>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2bcc      	cmp	r3, #204	; 0xcc
 8000aca:	d001      	beq.n	8000ad0 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 8000acc:	23aa      	movs	r3, #170	; 0xaa
 8000ace:	e000      	b.n	8000ad2 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 8000ad0:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
	  uint8_t ANTICOL1[5];
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];

	  MFRC_ANTICOL1(ANTICOL1);
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff52 	bl	800098e <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 8000aea:	7c3b      	ldrb	r3, [r7, #16]
 8000aec:	2b88      	cmp	r3, #136	; 0x88
 8000aee:	d001      	beq.n	8000af4 <PICC_Select+0x1a>
		  return(PCD_COMM_ERR);
 8000af0:	23aa      	movs	r3, #170	; 0xaa
 8000af2:	e01e      	b.n	8000b32 <PICC_Select+0x58>
	  }
	  HAL_Delay(10);
 8000af4:	200a      	movs	r0, #10
 8000af6:	f001 ff8d 	bl	8002a14 <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 8000afa:	f107 020c 	add.w	r2, r7, #12
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff60 	bl	80009ca <MFRC_SEL1>
	  HAL_Delay(10);
 8000b0a:	200a      	movs	r0, #10
 8000b0c:	f001 ff82 	bl	8002a14 <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff8e 	bl	8000a34 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f001 ff7b 	bl	8002a14 <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8000b1e:	463a      	mov	r2, r7
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ffa3 	bl	8000a70 <MFRC_SEL2>
	  HAL_Delay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f001 ff72 	bl	8002a14 <HAL_Delay>
	  return(PCD_OK);
 8000b30:	23cc      	movs	r3, #204	; 0xcc
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_REQA(ATQA)!=PCD_OK){
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff febf 	bl	80008c6 <MFRC_REQA>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2bcc      	cmp	r3, #204	; 0xcc
 8000b4c:	d001      	beq.n	8000b52 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 8000b4e:	23aa      	movs	r3, #170	; 0xaa
 8000b50:	e005      	b.n	8000b5e <PICC_CHECK+0x24>
	}

	else{
		if(ATQA[0]!=ULTRA_ATQA){
 8000b52:	793b      	ldrb	r3, [r7, #4]
 8000b54:	2b44      	cmp	r3, #68	; 0x44
 8000b56:	d001      	beq.n	8000b5c <PICC_CHECK+0x22>
			return(PCD_COMM_ERR);
 8000b58:	23aa      	movs	r3, #170	; 0xaa
 8000b5a:	e000      	b.n	8000b5e <PICC_CHECK+0x24>
		}
		else{
			return(PCD_OK);
 8000b5c:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af02      	add	r7, sp, #8
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	6039      	str	r1, [r7, #0]
 8000b70:	71fb      	strb	r3, [r7, #7]

		uint8_t transaction[4]={ULTRA_READ,addr};
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	2330      	movs	r3, #48	; 0x30
 8000b78:	733b      	strb	r3, [r7, #12]
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	737b      	strb	r3, [r7, #13]
		uint8_t CRC_val[2];

		CALC_CRC(transaction, 2, CRC_val);
 8000b7e:	f107 0208 	add.w	r2, r7, #8
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	2102      	movs	r1, #2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fde5 	bl	8000758 <CALC_CRC>


		memcpy(transaction+2,CRC_val,2);
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	3302      	adds	r3, #2
 8000b94:	893a      	ldrh	r2, [r7, #8]
 8000b96:	801a      	strh	r2, [r3, #0]

		if(MFRC_TRANSCEIVE(transaction, 4, data, 18, 0)!=PCD_OK){
 8000b98:	f107 000c 	add.w	r0, r7, #12
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2312      	movs	r3, #18
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	f7ff fe49 	bl	800083c <MFRC_TRANSCEIVE>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2bcc      	cmp	r3, #204	; 0xcc
 8000bae:	d001      	beq.n	8000bb4 <UL_READ+0x4e>
			return(PCD_COMM_ERR);
 8000bb0:	23aa      	movs	r3, #170	; 0xaa
 8000bb2:	e000      	b.n	8000bb6 <UL_READ+0x50>
		}

		else{
			return(PCD_OK);
 8000bb4:	23cc      	movs	r3, #204	; 0xcc
		}
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <Print>:
	else{
		return(PCD_OK);
	}
}

void Print(char* mess){
 8000bbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	466b      	mov	r3, sp
 8000bca:	461e      	mov	r6, r3
	char send[strlen(mess)];
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff fb07 	bl	80001e0 <strlen>
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	4688      	mov	r8, r1
 8000bde:	4699      	mov	r9, r3
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	460c      	mov	r4, r1
 8000bf8:	461d      	mov	r5, r3
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	f04f 0300 	mov.w	r3, #0
 8000c02:	00eb      	lsls	r3, r5, #3
 8000c04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c08:	00e2      	lsls	r2, r4, #3
 8000c0a:	1dcb      	adds	r3, r1, #7
 8000c0c:	08db      	lsrs	r3, r3, #3
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	ebad 0d03 	sub.w	sp, sp, r3
 8000c14:	466b      	mov	r3, sp
 8000c16:	3300      	adds	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
	memcpy(send,mess,strlen(mess));
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fae0 	bl	80001e0 <strlen>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	68b8      	ldr	r0, [r7, #8]
 8000c28:	f011 fbd2 	bl	80123d0 <memcpy>
	CDC_Transmit_FS((uint8_t*)send, strlen(mess));
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fad7 	bl	80001e0 <strlen>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	4619      	mov	r1, r3
 8000c38:	68b8      	ldr	r0, [r7, #8]
 8000c3a:	f010 ff3d 	bl	8011ab8 <CDC_Transmit_FS>
	HAL_Delay(10);
 8000c3e:	200a      	movs	r0, #10
 8000c40:	f001 fee8 	bl	8002a14 <HAL_Delay>
 8000c44:	46b5      	mov	sp, r6
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c50 <DumpINFO>:
 * Function to dump data to serial terminal
 *
 * @param data: Destination array for card data
 * */
uint8_t WUPA=0;
PCD_StatusTypeDef DumpINFO(uint8_t* data){
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b094      	sub	sp, #80	; 0x50
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	6078      	str	r0, [r7, #4]
	  uint8_t ATQA[2];
	  if(WUPA==1){
 8000c58:	4b63      	ldr	r3, [pc, #396]	; (8000de8 <DumpINFO+0x198>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d15d      	bne.n	8000d1c <DumpINFO+0xcc>
		 if(PICC_Select()!=PCD_OK){
 8000c60:	f7ff ff3b 	bl	8000ada <PICC_Select>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2bcc      	cmp	r3, #204	; 0xcc
 8000c68:	d007      	beq.n	8000c7a <DumpINFO+0x2a>
			 Print("ERROR No PICC Found\r\n");
 8000c6a:	4860      	ldr	r0, [pc, #384]	; (8000dec <DumpINFO+0x19c>)
 8000c6c:	f7ff ffa7 	bl	8000bbe <Print>
			 WUPA=0;
 8000c70:	4b5d      	ldr	r3, [pc, #372]	; (8000de8 <DumpINFO+0x198>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
			 return(PCD_COMM_ERR);
 8000c76:	23aa      	movs	r3, #170	; 0xaa
 8000c78:	e0b2      	b.n	8000de0 <DumpINFO+0x190>
		 }
		 else{
			 HAL_Delay(10);
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f001 feca 	bl	8002a14 <HAL_Delay>
				Print("    BYTE\r\n");
 8000c80:	485b      	ldr	r0, [pc, #364]	; (8000df0 <DumpINFO+0x1a0>)
 8000c82:	f7ff ff9c 	bl	8000bbe <Print>
				Print("0 1 2 3\r\n");
 8000c86:	485b      	ldr	r0, [pc, #364]	; (8000df4 <DumpINFO+0x1a4>)
 8000c88:	f7ff ff99 	bl	8000bbe <Print>
				Print("        \r\n");
 8000c8c:	485a      	ldr	r0, [pc, #360]	; (8000df8 <DumpINFO+0x1a8>)
 8000c8e:	f7ff ff96 	bl	8000bbe <Print>
				for(int i=0;i<13;i+=4){
 8000c92:	2300      	movs	r3, #0
 8000c94:	647b      	str	r3, [r7, #68]	; 0x44
 8000c96:	e033      	b.n	8000d00 <DumpINFO+0xb0>
					UL_READ(i, data);
 8000c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff61 	bl	8000b66 <UL_READ>
					for(int j=0;j<13;j+=4){
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000caa:	2b0c      	cmp	r3, #12
 8000cac:	dc25      	bgt.n	8000cfa <DumpINFO+0xaa>
						char mess[20];
						sprintf(mess,"%X, %X, %X, %X\r\n",data[j],data[j+1],data[j+2],data[j+3]);
 8000cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461c      	mov	r4, r3
 8000cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cba:	3301      	adds	r3, #1
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461d      	mov	r5, r3
 8000cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f107 0020 	add.w	r0, r7, #32
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	9100      	str	r1, [sp, #0]
 8000ce2:	462b      	mov	r3, r5
 8000ce4:	4622      	mov	r2, r4
 8000ce6:	4945      	ldr	r1, [pc, #276]	; (8000dfc <DumpINFO+0x1ac>)
 8000ce8:	f011 fc78 	bl	80125dc <siprintf>
						Print(mess);
 8000cec:	f107 0320 	add.w	r3, r7, #32
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff64 	bl	8000bbe <Print>
						return(PCD_OK);
 8000cf6:	23cc      	movs	r3, #204	; 0xcc
 8000cf8:	e072      	b.n	8000de0 <DumpINFO+0x190>
				for(int i=0;i<13;i+=4){
 8000cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8000d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d02:	2b0c      	cmp	r3, #12
 8000d04:	ddc8      	ble.n	8000c98 <DumpINFO+0x48>
					}
				}

			 MFRC_HALTA();
 8000d06:	f7ff fe18 	bl	800093a <MFRC_HALTA>
			 MFRC_WUPA(ATQA);
 8000d0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fdf6 	bl	8000900 <MFRC_WUPA>
			 WUPA=1;
 8000d14:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <DumpINFO+0x198>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e061      	b.n	8000de0 <DumpINFO+0x190>
		 }

	  }
	  else{
		  if(PICC_CHECK()!=PCD_OK){
 8000d1c:	f7ff ff0d 	bl	8000b3a <PICC_CHECK>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2bcc      	cmp	r3, #204	; 0xcc
 8000d24:	d007      	beq.n	8000d36 <DumpINFO+0xe6>
		  		  Print("ERROR No PICC Found\r\n");
 8000d26:	4831      	ldr	r0, [pc, #196]	; (8000dec <DumpINFO+0x19c>)
 8000d28:	f7ff ff49 	bl	8000bbe <Print>
		  		  WUPA=0;
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <DumpINFO+0x198>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
		  		return(PCD_COMM_ERR);
 8000d32:	23aa      	movs	r3, #170	; 0xaa
 8000d34:	e054      	b.n	8000de0 <DumpINFO+0x190>
		  }

		  else{
			  HAL_Delay(10);
 8000d36:	200a      	movs	r0, #10
 8000d38:	f001 fe6c 	bl	8002a14 <HAL_Delay>
			  PICC_Select();
 8000d3c:	f7ff fecd 	bl	8000ada <PICC_Select>
			  HAL_Delay(10);
 8000d40:	200a      	movs	r0, #10
 8000d42:	f001 fe67 	bl	8002a14 <HAL_Delay>
				Print("    BYTE\r\n");
 8000d46:	482a      	ldr	r0, [pc, #168]	; (8000df0 <DumpINFO+0x1a0>)
 8000d48:	f7ff ff39 	bl	8000bbe <Print>
				Print("0 1 2 3\r\n");
 8000d4c:	4829      	ldr	r0, [pc, #164]	; (8000df4 <DumpINFO+0x1a4>)
 8000d4e:	f7ff ff36 	bl	8000bbe <Print>
				Print("        \r\n");
 8000d52:	4829      	ldr	r0, [pc, #164]	; (8000df8 <DumpINFO+0x1a8>)
 8000d54:	f7ff ff33 	bl	8000bbe <Print>
				for(int i=0;i<13;i+=4){
 8000d58:	2300      	movs	r3, #0
 8000d5a:	643b      	str	r3, [r7, #64]	; 0x40
 8000d5c:	e033      	b.n	8000dc6 <DumpINFO+0x176>
					UL_READ(i, data);
 8000d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fefe 	bl	8000b66 <UL_READ>
					for(int j=0;j<13;j+=4){
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d70:	2b0c      	cmp	r3, #12
 8000d72:	dc25      	bgt.n	8000dc0 <DumpINFO+0x170>
						char mess[20];
						sprintf(mess,"%X, %X, %X, %X\r\n",data[j],data[j+1],data[j+2],data[j+3]);
 8000d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461c      	mov	r4, r3
 8000d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d80:	3301      	adds	r3, #1
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461d      	mov	r5, r3
 8000d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d98:	3303      	adds	r3, #3
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	f107 000c 	add.w	r0, r7, #12
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	9100      	str	r1, [sp, #0]
 8000da8:	462b      	mov	r3, r5
 8000daa:	4622      	mov	r2, r4
 8000dac:	4913      	ldr	r1, [pc, #76]	; (8000dfc <DumpINFO+0x1ac>)
 8000dae:	f011 fc15 	bl	80125dc <siprintf>
						Print(mess);
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff01 	bl	8000bbe <Print>
						return(PCD_OK);
 8000dbc:	23cc      	movs	r3, #204	; 0xcc
 8000dbe:	e00f      	b.n	8000de0 <DumpINFO+0x190>
				for(int i=0;i<13;i+=4){
 8000dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8000dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dc8:	2b0c      	cmp	r3, #12
 8000dca:	ddc8      	ble.n	8000d5e <DumpINFO+0x10e>
					}
				}

			  MFRC_HALTA();
 8000dcc:	f7ff fdb5 	bl	800093a <MFRC_HALTA>
			  MFRC_WUPA(ATQA);
 8000dd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fd93 	bl	8000900 <MFRC_WUPA>
			  WUPA=1;
 8000dda:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <DumpINFO+0x198>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
	  }




}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3748      	adds	r7, #72	; 0x48
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bdb0      	pop	{r4, r5, r7, pc}
 8000de8:	20000680 	.word	0x20000680
 8000dec:	08012cfc 	.word	0x08012cfc
 8000df0:	08012d14 	.word	0x08012d14
 8000df4:	08012d20 	.word	0x08012d20
 8000df8:	08012d2c 	.word	0x08012d2c
 8000dfc:	08012d38 	.word	0x08012d38

08000e00 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000e06:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8000e08:	463b      	mov	r3, r7
 8000e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f011 faeb 	bl	80123ec <memset>
	OLED_FLUSH(zeros);
 8000e16:	463b      	mov	r3, r7
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f87b 	bl	8000f14 <OLED_FLUSH>

}
 8000e1e:	bf00      	nop
 8000e20:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4815      	ldr	r0, [pc, #84]	; (8000e90 <OLED_cmd+0x68>)
 8000e3c:	f002 f88c 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2102      	movs	r1, #2
 8000e44:	4813      	ldr	r0, [pc, #76]	; (8000e94 <OLED_cmd+0x6c>)
 8000e46:	f002 f887 	bl	8002f58 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8000e4a:	f107 010f 	add.w	r1, r7, #15
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	2201      	movs	r2, #1
 8000e54:	4810      	ldr	r0, [pc, #64]	; (8000e98 <OLED_cmd+0x70>)
 8000e56:	f005 f812 	bl	8005e7e <HAL_SPI_Transmit>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d009      	beq.n	8000e74 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	480a      	ldr	r0, [pc, #40]	; (8000e90 <OLED_cmd+0x68>)
 8000e66:	f002 f877 	bl	8002f58 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f001 fdd2 	bl	8002a14 <HAL_Delay>
		return(HAL_ERROR);
 8000e70:	2301      	movs	r3, #1
 8000e72:	e008      	b.n	8000e86 <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2110      	movs	r1, #16
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <OLED_cmd+0x68>)
 8000e7a:	f002 f86d 	bl	8002f58 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f001 fdc8 	bl	8002a14 <HAL_Delay>
		return(HAL_OK);
 8000e84:	2300      	movs	r3, #0
	}

}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020400 	.word	0x40020400
 8000e98:	200006d8 	.word	0x200006d8

08000e9c <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4816      	ldr	r0, [pc, #88]	; (8000f08 <OLED_data+0x6c>)
 8000eae:	f002 f853 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4815      	ldr	r0, [pc, #84]	; (8000f0c <OLED_data+0x70>)
 8000eb8:	f002 f84e 	bl	8002f58 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4812      	ldr	r0, [pc, #72]	; (8000f10 <OLED_data+0x74>)
 8000ec8:	f004 ffd9 	bl	8005e7e <HAL_SPI_Transmit>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	480d      	ldr	r0, [pc, #52]	; (8000f0c <OLED_data+0x70>)
 8000ed8:	f002 f83e 	bl	8002f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2110      	movs	r1, #16
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <OLED_data+0x6c>)
 8000ee2:	f002 f839 	bl	8002f58 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00a      	b.n	8000f00 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2102      	movs	r1, #2
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <OLED_data+0x70>)
 8000ef0:	f002 f832 	bl	8002f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <OLED_data+0x6c>)
 8000efa:	f002 f82d 	bl	8002f58 <HAL_GPIO_WritePin>
		return(HAL_OK);
 8000efe:	2300      	movs	r3, #0
	}



}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	200006d8 	.word	0x200006d8

08000f14 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e023      	b.n	8000f6a <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	3b50      	subs	r3, #80	; 0x50
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff7c 	bl	8000e28 <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8000f30:	2002      	movs	r0, #2
 8000f32:	f7ff ff79 	bl	8000e28 <OLED_cmd>
		OLED_cmd(UPPER_COL);
 8000f36:	2010      	movs	r0, #16
 8000f38:	f7ff ff76 	bl	8000e28 <OLED_cmd>
		for(int i=0;i<128;i++){
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	e00d      	b.n	8000f5e <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	01da      	lsls	r2, r3, #7
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	4413      	add	r3, r2
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	2101      	movs	r1, #1
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ffa2 	bl	8000e9c <OLED_data>
		for(int i=0;i<128;i++){
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	2b7f      	cmp	r3, #127	; 0x7f
 8000f62:	ddee      	ble.n	8000f42 <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b07      	cmp	r3, #7
 8000f6e:	ddd8      	ble.n	8000f22 <OLED_FLUSH+0xe>
		}


	}
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8000f7c:	b5b0      	push	{r4, r5, r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2110      	movs	r1, #16
 8000f86:	482f      	ldr	r0, [pc, #188]	; (8001044 <OLED_INIT+0xc8>)
 8000f88:	f001 ffe6 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2108      	movs	r1, #8
 8000f90:	482c      	ldr	r0, [pc, #176]	; (8001044 <OLED_INIT+0xc8>)
 8000f92:	f001 ffe1 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2102      	movs	r1, #2
 8000f9a:	482b      	ldr	r0, [pc, #172]	; (8001048 <OLED_INIT+0xcc>)
 8000f9c:	f001 ffdc 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fa0:	2064      	movs	r0, #100	; 0x64
 8000fa2:	f001 fd37 	bl	8002a14 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2108      	movs	r1, #8
 8000faa:	4826      	ldr	r0, [pc, #152]	; (8001044 <OLED_INIT+0xc8>)
 8000fac:	f001 ffd4 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fb0:	2064      	movs	r0, #100	; 0x64
 8000fb2:	f001 fd2f 	bl	8002a14 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2108      	movs	r1, #8
 8000fba:	4822      	ldr	r0, [pc, #136]	; (8001044 <OLED_INIT+0xc8>)
 8000fbc:	f001 ffcc 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fc0:	2064      	movs	r0, #100	; 0x64
 8000fc2:	f001 fd27 	bl	8002a14 <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 8000fc6:	4b21      	ldr	r3, [pc, #132]	; (800104c <OLED_INIT+0xd0>)
 8000fc8:	463c      	mov	r4, r7
 8000fca:	461d      	mov	r5, r3
 8000fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fd4:	c403      	stmia	r4!, {r0, r1}
 8000fd6:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i=0;i<25;i++){
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	e00c      	b.n	8000ff8 <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 8000fde:	463a      	mov	r2, r7
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff1e 	bl	8000e28 <OLED_cmd>
		HAL_Delay(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f001 fd11 	bl	8002a14 <HAL_Delay>
	for(int i=0;i<25;i++){
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b18      	cmp	r3, #24
 8000ffc:	ddef      	ble.n	8000fde <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 8000ffe:	20a7      	movs	r0, #167	; 0xa7
 8001000:	f7ff ff12 	bl	8000e28 <OLED_cmd>
	OLED_FLUSH(HVE);
 8001004:	4812      	ldr	r0, [pc, #72]	; (8001050 <OLED_INIT+0xd4>)
 8001006:	f7ff ff85 	bl	8000f14 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 800100a:	20af      	movs	r0, #175	; 0xaf
 800100c:	f7ff ff0c 	bl	8000e28 <OLED_cmd>
	HAL_Delay(1000);
 8001010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001014:	f001 fcfe 	bl	8002a14 <HAL_Delay>
	OLED_cmd(DISP_OFF);
 8001018:	20ae      	movs	r0, #174	; 0xae
 800101a:	f7ff ff05 	bl	8000e28 <OLED_cmd>
	HAL_Delay(10);
 800101e:	200a      	movs	r0, #10
 8001020:	f001 fcf8 	bl	8002a14 <HAL_Delay>
	OLED_cmd(DISP_NORM);
 8001024:	20a6      	movs	r0, #166	; 0xa6
 8001026:	f7ff feff 	bl	8000e28 <OLED_cmd>
	HAL_Delay(10);
 800102a:	200a      	movs	r0, #10
 800102c:	f001 fcf2 	bl	8002a14 <HAL_Delay>
	OLED_cmd(DISP_ON);
 8001030:	20af      	movs	r0, #175	; 0xaf
 8001032:	f7ff fef9 	bl	8000e28 <OLED_cmd>
	OLED_Clear();
 8001036:	f7ff fee3 	bl	8000e00 <OLED_Clear>
	return HAL_OK;
 800103a:	2300      	movs	r3, #0

}
 800103c:	4618      	mov	r0, r3
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bdb0      	pop	{r4, r5, r7, pc}
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400
 800104c:	08012d4c 	.word	0x08012d4c
 8001050:	20000000 	.word	0x20000000

08001054 <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
	uint8_t* temp=malloc(5);
 8001060:	2005      	movs	r0, #5
 8001062:	f011 f9a5 	bl	80123b0 <malloc>
 8001066:	4603      	mov	r3, r0
 8001068:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<6;i++){
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	e013      	b.n	8001098 <OLED_InvChar+0x44>
			temp[i]=~(ASCII[(uint8_t)character-0x20][i]);
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f1a3 0220 	sub.w	r2, r3, #32
 8001076:	4910      	ldr	r1, [pc, #64]	; (80010b8 <OLED_InvChar+0x64>)
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	18ca      	adds	r2, r1, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	781a      	ldrb	r2, [r3, #0]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	440b      	add	r3, r1
 800108c:	43d2      	mvns	r2, r2
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<6;i++){
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3301      	adds	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b05      	cmp	r3, #5
 800109c:	dde8      	ble.n	8001070 <OLED_InvChar+0x1c>
	}
	memcpy(result,temp,5);
 800109e:	2205      	movs	r2, #5
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6838      	ldr	r0, [r7, #0]
 80010a4:	f011 f994 	bl	80123d0 <memcpy>
	free(temp);
 80010a8:	68b8      	ldr	r0, [r7, #8]
 80010aa:	f011 f989 	bl	80123c0 <free>
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	08012f64 	.word	0x08012f64

080010bc <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4604      	mov	r4, r0
 80010c4:	4608      	mov	r0, r1
 80010c6:	4611      	mov	r1, r2
 80010c8:	461a      	mov	r2, r3
 80010ca:	4623      	mov	r3, r4
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	4603      	mov	r3, r0
 80010d0:	71bb      	strb	r3, [r7, #6]
 80010d2:	460b      	mov	r3, r1
 80010d4:	717b      	strb	r3, [r7, #5]
 80010d6:	4613      	mov	r3, r2
 80010d8:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	3b50      	subs	r3, #80	; 0x50
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fea1 	bl	8000e28 <OLED_cmd>
	OLED_cmd(col&0x0F);
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fe9a 	bl	8000e28 <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 80010f4:	79bb      	ldrb	r3, [r7, #6]
 80010f6:	091b      	lsrs	r3, r3, #4
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	f043 0310 	orr.w	r3, r3, #16
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fe91 	bl	8000e28 <OLED_cmd>
	uint8_t* data=malloc(6);
 8001106:	2006      	movs	r0, #6
 8001108:	f011 f952 	bl	80123b0 <malloc>
 800110c:	4603      	mov	r3, r0
 800110e:	60fb      	str	r3, [r7, #12]
	if(invert==NORMAL){
 8001110:	793b      	ldrb	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10d      	bne.n	8001132 <OLED_drawChar+0x76>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 8001116:	797b      	ldrb	r3, [r7, #5]
 8001118:	f1a3 0220 	sub.w	r2, r3, #32
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <OLED_drawChar+0xa0>)
 8001124:	4413      	add	r3, r2
 8001126:	2205      	movs	r2, #5
 8001128:	4619      	mov	r1, r3
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f011 f950 	bl	80123d0 <memcpy>
 8001130:	e004      	b.n	800113c <OLED_drawChar+0x80>
	}
	else{
		OLED_InvChar(character,data);
 8001132:	797b      	ldrb	r3, [r7, #5]
 8001134:	68f9      	ldr	r1, [r7, #12]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff8c 	bl	8001054 <OLED_InvChar>
	}

	*(data+5)=0x00;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3305      	adds	r3, #5
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
	OLED_data(data, 6);
 8001144:	2106      	movs	r1, #6
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f7ff fea8 	bl	8000e9c <OLED_data>
	free(data);
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f011 f937 	bl	80123c0 <free>
	}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	bd90      	pop	{r4, r7, pc}
 800115a:	bf00      	nop
 800115c:	08012f64 	.word	0x08012f64

08001160 <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	603a      	str	r2, [r7, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	460b      	mov	r3, r1
 8001170:	71bb      	strb	r3, [r7, #6]
 8001172:	4613      	mov	r3, r2
 8001174:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	e014      	b.n	80011a6 <OLED_Printlin+0x46>

			OLED_drawChar(page, col+(i*6), string[i],invert);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	0052      	lsls	r2, r2, #1
 8001184:	4413      	add	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	4413      	add	r3, r2
 800118e:	b2d9      	uxtb	r1, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	4413      	add	r3, r2
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	797b      	ldrb	r3, [r7, #5]
 800119a:	79f8      	ldrb	r0, [r7, #7]
 800119c:	f7ff ff8e 	bl	80010bc <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3301      	adds	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	6838      	ldr	r0, [r7, #0]
 80011a8:	f7ff f81a 	bl	80001e0 <strlen>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8e3      	bhi.n	800117c <OLED_Printlin+0x1c>


	}
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	6039      	str	r1, [r7, #0]
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	4613      	mov	r3, r2
 80011cc:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 80011ce:	6838      	ldr	r0, [r7, #0]
 80011d0:	f7ff f806 	bl	80001e0 <strlen>
 80011d4:	4603      	mov	r3, r0
 80011d6:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	0fda      	lsrs	r2, r3, #31
 80011dc:	4413      	add	r3, r2
 80011de:	105b      	asrs	r3, r3, #1
 80011e0:	425b      	negs	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	3340      	adds	r3, #64	; 0x40
 80011ee:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	b2d9      	uxtb	r1, r3
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	79f8      	ldrb	r0, [r7, #7]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	f7ff ffb1 	bl	8001160 <OLED_Printlin>
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 8001206:	b580      	push	{r7, lr}
 8001208:	b094      	sub	sp, #80	; 0x50
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 800120e:	2320      	movs	r3, #32
 8001210:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 8001214:	2300      	movs	r3, #0
 8001216:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 8001218:	2300      	movs	r3, #0
 800121a:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 800121c:	2300      	movs	r3, #0
 800121e:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 8001220:	2300      	movs	r3, #0
 8001222:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 8001224:	2300      	movs	r3, #0
 8001226:	643b      	str	r3, [r7, #64]	; 0x40
 8001228:	e018      	b.n	800125c <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 800122a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800122c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800122e:	4413      	add	r3, r2
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b20      	cmp	r3, #32
 800123a:	d10b      	bne.n	8001254 <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 800123c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800123e:	b2d9      	uxtb	r1, r3
 8001240:	f107 020c 	add.w	r2, r7, #12
 8001244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001246:	4413      	add	r3, r2
 8001248:	460a      	mov	r2, r1
 800124a:	701a      	strb	r2, [r3, #0]
	                i++;
 800124c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800124e:	3301      	adds	r3, #1
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001252:	e000      	b.n	8001256 <OLED_Print+0x50>
	            }
	            else{
	                continue;
 8001254:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 8001256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001258:	3301      	adds	r3, #1
 800125a:	643b      	str	r3, [r7, #64]	; 0x40
 800125c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800125e:	2b15      	cmp	r3, #21
 8001260:	dde3      	ble.n	800122a <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 8001262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b20      	cmp	r3, #32
 800126c:	d102      	bne.n	8001274 <OLED_Print+0x6e>
	            last_ind++;
 800126e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001270:	3301      	adds	r3, #1
 8001272:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 8001274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f7fe ffb0 	bl	80001e0 <strlen>
 8001280:	4603      	mov	r3, r0
 8001282:	2b15      	cmp	r3, #21
 8001284:	d828      	bhi.n	80012d8 <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 8001286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7fe ffa7 	bl	80001e0 <strlen>
 8001292:	4603      	mov	r3, r0
 8001294:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	18d1      	adds	r1, r2, r3
 800129c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	4618      	mov	r0, r3
 80012a4:	f011 f9ba 	bl	801261c <strncpy>
	            memset(thisline+linend,fill,21-linend);
 80012a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012aa:	f107 0220 	add.w	r2, r7, #32
 80012ae:	18d0      	adds	r0, r2, r3
 80012b0:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80012b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012b6:	f1c3 0315 	rsb	r3, r3, #21
 80012ba:	461a      	mov	r2, r3
 80012bc:	f011 f896 	bl	80123ec <memset>
	            thisline[21]=' ';
 80012c0:	2320      	movs	r3, #32
 80012c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 80012c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012c8:	b2d8      	uxtb	r0, r3
 80012ca:	f107 0220 	add.w	r2, r7, #32
 80012ce:	2300      	movs	r3, #0
 80012d0:	2102      	movs	r1, #2
 80012d2:	f7ff ff45 	bl	8001160 <OLED_Printlin>




	    }
}
 80012d6:	e05e      	b.n	8001396 <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 80012d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012da:	3314      	adds	r3, #20
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b20      	cmp	r3, #32
 80012e4:	d03a      	beq.n	800135c <OLED_Print+0x156>
 80012e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012e8:	3315      	adds	r3, #21
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b20      	cmp	r3, #32
 80012f2:	d033      	beq.n	800135c <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 80012f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	18d1      	adds	r1, r2, r3
 80012fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012fc:	3b01      	subs	r3, #1
 80012fe:	3350      	adds	r3, #80	; 0x50
 8001300:	443b      	add	r3, r7
 8001302:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001306:	461a      	mov	r2, r3
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	4618      	mov	r0, r3
 800130e:	f011 f985 	bl	801261c <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 8001312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001314:	3b01      	subs	r3, #1
 8001316:	3350      	adds	r3, #80	; 0x50
 8001318:	443b      	add	r3, r7
 800131a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800131e:	461a      	mov	r2, r3
 8001320:	f107 0320 	add.w	r3, r7, #32
 8001324:	1898      	adds	r0, r3, r2
 8001326:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800132a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800132c:	3b01      	subs	r3, #1
 800132e:	3350      	adds	r3, #80	; 0x50
 8001330:	443b      	add	r3, r7
 8001332:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001336:	f1c3 0315 	rsb	r3, r3, #21
 800133a:	461a      	mov	r2, r3
 800133c:	f011 f856 	bl	80123ec <memset>
	            thisline[21]=' ';
 8001340:	2320      	movs	r3, #32
 8001342:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 8001346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001348:	3b01      	subs	r3, #1
 800134a:	3350      	adds	r3, #80	; 0x50
 800134c:	443b      	add	r3, r7
 800134e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001352:	461a      	mov	r2, r3
 8001354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001356:	4413      	add	r3, r2
 8001358:	64bb      	str	r3, [r7, #72]	; 0x48
 800135a:	e00e      	b.n	800137a <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 800135c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	18d1      	adds	r1, r2, r3
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	2215      	movs	r2, #21
 8001368:	4618      	mov	r0, r3
 800136a:	f011 f957 	bl	801261c <strncpy>
	            thisline[21]=' ';
 800136e:	2320      	movs	r3, #32
 8001370:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 8001374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001376:	3315      	adds	r3, #21
 8001378:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 800137a:	2300      	movs	r3, #0
 800137c:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 800137e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001380:	b2d8      	uxtb	r0, r3
 8001382:	f107 0220 	add.w	r2, r7, #32
 8001386:	2300      	movs	r3, #0
 8001388:	2102      	movs	r1, #2
 800138a:	f7ff fee9 	bl	8001160 <OLED_Printlin>
	        line++;
 800138e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001390:	3301      	adds	r3, #1
 8001392:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001394:	e746      	b.n	8001224 <OLED_Print+0x1e>
}
 8001396:	3750      	adds	r7, #80	; 0x50
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert){
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 80013a8:	f7ff fd2a 	bl	8000e00 <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	78fa      	ldrb	r2, [r7, #3]
 80013b4:	4619      	mov	r1, r3
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff ff01 	bl	80011be <OLED_PrintCent>

	for(int i=0;i<screen->datsize-1;i++){
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	e01a      	b.n	80013f8 <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	3301      	adds	r3, #1
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	7818      	ldrb	r0, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	3301      	adds	r3, #1
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	7859      	ldrb	r1, [r3, #1]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3301      	adds	r3, #1
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	f7ff feb7 	bl	8001160 <OLED_Printlin>
	for(int i=0;i<screen->datsize-1;i++){
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3301      	adds	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	dbde      	blt.n	80013c2 <OLED_SCREEN+0x26>
	}
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	460b      	mov	r3, r1
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7fe fed9 	bl	80001e0 <strlen>
 800142e:	4603      	mov	r3, r0
 8001430:	617b      	str	r3, [r7, #20]
	int start_col=START_COL+((len)*6);
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	3302      	adds	r3, #2
 800143e:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	7afb      	ldrb	r3, [r7, #11]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	7818      	ldrb	r0, [r3, #0]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	b2d9      	uxtb	r1, r3
 8001450:	2300      	movs	r3, #0
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	f7ff fe84 	bl	8001160 <OLED_Printlin>
}
 8001458:	bf00      	nop
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	460b      	mov	r3, r1
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 800146e:	4a40      	ldr	r2, [pc, #256]	; (8001570 <OLED_SELECT+0x110>)
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	4611      	mov	r1, r2
 8001478:	8019      	strh	r1, [r3, #0]
 800147a:	3302      	adds	r3, #2
 800147c:	0c12      	lsrs	r2, r2, #16
 800147e:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol;
	char* rest;

		if(restore==OLED_RESTORE){
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d116      	bne.n	80014b4 <OLED_SELECT+0x54>
			if(selopt==0){
 8001486:	7afb      	ldrb	r3, [r7, #11]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10b      	bne.n	80014a4 <OLED_SELECT+0x44>
			rest=(char*)screen->data[screen->datsize-1]; //Here we may be wrapping around so we must restore the last select option
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001498:	3b01      	subs	r3, #1
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	e009      	b.n	80014b8 <OLED_SELECT+0x58>
			}
			else{
				rest=(char*)screen->data[selopt];
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	7afb      	ldrb	r3, [r7, #11]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	e001      	b.n	80014b8 <OLED_SELECT+0x58>
			}
		}
		else{
			rest="  ";
 80014b4:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <OLED_SELECT+0x114>)
 80014b6:	61bb      	str	r3, [r7, #24]
		}

	    if(selopt==0){
 80014b8:	7afb      	ldrb	r3, [r7, #11]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d124      	bne.n	8001508 <OLED_SELECT+0xa8>
	        prevpage=screen->seldata[screen->selsize-1][0];
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80014ca:	3b01      	subs	r3, #1
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	77fb      	strb	r3, [r7, #31]
	        prevcol=screen->seldata[screen->selsize-1][1];
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80014e0:	3b01      	subs	r3, #1
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	785b      	ldrb	r3, [r3, #1]
 80014e8:	77bb      	strb	r3, [r7, #30]
	        thispage=screen->seldata[selopt][0];
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	7afb      	ldrb	r3, [r7, #11]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	7afb      	ldrb	r3, [r7, #11]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	785b      	ldrb	r3, [r3, #1]
 8001504:	773b      	strb	r3, [r7, #28]
 8001506:	e021      	b.n	800154c <OLED_SELECT+0xec>



	    }
		else{
	        prevpage=screen->seldata[selopt-1][0]; //See OLED.h this will give the page of the previous select option
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	7afb      	ldrb	r3, [r7, #11]
 800150e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001512:	3b01      	subs	r3, #1
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	77fb      	strb	r3, [r7, #31]
		    prevcol=screen->seldata[selopt-1][1];
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	7afb      	ldrb	r3, [r7, #11]
 8001522:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001526:	3b01      	subs	r3, #1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	785b      	ldrb	r3, [r3, #1]
 800152e:	77bb      	strb	r3, [r7, #30]
		    thispage=screen->seldata[selopt][0];
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	7afb      	ldrb	r3, [r7, #11]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	777b      	strb	r3, [r7, #29]
	        thiscol=screen->seldata[selopt][1];
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	7afb      	ldrb	r3, [r7, #11]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	785b      	ldrb	r3, [r3, #1]
 800154a:	773b      	strb	r3, [r7, #28]

	    }

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 800154c:	7fb9      	ldrb	r1, [r7, #30]
 800154e:	7ff8      	ldrb	r0, [r7, #31]
 8001550:	2300      	movs	r3, #0
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	f7ff fe04 	bl	8001160 <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 8001558:	f107 0214 	add.w	r2, r7, #20
 800155c:	7f39      	ldrb	r1, [r7, #28]
 800155e:	7f78      	ldrb	r0, [r7, #29]
 8001560:	2300      	movs	r3, #0
 8001562:	f7ff fdfd 	bl	8001160 <OLED_Printlin>

}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	08012d6c 	.word	0x08012d6c
 8001574:	08012d68 	.word	0x08012d68

08001578 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af02      	add	r7, sp, #8
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT, addr, DUMMY};
 8001582:	230f      	movs	r3, #15
 8001584:	733b      	strb	r3, [r7, #12]
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	737b      	strb	r3, [r7, #13]
 800158a:	2300      	movs	r3, #0
 800158c:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <STAT_READ+0x54>)
 8001596:	f001 fcdf 	bl	8002f58 <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 800159a:	bf00      	nop
 800159c:	f107 0208 	add.w	r2, r7, #8
 80015a0:	f107 010c 	add.w	r1, r7, #12
 80015a4:	2364      	movs	r3, #100	; 0x64
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2303      	movs	r3, #3
 80015aa:	4809      	ldr	r0, [pc, #36]	; (80015d0 <STAT_READ+0x58>)
 80015ac:	f004 fda3 	bl	80060f6 <HAL_SPI_TransmitReceive>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f2      	bne.n	800159c <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80015b6:	2201      	movs	r2, #1
 80015b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <STAT_READ+0x54>)
 80015be:	f001 fccb 	bl	8002f58 <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 80015c2:	7abb      	ldrb	r3, [r7, #10]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40020000 	.word	0x40020000
 80015d0:	20000730 	.word	0x20000730

080015d4 <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	460a      	mov	r2, r1
 80015de:	71fb      	strb	r3, [r7, #7]
 80015e0:	4613      	mov	r3, r2
 80015e2:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 80015e4:	231f      	movs	r3, #31
 80015e6:	733b      	strb	r3, [r7, #12]
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	737b      	strb	r3, [r7, #13]
 80015ec:	79bb      	ldrb	r3, [r7, #6]
 80015ee:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f6:	480a      	ldr	r0, [pc, #40]	; (8001620 <STAT_WRITE+0x4c>)
 80015f8:	f001 fcae 	bl	8002f58 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 80015fc:	f107 010c 	add.w	r1, r7, #12
 8001600:	2364      	movs	r3, #100	; 0x64
 8001602:	2203      	movs	r2, #3
 8001604:	4807      	ldr	r0, [pc, #28]	; (8001624 <STAT_WRITE+0x50>)
 8001606:	f004 fc3a 	bl	8005e7e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800160a:	2201      	movs	r2, #1
 800160c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001610:	4803      	ldr	r0, [pc, #12]	; (8001620 <STAT_WRITE+0x4c>)
 8001612:	f001 fca1 	bl	8002f58 <HAL_GPIO_WritePin>

	return(HAL_OK);
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40020000 	.word	0x40020000
 8001624:	20000730 	.word	0x20000730

08001628 <WRIT_EN>:
 * 		Bad block manage
 *
 * The Write Enable bit in status register 3 will be reset to 0 after any of these instructions
 * */

void WRIT_EN(void){
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
	uint8_t write_en=W_EN;
 800162e:	2306      	movs	r3, #6
 8001630:	71fb      	strb	r3, [r7, #7]
	WRITE_DIS();
 8001632:	f000 f825 	bl	8001680 <WRITE_DIS>

	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 8001636:	e011      	b.n	800165c <WRIT_EN+0x34>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <WRIT_EN+0x50>)
 8001640:	f001 fc8a 	bl	8002f58 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &write_en, 1, 100);
 8001644:	1df9      	adds	r1, r7, #7
 8001646:	2364      	movs	r3, #100	; 0x64
 8001648:	2201      	movs	r2, #1
 800164a:	480c      	ldr	r0, [pc, #48]	; (800167c <WRIT_EN+0x54>)
 800164c:	f004 fc17 	bl	8005e7e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001650:	2201      	movs	r2, #1
 8001652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001656:	4808      	ldr	r0, [pc, #32]	; (8001678 <WRIT_EN+0x50>)
 8001658:	f001 fc7e 	bl	8002f58 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 800165c:	20c0      	movs	r0, #192	; 0xc0
 800165e:	f7ff ff8b 	bl	8001578 <STAT_READ>
 8001662:	4603      	mov	r3, r0
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b02      	cmp	r3, #2
 800166a:	d1e5      	bne.n	8001638 <WRIT_EN+0x10>
	}


}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40020000 	.word	0x40020000
 800167c:	20000730 	.word	0x20000730

08001680 <WRITE_DIS>:

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 8001686:	2304      	movs	r3, #4
 8001688:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 800168a:	e011      	b.n	80016b0 <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001692:	480e      	ldr	r0, [pc, #56]	; (80016cc <WRITE_DIS+0x4c>)
 8001694:	f001 fc60 	bl	8002f58 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 8001698:	1df9      	adds	r1, r7, #7
 800169a:	2364      	movs	r3, #100	; 0x64
 800169c:	2201      	movs	r2, #1
 800169e:	480c      	ldr	r0, [pc, #48]	; (80016d0 <WRITE_DIS+0x50>)
 80016a0:	f004 fbed 	bl	8005e7e <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80016a4:	2201      	movs	r2, #1
 80016a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016aa:	4808      	ldr	r0, [pc, #32]	; (80016cc <WRITE_DIS+0x4c>)
 80016ac:	f001 fc54 	bl	8002f58 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 80016b0:	20c0      	movs	r0, #192	; 0xc0
 80016b2:	f7ff ff61 	bl	8001578 <STAT_READ>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d0e5      	beq.n	800168c <WRITE_DIS+0xc>
		}
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40020000 	.word	0x40020000
 80016d0:	20000730 	.word	0x20000730

080016d4 <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80016d8:	2201      	movs	r2, #1
 80016da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016de:	480a      	ldr	r0, [pc, #40]	; (8001708 <MEM_INIT+0x34>)
 80016e0:	f001 fc3a 	bl	8002f58 <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 80016e4:	2100      	movs	r1, #0
 80016e6:	20a0      	movs	r0, #160	; 0xa0
 80016e8:	f7ff ff74 	bl	80015d4 <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 80016ec:	20a0      	movs	r0, #160	; 0xa0
 80016ee:	f7ff ff43 	bl	8001578 <STAT_READ>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MEM_INIT+0x28>
		return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e002      	b.n	8001702 <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 80016fc:	f7ff ffc0 	bl	8001680 <WRITE_DIS>
	return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40020000 	.word	0x40020000

0800170c <MEM_WRITE>:
 * @param data: data to write
 *
 * @param bytes: Number of bytes to write to page
 * */

HAL_StatusTypeDef MEM_WRITE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint16_t bytes){
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60ba      	str	r2, [r7, #8]
 8001714:	461a      	mov	r2, r3
 8001716:	4603      	mov	r3, r0
 8001718:	81fb      	strh	r3, [r7, #14]
 800171a:	460b      	mov	r3, r1
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	4613      	mov	r3, r2
 8001720:	80fb      	strh	r3, [r7, #6]
	uint8_t* setup = malloc((bytes+3)*sizeof(uint8_t)); //Extra 3 bytes for write opcode and column address
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	3303      	adds	r3, #3
 8001726:	4618      	mov	r0, r3
 8001728:	f010 fe42 	bl	80123b0 <malloc>
 800172c:	4603      	mov	r3, r0
 800172e:	617b      	str	r3, [r7, #20]
	uint8_t execute[]={WRIT_EXE, DUMMY, page_addr>>8, page_addr};
 8001730:	2310      	movs	r3, #16
 8001732:	743b      	strb	r3, [r7, #16]
 8001734:	2300      	movs	r3, #0
 8001736:	747b      	strb	r3, [r7, #17]
 8001738:	89fb      	ldrh	r3, [r7, #14]
 800173a:	0a1b      	lsrs	r3, r3, #8
 800173c:	b29b      	uxth	r3, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	74bb      	strb	r3, [r7, #18]
 8001742:	89fb      	ldrh	r3, [r7, #14]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	74fb      	strb	r3, [r7, #19]

	setup[0] = WRIT_LOAD;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2202      	movs	r2, #2
 800174c:	701a      	strb	r2, [r3, #0]
	setup[1] = col_addr>>8;
 800174e:	89bb      	ldrh	r3, [r7, #12]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	b29a      	uxth	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	701a      	strb	r2, [r3, #0]
	setup[2] = col_addr;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3302      	adds	r3, #2
 8001760:	89ba      	ldrh	r2, [r7, #12]
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]
	memcpy(&setup[3], data, bytes);
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3303      	adds	r3, #3
 800176a:	88fa      	ldrh	r2, [r7, #6]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	4618      	mov	r0, r3
 8001770:	f010 fe2e 	bl	80123d0 <memcpy>

	WRIT_EN();
 8001774:	f7ff ff58 	bl	8001628 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800177e:	482a      	ldr	r0, [pc, #168]	; (8001828 <MEM_WRITE+0x11c>)
 8001780:	f001 fbea 	bl	8002f58 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, setup, bytes+3, 100)!=HAL_OK){ //load data to internal buffer
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	3303      	adds	r3, #3
 8001788:	b29a      	uxth	r2, r3
 800178a:	2364      	movs	r3, #100	; 0x64
 800178c:	6979      	ldr	r1, [r7, #20]
 800178e:	4827      	ldr	r0, [pc, #156]	; (800182c <MEM_WRITE+0x120>)
 8001790:	f004 fb75 	bl	8005e7e <HAL_SPI_Transmit>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d007      	beq.n	80017aa <MEM_WRITE+0x9e>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800179a:	2201      	movs	r2, #1
 800179c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a0:	4821      	ldr	r0, [pc, #132]	; (8001828 <MEM_WRITE+0x11c>)
 80017a2:	f001 fbd9 	bl	8002f58 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 80017a6:	2301      	movs	r3, #1
 80017a8:	e039      	b.n	800181e <MEM_WRITE+0x112>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80017aa:	2201      	movs	r2, #1
 80017ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b0:	481d      	ldr	r0, [pc, #116]	; (8001828 <MEM_WRITE+0x11c>)
 80017b2:	f001 fbd1 	bl	8002f58 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until busy bit is cleared
 80017b6:	bf00      	nop
 80017b8:	20c0      	movs	r0, #192	; 0xc0
 80017ba:	f7ff fedd 	bl	8001578 <STAT_READ>
 80017be:	4603      	mov	r3, r0
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d0f7      	beq.n	80017b8 <MEM_WRITE+0xac>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ce:	4816      	ldr	r0, [pc, #88]	; (8001828 <MEM_WRITE+0x11c>)
 80017d0:	f001 fbc2 	bl	8002f58 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, execute, 4, 100)!=HAL_OK){ //Send command to dump internal buffer data to memory array
 80017d4:	f107 0110 	add.w	r1, r7, #16
 80017d8:	2364      	movs	r3, #100	; 0x64
 80017da:	2204      	movs	r2, #4
 80017dc:	4813      	ldr	r0, [pc, #76]	; (800182c <MEM_WRITE+0x120>)
 80017de:	f004 fb4e 	bl	8005e7e <HAL_SPI_Transmit>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d007      	beq.n	80017f8 <MEM_WRITE+0xec>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80017e8:	2201      	movs	r2, #1
 80017ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ee:	480e      	ldr	r0, [pc, #56]	; (8001828 <MEM_WRITE+0x11c>)
 80017f0:	f001 fbb2 	bl	8002f58 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 80017f4:	2301      	movs	r3, #1
 80017f6:	e012      	b.n	800181e <MEM_WRITE+0x112>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80017f8:	2201      	movs	r2, #1
 80017fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fe:	480a      	ldr	r0, [pc, #40]	; (8001828 <MEM_WRITE+0x11c>)
 8001800:	f001 fbaa 	bl	8002f58 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001804:	bf00      	nop
 8001806:	20c0      	movs	r0, #192	; 0xc0
 8001808:	f7ff feb6 	bl	8001578 <STAT_READ>
 800180c:	4603      	mov	r3, r0
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b01      	cmp	r3, #1
 8001814:	d0f7      	beq.n	8001806 <MEM_WRITE+0xfa>
	free(setup);
 8001816:	6978      	ldr	r0, [r7, #20]
 8001818:	f010 fdd2 	bl	80123c0 <free>
	return(HAL_OK);
 800181c:	2300      	movs	r3, #0

}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40020000 	.word	0x40020000
 800182c:	20000730 	.word	0x20000730

08001830 <MEM_READPAGE>:
 * @param bytes: Number of bytes to read from data buffer
 *
 * !!Note data must first be shifted from memory array into internal data buffer and then can be read!!
 * */

HAL_StatusTypeDef MEM_READPAGE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint16_t bytes){ //Read one 2KiB page. Data will be put into internal buffer which can then be read. Wait at least tDR or until busy bit is clear
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	; 0x30
 8001834:	af02      	add	r7, sp, #8
 8001836:	60ba      	str	r2, [r7, #8]
 8001838:	461a      	mov	r2, r3
 800183a:	4603      	mov	r3, r0
 800183c:	81fb      	strh	r3, [r7, #14]
 800183e:	460b      	mov	r3, r1
 8001840:	81bb      	strh	r3, [r7, #12]
 8001842:	4613      	mov	r3, r2
 8001844:	80fb      	strh	r3, [r7, #6]
	uint8_t transaction[]={READ_PAGE, DUMMY, page_addr>>8, page_addr};
 8001846:	2313      	movs	r3, #19
 8001848:	753b      	strb	r3, [r7, #20]
 800184a:	2300      	movs	r3, #0
 800184c:	757b      	strb	r3, [r7, #21]
 800184e:	89fb      	ldrh	r3, [r7, #14]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	b29b      	uxth	r3, r3
 8001854:	b2db      	uxtb	r3, r3
 8001856:	75bb      	strb	r3, [r7, #22]
 8001858:	89fb      	ldrh	r3, [r7, #14]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	75fb      	strb	r3, [r7, #23]
	uint8_t transaction_size = sizeof(transaction)/sizeof(transaction[0]);
 800185e:	2304      	movs	r3, #4
 8001860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t* read_command = malloc(bytes+transaction_size); //Must allocate here since array may be too big for FreeRTOS task stack
 8001864:	88fa      	ldrh	r2, [r7, #6]
 8001866:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800186a:	4413      	add	r3, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f010 fd9f 	bl	80123b0 <malloc>
 8001872:	4603      	mov	r3, r0
 8001874:	61fb      	str	r3, [r7, #28]
	uint8_t* rec_data = malloc(bytes+transaction_size);
 8001876:	88fa      	ldrh	r2, [r7, #6]
 8001878:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800187c:	4413      	add	r3, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f010 fd96 	bl	80123b0 <malloc>
 8001884:	4603      	mov	r3, r0
 8001886:	61bb      	str	r3, [r7, #24]

	memset(read_command, 0, bytes+transaction_size);
 8001888:	88fa      	ldrh	r2, [r7, #6]
 800188a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800188e:	4413      	add	r3, r2
 8001890:	461a      	mov	r2, r3
 8001892:	2100      	movs	r1, #0
 8001894:	69f8      	ldr	r0, [r7, #28]
 8001896:	f010 fda9 	bl	80123ec <memset>
	read_command[0]=READ_BUF;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	2203      	movs	r2, #3
 800189e:	701a      	strb	r2, [r3, #0]
	read_command[1]= col_addr>>8;
 80018a0:	89bb      	ldrh	r3, [r7, #12]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3301      	adds	r3, #1
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]
	read_command[2] = col_addr;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3302      	adds	r3, #2
 80018b2:	89ba      	ldrh	r2, [r7, #12]
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	701a      	strb	r2, [r3, #0]
	read_command[3] = DUMMY;
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	3303      	adds	r3, #3
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c6:	483b      	ldr	r0, [pc, #236]	; (80019b4 <MEM_READPAGE+0x184>)
 80018c8:	f001 fb46 	bl	8002f58 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, transaction, 4, 100)!=HAL_OK){ //load data to internal buffer
 80018cc:	f107 0114 	add.w	r1, r7, #20
 80018d0:	2364      	movs	r3, #100	; 0x64
 80018d2:	2204      	movs	r2, #4
 80018d4:	4838      	ldr	r0, [pc, #224]	; (80019b8 <MEM_READPAGE+0x188>)
 80018d6:	f004 fad2 	bl	8005e7e <HAL_SPI_Transmit>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d007      	beq.n	80018f0 <MEM_READPAGE+0xc0>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80018e0:	2201      	movs	r2, #1
 80018e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e6:	4833      	ldr	r0, [pc, #204]	; (80019b4 <MEM_READPAGE+0x184>)
 80018e8:	f001 fb36 	bl	8002f58 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 80018ec:	2301      	movs	r3, #1
 80018ee:	e05d      	b.n	80019ac <MEM_READPAGE+0x17c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f6:	482f      	ldr	r0, [pc, #188]	; (80019b4 <MEM_READPAGE+0x184>)
 80018f8:	f001 fb2e 	bl	8002f58 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until BUSY bit is cleared
 80018fc:	bf00      	nop
 80018fe:	20c0      	movs	r0, #192	; 0xc0
 8001900:	f7ff fe3a 	bl	8001578 <STAT_READ>
 8001904:	4603      	mov	r3, r0
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b01      	cmp	r3, #1
 800190c:	d0f7      	beq.n	80018fe <MEM_READPAGE+0xce>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001914:	4827      	ldr	r0, [pc, #156]	; (80019b4 <MEM_READPAGE+0x184>)
 8001916:	f001 fb1f 	bl	8002f58 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, read_command, rec_data, bytes+transaction_size, 100)!=HAL_OK){
 800191a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800191e:	b29a      	uxth	r2, r3
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	4413      	add	r3, r2
 8001924:	b29b      	uxth	r3, r3
 8001926:	2264      	movs	r2, #100	; 0x64
 8001928:	9200      	str	r2, [sp, #0]
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	69f9      	ldr	r1, [r7, #28]
 800192e:	4822      	ldr	r0, [pc, #136]	; (80019b8 <MEM_READPAGE+0x188>)
 8001930:	f004 fbe1 	bl	80060f6 <HAL_SPI_TransmitReceive>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <MEM_READPAGE+0x11a>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800193a:	2201      	movs	r2, #1
 800193c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001940:	481c      	ldr	r0, [pc, #112]	; (80019b4 <MEM_READPAGE+0x184>)
 8001942:	f001 fb09 	bl	8002f58 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 8001946:	2301      	movs	r3, #1
 8001948:	e030      	b.n	80019ac <MEM_READPAGE+0x17c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800194a:	2201      	movs	r2, #1
 800194c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001950:	4818      	ldr	r0, [pc, #96]	; (80019b4 <MEM_READPAGE+0x184>)
 8001952:	f001 fb01 	bl	8002f58 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8001956:	bf00      	nop
 8001958:	20c0      	movs	r0, #192	; 0xc0
 800195a:	f7ff fe0d 	bl	8001578 <STAT_READ>
 800195e:	4603      	mov	r3, r0
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b01      	cmp	r3, #1
 8001966:	d0f7      	beq.n	8001958 <MEM_READPAGE+0x128>

	if (bytes == 1) {
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d104      	bne.n	8001978 <MEM_READPAGE+0x148>
		*data = rec_data[4];
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	791a      	ldrb	r2, [r3, #4]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	701a      	strb	r2, [r3, #0]
 8001976:	e012      	b.n	800199e <MEM_READPAGE+0x16e>
	} else {
		for(int i = 0; i < bytes; i++){
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
 800197c:	e00b      	b.n	8001996 <MEM_READPAGE+0x166>
				data[i] = rec_data[i+4]; //+4 as first four elements of rec_data are meaningless
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	3304      	adds	r3, #4
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	441a      	add	r2, r3
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	440b      	add	r3, r1
 800198c:	7812      	ldrb	r2, [r2, #0]
 800198e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < bytes; i++){
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	3301      	adds	r3, #1
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199a:	429a      	cmp	r2, r3
 800199c:	dbef      	blt.n	800197e <MEM_READPAGE+0x14e>
		}
	}
	free(read_command);
 800199e:	69f8      	ldr	r0, [r7, #28]
 80019a0:	f010 fd0e 	bl	80123c0 <free>
	free(rec_data);
 80019a4:	69b8      	ldr	r0, [r7, #24]
 80019a6:	f010 fd0b 	bl	80123c0 <free>
	return(HAL_OK);
 80019aa:	2300      	movs	r3, #0

}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3728      	adds	r7, #40	; 0x28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40020000 	.word	0x40020000
 80019b8:	20000730 	.word	0x20000730

080019bc <mem_init>:
 * 									FATFS Section
 *
 * Following functions are added in order to make this driver compatible with the FATFS package
 * */

DSTATUS mem_init (BYTE pdrv) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
	if (MEM_INIT() != HAL_OK) {
 80019c6:	f7ff fe85 	bl	80016d4 <MEM_INIT>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <mem_init+0x18>
		return STA_NOINIT;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e005      	b.n	80019e0 <mem_init+0x24>
	}
	MEM_STATUS = MEM_OK;
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <mem_init+0x2c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
	return (MEM_STATUS); //Inidicates successful init
 80019da:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <mem_init+0x2c>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b2db      	uxtb	r3, r3
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000400 	.word	0x20000400

080019ec <mem_getstatus>:

DSTATUS mem_getstatus (BYTE prdv) {
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
	return MEM_STATUS;
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <mem_getstatus+0x1c>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	b2db      	uxtb	r3, r3
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	20000400 	.word	0x20000400

08001a0c <mem_read>:

DRESULT mem_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	4603      	mov	r3, r0
 8001a1a:	73fb      	strb	r3, [r7, #15]
	 if (!count) { //0 count, invalid parameter
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <mem_read+0x1a>
		 return RES_PARERR;
 8001a22:	2304      	movs	r3, #4
 8001a24:	e026      	b.n	8001a74 <mem_read+0x68>
	 }

	 if (MEM_STATUS) { //Memory not initialised
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <mem_read+0x70>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <mem_read+0x28>
		 return RES_NOTRDY;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e01f      	b.n	8001a74 <mem_read+0x68>
	 }

	 for (int i = 0; i < count; i++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e017      	b.n	8001a6a <mem_read+0x5e>
		 if (MEM_READPAGE(sector+i, 0x0000, (uint8_t*) buff, SECTOR_SIZE) != HAL_OK) {
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	4413      	add	r3, r2
 8001a44:	b298      	uxth	r0, r3
 8001a46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	f7ff feef 	bl	8001830 <MEM_READPAGE>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <mem_read+0x50>
			 return RES_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e00b      	b.n	8001a74 <mem_read+0x68>
		 }
		 buff += SECTOR_SIZE; //increment pointer
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a62:	60bb      	str	r3, [r7, #8]
	 for (int i = 0; i < count; i++) {
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3301      	adds	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d8e3      	bhi.n	8001a3a <mem_read+0x2e>
	 }

	 return RES_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000400 	.word	0x20000400

08001a80 <mem_write>:

DRESULT mem_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	73fb      	strb	r3, [r7, #15]
	if (!count) {
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <mem_write+0x1a>
		return RES_PARERR;
 8001a96:	2304      	movs	r3, #4
 8001a98:	e026      	b.n	8001ae8 <mem_write+0x68>
	}

	if (MEM_STATUS) {
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <mem_write+0x70>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <mem_write+0x28>
		return RES_NOTRDY;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e01f      	b.n	8001ae8 <mem_write+0x68>
	}

	for (int i = 0; i < count; i++) {
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	e017      	b.n	8001ade <mem_write+0x5e>
		if (MEM_WRITE(sector+i, 0x0000, (uint8_t*) buff, SECTOR_SIZE) != HAL_OK) {
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b298      	uxth	r0, r3
 8001aba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	f7ff fe23 	bl	800170c <MEM_WRITE>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <mem_write+0x50>
			return RES_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e00b      	b.n	8001ae8 <mem_write+0x68>
		}
		buff += SECTOR_SIZE; //increment pointer
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad6:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < count; i++) {
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3301      	adds	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d8e3      	bhi.n	8001aae <mem_write+0x2e>
	}

	return RES_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000400 	.word	0x20000400

08001af4 <BUZZ>:
	CDC_Transmit_FS(rec, 3);
	HAL_Delay(1);
	CDC_Transmit_FS(&lev, 1);
}

void BUZZ(void){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001af8:	2108      	movs	r1, #8
 8001afa:	4806      	ldr	r0, [pc, #24]	; (8001b14 <BUZZ+0x20>)
 8001afc:	f004 fef6 	bl	80068ec <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 8001b00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b04:	f000 ff86 	bl	8002a14 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001b08:	2108      	movs	r1, #8
 8001b0a:	4802      	ldr	r0, [pc, #8]	; (8001b14 <BUZZ+0x20>)
 8001b0c:	f004 ff9e 	bl	8006a4c <HAL_TIM_PWM_Stop>
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000788 	.word	0x20000788

08001b18 <choose>:

int choose (const Screen* screen,int* flag, uint32_t* count, int max, int restopt) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001b26:	2102      	movs	r1, #2
 8001b28:	4820      	ldr	r0, [pc, #128]	; (8001bac <choose+0x94>)
 8001b2a:	f001 f9fd 	bl	8002f28 <HAL_GPIO_ReadPin>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d136      	bne.n	8001ba2 <choose+0x8a>
	 	    __HAL_TIM_SET_COUNTER(&htim3,0);
 8001b34:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <choose+0x98>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001b3c:	e012      	b.n	8001b64 <choose+0x4c>
	 	    	HAL_TIM_Base_Start(&htim3);
 8001b3e:	481c      	ldr	r0, [pc, #112]	; (8001bb0 <choose+0x98>)
 8001b40:	f004 fd96 	bl	8006670 <HAL_TIM_Base_Start>
	 	    	if(__HAL_TIM_GET_COUNTER(&htim3)==999){
 8001b44:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <choose+0x98>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d108      	bne.n	8001b64 <choose+0x4c>
	 	    		HAL_TIM_Base_Stop(&htim3);
 8001b52:	4817      	ldr	r0, [pc, #92]	; (8001bb0 <choose+0x98>)
 8001b54:	f004 fde6 	bl	8006724 <HAL_TIM_Base_Stop>
	 	    		*flag = 1;
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
	 	    		return(*count);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	e01e      	b.n	8001ba2 <choose+0x8a>
	 	    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0){
 8001b64:	2102      	movs	r1, #2
 8001b66:	4811      	ldr	r0, [pc, #68]	; (8001bac <choose+0x94>)
 8001b68:	f001 f9de 	bl	8002f28 <HAL_GPIO_ReadPin>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0e5      	beq.n	8001b3e <choose+0x26>
	 	    		}
	 	    	}
	 	    (*count)++;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	601a      	str	r2, [r3, #0]
	 	    if (*count == max) {
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d102      	bne.n	8001b8c <choose+0x74>
	 	    	*count = 0;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
	 	    }
	 	    OLED_SELECT(screen, *count, restopt);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4619      	mov	r1, r3
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f7ff fc62 	bl	8001460 <OLED_SELECT>
	 	    HAL_TIM_Base_Stop(&htim3);
 8001b9c:	4804      	ldr	r0, [pc, #16]	; (8001bb0 <choose+0x98>)
 8001b9e:	f004 fdc1 	bl	8006724 <HAL_TIM_Base_Stop>
	 	}
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	200007d0 	.word	0x200007d0

08001bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bb8:	f000 feea 	bl	8002990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bbc:	f000 f866 	bl	8001c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bc0:	f000 fa2e 	bl	8002020 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001bc4:	f000 f8cc 	bl	8001d60 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001bc8:	f000 f8f8 	bl	8001dbc <MX_SPI1_Init>
  MX_SPI2_Init();
 8001bcc:	f000 f92e 	bl	8001e2c <MX_SPI2_Init>
  MX_TIM2_Init();
 8001bd0:	f000 f962 	bl	8001e98 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bd4:	f000 f9d6 	bl	8001f84 <MX_TIM3_Init>
  MX_FATFS_Init();
 8001bd8:	f007 f9f2 	bl	8008fc0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001bdc:	f00c fa7c 	bl	800e0d8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(uint8_t*), &UidtoFound_attributes);
 8001be0:	4a19      	ldr	r2, [pc, #100]	; (8001c48 <main+0x94>)
 8001be2:	2104      	movs	r1, #4
 8001be4:	2001      	movs	r0, #1
 8001be6:	f00c fcb3 	bl	800e550 <osMessageQueueNew>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <main+0x98>)
 8001bee:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 8001bf0:	4a17      	ldr	r2, [pc, #92]	; (8001c50 <main+0x9c>)
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4817      	ldr	r0, [pc, #92]	; (8001c54 <main+0xa0>)
 8001bf6:	f00c fab9 	bl	800e16c <osThreadNew>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a16      	ldr	r2, [pc, #88]	; (8001c58 <main+0xa4>)
 8001bfe:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 8001c00:	4a16      	ldr	r2, [pc, #88]	; (8001c5c <main+0xa8>)
 8001c02:	2100      	movs	r1, #0
 8001c04:	4816      	ldr	r0, [pc, #88]	; (8001c60 <main+0xac>)
 8001c06:	f00c fab1 	bl	800e16c <osThreadNew>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4a15      	ldr	r2, [pc, #84]	; (8001c64 <main+0xb0>)
 8001c0e:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 8001c10:	4a15      	ldr	r2, [pc, #84]	; (8001c68 <main+0xb4>)
 8001c12:	2100      	movs	r1, #0
 8001c14:	4815      	ldr	r0, [pc, #84]	; (8001c6c <main+0xb8>)
 8001c16:	f00c faa9 	bl	800e16c <osThreadNew>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4a14      	ldr	r2, [pc, #80]	; (8001c70 <main+0xbc>)
 8001c1e:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <main+0xc0>)
 8001c22:	2100      	movs	r1, #0
 8001c24:	4814      	ldr	r0, [pc, #80]	; (8001c78 <main+0xc4>)
 8001c26:	f00c faa1 	bl	800e16c <osThreadNew>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <main+0xc8>)
 8001c2e:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 8001c30:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <main+0xcc>)
 8001c32:	2100      	movs	r1, #0
 8001c34:	4813      	ldr	r0, [pc, #76]	; (8001c84 <main+0xd0>)
 8001c36:	f00c fa99 	bl	800e16c <osThreadNew>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <main+0xd4>)
 8001c3e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001c40:	f00c fa6e 	bl	800e120 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <main+0x90>
 8001c46:	bf00      	nop
 8001c48:	080131f8 	.word	0x080131f8
 8001c4c:	2000082c 	.word	0x2000082c
 8001c50:	08013144 	.word	0x08013144
 8001c54:	08002109 	.word	0x08002109
 8001c58:	20000818 	.word	0x20000818
 8001c5c:	08013168 	.word	0x08013168
 8001c60:	08002241 	.word	0x08002241
 8001c64:	2000081c 	.word	0x2000081c
 8001c68:	0801318c 	.word	0x0801318c
 8001c6c:	080022f5 	.word	0x080022f5
 8001c70:	20000820 	.word	0x20000820
 8001c74:	080131b0 	.word	0x080131b0
 8001c78:	08002321 	.word	0x08002321
 8001c7c:	20000824 	.word	0x20000824
 8001c80:	080131d4 	.word	0x080131d4
 8001c84:	080023ad 	.word	0x080023ad
 8001c88:	20000828 	.word	0x20000828

08001c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b094      	sub	sp, #80	; 0x50
 8001c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c92:	f107 0320 	add.w	r3, r7, #32
 8001c96:	2230      	movs	r2, #48	; 0x30
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f010 fba6 	bl	80123ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <SystemClock_Config+0xcc>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	4a27      	ldr	r2, [pc, #156]	; (8001d58 <SystemClock_Config+0xcc>)
 8001cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <SystemClock_Config+0xcc>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ccc:	2300      	movs	r3, #0
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <SystemClock_Config+0xd0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cd8:	4a20      	ldr	r2, [pc, #128]	; (8001d5c <SystemClock_Config+0xd0>)
 8001cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <SystemClock_Config+0xd0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cec:	2301      	movs	r3, #1
 8001cee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d00:	2308      	movs	r3, #8
 8001d02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d04:	23a8      	movs	r3, #168	; 0xa8
 8001d06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d08:	2304      	movs	r3, #4
 8001d0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d0c:	2307      	movs	r3, #7
 8001d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d10:	f107 0320 	add.w	r3, r7, #32
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 fb75 	bl	8005404 <HAL_RCC_OscConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d20:	f000 fbb8 	bl	8002494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d24:	230f      	movs	r3, #15
 8001d26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	2102      	movs	r1, #2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f003 fdd7 	bl	80058f4 <HAL_RCC_ClockConfig>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d4c:	f000 fba2 	bl	8002494 <Error_Handler>
  }
}
 8001d50:	bf00      	nop
 8001d52:	3750      	adds	r7, #80	; 0x50
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40007000 	.word	0x40007000

08001d60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d66:	4a13      	ldr	r2, [pc, #76]	; (8001db4 <MX_I2C1_Init+0x54>)
 8001d68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d6c:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <MX_I2C1_Init+0x58>)
 8001d6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d9c:	4804      	ldr	r0, [pc, #16]	; (8001db0 <MX_I2C1_Init+0x50>)
 8001d9e:	f001 f8f5 	bl	8002f8c <HAL_I2C_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001da8:	f000 fb74 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000684 	.word	0x20000684
 8001db4:	40005400 	.word	0x40005400
 8001db8:	000186a0 	.word	0x000186a0

08001dbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001dc0:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <MX_SPI1_Init+0x68>)
 8001dc2:	4a19      	ldr	r2, [pc, #100]	; (8001e28 <MX_SPI1_Init+0x6c>)
 8001dc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <MX_SPI1_Init+0x68>)
 8001dc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <MX_SPI1_Init+0x68>)
 8001dd0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dd4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dd6:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <MX_SPI1_Init+0x68>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_SPI1_Init+0x68>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <MX_SPI1_Init+0x68>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001de8:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_SPI1_Init+0x68>)
 8001dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_SPI1_Init+0x68>)
 8001df2:	2218      	movs	r2, #24
 8001df4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <MX_SPI1_Init+0x68>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_SPI1_Init+0x68>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <MX_SPI1_Init+0x68>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_SPI1_Init+0x68>)
 8001e0a:	220a      	movs	r2, #10
 8001e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <MX_SPI1_Init+0x68>)
 8001e10:	f003 ffac 	bl	8005d6c <HAL_SPI_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001e1a:	f000 fb3b 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200006d8 	.word	0x200006d8
 8001e28:	40013000 	.word	0x40013000

08001e2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e32:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <MX_SPI2_Init+0x68>)
 8001e34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e3e:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e70:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e78:	220a      	movs	r2, #10
 8001e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e7c:	4804      	ldr	r0, [pc, #16]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e7e:	f003 ff75 	bl	8005d6c <HAL_SPI_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e88:	f000 fb04 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000730 	.word	0x20000730
 8001e94:	40003800 	.word	0x40003800

08001e98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08e      	sub	sp, #56	; 0x38
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eac:	f107 0320 	add.w	r3, r7, #32
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
 8001ec4:	615a      	str	r2, [r3, #20]
 8001ec6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <MX_TIM2_Init+0xe8>)
 8001eca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ece:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8001ed0:	4b2b      	ldr	r3, [pc, #172]	; (8001f80 <MX_TIM2_Init+0xe8>)
 8001ed2:	f240 12a3 	movw	r2, #419	; 0x1a3
 8001ed6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed8:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <MX_TIM2_Init+0xe8>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8001ede:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <MX_TIM2_Init+0xe8>)
 8001ee0:	2231      	movs	r2, #49	; 0x31
 8001ee2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee4:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <MX_TIM2_Init+0xe8>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eea:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <MX_TIM2_Init+0xe8>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ef0:	4823      	ldr	r0, [pc, #140]	; (8001f80 <MX_TIM2_Init+0xe8>)
 8001ef2:	f004 fb6d 	bl	80065d0 <HAL_TIM_Base_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001efc:	f000 faca 	bl	8002494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	481c      	ldr	r0, [pc, #112]	; (8001f80 <MX_TIM2_Init+0xe8>)
 8001f0e:	f004 ffcb 	bl	8006ea8 <HAL_TIM_ConfigClockSource>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f18:	f000 fabc 	bl	8002494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f1c:	4818      	ldr	r0, [pc, #96]	; (8001f80 <MX_TIM2_Init+0xe8>)
 8001f1e:	f004 fc8b 	bl	8006838 <HAL_TIM_PWM_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f28:	f000 fab4 	bl	8002494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f34:	f107 0320 	add.w	r3, r7, #32
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4811      	ldr	r0, [pc, #68]	; (8001f80 <MX_TIM2_Init+0xe8>)
 8001f3c:	f005 fb70 	bl	8007620 <HAL_TIMEx_MasterConfigSynchronization>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f46:	f000 faa5 	bl	8002494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f4a:	2360      	movs	r3, #96	; 0x60
 8001f4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8001f4e:	2318      	movs	r3, #24
 8001f50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4807      	ldr	r0, [pc, #28]	; (8001f80 <MX_TIM2_Init+0xe8>)
 8001f62:	f004 fedf 	bl	8006d24 <HAL_TIM_PWM_ConfigChannel>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001f6c:	f000 fa92 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f70:	4803      	ldr	r0, [pc, #12]	; (8001f80 <MX_TIM2_Init+0xe8>)
 8001f72:	f000 fbbd 	bl	80026f0 <HAL_TIM_MspPostInit>

}
 8001f76:	bf00      	nop
 8001f78:	3738      	adds	r7, #56	; 0x38
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000788 	.word	0x20000788

08001f84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8a:	f107 0308 	add.w	r3, r7, #8
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f98:	463b      	mov	r3, r7
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <MX_TIM3_Init+0x94>)
 8001fa2:	4a1e      	ldr	r2, [pc, #120]	; (800201c <MX_TIM3_Init+0x98>)
 8001fa4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <MX_TIM3_Init+0x94>)
 8001fa8:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001fac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fae:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <MX_TIM3_Init+0x94>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001fb4:	4b18      	ldr	r3, [pc, #96]	; (8002018 <MX_TIM3_Init+0x94>)
 8001fb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbc:	4b16      	ldr	r3, [pc, #88]	; (8002018 <MX_TIM3_Init+0x94>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <MX_TIM3_Init+0x94>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fc8:	4813      	ldr	r0, [pc, #76]	; (8002018 <MX_TIM3_Init+0x94>)
 8001fca:	f004 fb01 	bl	80065d0 <HAL_TIM_Base_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001fd4:	f000 fa5e 	bl	8002494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480c      	ldr	r0, [pc, #48]	; (8002018 <MX_TIM3_Init+0x94>)
 8001fe6:	f004 ff5f 	bl	8006ea8 <HAL_TIM_ConfigClockSource>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001ff0:	f000 fa50 	bl	8002494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	4619      	mov	r1, r3
 8002000:	4805      	ldr	r0, [pc, #20]	; (8002018 <MX_TIM3_Init+0x94>)
 8002002:	f005 fb0d 	bl	8007620 <HAL_TIMEx_MasterConfigSynchronization>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800200c:	f000 fa42 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002010:	bf00      	nop
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	200007d0 	.word	0x200007d0
 800201c:	40000400 	.word	0x40000400

08002020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002026:	f107 030c 	add.w	r3, r7, #12
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
 8002034:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	4b30      	ldr	r3, [pc, #192]	; (80020fc <MX_GPIO_Init+0xdc>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a2f      	ldr	r2, [pc, #188]	; (80020fc <MX_GPIO_Init+0xdc>)
 8002040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b2d      	ldr	r3, [pc, #180]	; (80020fc <MX_GPIO_Init+0xdc>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	4b29      	ldr	r3, [pc, #164]	; (80020fc <MX_GPIO_Init+0xdc>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a28      	ldr	r2, [pc, #160]	; (80020fc <MX_GPIO_Init+0xdc>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b26      	ldr	r3, [pc, #152]	; (80020fc <MX_GPIO_Init+0xdc>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	607b      	str	r3, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	603b      	str	r3, [r7, #0]
 8002072:	4b22      	ldr	r3, [pc, #136]	; (80020fc <MX_GPIO_Init+0xdc>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a21      	ldr	r2, [pc, #132]	; (80020fc <MX_GPIO_Init+0xdc>)
 8002078:	f043 0302 	orr.w	r3, r3, #2
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <MX_GPIO_Init+0xdc>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 800208a:	2200      	movs	r2, #0
 800208c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002090:	481b      	ldr	r0, [pc, #108]	; (8002100 <MX_GPIO_Init+0xe0>)
 8002092:	f000 ff61 	bl	8002f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	2122      	movs	r1, #34	; 0x22
 800209a:	481a      	ldr	r0, [pc, #104]	; (8002104 <MX_GPIO_Init+0xe4>)
 800209c:	f000 ff5c 	bl	8002f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80020a0:	2302      	movs	r3, #2
 80020a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a4:	2300      	movs	r3, #0
 80020a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	4619      	mov	r1, r3
 80020b2:	4813      	ldr	r0, [pc, #76]	; (8002100 <MX_GPIO_Init+0xe0>)
 80020b4:	f000 fdb4 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 80020b8:	f44f 738c 	mov.w	r3, #280	; 0x118
 80020bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020be:	2301      	movs	r3, #1
 80020c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	4619      	mov	r1, r3
 80020d0:	480b      	ldr	r0, [pc, #44]	; (8002100 <MX_GPIO_Init+0xe0>)
 80020d2:	f000 fda5 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 80020d6:	2322      	movs	r3, #34	; 0x22
 80020d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020da:	2301      	movs	r3, #1
 80020dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e6:	f107 030c 	add.w	r3, r7, #12
 80020ea:	4619      	mov	r1, r3
 80020ec:	4805      	ldr	r0, [pc, #20]	; (8002104 <MX_GPIO_Init+0xe4>)
 80020ee:	f000 fd97 	bl	8002c20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020f2:	bf00      	nop
 80020f4:	3720      	adds	r7, #32
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020000 	.word	0x40020000
 8002104:	40020400 	.word	0x40020400

08002108 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	f5ad 6d06 	sub.w	sp, sp, #2144	; 0x860
 800210e:	af02      	add	r7, sp, #8
 8002110:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8002114:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 8002118:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800211a:	f00f fc0f 	bl	801193c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  for(;;)
  {
	static FATFS fs;
	FIL test;
	BYTE* work = malloc(SECTOR_SIZE);
 800211e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002122:	f010 f945 	bl	80123b0 <malloc>
 8002126:	4603      	mov	r3, r0
 8002128:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
	uint8_t* read = malloc(SECTOR_SIZE*sizeof(uint8_t));
 800212c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002130:	f010 f93e 	bl	80123b0 <malloc>
 8002134:	4603      	mov	r3, r0
 8002136:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
	vTaskSuspend(ReadCardHandle);
 800213a:	4b37      	ldr	r3, [pc, #220]	; (8002218 <Start_Init+0x110>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f00d fd46 	bl	800fbd0 <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 8002144:	4b35      	ldr	r3, [pc, #212]	; (800221c <Start_Init+0x114>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f00d fd41 	bl	800fbd0 <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 800214e:	4b34      	ldr	r3, [pc, #208]	; (8002220 <Start_Init+0x118>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f00d fd3c 	bl	800fbd0 <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 8002158:	4b32      	ldr	r3, [pc, #200]	; (8002224 <Start_Init+0x11c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f00d fd37 	bl	800fbd0 <vTaskSuspend>

    MFRC_INIT();
 8002162:	f7fe fb39 	bl	80007d8 <MFRC_INIT>
    MFRC_ANTOFF();
 8002166:	f7fe faef 	bl	8000748 <MFRC_ANTOFF>
    OLED_INIT();
 800216a:	f7fe ff07 	bl	8000f7c <OLED_INIT>
    OLED_Print(TC);
 800216e:	482e      	ldr	r0, [pc, #184]	; (8002228 <Start_Init+0x120>)
 8002170:	f7ff f849 	bl	8001206 <OLED_Print>
    mem_init(0);
 8002174:	2000      	movs	r0, #0
 8002176:	f7ff fc21 	bl	80019bc <mem_init>
    FRESULT result1 = f_mkfs("", FM_ANY, 0, work, SECTOR_SIZE);
 800217a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8002184:	2200      	movs	r2, #0
 8002186:	2107      	movs	r1, #7
 8002188:	4828      	ldr	r0, [pc, #160]	; (800222c <Start_Init+0x124>)
 800218a:	f00b fa6f 	bl	800d66c <f_mkfs>
 800218e:	4603      	mov	r3, r0
 8002190:	f887 384f 	strb.w	r3, [r7, #2127]	; 0x84f

    BYTE br;
    BYTE bw;
    BYTE nums[] = {1,2,3,4,5};
 8002194:	4a26      	ldr	r2, [pc, #152]	; (8002230 <Start_Init+0x128>)
 8002196:	f607 0344 	addw	r3, r7, #2116	; 0x844
 800219a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800219e:	6018      	str	r0, [r3, #0]
 80021a0:	3304      	adds	r3, #4
 80021a2:	7019      	strb	r1, [r3, #0]
    BYTE read_nums[5];

    FRESULT result2 = f_mount(&fs, "", 0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	4921      	ldr	r1, [pc, #132]	; (800222c <Start_Init+0x124>)
 80021a8:	4822      	ldr	r0, [pc, #136]	; (8002234 <Start_Init+0x12c>)
 80021aa:	f00a fdad 	bl	800cd08 <f_mount>
 80021ae:	4603      	mov	r3, r0
 80021b0:	f887 384e 	strb.w	r3, [r7, #2126]	; 0x84e

    FRESULT a = f_open(&test, "test.txt", FA_OPEN_ALWAYS|FA_WRITE);
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	2212      	movs	r2, #18
 80021ba:	491f      	ldr	r1, [pc, #124]	; (8002238 <Start_Init+0x130>)
 80021bc:	4618      	mov	r0, r3
 80021be:	f00a fe07 	bl	800cdd0 <f_open>
 80021c2:	4603      	mov	r3, r0
 80021c4:	f887 384d 	strb.w	r3, [r7, #2125]	; 0x84d
    FRESULT b = f_write(&test, nums, 5, &bw);
 80021c8:	f607 034a 	addw	r3, r7, #2122	; 0x84a
 80021cc:	f607 0144 	addw	r1, r7, #2116	; 0x844
 80021d0:	f107 000c 	add.w	r0, r7, #12
 80021d4:	2205      	movs	r2, #5
 80021d6:	f00a ffce 	bl	800d176 <f_write>
 80021da:	4603      	mov	r3, r0
 80021dc:	f887 384c 	strb.w	r3, [r7, #2124]	; 0x84c
    FRESULT c = f_close(&test);
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	4618      	mov	r0, r3
 80021e6:	f00b fa12 	bl	800d60e <f_close>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f887 384b 	strb.w	r3, [r7, #2123]	; 0x84b

    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) != 0);
 80021f0:	bf00      	nop
 80021f2:	2102      	movs	r1, #2
 80021f4:	4811      	ldr	r0, [pc, #68]	; (800223c <Start_Init+0x134>)
 80021f6:	f000 fe97 	bl	8002f28 <HAL_GPIO_ReadPin>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f8      	bne.n	80021f2 <Start_Init+0xea>
    vTaskResume(HomeHandle);
 8002200:	4b07      	ldr	r3, [pc, #28]	; (8002220 <Start_Init+0x118>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f00d fd8b 	bl	800fd20 <vTaskResume>
    osDelay(10);
 800220a:	200a      	movs	r0, #10
 800220c:	f00c f841 	bl	800e292 <osDelay>
    vTaskSuspend(NULL);
 8002210:	2000      	movs	r0, #0
 8002212:	f00d fcdd 	bl	800fbd0 <vTaskSuspend>
  {
 8002216:	e782      	b.n	800211e <Start_Init+0x16>
 8002218:	2000081c 	.word	0x2000081c
 800221c:	20000820 	.word	0x20000820
 8002220:	20000824 	.word	0x20000824
 8002224:	20000828 	.word	0x20000828
 8002228:	20000404 	.word	0x20000404
 800222c:	08012db8 	.word	0x08012db8
 8002230:	08012dc8 	.word	0x08012dc8
 8002234:	20000830 	.word	0x20000830
 8002238:	08012dbc 	.word	0x08012dbc
 800223c:	40020000 	.word	0x40020000

08002240 <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 8002240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002242:	b091      	sub	sp, #68	; 0x44
 8002244:	af06      	add	r7, sp, #24
 8002246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	uint8_t cardinf[18];
	char* toSend = malloc(26*sizeof(char));
 8002248:	201a      	movs	r0, #26
 800224a:	f010 f8b1 	bl	80123b0 <malloc>
 800224e:	4603      	mov	r3, r0
 8002250:	60bb      	str	r3, [r7, #8]
	int ranonce = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
	MFRC_ANTON();
 800225a:	f7fe fa3b 	bl	80006d4 <MFRC_ANTON>
	if (ranonce == 0){
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	2b00      	cmp	r3, #0
 8002262:	d106      	bne.n	8002272 <StartReadCard+0x32>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 8002264:	2100      	movs	r1, #0
 8002266:	481f      	ldr	r0, [pc, #124]	; (80022e4 <StartReadCard+0xa4>)
 8002268:	f7ff f898 	bl	800139c <OLED_SCREEN>
		ranonce++;
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	3301      	adds	r3, #1
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if(DumpINFO(cardinf)==PCD_OK){
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fcea 	bl	8000c50 <DumpINFO>
 800227c:	4603      	mov	r3, r0
 800227e:	2bcc      	cmp	r3, #204	; 0xcc
 8002280:	d121      	bne.n	80022c6 <StartReadCard+0x86>
			BUZZ();
 8002282:	f7ff fc37 	bl	8001af4 <BUZZ>
			MFRC_ANTOFF();
 8002286:	f7fe fa5f 	bl	8000748 <MFRC_ANTOFF>
			sprintf(toSend,"%X%X%X%X%X%X%X", cardinf[0],cardinf[1],cardinf[2],cardinf[3],cardinf[4],cardinf[5],cardinf[6]);
 800228a:	68b8      	ldr	r0, [r7, #8]
 800228c:	7b3b      	ldrb	r3, [r7, #12]
 800228e:	461e      	mov	r6, r3
 8002290:	7b7b      	ldrb	r3, [r7, #13]
 8002292:	469c      	mov	ip, r3
 8002294:	7bbb      	ldrb	r3, [r7, #14]
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	7c39      	ldrb	r1, [r7, #16]
 800229a:	7c7c      	ldrb	r4, [r7, #17]
 800229c:	7cbd      	ldrb	r5, [r7, #18]
 800229e:	9504      	str	r5, [sp, #16]
 80022a0:	9403      	str	r4, [sp, #12]
 80022a2:	9102      	str	r1, [sp, #8]
 80022a4:	9201      	str	r2, [sp, #4]
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	4663      	mov	r3, ip
 80022aa:	4632      	mov	r2, r6
 80022ac:	490e      	ldr	r1, [pc, #56]	; (80022e8 <StartReadCard+0xa8>)
 80022ae:	f010 f995 	bl	80125dc <siprintf>
			xQueueSend(UidtoFoundHandle,&toSend,0); //Send a pointer to our string to the Card Found task to use
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <StartReadCard+0xac>)
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	f107 0108 	add.w	r1, r7, #8
 80022ba:	2300      	movs	r3, #0
 80022bc:	2200      	movs	r2, #0
 80022be:	f00c fc4b 	bl	800eb58 <xQueueGenericSend>
			suspend = 1;
 80022c2:	2301      	movs	r3, #1
 80022c4:	623b      	str	r3, [r7, #32]
		}
	if (suspend == 1) {
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d1c4      	bne.n	8002256 <StartReadCard+0x16>
		vTaskResume(CardFoundHandle);
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <StartReadCard+0xb0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f00d fd25 	bl	800fd20 <vTaskResume>
		ranonce = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
		vTaskSuspend(NULL);
 80022da:	2000      	movs	r0, #0
 80022dc:	f00d fc78 	bl	800fbd0 <vTaskSuspend>
  {
 80022e0:	e7b9      	b.n	8002256 <StartReadCard+0x16>
 80022e2:	bf00      	nop
 80022e4:	08013268 	.word	0x08013268
 80022e8:	08012dd0 	.word	0x08012dd0
 80022ec:	2000082c 	.word	0x2000082c
 80022f0:	20000828 	.word	0x20000828

080022f4 <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
  int ranonce = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d106      	bne.n	8002314 <StartWriteCard+0x20>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 8002306:	2100      	movs	r1, #0
 8002308:	4804      	ldr	r0, [pc, #16]	; (800231c <StartWriteCard+0x28>)
 800230a:	f7ff f847 	bl	800139c <OLED_SCREEN>
	  	ranonce++;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	3301      	adds	r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
	  }
	  osDelay(1);
 8002314:	2001      	movs	r0, #1
 8002316:	f00b ffbc 	bl	800e292 <osDelay>
	  if (ranonce == 0){
 800231a:	e7f1      	b.n	8002300 <StartWriteCard+0xc>
 800231c:	08013290 	.word	0x08013290

08002320 <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af02      	add	r7, sp, #8
 8002326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint32_t count = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]
	int ranonce = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  int suspend = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]
	  if (ranonce == 0) {
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10d      	bne.n	8002356 <StartHome+0x36>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 800233a:	2100      	movs	r1, #0
 800233c:	4818      	ldr	r0, [pc, #96]	; (80023a0 <StartHome+0x80>)
 800233e:	f7ff f82d 	bl	800139c <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, count, OLED_RESTORE);
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2201      	movs	r2, #1
 8002348:	4619      	mov	r1, r3
 800234a:	4815      	ldr	r0, [pc, #84]	; (80023a0 <StartHome+0x80>)
 800234c:	f7ff f888 	bl	8001460 <OLED_SELECT>
		  ranonce++;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	3301      	adds	r3, #1
 8002354:	617b      	str	r3, [r7, #20]
	  }
	  choose(&SCRN_Home,&suspend,&count,6,OLED_RESTORE);
 8002356:	f107 0210 	add.w	r2, r7, #16
 800235a:	f107 010c 	add.w	r1, r7, #12
 800235e:	2301      	movs	r3, #1
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2306      	movs	r3, #6
 8002364:	480e      	ldr	r0, [pc, #56]	; (80023a0 <StartHome+0x80>)
 8002366:	f7ff fbd7 	bl	8001b18 <choose>
	  if (suspend == 1) {
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d1df      	bne.n	8002330 <StartHome+0x10>
		switch(count) {
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <StartHome+0x5c>
 8002376:	2b01      	cmp	r3, #1
 8002378:	d006      	beq.n	8002388 <StartHome+0x68>
 800237a:	e00b      	b.n	8002394 <StartHome+0x74>
			case 0:
				vTaskResume(ReadCardHandle);
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <StartHome+0x84>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f00d fccd 	bl	800fd20 <vTaskResume>
				break;
 8002386:	e005      	b.n	8002394 <StartHome+0x74>
			case 1:
				vTaskResume(WriteCardHandle);
 8002388:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <StartHome+0x88>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f00d fcc7 	bl	800fd20 <vTaskResume>
				break;
 8002392:	bf00      	nop
		}
		ranonce = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
		vTaskSuspend(NULL);
 8002398:	2000      	movs	r0, #0
 800239a:	f00d fc19 	bl	800fbd0 <vTaskSuspend>
  {
 800239e:	e7c7      	b.n	8002330 <StartHome+0x10>
 80023a0:	08013254 	.word	0x08013254
 80023a4:	2000081c 	.word	0x2000081c
 80023a8:	20000820 	.word	0x20000820

080023ac <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 80023ac:	b5b0      	push	{r4, r5, r7, lr}
 80023ae:	b08e      	sub	sp, #56	; 0x38
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	 int count = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
	 int ranonce = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	 char* cardinf;
	 char type[]="MIFARE ULTRALIGHT";
 80023bc:	4b28      	ldr	r3, [pc, #160]	; (8002460 <CardFoundStart+0xb4>)
 80023be:	f107 0410 	add.w	r4, r7, #16
 80023c2:	461d      	mov	r5, r3
 80023c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023c8:	682b      	ldr	r3, [r5, #0]
 80023ca:	8023      	strh	r3, [r4, #0]
  /* Infinite loop */
  for(;;)
  {
	int suspend = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
	if (ranonce == 0) {
 80023d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d126      	bne.n	8002424 <CardFoundStart+0x78>
		while(xQueueReceive(UidtoFoundHandle, &cardinf, 0)!=pdTRUE);
 80023d6:	bf00      	nop
 80023d8:	4b22      	ldr	r3, [pc, #136]	; (8002464 <CardFoundStart+0xb8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80023e0:	2200      	movs	r2, #0
 80023e2:	4618      	mov	r0, r3
 80023e4:	f00c fdde 	bl	800efa4 <xQueueReceive>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d1f4      	bne.n	80023d8 <CardFoundStart+0x2c>
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 80023ee:	2100      	movs	r1, #0
 80023f0:	481d      	ldr	r0, [pc, #116]	; (8002468 <CardFoundStart+0xbc>)
 80023f2:	f7fe ffd3 	bl	800139c <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, 1, cardinf);
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	461a      	mov	r2, r3
 80023fa:	2101      	movs	r1, #1
 80023fc:	481a      	ldr	r0, [pc, #104]	; (8002468 <CardFoundStart+0xbc>)
 80023fe:	f7ff f806 	bl	800140e <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, 2, type);
 8002402:	f107 0310 	add.w	r3, r7, #16
 8002406:	461a      	mov	r2, r3
 8002408:	2102      	movs	r1, #2
 800240a:	4817      	ldr	r0, [pc, #92]	; (8002468 <CardFoundStart+0xbc>)
 800240c:	f7fe ffff 	bl	800140e <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, count, OLED_NORESTORE);
 8002410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2200      	movs	r2, #0
 8002416:	4619      	mov	r1, r3
 8002418:	4813      	ldr	r0, [pc, #76]	; (8002468 <CardFoundStart+0xbc>)
 800241a:	f7ff f821 	bl	8001460 <OLED_SELECT>
		ranonce++;
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	3301      	adds	r3, #1
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	choose(&SCRN_CardFound,&suspend,&count,2,OLED_NORESTORE);
 8002424:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002428:	f107 010c 	add.w	r1, r7, #12
 800242c:	2300      	movs	r3, #0
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	2302      	movs	r3, #2
 8002432:	480d      	ldr	r0, [pc, #52]	; (8002468 <CardFoundStart+0xbc>)
 8002434:	f7ff fb70 	bl	8001b18 <choose>
 	if((suspend == 1) && (count == 1)){
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d1c6      	bne.n	80023cc <CardFoundStart+0x20>
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002440:	2b01      	cmp	r3, #1
 8002442:	d1c3      	bne.n	80023cc <CardFoundStart+0x20>
 		vTaskResume(HomeHandle);
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <CardFoundStart+0xc0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f00d fc69 	bl	800fd20 <vTaskResume>
 		ranonce = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
 		count = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	62bb      	str	r3, [r7, #40]	; 0x28
 		vTaskSuspend(NULL);
 8002456:	2000      	movs	r0, #0
 8002458:	f00d fbba 	bl	800fbd0 <vTaskSuspend>
  {
 800245c:	e7b6      	b.n	80023cc <CardFoundStart+0x20>
 800245e:	bf00      	nop
 8002460:	08012de0 	.word	0x08012de0
 8002464:	2000082c 	.word	0x2000082c
 8002468:	0801327c 	.word	0x0801327c
 800246c:	20000824 	.word	0x20000824

08002470 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a04      	ldr	r2, [pc, #16]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d101      	bne.n	8002486 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002482:	f000 faa7 	bl	80029d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40000c00 	.word	0x40000c00

08002494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002498:	b672      	cpsid	i
}
 800249a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800249c:	e7fe      	b.n	800249c <Error_Handler+0x8>
	...

080024a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_MspInit+0x54>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	4a11      	ldr	r2, [pc, #68]	; (80024f4 <HAL_MspInit+0x54>)
 80024b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b4:	6453      	str	r3, [r2, #68]	; 0x44
 80024b6:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <HAL_MspInit+0x54>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_MspInit+0x54>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <HAL_MspInit+0x54>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	6413      	str	r3, [r2, #64]	; 0x40
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <HAL_MspInit+0x54>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	210f      	movs	r1, #15
 80024e2:	f06f 0001 	mvn.w	r0, #1
 80024e6:	f000 fb71 	bl	8002bcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800

080024f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a19      	ldr	r2, [pc, #100]	; (800257c <HAL_I2C_MspInit+0x84>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d12b      	bne.n	8002572 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	4b18      	ldr	r3, [pc, #96]	; (8002580 <HAL_I2C_MspInit+0x88>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a17      	ldr	r2, [pc, #92]	; (8002580 <HAL_I2C_MspInit+0x88>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b15      	ldr	r3, [pc, #84]	; (8002580 <HAL_I2C_MspInit+0x88>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002536:	23c0      	movs	r3, #192	; 0xc0
 8002538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800253a:	2312      	movs	r3, #18
 800253c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002542:	2303      	movs	r3, #3
 8002544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002546:	2304      	movs	r3, #4
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254a:	f107 0314 	add.w	r3, r7, #20
 800254e:	4619      	mov	r1, r3
 8002550:	480c      	ldr	r0, [pc, #48]	; (8002584 <HAL_I2C_MspInit+0x8c>)
 8002552:	f000 fb65 	bl	8002c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b09      	ldr	r3, [pc, #36]	; (8002580 <HAL_I2C_MspInit+0x88>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	4a08      	ldr	r2, [pc, #32]	; (8002580 <HAL_I2C_MspInit+0x88>)
 8002560:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002564:	6413      	str	r3, [r2, #64]	; 0x40
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_I2C_MspInit+0x88>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002572:	bf00      	nop
 8002574:	3728      	adds	r7, #40	; 0x28
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40005400 	.word	0x40005400
 8002580:	40023800 	.word	0x40023800
 8002584:	40020400 	.word	0x40020400

08002588 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08c      	sub	sp, #48	; 0x30
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 031c 	add.w	r3, r7, #28
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a32      	ldr	r2, [pc, #200]	; (8002670 <HAL_SPI_MspInit+0xe8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d12c      	bne.n	8002604 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	61bb      	str	r3, [r7, #24]
 80025ae:	4b31      	ldr	r3, [pc, #196]	; (8002674 <HAL_SPI_MspInit+0xec>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	4a30      	ldr	r2, [pc, #192]	; (8002674 <HAL_SPI_MspInit+0xec>)
 80025b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025b8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ba:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <HAL_SPI_MspInit+0xec>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c2:	61bb      	str	r3, [r7, #24]
 80025c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <HAL_SPI_MspInit+0xec>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	4a29      	ldr	r2, [pc, #164]	; (8002674 <HAL_SPI_MspInit+0xec>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6313      	str	r3, [r2, #48]	; 0x30
 80025d6:	4b27      	ldr	r3, [pc, #156]	; (8002674 <HAL_SPI_MspInit+0xec>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80025e2:	23a0      	movs	r3, #160	; 0xa0
 80025e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ee:	2303      	movs	r3, #3
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025f2:	2305      	movs	r3, #5
 80025f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f6:	f107 031c 	add.w	r3, r7, #28
 80025fa:	4619      	mov	r1, r3
 80025fc:	481e      	ldr	r0, [pc, #120]	; (8002678 <HAL_SPI_MspInit+0xf0>)
 80025fe:	f000 fb0f 	bl	8002c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002602:	e031      	b.n	8002668 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1c      	ldr	r2, [pc, #112]	; (800267c <HAL_SPI_MspInit+0xf4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d12c      	bne.n	8002668 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	4b18      	ldr	r3, [pc, #96]	; (8002674 <HAL_SPI_MspInit+0xec>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	4a17      	ldr	r2, [pc, #92]	; (8002674 <HAL_SPI_MspInit+0xec>)
 8002618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800261c:	6413      	str	r3, [r2, #64]	; 0x40
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <HAL_SPI_MspInit+0xec>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	4b11      	ldr	r3, [pc, #68]	; (8002674 <HAL_SPI_MspInit+0xec>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	4a10      	ldr	r2, [pc, #64]	; (8002674 <HAL_SPI_MspInit+0xec>)
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	6313      	str	r3, [r2, #48]	; 0x30
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <HAL_SPI_MspInit+0xec>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002646:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800264a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264c:	2302      	movs	r3, #2
 800264e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002654:	2303      	movs	r3, #3
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002658:	2305      	movs	r3, #5
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265c:	f107 031c 	add.w	r3, r7, #28
 8002660:	4619      	mov	r1, r3
 8002662:	4807      	ldr	r0, [pc, #28]	; (8002680 <HAL_SPI_MspInit+0xf8>)
 8002664:	f000 fadc 	bl	8002c20 <HAL_GPIO_Init>
}
 8002668:	bf00      	nop
 800266a:	3730      	adds	r7, #48	; 0x30
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40013000 	.word	0x40013000
 8002674:	40023800 	.word	0x40023800
 8002678:	40020000 	.word	0x40020000
 800267c:	40003800 	.word	0x40003800
 8002680:	40020400 	.word	0x40020400

08002684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002694:	d10e      	bne.n	80026b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <HAL_TIM_Base_MspInit+0x64>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <HAL_TIM_Base_MspInit+0x64>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <HAL_TIM_Base_MspInit+0x64>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026b2:	e012      	b.n	80026da <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0c      	ldr	r2, [pc, #48]	; (80026ec <HAL_TIM_Base_MspInit+0x68>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d10d      	bne.n	80026da <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <HAL_TIM_Base_MspInit+0x64>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	4a08      	ldr	r2, [pc, #32]	; (80026e8 <HAL_TIM_Base_MspInit+0x64>)
 80026c8:	f043 0302 	orr.w	r3, r3, #2
 80026cc:	6413      	str	r3, [r2, #64]	; 0x40
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_TIM_Base_MspInit+0x64>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
}
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40000400 	.word	0x40000400

080026f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 030c 	add.w	r3, r7, #12
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002710:	d11d      	bne.n	800274e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_TIM_MspPostInit+0x68>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a0f      	ldr	r2, [pc, #60]	; (8002758 <HAL_TIM_MspPostInit+0x68>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_TIM_MspPostInit+0x68>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800272e:	2304      	movs	r3, #4
 8002730:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	2302      	movs	r3, #2
 8002734:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	2300      	movs	r3, #0
 800273c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800273e:	2301      	movs	r3, #1
 8002740:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002742:	f107 030c 	add.w	r3, r7, #12
 8002746:	4619      	mov	r1, r3
 8002748:	4804      	ldr	r0, [pc, #16]	; (800275c <HAL_TIM_MspPostInit+0x6c>)
 800274a:	f000 fa69 	bl	8002c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800274e:	bf00      	nop
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800
 800275c:	40020000 	.word	0x40020000

08002760 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08e      	sub	sp, #56	; 0x38
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	4b33      	ldr	r3, [pc, #204]	; (8002844 <HAL_InitTick+0xe4>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	4a32      	ldr	r2, [pc, #200]	; (8002844 <HAL_InitTick+0xe4>)
 800277a:	f043 0308 	orr.w	r3, r3, #8
 800277e:	6413      	str	r3, [r2, #64]	; 0x40
 8002780:	4b30      	ldr	r3, [pc, #192]	; (8002844 <HAL_InitTick+0xe4>)
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800278c:	f107 0210 	add.w	r2, r7, #16
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f003 fab6 	bl	8005d08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80027a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d103      	bne.n	80027ae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80027a6:	f003 fa9b 	bl	8005ce0 <HAL_RCC_GetPCLK1Freq>
 80027aa:	6378      	str	r0, [r7, #52]	; 0x34
 80027ac:	e004      	b.n	80027b8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80027ae:	f003 fa97 	bl	8005ce0 <HAL_RCC_GetPCLK1Freq>
 80027b2:	4603      	mov	r3, r0
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ba:	4a23      	ldr	r2, [pc, #140]	; (8002848 <HAL_InitTick+0xe8>)
 80027bc:	fba2 2303 	umull	r2, r3, r2, r3
 80027c0:	0c9b      	lsrs	r3, r3, #18
 80027c2:	3b01      	subs	r3, #1
 80027c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80027c6:	4b21      	ldr	r3, [pc, #132]	; (800284c <HAL_InitTick+0xec>)
 80027c8:	4a21      	ldr	r2, [pc, #132]	; (8002850 <HAL_InitTick+0xf0>)
 80027ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80027cc:	4b1f      	ldr	r3, [pc, #124]	; (800284c <HAL_InitTick+0xec>)
 80027ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027d2:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80027d4:	4a1d      	ldr	r2, [pc, #116]	; (800284c <HAL_InitTick+0xec>)
 80027d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d8:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80027da:	4b1c      	ldr	r3, [pc, #112]	; (800284c <HAL_InitTick+0xec>)
 80027dc:	2200      	movs	r2, #0
 80027de:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e0:	4b1a      	ldr	r3, [pc, #104]	; (800284c <HAL_InitTick+0xec>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e6:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_InitTick+0xec>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80027ec:	4817      	ldr	r0, [pc, #92]	; (800284c <HAL_InitTick+0xec>)
 80027ee:	f003 feef 	bl	80065d0 <HAL_TIM_Base_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80027f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d11b      	bne.n	8002838 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002800:	4812      	ldr	r0, [pc, #72]	; (800284c <HAL_InitTick+0xec>)
 8002802:	f003 ffb7 	bl	8006774 <HAL_TIM_Base_Start_IT>
 8002806:	4603      	mov	r3, r0
 8002808:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800280c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002810:	2b00      	cmp	r3, #0
 8002812:	d111      	bne.n	8002838 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002814:	2032      	movs	r0, #50	; 0x32
 8002816:	f000 f9f5 	bl	8002c04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b0f      	cmp	r3, #15
 800281e:	d808      	bhi.n	8002832 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8002820:	2200      	movs	r2, #0
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	2032      	movs	r0, #50	; 0x32
 8002826:	f000 f9d1 	bl	8002bcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800282a:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <HAL_InitTick+0xf4>)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	e002      	b.n	8002838 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002838:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800283c:	4618      	mov	r0, r3
 800283e:	3738      	adds	r7, #56	; 0x38
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40023800 	.word	0x40023800
 8002848:	431bde83 	.word	0x431bde83
 800284c:	20001068 	.word	0x20001068
 8002850:	40000c00 	.word	0x40000c00
 8002854:	200004f0 	.word	0x200004f0

08002858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800285c:	e7fe      	b.n	800285c <NMI_Handler+0x4>

0800285e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800285e:	b480      	push	{r7}
 8002860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002862:	e7fe      	b.n	8002862 <HardFault_Handler+0x4>

08002864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002868:	e7fe      	b.n	8002868 <MemManage_Handler+0x4>

0800286a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800286e:	e7fe      	b.n	800286e <BusFault_Handler+0x4>

08002870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002874:	e7fe      	b.n	8002874 <UsageFault_Handler+0x4>

08002876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002888:	4802      	ldr	r0, [pc, #8]	; (8002894 <TIM5_IRQHandler+0x10>)
 800288a:	f004 f943 	bl	8006b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20001068 	.word	0x20001068

08002898 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800289c:	4802      	ldr	r0, [pc, #8]	; (80028a8 <OTG_FS_IRQHandler+0x10>)
 800289e:	f001 fc84 	bl	80041aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20006d44 	.word	0x20006d44

080028ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b4:	4a14      	ldr	r2, [pc, #80]	; (8002908 <_sbrk+0x5c>)
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <_sbrk+0x60>)
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028c0:	4b13      	ldr	r3, [pc, #76]	; (8002910 <_sbrk+0x64>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d102      	bne.n	80028ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <_sbrk+0x64>)
 80028ca:	4a12      	ldr	r2, [pc, #72]	; (8002914 <_sbrk+0x68>)
 80028cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <_sbrk+0x64>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d207      	bcs.n	80028ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028dc:	f00f fd3e 	bl	801235c <__errno>
 80028e0:	4603      	mov	r3, r0
 80028e2:	220c      	movs	r2, #12
 80028e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028e6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ea:	e009      	b.n	8002900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028ec:	4b08      	ldr	r3, [pc, #32]	; (8002910 <_sbrk+0x64>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028f2:	4b07      	ldr	r3, [pc, #28]	; (8002910 <_sbrk+0x64>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	4a05      	ldr	r2, [pc, #20]	; (8002910 <_sbrk+0x64>)
 80028fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028fe:	68fb      	ldr	r3, [r7, #12]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20010000 	.word	0x20010000
 800290c:	00000400 	.word	0x00000400
 8002910:	200010b0 	.word	0x200010b0
 8002914:	20007480 	.word	0x20007480

08002918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <SystemInit+0x20>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	4a05      	ldr	r2, [pc, #20]	; (8002938 <SystemInit+0x20>)
 8002924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800293c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002974 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002940:	480d      	ldr	r0, [pc, #52]	; (8002978 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002942:	490e      	ldr	r1, [pc, #56]	; (800297c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002944:	4a0e      	ldr	r2, [pc, #56]	; (8002980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002948:	e002      	b.n	8002950 <LoopCopyDataInit>

0800294a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800294a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800294c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800294e:	3304      	adds	r3, #4

08002950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002954:	d3f9      	bcc.n	800294a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002956:	4a0b      	ldr	r2, [pc, #44]	; (8002984 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002958:	4c0b      	ldr	r4, [pc, #44]	; (8002988 <LoopFillZerobss+0x26>)
  movs r3, #0
 800295a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800295c:	e001      	b.n	8002962 <LoopFillZerobss>

0800295e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800295e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002960:	3204      	adds	r2, #4

08002962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002964:	d3fb      	bcc.n	800295e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002966:	f7ff ffd7 	bl	8002918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800296a:	f00f fcfd 	bl	8012368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800296e:	f7ff f921 	bl	8001bb4 <main>
  bx  lr    
 8002972:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002974:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800297c:	20000664 	.word	0x20000664
  ldr r2, =_sidata
 8002980:	080133a0 	.word	0x080133a0
  ldr r2, =_sbss
 8002984:	20000664 	.word	0x20000664
  ldr r4, =_ebss
 8002988:	20007480 	.word	0x20007480

0800298c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800298c:	e7fe      	b.n	800298c <ADC_IRQHandler>
	...

08002990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002994:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <HAL_Init+0x40>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <HAL_Init+0x40>)
 800299a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800299e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_Init+0x40>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <HAL_Init+0x40>)
 80029a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_Init+0x40>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <HAL_Init+0x40>)
 80029b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029b8:	2003      	movs	r0, #3
 80029ba:	f000 f8fc 	bl	8002bb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029be:	200f      	movs	r0, #15
 80029c0:	f7ff fece 	bl	8002760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029c4:	f7ff fd6c 	bl	80024a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40023c00 	.word	0x40023c00

080029d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <HAL_IncTick+0x20>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_IncTick+0x24>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4413      	add	r3, r2
 80029e4:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <HAL_IncTick+0x24>)
 80029e6:	6013      	str	r3, [r2, #0]
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	200004f4 	.word	0x200004f4
 80029f8:	200010b4 	.word	0x200010b4

080029fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <HAL_GetTick+0x14>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	200010b4 	.word	0x200010b4

08002a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a1c:	f7ff ffee 	bl	80029fc <HAL_GetTick>
 8002a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d005      	beq.n	8002a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <HAL_Delay+0x44>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4413      	add	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a3a:	bf00      	nop
 8002a3c:	f7ff ffde 	bl	80029fc <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d8f7      	bhi.n	8002a3c <HAL_Delay+0x28>
  {
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200004f4 	.word	0x200004f4

08002a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8e:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	60d3      	str	r3, [r2, #12]
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <__NVIC_GetPriorityGrouping+0x18>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	0a1b      	lsrs	r3, r3, #8
 8002aae:	f003 0307 	and.w	r3, r3, #7
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	db0b      	blt.n	8002aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	f003 021f 	and.w	r2, r3, #31
 8002ad8:	4907      	ldr	r1, [pc, #28]	; (8002af8 <__NVIC_EnableIRQ+0x38>)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	e000e100 	.word	0xe000e100

08002afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	6039      	str	r1, [r7, #0]
 8002b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	db0a      	blt.n	8002b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	490c      	ldr	r1, [pc, #48]	; (8002b48 <__NVIC_SetPriority+0x4c>)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	0112      	lsls	r2, r2, #4
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	440b      	add	r3, r1
 8002b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b24:	e00a      	b.n	8002b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	4908      	ldr	r1, [pc, #32]	; (8002b4c <__NVIC_SetPriority+0x50>)
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	3b04      	subs	r3, #4
 8002b34:	0112      	lsls	r2, r2, #4
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	440b      	add	r3, r1
 8002b3a:	761a      	strb	r2, [r3, #24]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000e100 	.word	0xe000e100
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b089      	sub	sp, #36	; 0x24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f1c3 0307 	rsb	r3, r3, #7
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	bf28      	it	cs
 8002b6e:	2304      	movcs	r3, #4
 8002b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3304      	adds	r3, #4
 8002b76:	2b06      	cmp	r3, #6
 8002b78:	d902      	bls.n	8002b80 <NVIC_EncodePriority+0x30>
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3b03      	subs	r3, #3
 8002b7e:	e000      	b.n	8002b82 <NVIC_EncodePriority+0x32>
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b84:	f04f 32ff 	mov.w	r2, #4294967295
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43da      	mvns	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	401a      	ands	r2, r3
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b98:	f04f 31ff 	mov.w	r1, #4294967295
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	43d9      	mvns	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba8:	4313      	orrs	r3, r2
         );
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3724      	adds	r7, #36	; 0x24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff ff4c 	bl	8002a5c <__NVIC_SetPriorityGrouping>
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bde:	f7ff ff61 	bl	8002aa4 <__NVIC_GetPriorityGrouping>
 8002be2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	6978      	ldr	r0, [r7, #20]
 8002bea:	f7ff ffb1 	bl	8002b50 <NVIC_EncodePriority>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ff80 	bl	8002afc <__NVIC_SetPriority>
}
 8002bfc:	bf00      	nop
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ff54 	bl	8002ac0 <__NVIC_EnableIRQ>
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	e159      	b.n	8002ef0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	f040 8148 	bne.w	8002eea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d005      	beq.n	8002c72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d130      	bne.n	8002cd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca8:	2201      	movs	r2, #1
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 0201 	and.w	r2, r3, #1
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d017      	beq.n	8002d10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	2203      	movs	r2, #3
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d123      	bne.n	8002d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	08da      	lsrs	r2, r3, #3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3208      	adds	r2, #8
 8002d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	220f      	movs	r2, #15
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	08da      	lsrs	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3208      	adds	r2, #8
 8002d5e:	69b9      	ldr	r1, [r7, #24]
 8002d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0203 	and.w	r2, r3, #3
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80a2 	beq.w	8002eea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	4b57      	ldr	r3, [pc, #348]	; (8002f08 <HAL_GPIO_Init+0x2e8>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	4a56      	ldr	r2, [pc, #344]	; (8002f08 <HAL_GPIO_Init+0x2e8>)
 8002db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db4:	6453      	str	r3, [r2, #68]	; 0x44
 8002db6:	4b54      	ldr	r3, [pc, #336]	; (8002f08 <HAL_GPIO_Init+0x2e8>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dc2:	4a52      	ldr	r2, [pc, #328]	; (8002f0c <HAL_GPIO_Init+0x2ec>)
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	089b      	lsrs	r3, r3, #2
 8002dc8:	3302      	adds	r3, #2
 8002dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	220f      	movs	r2, #15
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a49      	ldr	r2, [pc, #292]	; (8002f10 <HAL_GPIO_Init+0x2f0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d019      	beq.n	8002e22 <HAL_GPIO_Init+0x202>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a48      	ldr	r2, [pc, #288]	; (8002f14 <HAL_GPIO_Init+0x2f4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d013      	beq.n	8002e1e <HAL_GPIO_Init+0x1fe>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a47      	ldr	r2, [pc, #284]	; (8002f18 <HAL_GPIO_Init+0x2f8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00d      	beq.n	8002e1a <HAL_GPIO_Init+0x1fa>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a46      	ldr	r2, [pc, #280]	; (8002f1c <HAL_GPIO_Init+0x2fc>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d007      	beq.n	8002e16 <HAL_GPIO_Init+0x1f6>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a45      	ldr	r2, [pc, #276]	; (8002f20 <HAL_GPIO_Init+0x300>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d101      	bne.n	8002e12 <HAL_GPIO_Init+0x1f2>
 8002e0e:	2304      	movs	r3, #4
 8002e10:	e008      	b.n	8002e24 <HAL_GPIO_Init+0x204>
 8002e12:	2307      	movs	r3, #7
 8002e14:	e006      	b.n	8002e24 <HAL_GPIO_Init+0x204>
 8002e16:	2303      	movs	r3, #3
 8002e18:	e004      	b.n	8002e24 <HAL_GPIO_Init+0x204>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e002      	b.n	8002e24 <HAL_GPIO_Init+0x204>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_GPIO_Init+0x204>
 8002e22:	2300      	movs	r3, #0
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	f002 0203 	and.w	r2, r2, #3
 8002e2a:	0092      	lsls	r2, r2, #2
 8002e2c:	4093      	lsls	r3, r2
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e34:	4935      	ldr	r1, [pc, #212]	; (8002f0c <HAL_GPIO_Init+0x2ec>)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	089b      	lsrs	r3, r3, #2
 8002e3a:	3302      	adds	r3, #2
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e42:	4b38      	ldr	r3, [pc, #224]	; (8002f24 <HAL_GPIO_Init+0x304>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e66:	4a2f      	ldr	r2, [pc, #188]	; (8002f24 <HAL_GPIO_Init+0x304>)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e6c:	4b2d      	ldr	r3, [pc, #180]	; (8002f24 <HAL_GPIO_Init+0x304>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e90:	4a24      	ldr	r2, [pc, #144]	; (8002f24 <HAL_GPIO_Init+0x304>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e96:	4b23      	ldr	r3, [pc, #140]	; (8002f24 <HAL_GPIO_Init+0x304>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eba:	4a1a      	ldr	r2, [pc, #104]	; (8002f24 <HAL_GPIO_Init+0x304>)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ec0:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <HAL_GPIO_Init+0x304>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ee4:	4a0f      	ldr	r2, [pc, #60]	; (8002f24 <HAL_GPIO_Init+0x304>)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3301      	adds	r3, #1
 8002eee:	61fb      	str	r3, [r7, #28]
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	2b0f      	cmp	r3, #15
 8002ef4:	f67f aea2 	bls.w	8002c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ef8:	bf00      	nop
 8002efa:	bf00      	nop
 8002efc:	3724      	adds	r7, #36	; 0x24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40013800 	.word	0x40013800
 8002f10:	40020000 	.word	0x40020000
 8002f14:	40020400 	.word	0x40020400
 8002f18:	40020800 	.word	0x40020800
 8002f1c:	40020c00 	.word	0x40020c00
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40013c00 	.word	0x40013c00

08002f28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	887b      	ldrh	r3, [r7, #2]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
 8002f44:	e001      	b.n	8002f4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	807b      	strh	r3, [r7, #2]
 8002f64:	4613      	mov	r3, r2
 8002f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f68:	787b      	ldrb	r3, [r7, #1]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f6e:	887a      	ldrh	r2, [r7, #2]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f74:	e003      	b.n	8002f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f76:	887b      	ldrh	r3, [r7, #2]
 8002f78:	041a      	lsls	r2, r3, #16
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	619a      	str	r2, [r3, #24]
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e12b      	b.n	80031f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff faa0 	bl	80024f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2224      	movs	r2, #36	; 0x24
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ff0:	f002 fe76 	bl	8005ce0 <HAL_RCC_GetPCLK1Freq>
 8002ff4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4a81      	ldr	r2, [pc, #516]	; (8003200 <HAL_I2C_Init+0x274>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d807      	bhi.n	8003010 <HAL_I2C_Init+0x84>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4a80      	ldr	r2, [pc, #512]	; (8003204 <HAL_I2C_Init+0x278>)
 8003004:	4293      	cmp	r3, r2
 8003006:	bf94      	ite	ls
 8003008:	2301      	movls	r3, #1
 800300a:	2300      	movhi	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	e006      	b.n	800301e <HAL_I2C_Init+0x92>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4a7d      	ldr	r2, [pc, #500]	; (8003208 <HAL_I2C_Init+0x27c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	bf94      	ite	ls
 8003018:	2301      	movls	r3, #1
 800301a:	2300      	movhi	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e0e7      	b.n	80031f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4a78      	ldr	r2, [pc, #480]	; (800320c <HAL_I2C_Init+0x280>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	0c9b      	lsrs	r3, r3, #18
 8003030:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4a6a      	ldr	r2, [pc, #424]	; (8003200 <HAL_I2C_Init+0x274>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d802      	bhi.n	8003060 <HAL_I2C_Init+0xd4>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	3301      	adds	r3, #1
 800305e:	e009      	b.n	8003074 <HAL_I2C_Init+0xe8>
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	4a69      	ldr	r2, [pc, #420]	; (8003210 <HAL_I2C_Init+0x284>)
 800306c:	fba2 2303 	umull	r2, r3, r2, r3
 8003070:	099b      	lsrs	r3, r3, #6
 8003072:	3301      	adds	r3, #1
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	430b      	orrs	r3, r1
 800307a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003086:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	495c      	ldr	r1, [pc, #368]	; (8003200 <HAL_I2C_Init+0x274>)
 8003090:	428b      	cmp	r3, r1
 8003092:	d819      	bhi.n	80030c8 <HAL_I2C_Init+0x13c>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1e59      	subs	r1, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a2:	1c59      	adds	r1, r3, #1
 80030a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030a8:	400b      	ands	r3, r1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <HAL_I2C_Init+0x138>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1e59      	subs	r1, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c2:	e051      	b.n	8003168 <HAL_I2C_Init+0x1dc>
 80030c4:	2304      	movs	r3, #4
 80030c6:	e04f      	b.n	8003168 <HAL_I2C_Init+0x1dc>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d111      	bne.n	80030f4 <HAL_I2C_Init+0x168>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1e58      	subs	r0, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	440b      	add	r3, r1
 80030de:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e2:	3301      	adds	r3, #1
 80030e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf0c      	ite	eq
 80030ec:	2301      	moveq	r3, #1
 80030ee:	2300      	movne	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	e012      	b.n	800311a <HAL_I2C_Init+0x18e>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1e58      	subs	r0, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6859      	ldr	r1, [r3, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	0099      	lsls	r1, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	fbb0 f3f3 	udiv	r3, r0, r3
 800310a:	3301      	adds	r3, #1
 800310c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_I2C_Init+0x196>
 800311e:	2301      	movs	r3, #1
 8003120:	e022      	b.n	8003168 <HAL_I2C_Init+0x1dc>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10e      	bne.n	8003148 <HAL_I2C_Init+0x1bc>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1e58      	subs	r0, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6859      	ldr	r1, [r3, #4]
 8003132:	460b      	mov	r3, r1
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	440b      	add	r3, r1
 8003138:	fbb0 f3f3 	udiv	r3, r0, r3
 800313c:	3301      	adds	r3, #1
 800313e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003146:	e00f      	b.n	8003168 <HAL_I2C_Init+0x1dc>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1e58      	subs	r0, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6859      	ldr	r1, [r3, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	0099      	lsls	r1, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	fbb0 f3f3 	udiv	r3, r0, r3
 800315e:	3301      	adds	r3, #1
 8003160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003164:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	6809      	ldr	r1, [r1, #0]
 800316c:	4313      	orrs	r3, r2
 800316e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69da      	ldr	r2, [r3, #28]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6911      	ldr	r1, [r2, #16]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68d2      	ldr	r2, [r2, #12]
 80031a2:	4311      	orrs	r1, r2
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	430b      	orrs	r3, r1
 80031aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	000186a0 	.word	0x000186a0
 8003204:	001e847f 	.word	0x001e847f
 8003208:	003d08ff 	.word	0x003d08ff
 800320c:	431bde83 	.word	0x431bde83
 8003210:	10624dd3 	.word	0x10624dd3

08003214 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	461a      	mov	r2, r3
 8003222:	4603      	mov	r3, r0
 8003224:	817b      	strh	r3, [r7, #10]
 8003226:	460b      	mov	r3, r1
 8003228:	813b      	strh	r3, [r7, #8]
 800322a:	4613      	mov	r3, r2
 800322c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800322e:	f7ff fbe5 	bl	80029fc <HAL_GetTick>
 8003232:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b20      	cmp	r3, #32
 800323e:	f040 80d9 	bne.w	80033f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	2319      	movs	r3, #25
 8003248:	2201      	movs	r2, #1
 800324a:	496d      	ldr	r1, [pc, #436]	; (8003400 <HAL_I2C_Mem_Write+0x1ec>)
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fc7f 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
 800325a:	e0cc      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_I2C_Mem_Write+0x56>
 8003266:	2302      	movs	r3, #2
 8003268:	e0c5      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b01      	cmp	r3, #1
 800327e:	d007      	beq.n	8003290 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800329e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2221      	movs	r2, #33	; 0x21
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2240      	movs	r2, #64	; 0x40
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a3a      	ldr	r2, [r7, #32]
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a4d      	ldr	r2, [pc, #308]	; (8003404 <HAL_I2C_Mem_Write+0x1f0>)
 80032d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032d2:	88f8      	ldrh	r0, [r7, #6]
 80032d4:	893a      	ldrh	r2, [r7, #8]
 80032d6:	8979      	ldrh	r1, [r7, #10]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	4603      	mov	r3, r0
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 fab6 	bl	8003854 <I2C_RequestMemoryWrite>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d052      	beq.n	8003394 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e081      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fd00 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00d      	beq.n	800331e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	2b04      	cmp	r3, #4
 8003308:	d107      	bne.n	800331a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003318:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e06b      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	781a      	ldrb	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b04      	cmp	r3, #4
 800335a:	d11b      	bne.n	8003394 <HAL_I2C_Mem_Write+0x180>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003360:	2b00      	cmp	r3, #0
 8003362:	d017      	beq.n	8003394 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	781a      	ldrb	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1aa      	bne.n	80032f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 fcec 	bl	8003d7e <I2C_WaitOnBTFFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00d      	beq.n	80033c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d107      	bne.n	80033c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e016      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e000      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80033f4:	2302      	movs	r3, #2
  }
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	00100002 	.word	0x00100002
 8003404:	ffff0000 	.word	0xffff0000

08003408 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08c      	sub	sp, #48	; 0x30
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	4608      	mov	r0, r1
 8003412:	4611      	mov	r1, r2
 8003414:	461a      	mov	r2, r3
 8003416:	4603      	mov	r3, r0
 8003418:	817b      	strh	r3, [r7, #10]
 800341a:	460b      	mov	r3, r1
 800341c:	813b      	strh	r3, [r7, #8]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003422:	f7ff faeb 	bl	80029fc <HAL_GetTick>
 8003426:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b20      	cmp	r3, #32
 8003432:	f040 8208 	bne.w	8003846 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	2319      	movs	r3, #25
 800343c:	2201      	movs	r2, #1
 800343e:	497b      	ldr	r1, [pc, #492]	; (800362c <HAL_I2C_Mem_Read+0x224>)
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 fb85 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800344c:	2302      	movs	r3, #2
 800344e:	e1fb      	b.n	8003848 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_I2C_Mem_Read+0x56>
 800345a:	2302      	movs	r3, #2
 800345c:	e1f4      	b.n	8003848 <HAL_I2C_Mem_Read+0x440>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	d007      	beq.n	8003484 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003492:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2222      	movs	r2, #34	; 0x22
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2240      	movs	r2, #64	; 0x40
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80034b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4a5b      	ldr	r2, [pc, #364]	; (8003630 <HAL_I2C_Mem_Read+0x228>)
 80034c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034c6:	88f8      	ldrh	r0, [r7, #6]
 80034c8:	893a      	ldrh	r2, [r7, #8]
 80034ca:	8979      	ldrh	r1, [r7, #10]
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	4603      	mov	r3, r0
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 fa52 	bl	8003980 <I2C_RequestMemoryRead>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e1b0      	b.n	8003848 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d113      	bne.n	8003516 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ee:	2300      	movs	r3, #0
 80034f0:	623b      	str	r3, [r7, #32]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	623b      	str	r3, [r7, #32]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	623b      	str	r3, [r7, #32]
 8003502:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	e184      	b.n	8003820 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351a:	2b01      	cmp	r3, #1
 800351c:	d11b      	bne.n	8003556 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800352c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	61fb      	str	r3, [r7, #28]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	e164      	b.n	8003820 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355a:	2b02      	cmp	r3, #2
 800355c:	d11b      	bne.n	8003596 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800356c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800357c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357e:	2300      	movs	r3, #0
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	e144      	b.n	8003820 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035ac:	e138      	b.n	8003820 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	f200 80f1 	bhi.w	800379a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d123      	bne.n	8003608 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 fc1b 	bl	8003e00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e139      	b.n	8003848 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003606:	e10b      	b.n	8003820 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360c:	2b02      	cmp	r3, #2
 800360e:	d14e      	bne.n	80036ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	2200      	movs	r2, #0
 8003618:	4906      	ldr	r1, [pc, #24]	; (8003634 <HAL_I2C_Mem_Read+0x22c>)
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fa98 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e10e      	b.n	8003848 <HAL_I2C_Mem_Read+0x440>
 800362a:	bf00      	nop
 800362c:	00100002 	.word	0x00100002
 8003630:	ffff0000 	.word	0xffff0000
 8003634:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003646:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036ac:	e0b8      	b.n	8003820 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b4:	2200      	movs	r2, #0
 80036b6:	4966      	ldr	r1, [pc, #408]	; (8003850 <HAL_I2C_Mem_Read+0x448>)
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fa49 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0bf      	b.n	8003848 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003710:	2200      	movs	r2, #0
 8003712:	494f      	ldr	r1, [pc, #316]	; (8003850 <HAL_I2C_Mem_Read+0x448>)
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 fa1b 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e091      	b.n	8003848 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003732:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003798:	e042      	b.n	8003820 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800379a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fb2e 	bl	8003e00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e04c      	b.n	8003848 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d118      	bne.n	8003820 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003824:	2b00      	cmp	r3, #0
 8003826:	f47f aec2 	bne.w	80035ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	e000      	b.n	8003848 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003846:	2302      	movs	r3, #2
  }
}
 8003848:	4618      	mov	r0, r3
 800384a:	3728      	adds	r7, #40	; 0x28
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	00010004 	.word	0x00010004

08003854 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	4608      	mov	r0, r1
 800385e:	4611      	mov	r1, r2
 8003860:	461a      	mov	r2, r3
 8003862:	4603      	mov	r3, r0
 8003864:	817b      	strh	r3, [r7, #10]
 8003866:	460b      	mov	r3, r1
 8003868:	813b      	strh	r3, [r7, #8]
 800386a:	4613      	mov	r3, r2
 800386c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800387c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	2200      	movs	r2, #0
 8003886:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f960 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a4:	d103      	bne.n	80038ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e05f      	b.n	8003972 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038b2:	897b      	ldrh	r3, [r7, #10]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	461a      	mov	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	6a3a      	ldr	r2, [r7, #32]
 80038c6:	492d      	ldr	r1, [pc, #180]	; (800397c <I2C_RequestMemoryWrite+0x128>)
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f998 	bl	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e04c      	b.n	8003972 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f0:	6a39      	ldr	r1, [r7, #32]
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 fa02 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00d      	beq.n	800391a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	2b04      	cmp	r3, #4
 8003904:	d107      	bne.n	8003916 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003914:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e02b      	b.n	8003972 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d105      	bne.n	800392c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003920:	893b      	ldrh	r3, [r7, #8]
 8003922:	b2da      	uxtb	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	611a      	str	r2, [r3, #16]
 800392a:	e021      	b.n	8003970 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800392c:	893b      	ldrh	r3, [r7, #8]
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	b29b      	uxth	r3, r3
 8003932:	b2da      	uxtb	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800393a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393c:	6a39      	ldr	r1, [r7, #32]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f9dc 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00d      	beq.n	8003966 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	2b04      	cmp	r3, #4
 8003950:	d107      	bne.n	8003962 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003960:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e005      	b.n	8003972 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003966:	893b      	ldrh	r3, [r7, #8]
 8003968:	b2da      	uxtb	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	00010002 	.word	0x00010002

08003980 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af02      	add	r7, sp, #8
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	4608      	mov	r0, r1
 800398a:	4611      	mov	r1, r2
 800398c:	461a      	mov	r2, r3
 800398e:	4603      	mov	r3, r0
 8003990:	817b      	strh	r3, [r7, #10]
 8003992:	460b      	mov	r3, r1
 8003994:	813b      	strh	r3, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f8c2 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e0:	d103      	bne.n	80039ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e0aa      	b.n	8003b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ee:	897b      	ldrh	r3, [r7, #10]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	6a3a      	ldr	r2, [r7, #32]
 8003a02:	4952      	ldr	r1, [pc, #328]	; (8003b4c <I2C_RequestMemoryRead+0x1cc>)
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f8fa 	bl	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e097      	b.n	8003b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2c:	6a39      	ldr	r1, [r7, #32]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f964 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00d      	beq.n	8003a56 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d107      	bne.n	8003a52 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e076      	b.n	8003b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d105      	bne.n	8003a68 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a5c:	893b      	ldrh	r3, [r7, #8]
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	611a      	str	r2, [r3, #16]
 8003a66:	e021      	b.n	8003aac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a68:	893b      	ldrh	r3, [r7, #8]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a78:	6a39      	ldr	r1, [r7, #32]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f93e 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00d      	beq.n	8003aa2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d107      	bne.n	8003a9e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e050      	b.n	8003b44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa2:	893b      	ldrh	r3, [r7, #8]
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aae:	6a39      	ldr	r1, [r7, #32]
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f923 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00d      	beq.n	8003ad8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d107      	bne.n	8003ad4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e035      	b.n	8003b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f82b 	bl	8003b50 <I2C_WaitOnFlagUntilTimeout>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00d      	beq.n	8003b1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b0e:	d103      	bne.n	8003b18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e013      	b.n	8003b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b1c:	897b      	ldrh	r3, [r7, #10]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	6a3a      	ldr	r2, [r7, #32]
 8003b30:	4906      	ldr	r1, [pc, #24]	; (8003b4c <I2C_RequestMemoryRead+0x1cc>)
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f863 	bl	8003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	00010002 	.word	0x00010002

08003b50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b60:	e025      	b.n	8003bae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d021      	beq.n	8003bae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6a:	f7fe ff47 	bl	80029fc <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d302      	bcc.n	8003b80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d116      	bne.n	8003bae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f043 0220 	orr.w	r2, r3, #32
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e023      	b.n	8003bf6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	0c1b      	lsrs	r3, r3, #16
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d10d      	bne.n	8003bd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	bf0c      	ite	eq
 8003bca:	2301      	moveq	r3, #1
 8003bcc:	2300      	movne	r3, #0
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	e00c      	b.n	8003bee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	43da      	mvns	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4013      	ands	r3, r2
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	bf0c      	ite	eq
 8003be6:	2301      	moveq	r3, #1
 8003be8:	2300      	movne	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	461a      	mov	r2, r3
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d0b6      	beq.n	8003b62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	607a      	str	r2, [r7, #4]
 8003c0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c0c:	e051      	b.n	8003cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1c:	d123      	bne.n	8003c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f043 0204 	orr.w	r2, r3, #4
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e046      	b.n	8003cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d021      	beq.n	8003cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6e:	f7fe fec5 	bl	80029fc <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d302      	bcc.n	8003c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d116      	bne.n	8003cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f043 0220 	orr.w	r2, r3, #32
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e020      	b.n	8003cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d10c      	bne.n	8003cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bf14      	ite	ne
 8003cce:	2301      	movne	r3, #1
 8003cd0:	2300      	moveq	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	e00b      	b.n	8003cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	43da      	mvns	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bf14      	ite	ne
 8003ce8:	2301      	movne	r3, #1
 8003cea:	2300      	moveq	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d18d      	bne.n	8003c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d08:	e02d      	b.n	8003d66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 f8ce 	bl	8003eac <I2C_IsAcknowledgeFailed>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e02d      	b.n	8003d76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d021      	beq.n	8003d66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d22:	f7fe fe6b 	bl	80029fc <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d302      	bcc.n	8003d38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d116      	bne.n	8003d66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f043 0220 	orr.w	r2, r3, #32
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e007      	b.n	8003d76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d70:	2b80      	cmp	r3, #128	; 0x80
 8003d72:	d1ca      	bne.n	8003d0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b084      	sub	sp, #16
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d8a:	e02d      	b.n	8003de8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f88d 	bl	8003eac <I2C_IsAcknowledgeFailed>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e02d      	b.n	8003df8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da2:	d021      	beq.n	8003de8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da4:	f7fe fe2a 	bl	80029fc <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d302      	bcc.n	8003dba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d116      	bne.n	8003de8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	f043 0220 	orr.w	r2, r3, #32
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e007      	b.n	8003df8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d1ca      	bne.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e0c:	e042      	b.n	8003e94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b10      	cmp	r3, #16
 8003e1a:	d119      	bne.n	8003e50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f06f 0210 	mvn.w	r2, #16
 8003e24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e029      	b.n	8003ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e50:	f7fe fdd4 	bl	80029fc <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d302      	bcc.n	8003e66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d116      	bne.n	8003e94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	f043 0220 	orr.w	r2, r3, #32
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e007      	b.n	8003ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9e:	2b40      	cmp	r3, #64	; 0x40
 8003ea0:	d1b5      	bne.n	8003e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec2:	d11b      	bne.n	8003efc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ecc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	f043 0204 	orr.w	r2, r3, #4
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f0c:	b08f      	sub	sp, #60	; 0x3c
 8003f0e:	af0a      	add	r7, sp, #40	; 0x28
 8003f10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e10f      	b.n	800413c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f00d ff06 	bl	8011d48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2203      	movs	r2, #3
 8003f40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d102      	bne.n	8003f56 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f003 fcf7 	bl	800794e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	687e      	ldr	r6, [r7, #4]
 8003f68:	466d      	mov	r5, sp
 8003f6a:	f106 0410 	add.w	r4, r6, #16
 8003f6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f7e:	1d33      	adds	r3, r6, #4
 8003f80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f82:	6838      	ldr	r0, [r7, #0]
 8003f84:	f003 fbce 	bl	8007724 <USB_CoreInit>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d005      	beq.n	8003f9a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2202      	movs	r2, #2
 8003f92:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e0d0      	b.n	800413c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f003 fce5 	bl	8007970 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	73fb      	strb	r3, [r7, #15]
 8003faa:	e04a      	b.n	8004042 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fac:	7bfa      	ldrb	r2, [r7, #15]
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	333d      	adds	r3, #61	; 0x3d
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fc0:	7bfa      	ldrb	r2, [r7, #15]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	333c      	adds	r3, #60	; 0x3c
 8003fd0:	7bfa      	ldrb	r2, [r7, #15]
 8003fd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fd4:	7bfa      	ldrb	r2, [r7, #15]
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	b298      	uxth	r0, r3
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	3344      	adds	r3, #68	; 0x44
 8003fe8:	4602      	mov	r2, r0
 8003fea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fec:	7bfa      	ldrb	r2, [r7, #15]
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	3340      	adds	r3, #64	; 0x40
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004000:	7bfa      	ldrb	r2, [r7, #15]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	3348      	adds	r3, #72	; 0x48
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004014:	7bfa      	ldrb	r2, [r7, #15]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	334c      	adds	r3, #76	; 0x4c
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004028:	7bfa      	ldrb	r2, [r7, #15]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	3354      	adds	r3, #84	; 0x54
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	3301      	adds	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
 8004042:	7bfa      	ldrb	r2, [r7, #15]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	429a      	cmp	r2, r3
 800404a:	d3af      	bcc.n	8003fac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800404c:	2300      	movs	r3, #0
 800404e:	73fb      	strb	r3, [r7, #15]
 8004050:	e044      	b.n	80040dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004052:	7bfa      	ldrb	r2, [r7, #15]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004064:	2200      	movs	r2, #0
 8004066:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004068:	7bfa      	ldrb	r2, [r7, #15]
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800407a:	7bfa      	ldrb	r2, [r7, #15]
 800407c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800407e:	7bfa      	ldrb	r2, [r7, #15]
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004094:	7bfa      	ldrb	r2, [r7, #15]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040aa:	7bfa      	ldrb	r2, [r7, #15]
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040c0:	7bfa      	ldrb	r2, [r7, #15]
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	4613      	mov	r3, r2
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
 80040d8:	3301      	adds	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
 80040dc:	7bfa      	ldrb	r2, [r7, #15]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d3b5      	bcc.n	8004052 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	687e      	ldr	r6, [r7, #4]
 80040ee:	466d      	mov	r5, sp
 80040f0:	f106 0410 	add.w	r4, r6, #16
 80040f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004100:	e885 0003 	stmia.w	r5, {r0, r1}
 8004104:	1d33      	adds	r3, r6, #4
 8004106:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004108:	6838      	ldr	r0, [r7, #0]
 800410a:	f003 fc7d 	bl	8007a08 <USB_DevInit>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e00d      	b.n	800413c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f004 fdcc 	bl	8008cd2 <USB_DevDisconnect>

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004144 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_PCD_Start+0x1c>
 800415c:	2302      	movs	r3, #2
 800415e:	e020      	b.n	80041a2 <HAL_PCD_Start+0x5e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416c:	2b01      	cmp	r3, #1
 800416e:	d109      	bne.n	8004184 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004174:	2b01      	cmp	r3, #1
 8004176:	d005      	beq.n	8004184 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f003 fbcf 	bl	800792c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f004 fd7c 	bl	8008c90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80041aa:	b590      	push	{r4, r7, lr}
 80041ac:	b08d      	sub	sp, #52	; 0x34
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f004 fe3a 	bl	8008e3a <USB_GetMode>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f040 848a 	bne.w	8004ae2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f004 fd9e 	bl	8008d14 <USB_ReadInterrupts>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 8480 	beq.w	8004ae0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	0a1b      	lsrs	r3, r3, #8
 80041ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f004 fd8b 	bl	8008d14 <USB_ReadInterrupts>
 80041fe:	4603      	mov	r3, r0
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b02      	cmp	r3, #2
 8004206:	d107      	bne.n	8004218 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f002 0202 	and.w	r2, r2, #2
 8004216:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4618      	mov	r0, r3
 800421e:	f004 fd79 	bl	8008d14 <USB_ReadInterrupts>
 8004222:	4603      	mov	r3, r0
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b10      	cmp	r3, #16
 800422a:	d161      	bne.n	80042f0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699a      	ldr	r2, [r3, #24]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0210 	bic.w	r2, r2, #16
 800423a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	f003 020f 	and.w	r2, r3, #15
 8004248:	4613      	mov	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	4413      	add	r3, r2
 8004258:	3304      	adds	r3, #4
 800425a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	0c5b      	lsrs	r3, r3, #17
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	2b02      	cmp	r3, #2
 8004266:	d124      	bne.n	80042b2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d035      	beq.n	80042e0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	091b      	lsrs	r3, r3, #4
 800427c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800427e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004282:	b29b      	uxth	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	6a38      	ldr	r0, [r7, #32]
 8004288:	f004 fbb0 	bl	80089ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	091b      	lsrs	r3, r3, #4
 8004294:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004298:	441a      	add	r2, r3
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	6a1a      	ldr	r2, [r3, #32]
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042aa:	441a      	add	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	621a      	str	r2, [r3, #32]
 80042b0:	e016      	b.n	80042e0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	0c5b      	lsrs	r3, r3, #17
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	2b06      	cmp	r3, #6
 80042bc:	d110      	bne.n	80042e0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042c4:	2208      	movs	r2, #8
 80042c6:	4619      	mov	r1, r3
 80042c8:	6a38      	ldr	r0, [r7, #32]
 80042ca:	f004 fb8f 	bl	80089ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	6a1a      	ldr	r2, [r3, #32]
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042da:	441a      	add	r2, r3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0210 	orr.w	r2, r2, #16
 80042ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f004 fd0d 	bl	8008d14 <USB_ReadInterrupts>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004300:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004304:	f040 80a7 	bne.w	8004456 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f004 fd12 	bl	8008d3a <USB_ReadDevAllOutEpInterrupt>
 8004316:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004318:	e099      	b.n	800444e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 808e 	beq.w	8004442 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	4611      	mov	r1, r2
 8004330:	4618      	mov	r0, r3
 8004332:	f004 fd36 	bl	8008da2 <USB_ReadDevOutEPInterrupt>
 8004336:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00c      	beq.n	800435c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434e:	461a      	mov	r2, r3
 8004350:	2301      	movs	r3, #1
 8004352:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fec2 	bl	80050e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00c      	beq.n	8004380 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004372:	461a      	mov	r2, r3
 8004374:	2308      	movs	r3, #8
 8004376:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004378:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 ff98 	bl	80052b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f003 0310 	and.w	r3, r3, #16
 8004386:	2b00      	cmp	r3, #0
 8004388:	d008      	beq.n	800439c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	4413      	add	r3, r2
 8004392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004396:	461a      	mov	r2, r3
 8004398:	2310      	movs	r3, #16
 800439a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d030      	beq.n	8004408 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ae:	2b80      	cmp	r3, #128	; 0x80
 80043b0:	d109      	bne.n	80043c6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043c4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80043c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c8:	4613      	mov	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	4413      	add	r3, r2
 80043d8:	3304      	adds	r3, #4
 80043da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	78db      	ldrb	r3, [r3, #3]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d108      	bne.n	80043f6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2200      	movs	r2, #0
 80043e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	4619      	mov	r1, r3
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f00d fda5 	bl	8011f40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004402:	461a      	mov	r2, r3
 8004404:	2302      	movs	r3, #2
 8004406:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	d008      	beq.n	8004424 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441e:	461a      	mov	r2, r3
 8004420:	2320      	movs	r3, #32
 8004422:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d009      	beq.n	8004442 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443a:	461a      	mov	r2, r3
 800443c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004440:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	3301      	adds	r3, #1
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	085b      	lsrs	r3, r3, #1
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	2b00      	cmp	r3, #0
 8004452:	f47f af62 	bne.w	800431a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f004 fc5a 	bl	8008d14 <USB_ReadInterrupts>
 8004460:	4603      	mov	r3, r0
 8004462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004466:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800446a:	f040 80db 	bne.w	8004624 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f004 fc7b 	bl	8008d6e <USB_ReadDevAllInEpInterrupt>
 8004478:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800447e:	e0cd      	b.n	800461c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 80c2 	beq.w	8004610 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	4611      	mov	r1, r2
 8004496:	4618      	mov	r0, r3
 8004498:	f004 fca1 	bl	8008dde <USB_ReadDevInEPInterrupt>
 800449c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d057      	beq.n	8004558 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	2201      	movs	r2, #1
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69f9      	ldr	r1, [r7, #28]
 80044c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044c8:	4013      	ands	r3, r2
 80044ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d8:	461a      	mov	r2, r3
 80044da:	2301      	movs	r3, #1
 80044dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d132      	bne.n	800454c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ea:	4613      	mov	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	334c      	adds	r3, #76	; 0x4c
 80044f6:	6819      	ldr	r1, [r3, #0]
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fc:	4613      	mov	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4403      	add	r3, r0
 8004506:	3348      	adds	r3, #72	; 0x48
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4419      	add	r1, r3
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004510:	4613      	mov	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4403      	add	r3, r0
 800451a:	334c      	adds	r3, #76	; 0x4c
 800451c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	2b00      	cmp	r3, #0
 8004522:	d113      	bne.n	800454c <HAL_PCD_IRQHandler+0x3a2>
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004528:	4613      	mov	r3, r2
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	3354      	adds	r3, #84	; 0x54
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d108      	bne.n	800454c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004544:	461a      	mov	r2, r3
 8004546:	2101      	movs	r1, #1
 8004548:	f004 fca8 	bl	8008e9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	b2db      	uxtb	r3, r3
 8004550:	4619      	mov	r1, r3
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f00d fc79 	bl	8011e4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456e:	461a      	mov	r2, r3
 8004570:	2308      	movs	r3, #8
 8004572:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	2b00      	cmp	r3, #0
 800457c:	d008      	beq.n	8004590 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458a:	461a      	mov	r2, r3
 800458c:	2310      	movs	r3, #16
 800458e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d008      	beq.n	80045ac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a6:	461a      	mov	r2, r3
 80045a8:	2340      	movs	r3, #64	; 0x40
 80045aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d023      	beq.n	80045fe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80045b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045b8:	6a38      	ldr	r0, [r7, #32]
 80045ba:	f003 fb89 	bl	8007cd0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80045be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c0:	4613      	mov	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	3338      	adds	r3, #56	; 0x38
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	4413      	add	r3, r2
 80045ce:	3304      	adds	r3, #4
 80045d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	78db      	ldrb	r3, [r3, #3]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d108      	bne.n	80045ec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2200      	movs	r2, #0
 80045de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f00d fcbc 	bl	8011f64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f8:	461a      	mov	r2, r3
 80045fa:	2302      	movs	r3, #2
 80045fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004608:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fcdb 	bl	8004fc6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	3301      	adds	r3, #1
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	2b00      	cmp	r3, #0
 8004620:	f47f af2e 	bne.w	8004480 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f004 fb73 	bl	8008d14 <USB_ReadInterrupts>
 800462e:	4603      	mov	r3, r0
 8004630:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004634:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004638:	d122      	bne.n	8004680 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	69fa      	ldr	r2, [r7, #28]
 8004644:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004648:	f023 0301 	bic.w	r3, r3, #1
 800464c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004654:	2b01      	cmp	r3, #1
 8004656:	d108      	bne.n	800466a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004660:	2100      	movs	r1, #0
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fec2 	bl	80053ec <HAL_PCDEx_LPM_Callback>
 8004668:	e002      	b.n	8004670 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f00d fc5a 	bl	8011f24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695a      	ldr	r2, [r3, #20]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800467e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f004 fb45 	bl	8008d14 <USB_ReadInterrupts>
 800468a:	4603      	mov	r3, r0
 800468c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004694:	d112      	bne.n	80046bc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d102      	bne.n	80046ac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f00d fc16 	bl	8011ed8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80046ba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f004 fb27 	bl	8008d14 <USB_ReadInterrupts>
 80046c6:	4603      	mov	r3, r0
 80046c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d0:	f040 80b7 	bne.w	8004842 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	69fa      	ldr	r2, [r7, #28]
 80046de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2110      	movs	r1, #16
 80046ee:	4618      	mov	r0, r3
 80046f0:	f003 faee 	bl	8007cd0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046f4:	2300      	movs	r3, #0
 80046f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f8:	e046      	b.n	8004788 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80046fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004706:	461a      	mov	r2, r3
 8004708:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800470c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800470e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800471e:	0151      	lsls	r1, r2, #5
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	440a      	add	r2, r1
 8004724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004728:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800472c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800472e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473a:	461a      	mov	r2, r3
 800473c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004740:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004752:	0151      	lsls	r1, r2, #5
 8004754:	69fa      	ldr	r2, [r7, #28]
 8004756:	440a      	add	r2, r1
 8004758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800475c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004760:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004772:	0151      	lsls	r1, r2, #5
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	440a      	add	r2, r1
 8004778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800477c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004780:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004784:	3301      	adds	r3, #1
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800478e:	429a      	cmp	r2, r3
 8004790:	d3b3      	bcc.n	80046fa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80047a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d016      	beq.n	80047dc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047be:	f043 030b 	orr.w	r3, r3, #11
 80047c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047d4:	f043 030b 	orr.w	r3, r3, #11
 80047d8:	6453      	str	r3, [r2, #68]	; 0x44
 80047da:	e015      	b.n	8004808 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047ee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80047f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004802:	f043 030b 	orr.w	r3, r3, #11
 8004806:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004816:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800481a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800482c:	461a      	mov	r2, r3
 800482e:	f004 fb35 	bl	8008e9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695a      	ldr	r2, [r3, #20]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004840:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f004 fa64 	bl	8008d14 <USB_ReadInterrupts>
 800484c:	4603      	mov	r3, r0
 800484e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004856:	d124      	bne.n	80048a2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f004 fafa 	bl	8008e56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f003 faaf 	bl	8007dca <USB_GetDevSpeed>
 800486c:	4603      	mov	r3, r0
 800486e:	461a      	mov	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681c      	ldr	r4, [r3, #0]
 8004878:	f001 fa26 	bl	8005cc8 <HAL_RCC_GetHCLKFreq>
 800487c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004882:	b2db      	uxtb	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	4620      	mov	r0, r4
 8004888:	f002 ffae 	bl	80077e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f00d fb04 	bl	8011e9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80048a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f004 fa34 	bl	8008d14 <USB_ReadInterrupts>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d10a      	bne.n	80048cc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f00d fae1 	bl	8011e7e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695a      	ldr	r2, [r3, #20]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f002 0208 	and.w	r2, r2, #8
 80048ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f004 fa1f 	bl	8008d14 <USB_ReadInterrupts>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048dc:	2b80      	cmp	r3, #128	; 0x80
 80048de:	d122      	bne.n	8004926 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048ec:	2301      	movs	r3, #1
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
 80048f0:	e014      	b.n	800491c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f6:	4613      	mov	r3, r2
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	4413      	add	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d105      	bne.n	8004916 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	b2db      	uxtb	r3, r3
 800490e:	4619      	mov	r1, r3
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fb27 	bl	8004f64 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	3301      	adds	r3, #1
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004922:	429a      	cmp	r2, r3
 8004924:	d3e5      	bcc.n	80048f2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f004 f9f2 	bl	8008d14 <USB_ReadInterrupts>
 8004930:	4603      	mov	r3, r0
 8004932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800493a:	d13b      	bne.n	80049b4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800493c:	2301      	movs	r3, #1
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
 8004940:	e02b      	b.n	800499a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004956:	4613      	mov	r3, r2
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	4413      	add	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	440b      	add	r3, r1
 8004960:	3340      	adds	r3, #64	; 0x40
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d115      	bne.n	8004994 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004968:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800496a:	2b00      	cmp	r3, #0
 800496c:	da12      	bge.n	8004994 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004972:	4613      	mov	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	333f      	adds	r3, #63	; 0x3f
 800497e:	2201      	movs	r2, #1
 8004980:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	b2db      	uxtb	r3, r3
 8004986:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800498a:	b2db      	uxtb	r3, r3
 800498c:	4619      	mov	r1, r3
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fae8 	bl	8004f64 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	3301      	adds	r3, #1
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d3ce      	bcc.n	8004942 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695a      	ldr	r2, [r3, #20]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80049b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f004 f9ab 	bl	8008d14 <USB_ReadInterrupts>
 80049be:	4603      	mov	r3, r0
 80049c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049c8:	d155      	bne.n	8004a76 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049ca:	2301      	movs	r3, #1
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
 80049ce:	e045      	b.n	8004a5c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e4:	4613      	mov	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d12e      	bne.n	8004a56 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	da2b      	bge.n	8004a56 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004a0a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d121      	bne.n	8004a56 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	4613      	mov	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004a24:	2201      	movs	r2, #1
 8004a26:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a52:	6053      	str	r3, [r2, #4]
            break;
 8004a54:	e007      	b.n	8004a66 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	3301      	adds	r3, #1
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d3b4      	bcc.n	80049d0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695a      	ldr	r2, [r3, #20]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f004 f94a 	bl	8008d14 <USB_ReadInterrupts>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8a:	d10a      	bne.n	8004aa2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f00d fa7b 	bl	8011f88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695a      	ldr	r2, [r3, #20]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f004 f934 	bl	8008d14 <USB_ReadInterrupts>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d115      	bne.n	8004ae2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f00d fa6b 	bl	8011fa4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6859      	ldr	r1, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
 8004ade:	e000      	b.n	8004ae2 <HAL_PCD_IRQHandler+0x938>
      return;
 8004ae0:	bf00      	nop
    }
  }
}
 8004ae2:	3734      	adds	r7, #52	; 0x34
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd90      	pop	{r4, r7, pc}

08004ae8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_PCD_SetAddress+0x1a>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e013      	b.n	8004b2a <HAL_PCD_SetAddress+0x42>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	78fa      	ldrb	r2, [r7, #3]
 8004b18:	4611      	mov	r1, r2
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f004 f892 	bl	8008c44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	4608      	mov	r0, r1
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	461a      	mov	r2, r3
 8004b40:	4603      	mov	r3, r0
 8004b42:	70fb      	strb	r3, [r7, #3]
 8004b44:	460b      	mov	r3, r1
 8004b46:	803b      	strh	r3, [r7, #0]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	da0f      	bge.n	8004b78 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	f003 020f 	and.w	r2, r3, #15
 8004b5e:	4613      	mov	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	3338      	adds	r3, #56	; 0x38
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2201      	movs	r2, #1
 8004b74:	705a      	strb	r2, [r3, #1]
 8004b76:	e00f      	b.n	8004b98 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	f003 020f 	and.w	r2, r3, #15
 8004b7e:	4613      	mov	r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	4413      	add	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3304      	adds	r3, #4
 8004b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004ba4:	883a      	ldrh	r2, [r7, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	78ba      	ldrb	r2, [r7, #2]
 8004bae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	785b      	ldrb	r3, [r3, #1]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d004      	beq.n	8004bc2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004bc2:	78bb      	ldrb	r3, [r7, #2]
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d102      	bne.n	8004bce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_PCD_EP_Open+0xaa>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e00e      	b.n	8004bfa <HAL_PCD_EP_Open+0xc8>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68f9      	ldr	r1, [r7, #12]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f003 f912 	bl	8007e14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004bf8:	7afb      	ldrb	r3, [r7, #11]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	da0f      	bge.n	8004c36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	f003 020f 	and.w	r2, r3, #15
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	3338      	adds	r3, #56	; 0x38
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	4413      	add	r3, r2
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	705a      	strb	r2, [r3, #1]
 8004c34:	e00f      	b.n	8004c56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c36:	78fb      	ldrb	r3, [r7, #3]
 8004c38:	f003 020f 	and.w	r2, r3, #15
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	4413      	add	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004c56:	78fb      	ldrb	r3, [r7, #3]
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_PCD_EP_Close+0x6e>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e00e      	b.n	8004c8e <HAL_PCD_EP_Close+0x8c>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68f9      	ldr	r1, [r7, #12]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f003 f950 	bl	8007f24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b086      	sub	sp, #24
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ca6:	7afb      	ldrb	r3, [r7, #11]
 8004ca8:	f003 020f 	and.w	r2, r3, #15
 8004cac:	4613      	mov	r3, r2
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4413      	add	r3, r2
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cd8:	7afb      	ldrb	r3, [r7, #11]
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d102      	bne.n	8004cf2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cf2:	7afb      	ldrb	r3, [r7, #11]
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d109      	bne.n	8004d10 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	461a      	mov	r2, r3
 8004d08:	6979      	ldr	r1, [r7, #20]
 8004d0a:	f003 fc2f 	bl	800856c <USB_EP0StartXfer>
 8004d0e:	e008      	b.n	8004d22 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	6979      	ldr	r1, [r7, #20]
 8004d1e:	f003 f9dd 	bl	80080dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	f003 020f 	and.w	r2, r3, #15
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	4613      	mov	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004d4e:	681b      	ldr	r3, [r3, #0]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	607a      	str	r2, [r7, #4]
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d6c:	7afb      	ldrb	r3, [r7, #11]
 8004d6e:	f003 020f 	and.w	r2, r3, #15
 8004d72:	4613      	mov	r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	3338      	adds	r3, #56	; 0x38
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	3304      	adds	r3, #4
 8004d82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2200      	movs	r2, #0
 8004d94:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d9c:	7afb      	ldrb	r3, [r7, #11]
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d102      	bne.n	8004db6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004db6:	7afb      	ldrb	r3, [r7, #11]
 8004db8:	f003 030f 	and.w	r3, r3, #15
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d109      	bne.n	8004dd4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6818      	ldr	r0, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	6979      	ldr	r1, [r7, #20]
 8004dce:	f003 fbcd 	bl	800856c <USB_EP0StartXfer>
 8004dd2:	e008      	b.n	8004de6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	461a      	mov	r2, r3
 8004de0:	6979      	ldr	r1, [r7, #20]
 8004de2:	f003 f97b 	bl	80080dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	f003 020f 	and.w	r2, r3, #15
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d901      	bls.n	8004e0e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e050      	b.n	8004eb0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	da0f      	bge.n	8004e36 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	f003 020f 	and.w	r2, r3, #15
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	3338      	adds	r3, #56	; 0x38
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	4413      	add	r3, r2
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2201      	movs	r2, #1
 8004e32:	705a      	strb	r2, [r3, #1]
 8004e34:	e00d      	b.n	8004e52 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e36:	78fa      	ldrb	r2, [r7, #3]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	4413      	add	r3, r2
 8004e48:	3304      	adds	r3, #4
 8004e4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2201      	movs	r2, #1
 8004e56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_PCD_EP_SetStall+0x82>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e01e      	b.n	8004eb0 <HAL_PCD_EP_SetStall+0xc0>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68f9      	ldr	r1, [r7, #12]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f003 fe0b 	bl	8008a9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	b2d9      	uxtb	r1, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	f003 fffb 	bl	8008e9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ec4:	78fb      	ldrb	r3, [r7, #3]
 8004ec6:	f003 020f 	and.w	r2, r3, #15
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d901      	bls.n	8004ed6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e042      	b.n	8004f5c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ed6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	da0f      	bge.n	8004efe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ede:	78fb      	ldrb	r3, [r7, #3]
 8004ee0:	f003 020f 	and.w	r2, r3, #15
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	4413      	add	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	3338      	adds	r3, #56	; 0x38
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	705a      	strb	r2, [r3, #1]
 8004efc:	e00f      	b.n	8004f1e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	f003 020f 	and.w	r2, r3, #15
 8004f04:	4613      	mov	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	4413      	add	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	4413      	add	r3, r2
 8004f14:	3304      	adds	r3, #4
 8004f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <HAL_PCD_EP_ClrStall+0x86>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	e00e      	b.n	8004f5c <HAL_PCD_EP_ClrStall+0xa4>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68f9      	ldr	r1, [r7, #12]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f003 fe13 	bl	8008b78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	da0c      	bge.n	8004f92 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f78:	78fb      	ldrb	r3, [r7, #3]
 8004f7a:	f003 020f 	and.w	r2, r3, #15
 8004f7e:	4613      	mov	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	3338      	adds	r3, #56	; 0x38
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	e00c      	b.n	8004fac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f92:	78fb      	ldrb	r3, [r7, #3]
 8004f94:	f003 020f 	and.w	r2, r3, #15
 8004f98:	4613      	mov	r3, r2
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	3304      	adds	r3, #4
 8004faa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68f9      	ldr	r1, [r7, #12]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f003 fc32 	bl	800881c <USB_EPStopXfer>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004fbc:	7afb      	ldrb	r3, [r7, #11]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b08a      	sub	sp, #40	; 0x28
 8004fca:	af02      	add	r7, sp, #8
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	3338      	adds	r3, #56	; 0x38
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	4413      	add	r3, r2
 8004fea:	3304      	adds	r3, #4
 8004fec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1a      	ldr	r2, [r3, #32]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d901      	bls.n	8004ffe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e06c      	b.n	80050d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	699a      	ldr	r2, [r3, #24]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	69fa      	ldr	r2, [r7, #28]
 8005010:	429a      	cmp	r2, r3
 8005012:	d902      	bls.n	800501a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	3303      	adds	r3, #3
 800501e:	089b      	lsrs	r3, r3, #2
 8005020:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005022:	e02b      	b.n	800507c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	699a      	ldr	r2, [r3, #24]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	69fa      	ldr	r2, [r7, #28]
 8005036:	429a      	cmp	r2, r3
 8005038:	d902      	bls.n	8005040 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	3303      	adds	r3, #3
 8005044:	089b      	lsrs	r3, r3, #2
 8005046:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6919      	ldr	r1, [r3, #16]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	b2da      	uxtb	r2, r3
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005058:	b2db      	uxtb	r3, r3
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	4603      	mov	r3, r0
 800505e:	6978      	ldr	r0, [r7, #20]
 8005060:	f003 fc86 	bl	8008970 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	441a      	add	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6a1a      	ldr	r2, [r3, #32]
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	441a      	add	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	b29b      	uxth	r3, r3
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	429a      	cmp	r2, r3
 8005090:	d809      	bhi.n	80050a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a1a      	ldr	r2, [r3, #32]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800509a:	429a      	cmp	r2, r3
 800509c:	d203      	bcs.n	80050a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1be      	bne.n	8005024 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	699a      	ldr	r2, [r3, #24]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d811      	bhi.n	80050d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	2201      	movs	r2, #1
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	43db      	mvns	r3, r3
 80050cc:	6939      	ldr	r1, [r7, #16]
 80050ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050d2:	4013      	ands	r3, r2
 80050d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3720      	adds	r7, #32
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	333c      	adds	r3, #60	; 0x3c
 80050f8:	3304      	adds	r3, #4
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d17b      	bne.n	800520e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b00      	cmp	r3, #0
 800511e:	d015      	beq.n	800514c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	4a61      	ldr	r2, [pc, #388]	; (80052a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	f240 80b9 	bls.w	800529c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80b3 	beq.w	800529c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005142:	461a      	mov	r2, r3
 8005144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005148:	6093      	str	r3, [r2, #8]
 800514a:	e0a7      	b.n	800529c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d009      	beq.n	800516a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005162:	461a      	mov	r2, r3
 8005164:	2320      	movs	r3, #32
 8005166:	6093      	str	r3, [r2, #8]
 8005168:	e098      	b.n	800529c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005170:	2b00      	cmp	r3, #0
 8005172:	f040 8093 	bne.w	800529c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	4a4b      	ldr	r2, [pc, #300]	; (80052a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d90f      	bls.n	800519e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005194:	461a      	mov	r2, r3
 8005196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800519a:	6093      	str	r3, [r2, #8]
 800519c:	e07e      	b.n	800529c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	4613      	mov	r3, r2
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	4413      	add	r3, r2
 80051b0:	3304      	adds	r3, #4
 80051b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	69da      	ldr	r2, [r3, #28]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	0159      	lsls	r1, r3, #5
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	440b      	add	r3, r1
 80051c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ca:	1ad2      	subs	r2, r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d114      	bne.n	8005200 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80051e8:	461a      	mov	r2, r3
 80051ea:	2101      	movs	r1, #1
 80051ec:	f003 fe56 	bl	8008e9c <USB_EP0_OutStart>
 80051f0:	e006      	b.n	8005200 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	441a      	add	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	4619      	mov	r1, r3
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f00c fe04 	bl	8011e14 <HAL_PCD_DataOutStageCallback>
 800520c:	e046      	b.n	800529c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	4a26      	ldr	r2, [pc, #152]	; (80052ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d124      	bne.n	8005260 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522c:	461a      	mov	r2, r3
 800522e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005232:	6093      	str	r3, [r2, #8]
 8005234:	e032      	b.n	800529c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524c:	461a      	mov	r2, r3
 800524e:	2320      	movs	r3, #32
 8005250:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	4619      	mov	r1, r3
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f00c fddb 	bl	8011e14 <HAL_PCD_DataOutStageCallback>
 800525e:	e01d      	b.n	800529c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d114      	bne.n	8005290 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	4613      	mov	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d108      	bne.n	8005290 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005288:	461a      	mov	r2, r3
 800528a:	2100      	movs	r1, #0
 800528c:	f003 fe06 	bl	8008e9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	b2db      	uxtb	r3, r3
 8005294:	4619      	mov	r1, r3
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f00c fdbc 	bl	8011e14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3720      	adds	r7, #32
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	4f54300a 	.word	0x4f54300a
 80052ac:	4f54310a 	.word	0x4f54310a

080052b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	333c      	adds	r3, #60	; 0x3c
 80052c8:	3304      	adds	r3, #4
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4a15      	ldr	r2, [pc, #84]	; (8005338 <PCD_EP_OutSetupPacket_int+0x88>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d90e      	bls.n	8005304 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d009      	beq.n	8005304 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fc:	461a      	mov	r2, r3
 80052fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005302:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f00c fd73 	bl	8011df0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4a0a      	ldr	r2, [pc, #40]	; (8005338 <PCD_EP_OutSetupPacket_int+0x88>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d90c      	bls.n	800532c <PCD_EP_OutSetupPacket_int+0x7c>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d108      	bne.n	800532c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005324:	461a      	mov	r2, r3
 8005326:	2101      	movs	r1, #1
 8005328:	f003 fdb8 	bl	8008e9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	4f54300a 	.word	0x4f54300a

0800533c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	70fb      	strb	r3, [r7, #3]
 8005348:	4613      	mov	r3, r2
 800534a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d107      	bne.n	800536a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800535a:	883b      	ldrh	r3, [r7, #0]
 800535c:	0419      	lsls	r1, r3, #16
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	430a      	orrs	r2, r1
 8005366:	629a      	str	r2, [r3, #40]	; 0x28
 8005368:	e028      	b.n	80053bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005370:	0c1b      	lsrs	r3, r3, #16
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	4413      	add	r3, r2
 8005376:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005378:	2300      	movs	r3, #0
 800537a:	73fb      	strb	r3, [r7, #15]
 800537c:	e00d      	b.n	800539a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	3340      	adds	r3, #64	; 0x40
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	0c1b      	lsrs	r3, r3, #16
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	4413      	add	r3, r2
 8005392:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005394:	7bfb      	ldrb	r3, [r7, #15]
 8005396:	3301      	adds	r3, #1
 8005398:	73fb      	strb	r3, [r7, #15]
 800539a:	7bfa      	ldrb	r2, [r7, #15]
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	3b01      	subs	r3, #1
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d3ec      	bcc.n	800537e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80053a4:	883b      	ldrh	r3, [r7, #0]
 80053a6:	0418      	lsls	r0, r3, #16
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6819      	ldr	r1, [r3, #0]
 80053ac:	78fb      	ldrb	r3, [r7, #3]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	4302      	orrs	r2, r0
 80053b4:	3340      	adds	r3, #64	; 0x40
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	440b      	add	r3, r1
 80053ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	460b      	mov	r3, r1
 80053d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	887a      	ldrh	r2, [r7, #2]
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e267      	b.n	80058e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d075      	beq.n	800550e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005422:	4b88      	ldr	r3, [pc, #544]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 030c 	and.w	r3, r3, #12
 800542a:	2b04      	cmp	r3, #4
 800542c:	d00c      	beq.n	8005448 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800542e:	4b85      	ldr	r3, [pc, #532]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005436:	2b08      	cmp	r3, #8
 8005438:	d112      	bne.n	8005460 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800543a:	4b82      	ldr	r3, [pc, #520]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005446:	d10b      	bne.n	8005460 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005448:	4b7e      	ldr	r3, [pc, #504]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d05b      	beq.n	800550c <HAL_RCC_OscConfig+0x108>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d157      	bne.n	800550c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e242      	b.n	80058e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005468:	d106      	bne.n	8005478 <HAL_RCC_OscConfig+0x74>
 800546a:	4b76      	ldr	r3, [pc, #472]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a75      	ldr	r2, [pc, #468]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 8005470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	e01d      	b.n	80054b4 <HAL_RCC_OscConfig+0xb0>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005480:	d10c      	bne.n	800549c <HAL_RCC_OscConfig+0x98>
 8005482:	4b70      	ldr	r3, [pc, #448]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a6f      	ldr	r2, [pc, #444]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 8005488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	4b6d      	ldr	r3, [pc, #436]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a6c      	ldr	r2, [pc, #432]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 8005494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	e00b      	b.n	80054b4 <HAL_RCC_OscConfig+0xb0>
 800549c:	4b69      	ldr	r3, [pc, #420]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a68      	ldr	r2, [pc, #416]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 80054a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	4b66      	ldr	r3, [pc, #408]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a65      	ldr	r2, [pc, #404]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 80054ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d013      	beq.n	80054e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054bc:	f7fd fa9e 	bl	80029fc <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054c4:	f7fd fa9a 	bl	80029fc <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b64      	cmp	r3, #100	; 0x64
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e207      	b.n	80058e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054d6:	4b5b      	ldr	r3, [pc, #364]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0f0      	beq.n	80054c4 <HAL_RCC_OscConfig+0xc0>
 80054e2:	e014      	b.n	800550e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e4:	f7fd fa8a 	bl	80029fc <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054ec:	f7fd fa86 	bl	80029fc <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b64      	cmp	r3, #100	; 0x64
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e1f3      	b.n	80058e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054fe:	4b51      	ldr	r3, [pc, #324]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1f0      	bne.n	80054ec <HAL_RCC_OscConfig+0xe8>
 800550a:	e000      	b.n	800550e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800550c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d063      	beq.n	80055e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800551a:	4b4a      	ldr	r3, [pc, #296]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f003 030c 	and.w	r3, r3, #12
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00b      	beq.n	800553e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005526:	4b47      	ldr	r3, [pc, #284]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800552e:	2b08      	cmp	r3, #8
 8005530:	d11c      	bne.n	800556c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005532:	4b44      	ldr	r3, [pc, #272]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d116      	bne.n	800556c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800553e:	4b41      	ldr	r3, [pc, #260]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d005      	beq.n	8005556 <HAL_RCC_OscConfig+0x152>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d001      	beq.n	8005556 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e1c7      	b.n	80058e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005556:	4b3b      	ldr	r3, [pc, #236]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	4937      	ldr	r1, [pc, #220]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 8005566:	4313      	orrs	r3, r2
 8005568:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800556a:	e03a      	b.n	80055e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d020      	beq.n	80055b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005574:	4b34      	ldr	r3, [pc, #208]	; (8005648 <HAL_RCC_OscConfig+0x244>)
 8005576:	2201      	movs	r2, #1
 8005578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557a:	f7fd fa3f 	bl	80029fc <HAL_GetTick>
 800557e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005582:	f7fd fa3b 	bl	80029fc <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e1a8      	b.n	80058e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005594:	4b2b      	ldr	r3, [pc, #172]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0f0      	beq.n	8005582 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055a0:	4b28      	ldr	r3, [pc, #160]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	4925      	ldr	r1, [pc, #148]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	600b      	str	r3, [r1, #0]
 80055b4:	e015      	b.n	80055e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055b6:	4b24      	ldr	r3, [pc, #144]	; (8005648 <HAL_RCC_OscConfig+0x244>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055bc:	f7fd fa1e 	bl	80029fc <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055c4:	f7fd fa1a 	bl	80029fc <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e187      	b.n	80058e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055d6:	4b1b      	ldr	r3, [pc, #108]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d036      	beq.n	800565c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d016      	beq.n	8005624 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055f6:	4b15      	ldr	r3, [pc, #84]	; (800564c <HAL_RCC_OscConfig+0x248>)
 80055f8:	2201      	movs	r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fc:	f7fd f9fe 	bl	80029fc <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005604:	f7fd f9fa 	bl	80029fc <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e167      	b.n	80058e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005616:	4b0b      	ldr	r3, [pc, #44]	; (8005644 <HAL_RCC_OscConfig+0x240>)
 8005618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0f0      	beq.n	8005604 <HAL_RCC_OscConfig+0x200>
 8005622:	e01b      	b.n	800565c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005624:	4b09      	ldr	r3, [pc, #36]	; (800564c <HAL_RCC_OscConfig+0x248>)
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800562a:	f7fd f9e7 	bl	80029fc <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005630:	e00e      	b.n	8005650 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005632:	f7fd f9e3 	bl	80029fc <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d907      	bls.n	8005650 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e150      	b.n	80058e6 <HAL_RCC_OscConfig+0x4e2>
 8005644:	40023800 	.word	0x40023800
 8005648:	42470000 	.word	0x42470000
 800564c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005650:	4b88      	ldr	r3, [pc, #544]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 8005652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1ea      	bne.n	8005632 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 8097 	beq.w	8005798 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800566a:	2300      	movs	r3, #0
 800566c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800566e:	4b81      	ldr	r3, [pc, #516]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10f      	bne.n	800569a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800567a:	2300      	movs	r3, #0
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	4b7d      	ldr	r3, [pc, #500]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	4a7c      	ldr	r2, [pc, #496]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 8005684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005688:	6413      	str	r3, [r2, #64]	; 0x40
 800568a:	4b7a      	ldr	r3, [pc, #488]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005692:	60bb      	str	r3, [r7, #8]
 8005694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005696:	2301      	movs	r3, #1
 8005698:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569a:	4b77      	ldr	r3, [pc, #476]	; (8005878 <HAL_RCC_OscConfig+0x474>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d118      	bne.n	80056d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056a6:	4b74      	ldr	r3, [pc, #464]	; (8005878 <HAL_RCC_OscConfig+0x474>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a73      	ldr	r2, [pc, #460]	; (8005878 <HAL_RCC_OscConfig+0x474>)
 80056ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056b2:	f7fd f9a3 	bl	80029fc <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ba:	f7fd f99f 	bl	80029fc <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e10c      	b.n	80058e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056cc:	4b6a      	ldr	r3, [pc, #424]	; (8005878 <HAL_RCC_OscConfig+0x474>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0f0      	beq.n	80056ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d106      	bne.n	80056ee <HAL_RCC_OscConfig+0x2ea>
 80056e0:	4b64      	ldr	r3, [pc, #400]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 80056e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e4:	4a63      	ldr	r2, [pc, #396]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 80056e6:	f043 0301 	orr.w	r3, r3, #1
 80056ea:	6713      	str	r3, [r2, #112]	; 0x70
 80056ec:	e01c      	b.n	8005728 <HAL_RCC_OscConfig+0x324>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	2b05      	cmp	r3, #5
 80056f4:	d10c      	bne.n	8005710 <HAL_RCC_OscConfig+0x30c>
 80056f6:	4b5f      	ldr	r3, [pc, #380]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 80056f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fa:	4a5e      	ldr	r2, [pc, #376]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 80056fc:	f043 0304 	orr.w	r3, r3, #4
 8005700:	6713      	str	r3, [r2, #112]	; 0x70
 8005702:	4b5c      	ldr	r3, [pc, #368]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 8005704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005706:	4a5b      	ldr	r2, [pc, #364]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 8005708:	f043 0301 	orr.w	r3, r3, #1
 800570c:	6713      	str	r3, [r2, #112]	; 0x70
 800570e:	e00b      	b.n	8005728 <HAL_RCC_OscConfig+0x324>
 8005710:	4b58      	ldr	r3, [pc, #352]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 8005712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005714:	4a57      	ldr	r2, [pc, #348]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 8005716:	f023 0301 	bic.w	r3, r3, #1
 800571a:	6713      	str	r3, [r2, #112]	; 0x70
 800571c:	4b55      	ldr	r3, [pc, #340]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 800571e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005720:	4a54      	ldr	r2, [pc, #336]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 8005722:	f023 0304 	bic.w	r3, r3, #4
 8005726:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d015      	beq.n	800575c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005730:	f7fd f964 	bl	80029fc <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005736:	e00a      	b.n	800574e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005738:	f7fd f960 	bl	80029fc <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	f241 3288 	movw	r2, #5000	; 0x1388
 8005746:	4293      	cmp	r3, r2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e0cb      	b.n	80058e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800574e:	4b49      	ldr	r3, [pc, #292]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 8005750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0ee      	beq.n	8005738 <HAL_RCC_OscConfig+0x334>
 800575a:	e014      	b.n	8005786 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800575c:	f7fd f94e 	bl	80029fc <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005762:	e00a      	b.n	800577a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005764:	f7fd f94a 	bl	80029fc <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005772:	4293      	cmp	r3, r2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e0b5      	b.n	80058e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800577a:	4b3e      	ldr	r3, [pc, #248]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1ee      	bne.n	8005764 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005786:	7dfb      	ldrb	r3, [r7, #23]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d105      	bne.n	8005798 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800578c:	4b39      	ldr	r3, [pc, #228]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 800578e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005790:	4a38      	ldr	r2, [pc, #224]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 8005792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005796:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 80a1 	beq.w	80058e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057a2:	4b34      	ldr	r3, [pc, #208]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 030c 	and.w	r3, r3, #12
 80057aa:	2b08      	cmp	r3, #8
 80057ac:	d05c      	beq.n	8005868 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d141      	bne.n	800583a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b6:	4b31      	ldr	r3, [pc, #196]	; (800587c <HAL_RCC_OscConfig+0x478>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057bc:	f7fd f91e 	bl	80029fc <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057c4:	f7fd f91a 	bl	80029fc <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e087      	b.n	80058e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d6:	4b27      	ldr	r3, [pc, #156]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f0      	bne.n	80057c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69da      	ldr	r2, [r3, #28]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	019b      	lsls	r3, r3, #6
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f8:	085b      	lsrs	r3, r3, #1
 80057fa:	3b01      	subs	r3, #1
 80057fc:	041b      	lsls	r3, r3, #16
 80057fe:	431a      	orrs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	061b      	lsls	r3, r3, #24
 8005806:	491b      	ldr	r1, [pc, #108]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 8005808:	4313      	orrs	r3, r2
 800580a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800580c:	4b1b      	ldr	r3, [pc, #108]	; (800587c <HAL_RCC_OscConfig+0x478>)
 800580e:	2201      	movs	r2, #1
 8005810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005812:	f7fd f8f3 	bl	80029fc <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800581a:	f7fd f8ef 	bl	80029fc <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e05c      	b.n	80058e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800582c:	4b11      	ldr	r3, [pc, #68]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0f0      	beq.n	800581a <HAL_RCC_OscConfig+0x416>
 8005838:	e054      	b.n	80058e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800583a:	4b10      	ldr	r3, [pc, #64]	; (800587c <HAL_RCC_OscConfig+0x478>)
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005840:	f7fd f8dc 	bl	80029fc <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005848:	f7fd f8d8 	bl	80029fc <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e045      	b.n	80058e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800585a:	4b06      	ldr	r3, [pc, #24]	; (8005874 <HAL_RCC_OscConfig+0x470>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1f0      	bne.n	8005848 <HAL_RCC_OscConfig+0x444>
 8005866:	e03d      	b.n	80058e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d107      	bne.n	8005880 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e038      	b.n	80058e6 <HAL_RCC_OscConfig+0x4e2>
 8005874:	40023800 	.word	0x40023800
 8005878:	40007000 	.word	0x40007000
 800587c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005880:	4b1b      	ldr	r3, [pc, #108]	; (80058f0 <HAL_RCC_OscConfig+0x4ec>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d028      	beq.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005898:	429a      	cmp	r2, r3
 800589a:	d121      	bne.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d11a      	bne.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058b0:	4013      	ands	r3, r2
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d111      	bne.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	085b      	lsrs	r3, r3, #1
 80058c8:	3b01      	subs	r3, #1
 80058ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d107      	bne.n	80058e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058dc:	429a      	cmp	r2, r3
 80058de:	d001      	beq.n	80058e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	40023800 	.word	0x40023800

080058f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e0cc      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005908:	4b68      	ldr	r3, [pc, #416]	; (8005aac <HAL_RCC_ClockConfig+0x1b8>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d90c      	bls.n	8005930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005916:	4b65      	ldr	r3, [pc, #404]	; (8005aac <HAL_RCC_ClockConfig+0x1b8>)
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800591e:	4b63      	ldr	r3, [pc, #396]	; (8005aac <HAL_RCC_ClockConfig+0x1b8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d001      	beq.n	8005930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e0b8      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d020      	beq.n	800597e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	d005      	beq.n	8005954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005948:	4b59      	ldr	r3, [pc, #356]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	4a58      	ldr	r2, [pc, #352]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800594e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005952:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	2b00      	cmp	r3, #0
 800595e:	d005      	beq.n	800596c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005960:	4b53      	ldr	r3, [pc, #332]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	4a52      	ldr	r2, [pc, #328]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800596a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800596c:	4b50      	ldr	r3, [pc, #320]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	494d      	ldr	r1, [pc, #308]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800597a:	4313      	orrs	r3, r2
 800597c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d044      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d107      	bne.n	80059a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005992:	4b47      	ldr	r3, [pc, #284]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d119      	bne.n	80059d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e07f      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d003      	beq.n	80059b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ae:	2b03      	cmp	r3, #3
 80059b0:	d107      	bne.n	80059c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059b2:	4b3f      	ldr	r3, [pc, #252]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d109      	bne.n	80059d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e06f      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c2:	4b3b      	ldr	r3, [pc, #236]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e067      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059d2:	4b37      	ldr	r3, [pc, #220]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f023 0203 	bic.w	r2, r3, #3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	4934      	ldr	r1, [pc, #208]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059e4:	f7fd f80a 	bl	80029fc <HAL_GetTick>
 80059e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ea:	e00a      	b.n	8005a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059ec:	f7fd f806 	bl	80029fc <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e04f      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a02:	4b2b      	ldr	r3, [pc, #172]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 020c 	and.w	r2, r3, #12
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d1eb      	bne.n	80059ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a14:	4b25      	ldr	r3, [pc, #148]	; (8005aac <HAL_RCC_ClockConfig+0x1b8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d20c      	bcs.n	8005a3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a22:	4b22      	ldr	r3, [pc, #136]	; (8005aac <HAL_RCC_ClockConfig+0x1b8>)
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a2a:	4b20      	ldr	r3, [pc, #128]	; (8005aac <HAL_RCC_ClockConfig+0x1b8>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d001      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e032      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d008      	beq.n	8005a5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a48:	4b19      	ldr	r3, [pc, #100]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	4916      	ldr	r1, [pc, #88]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d009      	beq.n	8005a7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a66:	4b12      	ldr	r3, [pc, #72]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	490e      	ldr	r1, [pc, #56]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a7a:	f000 f821 	bl	8005ac0 <HAL_RCC_GetSysClockFreq>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	091b      	lsrs	r3, r3, #4
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	490a      	ldr	r1, [pc, #40]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a8c:	5ccb      	ldrb	r3, [r1, r3]
 8005a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a92:	4a09      	ldr	r2, [pc, #36]	; (8005ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a96:	4b09      	ldr	r3, [pc, #36]	; (8005abc <HAL_RCC_ClockConfig+0x1c8>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fc fe60 	bl	8002760 <HAL_InitTick>

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	40023c00 	.word	0x40023c00
 8005ab0:	40023800 	.word	0x40023800
 8005ab4:	080132a4 	.word	0x080132a4
 8005ab8:	200004ec 	.word	0x200004ec
 8005abc:	200004f0 	.word	0x200004f0

08005ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ac4:	b094      	sub	sp, #80	; 0x50
 8005ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	647b      	str	r3, [r7, #68]	; 0x44
 8005acc:	2300      	movs	r3, #0
 8005ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ad8:	4b79      	ldr	r3, [pc, #484]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f003 030c 	and.w	r3, r3, #12
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d00d      	beq.n	8005b00 <HAL_RCC_GetSysClockFreq+0x40>
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	f200 80e1 	bhi.w	8005cac <HAL_RCC_GetSysClockFreq+0x1ec>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <HAL_RCC_GetSysClockFreq+0x34>
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d003      	beq.n	8005afa <HAL_RCC_GetSysClockFreq+0x3a>
 8005af2:	e0db      	b.n	8005cac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005af4:	4b73      	ldr	r3, [pc, #460]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005af6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005af8:	e0db      	b.n	8005cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005afa:	4b72      	ldr	r3, [pc, #456]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005afc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005afe:	e0d8      	b.n	8005cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b00:	4b6f      	ldr	r3, [pc, #444]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b0a:	4b6d      	ldr	r3, [pc, #436]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d063      	beq.n	8005bde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b16:	4b6a      	ldr	r3, [pc, #424]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	099b      	lsrs	r3, r3, #6
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b28:	633b      	str	r3, [r7, #48]	; 0x30
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b32:	4622      	mov	r2, r4
 8005b34:	462b      	mov	r3, r5
 8005b36:	f04f 0000 	mov.w	r0, #0
 8005b3a:	f04f 0100 	mov.w	r1, #0
 8005b3e:	0159      	lsls	r1, r3, #5
 8005b40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b44:	0150      	lsls	r0, r2, #5
 8005b46:	4602      	mov	r2, r0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	1a51      	subs	r1, r2, r1
 8005b4e:	6139      	str	r1, [r7, #16]
 8005b50:	4629      	mov	r1, r5
 8005b52:	eb63 0301 	sbc.w	r3, r3, r1
 8005b56:	617b      	str	r3, [r7, #20]
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b64:	4659      	mov	r1, fp
 8005b66:	018b      	lsls	r3, r1, #6
 8005b68:	4651      	mov	r1, sl
 8005b6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b6e:	4651      	mov	r1, sl
 8005b70:	018a      	lsls	r2, r1, #6
 8005b72:	4651      	mov	r1, sl
 8005b74:	ebb2 0801 	subs.w	r8, r2, r1
 8005b78:	4659      	mov	r1, fp
 8005b7a:	eb63 0901 	sbc.w	r9, r3, r1
 8005b7e:	f04f 0200 	mov.w	r2, #0
 8005b82:	f04f 0300 	mov.w	r3, #0
 8005b86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b92:	4690      	mov	r8, r2
 8005b94:	4699      	mov	r9, r3
 8005b96:	4623      	mov	r3, r4
 8005b98:	eb18 0303 	adds.w	r3, r8, r3
 8005b9c:	60bb      	str	r3, [r7, #8]
 8005b9e:	462b      	mov	r3, r5
 8005ba0:	eb49 0303 	adc.w	r3, r9, r3
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	028b      	lsls	r3, r1, #10
 8005bb6:	4621      	mov	r1, r4
 8005bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	028a      	lsls	r2, r1, #10
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bd0:	f7fa fb5e 	bl	8000290 <__aeabi_uldivmod>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4613      	mov	r3, r2
 8005bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bdc:	e058      	b.n	8005c90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bde:	4b38      	ldr	r3, [pc, #224]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	099b      	lsrs	r3, r3, #6
 8005be4:	2200      	movs	r2, #0
 8005be6:	4618      	mov	r0, r3
 8005be8:	4611      	mov	r1, r2
 8005bea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005bee:	623b      	str	r3, [r7, #32]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bf8:	4642      	mov	r2, r8
 8005bfa:	464b      	mov	r3, r9
 8005bfc:	f04f 0000 	mov.w	r0, #0
 8005c00:	f04f 0100 	mov.w	r1, #0
 8005c04:	0159      	lsls	r1, r3, #5
 8005c06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c0a:	0150      	lsls	r0, r2, #5
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4641      	mov	r1, r8
 8005c12:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c16:	4649      	mov	r1, r9
 8005c18:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c30:	ebb2 040a 	subs.w	r4, r2, sl
 8005c34:	eb63 050b 	sbc.w	r5, r3, fp
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	f04f 0300 	mov.w	r3, #0
 8005c40:	00eb      	lsls	r3, r5, #3
 8005c42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c46:	00e2      	lsls	r2, r4, #3
 8005c48:	4614      	mov	r4, r2
 8005c4a:	461d      	mov	r5, r3
 8005c4c:	4643      	mov	r3, r8
 8005c4e:	18e3      	adds	r3, r4, r3
 8005c50:	603b      	str	r3, [r7, #0]
 8005c52:	464b      	mov	r3, r9
 8005c54:	eb45 0303 	adc.w	r3, r5, r3
 8005c58:	607b      	str	r3, [r7, #4]
 8005c5a:	f04f 0200 	mov.w	r2, #0
 8005c5e:	f04f 0300 	mov.w	r3, #0
 8005c62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c66:	4629      	mov	r1, r5
 8005c68:	028b      	lsls	r3, r1, #10
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c70:	4621      	mov	r1, r4
 8005c72:	028a      	lsls	r2, r1, #10
 8005c74:	4610      	mov	r0, r2
 8005c76:	4619      	mov	r1, r3
 8005c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	61bb      	str	r3, [r7, #24]
 8005c7e:	61fa      	str	r2, [r7, #28]
 8005c80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c84:	f7fa fb04 	bl	8000290 <__aeabi_uldivmod>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	0c1b      	lsrs	r3, r3, #16
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005ca0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005caa:	e002      	b.n	8005cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005cae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3750      	adds	r7, #80	; 0x50
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40023800 	.word	0x40023800
 8005cc4:	00f42400 	.word	0x00f42400

08005cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ccc:	4b03      	ldr	r3, [pc, #12]	; (8005cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8005cce:	681b      	ldr	r3, [r3, #0]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	200004ec 	.word	0x200004ec

08005ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ce4:	f7ff fff0 	bl	8005cc8 <HAL_RCC_GetHCLKFreq>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	4b05      	ldr	r3, [pc, #20]	; (8005d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	0a9b      	lsrs	r3, r3, #10
 8005cf0:	f003 0307 	and.w	r3, r3, #7
 8005cf4:	4903      	ldr	r1, [pc, #12]	; (8005d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cf6:	5ccb      	ldrb	r3, [r1, r3]
 8005cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	40023800 	.word	0x40023800
 8005d04:	080132b4 	.word	0x080132b4

08005d08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	220f      	movs	r2, #15
 8005d16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d18:	4b12      	ldr	r3, [pc, #72]	; (8005d64 <HAL_RCC_GetClockConfig+0x5c>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f003 0203 	and.w	r2, r3, #3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d24:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <HAL_RCC_GetClockConfig+0x5c>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d30:	4b0c      	ldr	r3, [pc, #48]	; (8005d64 <HAL_RCC_GetClockConfig+0x5c>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d3c:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <HAL_RCC_GetClockConfig+0x5c>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	08db      	lsrs	r3, r3, #3
 8005d42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d4a:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <HAL_RCC_GetClockConfig+0x60>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0207 	and.w	r2, r3, #7
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	601a      	str	r2, [r3, #0]
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40023800 	.word	0x40023800
 8005d68:	40023c00 	.word	0x40023c00

08005d6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e07b      	b.n	8005e76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d108      	bne.n	8005d98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d8e:	d009      	beq.n	8005da4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	61da      	str	r2, [r3, #28]
 8005d96:	e005      	b.n	8005da4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fc fbe2 	bl	8002588 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005dec:	431a      	orrs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	431a      	orrs	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e14:	431a      	orrs	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e28:	ea42 0103 	orr.w	r1, r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	0c1b      	lsrs	r3, r3, #16
 8005e42:	f003 0104 	and.w	r1, r3, #4
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	f003 0210 	and.w	r2, r3, #16
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69da      	ldr	r2, [r3, #28]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b088      	sub	sp, #32
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	603b      	str	r3, [r7, #0]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_SPI_Transmit+0x22>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e126      	b.n	80060ee <HAL_SPI_Transmit+0x270>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ea8:	f7fc fda8 	bl	80029fc <HAL_GetTick>
 8005eac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005eae:	88fb      	ldrh	r3, [r7, #6]
 8005eb0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d002      	beq.n	8005ec4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ec2:	e10b      	b.n	80060dc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <HAL_SPI_Transmit+0x52>
 8005eca:	88fb      	ldrh	r3, [r7, #6]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d102      	bne.n	8005ed6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ed4:	e102      	b.n	80060dc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2203      	movs	r2, #3
 8005eda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	88fa      	ldrh	r2, [r7, #6]
 8005eee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	88fa      	ldrh	r2, [r7, #6]
 8005ef4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f1c:	d10f      	bne.n	8005f3e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f48:	2b40      	cmp	r3, #64	; 0x40
 8005f4a:	d007      	beq.n	8005f5c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f64:	d14b      	bne.n	8005ffe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_SPI_Transmit+0xf6>
 8005f6e:	8afb      	ldrh	r3, [r7, #22]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d13e      	bne.n	8005ff2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f78:	881a      	ldrh	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f84:	1c9a      	adds	r2, r3, #2
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f98:	e02b      	b.n	8005ff2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d112      	bne.n	8005fce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fac:	881a      	ldrh	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb8:	1c9a      	adds	r2, r3, #2
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fcc:	e011      	b.n	8005ff2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fce:	f7fc fd15 	bl	80029fc <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d803      	bhi.n	8005fe6 <HAL_SPI_Transmit+0x168>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe4:	d102      	bne.n	8005fec <HAL_SPI_Transmit+0x16e>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d102      	bne.n	8005ff2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ff0:	e074      	b.n	80060dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1ce      	bne.n	8005f9a <HAL_SPI_Transmit+0x11c>
 8005ffc:	e04c      	b.n	8006098 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <HAL_SPI_Transmit+0x18e>
 8006006:	8afb      	ldrh	r3, [r7, #22]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d140      	bne.n	800608e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	330c      	adds	r3, #12
 8006016:	7812      	ldrb	r2, [r2, #0]
 8006018:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006028:	b29b      	uxth	r3, r3
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006032:	e02c      	b.n	800608e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b02      	cmp	r3, #2
 8006040:	d113      	bne.n	800606a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	330c      	adds	r3, #12
 800604c:	7812      	ldrb	r2, [r2, #0]
 800604e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b01      	subs	r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	86da      	strh	r2, [r3, #54]	; 0x36
 8006068:	e011      	b.n	800608e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800606a:	f7fc fcc7 	bl	80029fc <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	429a      	cmp	r2, r3
 8006078:	d803      	bhi.n	8006082 <HAL_SPI_Transmit+0x204>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006080:	d102      	bne.n	8006088 <HAL_SPI_Transmit+0x20a>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d102      	bne.n	800608e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800608c:	e026      	b.n	80060dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006092:	b29b      	uxth	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1cd      	bne.n	8006034 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	6839      	ldr	r1, [r7, #0]
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 fa55 	bl	800654c <SPI_EndRxTxTransaction>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2220      	movs	r2, #32
 80060ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10a      	bne.n	80060cc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060b6:	2300      	movs	r3, #0
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	77fb      	strb	r3, [r7, #31]
 80060d8:	e000      	b.n	80060dc <HAL_SPI_Transmit+0x25e>
  }

error:
 80060da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3720      	adds	r7, #32
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b08c      	sub	sp, #48	; 0x30
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	60b9      	str	r1, [r7, #8]
 8006100:	607a      	str	r2, [r7, #4]
 8006102:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006104:	2301      	movs	r3, #1
 8006106:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_SPI_TransmitReceive+0x26>
 8006118:	2302      	movs	r3, #2
 800611a:	e18a      	b.n	8006432 <HAL_SPI_TransmitReceive+0x33c>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006124:	f7fc fc6a 	bl	80029fc <HAL_GetTick>
 8006128:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800613a:	887b      	ldrh	r3, [r7, #2]
 800613c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800613e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006142:	2b01      	cmp	r3, #1
 8006144:	d00f      	beq.n	8006166 <HAL_SPI_TransmitReceive+0x70>
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800614c:	d107      	bne.n	800615e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d103      	bne.n	800615e <HAL_SPI_TransmitReceive+0x68>
 8006156:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800615a:	2b04      	cmp	r3, #4
 800615c:	d003      	beq.n	8006166 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800615e:	2302      	movs	r3, #2
 8006160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006164:	e15b      	b.n	800641e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d005      	beq.n	8006178 <HAL_SPI_TransmitReceive+0x82>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <HAL_SPI_TransmitReceive+0x82>
 8006172:	887b      	ldrh	r3, [r7, #2]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d103      	bne.n	8006180 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800617e:	e14e      	b.n	800641e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b04      	cmp	r3, #4
 800618a:	d003      	beq.n	8006194 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2205      	movs	r2, #5
 8006190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	887a      	ldrh	r2, [r7, #2]
 80061a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	887a      	ldrh	r2, [r7, #2]
 80061aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	887a      	ldrh	r2, [r7, #2]
 80061b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	887a      	ldrh	r2, [r7, #2]
 80061bc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d4:	2b40      	cmp	r3, #64	; 0x40
 80061d6:	d007      	beq.n	80061e8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f0:	d178      	bne.n	80062e4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <HAL_SPI_TransmitReceive+0x10a>
 80061fa:	8b7b      	ldrh	r3, [r7, #26]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d166      	bne.n	80062ce <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006204:	881a      	ldrh	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006210:	1c9a      	adds	r2, r3, #2
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006224:	e053      	b.n	80062ce <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b02      	cmp	r3, #2
 8006232:	d11b      	bne.n	800626c <HAL_SPI_TransmitReceive+0x176>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d016      	beq.n	800626c <HAL_SPI_TransmitReceive+0x176>
 800623e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006240:	2b01      	cmp	r3, #1
 8006242:	d113      	bne.n	800626c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006248:	881a      	ldrh	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006254:	1c9a      	adds	r2, r3, #2
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800625e:	b29b      	uxth	r3, r3
 8006260:	3b01      	subs	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b01      	cmp	r3, #1
 8006278:	d119      	bne.n	80062ae <HAL_SPI_TransmitReceive+0x1b8>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800627e:	b29b      	uxth	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d014      	beq.n	80062ae <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628e:	b292      	uxth	r2, r2
 8006290:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	1c9a      	adds	r2, r3, #2
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062aa:	2301      	movs	r3, #1
 80062ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80062ae:	f7fc fba5 	bl	80029fc <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d807      	bhi.n	80062ce <HAL_SPI_TransmitReceive+0x1d8>
 80062be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c4:	d003      	beq.n	80062ce <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80062cc:	e0a7      	b.n	800641e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1a6      	bne.n	8006226 <HAL_SPI_TransmitReceive+0x130>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1a1      	bne.n	8006226 <HAL_SPI_TransmitReceive+0x130>
 80062e2:	e07c      	b.n	80063de <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <HAL_SPI_TransmitReceive+0x1fc>
 80062ec:	8b7b      	ldrh	r3, [r7, #26]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d16b      	bne.n	80063ca <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	330c      	adds	r3, #12
 80062fc:	7812      	ldrb	r2, [r2, #0]
 80062fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800630e:	b29b      	uxth	r3, r3
 8006310:	3b01      	subs	r3, #1
 8006312:	b29a      	uxth	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006318:	e057      	b.n	80063ca <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b02      	cmp	r3, #2
 8006326:	d11c      	bne.n	8006362 <HAL_SPI_TransmitReceive+0x26c>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800632c:	b29b      	uxth	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d017      	beq.n	8006362 <HAL_SPI_TransmitReceive+0x26c>
 8006332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006334:	2b01      	cmp	r3, #1
 8006336:	d114      	bne.n	8006362 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	330c      	adds	r3, #12
 8006342:	7812      	ldrb	r2, [r2, #0]
 8006344:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006354:	b29b      	uxth	r3, r3
 8006356:	3b01      	subs	r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b01      	cmp	r3, #1
 800636e:	d119      	bne.n	80063a4 <HAL_SPI_TransmitReceive+0x2ae>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006374:	b29b      	uxth	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d014      	beq.n	80063a4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006396:	b29b      	uxth	r3, r3
 8006398:	3b01      	subs	r3, #1
 800639a:	b29a      	uxth	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063a0:	2301      	movs	r3, #1
 80063a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063a4:	f7fc fb2a 	bl	80029fc <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d803      	bhi.n	80063bc <HAL_SPI_TransmitReceive+0x2c6>
 80063b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ba:	d102      	bne.n	80063c2 <HAL_SPI_TransmitReceive+0x2cc>
 80063bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d103      	bne.n	80063ca <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80063c8:	e029      	b.n	800641e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1a2      	bne.n	800631a <HAL_SPI_TransmitReceive+0x224>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d19d      	bne.n	800631a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 f8b2 	bl	800654c <SPI_EndRxTxTransaction>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d006      	beq.n	80063fc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2220      	movs	r2, #32
 80063f8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80063fa:	e010      	b.n	800641e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10b      	bne.n	800641c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006404:	2300      	movs	r3, #0
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	e000      	b.n	800641e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800641c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800642e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006432:	4618      	mov	r0, r3
 8006434:	3730      	adds	r7, #48	; 0x30
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	4613      	mov	r3, r2
 800644a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800644c:	f7fc fad6 	bl	80029fc <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	1a9b      	subs	r3, r3, r2
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	4413      	add	r3, r2
 800645a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800645c:	f7fc face 	bl	80029fc <HAL_GetTick>
 8006460:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006462:	4b39      	ldr	r3, [pc, #228]	; (8006548 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	015b      	lsls	r3, r3, #5
 8006468:	0d1b      	lsrs	r3, r3, #20
 800646a:	69fa      	ldr	r2, [r7, #28]
 800646c:	fb02 f303 	mul.w	r3, r2, r3
 8006470:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006472:	e054      	b.n	800651e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d050      	beq.n	800651e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800647c:	f7fc fabe 	bl	80029fc <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	69fa      	ldr	r2, [r7, #28]
 8006488:	429a      	cmp	r2, r3
 800648a:	d902      	bls.n	8006492 <SPI_WaitFlagStateUntilTimeout+0x56>
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d13d      	bne.n	800650e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064aa:	d111      	bne.n	80064d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b4:	d004      	beq.n	80064c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064be:	d107      	bne.n	80064d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064d8:	d10f      	bne.n	80064fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e017      	b.n	800653e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	3b01      	subs	r3, #1
 800651c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	4013      	ands	r3, r2
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	429a      	cmp	r2, r3
 800652c:	bf0c      	ite	eq
 800652e:	2301      	moveq	r3, #1
 8006530:	2300      	movne	r3, #0
 8006532:	b2db      	uxtb	r3, r3
 8006534:	461a      	mov	r2, r3
 8006536:	79fb      	ldrb	r3, [r7, #7]
 8006538:	429a      	cmp	r2, r3
 800653a:	d19b      	bne.n	8006474 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3720      	adds	r7, #32
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	200004ec 	.word	0x200004ec

0800654c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af02      	add	r7, sp, #8
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006558:	4b1b      	ldr	r3, [pc, #108]	; (80065c8 <SPI_EndRxTxTransaction+0x7c>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a1b      	ldr	r2, [pc, #108]	; (80065cc <SPI_EndRxTxTransaction+0x80>)
 800655e:	fba2 2303 	umull	r2, r3, r2, r3
 8006562:	0d5b      	lsrs	r3, r3, #21
 8006564:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006568:	fb02 f303 	mul.w	r3, r2, r3
 800656c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006576:	d112      	bne.n	800659e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2200      	movs	r2, #0
 8006580:	2180      	movs	r1, #128	; 0x80
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f7ff ff5a 	bl	800643c <SPI_WaitFlagStateUntilTimeout>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d016      	beq.n	80065bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006592:	f043 0220 	orr.w	r2, r3, #32
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e00f      	b.n	80065be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00a      	beq.n	80065ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b4:	2b80      	cmp	r3, #128	; 0x80
 80065b6:	d0f2      	beq.n	800659e <SPI_EndRxTxTransaction+0x52>
 80065b8:	e000      	b.n	80065bc <SPI_EndRxTxTransaction+0x70>
        break;
 80065ba:	bf00      	nop
  }

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	200004ec 	.word	0x200004ec
 80065cc:	165e9f81 	.word	0x165e9f81

080065d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e041      	b.n	8006666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d106      	bne.n	80065fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7fc f844 	bl	8002684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3304      	adds	r3, #4
 800660c:	4619      	mov	r1, r3
 800660e:	4610      	mov	r0, r2
 8006610:	f000 fd3a 	bl	8007088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b01      	cmp	r3, #1
 8006682:	d001      	beq.n	8006688 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e03c      	b.n	8006702 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a1e      	ldr	r2, [pc, #120]	; (8006710 <HAL_TIM_Base_Start+0xa0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d018      	beq.n	80066cc <HAL_TIM_Base_Start+0x5c>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a2:	d013      	beq.n	80066cc <HAL_TIM_Base_Start+0x5c>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1a      	ldr	r2, [pc, #104]	; (8006714 <HAL_TIM_Base_Start+0xa4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d00e      	beq.n	80066cc <HAL_TIM_Base_Start+0x5c>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a19      	ldr	r2, [pc, #100]	; (8006718 <HAL_TIM_Base_Start+0xa8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d009      	beq.n	80066cc <HAL_TIM_Base_Start+0x5c>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a17      	ldr	r2, [pc, #92]	; (800671c <HAL_TIM_Base_Start+0xac>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d004      	beq.n	80066cc <HAL_TIM_Base_Start+0x5c>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a16      	ldr	r2, [pc, #88]	; (8006720 <HAL_TIM_Base_Start+0xb0>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d111      	bne.n	80066f0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b06      	cmp	r3, #6
 80066dc:	d010      	beq.n	8006700 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f042 0201 	orr.w	r2, r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ee:	e007      	b.n	8006700 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0201 	orr.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40010000 	.word	0x40010000
 8006714:	40000400 	.word	0x40000400
 8006718:	40000800 	.word	0x40000800
 800671c:	40000c00 	.word	0x40000c00
 8006720:	40014000 	.word	0x40014000

08006724 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6a1a      	ldr	r2, [r3, #32]
 8006732:	f241 1311 	movw	r3, #4369	; 0x1111
 8006736:	4013      	ands	r3, r2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10f      	bne.n	800675c <HAL_TIM_Base_Stop+0x38>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6a1a      	ldr	r2, [r3, #32]
 8006742:	f240 4344 	movw	r3, #1092	; 0x444
 8006746:	4013      	ands	r3, r2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d107      	bne.n	800675c <HAL_TIM_Base_Stop+0x38>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0201 	bic.w	r2, r2, #1
 800675a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
	...

08006774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b01      	cmp	r3, #1
 8006786:	d001      	beq.n	800678c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e044      	b.n	8006816 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0201 	orr.w	r2, r2, #1
 80067a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a1e      	ldr	r2, [pc, #120]	; (8006824 <HAL_TIM_Base_Start_IT+0xb0>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d018      	beq.n	80067e0 <HAL_TIM_Base_Start_IT+0x6c>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b6:	d013      	beq.n	80067e0 <HAL_TIM_Base_Start_IT+0x6c>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1a      	ldr	r2, [pc, #104]	; (8006828 <HAL_TIM_Base_Start_IT+0xb4>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00e      	beq.n	80067e0 <HAL_TIM_Base_Start_IT+0x6c>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a19      	ldr	r2, [pc, #100]	; (800682c <HAL_TIM_Base_Start_IT+0xb8>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d009      	beq.n	80067e0 <HAL_TIM_Base_Start_IT+0x6c>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a17      	ldr	r2, [pc, #92]	; (8006830 <HAL_TIM_Base_Start_IT+0xbc>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d004      	beq.n	80067e0 <HAL_TIM_Base_Start_IT+0x6c>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a16      	ldr	r2, [pc, #88]	; (8006834 <HAL_TIM_Base_Start_IT+0xc0>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d111      	bne.n	8006804 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b06      	cmp	r3, #6
 80067f0:	d010      	beq.n	8006814 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f042 0201 	orr.w	r2, r2, #1
 8006800:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006802:	e007      	b.n	8006814 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f042 0201 	orr.w	r2, r2, #1
 8006812:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40010000 	.word	0x40010000
 8006828:	40000400 	.word	0x40000400
 800682c:	40000800 	.word	0x40000800
 8006830:	40000c00 	.word	0x40000c00
 8006834:	40014000 	.word	0x40014000

08006838 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e041      	b.n	80068ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f839 	bl	80068d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3304      	adds	r3, #4
 8006874:	4619      	mov	r1, r3
 8006876:	4610      	mov	r0, r2
 8006878:	f000 fc06 	bl	8007088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
	...

080068ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d109      	bne.n	8006910 <HAL_TIM_PWM_Start+0x24>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b01      	cmp	r3, #1
 8006906:	bf14      	ite	ne
 8006908:	2301      	movne	r3, #1
 800690a:	2300      	moveq	r3, #0
 800690c:	b2db      	uxtb	r3, r3
 800690e:	e022      	b.n	8006956 <HAL_TIM_PWM_Start+0x6a>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b04      	cmp	r3, #4
 8006914:	d109      	bne.n	800692a <HAL_TIM_PWM_Start+0x3e>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b01      	cmp	r3, #1
 8006920:	bf14      	ite	ne
 8006922:	2301      	movne	r3, #1
 8006924:	2300      	moveq	r3, #0
 8006926:	b2db      	uxtb	r3, r3
 8006928:	e015      	b.n	8006956 <HAL_TIM_PWM_Start+0x6a>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b08      	cmp	r3, #8
 800692e:	d109      	bne.n	8006944 <HAL_TIM_PWM_Start+0x58>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b01      	cmp	r3, #1
 800693a:	bf14      	ite	ne
 800693c:	2301      	movne	r3, #1
 800693e:	2300      	moveq	r3, #0
 8006940:	b2db      	uxtb	r3, r3
 8006942:	e008      	b.n	8006956 <HAL_TIM_PWM_Start+0x6a>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b01      	cmp	r3, #1
 800694e:	bf14      	ite	ne
 8006950:	2301      	movne	r3, #1
 8006952:	2300      	moveq	r3, #0
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e068      	b.n	8006a30 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d104      	bne.n	800696e <HAL_TIM_PWM_Start+0x82>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800696c:	e013      	b.n	8006996 <HAL_TIM_PWM_Start+0xaa>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b04      	cmp	r3, #4
 8006972:	d104      	bne.n	800697e <HAL_TIM_PWM_Start+0x92>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800697c:	e00b      	b.n	8006996 <HAL_TIM_PWM_Start+0xaa>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b08      	cmp	r3, #8
 8006982:	d104      	bne.n	800698e <HAL_TIM_PWM_Start+0xa2>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800698c:	e003      	b.n	8006996 <HAL_TIM_PWM_Start+0xaa>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2202      	movs	r2, #2
 8006992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2201      	movs	r2, #1
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fe18 	bl	80075d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a23      	ldr	r2, [pc, #140]	; (8006a38 <HAL_TIM_PWM_Start+0x14c>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d107      	bne.n	80069be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a1d      	ldr	r2, [pc, #116]	; (8006a38 <HAL_TIM_PWM_Start+0x14c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d018      	beq.n	80069fa <HAL_TIM_PWM_Start+0x10e>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d0:	d013      	beq.n	80069fa <HAL_TIM_PWM_Start+0x10e>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a19      	ldr	r2, [pc, #100]	; (8006a3c <HAL_TIM_PWM_Start+0x150>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00e      	beq.n	80069fa <HAL_TIM_PWM_Start+0x10e>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a17      	ldr	r2, [pc, #92]	; (8006a40 <HAL_TIM_PWM_Start+0x154>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d009      	beq.n	80069fa <HAL_TIM_PWM_Start+0x10e>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a16      	ldr	r2, [pc, #88]	; (8006a44 <HAL_TIM_PWM_Start+0x158>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d004      	beq.n	80069fa <HAL_TIM_PWM_Start+0x10e>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a14      	ldr	r2, [pc, #80]	; (8006a48 <HAL_TIM_PWM_Start+0x15c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d111      	bne.n	8006a1e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f003 0307 	and.w	r3, r3, #7
 8006a04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b06      	cmp	r3, #6
 8006a0a:	d010      	beq.n	8006a2e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0201 	orr.w	r2, r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a1c:	e007      	b.n	8006a2e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f042 0201 	orr.w	r2, r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	40010000 	.word	0x40010000
 8006a3c:	40000400 	.word	0x40000400
 8006a40:	40000800 	.word	0x40000800
 8006a44:	40000c00 	.word	0x40000c00
 8006a48:	40014000 	.word	0x40014000

08006a4c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fdb8 	bl	80075d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a29      	ldr	r2, [pc, #164]	; (8006b10 <HAL_TIM_PWM_Stop+0xc4>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d117      	bne.n	8006a9e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6a1a      	ldr	r2, [r3, #32]
 8006a74:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a78:	4013      	ands	r3, r2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10f      	bne.n	8006a9e <HAL_TIM_PWM_Stop+0x52>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6a1a      	ldr	r2, [r3, #32]
 8006a84:	f240 4344 	movw	r3, #1092	; 0x444
 8006a88:	4013      	ands	r3, r2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d107      	bne.n	8006a9e <HAL_TIM_PWM_Stop+0x52>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6a1a      	ldr	r2, [r3, #32]
 8006aa4:	f241 1311 	movw	r3, #4369	; 0x1111
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10f      	bne.n	8006ace <HAL_TIM_PWM_Stop+0x82>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6a1a      	ldr	r2, [r3, #32]
 8006ab4:	f240 4344 	movw	r3, #1092	; 0x444
 8006ab8:	4013      	ands	r3, r2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d107      	bne.n	8006ace <HAL_TIM_PWM_Stop+0x82>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0201 	bic.w	r2, r2, #1
 8006acc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d104      	bne.n	8006ade <HAL_TIM_PWM_Stop+0x92>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006adc:	e013      	b.n	8006b06 <HAL_TIM_PWM_Stop+0xba>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b04      	cmp	r3, #4
 8006ae2:	d104      	bne.n	8006aee <HAL_TIM_PWM_Stop+0xa2>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006aec:	e00b      	b.n	8006b06 <HAL_TIM_PWM_Stop+0xba>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d104      	bne.n	8006afe <HAL_TIM_PWM_Stop+0xb2>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006afc:	e003      	b.n	8006b06 <HAL_TIM_PWM_Stop+0xba>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	40010000 	.word	0x40010000

08006b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d122      	bne.n	8006b70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d11b      	bne.n	8006b70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f06f 0202 	mvn.w	r2, #2
 8006b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fa77 	bl	800704a <HAL_TIM_IC_CaptureCallback>
 8006b5c:	e005      	b.n	8006b6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fa69 	bl	8007036 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fa7a 	bl	800705e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f003 0304 	and.w	r3, r3, #4
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	d122      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f003 0304 	and.w	r3, r3, #4
 8006b88:	2b04      	cmp	r3, #4
 8006b8a:	d11b      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f06f 0204 	mvn.w	r2, #4
 8006b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2202      	movs	r2, #2
 8006b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fa4d 	bl	800704a <HAL_TIM_IC_CaptureCallback>
 8006bb0:	e005      	b.n	8006bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fa3f 	bl	8007036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fa50 	bl	800705e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f003 0308 	and.w	r3, r3, #8
 8006bce:	2b08      	cmp	r3, #8
 8006bd0:	d122      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f003 0308 	and.w	r3, r3, #8
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	d11b      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f06f 0208 	mvn.w	r2, #8
 8006be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2204      	movs	r2, #4
 8006bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fa23 	bl	800704a <HAL_TIM_IC_CaptureCallback>
 8006c04:	e005      	b.n	8006c12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fa15 	bl	8007036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fa26 	bl	800705e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	f003 0310 	and.w	r3, r3, #16
 8006c22:	2b10      	cmp	r3, #16
 8006c24:	d122      	bne.n	8006c6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f003 0310 	and.w	r3, r3, #16
 8006c30:	2b10      	cmp	r3, #16
 8006c32:	d11b      	bne.n	8006c6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f06f 0210 	mvn.w	r2, #16
 8006c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2208      	movs	r2, #8
 8006c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f9f9 	bl	800704a <HAL_TIM_IC_CaptureCallback>
 8006c58:	e005      	b.n	8006c66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f9eb 	bl	8007036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f9fc 	bl	800705e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d10e      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d107      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f06f 0201 	mvn.w	r2, #1
 8006c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7fb fbec 	bl	8002470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca2:	2b80      	cmp	r3, #128	; 0x80
 8006ca4:	d10e      	bne.n	8006cc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb0:	2b80      	cmp	r3, #128	; 0x80
 8006cb2:	d107      	bne.n	8006cc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fd26 	bl	8007710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cce:	2b40      	cmp	r3, #64	; 0x40
 8006cd0:	d10e      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cdc:	2b40      	cmp	r3, #64	; 0x40
 8006cde:	d107      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f9c1 	bl	8007072 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f003 0320 	and.w	r3, r3, #32
 8006cfa:	2b20      	cmp	r3, #32
 8006cfc:	d10e      	bne.n	8006d1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f003 0320 	and.w	r3, r3, #32
 8006d08:	2b20      	cmp	r3, #32
 8006d0a:	d107      	bne.n	8006d1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f06f 0220 	mvn.w	r2, #32
 8006d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fcf0 	bl	80076fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d1c:	bf00      	nop
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d101      	bne.n	8006d42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d3e:	2302      	movs	r3, #2
 8006d40:	e0ae      	b.n	8006ea0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b0c      	cmp	r3, #12
 8006d4e:	f200 809f 	bhi.w	8006e90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d52:	a201      	add	r2, pc, #4	; (adr r2, 8006d58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d58:	08006d8d 	.word	0x08006d8d
 8006d5c:	08006e91 	.word	0x08006e91
 8006d60:	08006e91 	.word	0x08006e91
 8006d64:	08006e91 	.word	0x08006e91
 8006d68:	08006dcd 	.word	0x08006dcd
 8006d6c:	08006e91 	.word	0x08006e91
 8006d70:	08006e91 	.word	0x08006e91
 8006d74:	08006e91 	.word	0x08006e91
 8006d78:	08006e0f 	.word	0x08006e0f
 8006d7c:	08006e91 	.word	0x08006e91
 8006d80:	08006e91 	.word	0x08006e91
 8006d84:	08006e91 	.word	0x08006e91
 8006d88:	08006e4f 	.word	0x08006e4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68b9      	ldr	r1, [r7, #8]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 f9f8 	bl	8007188 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699a      	ldr	r2, [r3, #24]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f042 0208 	orr.w	r2, r2, #8
 8006da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699a      	ldr	r2, [r3, #24]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 0204 	bic.w	r2, r2, #4
 8006db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6999      	ldr	r1, [r3, #24]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	691a      	ldr	r2, [r3, #16]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	619a      	str	r2, [r3, #24]
      break;
 8006dca:	e064      	b.n	8006e96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68b9      	ldr	r1, [r7, #8]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fa3e 	bl	8007254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	699a      	ldr	r2, [r3, #24]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	699a      	ldr	r2, [r3, #24]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6999      	ldr	r1, [r3, #24]
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	021a      	lsls	r2, r3, #8
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	619a      	str	r2, [r3, #24]
      break;
 8006e0c:	e043      	b.n	8006e96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68b9      	ldr	r1, [r7, #8]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 fa89 	bl	800732c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69da      	ldr	r2, [r3, #28]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f042 0208 	orr.w	r2, r2, #8
 8006e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69da      	ldr	r2, [r3, #28]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0204 	bic.w	r2, r2, #4
 8006e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69d9      	ldr	r1, [r3, #28]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	691a      	ldr	r2, [r3, #16]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	61da      	str	r2, [r3, #28]
      break;
 8006e4c:	e023      	b.n	8006e96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68b9      	ldr	r1, [r7, #8]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 fad3 	bl	8007400 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	69da      	ldr	r2, [r3, #28]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69da      	ldr	r2, [r3, #28]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	69d9      	ldr	r1, [r3, #28]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	021a      	lsls	r2, r3, #8
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	61da      	str	r2, [r3, #28]
      break;
 8006e8e:	e002      	b.n	8006e96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	75fb      	strb	r3, [r7, #23]
      break;
 8006e94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d101      	bne.n	8006ec4 <HAL_TIM_ConfigClockSource+0x1c>
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	e0b4      	b.n	800702e <HAL_TIM_ConfigClockSource+0x186>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006efc:	d03e      	beq.n	8006f7c <HAL_TIM_ConfigClockSource+0xd4>
 8006efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f02:	f200 8087 	bhi.w	8007014 <HAL_TIM_ConfigClockSource+0x16c>
 8006f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f0a:	f000 8086 	beq.w	800701a <HAL_TIM_ConfigClockSource+0x172>
 8006f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f12:	d87f      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x16c>
 8006f14:	2b70      	cmp	r3, #112	; 0x70
 8006f16:	d01a      	beq.n	8006f4e <HAL_TIM_ConfigClockSource+0xa6>
 8006f18:	2b70      	cmp	r3, #112	; 0x70
 8006f1a:	d87b      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x16c>
 8006f1c:	2b60      	cmp	r3, #96	; 0x60
 8006f1e:	d050      	beq.n	8006fc2 <HAL_TIM_ConfigClockSource+0x11a>
 8006f20:	2b60      	cmp	r3, #96	; 0x60
 8006f22:	d877      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x16c>
 8006f24:	2b50      	cmp	r3, #80	; 0x50
 8006f26:	d03c      	beq.n	8006fa2 <HAL_TIM_ConfigClockSource+0xfa>
 8006f28:	2b50      	cmp	r3, #80	; 0x50
 8006f2a:	d873      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x16c>
 8006f2c:	2b40      	cmp	r3, #64	; 0x40
 8006f2e:	d058      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x13a>
 8006f30:	2b40      	cmp	r3, #64	; 0x40
 8006f32:	d86f      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x16c>
 8006f34:	2b30      	cmp	r3, #48	; 0x30
 8006f36:	d064      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0x15a>
 8006f38:	2b30      	cmp	r3, #48	; 0x30
 8006f3a:	d86b      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x16c>
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d060      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0x15a>
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d867      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x16c>
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d05c      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0x15a>
 8006f48:	2b10      	cmp	r3, #16
 8006f4a:	d05a      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0x15a>
 8006f4c:	e062      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6899      	ldr	r1, [r3, #8]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	f000 fb19 	bl	8007594 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	609a      	str	r2, [r3, #8]
      break;
 8006f7a:	e04f      	b.n	800701c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6818      	ldr	r0, [r3, #0]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	6899      	ldr	r1, [r3, #8]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f000 fb02 	bl	8007594 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f9e:	609a      	str	r2, [r3, #8]
      break;
 8006fa0:	e03c      	b.n	800701c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	6859      	ldr	r1, [r3, #4]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f000 fa76 	bl	80074a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2150      	movs	r1, #80	; 0x50
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 facf 	bl	800755e <TIM_ITRx_SetConfig>
      break;
 8006fc0:	e02c      	b.n	800701c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6818      	ldr	r0, [r3, #0]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	6859      	ldr	r1, [r3, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f000 fa95 	bl	80074fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2160      	movs	r1, #96	; 0x60
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fabf 	bl	800755e <TIM_ITRx_SetConfig>
      break;
 8006fe0:	e01c      	b.n	800701c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	6859      	ldr	r1, [r3, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f000 fa56 	bl	80074a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2140      	movs	r1, #64	; 0x40
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 faaf 	bl	800755e <TIM_ITRx_SetConfig>
      break;
 8007000:	e00c      	b.n	800701c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4619      	mov	r1, r3
 800700c:	4610      	mov	r0, r2
 800700e:	f000 faa6 	bl	800755e <TIM_ITRx_SetConfig>
      break;
 8007012:	e003      	b.n	800701c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	73fb      	strb	r3, [r7, #15]
      break;
 8007018:	e000      	b.n	800701c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800701a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800703e:	bf00      	nop
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007052:	bf00      	nop
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800705e:	b480      	push	{r7}
 8007060:	b083      	sub	sp, #12
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007066:	bf00      	nop
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007072:	b480      	push	{r7}
 8007074:	b083      	sub	sp, #12
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
	...

08007088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a34      	ldr	r2, [pc, #208]	; (800716c <TIM_Base_SetConfig+0xe4>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d00f      	beq.n	80070c0 <TIM_Base_SetConfig+0x38>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a6:	d00b      	beq.n	80070c0 <TIM_Base_SetConfig+0x38>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a31      	ldr	r2, [pc, #196]	; (8007170 <TIM_Base_SetConfig+0xe8>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d007      	beq.n	80070c0 <TIM_Base_SetConfig+0x38>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a30      	ldr	r2, [pc, #192]	; (8007174 <TIM_Base_SetConfig+0xec>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d003      	beq.n	80070c0 <TIM_Base_SetConfig+0x38>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a2f      	ldr	r2, [pc, #188]	; (8007178 <TIM_Base_SetConfig+0xf0>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d108      	bne.n	80070d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a25      	ldr	r2, [pc, #148]	; (800716c <TIM_Base_SetConfig+0xe4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d01b      	beq.n	8007112 <TIM_Base_SetConfig+0x8a>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e0:	d017      	beq.n	8007112 <TIM_Base_SetConfig+0x8a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a22      	ldr	r2, [pc, #136]	; (8007170 <TIM_Base_SetConfig+0xe8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d013      	beq.n	8007112 <TIM_Base_SetConfig+0x8a>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a21      	ldr	r2, [pc, #132]	; (8007174 <TIM_Base_SetConfig+0xec>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d00f      	beq.n	8007112 <TIM_Base_SetConfig+0x8a>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a20      	ldr	r2, [pc, #128]	; (8007178 <TIM_Base_SetConfig+0xf0>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d00b      	beq.n	8007112 <TIM_Base_SetConfig+0x8a>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a1f      	ldr	r2, [pc, #124]	; (800717c <TIM_Base_SetConfig+0xf4>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d007      	beq.n	8007112 <TIM_Base_SetConfig+0x8a>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a1e      	ldr	r2, [pc, #120]	; (8007180 <TIM_Base_SetConfig+0xf8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d003      	beq.n	8007112 <TIM_Base_SetConfig+0x8a>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a1d      	ldr	r2, [pc, #116]	; (8007184 <TIM_Base_SetConfig+0xfc>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d108      	bne.n	8007124 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a08      	ldr	r2, [pc, #32]	; (800716c <TIM_Base_SetConfig+0xe4>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d103      	bne.n	8007158 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	691a      	ldr	r2, [r3, #16]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	615a      	str	r2, [r3, #20]
}
 800715e:	bf00      	nop
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40010000 	.word	0x40010000
 8007170:	40000400 	.word	0x40000400
 8007174:	40000800 	.word	0x40000800
 8007178:	40000c00 	.word	0x40000c00
 800717c:	40014000 	.word	0x40014000
 8007180:	40014400 	.word	0x40014400
 8007184:	40014800 	.word	0x40014800

08007188 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	f023 0201 	bic.w	r2, r3, #1
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f023 0303 	bic.w	r3, r3, #3
 80071be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	f023 0302 	bic.w	r3, r3, #2
 80071d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	4313      	orrs	r3, r2
 80071da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a1c      	ldr	r2, [pc, #112]	; (8007250 <TIM_OC1_SetConfig+0xc8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d10c      	bne.n	80071fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f023 0308 	bic.w	r3, r3, #8
 80071ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f023 0304 	bic.w	r3, r3, #4
 80071fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a13      	ldr	r2, [pc, #76]	; (8007250 <TIM_OC1_SetConfig+0xc8>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d111      	bne.n	800722a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800720c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	4313      	orrs	r3, r2
 800721e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	4313      	orrs	r3, r2
 8007228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	621a      	str	r2, [r3, #32]
}
 8007244:	bf00      	nop
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	40010000 	.word	0x40010000

08007254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	f023 0210 	bic.w	r2, r3, #16
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800728a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	021b      	lsls	r3, r3, #8
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	4313      	orrs	r3, r2
 8007296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	f023 0320 	bic.w	r3, r3, #32
 800729e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	011b      	lsls	r3, r3, #4
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a1e      	ldr	r2, [pc, #120]	; (8007328 <TIM_OC2_SetConfig+0xd4>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d10d      	bne.n	80072d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	011b      	lsls	r3, r3, #4
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a15      	ldr	r2, [pc, #84]	; (8007328 <TIM_OC2_SetConfig+0xd4>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d113      	bne.n	8007300 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	621a      	str	r2, [r3, #32]
}
 800731a:	bf00      	nop
 800731c:	371c      	adds	r7, #28
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	40010000 	.word	0x40010000

0800732c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f023 0303 	bic.w	r3, r3, #3
 8007362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	4313      	orrs	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	021b      	lsls	r3, r3, #8
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	4313      	orrs	r3, r2
 8007380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a1d      	ldr	r2, [pc, #116]	; (80073fc <TIM_OC3_SetConfig+0xd0>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d10d      	bne.n	80073a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	021b      	lsls	r3, r3, #8
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	4313      	orrs	r3, r2
 800739c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a14      	ldr	r2, [pc, #80]	; (80073fc <TIM_OC3_SetConfig+0xd0>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d113      	bne.n	80073d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	011b      	lsls	r3, r3, #4
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	621a      	str	r2, [r3, #32]
}
 80073f0:	bf00      	nop
 80073f2:	371c      	adds	r7, #28
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	40010000 	.word	0x40010000

08007400 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800742e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	021b      	lsls	r3, r3, #8
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800744a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	031b      	lsls	r3, r3, #12
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	4313      	orrs	r3, r2
 8007456:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a10      	ldr	r2, [pc, #64]	; (800749c <TIM_OC4_SetConfig+0x9c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d109      	bne.n	8007474 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	019b      	lsls	r3, r3, #6
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	4313      	orrs	r3, r2
 8007472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	621a      	str	r2, [r3, #32]
}
 800748e:	bf00      	nop
 8007490:	371c      	adds	r7, #28
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	40010000 	.word	0x40010000

080074a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b087      	sub	sp, #28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6a1b      	ldr	r3, [r3, #32]
 80074b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	f023 0201 	bic.w	r2, r3, #1
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	011b      	lsls	r3, r3, #4
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f023 030a 	bic.w	r3, r3, #10
 80074dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	621a      	str	r2, [r3, #32]
}
 80074f2:	bf00      	nop
 80074f4:	371c      	adds	r7, #28
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074fe:	b480      	push	{r7}
 8007500:	b087      	sub	sp, #28
 8007502:	af00      	add	r7, sp, #0
 8007504:	60f8      	str	r0, [r7, #12]
 8007506:	60b9      	str	r1, [r7, #8]
 8007508:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	f023 0210 	bic.w	r2, r3, #16
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6a1b      	ldr	r3, [r3, #32]
 8007520:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007528:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	031b      	lsls	r3, r3, #12
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	4313      	orrs	r3, r2
 8007532:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800753a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	4313      	orrs	r3, r2
 8007544:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	621a      	str	r2, [r3, #32]
}
 8007552:	bf00      	nop
 8007554:	371c      	adds	r7, #28
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800755e:	b480      	push	{r7}
 8007560:	b085      	sub	sp, #20
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007574:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	f043 0307 	orr.w	r3, r3, #7
 8007580:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	609a      	str	r2, [r3, #8]
}
 8007588:	bf00      	nop
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
 80075a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	021a      	lsls	r2, r3, #8
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	431a      	orrs	r2, r3
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	4313      	orrs	r3, r2
 80075c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	609a      	str	r2, [r3, #8]
}
 80075c8:	bf00      	nop
 80075ca:	371c      	adds	r7, #28
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f003 031f 	and.w	r3, r3, #31
 80075e6:	2201      	movs	r2, #1
 80075e8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6a1a      	ldr	r2, [r3, #32]
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	43db      	mvns	r3, r3
 80075f6:	401a      	ands	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6a1a      	ldr	r2, [r3, #32]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	f003 031f 	and.w	r3, r3, #31
 8007606:	6879      	ldr	r1, [r7, #4]
 8007608:	fa01 f303 	lsl.w	r3, r1, r3
 800760c:	431a      	orrs	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	621a      	str	r2, [r3, #32]
}
 8007612:	bf00      	nop
 8007614:	371c      	adds	r7, #28
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
	...

08007620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007630:	2b01      	cmp	r3, #1
 8007632:	d101      	bne.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007634:	2302      	movs	r3, #2
 8007636:	e050      	b.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	4313      	orrs	r3, r2
 8007668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a1c      	ldr	r2, [pc, #112]	; (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d018      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007684:	d013      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a18      	ldr	r2, [pc, #96]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d00e      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a16      	ldr	r2, [pc, #88]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d009      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a15      	ldr	r2, [pc, #84]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d004      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a13      	ldr	r2, [pc, #76]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d10c      	bne.n	80076c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	4313      	orrs	r3, r2
 80076be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	40010000 	.word	0x40010000
 80076ec:	40000400 	.word	0x40000400
 80076f0:	40000800 	.word	0x40000800
 80076f4:	40000c00 	.word	0x40000c00
 80076f8:	40014000 	.word	0x40014000

080076fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007724:	b084      	sub	sp, #16
 8007726:	b580      	push	{r7, lr}
 8007728:	b084      	sub	sp, #16
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	f107 001c 	add.w	r0, r7, #28
 8007732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007738:	2b01      	cmp	r3, #1
 800773a:	d122      	bne.n	8007782 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007740:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007766:	2b01      	cmp	r3, #1
 8007768:	d105      	bne.n	8007776 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f001 fbee 	bl	8008f58 <USB_CoreReset>
 800777c:	4603      	mov	r3, r0
 800777e:	73fb      	strb	r3, [r7, #15]
 8007780:	e01a      	b.n	80077b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f001 fbe2 	bl	8008f58 <USB_CoreReset>
 8007794:	4603      	mov	r3, r0
 8007796:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800779a:	2b00      	cmp	r3, #0
 800779c:	d106      	bne.n	80077ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	639a      	str	r2, [r3, #56]	; 0x38
 80077aa:	e005      	b.n	80077b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d10b      	bne.n	80077d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f043 0206 	orr.w	r2, r3, #6
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f043 0220 	orr.w	r2, r3, #32
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077e2:	b004      	add	sp, #16
 80077e4:	4770      	bx	lr
	...

080077e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	4613      	mov	r3, r2
 80077f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80077f6:	79fb      	ldrb	r3, [r7, #7]
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d165      	bne.n	80078c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	4a41      	ldr	r2, [pc, #260]	; (8007904 <USB_SetTurnaroundTime+0x11c>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d906      	bls.n	8007812 <USB_SetTurnaroundTime+0x2a>
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	4a40      	ldr	r2, [pc, #256]	; (8007908 <USB_SetTurnaroundTime+0x120>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d202      	bcs.n	8007812 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800780c:	230f      	movs	r3, #15
 800780e:	617b      	str	r3, [r7, #20]
 8007810:	e062      	b.n	80078d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	4a3c      	ldr	r2, [pc, #240]	; (8007908 <USB_SetTurnaroundTime+0x120>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d306      	bcc.n	8007828 <USB_SetTurnaroundTime+0x40>
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	4a3b      	ldr	r2, [pc, #236]	; (800790c <USB_SetTurnaroundTime+0x124>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d202      	bcs.n	8007828 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007822:	230e      	movs	r3, #14
 8007824:	617b      	str	r3, [r7, #20]
 8007826:	e057      	b.n	80078d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	4a38      	ldr	r2, [pc, #224]	; (800790c <USB_SetTurnaroundTime+0x124>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d306      	bcc.n	800783e <USB_SetTurnaroundTime+0x56>
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	4a37      	ldr	r2, [pc, #220]	; (8007910 <USB_SetTurnaroundTime+0x128>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d202      	bcs.n	800783e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007838:	230d      	movs	r3, #13
 800783a:	617b      	str	r3, [r7, #20]
 800783c:	e04c      	b.n	80078d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	4a33      	ldr	r2, [pc, #204]	; (8007910 <USB_SetTurnaroundTime+0x128>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d306      	bcc.n	8007854 <USB_SetTurnaroundTime+0x6c>
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	4a32      	ldr	r2, [pc, #200]	; (8007914 <USB_SetTurnaroundTime+0x12c>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d802      	bhi.n	8007854 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800784e:	230c      	movs	r3, #12
 8007850:	617b      	str	r3, [r7, #20]
 8007852:	e041      	b.n	80078d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	4a2f      	ldr	r2, [pc, #188]	; (8007914 <USB_SetTurnaroundTime+0x12c>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d906      	bls.n	800786a <USB_SetTurnaroundTime+0x82>
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	4a2e      	ldr	r2, [pc, #184]	; (8007918 <USB_SetTurnaroundTime+0x130>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d802      	bhi.n	800786a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007864:	230b      	movs	r3, #11
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	e036      	b.n	80078d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	4a2a      	ldr	r2, [pc, #168]	; (8007918 <USB_SetTurnaroundTime+0x130>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d906      	bls.n	8007880 <USB_SetTurnaroundTime+0x98>
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	4a29      	ldr	r2, [pc, #164]	; (800791c <USB_SetTurnaroundTime+0x134>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d802      	bhi.n	8007880 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800787a:	230a      	movs	r3, #10
 800787c:	617b      	str	r3, [r7, #20]
 800787e:	e02b      	b.n	80078d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	4a26      	ldr	r2, [pc, #152]	; (800791c <USB_SetTurnaroundTime+0x134>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d906      	bls.n	8007896 <USB_SetTurnaroundTime+0xae>
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	4a25      	ldr	r2, [pc, #148]	; (8007920 <USB_SetTurnaroundTime+0x138>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d202      	bcs.n	8007896 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007890:	2309      	movs	r3, #9
 8007892:	617b      	str	r3, [r7, #20]
 8007894:	e020      	b.n	80078d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	4a21      	ldr	r2, [pc, #132]	; (8007920 <USB_SetTurnaroundTime+0x138>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d306      	bcc.n	80078ac <USB_SetTurnaroundTime+0xc4>
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	4a20      	ldr	r2, [pc, #128]	; (8007924 <USB_SetTurnaroundTime+0x13c>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d802      	bhi.n	80078ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80078a6:	2308      	movs	r3, #8
 80078a8:	617b      	str	r3, [r7, #20]
 80078aa:	e015      	b.n	80078d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	4a1d      	ldr	r2, [pc, #116]	; (8007924 <USB_SetTurnaroundTime+0x13c>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d906      	bls.n	80078c2 <USB_SetTurnaroundTime+0xda>
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	4a1c      	ldr	r2, [pc, #112]	; (8007928 <USB_SetTurnaroundTime+0x140>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d202      	bcs.n	80078c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80078bc:	2307      	movs	r3, #7
 80078be:	617b      	str	r3, [r7, #20]
 80078c0:	e00a      	b.n	80078d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80078c2:	2306      	movs	r3, #6
 80078c4:	617b      	str	r3, [r7, #20]
 80078c6:	e007      	b.n	80078d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80078c8:	79fb      	ldrb	r3, [r7, #7]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d102      	bne.n	80078d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80078ce:	2309      	movs	r3, #9
 80078d0:	617b      	str	r3, [r7, #20]
 80078d2:	e001      	b.n	80078d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80078d4:	2309      	movs	r3, #9
 80078d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	68da      	ldr	r2, [r3, #12]
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	029b      	lsls	r3, r3, #10
 80078ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80078f0:	431a      	orrs	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	371c      	adds	r7, #28
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr
 8007904:	00d8acbf 	.word	0x00d8acbf
 8007908:	00e4e1c0 	.word	0x00e4e1c0
 800790c:	00f42400 	.word	0x00f42400
 8007910:	01067380 	.word	0x01067380
 8007914:	011a499f 	.word	0x011a499f
 8007918:	01312cff 	.word	0x01312cff
 800791c:	014ca43f 	.word	0x014ca43f
 8007920:	016e3600 	.word	0x016e3600
 8007924:	01a6ab1f 	.word	0x01a6ab1f
 8007928:	01e84800 	.word	0x01e84800

0800792c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f043 0201 	orr.w	r2, r3, #1
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f023 0201 	bic.w	r2, r3, #1
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800798c:	78fb      	ldrb	r3, [r7, #3]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d115      	bne.n	80079be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800799e:	2001      	movs	r0, #1
 80079a0:	f7fb f838 	bl	8002a14 <HAL_Delay>
      ms++;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	3301      	adds	r3, #1
 80079a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 fa45 	bl	8008e3a <USB_GetMode>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d01e      	beq.n	80079f4 <USB_SetCurrentMode+0x84>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2b31      	cmp	r3, #49	; 0x31
 80079ba:	d9f0      	bls.n	800799e <USB_SetCurrentMode+0x2e>
 80079bc:	e01a      	b.n	80079f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80079be:	78fb      	ldrb	r3, [r7, #3]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d115      	bne.n	80079f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079d0:	2001      	movs	r0, #1
 80079d2:	f7fb f81f 	bl	8002a14 <HAL_Delay>
      ms++;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3301      	adds	r3, #1
 80079da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f001 fa2c 	bl	8008e3a <USB_GetMode>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d005      	beq.n	80079f4 <USB_SetCurrentMode+0x84>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2b31      	cmp	r3, #49	; 0x31
 80079ec:	d9f0      	bls.n	80079d0 <USB_SetCurrentMode+0x60>
 80079ee:	e001      	b.n	80079f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e005      	b.n	8007a00 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2b32      	cmp	r3, #50	; 0x32
 80079f8:	d101      	bne.n	80079fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e000      	b.n	8007a00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a08:	b084      	sub	sp, #16
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b086      	sub	sp, #24
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007a16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a22:	2300      	movs	r3, #0
 8007a24:	613b      	str	r3, [r7, #16]
 8007a26:	e009      	b.n	8007a3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	3340      	adds	r3, #64	; 0x40
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	2200      	movs	r2, #0
 8007a34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	613b      	str	r3, [r7, #16]
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	2b0e      	cmp	r3, #14
 8007a40:	d9f2      	bls.n	8007a28 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d11c      	bne.n	8007a82 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a56:	f043 0302 	orr.w	r3, r3, #2
 8007a5a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a78:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	639a      	str	r2, [r3, #56]	; 0x38
 8007a80:	e00b      	b.n	8007a9a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a86:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aac:	4619      	mov	r1, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	680b      	ldr	r3, [r1, #0]
 8007ab8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d10c      	bne.n	8007ada <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d104      	bne.n	8007ad0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f965 	bl	8007d98 <USB_SetDevSpeed>
 8007ace:	e008      	b.n	8007ae2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f960 	bl	8007d98 <USB_SetDevSpeed>
 8007ad8:	e003      	b.n	8007ae2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ada:	2103      	movs	r1, #3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f95b 	bl	8007d98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ae2:	2110      	movs	r1, #16
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f8f3 	bl	8007cd0 <USB_FlushTxFifo>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f91f 	bl	8007d38 <USB_FlushRxFifo>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b16:	461a      	mov	r2, r3
 8007b18:	2300      	movs	r3, #0
 8007b1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b22:	461a      	mov	r2, r3
 8007b24:	2300      	movs	r3, #0
 8007b26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b28:	2300      	movs	r3, #0
 8007b2a:	613b      	str	r3, [r7, #16]
 8007b2c:	e043      	b.n	8007bb6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	015a      	lsls	r2, r3, #5
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	4413      	add	r3, r2
 8007b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b44:	d118      	bne.n	8007b78 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10a      	bne.n	8007b62 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	015a      	lsls	r2, r3, #5
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b58:	461a      	mov	r2, r3
 8007b5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	e013      	b.n	8007b8a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6e:	461a      	mov	r2, r3
 8007b70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b74:	6013      	str	r3, [r2, #0]
 8007b76:	e008      	b.n	8007b8a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b84:	461a      	mov	r2, r3
 8007b86:	2300      	movs	r3, #0
 8007b88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b96:	461a      	mov	r2, r3
 8007b98:	2300      	movs	r3, #0
 8007b9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba8:	461a      	mov	r2, r3
 8007baa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007bae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	613b      	str	r3, [r7, #16]
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d3b7      	bcc.n	8007b2e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	613b      	str	r3, [r7, #16]
 8007bc2:	e043      	b.n	8007c4c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bda:	d118      	bne.n	8007c0e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10a      	bne.n	8007bf8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bee:	461a      	mov	r2, r3
 8007bf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bf4:	6013      	str	r3, [r2, #0]
 8007bf6:	e013      	b.n	8007c20 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	015a      	lsls	r2, r3, #5
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c04:	461a      	mov	r2, r3
 8007c06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c0a:	6013      	str	r3, [r2, #0]
 8007c0c:	e008      	b.n	8007c20 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	2300      	movs	r3, #0
 8007c30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3e:	461a      	mov	r2, r3
 8007c40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	613b      	str	r3, [r7, #16]
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d3b7      	bcc.n	8007bc4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007c74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d105      	bne.n	8007c88 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	f043 0210 	orr.w	r2, r3, #16
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	699a      	ldr	r2, [r3, #24]
 8007c8c:	4b0f      	ldr	r3, [pc, #60]	; (8007ccc <USB_DevInit+0x2c4>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d005      	beq.n	8007ca6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	f043 0208 	orr.w	r2, r3, #8
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d107      	bne.n	8007cbc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cb4:	f043 0304 	orr.w	r3, r3, #4
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3718      	adds	r7, #24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cc8:	b004      	add	sp, #16
 8007cca:	4770      	bx	lr
 8007ccc:	803c3800 	.word	0x803c3800

08007cd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4a13      	ldr	r2, [pc, #76]	; (8007d34 <USB_FlushTxFifo+0x64>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d901      	bls.n	8007cf0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e01b      	b.n	8007d28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	daf2      	bge.n	8007cde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	019b      	lsls	r3, r3, #6
 8007d00:	f043 0220 	orr.w	r2, r3, #32
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	4a08      	ldr	r2, [pc, #32]	; (8007d34 <USB_FlushTxFifo+0x64>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d901      	bls.n	8007d1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e006      	b.n	8007d28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	f003 0320 	and.w	r3, r3, #32
 8007d22:	2b20      	cmp	r3, #32
 8007d24:	d0f0      	beq.n	8007d08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	00030d40 	.word	0x00030d40

08007d38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	3301      	adds	r3, #1
 8007d48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4a11      	ldr	r2, [pc, #68]	; (8007d94 <USB_FlushRxFifo+0x5c>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d901      	bls.n	8007d56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e018      	b.n	8007d88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	daf2      	bge.n	8007d44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2210      	movs	r2, #16
 8007d66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4a08      	ldr	r2, [pc, #32]	; (8007d94 <USB_FlushRxFifo+0x5c>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d901      	bls.n	8007d7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e006      	b.n	8007d88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	f003 0310 	and.w	r3, r3, #16
 8007d82:	2b10      	cmp	r3, #16
 8007d84:	d0f0      	beq.n	8007d68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3714      	adds	r7, #20
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	00030d40 	.word	0x00030d40

08007d98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	460b      	mov	r3, r1
 8007da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	78fb      	ldrb	r3, [r7, #3]
 8007db2:	68f9      	ldr	r1, [r7, #12]
 8007db4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007db8:	4313      	orrs	r3, r2
 8007dba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b087      	sub	sp, #28
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f003 0306 	and.w	r3, r3, #6
 8007de2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d102      	bne.n	8007df0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007dea:	2300      	movs	r3, #0
 8007dec:	75fb      	strb	r3, [r7, #23]
 8007dee:	e00a      	b.n	8007e06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d002      	beq.n	8007dfc <USB_GetDevSpeed+0x32>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2b06      	cmp	r3, #6
 8007dfa:	d102      	bne.n	8007e02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	75fb      	strb	r3, [r7, #23]
 8007e00:	e001      	b.n	8007e06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007e02:	230f      	movs	r3, #15
 8007e04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	371c      	adds	r7, #28
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	785b      	ldrb	r3, [r3, #1]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d13a      	bne.n	8007ea6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e36:	69da      	ldr	r2, [r3, #28]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	f003 030f 	and.w	r3, r3, #15
 8007e40:	2101      	movs	r1, #1
 8007e42:	fa01 f303 	lsl.w	r3, r1, r3
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	68f9      	ldr	r1, [r7, #12]
 8007e4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d155      	bne.n	8007f14 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	791b      	ldrb	r3, [r3, #4]
 8007e82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	059b      	lsls	r3, r3, #22
 8007e8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	0151      	lsls	r1, r2, #5
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	440a      	add	r2, r1
 8007e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ea2:	6013      	str	r3, [r2, #0]
 8007ea4:	e036      	b.n	8007f14 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eac:	69da      	ldr	r2, [r3, #28]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	f003 030f 	and.w	r3, r3, #15
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ebc:	041b      	lsls	r3, r3, #16
 8007ebe:	68f9      	ldr	r1, [r7, #12]
 8007ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d11a      	bne.n	8007f14 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	791b      	ldrb	r3, [r3, #4]
 8007ef8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007efa:	430b      	orrs	r3, r1
 8007efc:	4313      	orrs	r3, r2
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	0151      	lsls	r1, r2, #5
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	440a      	add	r2, r1
 8007f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f12:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
	...

08007f24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	785b      	ldrb	r3, [r3, #1]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d161      	bne.n	8008004 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	015a      	lsls	r2, r3, #5
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	4413      	add	r3, r2
 8007f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f56:	d11f      	bne.n	8007f98 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	015a      	lsls	r2, r3, #5
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68ba      	ldr	r2, [r7, #8]
 8007f68:	0151      	lsls	r1, r2, #5
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	440a      	add	r2, r1
 8007f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f76:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	0151      	lsls	r1, r2, #5
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	440a      	add	r2, r1
 8007f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	f003 030f 	and.w	r3, r3, #15
 8007fa8:	2101      	movs	r1, #1
 8007faa:	fa01 f303 	lsl.w	r3, r1, r3
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	43db      	mvns	r3, r3
 8007fb2:	68f9      	ldr	r1, [r7, #12]
 8007fb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fb8:	4013      	ands	r3, r2
 8007fba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fc2:	69da      	ldr	r2, [r3, #28]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	f003 030f 	and.w	r3, r3, #15
 8007fcc:	2101      	movs	r1, #1
 8007fce:	fa01 f303 	lsl.w	r3, r1, r3
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	43db      	mvns	r3, r3
 8007fd6:	68f9      	ldr	r1, [r7, #12]
 8007fd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fdc:	4013      	ands	r3, r2
 8007fde:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	0159      	lsls	r1, r3, #5
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	440b      	add	r3, r1
 8007ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	4b35      	ldr	r3, [pc, #212]	; (80080d4 <USB_DeactivateEndpoint+0x1b0>)
 8007ffe:	4013      	ands	r3, r2
 8008000:	600b      	str	r3, [r1, #0]
 8008002:	e060      	b.n	80080c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4413      	add	r3, r2
 800800c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008016:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800801a:	d11f      	bne.n	800805c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	015a      	lsls	r2, r3, #5
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4413      	add	r3, r2
 8008024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	0151      	lsls	r1, r2, #5
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	440a      	add	r2, r1
 8008032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008036:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800803a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	0151      	lsls	r1, r2, #5
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	440a      	add	r2, r1
 8008052:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008056:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800805a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	f003 030f 	and.w	r3, r3, #15
 800806c:	2101      	movs	r1, #1
 800806e:	fa01 f303 	lsl.w	r3, r1, r3
 8008072:	041b      	lsls	r3, r3, #16
 8008074:	43db      	mvns	r3, r3
 8008076:	68f9      	ldr	r1, [r7, #12]
 8008078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800807c:	4013      	ands	r3, r2
 800807e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008086:	69da      	ldr	r2, [r3, #28]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	f003 030f 	and.w	r3, r3, #15
 8008090:	2101      	movs	r1, #1
 8008092:	fa01 f303 	lsl.w	r3, r1, r3
 8008096:	041b      	lsls	r3, r3, #16
 8008098:	43db      	mvns	r3, r3
 800809a:	68f9      	ldr	r1, [r7, #12]
 800809c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080a0:	4013      	ands	r3, r2
 80080a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	0159      	lsls	r1, r3, #5
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	440b      	add	r3, r1
 80080ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080be:	4619      	mov	r1, r3
 80080c0:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <USB_DeactivateEndpoint+0x1b4>)
 80080c2:	4013      	ands	r3, r2
 80080c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	ec337800 	.word	0xec337800
 80080d8:	eff37800 	.word	0xeff37800

080080dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b08a      	sub	sp, #40	; 0x28
 80080e0:	af02      	add	r7, sp, #8
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	4613      	mov	r3, r2
 80080e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	785b      	ldrb	r3, [r3, #1]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	f040 815c 	bne.w	80083b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d132      	bne.n	800816c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	4413      	add	r3, r2
 800810e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	69ba      	ldr	r2, [r7, #24]
 8008116:	0151      	lsls	r1, r2, #5
 8008118:	69fa      	ldr	r2, [r7, #28]
 800811a:	440a      	add	r2, r1
 800811c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008120:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008124:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008128:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	0151      	lsls	r1, r2, #5
 800813c:	69fa      	ldr	r2, [r7, #28]
 800813e:	440a      	add	r2, r1
 8008140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008144:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008148:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	4413      	add	r3, r2
 8008152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	69ba      	ldr	r2, [r7, #24]
 800815a:	0151      	lsls	r1, r2, #5
 800815c:	69fa      	ldr	r2, [r7, #28]
 800815e:	440a      	add	r2, r1
 8008160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008164:	0cdb      	lsrs	r3, r3, #19
 8008166:	04db      	lsls	r3, r3, #19
 8008168:	6113      	str	r3, [r2, #16]
 800816a:	e074      	b.n	8008256 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	69ba      	ldr	r2, [r7, #24]
 800817c:	0151      	lsls	r1, r2, #5
 800817e:	69fa      	ldr	r2, [r7, #28]
 8008180:	440a      	add	r2, r1
 8008182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008186:	0cdb      	lsrs	r3, r3, #19
 8008188:	04db      	lsls	r3, r3, #19
 800818a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	4413      	add	r3, r2
 8008194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	69ba      	ldr	r2, [r7, #24]
 800819c:	0151      	lsls	r1, r2, #5
 800819e:	69fa      	ldr	r2, [r7, #28]
 80081a0:	440a      	add	r2, r1
 80081a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80081aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80081ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081bc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	6999      	ldr	r1, [r3, #24]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	440b      	add	r3, r1
 80081c8:	1e59      	subs	r1, r3, #1
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80081d2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80081d4:	4b9d      	ldr	r3, [pc, #628]	; (800844c <USB_EPStartXfer+0x370>)
 80081d6:	400b      	ands	r3, r1
 80081d8:	69b9      	ldr	r1, [r7, #24]
 80081da:	0148      	lsls	r0, r1, #5
 80081dc:	69f9      	ldr	r1, [r7, #28]
 80081de:	4401      	add	r1, r0
 80081e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80081e4:	4313      	orrs	r3, r2
 80081e6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f4:	691a      	ldr	r2, [r3, #16]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081fe:	69b9      	ldr	r1, [r7, #24]
 8008200:	0148      	lsls	r0, r1, #5
 8008202:	69f9      	ldr	r1, [r7, #28]
 8008204:	4401      	add	r1, r0
 8008206:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800820a:	4313      	orrs	r3, r2
 800820c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	791b      	ldrb	r3, [r3, #4]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d11f      	bne.n	8008256 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	4413      	add	r3, r2
 800821e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	0151      	lsls	r1, r2, #5
 8008228:	69fa      	ldr	r2, [r7, #28]
 800822a:	440a      	add	r2, r1
 800822c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008230:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008234:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	015a      	lsls	r2, r3, #5
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	4413      	add	r3, r2
 800823e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	0151      	lsls	r1, r2, #5
 8008248:	69fa      	ldr	r2, [r7, #28]
 800824a:	440a      	add	r2, r1
 800824c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008250:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008254:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008256:	79fb      	ldrb	r3, [r7, #7]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d14b      	bne.n	80082f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d009      	beq.n	8008278 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008270:	461a      	mov	r2, r3
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	791b      	ldrb	r3, [r3, #4]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d128      	bne.n	80082d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800828c:	2b00      	cmp	r3, #0
 800828e:	d110      	bne.n	80082b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	69ba      	ldr	r2, [r7, #24]
 80082a0:	0151      	lsls	r1, r2, #5
 80082a2:	69fa      	ldr	r2, [r7, #28]
 80082a4:	440a      	add	r2, r1
 80082a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	e00f      	b.n	80082d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	0151      	lsls	r1, r2, #5
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	440a      	add	r2, r1
 80082c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	69ba      	ldr	r2, [r7, #24]
 80082e2:	0151      	lsls	r1, r2, #5
 80082e4:	69fa      	ldr	r2, [r7, #28]
 80082e6:	440a      	add	r2, r1
 80082e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082f0:	6013      	str	r3, [r2, #0]
 80082f2:	e133      	b.n	800855c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	69ba      	ldr	r2, [r7, #24]
 8008304:	0151      	lsls	r1, r2, #5
 8008306:	69fa      	ldr	r2, [r7, #28]
 8008308:	440a      	add	r2, r1
 800830a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800830e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008312:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	791b      	ldrb	r3, [r3, #4]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d015      	beq.n	8008348 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 811b 	beq.w	800855c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800832c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	f003 030f 	and.w	r3, r3, #15
 8008336:	2101      	movs	r1, #1
 8008338:	fa01 f303 	lsl.w	r3, r1, r3
 800833c:	69f9      	ldr	r1, [r7, #28]
 800833e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008342:	4313      	orrs	r3, r2
 8008344:	634b      	str	r3, [r1, #52]	; 0x34
 8008346:	e109      	b.n	800855c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008354:	2b00      	cmp	r3, #0
 8008356:	d110      	bne.n	800837a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	015a      	lsls	r2, r3, #5
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	4413      	add	r3, r2
 8008360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	0151      	lsls	r1, r2, #5
 800836a:	69fa      	ldr	r2, [r7, #28]
 800836c:	440a      	add	r2, r1
 800836e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008372:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	e00f      	b.n	800839a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	4413      	add	r3, r2
 8008382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	0151      	lsls	r1, r2, #5
 800838c:	69fa      	ldr	r2, [r7, #28]
 800838e:	440a      	add	r2, r1
 8008390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008398:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	6919      	ldr	r1, [r3, #16]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	781a      	ldrb	r2, [r3, #0]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	b298      	uxth	r0, r3
 80083a8:	79fb      	ldrb	r3, [r7, #7]
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	4603      	mov	r3, r0
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f000 fade 	bl	8008970 <USB_WritePacket>
 80083b4:	e0d2      	b.n	800855c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	0151      	lsls	r1, r2, #5
 80083c8:	69fa      	ldr	r2, [r7, #28]
 80083ca:	440a      	add	r2, r1
 80083cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083d0:	0cdb      	lsrs	r3, r3, #19
 80083d2:	04db      	lsls	r3, r3, #19
 80083d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	015a      	lsls	r2, r3, #5
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	4413      	add	r3, r2
 80083de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	69ba      	ldr	r2, [r7, #24]
 80083e6:	0151      	lsls	r1, r2, #5
 80083e8:	69fa      	ldr	r2, [r7, #28]
 80083ea:	440a      	add	r2, r1
 80083ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d126      	bne.n	8008450 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	015a      	lsls	r2, r3, #5
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	4413      	add	r3, r2
 800840a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800840e:	691a      	ldr	r2, [r3, #16]
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008418:	69b9      	ldr	r1, [r7, #24]
 800841a:	0148      	lsls	r0, r1, #5
 800841c:	69f9      	ldr	r1, [r7, #28]
 800841e:	4401      	add	r1, r0
 8008420:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008424:	4313      	orrs	r3, r2
 8008426:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	4413      	add	r3, r2
 8008430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	69ba      	ldr	r2, [r7, #24]
 8008438:	0151      	lsls	r1, r2, #5
 800843a:	69fa      	ldr	r2, [r7, #28]
 800843c:	440a      	add	r2, r1
 800843e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008442:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008446:	6113      	str	r3, [r2, #16]
 8008448:	e03a      	b.n	80084c0 <USB_EPStartXfer+0x3e4>
 800844a:	bf00      	nop
 800844c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	699a      	ldr	r2, [r3, #24]
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	4413      	add	r3, r2
 800845a:	1e5a      	subs	r2, r3, #1
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	fbb2 f3f3 	udiv	r3, r2, r3
 8008464:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	8afa      	ldrh	r2, [r7, #22]
 800846c:	fb03 f202 	mul.w	r2, r3, r2
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	015a      	lsls	r2, r3, #5
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	4413      	add	r3, r2
 800847c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008480:	691a      	ldr	r2, [r3, #16]
 8008482:	8afb      	ldrh	r3, [r7, #22]
 8008484:	04d9      	lsls	r1, r3, #19
 8008486:	4b38      	ldr	r3, [pc, #224]	; (8008568 <USB_EPStartXfer+0x48c>)
 8008488:	400b      	ands	r3, r1
 800848a:	69b9      	ldr	r1, [r7, #24]
 800848c:	0148      	lsls	r0, r1, #5
 800848e:	69f9      	ldr	r1, [r7, #28]
 8008490:	4401      	add	r1, r0
 8008492:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008496:	4313      	orrs	r3, r2
 8008498:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a6:	691a      	ldr	r2, [r3, #16]
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	69db      	ldr	r3, [r3, #28]
 80084ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084b0:	69b9      	ldr	r1, [r7, #24]
 80084b2:	0148      	lsls	r0, r1, #5
 80084b4:	69f9      	ldr	r1, [r7, #28]
 80084b6:	4401      	add	r1, r0
 80084b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80084bc:	4313      	orrs	r3, r2
 80084be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80084c0:	79fb      	ldrb	r3, [r7, #7]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d10d      	bne.n	80084e2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d009      	beq.n	80084e2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	6919      	ldr	r1, [r3, #16]
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	015a      	lsls	r2, r3, #5
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	4413      	add	r3, r2
 80084da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084de:	460a      	mov	r2, r1
 80084e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	791b      	ldrb	r3, [r3, #4]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d128      	bne.n	800853c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d110      	bne.n	800851c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	4413      	add	r3, r2
 8008502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	69ba      	ldr	r2, [r7, #24]
 800850a:	0151      	lsls	r1, r2, #5
 800850c:	69fa      	ldr	r2, [r7, #28]
 800850e:	440a      	add	r2, r1
 8008510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008514:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008518:	6013      	str	r3, [r2, #0]
 800851a:	e00f      	b.n	800853c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	4413      	add	r3, r2
 8008524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	0151      	lsls	r1, r2, #5
 800852e:	69fa      	ldr	r2, [r7, #28]
 8008530:	440a      	add	r2, r1
 8008532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800853a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	015a      	lsls	r2, r3, #5
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	4413      	add	r3, r2
 8008544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	0151      	lsls	r1, r2, #5
 800854e:	69fa      	ldr	r2, [r7, #28]
 8008550:	440a      	add	r2, r1
 8008552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008556:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800855a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3720      	adds	r7, #32
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	1ff80000 	.word	0x1ff80000

0800856c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	4613      	mov	r3, r2
 8008578:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	785b      	ldrb	r3, [r3, #1]
 8008588:	2b01      	cmp	r3, #1
 800858a:	f040 80ce 	bne.w	800872a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d132      	bne.n	80085fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	015a      	lsls	r2, r3, #5
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	4413      	add	r3, r2
 800859e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	0151      	lsls	r1, r2, #5
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	440a      	add	r2, r1
 80085ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80085b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80085b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	015a      	lsls	r2, r3, #5
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	4413      	add	r3, r2
 80085c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	0151      	lsls	r1, r2, #5
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	440a      	add	r2, r1
 80085d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	015a      	lsls	r2, r3, #5
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	4413      	add	r3, r2
 80085e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	0151      	lsls	r1, r2, #5
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	440a      	add	r2, r1
 80085f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085f4:	0cdb      	lsrs	r3, r3, #19
 80085f6:	04db      	lsls	r3, r3, #19
 80085f8:	6113      	str	r3, [r2, #16]
 80085fa:	e04e      	b.n	800869a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	015a      	lsls	r2, r3, #5
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	4413      	add	r3, r2
 8008604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	693a      	ldr	r2, [r7, #16]
 800860c:	0151      	lsls	r1, r2, #5
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	440a      	add	r2, r1
 8008612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008616:	0cdb      	lsrs	r3, r3, #19
 8008618:	04db      	lsls	r3, r3, #19
 800861a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	4413      	add	r3, r2
 8008624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	0151      	lsls	r1, r2, #5
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	440a      	add	r2, r1
 8008632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008636:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800863a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800863e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	699a      	ldr	r2, [r3, #24]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	429a      	cmp	r2, r3
 800864a:	d903      	bls.n	8008654 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	68da      	ldr	r2, [r3, #12]
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	0151      	lsls	r1, r2, #5
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	440a      	add	r2, r1
 800866a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800866e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008672:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008680:	691a      	ldr	r2, [r3, #16]
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800868a:	6939      	ldr	r1, [r7, #16]
 800868c:	0148      	lsls	r0, r1, #5
 800868e:	6979      	ldr	r1, [r7, #20]
 8008690:	4401      	add	r1, r0
 8008692:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008696:	4313      	orrs	r3, r2
 8008698:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800869a:	79fb      	ldrb	r3, [r7, #7]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d11e      	bne.n	80086de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d009      	beq.n	80086bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b4:	461a      	mov	r2, r3
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	015a      	lsls	r2, r3, #5
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	4413      	add	r3, r2
 80086c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	0151      	lsls	r1, r2, #5
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	440a      	add	r2, r1
 80086d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	e097      	b.n	800880e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	015a      	lsls	r2, r3, #5
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	0151      	lsls	r1, r2, #5
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	440a      	add	r2, r1
 80086f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 8083 	beq.w	800880e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800870e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	f003 030f 	and.w	r3, r3, #15
 8008718:	2101      	movs	r1, #1
 800871a:	fa01 f303 	lsl.w	r3, r1, r3
 800871e:	6979      	ldr	r1, [r7, #20]
 8008720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008724:	4313      	orrs	r3, r2
 8008726:	634b      	str	r3, [r1, #52]	; 0x34
 8008728:	e071      	b.n	800880e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	015a      	lsls	r2, r3, #5
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	4413      	add	r3, r2
 8008732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	0151      	lsls	r1, r2, #5
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	440a      	add	r2, r1
 8008740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008744:	0cdb      	lsrs	r3, r3, #19
 8008746:	04db      	lsls	r3, r3, #19
 8008748:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	015a      	lsls	r2, r3, #5
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	4413      	add	r3, r2
 8008752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	0151      	lsls	r1, r2, #5
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	440a      	add	r2, r1
 8008760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008764:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008768:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800876c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	68da      	ldr	r2, [r3, #12]
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	4413      	add	r3, r2
 800878e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	0151      	lsls	r1, r2, #5
 8008798:	697a      	ldr	r2, [r7, #20]
 800879a:	440a      	add	r2, r1
 800879c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	015a      	lsls	r2, r3, #5
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	4413      	add	r3, r2
 80087ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b2:	691a      	ldr	r2, [r3, #16]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	69db      	ldr	r3, [r3, #28]
 80087b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087bc:	6939      	ldr	r1, [r7, #16]
 80087be:	0148      	lsls	r0, r1, #5
 80087c0:	6979      	ldr	r1, [r7, #20]
 80087c2:	4401      	add	r1, r0
 80087c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80087c8:	4313      	orrs	r3, r2
 80087ca:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80087cc:	79fb      	ldrb	r3, [r7, #7]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d10d      	bne.n	80087ee <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d009      	beq.n	80087ee <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	6919      	ldr	r1, [r3, #16]
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	015a      	lsls	r2, r3, #5
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	4413      	add	r3, r2
 80087e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ea:	460a      	mov	r2, r1
 80087ec:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	015a      	lsls	r2, r3, #5
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	4413      	add	r3, r2
 80087f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	0151      	lsls	r1, r2, #5
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	440a      	add	r2, r1
 8008804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008808:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800880c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	371c      	adds	r7, #28
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800881c:	b480      	push	{r7}
 800881e:	b087      	sub	sp, #28
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	785b      	ldrb	r3, [r3, #1]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d14a      	bne.n	80088d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	015a      	lsls	r2, r3, #5
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	4413      	add	r3, r2
 8008844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800884e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008852:	f040 8086 	bne.w	8008962 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	7812      	ldrb	r2, [r2, #0]
 800886a:	0151      	lsls	r1, r2, #5
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	440a      	add	r2, r1
 8008870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008874:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008878:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	7812      	ldrb	r2, [r2, #0]
 800888e:	0151      	lsls	r1, r2, #5
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	440a      	add	r2, r1
 8008894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008898:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800889c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3301      	adds	r3, #1
 80088a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d902      	bls.n	80088b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	75fb      	strb	r3, [r7, #23]
          break;
 80088b2:	e056      	b.n	8008962 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088cc:	d0e7      	beq.n	800889e <USB_EPStopXfer+0x82>
 80088ce:	e048      	b.n	8008962 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	015a      	lsls	r2, r3, #5
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	4413      	add	r3, r2
 80088da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088e8:	d13b      	bne.n	8008962 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	015a      	lsls	r2, r3, #5
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	7812      	ldrb	r2, [r2, #0]
 80088fe:	0151      	lsls	r1, r2, #5
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	440a      	add	r2, r1
 8008904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008908:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800890c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	683a      	ldr	r2, [r7, #0]
 8008920:	7812      	ldrb	r2, [r2, #0]
 8008922:	0151      	lsls	r1, r2, #5
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	440a      	add	r2, r1
 8008928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800892c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008930:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	3301      	adds	r3, #1
 8008936:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f242 7210 	movw	r2, #10000	; 0x2710
 800893e:	4293      	cmp	r3, r2
 8008940:	d902      	bls.n	8008948 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	75fb      	strb	r3, [r7, #23]
          break;
 8008946:	e00c      	b.n	8008962 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	4413      	add	r3, r2
 8008952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800895c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008960:	d0e7      	beq.n	8008932 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008962:	7dfb      	ldrb	r3, [r7, #23]
}
 8008964:	4618      	mov	r0, r3
 8008966:	371c      	adds	r7, #28
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008970:	b480      	push	{r7}
 8008972:	b089      	sub	sp, #36	; 0x24
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	4611      	mov	r1, r2
 800897c:	461a      	mov	r2, r3
 800897e:	460b      	mov	r3, r1
 8008980:	71fb      	strb	r3, [r7, #7]
 8008982:	4613      	mov	r3, r2
 8008984:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800898e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008992:	2b00      	cmp	r3, #0
 8008994:	d123      	bne.n	80089de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008996:	88bb      	ldrh	r3, [r7, #4]
 8008998:	3303      	adds	r3, #3
 800899a:	089b      	lsrs	r3, r3, #2
 800899c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800899e:	2300      	movs	r3, #0
 80089a0:	61bb      	str	r3, [r7, #24]
 80089a2:	e018      	b.n	80089d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80089a4:	79fb      	ldrb	r3, [r7, #7]
 80089a6:	031a      	lsls	r2, r3, #12
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	4413      	add	r3, r2
 80089ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089b0:	461a      	mov	r2, r3
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	3301      	adds	r3, #1
 80089bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	3301      	adds	r3, #1
 80089c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	3301      	adds	r3, #1
 80089c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	3301      	adds	r3, #1
 80089ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	3301      	adds	r3, #1
 80089d4:	61bb      	str	r3, [r7, #24]
 80089d6:	69ba      	ldr	r2, [r7, #24]
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d3e2      	bcc.n	80089a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3724      	adds	r7, #36	; 0x24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b08b      	sub	sp, #44	; 0x2c
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	4613      	mov	r3, r2
 80089f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008a02:	88fb      	ldrh	r3, [r7, #6]
 8008a04:	089b      	lsrs	r3, r3, #2
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008a0a:	88fb      	ldrh	r3, [r7, #6]
 8008a0c:	f003 0303 	and.w	r3, r3, #3
 8008a10:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008a12:	2300      	movs	r3, #0
 8008a14:	623b      	str	r3, [r7, #32]
 8008a16:	e014      	b.n	8008a42 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	3301      	adds	r3, #1
 8008a28:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	3301      	adds	r3, #1
 8008a34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	3301      	adds	r3, #1
 8008a3a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008a3c:	6a3b      	ldr	r3, [r7, #32]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	623b      	str	r3, [r7, #32]
 8008a42:	6a3a      	ldr	r2, [r7, #32]
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d3e6      	bcc.n	8008a18 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a4a:	8bfb      	ldrh	r3, [r7, #30]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d01e      	beq.n	8008a8e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	f107 0310 	add.w	r3, r7, #16
 8008a60:	6812      	ldr	r2, [r2, #0]
 8008a62:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	00db      	lsls	r3, r3, #3
 8008a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a74:	701a      	strb	r2, [r3, #0]
      i++;
 8008a76:	6a3b      	ldr	r3, [r7, #32]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7e:	3301      	adds	r3, #1
 8008a80:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008a82:	8bfb      	ldrh	r3, [r7, #30]
 8008a84:	3b01      	subs	r3, #1
 8008a86:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a88:	8bfb      	ldrh	r3, [r7, #30]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1ea      	bne.n	8008a64 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	372c      	adds	r7, #44	; 0x2c
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	785b      	ldrb	r3, [r3, #1]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d12c      	bne.n	8008b12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	db12      	blt.n	8008af0 <USB_EPSetStall+0x54>
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00f      	beq.n	8008af0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	015a      	lsls	r2, r3, #5
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	0151      	lsls	r1, r2, #5
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	440a      	add	r2, r1
 8008ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008aee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	015a      	lsls	r2, r3, #5
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	4413      	add	r3, r2
 8008af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	0151      	lsls	r1, r2, #5
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	440a      	add	r2, r1
 8008b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	e02b      	b.n	8008b6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	015a      	lsls	r2, r3, #5
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	4413      	add	r3, r2
 8008b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	db12      	blt.n	8008b4a <USB_EPSetStall+0xae>
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00f      	beq.n	8008b4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	015a      	lsls	r2, r3, #5
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	4413      	add	r3, r2
 8008b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	0151      	lsls	r1, r2, #5
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	440a      	add	r2, r1
 8008b40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	015a      	lsls	r2, r3, #5
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68ba      	ldr	r2, [r7, #8]
 8008b5a:	0151      	lsls	r1, r2, #5
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	440a      	add	r2, r1
 8008b60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	785b      	ldrb	r3, [r3, #1]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d128      	bne.n	8008be6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	0151      	lsls	r1, r2, #5
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	440a      	add	r2, r1
 8008baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	791b      	ldrb	r3, [r3, #4]
 8008bb8:	2b03      	cmp	r3, #3
 8008bba:	d003      	beq.n	8008bc4 <USB_EPClearStall+0x4c>
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	791b      	ldrb	r3, [r3, #4]
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d138      	bne.n	8008c36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	0151      	lsls	r1, r2, #5
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	440a      	add	r2, r1
 8008bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008be2:	6013      	str	r3, [r2, #0]
 8008be4:	e027      	b.n	8008c36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	015a      	lsls	r2, r3, #5
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	0151      	lsls	r1, r2, #5
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	440a      	add	r2, r1
 8008bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	791b      	ldrb	r3, [r3, #4]
 8008c0a:	2b03      	cmp	r3, #3
 8008c0c:	d003      	beq.n	8008c16 <USB_EPClearStall+0x9e>
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	791b      	ldrb	r3, [r3, #4]
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d10f      	bne.n	8008c36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	015a      	lsls	r2, r3, #5
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68ba      	ldr	r2, [r7, #8]
 8008c26:	0151      	lsls	r1, r2, #5
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	440a      	add	r2, r1
 8008c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	78fb      	ldrb	r3, [r7, #3]
 8008c72:	011b      	lsls	r3, r3, #4
 8008c74:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008c78:	68f9      	ldr	r1, [r7, #12]
 8008c7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3714      	adds	r7, #20
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008caa:	f023 0303 	bic.w	r3, r3, #3
 8008cae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cbe:	f023 0302 	bic.w	r3, r3, #2
 8008cc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b085      	sub	sp, #20
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cec:	f023 0303 	bic.w	r3, r3, #3
 8008cf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d00:	f043 0302 	orr.w	r3, r3, #2
 8008d04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3714      	adds	r7, #20
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	4013      	ands	r3, r2
 8008d2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b085      	sub	sp, #20
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d56:	69db      	ldr	r3, [r3, #28]
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	0c1b      	lsrs	r3, r3, #16
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b085      	sub	sp, #20
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	4013      	ands	r3, r2
 8008d90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	b29b      	uxth	r3, r3
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008da2:	b480      	push	{r7}
 8008da4:	b085      	sub	sp, #20
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	460b      	mov	r3, r1
 8008dac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008db2:	78fb      	ldrb	r3, [r7, #3]
 8008db4:	015a      	lsls	r2, r3, #5
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	4413      	add	r3, r2
 8008dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	4013      	ands	r3, r2
 8008dce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008dd0:	68bb      	ldr	r3, [r7, #8]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008dde:	b480      	push	{r7}
 8008de0:	b087      	sub	sp, #28
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	460b      	mov	r3, r1
 8008de8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008e02:	78fb      	ldrb	r3, [r7, #3]
 8008e04:	f003 030f 	and.w	r3, r3, #15
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e0e:	01db      	lsls	r3, r3, #7
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008e18:	78fb      	ldrb	r3, [r7, #3]
 8008e1a:	015a      	lsls	r2, r3, #5
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	4013      	ands	r3, r2
 8008e2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	371c      	adds	r7, #28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b083      	sub	sp, #12
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	695b      	ldr	r3, [r3, #20]
 8008e46:	f003 0301 	and.w	r3, r3, #1
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008e56:	b480      	push	{r7}
 8008e58:	b085      	sub	sp, #20
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008e74:	f023 0307 	bic.w	r3, r3, #7
 8008e78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b087      	sub	sp, #28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	607a      	str	r2, [r7, #4]
 8008ea8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	333c      	adds	r3, #60	; 0x3c
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	4a26      	ldr	r2, [pc, #152]	; (8008f54 <USB_EP0_OutStart+0xb8>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d90a      	bls.n	8008ed6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ecc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ed0:	d101      	bne.n	8008ed6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	e037      	b.n	8008f46 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008edc:	461a      	mov	r2, r3
 8008ede:	2300      	movs	r3, #0
 8008ee0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ef0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ef4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f04:	f043 0318 	orr.w	r3, r3, #24
 8008f08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f18:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008f1c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008f1e:	7afb      	ldrb	r3, [r7, #11]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d10f      	bne.n	8008f44 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f3e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008f42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	371c      	adds	r7, #28
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	4f54300a 	.word	0x4f54300a

08008f58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f60:	2300      	movs	r3, #0
 8008f62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	3301      	adds	r3, #1
 8008f68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	4a13      	ldr	r2, [pc, #76]	; (8008fbc <USB_CoreReset+0x64>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d901      	bls.n	8008f76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f72:	2303      	movs	r3, #3
 8008f74:	e01b      	b.n	8008fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	daf2      	bge.n	8008f64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	f043 0201 	orr.w	r2, r3, #1
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	3301      	adds	r3, #1
 8008f92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4a09      	ldr	r2, [pc, #36]	; (8008fbc <USB_CoreReset+0x64>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d901      	bls.n	8008fa0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e006      	b.n	8008fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d0f0      	beq.n	8008f8e <USB_CoreReset+0x36>

  return HAL_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3714      	adds	r7, #20
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	00030d40 	.word	0x00030d40

08008fc0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008fc4:	4904      	ldr	r1, [pc, #16]	; (8008fd8 <MX_FATFS_Init+0x18>)
 8008fc6:	4805      	ldr	r0, [pc, #20]	; (8008fdc <MX_FATFS_Init+0x1c>)
 8008fc8:	f004 ffec 	bl	800dfa4 <FATFS_LinkDriver>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	461a      	mov	r2, r3
 8008fd0:	4b03      	ldr	r3, [pc, #12]	; (8008fe0 <MX_FATFS_Init+0x20>)
 8008fd2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008fd4:	bf00      	nop
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	200010bc 	.word	0x200010bc
 8008fdc:	200004f8 	.word	0x200004f8
 8008fe0:	200010b8 	.word	0x200010b8

08008fe4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008fe8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return (mem_init(pdrv));
 8008ffe:	79fb      	ldrb	r3, [r7, #7]
 8009000:	4618      	mov	r0, r3
 8009002:	f7f8 fcdb 	bl	80019bc <mem_init>
 8009006:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	4603      	mov	r3, r0
 8009018:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return (mem_getstatus(pdrv));
 800901a:	79fb      	ldrb	r3, [r7, #7]
 800901c:	4618      	mov	r0, r3
 800901e:	f7f8 fce5 	bl	80019ec <mem_getstatus>
 8009022:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009024:	4618      	mov	r0, r3
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	607a      	str	r2, [r7, #4]
 8009036:	603b      	str	r3, [r7, #0]
 8009038:	4603      	mov	r3, r0
 800903a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return (mem_read(pdrv, buff, sector, count));
 800903c:	7bf8      	ldrb	r0, [r7, #15]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	68b9      	ldr	r1, [r7, #8]
 8009044:	f7f8 fce2 	bl	8001a0c <mem_read>
 8009048:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b084      	sub	sp, #16
 8009056:	af00      	add	r7, sp, #0
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
 800905c:	603b      	str	r3, [r7, #0]
 800905e:	4603      	mov	r3, r0
 8009060:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return mem_write(pdrv, buff, sector, count);
 8009062:	7bf8      	ldrb	r0, [r7, #15]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	68b9      	ldr	r1, [r7, #8]
 800906a:	f7f8 fd09 	bl	8001a80 <mem_write>
 800906e:	4603      	mov	r3, r0
 8009070:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
	...

0800907c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	4603      	mov	r3, r0
 8009084:	603a      	str	r2, [r7, #0]
 8009086:	71fb      	strb	r3, [r7, #7]
 8009088:	460b      	mov	r3, r1
 800908a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	73fb      	strb	r3, [r7, #15]

    switch (cmd) {
 8009090:	79bb      	ldrb	r3, [r7, #6]
 8009092:	2b03      	cmp	r3, #3
 8009094:	d829      	bhi.n	80090ea <USER_ioctl+0x6e>
 8009096:	a201      	add	r2, pc, #4	; (adr r2, 800909c <USER_ioctl+0x20>)
 8009098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909c:	080090d5 	.word	0x080090d5
 80090a0:	080090ad 	.word	0x080090ad
 80090a4:	080090bb 	.word	0x080090bb
 80090a8:	080090c9 	.word	0x080090c9
		case GET_SECTOR_COUNT:
			*(DWORD*)buff = 65536;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80090b2:	601a      	str	r2, [r3, #0]
			res = RES_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73fb      	strb	r3, [r7, #15]
			break;
 80090b8:	e017      	b.n	80090ea <USER_ioctl+0x6e>
		case GET_SECTOR_SIZE:
			*(DWORD*)buff = SECTOR_SIZE;
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090c0:	601a      	str	r2, [r3, #0]
			res = RES_OK;
 80090c2:	2300      	movs	r3, #0
 80090c4:	73fb      	strb	r3, [r7, #15]
			break;
 80090c6:	e010      	b.n	80090ea <USER_ioctl+0x6e>
		case GET_BLOCK_SIZE:
			*(DWORD*) buff = 64;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	2240      	movs	r2, #64	; 0x40
 80090cc:	601a      	str	r2, [r3, #0]
			res = RES_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	73fb      	strb	r3, [r7, #15]
			break;
 80090d2:	e00a      	b.n	80090ea <USER_ioctl+0x6e>
		case CTRL_SYNC:
			if (!(STAT_READ(STAT_REG3)&0x01)) {
 80090d4:	20c0      	movs	r0, #192	; 0xc0
 80090d6:	f7f8 fa4f 	bl	8001578 <STAT_READ>
 80090da:	4603      	mov	r3, r0
 80090dc:	f003 0301 	and.w	r3, r3, #1
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <USER_ioctl+0x6c>
				res = RES_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	73fb      	strb	r3, [r7, #15]
			}
			break;
 80090e8:	bf00      	nop
    }
    return res;
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009100:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009104:	f009 f8e6 	bl	80122d4 <USBD_static_malloc>
 8009108:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d109      	bne.n	8009124 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	32b0      	adds	r2, #176	; 0xb0
 800911a:	2100      	movs	r1, #0
 800911c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009120:	2302      	movs	r3, #2
 8009122:	e0d4      	b.n	80092ce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009124:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009128:	2100      	movs	r1, #0
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f009 f95e 	bl	80123ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	32b0      	adds	r2, #176	; 0xb0
 800913a:	68f9      	ldr	r1, [r7, #12]
 800913c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	32b0      	adds	r2, #176	; 0xb0
 800914a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	7c1b      	ldrb	r3, [r3, #16]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d138      	bne.n	80091ce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800915c:	4b5e      	ldr	r3, [pc, #376]	; (80092d8 <USBD_CDC_Init+0x1e4>)
 800915e:	7819      	ldrb	r1, [r3, #0]
 8009160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009164:	2202      	movs	r2, #2
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f008 ff91 	bl	801208e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800916c:	4b5a      	ldr	r3, [pc, #360]	; (80092d8 <USBD_CDC_Init+0x1e4>)
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	f003 020f 	and.w	r2, r3, #15
 8009174:	6879      	ldr	r1, [r7, #4]
 8009176:	4613      	mov	r3, r2
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	4413      	add	r3, r2
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	440b      	add	r3, r1
 8009180:	3324      	adds	r3, #36	; 0x24
 8009182:	2201      	movs	r2, #1
 8009184:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009186:	4b55      	ldr	r3, [pc, #340]	; (80092dc <USBD_CDC_Init+0x1e8>)
 8009188:	7819      	ldrb	r1, [r3, #0]
 800918a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800918e:	2202      	movs	r2, #2
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f008 ff7c 	bl	801208e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009196:	4b51      	ldr	r3, [pc, #324]	; (80092dc <USBD_CDC_Init+0x1e8>)
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	f003 020f 	and.w	r2, r3, #15
 800919e:	6879      	ldr	r1, [r7, #4]
 80091a0:	4613      	mov	r3, r2
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	440b      	add	r3, r1
 80091aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80091ae:	2201      	movs	r2, #1
 80091b0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80091b2:	4b4b      	ldr	r3, [pc, #300]	; (80092e0 <USBD_CDC_Init+0x1ec>)
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	f003 020f 	and.w	r2, r3, #15
 80091ba:	6879      	ldr	r1, [r7, #4]
 80091bc:	4613      	mov	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4413      	add	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	440b      	add	r3, r1
 80091c6:	3326      	adds	r3, #38	; 0x26
 80091c8:	2210      	movs	r2, #16
 80091ca:	801a      	strh	r2, [r3, #0]
 80091cc:	e035      	b.n	800923a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80091ce:	4b42      	ldr	r3, [pc, #264]	; (80092d8 <USBD_CDC_Init+0x1e4>)
 80091d0:	7819      	ldrb	r1, [r3, #0]
 80091d2:	2340      	movs	r3, #64	; 0x40
 80091d4:	2202      	movs	r2, #2
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f008 ff59 	bl	801208e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80091dc:	4b3e      	ldr	r3, [pc, #248]	; (80092d8 <USBD_CDC_Init+0x1e4>)
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	f003 020f 	and.w	r2, r3, #15
 80091e4:	6879      	ldr	r1, [r7, #4]
 80091e6:	4613      	mov	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	440b      	add	r3, r1
 80091f0:	3324      	adds	r3, #36	; 0x24
 80091f2:	2201      	movs	r2, #1
 80091f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80091f6:	4b39      	ldr	r3, [pc, #228]	; (80092dc <USBD_CDC_Init+0x1e8>)
 80091f8:	7819      	ldrb	r1, [r3, #0]
 80091fa:	2340      	movs	r3, #64	; 0x40
 80091fc:	2202      	movs	r2, #2
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f008 ff45 	bl	801208e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009204:	4b35      	ldr	r3, [pc, #212]	; (80092dc <USBD_CDC_Init+0x1e8>)
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	f003 020f 	and.w	r2, r3, #15
 800920c:	6879      	ldr	r1, [r7, #4]
 800920e:	4613      	mov	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	440b      	add	r3, r1
 8009218:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800921c:	2201      	movs	r2, #1
 800921e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009220:	4b2f      	ldr	r3, [pc, #188]	; (80092e0 <USBD_CDC_Init+0x1ec>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	f003 020f 	and.w	r2, r3, #15
 8009228:	6879      	ldr	r1, [r7, #4]
 800922a:	4613      	mov	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	440b      	add	r3, r1
 8009234:	3326      	adds	r3, #38	; 0x26
 8009236:	2210      	movs	r2, #16
 8009238:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800923a:	4b29      	ldr	r3, [pc, #164]	; (80092e0 <USBD_CDC_Init+0x1ec>)
 800923c:	7819      	ldrb	r1, [r3, #0]
 800923e:	2308      	movs	r3, #8
 8009240:	2203      	movs	r2, #3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f008 ff23 	bl	801208e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009248:	4b25      	ldr	r3, [pc, #148]	; (80092e0 <USBD_CDC_Init+0x1ec>)
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	f003 020f 	and.w	r2, r3, #15
 8009250:	6879      	ldr	r1, [r7, #4]
 8009252:	4613      	mov	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4413      	add	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	440b      	add	r3, r1
 800925c:	3324      	adds	r3, #36	; 0x24
 800925e:	2201      	movs	r2, #1
 8009260:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	33b0      	adds	r3, #176	; 0xb0
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4413      	add	r3, r2
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009298:	2302      	movs	r3, #2
 800929a:	e018      	b.n	80092ce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	7c1b      	ldrb	r3, [r3, #16]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10a      	bne.n	80092ba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80092a4:	4b0d      	ldr	r3, [pc, #52]	; (80092dc <USBD_CDC_Init+0x1e8>)
 80092a6:	7819      	ldrb	r1, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f008 ffda 	bl	801226c <USBD_LL_PrepareReceive>
 80092b8:	e008      	b.n	80092cc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80092ba:	4b08      	ldr	r3, [pc, #32]	; (80092dc <USBD_CDC_Init+0x1e8>)
 80092bc:	7819      	ldrb	r1, [r3, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092c4:	2340      	movs	r3, #64	; 0x40
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f008 ffd0 	bl	801226c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	20000593 	.word	0x20000593
 80092dc:	20000594 	.word	0x20000594
 80092e0:	20000595 	.word	0x20000595

080092e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80092f0:	4b3a      	ldr	r3, [pc, #232]	; (80093dc <USBD_CDC_DeInit+0xf8>)
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	4619      	mov	r1, r3
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f008 feef 	bl	80120da <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80092fc:	4b37      	ldr	r3, [pc, #220]	; (80093dc <USBD_CDC_DeInit+0xf8>)
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	f003 020f 	and.w	r2, r3, #15
 8009304:	6879      	ldr	r1, [r7, #4]
 8009306:	4613      	mov	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	4413      	add	r3, r2
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	440b      	add	r3, r1
 8009310:	3324      	adds	r3, #36	; 0x24
 8009312:	2200      	movs	r2, #0
 8009314:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009316:	4b32      	ldr	r3, [pc, #200]	; (80093e0 <USBD_CDC_DeInit+0xfc>)
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f008 fedc 	bl	80120da <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009322:	4b2f      	ldr	r3, [pc, #188]	; (80093e0 <USBD_CDC_DeInit+0xfc>)
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	f003 020f 	and.w	r2, r3, #15
 800932a:	6879      	ldr	r1, [r7, #4]
 800932c:	4613      	mov	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	440b      	add	r3, r1
 8009336:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800933a:	2200      	movs	r2, #0
 800933c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800933e:	4b29      	ldr	r3, [pc, #164]	; (80093e4 <USBD_CDC_DeInit+0x100>)
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f008 fec8 	bl	80120da <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800934a:	4b26      	ldr	r3, [pc, #152]	; (80093e4 <USBD_CDC_DeInit+0x100>)
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	f003 020f 	and.w	r2, r3, #15
 8009352:	6879      	ldr	r1, [r7, #4]
 8009354:	4613      	mov	r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4413      	add	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	440b      	add	r3, r1
 800935e:	3324      	adds	r3, #36	; 0x24
 8009360:	2200      	movs	r2, #0
 8009362:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009364:	4b1f      	ldr	r3, [pc, #124]	; (80093e4 <USBD_CDC_DeInit+0x100>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	f003 020f 	and.w	r2, r3, #15
 800936c:	6879      	ldr	r1, [r7, #4]
 800936e:	4613      	mov	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	440b      	add	r3, r1
 8009378:	3326      	adds	r3, #38	; 0x26
 800937a:	2200      	movs	r2, #0
 800937c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	32b0      	adds	r2, #176	; 0xb0
 8009388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d01f      	beq.n	80093d0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	33b0      	adds	r3, #176	; 0xb0
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4413      	add	r3, r2
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	32b0      	adds	r2, #176	; 0xb0
 80093ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f008 ff9c 	bl	80122f0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	32b0      	adds	r2, #176	; 0xb0
 80093c2:	2100      	movs	r1, #0
 80093c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20000593 	.word	0x20000593
 80093e0:	20000594 	.word	0x20000594
 80093e4:	20000595 	.word	0x20000595

080093e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	32b0      	adds	r2, #176	; 0xb0
 80093fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009400:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009402:	2300      	movs	r3, #0
 8009404:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009406:	2300      	movs	r3, #0
 8009408:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d101      	bne.n	8009418 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009414:	2303      	movs	r3, #3
 8009416:	e0bf      	b.n	8009598 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009420:	2b00      	cmp	r3, #0
 8009422:	d050      	beq.n	80094c6 <USBD_CDC_Setup+0xde>
 8009424:	2b20      	cmp	r3, #32
 8009426:	f040 80af 	bne.w	8009588 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	88db      	ldrh	r3, [r3, #6]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d03a      	beq.n	80094a8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	b25b      	sxtb	r3, r3
 8009438:	2b00      	cmp	r3, #0
 800943a:	da1b      	bge.n	8009474 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	33b0      	adds	r3, #176	; 0xb0
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009452:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009454:	683a      	ldr	r2, [r7, #0]
 8009456:	88d2      	ldrh	r2, [r2, #6]
 8009458:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	88db      	ldrh	r3, [r3, #6]
 800945e:	2b07      	cmp	r3, #7
 8009460:	bf28      	it	cs
 8009462:	2307      	movcs	r3, #7
 8009464:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	89fa      	ldrh	r2, [r7, #14]
 800946a:	4619      	mov	r1, r3
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f001 fd89 	bl	800af84 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009472:	e090      	b.n	8009596 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	785a      	ldrb	r2, [r3, #1]
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	88db      	ldrh	r3, [r3, #6]
 8009482:	2b3f      	cmp	r3, #63	; 0x3f
 8009484:	d803      	bhi.n	800948e <USBD_CDC_Setup+0xa6>
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	88db      	ldrh	r3, [r3, #6]
 800948a:	b2da      	uxtb	r2, r3
 800948c:	e000      	b.n	8009490 <USBD_CDC_Setup+0xa8>
 800948e:	2240      	movs	r2, #64	; 0x40
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009496:	6939      	ldr	r1, [r7, #16]
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800949e:	461a      	mov	r2, r3
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f001 fd9b 	bl	800afdc <USBD_CtlPrepareRx>
      break;
 80094a6:	e076      	b.n	8009596 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	33b0      	adds	r3, #176	; 0xb0
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	7850      	ldrb	r0, [r2, #1]
 80094be:	2200      	movs	r2, #0
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	4798      	blx	r3
      break;
 80094c4:	e067      	b.n	8009596 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	785b      	ldrb	r3, [r3, #1]
 80094ca:	2b0b      	cmp	r3, #11
 80094cc:	d851      	bhi.n	8009572 <USBD_CDC_Setup+0x18a>
 80094ce:	a201      	add	r2, pc, #4	; (adr r2, 80094d4 <USBD_CDC_Setup+0xec>)
 80094d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d4:	08009505 	.word	0x08009505
 80094d8:	08009581 	.word	0x08009581
 80094dc:	08009573 	.word	0x08009573
 80094e0:	08009573 	.word	0x08009573
 80094e4:	08009573 	.word	0x08009573
 80094e8:	08009573 	.word	0x08009573
 80094ec:	08009573 	.word	0x08009573
 80094f0:	08009573 	.word	0x08009573
 80094f4:	08009573 	.word	0x08009573
 80094f8:	08009573 	.word	0x08009573
 80094fc:	0800952f 	.word	0x0800952f
 8009500:	08009559 	.word	0x08009559
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800950a:	b2db      	uxtb	r3, r3
 800950c:	2b03      	cmp	r3, #3
 800950e:	d107      	bne.n	8009520 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009510:	f107 030a 	add.w	r3, r7, #10
 8009514:	2202      	movs	r2, #2
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f001 fd33 	bl	800af84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800951e:	e032      	b.n	8009586 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f001 fcbd 	bl	800aea2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009528:	2303      	movs	r3, #3
 800952a:	75fb      	strb	r3, [r7, #23]
          break;
 800952c:	e02b      	b.n	8009586 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b03      	cmp	r3, #3
 8009538:	d107      	bne.n	800954a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800953a:	f107 030d 	add.w	r3, r7, #13
 800953e:	2201      	movs	r2, #1
 8009540:	4619      	mov	r1, r3
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f001 fd1e 	bl	800af84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009548:	e01d      	b.n	8009586 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f001 fca8 	bl	800aea2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009552:	2303      	movs	r3, #3
 8009554:	75fb      	strb	r3, [r7, #23]
          break;
 8009556:	e016      	b.n	8009586 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800955e:	b2db      	uxtb	r3, r3
 8009560:	2b03      	cmp	r3, #3
 8009562:	d00f      	beq.n	8009584 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f001 fc9b 	bl	800aea2 <USBD_CtlError>
            ret = USBD_FAIL;
 800956c:	2303      	movs	r3, #3
 800956e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009570:	e008      	b.n	8009584 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f001 fc94 	bl	800aea2 <USBD_CtlError>
          ret = USBD_FAIL;
 800957a:	2303      	movs	r3, #3
 800957c:	75fb      	strb	r3, [r7, #23]
          break;
 800957e:	e002      	b.n	8009586 <USBD_CDC_Setup+0x19e>
          break;
 8009580:	bf00      	nop
 8009582:	e008      	b.n	8009596 <USBD_CDC_Setup+0x1ae>
          break;
 8009584:	bf00      	nop
      }
      break;
 8009586:	e006      	b.n	8009596 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009588:	6839      	ldr	r1, [r7, #0]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f001 fc89 	bl	800aea2 <USBD_CtlError>
      ret = USBD_FAIL;
 8009590:	2303      	movs	r3, #3
 8009592:	75fb      	strb	r3, [r7, #23]
      break;
 8009594:	bf00      	nop
  }

  return (uint8_t)ret;
 8009596:	7dfb      	ldrb	r3, [r7, #23]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3718      	adds	r7, #24
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	460b      	mov	r3, r1
 80095aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	32b0      	adds	r2, #176	; 0xb0
 80095be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d101      	bne.n	80095ca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e065      	b.n	8009696 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	32b0      	adds	r2, #176	; 0xb0
 80095d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80095da:	78fb      	ldrb	r3, [r7, #3]
 80095dc:	f003 020f 	and.w	r2, r3, #15
 80095e0:	6879      	ldr	r1, [r7, #4]
 80095e2:	4613      	mov	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	440b      	add	r3, r1
 80095ec:	3318      	adds	r3, #24
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d02f      	beq.n	8009654 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80095f4:	78fb      	ldrb	r3, [r7, #3]
 80095f6:	f003 020f 	and.w	r2, r3, #15
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	4613      	mov	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	440b      	add	r3, r1
 8009606:	3318      	adds	r3, #24
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	78fb      	ldrb	r3, [r7, #3]
 800960c:	f003 010f 	and.w	r1, r3, #15
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	460b      	mov	r3, r1
 8009614:	00db      	lsls	r3, r3, #3
 8009616:	440b      	add	r3, r1
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4403      	add	r3, r0
 800961c:	3348      	adds	r3, #72	; 0x48
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	fbb2 f1f3 	udiv	r1, r2, r3
 8009624:	fb01 f303 	mul.w	r3, r1, r3
 8009628:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800962a:	2b00      	cmp	r3, #0
 800962c:	d112      	bne.n	8009654 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800962e:	78fb      	ldrb	r3, [r7, #3]
 8009630:	f003 020f 	and.w	r2, r3, #15
 8009634:	6879      	ldr	r1, [r7, #4]
 8009636:	4613      	mov	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	440b      	add	r3, r1
 8009640:	3318      	adds	r3, #24
 8009642:	2200      	movs	r2, #0
 8009644:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009646:	78f9      	ldrb	r1, [r7, #3]
 8009648:	2300      	movs	r3, #0
 800964a:	2200      	movs	r2, #0
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f008 fdec 	bl	801222a <USBD_LL_Transmit>
 8009652:	e01f      	b.n	8009694 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	2200      	movs	r2, #0
 8009658:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	33b0      	adds	r3, #176	; 0xb0
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d010      	beq.n	8009694 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	33b0      	adds	r3, #176	; 0xb0
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4413      	add	r3, r2
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009690:	78fa      	ldrb	r2, [r7, #3]
 8009692:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b084      	sub	sp, #16
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	460b      	mov	r3, r1
 80096a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	32b0      	adds	r2, #176	; 0xb0
 80096b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	32b0      	adds	r2, #176	; 0xb0
 80096c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d101      	bne.n	80096d0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80096cc:	2303      	movs	r3, #3
 80096ce:	e01a      	b.n	8009706 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80096d0:	78fb      	ldrb	r3, [r7, #3]
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f008 fdea 	bl	80122ae <USBD_LL_GetRxDataSize>
 80096da:	4602      	mov	r2, r0
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	33b0      	adds	r3, #176	; 0xb0
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	4413      	add	r3, r2
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80096fa:	68fa      	ldr	r2, [r7, #12]
 80096fc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009700:	4611      	mov	r1, r2
 8009702:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b084      	sub	sp, #16
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	32b0      	adds	r2, #176	; 0xb0
 8009720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009724:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d101      	bne.n	8009730 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800972c:	2303      	movs	r3, #3
 800972e:	e025      	b.n	800977c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	33b0      	adds	r3, #176	; 0xb0
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	4413      	add	r3, r2
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d01a      	beq.n	800977a <USBD_CDC_EP0_RxReady+0x6c>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800974a:	2bff      	cmp	r3, #255	; 0xff
 800974c:	d015      	beq.n	800977a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	33b0      	adds	r3, #176	; 0xb0
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4413      	add	r3, r2
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009766:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800976e:	b292      	uxth	r2, r2
 8009770:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	22ff      	movs	r2, #255	; 0xff
 8009776:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b086      	sub	sp, #24
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800978c:	2182      	movs	r1, #130	; 0x82
 800978e:	4818      	ldr	r0, [pc, #96]	; (80097f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009790:	f000 fd4f 	bl	800a232 <USBD_GetEpDesc>
 8009794:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009796:	2101      	movs	r1, #1
 8009798:	4815      	ldr	r0, [pc, #84]	; (80097f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800979a:	f000 fd4a 	bl	800a232 <USBD_GetEpDesc>
 800979e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80097a0:	2181      	movs	r1, #129	; 0x81
 80097a2:	4813      	ldr	r0, [pc, #76]	; (80097f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80097a4:	f000 fd45 	bl	800a232 <USBD_GetEpDesc>
 80097a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d002      	beq.n	80097b6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	2210      	movs	r2, #16
 80097b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d006      	beq.n	80097ca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	2200      	movs	r2, #0
 80097c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097c4:	711a      	strb	r2, [r3, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d006      	beq.n	80097de <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097d8:	711a      	strb	r2, [r3, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2243      	movs	r2, #67	; 0x43
 80097e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80097e4:	4b02      	ldr	r3, [pc, #8]	; (80097f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3718      	adds	r7, #24
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	20000550 	.word	0x20000550

080097f4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80097fc:	2182      	movs	r1, #130	; 0x82
 80097fe:	4818      	ldr	r0, [pc, #96]	; (8009860 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009800:	f000 fd17 	bl	800a232 <USBD_GetEpDesc>
 8009804:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009806:	2101      	movs	r1, #1
 8009808:	4815      	ldr	r0, [pc, #84]	; (8009860 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800980a:	f000 fd12 	bl	800a232 <USBD_GetEpDesc>
 800980e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009810:	2181      	movs	r1, #129	; 0x81
 8009812:	4813      	ldr	r0, [pc, #76]	; (8009860 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009814:	f000 fd0d 	bl	800a232 <USBD_GetEpDesc>
 8009818:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	2210      	movs	r2, #16
 8009824:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d006      	beq.n	800983a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	2200      	movs	r2, #0
 8009830:	711a      	strb	r2, [r3, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	f042 0202 	orr.w	r2, r2, #2
 8009838:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d006      	beq.n	800984e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	711a      	strb	r2, [r3, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	f042 0202 	orr.w	r2, r2, #2
 800984c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2243      	movs	r2, #67	; 0x43
 8009852:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009854:	4b02      	ldr	r3, [pc, #8]	; (8009860 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009856:	4618      	mov	r0, r3
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20000550 	.word	0x20000550

08009864 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b086      	sub	sp, #24
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800986c:	2182      	movs	r1, #130	; 0x82
 800986e:	4818      	ldr	r0, [pc, #96]	; (80098d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009870:	f000 fcdf 	bl	800a232 <USBD_GetEpDesc>
 8009874:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009876:	2101      	movs	r1, #1
 8009878:	4815      	ldr	r0, [pc, #84]	; (80098d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800987a:	f000 fcda 	bl	800a232 <USBD_GetEpDesc>
 800987e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009880:	2181      	movs	r1, #129	; 0x81
 8009882:	4813      	ldr	r0, [pc, #76]	; (80098d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009884:	f000 fcd5 	bl	800a232 <USBD_GetEpDesc>
 8009888:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d002      	beq.n	8009896 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	2210      	movs	r2, #16
 8009894:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d006      	beq.n	80098aa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	2200      	movs	r2, #0
 80098a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098a4:	711a      	strb	r2, [r3, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d006      	beq.n	80098be <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098b8:	711a      	strb	r2, [r3, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2243      	movs	r2, #67	; 0x43
 80098c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80098c4:	4b02      	ldr	r3, [pc, #8]	; (80098d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3718      	adds	r7, #24
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	20000550 	.word	0x20000550

080098d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	220a      	movs	r2, #10
 80098e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80098e2:	4b03      	ldr	r3, [pc, #12]	; (80098f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr
 80098f0:	2000050c 	.word	0x2000050c

080098f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d101      	bne.n	8009908 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009904:	2303      	movs	r3, #3
 8009906:	e009      	b.n	800991c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	33b0      	adds	r3, #176	; 0xb0
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	683a      	ldr	r2, [r7, #0]
 8009918:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009928:	b480      	push	{r7}
 800992a:	b087      	sub	sp, #28
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	32b0      	adds	r2, #176	; 0xb0
 800993e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009942:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d101      	bne.n	800994e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800994a:	2303      	movs	r3, #3
 800994c:	e008      	b.n	8009960 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	371c      	adds	r7, #28
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	32b0      	adds	r2, #176	; 0xb0
 8009980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009984:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d101      	bne.n	8009990 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800998c:	2303      	movs	r3, #3
 800998e:	e004      	b.n	800999a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3714      	adds	r7, #20
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
	...

080099a8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	32b0      	adds	r2, #176	; 0xb0
 80099ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099be:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80099c0:	2301      	movs	r3, #1
 80099c2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	32b0      	adds	r2, #176	; 0xb0
 80099ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d101      	bne.n	80099da <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e025      	b.n	8009a26 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d11f      	bne.n	8009a24 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80099ec:	4b10      	ldr	r3, [pc, #64]	; (8009a30 <USBD_CDC_TransmitPacket+0x88>)
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	f003 020f 	and.w	r2, r3, #15
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	4613      	mov	r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4413      	add	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4403      	add	r3, r0
 8009a06:	3318      	adds	r3, #24
 8009a08:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009a0a:	4b09      	ldr	r3, [pc, #36]	; (8009a30 <USBD_CDC_TransmitPacket+0x88>)
 8009a0c:	7819      	ldrb	r1, [r3, #0]
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f008 fc05 	bl	801222a <USBD_LL_Transmit>

    ret = USBD_OK;
 8009a20:	2300      	movs	r3, #0
 8009a22:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	20000593 	.word	0x20000593

08009a34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	32b0      	adds	r2, #176	; 0xb0
 8009a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a4a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	32b0      	adds	r2, #176	; 0xb0
 8009a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d101      	bne.n	8009a62 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	e018      	b.n	8009a94 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	7c1b      	ldrb	r3, [r3, #16]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d10a      	bne.n	8009a80 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a6a:	4b0c      	ldr	r3, [pc, #48]	; (8009a9c <USBD_CDC_ReceivePacket+0x68>)
 8009a6c:	7819      	ldrb	r1, [r3, #0]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f008 fbf7 	bl	801226c <USBD_LL_PrepareReceive>
 8009a7e:	e008      	b.n	8009a92 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a80:	4b06      	ldr	r3, [pc, #24]	; (8009a9c <USBD_CDC_ReceivePacket+0x68>)
 8009a82:	7819      	ldrb	r1, [r3, #0]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a8a:	2340      	movs	r3, #64	; 0x40
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f008 fbed 	bl	801226c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	20000594 	.word	0x20000594

08009aa0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d101      	bne.n	8009ab8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e01f      	b.n	8009af8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d003      	beq.n	8009ade <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	79fa      	ldrb	r2, [r7, #7]
 8009aea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f008 fa67 	bl	8011fc0 <USBD_LL_Init>
 8009af2:	4603      	mov	r3, r0
 8009af4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d101      	bne.n	8009b18 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009b14:	2303      	movs	r3, #3
 8009b16:	e025      	b.n	8009b64 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	32ae      	adds	r2, #174	; 0xae
 8009b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00f      	beq.n	8009b54 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	32ae      	adds	r2, #174	; 0xae
 8009b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b44:	f107 020e 	add.w	r2, r7, #14
 8009b48:	4610      	mov	r0, r2
 8009b4a:	4798      	blx	r3
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009b5a:	1c5a      	adds	r2, r3, #1
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f008 fa6f 	bl	8012058 <USBD_LL_Start>
 8009b7a:	4603      	mov	r3, r0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b8c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b084      	sub	sp, #16
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d009      	beq.n	8009bc8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	78fa      	ldrb	r2, [r7, #3]
 8009bbe:	4611      	mov	r1, r2
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	4798      	blx	r3
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b084      	sub	sp, #16
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	460b      	mov	r3, r1
 8009bdc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	78fa      	ldrb	r2, [r7, #3]
 8009bec:	4611      	mov	r1, r2
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	4798      	blx	r3
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b084      	sub	sp, #16
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f001 f908 	bl	800ae2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009c3a:	f003 031f 	and.w	r3, r3, #31
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d01a      	beq.n	8009c78 <USBD_LL_SetupStage+0x72>
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d822      	bhi.n	8009c8c <USBD_LL_SetupStage+0x86>
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d002      	beq.n	8009c50 <USBD_LL_SetupStage+0x4a>
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d00a      	beq.n	8009c64 <USBD_LL_SetupStage+0x5e>
 8009c4e:	e01d      	b.n	8009c8c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c56:	4619      	mov	r1, r3
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fb5f 	bl	800a31c <USBD_StdDevReq>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	73fb      	strb	r3, [r7, #15]
      break;
 8009c62:	e020      	b.n	8009ca6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fbc7 	bl	800a400 <USBD_StdItfReq>
 8009c72:	4603      	mov	r3, r0
 8009c74:	73fb      	strb	r3, [r7, #15]
      break;
 8009c76:	e016      	b.n	8009ca6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c7e:	4619      	mov	r1, r3
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fc29 	bl	800a4d8 <USBD_StdEPReq>
 8009c86:	4603      	mov	r3, r0
 8009c88:	73fb      	strb	r3, [r7, #15]
      break;
 8009c8a:	e00c      	b.n	8009ca6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009c92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	4619      	mov	r1, r3
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f008 fa3c 	bl	8012118 <USBD_LL_StallEP>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ca4:	bf00      	nop
  }

  return ret;
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	607a      	str	r2, [r7, #4]
 8009cbc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009cc2:	7afb      	ldrb	r3, [r7, #11]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d16e      	bne.n	8009da6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009cce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009cd6:	2b03      	cmp	r3, #3
 8009cd8:	f040 8098 	bne.w	8009e0c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	689a      	ldr	r2, [r3, #8]
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d913      	bls.n	8009d10 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	689a      	ldr	r2, [r3, #8]
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	1ad2      	subs	r2, r2, r3
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	68da      	ldr	r2, [r3, #12]
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	bf28      	it	cs
 8009d02:	4613      	movcs	r3, r2
 8009d04:	461a      	mov	r2, r3
 8009d06:	6879      	ldr	r1, [r7, #4]
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f001 f984 	bl	800b016 <USBD_CtlContinueRx>
 8009d0e:	e07d      	b.n	8009e0c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d16:	f003 031f 	and.w	r3, r3, #31
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d014      	beq.n	8009d48 <USBD_LL_DataOutStage+0x98>
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d81d      	bhi.n	8009d5e <USBD_LL_DataOutStage+0xae>
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d002      	beq.n	8009d2c <USBD_LL_DataOutStage+0x7c>
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d003      	beq.n	8009d32 <USBD_LL_DataOutStage+0x82>
 8009d2a:	e018      	b.n	8009d5e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	75bb      	strb	r3, [r7, #22]
            break;
 8009d30:	e018      	b.n	8009d64 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f000 fa5e 	bl	800a1fe <USBD_CoreFindIF>
 8009d42:	4603      	mov	r3, r0
 8009d44:	75bb      	strb	r3, [r7, #22]
            break;
 8009d46:	e00d      	b.n	8009d64 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	4619      	mov	r1, r3
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f000 fa60 	bl	800a218 <USBD_CoreFindEP>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	75bb      	strb	r3, [r7, #22]
            break;
 8009d5c:	e002      	b.n	8009d64 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	75bb      	strb	r3, [r7, #22]
            break;
 8009d62:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009d64:	7dbb      	ldrb	r3, [r7, #22]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d119      	bne.n	8009d9e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d113      	bne.n	8009d9e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009d76:	7dba      	ldrb	r2, [r7, #22]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	32ae      	adds	r2, #174	; 0xae
 8009d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00b      	beq.n	8009d9e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009d86:	7dba      	ldrb	r2, [r7, #22]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009d8e:	7dba      	ldrb	r2, [r7, #22]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	32ae      	adds	r2, #174	; 0xae
 8009d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f001 f94a 	bl	800b038 <USBD_CtlSendStatus>
 8009da4:	e032      	b.n	8009e0c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009da6:	7afb      	ldrb	r3, [r7, #11]
 8009da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	4619      	mov	r1, r3
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 fa31 	bl	800a218 <USBD_CoreFindEP>
 8009db6:	4603      	mov	r3, r0
 8009db8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009dba:	7dbb      	ldrb	r3, [r7, #22]
 8009dbc:	2bff      	cmp	r3, #255	; 0xff
 8009dbe:	d025      	beq.n	8009e0c <USBD_LL_DataOutStage+0x15c>
 8009dc0:	7dbb      	ldrb	r3, [r7, #22]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d122      	bne.n	8009e0c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b03      	cmp	r3, #3
 8009dd0:	d117      	bne.n	8009e02 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009dd2:	7dba      	ldrb	r2, [r7, #22]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	32ae      	adds	r2, #174	; 0xae
 8009dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00f      	beq.n	8009e02 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009de2:	7dba      	ldrb	r2, [r7, #22]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009dea:	7dba      	ldrb	r2, [r7, #22]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	32ae      	adds	r2, #174	; 0xae
 8009df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df4:	699b      	ldr	r3, [r3, #24]
 8009df6:	7afa      	ldrb	r2, [r7, #11]
 8009df8:	4611      	mov	r1, r2
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	4798      	blx	r3
 8009dfe:	4603      	mov	r3, r0
 8009e00:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009e02:	7dfb      	ldrb	r3, [r7, #23]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d001      	beq.n	8009e0c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009e08:	7dfb      	ldrb	r3, [r7, #23]
 8009e0a:	e000      	b.n	8009e0e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3718      	adds	r7, #24
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b086      	sub	sp, #24
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	60f8      	str	r0, [r7, #12]
 8009e1e:	460b      	mov	r3, r1
 8009e20:	607a      	str	r2, [r7, #4]
 8009e22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009e24:	7afb      	ldrb	r3, [r7, #11]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d16f      	bne.n	8009f0a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	3314      	adds	r3, #20
 8009e2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d15a      	bne.n	8009ef0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	689a      	ldr	r2, [r3, #8]
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d914      	bls.n	8009e70 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	689a      	ldr	r2, [r3, #8]
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	1ad2      	subs	r2, r2, r3
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	461a      	mov	r2, r3
 8009e5a:	6879      	ldr	r1, [r7, #4]
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f001 f8ac 	bl	800afba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e62:	2300      	movs	r3, #0
 8009e64:	2200      	movs	r2, #0
 8009e66:	2100      	movs	r1, #0
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f008 f9ff 	bl	801226c <USBD_LL_PrepareReceive>
 8009e6e:	e03f      	b.n	8009ef0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	68da      	ldr	r2, [r3, #12]
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d11c      	bne.n	8009eb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d316      	bcc.n	8009eb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	685a      	ldr	r2, [r3, #4]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d20f      	bcs.n	8009eb6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009e96:	2200      	movs	r2, #0
 8009e98:	2100      	movs	r1, #0
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	f001 f88d 	bl	800afba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	2200      	movs	r2, #0
 8009eac:	2100      	movs	r1, #0
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f008 f9dc 	bl	801226c <USBD_LL_PrepareReceive>
 8009eb4:	e01c      	b.n	8009ef0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	d10f      	bne.n	8009ee2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d009      	beq.n	8009ee2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ee2:	2180      	movs	r1, #128	; 0x80
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	f008 f917 	bl	8012118 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f001 f8b7 	bl	800b05e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d03a      	beq.n	8009f70 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f7ff fe42 	bl	8009b84 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009f08:	e032      	b.n	8009f70 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009f0a:	7afb      	ldrb	r3, [r7, #11]
 8009f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	4619      	mov	r1, r3
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f000 f97f 	bl	800a218 <USBD_CoreFindEP>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f1e:	7dfb      	ldrb	r3, [r7, #23]
 8009f20:	2bff      	cmp	r3, #255	; 0xff
 8009f22:	d025      	beq.n	8009f70 <USBD_LL_DataInStage+0x15a>
 8009f24:	7dfb      	ldrb	r3, [r7, #23]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d122      	bne.n	8009f70 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	2b03      	cmp	r3, #3
 8009f34:	d11c      	bne.n	8009f70 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009f36:	7dfa      	ldrb	r2, [r7, #23]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	32ae      	adds	r2, #174	; 0xae
 8009f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f40:	695b      	ldr	r3, [r3, #20]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d014      	beq.n	8009f70 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009f46:	7dfa      	ldrb	r2, [r7, #23]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009f4e:	7dfa      	ldrb	r2, [r7, #23]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	32ae      	adds	r2, #174	; 0xae
 8009f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f58:	695b      	ldr	r3, [r3, #20]
 8009f5a:	7afa      	ldrb	r2, [r7, #11]
 8009f5c:	4611      	mov	r1, r2
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	4798      	blx	r3
 8009f62:	4603      	mov	r3, r0
 8009f64:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009f66:	7dbb      	ldrb	r3, [r7, #22]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d001      	beq.n	8009f70 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009f6c:	7dbb      	ldrb	r3, [r7, #22]
 8009f6e:	e000      	b.n	8009f72 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3718      	adds	r7, #24
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b084      	sub	sp, #16
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d014      	beq.n	8009fe0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00e      	beq.n	8009fe0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	6852      	ldr	r2, [r2, #4]
 8009fce:	b2d2      	uxtb	r2, r2
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	4798      	blx	r3
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d001      	beq.n	8009fe0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009fdc:	2303      	movs	r3, #3
 8009fde:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fe0:	2340      	movs	r3, #64	; 0x40
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f008 f851 	bl	801208e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2240      	movs	r2, #64	; 0x40
 8009ff8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ffc:	2340      	movs	r3, #64	; 0x40
 8009ffe:	2200      	movs	r2, #0
 800a000:	2180      	movs	r1, #128	; 0x80
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f008 f843 	bl	801208e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2240      	movs	r2, #64	; 0x40
 800a012:	621a      	str	r2, [r3, #32]

  return ret;
 800a014:	7bfb      	ldrb	r3, [r7, #15]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a01e:	b480      	push	{r7}
 800a020:	b083      	sub	sp, #12
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
 800a026:	460b      	mov	r3, r1
 800a028:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	78fa      	ldrb	r2, [r7, #3]
 800a02e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	370c      	adds	r7, #12
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a03e:	b480      	push	{r7}
 800a040:	b083      	sub	sp, #12
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a04c:	b2da      	uxtb	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2204      	movs	r2, #4
 800a058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	370c      	adds	r7, #12
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr

0800a06a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a06a:	b480      	push	{r7}
 800a06c:	b083      	sub	sp, #12
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	2b04      	cmp	r3, #4
 800a07c:	d106      	bne.n	800a08c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a084:	b2da      	uxtb	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	370c      	adds	r7, #12
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr

0800a09a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b082      	sub	sp, #8
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b03      	cmp	r3, #3
 800a0ac:	d110      	bne.n	800a0d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00b      	beq.n	800a0d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0be:	69db      	ldr	r3, [r3, #28]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d005      	beq.n	800a0d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ca:	69db      	ldr	r3, [r3, #28]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b082      	sub	sp, #8
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	32ae      	adds	r2, #174	; 0xae
 800a0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d101      	bne.n	800a0fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	e01c      	b.n	800a136 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a102:	b2db      	uxtb	r3, r3
 800a104:	2b03      	cmp	r3, #3
 800a106:	d115      	bne.n	800a134 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	32ae      	adds	r2, #174	; 0xae
 800a112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a116:	6a1b      	ldr	r3, [r3, #32]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00b      	beq.n	800a134 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	32ae      	adds	r2, #174	; 0xae
 800a126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a12a:	6a1b      	ldr	r3, [r3, #32]
 800a12c:	78fa      	ldrb	r2, [r7, #3]
 800a12e:	4611      	mov	r1, r2
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b082      	sub	sp, #8
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	460b      	mov	r3, r1
 800a148:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	32ae      	adds	r2, #174	; 0xae
 800a154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d101      	bne.n	800a160 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a15c:	2303      	movs	r3, #3
 800a15e:	e01c      	b.n	800a19a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a166:	b2db      	uxtb	r3, r3
 800a168:	2b03      	cmp	r3, #3
 800a16a:	d115      	bne.n	800a198 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	32ae      	adds	r2, #174	; 0xae
 800a176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00b      	beq.n	800a198 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	32ae      	adds	r2, #174	; 0xae
 800a18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a190:	78fa      	ldrb	r2, [r7, #3]
 800a192:	4611      	mov	r1, r2
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3708      	adds	r7, #8
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a1a2:	b480      	push	{r7}
 800a1a4:	b083      	sub	sp, #12
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00e      	beq.n	800a1f4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	6852      	ldr	r2, [r2, #4]
 800a1e2:	b2d2      	uxtb	r2, r2
 800a1e4:	4611      	mov	r1, r2
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	4798      	blx	r3
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d001      	beq.n	800a1f4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a1fe:	b480      	push	{r7}
 800a200:	b083      	sub	sp, #12
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
 800a206:	460b      	mov	r3, r1
 800a208:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a20a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	460b      	mov	r3, r1
 800a222:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a224:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a226:	4618      	mov	r0, r3
 800a228:	370c      	adds	r7, #12
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr

0800a232 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b086      	sub	sp, #24
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	460b      	mov	r3, r1
 800a23c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a246:	2300      	movs	r3, #0
 800a248:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	885b      	ldrh	r3, [r3, #2]
 800a24e:	b29a      	uxth	r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	b29b      	uxth	r3, r3
 800a256:	429a      	cmp	r2, r3
 800a258:	d920      	bls.n	800a29c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	b29b      	uxth	r3, r3
 800a260:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a262:	e013      	b.n	800a28c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a264:	f107 030a 	add.w	r3, r7, #10
 800a268:	4619      	mov	r1, r3
 800a26a:	6978      	ldr	r0, [r7, #20]
 800a26c:	f000 f81b 	bl	800a2a6 <USBD_GetNextDesc>
 800a270:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	785b      	ldrb	r3, [r3, #1]
 800a276:	2b05      	cmp	r3, #5
 800a278:	d108      	bne.n	800a28c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	789b      	ldrb	r3, [r3, #2]
 800a282:	78fa      	ldrb	r2, [r7, #3]
 800a284:	429a      	cmp	r2, r3
 800a286:	d008      	beq.n	800a29a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a288:	2300      	movs	r3, #0
 800a28a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	885b      	ldrh	r3, [r3, #2]
 800a290:	b29a      	uxth	r2, r3
 800a292:	897b      	ldrh	r3, [r7, #10]
 800a294:	429a      	cmp	r2, r3
 800a296:	d8e5      	bhi.n	800a264 <USBD_GetEpDesc+0x32>
 800a298:	e000      	b.n	800a29c <USBD_GetEpDesc+0x6a>
          break;
 800a29a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a29c:	693b      	ldr	r3, [r7, #16]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b085      	sub	sp, #20
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	881a      	ldrh	r2, [r3, #0]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	4413      	add	r3, r2
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3714      	adds	r7, #20
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b087      	sub	sp, #28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a2fe:	8a3b      	ldrh	r3, [r7, #16]
 800a300:	021b      	lsls	r3, r3, #8
 800a302:	b21a      	sxth	r2, r3
 800a304:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a308:	4313      	orrs	r3, r2
 800a30a:	b21b      	sxth	r3, r3
 800a30c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a30e:	89fb      	ldrh	r3, [r7, #14]
}
 800a310:	4618      	mov	r0, r3
 800a312:	371c      	adds	r7, #28
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a326:	2300      	movs	r3, #0
 800a328:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a332:	2b40      	cmp	r3, #64	; 0x40
 800a334:	d005      	beq.n	800a342 <USBD_StdDevReq+0x26>
 800a336:	2b40      	cmp	r3, #64	; 0x40
 800a338:	d857      	bhi.n	800a3ea <USBD_StdDevReq+0xce>
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00f      	beq.n	800a35e <USBD_StdDevReq+0x42>
 800a33e:	2b20      	cmp	r3, #32
 800a340:	d153      	bne.n	800a3ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	32ae      	adds	r2, #174	; 0xae
 800a34c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	6839      	ldr	r1, [r7, #0]
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	4798      	blx	r3
 800a358:	4603      	mov	r3, r0
 800a35a:	73fb      	strb	r3, [r7, #15]
      break;
 800a35c:	e04a      	b.n	800a3f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	785b      	ldrb	r3, [r3, #1]
 800a362:	2b09      	cmp	r3, #9
 800a364:	d83b      	bhi.n	800a3de <USBD_StdDevReq+0xc2>
 800a366:	a201      	add	r2, pc, #4	; (adr r2, 800a36c <USBD_StdDevReq+0x50>)
 800a368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36c:	0800a3c1 	.word	0x0800a3c1
 800a370:	0800a3d5 	.word	0x0800a3d5
 800a374:	0800a3df 	.word	0x0800a3df
 800a378:	0800a3cb 	.word	0x0800a3cb
 800a37c:	0800a3df 	.word	0x0800a3df
 800a380:	0800a39f 	.word	0x0800a39f
 800a384:	0800a395 	.word	0x0800a395
 800a388:	0800a3df 	.word	0x0800a3df
 800a38c:	0800a3b7 	.word	0x0800a3b7
 800a390:	0800a3a9 	.word	0x0800a3a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a394:	6839      	ldr	r1, [r7, #0]
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 fa3c 	bl	800a814 <USBD_GetDescriptor>
          break;
 800a39c:	e024      	b.n	800a3e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a39e:	6839      	ldr	r1, [r7, #0]
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 fba1 	bl	800aae8 <USBD_SetAddress>
          break;
 800a3a6:	e01f      	b.n	800a3e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a3a8:	6839      	ldr	r1, [r7, #0]
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 fbe0 	bl	800ab70 <USBD_SetConfig>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	73fb      	strb	r3, [r7, #15]
          break;
 800a3b4:	e018      	b.n	800a3e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 fc83 	bl	800acc4 <USBD_GetConfig>
          break;
 800a3be:	e013      	b.n	800a3e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a3c0:	6839      	ldr	r1, [r7, #0]
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fcb4 	bl	800ad30 <USBD_GetStatus>
          break;
 800a3c8:	e00e      	b.n	800a3e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a3ca:	6839      	ldr	r1, [r7, #0]
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 fce3 	bl	800ad98 <USBD_SetFeature>
          break;
 800a3d2:	e009      	b.n	800a3e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fd07 	bl	800adea <USBD_ClrFeature>
          break;
 800a3dc:	e004      	b.n	800a3e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a3de:	6839      	ldr	r1, [r7, #0]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fd5e 	bl	800aea2 <USBD_CtlError>
          break;
 800a3e6:	bf00      	nop
      }
      break;
 800a3e8:	e004      	b.n	800a3f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a3ea:	6839      	ldr	r1, [r7, #0]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fd58 	bl	800aea2 <USBD_CtlError>
      break;
 800a3f2:	bf00      	nop
  }

  return ret;
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop

0800a400 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a40a:	2300      	movs	r3, #0
 800a40c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a416:	2b40      	cmp	r3, #64	; 0x40
 800a418:	d005      	beq.n	800a426 <USBD_StdItfReq+0x26>
 800a41a:	2b40      	cmp	r3, #64	; 0x40
 800a41c:	d852      	bhi.n	800a4c4 <USBD_StdItfReq+0xc4>
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <USBD_StdItfReq+0x26>
 800a422:	2b20      	cmp	r3, #32
 800a424:	d14e      	bne.n	800a4c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	3b01      	subs	r3, #1
 800a430:	2b02      	cmp	r3, #2
 800a432:	d840      	bhi.n	800a4b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	889b      	ldrh	r3, [r3, #4]
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d836      	bhi.n	800a4ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	889b      	ldrh	r3, [r3, #4]
 800a442:	b2db      	uxtb	r3, r3
 800a444:	4619      	mov	r1, r3
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f7ff fed9 	bl	800a1fe <USBD_CoreFindIF>
 800a44c:	4603      	mov	r3, r0
 800a44e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a450:	7bbb      	ldrb	r3, [r7, #14]
 800a452:	2bff      	cmp	r3, #255	; 0xff
 800a454:	d01d      	beq.n	800a492 <USBD_StdItfReq+0x92>
 800a456:	7bbb      	ldrb	r3, [r7, #14]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d11a      	bne.n	800a492 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a45c:	7bba      	ldrb	r2, [r7, #14]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	32ae      	adds	r2, #174	; 0xae
 800a462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00f      	beq.n	800a48c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a46c:	7bba      	ldrb	r2, [r7, #14]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a474:	7bba      	ldrb	r2, [r7, #14]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	32ae      	adds	r2, #174	; 0xae
 800a47a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	4798      	blx	r3
 800a486:	4603      	mov	r3, r0
 800a488:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a48a:	e004      	b.n	800a496 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a48c:	2303      	movs	r3, #3
 800a48e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a490:	e001      	b.n	800a496 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a492:	2303      	movs	r3, #3
 800a494:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	88db      	ldrh	r3, [r3, #6]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d110      	bne.n	800a4c0 <USBD_StdItfReq+0xc0>
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10d      	bne.n	800a4c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fdc7 	bl	800b038 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a4aa:	e009      	b.n	800a4c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fcf7 	bl	800aea2 <USBD_CtlError>
          break;
 800a4b4:	e004      	b.n	800a4c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fcf2 	bl	800aea2 <USBD_CtlError>
          break;
 800a4be:	e000      	b.n	800a4c2 <USBD_StdItfReq+0xc2>
          break;
 800a4c0:	bf00      	nop
      }
      break;
 800a4c2:	e004      	b.n	800a4ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a4c4:	6839      	ldr	r1, [r7, #0]
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fceb 	bl	800aea2 <USBD_CtlError>
      break;
 800a4cc:	bf00      	nop
  }

  return ret;
 800a4ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	889b      	ldrh	r3, [r3, #4]
 800a4ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4f4:	2b40      	cmp	r3, #64	; 0x40
 800a4f6:	d007      	beq.n	800a508 <USBD_StdEPReq+0x30>
 800a4f8:	2b40      	cmp	r3, #64	; 0x40
 800a4fa:	f200 817f 	bhi.w	800a7fc <USBD_StdEPReq+0x324>
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d02a      	beq.n	800a558 <USBD_StdEPReq+0x80>
 800a502:	2b20      	cmp	r3, #32
 800a504:	f040 817a 	bne.w	800a7fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a508:	7bbb      	ldrb	r3, [r7, #14]
 800a50a:	4619      	mov	r1, r3
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f7ff fe83 	bl	800a218 <USBD_CoreFindEP>
 800a512:	4603      	mov	r3, r0
 800a514:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a516:	7b7b      	ldrb	r3, [r7, #13]
 800a518:	2bff      	cmp	r3, #255	; 0xff
 800a51a:	f000 8174 	beq.w	800a806 <USBD_StdEPReq+0x32e>
 800a51e:	7b7b      	ldrb	r3, [r7, #13]
 800a520:	2b00      	cmp	r3, #0
 800a522:	f040 8170 	bne.w	800a806 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a526:	7b7a      	ldrb	r2, [r7, #13]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a52e:	7b7a      	ldrb	r2, [r7, #13]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	32ae      	adds	r2, #174	; 0xae
 800a534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a538:	689b      	ldr	r3, [r3, #8]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f000 8163 	beq.w	800a806 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a540:	7b7a      	ldrb	r2, [r7, #13]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	32ae      	adds	r2, #174	; 0xae
 800a546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	6839      	ldr	r1, [r7, #0]
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	4798      	blx	r3
 800a552:	4603      	mov	r3, r0
 800a554:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a556:	e156      	b.n	800a806 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	785b      	ldrb	r3, [r3, #1]
 800a55c:	2b03      	cmp	r3, #3
 800a55e:	d008      	beq.n	800a572 <USBD_StdEPReq+0x9a>
 800a560:	2b03      	cmp	r3, #3
 800a562:	f300 8145 	bgt.w	800a7f0 <USBD_StdEPReq+0x318>
 800a566:	2b00      	cmp	r3, #0
 800a568:	f000 809b 	beq.w	800a6a2 <USBD_StdEPReq+0x1ca>
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d03c      	beq.n	800a5ea <USBD_StdEPReq+0x112>
 800a570:	e13e      	b.n	800a7f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d002      	beq.n	800a584 <USBD_StdEPReq+0xac>
 800a57e:	2b03      	cmp	r3, #3
 800a580:	d016      	beq.n	800a5b0 <USBD_StdEPReq+0xd8>
 800a582:	e02c      	b.n	800a5de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a584:	7bbb      	ldrb	r3, [r7, #14]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00d      	beq.n	800a5a6 <USBD_StdEPReq+0xce>
 800a58a:	7bbb      	ldrb	r3, [r7, #14]
 800a58c:	2b80      	cmp	r3, #128	; 0x80
 800a58e:	d00a      	beq.n	800a5a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a590:	7bbb      	ldrb	r3, [r7, #14]
 800a592:	4619      	mov	r1, r3
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f007 fdbf 	bl	8012118 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a59a:	2180      	movs	r1, #128	; 0x80
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f007 fdbb 	bl	8012118 <USBD_LL_StallEP>
 800a5a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a5a4:	e020      	b.n	800a5e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fc7a 	bl	800aea2 <USBD_CtlError>
              break;
 800a5ae:	e01b      	b.n	800a5e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	885b      	ldrh	r3, [r3, #2]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10e      	bne.n	800a5d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a5b8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00b      	beq.n	800a5d6 <USBD_StdEPReq+0xfe>
 800a5be:	7bbb      	ldrb	r3, [r7, #14]
 800a5c0:	2b80      	cmp	r3, #128	; 0x80
 800a5c2:	d008      	beq.n	800a5d6 <USBD_StdEPReq+0xfe>
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	88db      	ldrh	r3, [r3, #6]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d104      	bne.n	800a5d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5cc:	7bbb      	ldrb	r3, [r7, #14]
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f007 fda1 	bl	8012118 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 fd2e 	bl	800b038 <USBD_CtlSendStatus>

              break;
 800a5dc:	e004      	b.n	800a5e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a5de:	6839      	ldr	r1, [r7, #0]
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 fc5e 	bl	800aea2 <USBD_CtlError>
              break;
 800a5e6:	bf00      	nop
          }
          break;
 800a5e8:	e107      	b.n	800a7fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d002      	beq.n	800a5fc <USBD_StdEPReq+0x124>
 800a5f6:	2b03      	cmp	r3, #3
 800a5f8:	d016      	beq.n	800a628 <USBD_StdEPReq+0x150>
 800a5fa:	e04b      	b.n	800a694 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5fc:	7bbb      	ldrb	r3, [r7, #14]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00d      	beq.n	800a61e <USBD_StdEPReq+0x146>
 800a602:	7bbb      	ldrb	r3, [r7, #14]
 800a604:	2b80      	cmp	r3, #128	; 0x80
 800a606:	d00a      	beq.n	800a61e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a608:	7bbb      	ldrb	r3, [r7, #14]
 800a60a:	4619      	mov	r1, r3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f007 fd83 	bl	8012118 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a612:	2180      	movs	r1, #128	; 0x80
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f007 fd7f 	bl	8012118 <USBD_LL_StallEP>
 800a61a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a61c:	e040      	b.n	800a6a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 fc3e 	bl	800aea2 <USBD_CtlError>
              break;
 800a626:	e03b      	b.n	800a6a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	885b      	ldrh	r3, [r3, #2]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d136      	bne.n	800a69e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a630:	7bbb      	ldrb	r3, [r7, #14]
 800a632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a636:	2b00      	cmp	r3, #0
 800a638:	d004      	beq.n	800a644 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a63a:	7bbb      	ldrb	r3, [r7, #14]
 800a63c:	4619      	mov	r1, r3
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f007 fd89 	bl	8012156 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 fcf7 	bl	800b038 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a64a:	7bbb      	ldrb	r3, [r7, #14]
 800a64c:	4619      	mov	r1, r3
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f7ff fde2 	bl	800a218 <USBD_CoreFindEP>
 800a654:	4603      	mov	r3, r0
 800a656:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a658:	7b7b      	ldrb	r3, [r7, #13]
 800a65a:	2bff      	cmp	r3, #255	; 0xff
 800a65c:	d01f      	beq.n	800a69e <USBD_StdEPReq+0x1c6>
 800a65e:	7b7b      	ldrb	r3, [r7, #13]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d11c      	bne.n	800a69e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a664:	7b7a      	ldrb	r2, [r7, #13]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a66c:	7b7a      	ldrb	r2, [r7, #13]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	32ae      	adds	r2, #174	; 0xae
 800a672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d010      	beq.n	800a69e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a67c:	7b7a      	ldrb	r2, [r7, #13]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	32ae      	adds	r2, #174	; 0xae
 800a682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	6839      	ldr	r1, [r7, #0]
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	4798      	blx	r3
 800a68e:	4603      	mov	r3, r0
 800a690:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a692:	e004      	b.n	800a69e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a694:	6839      	ldr	r1, [r7, #0]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 fc03 	bl	800aea2 <USBD_CtlError>
              break;
 800a69c:	e000      	b.n	800a6a0 <USBD_StdEPReq+0x1c8>
              break;
 800a69e:	bf00      	nop
          }
          break;
 800a6a0:	e0ab      	b.n	800a7fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	d002      	beq.n	800a6b4 <USBD_StdEPReq+0x1dc>
 800a6ae:	2b03      	cmp	r3, #3
 800a6b0:	d032      	beq.n	800a718 <USBD_StdEPReq+0x240>
 800a6b2:	e097      	b.n	800a7e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6b4:	7bbb      	ldrb	r3, [r7, #14]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d007      	beq.n	800a6ca <USBD_StdEPReq+0x1f2>
 800a6ba:	7bbb      	ldrb	r3, [r7, #14]
 800a6bc:	2b80      	cmp	r3, #128	; 0x80
 800a6be:	d004      	beq.n	800a6ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a6c0:	6839      	ldr	r1, [r7, #0]
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fbed 	bl	800aea2 <USBD_CtlError>
                break;
 800a6c8:	e091      	b.n	800a7ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	da0b      	bge.n	800a6ea <USBD_StdEPReq+0x212>
 800a6d2:	7bbb      	ldrb	r3, [r7, #14]
 800a6d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6d8:	4613      	mov	r3, r2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	4413      	add	r3, r2
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	3310      	adds	r3, #16
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	3304      	adds	r3, #4
 800a6e8:	e00b      	b.n	800a702 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a6ea:	7bbb      	ldrb	r3, [r7, #14]
 800a6ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	4413      	add	r3, r2
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	4413      	add	r3, r2
 800a700:	3304      	adds	r3, #4
 800a702:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	2200      	movs	r2, #0
 800a708:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	2202      	movs	r2, #2
 800a70e:	4619      	mov	r1, r3
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 fc37 	bl	800af84 <USBD_CtlSendData>
              break;
 800a716:	e06a      	b.n	800a7ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	da11      	bge.n	800a744 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a720:	7bbb      	ldrb	r3, [r7, #14]
 800a722:	f003 020f 	and.w	r2, r3, #15
 800a726:	6879      	ldr	r1, [r7, #4]
 800a728:	4613      	mov	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4413      	add	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	440b      	add	r3, r1
 800a732:	3324      	adds	r3, #36	; 0x24
 800a734:	881b      	ldrh	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d117      	bne.n	800a76a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a73a:	6839      	ldr	r1, [r7, #0]
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 fbb0 	bl	800aea2 <USBD_CtlError>
                  break;
 800a742:	e054      	b.n	800a7ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a744:	7bbb      	ldrb	r3, [r7, #14]
 800a746:	f003 020f 	and.w	r2, r3, #15
 800a74a:	6879      	ldr	r1, [r7, #4]
 800a74c:	4613      	mov	r3, r2
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	4413      	add	r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	440b      	add	r3, r1
 800a756:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a75a:	881b      	ldrh	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d104      	bne.n	800a76a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a760:	6839      	ldr	r1, [r7, #0]
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fb9d 	bl	800aea2 <USBD_CtlError>
                  break;
 800a768:	e041      	b.n	800a7ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a76a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	da0b      	bge.n	800a78a <USBD_StdEPReq+0x2b2>
 800a772:	7bbb      	ldrb	r3, [r7, #14]
 800a774:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a778:	4613      	mov	r3, r2
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	4413      	add	r3, r2
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	3310      	adds	r3, #16
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	4413      	add	r3, r2
 800a786:	3304      	adds	r3, #4
 800a788:	e00b      	b.n	800a7a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a78a:	7bbb      	ldrb	r3, [r7, #14]
 800a78c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a790:	4613      	mov	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4413      	add	r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	4413      	add	r3, r2
 800a7a0:	3304      	adds	r3, #4
 800a7a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a7a4:	7bbb      	ldrb	r3, [r7, #14]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d002      	beq.n	800a7b0 <USBD_StdEPReq+0x2d8>
 800a7aa:	7bbb      	ldrb	r3, [r7, #14]
 800a7ac:	2b80      	cmp	r3, #128	; 0x80
 800a7ae:	d103      	bne.n	800a7b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	601a      	str	r2, [r3, #0]
 800a7b6:	e00e      	b.n	800a7d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a7b8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f007 fce9 	bl	8012194 <USBD_LL_IsStallEP>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d003      	beq.n	800a7d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	601a      	str	r2, [r3, #0]
 800a7ce:	e002      	b.n	800a7d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	2202      	movs	r2, #2
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fbd1 	bl	800af84 <USBD_CtlSendData>
              break;
 800a7e2:	e004      	b.n	800a7ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a7e4:	6839      	ldr	r1, [r7, #0]
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fb5b 	bl	800aea2 <USBD_CtlError>
              break;
 800a7ec:	bf00      	nop
          }
          break;
 800a7ee:	e004      	b.n	800a7fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fb55 	bl	800aea2 <USBD_CtlError>
          break;
 800a7f8:	bf00      	nop
      }
      break;
 800a7fa:	e005      	b.n	800a808 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 fb4f 	bl	800aea2 <USBD_CtlError>
      break;
 800a804:	e000      	b.n	800a808 <USBD_StdEPReq+0x330>
      break;
 800a806:	bf00      	nop
  }

  return ret;
 800a808:	7bfb      	ldrb	r3, [r7, #15]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
	...

0800a814 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a81e:	2300      	movs	r3, #0
 800a820:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a822:	2300      	movs	r3, #0
 800a824:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a826:	2300      	movs	r3, #0
 800a828:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	885b      	ldrh	r3, [r3, #2]
 800a82e:	0a1b      	lsrs	r3, r3, #8
 800a830:	b29b      	uxth	r3, r3
 800a832:	3b01      	subs	r3, #1
 800a834:	2b06      	cmp	r3, #6
 800a836:	f200 8128 	bhi.w	800aa8a <USBD_GetDescriptor+0x276>
 800a83a:	a201      	add	r2, pc, #4	; (adr r2, 800a840 <USBD_GetDescriptor+0x2c>)
 800a83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a840:	0800a85d 	.word	0x0800a85d
 800a844:	0800a875 	.word	0x0800a875
 800a848:	0800a8b5 	.word	0x0800a8b5
 800a84c:	0800aa8b 	.word	0x0800aa8b
 800a850:	0800aa8b 	.word	0x0800aa8b
 800a854:	0800aa2b 	.word	0x0800aa2b
 800a858:	0800aa57 	.word	0x0800aa57
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	7c12      	ldrb	r2, [r2, #16]
 800a868:	f107 0108 	add.w	r1, r7, #8
 800a86c:	4610      	mov	r0, r2
 800a86e:	4798      	blx	r3
 800a870:	60f8      	str	r0, [r7, #12]
      break;
 800a872:	e112      	b.n	800aa9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	7c1b      	ldrb	r3, [r3, #16]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d10d      	bne.n	800a898 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a884:	f107 0208 	add.w	r2, r7, #8
 800a888:	4610      	mov	r0, r2
 800a88a:	4798      	blx	r3
 800a88c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3301      	adds	r3, #1
 800a892:	2202      	movs	r2, #2
 800a894:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a896:	e100      	b.n	800aa9a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a0:	f107 0208 	add.w	r2, r7, #8
 800a8a4:	4610      	mov	r0, r2
 800a8a6:	4798      	blx	r3
 800a8a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	2202      	movs	r2, #2
 800a8b0:	701a      	strb	r2, [r3, #0]
      break;
 800a8b2:	e0f2      	b.n	800aa9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	885b      	ldrh	r3, [r3, #2]
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	2b05      	cmp	r3, #5
 800a8bc:	f200 80ac 	bhi.w	800aa18 <USBD_GetDescriptor+0x204>
 800a8c0:	a201      	add	r2, pc, #4	; (adr r2, 800a8c8 <USBD_GetDescriptor+0xb4>)
 800a8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c6:	bf00      	nop
 800a8c8:	0800a8e1 	.word	0x0800a8e1
 800a8cc:	0800a915 	.word	0x0800a915
 800a8d0:	0800a949 	.word	0x0800a949
 800a8d4:	0800a97d 	.word	0x0800a97d
 800a8d8:	0800a9b1 	.word	0x0800a9b1
 800a8dc:	0800a9e5 	.word	0x0800a9e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00b      	beq.n	800a904 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	7c12      	ldrb	r2, [r2, #16]
 800a8f8:	f107 0108 	add.w	r1, r7, #8
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	4798      	blx	r3
 800a900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a902:	e091      	b.n	800aa28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a904:	6839      	ldr	r1, [r7, #0]
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 facb 	bl	800aea2 <USBD_CtlError>
            err++;
 800a90c:	7afb      	ldrb	r3, [r7, #11]
 800a90e:	3301      	adds	r3, #1
 800a910:	72fb      	strb	r3, [r7, #11]
          break;
 800a912:	e089      	b.n	800aa28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00b      	beq.n	800a938 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	7c12      	ldrb	r2, [r2, #16]
 800a92c:	f107 0108 	add.w	r1, r7, #8
 800a930:	4610      	mov	r0, r2
 800a932:	4798      	blx	r3
 800a934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a936:	e077      	b.n	800aa28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 fab1 	bl	800aea2 <USBD_CtlError>
            err++;
 800a940:	7afb      	ldrb	r3, [r7, #11]
 800a942:	3301      	adds	r3, #1
 800a944:	72fb      	strb	r3, [r7, #11]
          break;
 800a946:	e06f      	b.n	800aa28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00b      	beq.n	800a96c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	7c12      	ldrb	r2, [r2, #16]
 800a960:	f107 0108 	add.w	r1, r7, #8
 800a964:	4610      	mov	r0, r2
 800a966:	4798      	blx	r3
 800a968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a96a:	e05d      	b.n	800aa28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fa97 	bl	800aea2 <USBD_CtlError>
            err++;
 800a974:	7afb      	ldrb	r3, [r7, #11]
 800a976:	3301      	adds	r3, #1
 800a978:	72fb      	strb	r3, [r7, #11]
          break;
 800a97a:	e055      	b.n	800aa28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a982:	691b      	ldr	r3, [r3, #16]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00b      	beq.n	800a9a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	7c12      	ldrb	r2, [r2, #16]
 800a994:	f107 0108 	add.w	r1, r7, #8
 800a998:	4610      	mov	r0, r2
 800a99a:	4798      	blx	r3
 800a99c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a99e:	e043      	b.n	800aa28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fa7d 	bl	800aea2 <USBD_CtlError>
            err++;
 800a9a8:	7afb      	ldrb	r3, [r7, #11]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a9ae:	e03b      	b.n	800aa28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9b6:	695b      	ldr	r3, [r3, #20]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00b      	beq.n	800a9d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9c2:	695b      	ldr	r3, [r3, #20]
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	7c12      	ldrb	r2, [r2, #16]
 800a9c8:	f107 0108 	add.w	r1, r7, #8
 800a9cc:	4610      	mov	r0, r2
 800a9ce:	4798      	blx	r3
 800a9d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9d2:	e029      	b.n	800aa28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fa63 	bl	800aea2 <USBD_CtlError>
            err++;
 800a9dc:	7afb      	ldrb	r3, [r7, #11]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a9e2:	e021      	b.n	800aa28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ea:	699b      	ldr	r3, [r3, #24]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00b      	beq.n	800aa08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9f6:	699b      	ldr	r3, [r3, #24]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	7c12      	ldrb	r2, [r2, #16]
 800a9fc:	f107 0108 	add.w	r1, r7, #8
 800aa00:	4610      	mov	r0, r2
 800aa02:	4798      	blx	r3
 800aa04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa06:	e00f      	b.n	800aa28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa08:	6839      	ldr	r1, [r7, #0]
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fa49 	bl	800aea2 <USBD_CtlError>
            err++;
 800aa10:	7afb      	ldrb	r3, [r7, #11]
 800aa12:	3301      	adds	r3, #1
 800aa14:	72fb      	strb	r3, [r7, #11]
          break;
 800aa16:	e007      	b.n	800aa28 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aa18:	6839      	ldr	r1, [r7, #0]
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 fa41 	bl	800aea2 <USBD_CtlError>
          err++;
 800aa20:	7afb      	ldrb	r3, [r7, #11]
 800aa22:	3301      	adds	r3, #1
 800aa24:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aa26:	bf00      	nop
      }
      break;
 800aa28:	e037      	b.n	800aa9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	7c1b      	ldrb	r3, [r3, #16]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d109      	bne.n	800aa46 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa3a:	f107 0208 	add.w	r2, r7, #8
 800aa3e:	4610      	mov	r0, r2
 800aa40:	4798      	blx	r3
 800aa42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa44:	e029      	b.n	800aa9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aa46:	6839      	ldr	r1, [r7, #0]
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fa2a 	bl	800aea2 <USBD_CtlError>
        err++;
 800aa4e:	7afb      	ldrb	r3, [r7, #11]
 800aa50:	3301      	adds	r3, #1
 800aa52:	72fb      	strb	r3, [r7, #11]
      break;
 800aa54:	e021      	b.n	800aa9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	7c1b      	ldrb	r3, [r3, #16]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10d      	bne.n	800aa7a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa66:	f107 0208 	add.w	r2, r7, #8
 800aa6a:	4610      	mov	r0, r2
 800aa6c:	4798      	blx	r3
 800aa6e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	3301      	adds	r3, #1
 800aa74:	2207      	movs	r2, #7
 800aa76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa78:	e00f      	b.n	800aa9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aa7a:	6839      	ldr	r1, [r7, #0]
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 fa10 	bl	800aea2 <USBD_CtlError>
        err++;
 800aa82:	7afb      	ldrb	r3, [r7, #11]
 800aa84:	3301      	adds	r3, #1
 800aa86:	72fb      	strb	r3, [r7, #11]
      break;
 800aa88:	e007      	b.n	800aa9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800aa8a:	6839      	ldr	r1, [r7, #0]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fa08 	bl	800aea2 <USBD_CtlError>
      err++;
 800aa92:	7afb      	ldrb	r3, [r7, #11]
 800aa94:	3301      	adds	r3, #1
 800aa96:	72fb      	strb	r3, [r7, #11]
      break;
 800aa98:	bf00      	nop
  }

  if (err != 0U)
 800aa9a:	7afb      	ldrb	r3, [r7, #11]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d11e      	bne.n	800aade <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	88db      	ldrh	r3, [r3, #6]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d016      	beq.n	800aad6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800aaa8:	893b      	ldrh	r3, [r7, #8]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00e      	beq.n	800aacc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	88da      	ldrh	r2, [r3, #6]
 800aab2:	893b      	ldrh	r3, [r7, #8]
 800aab4:	4293      	cmp	r3, r2
 800aab6:	bf28      	it	cs
 800aab8:	4613      	movcs	r3, r2
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aabe:	893b      	ldrh	r3, [r7, #8]
 800aac0:	461a      	mov	r2, r3
 800aac2:	68f9      	ldr	r1, [r7, #12]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 fa5d 	bl	800af84 <USBD_CtlSendData>
 800aaca:	e009      	b.n	800aae0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 f9e7 	bl	800aea2 <USBD_CtlError>
 800aad4:	e004      	b.n	800aae0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 faae 	bl	800b038 <USBD_CtlSendStatus>
 800aadc:	e000      	b.n	800aae0 <USBD_GetDescriptor+0x2cc>
    return;
 800aade:	bf00      	nop
  }
}
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop

0800aae8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	889b      	ldrh	r3, [r3, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d131      	bne.n	800ab5e <USBD_SetAddress+0x76>
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	88db      	ldrh	r3, [r3, #6]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d12d      	bne.n	800ab5e <USBD_SetAddress+0x76>
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	885b      	ldrh	r3, [r3, #2]
 800ab06:	2b7f      	cmp	r3, #127	; 0x7f
 800ab08:	d829      	bhi.n	800ab5e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	885b      	ldrh	r3, [r3, #2]
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	2b03      	cmp	r3, #3
 800ab20:	d104      	bne.n	800ab2c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ab22:	6839      	ldr	r1, [r7, #0]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 f9bc 	bl	800aea2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab2a:	e01d      	b.n	800ab68 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	7bfa      	ldrb	r2, [r7, #15]
 800ab30:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ab34:	7bfb      	ldrb	r3, [r7, #15]
 800ab36:	4619      	mov	r1, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f007 fb57 	bl	80121ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 fa7a 	bl	800b038 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ab44:	7bfb      	ldrb	r3, [r7, #15]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d004      	beq.n	800ab54 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2202      	movs	r2, #2
 800ab4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab52:	e009      	b.n	800ab68 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab5c:	e004      	b.n	800ab68 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 f99e 	bl	800aea2 <USBD_CtlError>
  }
}
 800ab66:	bf00      	nop
 800ab68:	bf00      	nop
 800ab6a:	3710      	adds	r7, #16
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	885b      	ldrh	r3, [r3, #2]
 800ab82:	b2da      	uxtb	r2, r3
 800ab84:	4b4e      	ldr	r3, [pc, #312]	; (800acc0 <USBD_SetConfig+0x150>)
 800ab86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ab88:	4b4d      	ldr	r3, [pc, #308]	; (800acc0 <USBD_SetConfig+0x150>)
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d905      	bls.n	800ab9c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ab90:	6839      	ldr	r1, [r7, #0]
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f985 	bl	800aea2 <USBD_CtlError>
    return USBD_FAIL;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	e08c      	b.n	800acb6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	d002      	beq.n	800abae <USBD_SetConfig+0x3e>
 800aba8:	2b03      	cmp	r3, #3
 800abaa:	d029      	beq.n	800ac00 <USBD_SetConfig+0x90>
 800abac:	e075      	b.n	800ac9a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800abae:	4b44      	ldr	r3, [pc, #272]	; (800acc0 <USBD_SetConfig+0x150>)
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d020      	beq.n	800abf8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800abb6:	4b42      	ldr	r3, [pc, #264]	; (800acc0 <USBD_SetConfig+0x150>)
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	461a      	mov	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800abc0:	4b3f      	ldr	r3, [pc, #252]	; (800acc0 <USBD_SetConfig+0x150>)
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	4619      	mov	r1, r3
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7fe ffe7 	bl	8009b9a <USBD_SetClassConfig>
 800abcc:	4603      	mov	r3, r0
 800abce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800abd0:	7bfb      	ldrb	r3, [r7, #15]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d008      	beq.n	800abe8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800abd6:	6839      	ldr	r1, [r7, #0]
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 f962 	bl	800aea2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2202      	movs	r2, #2
 800abe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800abe6:	e065      	b.n	800acb4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fa25 	bl	800b038 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2203      	movs	r2, #3
 800abf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800abf6:	e05d      	b.n	800acb4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 fa1d 	bl	800b038 <USBD_CtlSendStatus>
      break;
 800abfe:	e059      	b.n	800acb4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ac00:	4b2f      	ldr	r3, [pc, #188]	; (800acc0 <USBD_SetConfig+0x150>)
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d112      	bne.n	800ac2e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2202      	movs	r2, #2
 800ac0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ac10:	4b2b      	ldr	r3, [pc, #172]	; (800acc0 <USBD_SetConfig+0x150>)
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	461a      	mov	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac1a:	4b29      	ldr	r3, [pc, #164]	; (800acc0 <USBD_SetConfig+0x150>)
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	4619      	mov	r1, r3
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f7fe ffd6 	bl	8009bd2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fa06 	bl	800b038 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac2c:	e042      	b.n	800acb4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ac2e:	4b24      	ldr	r3, [pc, #144]	; (800acc0 <USBD_SetConfig+0x150>)
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	461a      	mov	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d02a      	beq.n	800ac92 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	4619      	mov	r1, r3
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f7fe ffc4 	bl	8009bd2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ac4a:	4b1d      	ldr	r3, [pc, #116]	; (800acc0 <USBD_SetConfig+0x150>)
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac54:	4b1a      	ldr	r3, [pc, #104]	; (800acc0 <USBD_SetConfig+0x150>)
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f7fe ff9d 	bl	8009b9a <USBD_SetClassConfig>
 800ac60:	4603      	mov	r3, r0
 800ac62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ac64:	7bfb      	ldrb	r3, [r7, #15]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00f      	beq.n	800ac8a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ac6a:	6839      	ldr	r1, [r7, #0]
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 f918 	bl	800aea2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	4619      	mov	r1, r3
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f7fe ffa9 	bl	8009bd2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2202      	movs	r2, #2
 800ac84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ac88:	e014      	b.n	800acb4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f9d4 	bl	800b038 <USBD_CtlSendStatus>
      break;
 800ac90:	e010      	b.n	800acb4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f9d0 	bl	800b038 <USBD_CtlSendStatus>
      break;
 800ac98:	e00c      	b.n	800acb4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f900 	bl	800aea2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aca2:	4b07      	ldr	r3, [pc, #28]	; (800acc0 <USBD_SetConfig+0x150>)
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f7fe ff92 	bl	8009bd2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800acae:	2303      	movs	r3, #3
 800acb0:	73fb      	strb	r3, [r7, #15]
      break;
 800acb2:	bf00      	nop
  }

  return ret;
 800acb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	200010c0 	.word	0x200010c0

0800acc4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	88db      	ldrh	r3, [r3, #6]
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d004      	beq.n	800ace0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800acd6:	6839      	ldr	r1, [r7, #0]
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 f8e2 	bl	800aea2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800acde:	e023      	b.n	800ad28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	2b02      	cmp	r3, #2
 800acea:	dc02      	bgt.n	800acf2 <USBD_GetConfig+0x2e>
 800acec:	2b00      	cmp	r3, #0
 800acee:	dc03      	bgt.n	800acf8 <USBD_GetConfig+0x34>
 800acf0:	e015      	b.n	800ad1e <USBD_GetConfig+0x5a>
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d00b      	beq.n	800ad0e <USBD_GetConfig+0x4a>
 800acf6:	e012      	b.n	800ad1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	3308      	adds	r3, #8
 800ad02:	2201      	movs	r2, #1
 800ad04:	4619      	mov	r1, r3
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f93c 	bl	800af84 <USBD_CtlSendData>
        break;
 800ad0c:	e00c      	b.n	800ad28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	3304      	adds	r3, #4
 800ad12:	2201      	movs	r2, #1
 800ad14:	4619      	mov	r1, r3
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f934 	bl	800af84 <USBD_CtlSendData>
        break;
 800ad1c:	e004      	b.n	800ad28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ad1e:	6839      	ldr	r1, [r7, #0]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 f8be 	bl	800aea2 <USBD_CtlError>
        break;
 800ad26:	bf00      	nop
}
 800ad28:	bf00      	nop
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	3b01      	subs	r3, #1
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d81e      	bhi.n	800ad86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	88db      	ldrh	r3, [r3, #6]
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	d004      	beq.n	800ad5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ad50:	6839      	ldr	r1, [r7, #0]
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f8a5 	bl	800aea2 <USBD_CtlError>
        break;
 800ad58:	e01a      	b.n	800ad90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d005      	beq.n	800ad76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	f043 0202 	orr.w	r2, r3, #2
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	330c      	adds	r3, #12
 800ad7a:	2202      	movs	r2, #2
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f900 	bl	800af84 <USBD_CtlSendData>
      break;
 800ad84:	e004      	b.n	800ad90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f88a 	bl	800aea2 <USBD_CtlError>
      break;
 800ad8e:	bf00      	nop
  }
}
 800ad90:	bf00      	nop
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	885b      	ldrh	r3, [r3, #2]
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d107      	bne.n	800adba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2201      	movs	r2, #1
 800adae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 f940 	bl	800b038 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800adb8:	e013      	b.n	800ade2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	885b      	ldrh	r3, [r3, #2]
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d10b      	bne.n	800adda <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	889b      	ldrh	r3, [r3, #4]
 800adc6:	0a1b      	lsrs	r3, r3, #8
 800adc8:	b29b      	uxth	r3, r3
 800adca:	b2da      	uxtb	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 f930 	bl	800b038 <USBD_CtlSendStatus>
}
 800add8:	e003      	b.n	800ade2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800adda:	6839      	ldr	r1, [r7, #0]
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 f860 	bl	800aea2 <USBD_CtlError>
}
 800ade2:	bf00      	nop
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b082      	sub	sp, #8
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	3b01      	subs	r3, #1
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d80b      	bhi.n	800ae1a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	885b      	ldrh	r3, [r3, #2]
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d10c      	bne.n	800ae24 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 f910 	bl	800b038 <USBD_CtlSendStatus>
      }
      break;
 800ae18:	e004      	b.n	800ae24 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ae1a:	6839      	ldr	r1, [r7, #0]
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 f840 	bl	800aea2 <USBD_CtlError>
      break;
 800ae22:	e000      	b.n	800ae26 <USBD_ClrFeature+0x3c>
      break;
 800ae24:	bf00      	nop
  }
}
 800ae26:	bf00      	nop
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b084      	sub	sp, #16
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
 800ae36:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	781a      	ldrb	r2, [r3, #0]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	3301      	adds	r3, #1
 800ae48:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	781a      	ldrb	r2, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	3301      	adds	r3, #1
 800ae56:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ae58:	68f8      	ldr	r0, [r7, #12]
 800ae5a:	f7ff fa41 	bl	800a2e0 <SWAPBYTE>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	461a      	mov	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ae72:	68f8      	ldr	r0, [r7, #12]
 800ae74:	f7ff fa34 	bl	800a2e0 <SWAPBYTE>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	3301      	adds	r3, #1
 800ae84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f7ff fa27 	bl	800a2e0 <SWAPBYTE>
 800ae92:	4603      	mov	r3, r0
 800ae94:	461a      	mov	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	80da      	strh	r2, [r3, #6]
}
 800ae9a:	bf00      	nop
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b082      	sub	sp, #8
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aeac:	2180      	movs	r1, #128	; 0x80
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f007 f932 	bl	8012118 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f007 f92e 	bl	8012118 <USBD_LL_StallEP>
}
 800aebc:	bf00      	nop
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b086      	sub	sp, #24
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aed0:	2300      	movs	r3, #0
 800aed2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d036      	beq.n	800af48 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aede:	6938      	ldr	r0, [r7, #16]
 800aee0:	f000 f836 	bl	800af50 <USBD_GetLen>
 800aee4:	4603      	mov	r3, r0
 800aee6:	3301      	adds	r3, #1
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	005b      	lsls	r3, r3, #1
 800aeec:	b29a      	uxth	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aef2:	7dfb      	ldrb	r3, [r7, #23]
 800aef4:	68ba      	ldr	r2, [r7, #8]
 800aef6:	4413      	add	r3, r2
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	7812      	ldrb	r2, [r2, #0]
 800aefc:	701a      	strb	r2, [r3, #0]
  idx++;
 800aefe:	7dfb      	ldrb	r3, [r7, #23]
 800af00:	3301      	adds	r3, #1
 800af02:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800af04:	7dfb      	ldrb	r3, [r7, #23]
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	4413      	add	r3, r2
 800af0a:	2203      	movs	r2, #3
 800af0c:	701a      	strb	r2, [r3, #0]
  idx++;
 800af0e:	7dfb      	ldrb	r3, [r7, #23]
 800af10:	3301      	adds	r3, #1
 800af12:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800af14:	e013      	b.n	800af3e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800af16:	7dfb      	ldrb	r3, [r7, #23]
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	4413      	add	r3, r2
 800af1c:	693a      	ldr	r2, [r7, #16]
 800af1e:	7812      	ldrb	r2, [r2, #0]
 800af20:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	3301      	adds	r3, #1
 800af26:	613b      	str	r3, [r7, #16]
    idx++;
 800af28:	7dfb      	ldrb	r3, [r7, #23]
 800af2a:	3301      	adds	r3, #1
 800af2c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800af2e:	7dfb      	ldrb	r3, [r7, #23]
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	4413      	add	r3, r2
 800af34:	2200      	movs	r2, #0
 800af36:	701a      	strb	r2, [r3, #0]
    idx++;
 800af38:	7dfb      	ldrb	r3, [r7, #23]
 800af3a:	3301      	adds	r3, #1
 800af3c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1e7      	bne.n	800af16 <USBD_GetString+0x52>
 800af46:	e000      	b.n	800af4a <USBD_GetString+0x86>
    return;
 800af48:	bf00      	nop
  }
}
 800af4a:	3718      	adds	r7, #24
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800af58:	2300      	movs	r3, #0
 800af5a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800af60:	e005      	b.n	800af6e <USBD_GetLen+0x1e>
  {
    len++;
 800af62:	7bfb      	ldrb	r3, [r7, #15]
 800af64:	3301      	adds	r3, #1
 800af66:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	3301      	adds	r3, #1
 800af6c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d1f5      	bne.n	800af62 <USBD_GetLen+0x12>
  }

  return len;
 800af76:	7bfb      	ldrb	r3, [r7, #15]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3714      	adds	r7, #20
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2202      	movs	r2, #2
 800af94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	68ba      	ldr	r2, [r7, #8]
 800afa8:	2100      	movs	r1, #0
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	f007 f93d 	bl	801222a <USBD_LL_Transmit>

  return USBD_OK;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3710      	adds	r7, #16
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b084      	sub	sp, #16
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	60f8      	str	r0, [r7, #12]
 800afc2:	60b9      	str	r1, [r7, #8]
 800afc4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	68ba      	ldr	r2, [r7, #8]
 800afca:	2100      	movs	r1, #0
 800afcc:	68f8      	ldr	r0, [r7, #12]
 800afce:	f007 f92c 	bl	801222a <USBD_LL_Transmit>

  return USBD_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2203      	movs	r2, #3
 800afec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	68ba      	ldr	r2, [r7, #8]
 800b004:	2100      	movs	r1, #0
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f007 f930 	bl	801226c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b084      	sub	sp, #16
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	60f8      	str	r0, [r7, #12]
 800b01e:	60b9      	str	r1, [r7, #8]
 800b020:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68ba      	ldr	r2, [r7, #8]
 800b026:	2100      	movs	r1, #0
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f007 f91f 	bl	801226c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2204      	movs	r2, #4
 800b044:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b048:	2300      	movs	r3, #0
 800b04a:	2200      	movs	r2, #0
 800b04c:	2100      	movs	r1, #0
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f007 f8eb 	bl	801222a <USBD_LL_Transmit>

  return USBD_OK;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3708      	adds	r7, #8
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b082      	sub	sp, #8
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2205      	movs	r2, #5
 800b06a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b06e:	2300      	movs	r3, #0
 800b070:	2200      	movs	r2, #0
 800b072:	2100      	movs	r1, #0
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f007 f8f9 	bl	801226c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3708      	adds	r7, #8
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	4603      	mov	r3, r0
 800b08c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b08e:	79fb      	ldrb	r3, [r7, #7]
 800b090:	4a08      	ldr	r2, [pc, #32]	; (800b0b4 <disk_status+0x30>)
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4413      	add	r3, r2
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	79fa      	ldrb	r2, [r7, #7]
 800b09c:	4905      	ldr	r1, [pc, #20]	; (800b0b4 <disk_status+0x30>)
 800b09e:	440a      	add	r2, r1
 800b0a0:	7a12      	ldrb	r2, [r2, #8]
 800b0a2:	4610      	mov	r0, r2
 800b0a4:	4798      	blx	r3
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	200010ec 	.word	0x200010ec

0800b0b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	4603      	mov	r3, r0
 800b0c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b0c6:	79fb      	ldrb	r3, [r7, #7]
 800b0c8:	4a0d      	ldr	r2, [pc, #52]	; (800b100 <disk_initialize+0x48>)
 800b0ca:	5cd3      	ldrb	r3, [r2, r3]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d111      	bne.n	800b0f4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b0d0:	79fb      	ldrb	r3, [r7, #7]
 800b0d2:	4a0b      	ldr	r2, [pc, #44]	; (800b100 <disk_initialize+0x48>)
 800b0d4:	2101      	movs	r1, #1
 800b0d6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b0d8:	79fb      	ldrb	r3, [r7, #7]
 800b0da:	4a09      	ldr	r2, [pc, #36]	; (800b100 <disk_initialize+0x48>)
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4413      	add	r3, r2
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	79fa      	ldrb	r2, [r7, #7]
 800b0e6:	4906      	ldr	r1, [pc, #24]	; (800b100 <disk_initialize+0x48>)
 800b0e8:	440a      	add	r2, r1
 800b0ea:	7a12      	ldrb	r2, [r2, #8]
 800b0ec:	4610      	mov	r0, r2
 800b0ee:	4798      	blx	r3
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	200010ec 	.word	0x200010ec

0800b104 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b104:	b590      	push	{r4, r7, lr}
 800b106:	b087      	sub	sp, #28
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60b9      	str	r1, [r7, #8]
 800b10c:	607a      	str	r2, [r7, #4]
 800b10e:	603b      	str	r3, [r7, #0]
 800b110:	4603      	mov	r3, r0
 800b112:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b114:	7bfb      	ldrb	r3, [r7, #15]
 800b116:	4a0a      	ldr	r2, [pc, #40]	; (800b140 <disk_read+0x3c>)
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	689c      	ldr	r4, [r3, #8]
 800b120:	7bfb      	ldrb	r3, [r7, #15]
 800b122:	4a07      	ldr	r2, [pc, #28]	; (800b140 <disk_read+0x3c>)
 800b124:	4413      	add	r3, r2
 800b126:	7a18      	ldrb	r0, [r3, #8]
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	68b9      	ldr	r1, [r7, #8]
 800b12e:	47a0      	blx	r4
 800b130:	4603      	mov	r3, r0
 800b132:	75fb      	strb	r3, [r7, #23]
  return res;
 800b134:	7dfb      	ldrb	r3, [r7, #23]
}
 800b136:	4618      	mov	r0, r3
 800b138:	371c      	adds	r7, #28
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd90      	pop	{r4, r7, pc}
 800b13e:	bf00      	nop
 800b140:	200010ec 	.word	0x200010ec

0800b144 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b144:	b590      	push	{r4, r7, lr}
 800b146:	b087      	sub	sp, #28
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60b9      	str	r1, [r7, #8]
 800b14c:	607a      	str	r2, [r7, #4]
 800b14e:	603b      	str	r3, [r7, #0]
 800b150:	4603      	mov	r3, r0
 800b152:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b154:	7bfb      	ldrb	r3, [r7, #15]
 800b156:	4a0a      	ldr	r2, [pc, #40]	; (800b180 <disk_write+0x3c>)
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	4413      	add	r3, r2
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	68dc      	ldr	r4, [r3, #12]
 800b160:	7bfb      	ldrb	r3, [r7, #15]
 800b162:	4a07      	ldr	r2, [pc, #28]	; (800b180 <disk_write+0x3c>)
 800b164:	4413      	add	r3, r2
 800b166:	7a18      	ldrb	r0, [r3, #8]
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	68b9      	ldr	r1, [r7, #8]
 800b16e:	47a0      	blx	r4
 800b170:	4603      	mov	r3, r0
 800b172:	75fb      	strb	r3, [r7, #23]
  return res;
 800b174:	7dfb      	ldrb	r3, [r7, #23]
}
 800b176:	4618      	mov	r0, r3
 800b178:	371c      	adds	r7, #28
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd90      	pop	{r4, r7, pc}
 800b17e:	bf00      	nop
 800b180:	200010ec 	.word	0x200010ec

0800b184 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	4603      	mov	r3, r0
 800b18c:	603a      	str	r2, [r7, #0]
 800b18e:	71fb      	strb	r3, [r7, #7]
 800b190:	460b      	mov	r3, r1
 800b192:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b194:	79fb      	ldrb	r3, [r7, #7]
 800b196:	4a09      	ldr	r2, [pc, #36]	; (800b1bc <disk_ioctl+0x38>)
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	4413      	add	r3, r2
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	691b      	ldr	r3, [r3, #16]
 800b1a0:	79fa      	ldrb	r2, [r7, #7]
 800b1a2:	4906      	ldr	r1, [pc, #24]	; (800b1bc <disk_ioctl+0x38>)
 800b1a4:	440a      	add	r2, r1
 800b1a6:	7a10      	ldrb	r0, [r2, #8]
 800b1a8:	79b9      	ldrb	r1, [r7, #6]
 800b1aa:	683a      	ldr	r2, [r7, #0]
 800b1ac:	4798      	blx	r3
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	73fb      	strb	r3, [r7, #15]
  return res;
 800b1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3710      	adds	r7, #16
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	200010ec 	.word	0x200010ec

0800b1c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b1d0:	89fb      	ldrh	r3, [r7, #14]
 800b1d2:	021b      	lsls	r3, r3, #8
 800b1d4:	b21a      	sxth	r2, r3
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	b21b      	sxth	r3, r3
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	b21b      	sxth	r3, r3
 800b1e0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b1e2:	89fb      	ldrh	r3, [r7, #14]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3714      	adds	r7, #20
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	3303      	adds	r3, #3
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	021b      	lsls	r3, r3, #8
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	3202      	adds	r2, #2
 800b208:	7812      	ldrb	r2, [r2, #0]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	021b      	lsls	r3, r3, #8
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	3201      	adds	r2, #1
 800b216:	7812      	ldrb	r2, [r2, #0]
 800b218:	4313      	orrs	r3, r2
 800b21a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	021b      	lsls	r3, r3, #8
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	7812      	ldrb	r2, [r2, #0]
 800b224:	4313      	orrs	r3, r2
 800b226:	60fb      	str	r3, [r7, #12]
	return rv;
 800b228:	68fb      	ldr	r3, [r7, #12]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3714      	adds	r7, #20
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr

0800b236 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b236:	b480      	push	{r7}
 800b238:	b083      	sub	sp, #12
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
 800b23e:	460b      	mov	r3, r1
 800b240:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	1c5a      	adds	r2, r3, #1
 800b246:	607a      	str	r2, [r7, #4]
 800b248:	887a      	ldrh	r2, [r7, #2]
 800b24a:	b2d2      	uxtb	r2, r2
 800b24c:	701a      	strb	r2, [r3, #0]
 800b24e:	887b      	ldrh	r3, [r7, #2]
 800b250:	0a1b      	lsrs	r3, r3, #8
 800b252:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	1c5a      	adds	r2, r3, #1
 800b258:	607a      	str	r2, [r7, #4]
 800b25a:	887a      	ldrh	r2, [r7, #2]
 800b25c:	b2d2      	uxtb	r2, r2
 800b25e:	701a      	strb	r2, [r3, #0]
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	1c5a      	adds	r2, r3, #1
 800b27a:	607a      	str	r2, [r7, #4]
 800b27c:	683a      	ldr	r2, [r7, #0]
 800b27e:	b2d2      	uxtb	r2, r2
 800b280:	701a      	strb	r2, [r3, #0]
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	0a1b      	lsrs	r3, r3, #8
 800b286:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	1c5a      	adds	r2, r3, #1
 800b28c:	607a      	str	r2, [r7, #4]
 800b28e:	683a      	ldr	r2, [r7, #0]
 800b290:	b2d2      	uxtb	r2, r2
 800b292:	701a      	strb	r2, [r3, #0]
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	0a1b      	lsrs	r3, r3, #8
 800b298:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	1c5a      	adds	r2, r3, #1
 800b29e:	607a      	str	r2, [r7, #4]
 800b2a0:	683a      	ldr	r2, [r7, #0]
 800b2a2:	b2d2      	uxtb	r2, r2
 800b2a4:	701a      	strb	r2, [r3, #0]
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	0a1b      	lsrs	r3, r3, #8
 800b2aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	1c5a      	adds	r2, r3, #1
 800b2b0:	607a      	str	r2, [r7, #4]
 800b2b2:	683a      	ldr	r2, [r7, #0]
 800b2b4:	b2d2      	uxtb	r2, r2
 800b2b6:	701a      	strb	r2, [r3, #0]
}
 800b2b8:	bf00      	nop
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b2c4:	b480      	push	{r7}
 800b2c6:	b087      	sub	sp, #28
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00d      	beq.n	800b2fa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b2de:	693a      	ldr	r2, [r7, #16]
 800b2e0:	1c53      	adds	r3, r2, #1
 800b2e2:	613b      	str	r3, [r7, #16]
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	1c59      	adds	r1, r3, #1
 800b2e8:	6179      	str	r1, [r7, #20]
 800b2ea:	7812      	ldrb	r2, [r2, #0]
 800b2ec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	3b01      	subs	r3, #1
 800b2f2:	607b      	str	r3, [r7, #4]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d1f1      	bne.n	800b2de <mem_cpy+0x1a>
	}
}
 800b2fa:	bf00      	nop
 800b2fc:	371c      	adds	r7, #28
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr

0800b306 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b306:	b480      	push	{r7}
 800b308:	b087      	sub	sp, #28
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	60f8      	str	r0, [r7, #12]
 800b30e:	60b9      	str	r1, [r7, #8]
 800b310:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	1c5a      	adds	r2, r3, #1
 800b31a:	617a      	str	r2, [r7, #20]
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	b2d2      	uxtb	r2, r2
 800b320:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	3b01      	subs	r3, #1
 800b326:	607b      	str	r3, [r7, #4]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1f3      	bne.n	800b316 <mem_set+0x10>
}
 800b32e:	bf00      	nop
 800b330:	bf00      	nop
 800b332:	371c      	adds	r7, #28
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b33c:	b480      	push	{r7}
 800b33e:	b089      	sub	sp, #36	; 0x24
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	61fb      	str	r3, [r7, #28]
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b350:	2300      	movs	r3, #0
 800b352:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	1c5a      	adds	r2, r3, #1
 800b358:	61fa      	str	r2, [r7, #28]
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	4619      	mov	r1, r3
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	1c5a      	adds	r2, r3, #1
 800b362:	61ba      	str	r2, [r7, #24]
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	1acb      	subs	r3, r1, r3
 800b368:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	3b01      	subs	r3, #1
 800b36e:	607b      	str	r3, [r7, #4]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d002      	beq.n	800b37c <mem_cmp+0x40>
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d0eb      	beq.n	800b354 <mem_cmp+0x18>

	return r;
 800b37c:	697b      	ldr	r3, [r7, #20]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3724      	adds	r7, #36	; 0x24
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr

0800b38a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b38a:	b480      	push	{r7}
 800b38c:	b083      	sub	sp, #12
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b394:	e002      	b.n	800b39c <chk_chr+0x12>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	3301      	adds	r3, #1
 800b39a:	607b      	str	r3, [r7, #4]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d005      	beq.n	800b3b0 <chk_chr+0x26>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d1f2      	bne.n	800b396 <chk_chr+0xc>
	return *str;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d009      	beq.n	800b3e2 <lock_fs+0x22>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f002 fe1c 	bl	800e010 <ff_req_grant>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <lock_fs+0x22>
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e000      	b.n	800b3e4 <lock_fs+0x24>
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d00d      	beq.n	800b41a <unlock_fs+0x2e>
 800b3fe:	78fb      	ldrb	r3, [r7, #3]
 800b400:	2b0c      	cmp	r3, #12
 800b402:	d00a      	beq.n	800b41a <unlock_fs+0x2e>
 800b404:	78fb      	ldrb	r3, [r7, #3]
 800b406:	2b0b      	cmp	r3, #11
 800b408:	d007      	beq.n	800b41a <unlock_fs+0x2e>
 800b40a:	78fb      	ldrb	r3, [r7, #3]
 800b40c:	2b0f      	cmp	r3, #15
 800b40e:	d004      	beq.n	800b41a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	4618      	mov	r0, r3
 800b416:	f002 fe10 	bl	800e03a <ff_rel_grant>
	}
}
 800b41a:	bf00      	nop
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
	...

0800b424 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b42e:	2300      	movs	r3, #0
 800b430:	60bb      	str	r3, [r7, #8]
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	60fb      	str	r3, [r7, #12]
 800b436:	e029      	b.n	800b48c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b438:	4a27      	ldr	r2, [pc, #156]	; (800b4d8 <chk_lock+0xb4>)
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	011b      	lsls	r3, r3, #4
 800b43e:	4413      	add	r3, r2
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d01d      	beq.n	800b482 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b446:	4a24      	ldr	r2, [pc, #144]	; (800b4d8 <chk_lock+0xb4>)
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	011b      	lsls	r3, r3, #4
 800b44c:	4413      	add	r3, r2
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	429a      	cmp	r2, r3
 800b456:	d116      	bne.n	800b486 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b458:	4a1f      	ldr	r2, [pc, #124]	; (800b4d8 <chk_lock+0xb4>)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	011b      	lsls	r3, r3, #4
 800b45e:	4413      	add	r3, r2
 800b460:	3304      	adds	r3, #4
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b468:	429a      	cmp	r2, r3
 800b46a:	d10c      	bne.n	800b486 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b46c:	4a1a      	ldr	r2, [pc, #104]	; (800b4d8 <chk_lock+0xb4>)
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	011b      	lsls	r3, r3, #4
 800b472:	4413      	add	r3, r2
 800b474:	3308      	adds	r3, #8
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d102      	bne.n	800b486 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b480:	e007      	b.n	800b492 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b482:	2301      	movs	r3, #1
 800b484:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	3301      	adds	r3, #1
 800b48a:	60fb      	str	r3, [r7, #12]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d9d2      	bls.n	800b438 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2b02      	cmp	r3, #2
 800b496:	d109      	bne.n	800b4ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d102      	bne.n	800b4a4 <chk_lock+0x80>
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	2b02      	cmp	r3, #2
 800b4a2:	d101      	bne.n	800b4a8 <chk_lock+0x84>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	e010      	b.n	800b4ca <chk_lock+0xa6>
 800b4a8:	2312      	movs	r3, #18
 800b4aa:	e00e      	b.n	800b4ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d108      	bne.n	800b4c4 <chk_lock+0xa0>
 800b4b2:	4a09      	ldr	r2, [pc, #36]	; (800b4d8 <chk_lock+0xb4>)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	011b      	lsls	r3, r3, #4
 800b4b8:	4413      	add	r3, r2
 800b4ba:	330c      	adds	r3, #12
 800b4bc:	881b      	ldrh	r3, [r3, #0]
 800b4be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4c2:	d101      	bne.n	800b4c8 <chk_lock+0xa4>
 800b4c4:	2310      	movs	r3, #16
 800b4c6:	e000      	b.n	800b4ca <chk_lock+0xa6>
 800b4c8:	2300      	movs	r3, #0
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3714      	adds	r7, #20
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop
 800b4d8:	200010cc 	.word	0x200010cc

0800b4dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	607b      	str	r3, [r7, #4]
 800b4e6:	e002      	b.n	800b4ee <enq_lock+0x12>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	607b      	str	r3, [r7, #4]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d806      	bhi.n	800b502 <enq_lock+0x26>
 800b4f4:	4a09      	ldr	r2, [pc, #36]	; (800b51c <enq_lock+0x40>)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	011b      	lsls	r3, r3, #4
 800b4fa:	4413      	add	r3, r2
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d1f2      	bne.n	800b4e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2b02      	cmp	r3, #2
 800b506:	bf14      	ite	ne
 800b508:	2301      	movne	r3, #1
 800b50a:	2300      	moveq	r3, #0
 800b50c:	b2db      	uxtb	r3, r3
}
 800b50e:	4618      	mov	r0, r3
 800b510:	370c      	adds	r7, #12
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop
 800b51c:	200010cc 	.word	0x200010cc

0800b520 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b52a:	2300      	movs	r3, #0
 800b52c:	60fb      	str	r3, [r7, #12]
 800b52e:	e01f      	b.n	800b570 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b530:	4a41      	ldr	r2, [pc, #260]	; (800b638 <inc_lock+0x118>)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	011b      	lsls	r3, r3, #4
 800b536:	4413      	add	r3, r2
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d113      	bne.n	800b56a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b542:	4a3d      	ldr	r2, [pc, #244]	; (800b638 <inc_lock+0x118>)
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	011b      	lsls	r3, r3, #4
 800b548:	4413      	add	r3, r2
 800b54a:	3304      	adds	r3, #4
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b552:	429a      	cmp	r2, r3
 800b554:	d109      	bne.n	800b56a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b556:	4a38      	ldr	r2, [pc, #224]	; (800b638 <inc_lock+0x118>)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	011b      	lsls	r3, r3, #4
 800b55c:	4413      	add	r3, r2
 800b55e:	3308      	adds	r3, #8
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b566:	429a      	cmp	r2, r3
 800b568:	d006      	beq.n	800b578 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	3301      	adds	r3, #1
 800b56e:	60fb      	str	r3, [r7, #12]
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2b01      	cmp	r3, #1
 800b574:	d9dc      	bls.n	800b530 <inc_lock+0x10>
 800b576:	e000      	b.n	800b57a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b578:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	d132      	bne.n	800b5e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b580:	2300      	movs	r3, #0
 800b582:	60fb      	str	r3, [r7, #12]
 800b584:	e002      	b.n	800b58c <inc_lock+0x6c>
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	3301      	adds	r3, #1
 800b58a:	60fb      	str	r3, [r7, #12]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d806      	bhi.n	800b5a0 <inc_lock+0x80>
 800b592:	4a29      	ldr	r2, [pc, #164]	; (800b638 <inc_lock+0x118>)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	011b      	lsls	r3, r3, #4
 800b598:	4413      	add	r3, r2
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d1f2      	bne.n	800b586 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	d101      	bne.n	800b5aa <inc_lock+0x8a>
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	e040      	b.n	800b62c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	4922      	ldr	r1, [pc, #136]	; (800b638 <inc_lock+0x118>)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	011b      	lsls	r3, r3, #4
 800b5b4:	440b      	add	r3, r1
 800b5b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	689a      	ldr	r2, [r3, #8]
 800b5bc:	491e      	ldr	r1, [pc, #120]	; (800b638 <inc_lock+0x118>)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	011b      	lsls	r3, r3, #4
 800b5c2:	440b      	add	r3, r1
 800b5c4:	3304      	adds	r3, #4
 800b5c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	695a      	ldr	r2, [r3, #20]
 800b5cc:	491a      	ldr	r1, [pc, #104]	; (800b638 <inc_lock+0x118>)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	011b      	lsls	r3, r3, #4
 800b5d2:	440b      	add	r3, r1
 800b5d4:	3308      	adds	r3, #8
 800b5d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b5d8:	4a17      	ldr	r2, [pc, #92]	; (800b638 <inc_lock+0x118>)
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	011b      	lsls	r3, r3, #4
 800b5de:	4413      	add	r3, r2
 800b5e0:	330c      	adds	r3, #12
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d009      	beq.n	800b600 <inc_lock+0xe0>
 800b5ec:	4a12      	ldr	r2, [pc, #72]	; (800b638 <inc_lock+0x118>)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	011b      	lsls	r3, r3, #4
 800b5f2:	4413      	add	r3, r2
 800b5f4:	330c      	adds	r3, #12
 800b5f6:	881b      	ldrh	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d001      	beq.n	800b600 <inc_lock+0xe0>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	e015      	b.n	800b62c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d108      	bne.n	800b618 <inc_lock+0xf8>
 800b606:	4a0c      	ldr	r2, [pc, #48]	; (800b638 <inc_lock+0x118>)
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	011b      	lsls	r3, r3, #4
 800b60c:	4413      	add	r3, r2
 800b60e:	330c      	adds	r3, #12
 800b610:	881b      	ldrh	r3, [r3, #0]
 800b612:	3301      	adds	r3, #1
 800b614:	b29a      	uxth	r2, r3
 800b616:	e001      	b.n	800b61c <inc_lock+0xfc>
 800b618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b61c:	4906      	ldr	r1, [pc, #24]	; (800b638 <inc_lock+0x118>)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	011b      	lsls	r3, r3, #4
 800b622:	440b      	add	r3, r1
 800b624:	330c      	adds	r3, #12
 800b626:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	3301      	adds	r3, #1
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3714      	adds	r7, #20
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr
 800b638:	200010cc 	.word	0x200010cc

0800b63c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	3b01      	subs	r3, #1
 800b648:	607b      	str	r3, [r7, #4]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d825      	bhi.n	800b69c <dec_lock+0x60>
		n = Files[i].ctr;
 800b650:	4a17      	ldr	r2, [pc, #92]	; (800b6b0 <dec_lock+0x74>)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	011b      	lsls	r3, r3, #4
 800b656:	4413      	add	r3, r2
 800b658:	330c      	adds	r3, #12
 800b65a:	881b      	ldrh	r3, [r3, #0]
 800b65c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b65e:	89fb      	ldrh	r3, [r7, #14]
 800b660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b664:	d101      	bne.n	800b66a <dec_lock+0x2e>
 800b666:	2300      	movs	r3, #0
 800b668:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b66a:	89fb      	ldrh	r3, [r7, #14]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d002      	beq.n	800b676 <dec_lock+0x3a>
 800b670:	89fb      	ldrh	r3, [r7, #14]
 800b672:	3b01      	subs	r3, #1
 800b674:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b676:	4a0e      	ldr	r2, [pc, #56]	; (800b6b0 <dec_lock+0x74>)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	011b      	lsls	r3, r3, #4
 800b67c:	4413      	add	r3, r2
 800b67e:	330c      	adds	r3, #12
 800b680:	89fa      	ldrh	r2, [r7, #14]
 800b682:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b684:	89fb      	ldrh	r3, [r7, #14]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d105      	bne.n	800b696 <dec_lock+0x5a>
 800b68a:	4a09      	ldr	r2, [pc, #36]	; (800b6b0 <dec_lock+0x74>)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	011b      	lsls	r3, r3, #4
 800b690:	4413      	add	r3, r2
 800b692:	2200      	movs	r2, #0
 800b694:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b696:	2300      	movs	r3, #0
 800b698:	737b      	strb	r3, [r7, #13]
 800b69a:	e001      	b.n	800b6a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b69c:	2302      	movs	r3, #2
 800b69e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b6a0:	7b7b      	ldrb	r3, [r7, #13]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3714      	adds	r7, #20
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr
 800b6ae:	bf00      	nop
 800b6b0:	200010cc 	.word	0x200010cc

0800b6b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b6bc:	2300      	movs	r3, #0
 800b6be:	60fb      	str	r3, [r7, #12]
 800b6c0:	e010      	b.n	800b6e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b6c2:	4a0d      	ldr	r2, [pc, #52]	; (800b6f8 <clear_lock+0x44>)
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	011b      	lsls	r3, r3, #4
 800b6c8:	4413      	add	r3, r2
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d105      	bne.n	800b6de <clear_lock+0x2a>
 800b6d2:	4a09      	ldr	r2, [pc, #36]	; (800b6f8 <clear_lock+0x44>)
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	011b      	lsls	r3, r3, #4
 800b6d8:	4413      	add	r3, r2
 800b6da:	2200      	movs	r2, #0
 800b6dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	60fb      	str	r3, [r7, #12]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d9eb      	bls.n	800b6c2 <clear_lock+0xe>
	}
}
 800b6ea:	bf00      	nop
 800b6ec:	bf00      	nop
 800b6ee:	3714      	adds	r7, #20
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr
 800b6f8:	200010cc 	.word	0x200010cc

0800b6fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b086      	sub	sp, #24
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b704:	2300      	movs	r3, #0
 800b706:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	78db      	ldrb	r3, [r3, #3]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d034      	beq.n	800b77a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b714:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	7858      	ldrb	r0, [r3, #1]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b720:	2301      	movs	r3, #1
 800b722:	697a      	ldr	r2, [r7, #20]
 800b724:	f7ff fd0e 	bl	800b144 <disk_write>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d002      	beq.n	800b734 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b72e:	2301      	movs	r3, #1
 800b730:	73fb      	strb	r3, [r7, #15]
 800b732:	e022      	b.n	800b77a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b73e:	697a      	ldr	r2, [r7, #20]
 800b740:	1ad2      	subs	r2, r2, r3
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a1b      	ldr	r3, [r3, #32]
 800b746:	429a      	cmp	r2, r3
 800b748:	d217      	bcs.n	800b77a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	789b      	ldrb	r3, [r3, #2]
 800b74e:	613b      	str	r3, [r7, #16]
 800b750:	e010      	b.n	800b774 <sync_window+0x78>
					wsect += fs->fsize;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	697a      	ldr	r2, [r7, #20]
 800b758:	4413      	add	r3, r2
 800b75a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	7858      	ldrb	r0, [r3, #1]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b766:	2301      	movs	r3, #1
 800b768:	697a      	ldr	r2, [r7, #20]
 800b76a:	f7ff fceb 	bl	800b144 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	3b01      	subs	r3, #1
 800b772:	613b      	str	r3, [r7, #16]
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	2b01      	cmp	r3, #1
 800b778:	d8eb      	bhi.n	800b752 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b77a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3718      	adds	r7, #24
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b78e:	2300      	movs	r3, #0
 800b790:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b796:	683a      	ldr	r2, [r7, #0]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d01b      	beq.n	800b7d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f7ff ffad 	bl	800b6fc <sync_window>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b7a6:	7bfb      	ldrb	r3, [r7, #15]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d113      	bne.n	800b7d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	7858      	ldrb	r0, [r3, #1]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	683a      	ldr	r2, [r7, #0]
 800b7ba:	f7ff fca3 	bl	800b104 <disk_read>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d004      	beq.n	800b7ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b7c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b7c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	683a      	ldr	r2, [r7, #0]
 800b7d2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800b7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
	...

0800b7e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f7ff ff87 	bl	800b6fc <sync_window>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b7f2:	7bfb      	ldrb	r3, [r7, #15]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d159      	bne.n	800b8ac <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	2b03      	cmp	r3, #3
 800b7fe:	d149      	bne.n	800b894 <sync_fs+0xb4>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	791b      	ldrb	r3, [r3, #4]
 800b804:	2b01      	cmp	r3, #1
 800b806:	d145      	bne.n	800b894 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	899b      	ldrh	r3, [r3, #12]
 800b812:	461a      	mov	r2, r3
 800b814:	2100      	movs	r1, #0
 800b816:	f7ff fd76 	bl	800b306 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	3338      	adds	r3, #56	; 0x38
 800b81e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b822:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b826:	4618      	mov	r0, r3
 800b828:	f7ff fd05 	bl	800b236 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	3338      	adds	r3, #56	; 0x38
 800b830:	4921      	ldr	r1, [pc, #132]	; (800b8b8 <sync_fs+0xd8>)
 800b832:	4618      	mov	r0, r3
 800b834:	f7ff fd1a 	bl	800b26c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	3338      	adds	r3, #56	; 0x38
 800b83c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b840:	491e      	ldr	r1, [pc, #120]	; (800b8bc <sync_fs+0xdc>)
 800b842:	4618      	mov	r0, r3
 800b844:	f7ff fd12 	bl	800b26c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	3338      	adds	r3, #56	; 0x38
 800b84c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	699b      	ldr	r3, [r3, #24]
 800b854:	4619      	mov	r1, r3
 800b856:	4610      	mov	r0, r2
 800b858:	f7ff fd08 	bl	800b26c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	3338      	adds	r3, #56	; 0x38
 800b860:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	695b      	ldr	r3, [r3, #20]
 800b868:	4619      	mov	r1, r3
 800b86a:	4610      	mov	r0, r2
 800b86c:	f7ff fcfe 	bl	800b26c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b874:	1c5a      	adds	r2, r3, #1
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	7858      	ldrb	r0, [r3, #1]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b888:	2301      	movs	r3, #1
 800b88a:	f7ff fc5b 	bl	800b144 <disk_write>
			fs->fsi_flag = 0;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	785b      	ldrb	r3, [r3, #1]
 800b898:	2200      	movs	r2, #0
 800b89a:	2100      	movs	r1, #0
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7ff fc71 	bl	800b184 <disk_ioctl>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d001      	beq.n	800b8ac <sync_fs+0xcc>
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	41615252 	.word	0x41615252
 800b8bc:	61417272 	.word	0x61417272

0800b8c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	3b02      	subs	r3, #2
 800b8ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	69db      	ldr	r3, [r3, #28]
 800b8d4:	3b02      	subs	r3, #2
 800b8d6:	683a      	ldr	r2, [r7, #0]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d301      	bcc.n	800b8e0 <clust2sect+0x20>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	e008      	b.n	800b8f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	895b      	ldrh	r3, [r3, #10]
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	fb03 f202 	mul.w	r2, r3, r2
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f0:	4413      	add	r3, r2
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	370c      	adds	r7, #12
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr

0800b8fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b086      	sub	sp, #24
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	2b01      	cmp	r3, #1
 800b912:	d904      	bls.n	800b91e <get_fat+0x20>
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	69db      	ldr	r3, [r3, #28]
 800b918:	683a      	ldr	r2, [r7, #0]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d302      	bcc.n	800b924 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b91e:	2301      	movs	r3, #1
 800b920:	617b      	str	r3, [r7, #20]
 800b922:	e0bb      	b.n	800ba9c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b924:	f04f 33ff 	mov.w	r3, #4294967295
 800b928:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	2b03      	cmp	r3, #3
 800b930:	f000 8083 	beq.w	800ba3a <get_fat+0x13c>
 800b934:	2b03      	cmp	r3, #3
 800b936:	f300 80a7 	bgt.w	800ba88 <get_fat+0x18a>
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d002      	beq.n	800b944 <get_fat+0x46>
 800b93e:	2b02      	cmp	r3, #2
 800b940:	d056      	beq.n	800b9f0 <get_fat+0xf2>
 800b942:	e0a1      	b.n	800ba88 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	60fb      	str	r3, [r7, #12]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	085b      	lsrs	r3, r3, #1
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	4413      	add	r3, r2
 800b950:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	899b      	ldrh	r3, [r3, #12]
 800b95a:	4619      	mov	r1, r3
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b962:	4413      	add	r3, r2
 800b964:	4619      	mov	r1, r3
 800b966:	6938      	ldr	r0, [r7, #16]
 800b968:	f7ff ff0c 	bl	800b784 <move_window>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f040 808d 	bne.w	800ba8e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	1c5a      	adds	r2, r3, #1
 800b978:	60fa      	str	r2, [r7, #12]
 800b97a:	693a      	ldr	r2, [r7, #16]
 800b97c:	8992      	ldrh	r2, [r2, #12]
 800b97e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b982:	fb01 f202 	mul.w	r2, r1, r2
 800b986:	1a9b      	subs	r3, r3, r2
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	4413      	add	r3, r2
 800b98c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b990:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	899b      	ldrh	r3, [r3, #12]
 800b99a:	4619      	mov	r1, r3
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b9a2:	4413      	add	r3, r2
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	6938      	ldr	r0, [r7, #16]
 800b9a8:	f7ff feec 	bl	800b784 <move_window>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d16f      	bne.n	800ba92 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	899b      	ldrh	r3, [r3, #12]
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800b9be:	fb01 f202 	mul.w	r2, r1, r2
 800b9c2:	1a9b      	subs	r3, r3, r2
 800b9c4:	693a      	ldr	r2, [r7, #16]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b9cc:	021b      	lsls	r3, r3, #8
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	f003 0301 	and.w	r3, r3, #1
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d002      	beq.n	800b9e6 <get_fat+0xe8>
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	091b      	lsrs	r3, r3, #4
 800b9e4:	e002      	b.n	800b9ec <get_fat+0xee>
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9ec:	617b      	str	r3, [r7, #20]
			break;
 800b9ee:	e055      	b.n	800ba9c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	899b      	ldrh	r3, [r3, #12]
 800b9f8:	085b      	lsrs	r3, r3, #1
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba04:	4413      	add	r3, r2
 800ba06:	4619      	mov	r1, r3
 800ba08:	6938      	ldr	r0, [r7, #16]
 800ba0a:	f7ff febb 	bl	800b784 <move_window>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d140      	bne.n	800ba96 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	005b      	lsls	r3, r3, #1
 800ba1e:	693a      	ldr	r2, [r7, #16]
 800ba20:	8992      	ldrh	r2, [r2, #12]
 800ba22:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba26:	fb00 f202 	mul.w	r2, r0, r2
 800ba2a:	1a9b      	subs	r3, r3, r2
 800ba2c:	440b      	add	r3, r1
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7ff fbc6 	bl	800b1c0 <ld_word>
 800ba34:	4603      	mov	r3, r0
 800ba36:	617b      	str	r3, [r7, #20]
			break;
 800ba38:	e030      	b.n	800ba9c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	899b      	ldrh	r3, [r3, #12]
 800ba42:	089b      	lsrs	r3, r3, #2
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	4619      	mov	r1, r3
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba4e:	4413      	add	r3, r2
 800ba50:	4619      	mov	r1, r3
 800ba52:	6938      	ldr	r0, [r7, #16]
 800ba54:	f7ff fe96 	bl	800b784 <move_window>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d11d      	bne.n	800ba9a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	693a      	ldr	r2, [r7, #16]
 800ba6a:	8992      	ldrh	r2, [r2, #12]
 800ba6c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba70:	fb00 f202 	mul.w	r2, r0, r2
 800ba74:	1a9b      	subs	r3, r3, r2
 800ba76:	440b      	add	r3, r1
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7ff fbb9 	bl	800b1f0 <ld_dword>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ba84:	617b      	str	r3, [r7, #20]
			break;
 800ba86:	e009      	b.n	800ba9c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ba88:	2301      	movs	r3, #1
 800ba8a:	617b      	str	r3, [r7, #20]
 800ba8c:	e006      	b.n	800ba9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba8e:	bf00      	nop
 800ba90:	e004      	b.n	800ba9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba92:	bf00      	nop
 800ba94:	e002      	b.n	800ba9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ba96:	bf00      	nop
 800ba98:	e000      	b.n	800ba9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ba9a:	bf00      	nop
		}
	}

	return val;
 800ba9c:	697b      	ldr	r3, [r7, #20]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3718      	adds	r7, #24
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800baa6:	b590      	push	{r4, r7, lr}
 800baa8:	b089      	sub	sp, #36	; 0x24
 800baaa:	af00      	add	r7, sp, #0
 800baac:	60f8      	str	r0, [r7, #12]
 800baae:	60b9      	str	r1, [r7, #8]
 800bab0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bab2:	2302      	movs	r3, #2
 800bab4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	2b01      	cmp	r3, #1
 800baba:	f240 8102 	bls.w	800bcc2 <put_fat+0x21c>
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	69db      	ldr	r3, [r3, #28]
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	f080 80fc 	bcs.w	800bcc2 <put_fat+0x21c>
		switch (fs->fs_type) {
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	2b03      	cmp	r3, #3
 800bad0:	f000 80b6 	beq.w	800bc40 <put_fat+0x19a>
 800bad4:	2b03      	cmp	r3, #3
 800bad6:	f300 80fd 	bgt.w	800bcd4 <put_fat+0x22e>
 800bada:	2b01      	cmp	r3, #1
 800badc:	d003      	beq.n	800bae6 <put_fat+0x40>
 800bade:	2b02      	cmp	r3, #2
 800bae0:	f000 8083 	beq.w	800bbea <put_fat+0x144>
 800bae4:	e0f6      	b.n	800bcd4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	61bb      	str	r3, [r7, #24]
 800baea:	69bb      	ldr	r3, [r7, #24]
 800baec:	085b      	lsrs	r3, r3, #1
 800baee:	69ba      	ldr	r2, [r7, #24]
 800baf0:	4413      	add	r3, r2
 800baf2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	899b      	ldrh	r3, [r3, #12]
 800bafc:	4619      	mov	r1, r3
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb04:	4413      	add	r3, r2
 800bb06:	4619      	mov	r1, r3
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	f7ff fe3b 	bl	800b784 <move_window>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bb12:	7ffb      	ldrb	r3, [r7, #31]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	f040 80d6 	bne.w	800bcc6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	1c5a      	adds	r2, r3, #1
 800bb24:	61ba      	str	r2, [r7, #24]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	8992      	ldrh	r2, [r2, #12]
 800bb2a:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb2e:	fb00 f202 	mul.w	r2, r0, r2
 800bb32:	1a9b      	subs	r3, r3, r2
 800bb34:	440b      	add	r3, r1
 800bb36:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	f003 0301 	and.w	r3, r3, #1
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00d      	beq.n	800bb5e <put_fat+0xb8>
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	b25b      	sxtb	r3, r3
 800bb48:	f003 030f 	and.w	r3, r3, #15
 800bb4c:	b25a      	sxtb	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	011b      	lsls	r3, r3, #4
 800bb54:	b25b      	sxtb	r3, r3
 800bb56:	4313      	orrs	r3, r2
 800bb58:	b25b      	sxtb	r3, r3
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	e001      	b.n	800bb62 <put_fat+0xbc>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	697a      	ldr	r2, [r7, #20]
 800bb64:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	899b      	ldrh	r3, [r3, #12]
 800bb74:	4619      	mov	r1, r3
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb7c:	4413      	add	r3, r2
 800bb7e:	4619      	mov	r1, r3
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f7ff fdff 	bl	800b784 <move_window>
 800bb86:	4603      	mov	r3, r0
 800bb88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bb8a:	7ffb      	ldrb	r3, [r7, #31]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f040 809c 	bne.w	800bcca <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	899b      	ldrh	r3, [r3, #12]
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	fbb3 f0f2 	udiv	r0, r3, r2
 800bba4:	fb00 f202 	mul.w	r2, r0, r2
 800bba8:	1a9b      	subs	r3, r3, r2
 800bbaa:	440b      	add	r3, r1
 800bbac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	f003 0301 	and.w	r3, r3, #1
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d003      	beq.n	800bbc0 <put_fat+0x11a>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	091b      	lsrs	r3, r3, #4
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	e00e      	b.n	800bbde <put_fat+0x138>
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	b25b      	sxtb	r3, r3
 800bbc6:	f023 030f 	bic.w	r3, r3, #15
 800bbca:	b25a      	sxtb	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	0a1b      	lsrs	r3, r3, #8
 800bbd0:	b25b      	sxtb	r3, r3
 800bbd2:	f003 030f 	and.w	r3, r3, #15
 800bbd6:	b25b      	sxtb	r3, r3
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	b25b      	sxtb	r3, r3
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	697a      	ldr	r2, [r7, #20]
 800bbe0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	70da      	strb	r2, [r3, #3]
			break;
 800bbe8:	e074      	b.n	800bcd4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	899b      	ldrh	r3, [r3, #12]
 800bbf2:	085b      	lsrs	r3, r3, #1
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	fbb3 f3f1 	udiv	r3, r3, r1
 800bbfe:	4413      	add	r3, r2
 800bc00:	4619      	mov	r1, r3
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f7ff fdbe 	bl	800b784 <move_window>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc0c:	7ffb      	ldrb	r3, [r7, #31]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d15d      	bne.n	800bcce <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	005b      	lsls	r3, r3, #1
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	8992      	ldrh	r2, [r2, #12]
 800bc20:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc24:	fb00 f202 	mul.w	r2, r0, r2
 800bc28:	1a9b      	subs	r3, r3, r2
 800bc2a:	440b      	add	r3, r1
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	b292      	uxth	r2, r2
 800bc30:	4611      	mov	r1, r2
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7ff faff 	bl	800b236 <st_word>
			fs->wflag = 1;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	70da      	strb	r2, [r3, #3]
			break;
 800bc3e:	e049      	b.n	800bcd4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	899b      	ldrh	r3, [r3, #12]
 800bc48:	089b      	lsrs	r3, r3, #2
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc54:	4413      	add	r3, r2
 800bc56:	4619      	mov	r1, r3
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	f7ff fd93 	bl	800b784 <move_window>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc62:	7ffb      	ldrb	r3, [r7, #31]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d134      	bne.n	800bcd2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	68fa      	ldr	r2, [r7, #12]
 800bc7a:	8992      	ldrh	r2, [r2, #12]
 800bc7c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc80:	fb00 f202 	mul.w	r2, r0, r2
 800bc84:	1a9b      	subs	r3, r3, r2
 800bc86:	440b      	add	r3, r1
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7ff fab1 	bl	800b1f0 <ld_dword>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bc94:	4323      	orrs	r3, r4
 800bc96:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	68fa      	ldr	r2, [r7, #12]
 800bca4:	8992      	ldrh	r2, [r2, #12]
 800bca6:	fbb3 f0f2 	udiv	r0, r3, r2
 800bcaa:	fb00 f202 	mul.w	r2, r0, r2
 800bcae:	1a9b      	subs	r3, r3, r2
 800bcb0:	440b      	add	r3, r1
 800bcb2:	6879      	ldr	r1, [r7, #4]
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7ff fad9 	bl	800b26c <st_dword>
			fs->wflag = 1;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	70da      	strb	r2, [r3, #3]
			break;
 800bcc0:	e008      	b.n	800bcd4 <put_fat+0x22e>
		}
	}
 800bcc2:	bf00      	nop
 800bcc4:	e006      	b.n	800bcd4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800bcc6:	bf00      	nop
 800bcc8:	e004      	b.n	800bcd4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800bcca:	bf00      	nop
 800bccc:	e002      	b.n	800bcd4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800bcce:	bf00      	nop
 800bcd0:	e000      	b.n	800bcd4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800bcd2:	bf00      	nop
	return res;
 800bcd4:	7ffb      	ldrb	r3, [r7, #31]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3724      	adds	r7, #36	; 0x24
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd90      	pop	{r4, r7, pc}

0800bcde <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b088      	sub	sp, #32
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	60f8      	str	r0, [r7, #12]
 800bce6:	60b9      	str	r1, [r7, #8]
 800bce8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bcea:	2300      	movs	r3, #0
 800bcec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d904      	bls.n	800bd04 <remove_chain+0x26>
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	69db      	ldr	r3, [r3, #28]
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d301      	bcc.n	800bd08 <remove_chain+0x2a>
 800bd04:	2302      	movs	r3, #2
 800bd06:	e04b      	b.n	800bda0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00c      	beq.n	800bd28 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bd0e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd12:	6879      	ldr	r1, [r7, #4]
 800bd14:	69b8      	ldr	r0, [r7, #24]
 800bd16:	f7ff fec6 	bl	800baa6 <put_fat>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bd1e:	7ffb      	ldrb	r3, [r7, #31]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d001      	beq.n	800bd28 <remove_chain+0x4a>
 800bd24:	7ffb      	ldrb	r3, [r7, #31]
 800bd26:	e03b      	b.n	800bda0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bd28:	68b9      	ldr	r1, [r7, #8]
 800bd2a:	68f8      	ldr	r0, [r7, #12]
 800bd2c:	f7ff fde7 	bl	800b8fe <get_fat>
 800bd30:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d031      	beq.n	800bd9c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d101      	bne.n	800bd42 <remove_chain+0x64>
 800bd3e:	2302      	movs	r3, #2
 800bd40:	e02e      	b.n	800bda0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd48:	d101      	bne.n	800bd4e <remove_chain+0x70>
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e028      	b.n	800bda0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bd4e:	2200      	movs	r2, #0
 800bd50:	68b9      	ldr	r1, [r7, #8]
 800bd52:	69b8      	ldr	r0, [r7, #24]
 800bd54:	f7ff fea7 	bl	800baa6 <put_fat>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bd5c:	7ffb      	ldrb	r3, [r7, #31]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d001      	beq.n	800bd66 <remove_chain+0x88>
 800bd62:	7ffb      	ldrb	r3, [r7, #31]
 800bd64:	e01c      	b.n	800bda0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	699a      	ldr	r2, [r3, #24]
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	69db      	ldr	r3, [r3, #28]
 800bd6e:	3b02      	subs	r3, #2
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d20b      	bcs.n	800bd8c <remove_chain+0xae>
			fs->free_clst++;
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	699b      	ldr	r3, [r3, #24]
 800bd78:	1c5a      	adds	r2, r3, #1
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	791b      	ldrb	r3, [r3, #4]
 800bd82:	f043 0301 	orr.w	r3, r3, #1
 800bd86:	b2da      	uxtb	r2, r3
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	69db      	ldr	r3, [r3, #28]
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d3c6      	bcc.n	800bd28 <remove_chain+0x4a>
 800bd9a:	e000      	b.n	800bd9e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bd9c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3720      	adds	r7, #32
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b088      	sub	sp, #32
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10d      	bne.n	800bdda <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	695b      	ldr	r3, [r3, #20]
 800bdc2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d004      	beq.n	800bdd4 <create_chain+0x2c>
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	69db      	ldr	r3, [r3, #28]
 800bdce:	69ba      	ldr	r2, [r7, #24]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d31b      	bcc.n	800be0c <create_chain+0x64>
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	61bb      	str	r3, [r7, #24]
 800bdd8:	e018      	b.n	800be0c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bdda:	6839      	ldr	r1, [r7, #0]
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f7ff fd8e 	bl	800b8fe <get_fat>
 800bde2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d801      	bhi.n	800bdee <create_chain+0x46>
 800bdea:	2301      	movs	r3, #1
 800bdec:	e070      	b.n	800bed0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf4:	d101      	bne.n	800bdfa <create_chain+0x52>
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	e06a      	b.n	800bed0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	69db      	ldr	r3, [r3, #28]
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	429a      	cmp	r2, r3
 800be02:	d201      	bcs.n	800be08 <create_chain+0x60>
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	e063      	b.n	800bed0 <create_chain+0x128>
		scl = clst;
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800be0c:	69bb      	ldr	r3, [r7, #24]
 800be0e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800be10:	69fb      	ldr	r3, [r7, #28]
 800be12:	3301      	adds	r3, #1
 800be14:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	69db      	ldr	r3, [r3, #28]
 800be1a:	69fa      	ldr	r2, [r7, #28]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d307      	bcc.n	800be30 <create_chain+0x88>
				ncl = 2;
 800be20:	2302      	movs	r3, #2
 800be22:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800be24:	69fa      	ldr	r2, [r7, #28]
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d901      	bls.n	800be30 <create_chain+0x88>
 800be2c:	2300      	movs	r3, #0
 800be2e:	e04f      	b.n	800bed0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800be30:	69f9      	ldr	r1, [r7, #28]
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff fd63 	bl	800b8fe <get_fat>
 800be38:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d00e      	beq.n	800be5e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2b01      	cmp	r3, #1
 800be44:	d003      	beq.n	800be4e <create_chain+0xa6>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be4c:	d101      	bne.n	800be52 <create_chain+0xaa>
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	e03e      	b.n	800bed0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800be52:	69fa      	ldr	r2, [r7, #28]
 800be54:	69bb      	ldr	r3, [r7, #24]
 800be56:	429a      	cmp	r2, r3
 800be58:	d1da      	bne.n	800be10 <create_chain+0x68>
 800be5a:	2300      	movs	r3, #0
 800be5c:	e038      	b.n	800bed0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800be5e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800be60:	f04f 32ff 	mov.w	r2, #4294967295
 800be64:	69f9      	ldr	r1, [r7, #28]
 800be66:	6938      	ldr	r0, [r7, #16]
 800be68:	f7ff fe1d 	bl	800baa6 <put_fat>
 800be6c:	4603      	mov	r3, r0
 800be6e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800be70:	7dfb      	ldrb	r3, [r7, #23]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d109      	bne.n	800be8a <create_chain+0xe2>
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d006      	beq.n	800be8a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800be7c:	69fa      	ldr	r2, [r7, #28]
 800be7e:	6839      	ldr	r1, [r7, #0]
 800be80:	6938      	ldr	r0, [r7, #16]
 800be82:	f7ff fe10 	bl	800baa6 <put_fat>
 800be86:	4603      	mov	r3, r0
 800be88:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800be8a:	7dfb      	ldrb	r3, [r7, #23]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d116      	bne.n	800bebe <create_chain+0x116>
		fs->last_clst = ncl;
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	69fa      	ldr	r2, [r7, #28]
 800be94:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	699a      	ldr	r2, [r3, #24]
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	69db      	ldr	r3, [r3, #28]
 800be9e:	3b02      	subs	r3, #2
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d804      	bhi.n	800beae <create_chain+0x106>
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	699b      	ldr	r3, [r3, #24]
 800bea8:	1e5a      	subs	r2, r3, #1
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	791b      	ldrb	r3, [r3, #4]
 800beb2:	f043 0301 	orr.w	r3, r3, #1
 800beb6:	b2da      	uxtb	r2, r3
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	711a      	strb	r2, [r3, #4]
 800bebc:	e007      	b.n	800bece <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bebe:	7dfb      	ldrb	r3, [r7, #23]
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d102      	bne.n	800beca <create_chain+0x122>
 800bec4:	f04f 33ff 	mov.w	r3, #4294967295
 800bec8:	e000      	b.n	800becc <create_chain+0x124>
 800beca:	2301      	movs	r3, #1
 800becc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bece:	69fb      	ldr	r3, [r7, #28]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3720      	adds	r7, #32
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bed8:	b480      	push	{r7}
 800beda:	b087      	sub	sp, #28
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beec:	3304      	adds	r3, #4
 800beee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	899b      	ldrh	r3, [r3, #12]
 800bef4:	461a      	mov	r2, r3
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	fbb3 f3f2 	udiv	r3, r3, r2
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	8952      	ldrh	r2, [r2, #10]
 800bf00:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf04:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	1d1a      	adds	r2, r3, #4
 800bf0a:	613a      	str	r2, [r7, #16]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d101      	bne.n	800bf1a <clmt_clust+0x42>
 800bf16:	2300      	movs	r3, #0
 800bf18:	e010      	b.n	800bf3c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800bf1a:	697a      	ldr	r2, [r7, #20]
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d307      	bcc.n	800bf32 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800bf22:	697a      	ldr	r2, [r7, #20]
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	1ad3      	subs	r3, r2, r3
 800bf28:	617b      	str	r3, [r7, #20]
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	3304      	adds	r3, #4
 800bf2e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bf30:	e7e9      	b.n	800bf06 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800bf32:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	4413      	add	r3, r2
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	371c      	adds	r7, #28
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b086      	sub	sp, #24
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf5e:	d204      	bcs.n	800bf6a <dir_sdi+0x22>
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	f003 031f 	and.w	r3, r3, #31
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d001      	beq.n	800bf6e <dir_sdi+0x26>
		return FR_INT_ERR;
 800bf6a:	2302      	movs	r3, #2
 800bf6c:	e071      	b.n	800c052 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d106      	bne.n	800bf8e <dir_sdi+0x46>
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	2b02      	cmp	r3, #2
 800bf86:	d902      	bls.n	800bf8e <dir_sdi+0x46>
		clst = fs->dirbase;
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d10c      	bne.n	800bfae <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	095b      	lsrs	r3, r3, #5
 800bf98:	693a      	ldr	r2, [r7, #16]
 800bf9a:	8912      	ldrh	r2, [r2, #8]
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d301      	bcc.n	800bfa4 <dir_sdi+0x5c>
 800bfa0:	2302      	movs	r3, #2
 800bfa2:	e056      	b.n	800c052 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	61da      	str	r2, [r3, #28]
 800bfac:	e02d      	b.n	800c00a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	895b      	ldrh	r3, [r3, #10]
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	899b      	ldrh	r3, [r3, #12]
 800bfb8:	fb02 f303 	mul.w	r3, r2, r3
 800bfbc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bfbe:	e019      	b.n	800bff4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6979      	ldr	r1, [r7, #20]
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7ff fc9a 	bl	800b8fe <get_fat>
 800bfca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd2:	d101      	bne.n	800bfd8 <dir_sdi+0x90>
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	e03c      	b.n	800c052 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d904      	bls.n	800bfe8 <dir_sdi+0xa0>
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	69db      	ldr	r3, [r3, #28]
 800bfe2:	697a      	ldr	r2, [r7, #20]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d301      	bcc.n	800bfec <dir_sdi+0xa4>
 800bfe8:	2302      	movs	r3, #2
 800bfea:	e032      	b.n	800c052 <dir_sdi+0x10a>
			ofs -= csz;
 800bfec:	683a      	ldr	r2, [r7, #0]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bff4:	683a      	ldr	r2, [r7, #0]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d2e1      	bcs.n	800bfc0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800bffc:	6979      	ldr	r1, [r7, #20]
 800bffe:	6938      	ldr	r0, [r7, #16]
 800c000:	f7ff fc5e 	bl	800b8c0 <clust2sect>
 800c004:	4602      	mov	r2, r0
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	697a      	ldr	r2, [r7, #20]
 800c00e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	69db      	ldr	r3, [r3, #28]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d101      	bne.n	800c01c <dir_sdi+0xd4>
 800c018:	2302      	movs	r3, #2
 800c01a:	e01a      	b.n	800c052 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	69da      	ldr	r2, [r3, #28]
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	899b      	ldrh	r3, [r3, #12]
 800c024:	4619      	mov	r1, r3
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	fbb3 f3f1 	udiv	r3, r3, r1
 800c02c:	441a      	add	r2, r3
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	899b      	ldrh	r3, [r3, #12]
 800c03c:	461a      	mov	r2, r3
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	fbb3 f0f2 	udiv	r0, r3, r2
 800c044:	fb00 f202 	mul.w	r2, r0, r2
 800c048:	1a9b      	subs	r3, r3, r2
 800c04a:	18ca      	adds	r2, r1, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c050:	2300      	movs	r3, #0
}
 800c052:	4618      	mov	r0, r3
 800c054:	3718      	adds	r7, #24
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b086      	sub	sp, #24
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
 800c062:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	695b      	ldr	r3, [r3, #20]
 800c06e:	3320      	adds	r3, #32
 800c070:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	69db      	ldr	r3, [r3, #28]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d003      	beq.n	800c082 <dir_next+0x28>
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c080:	d301      	bcc.n	800c086 <dir_next+0x2c>
 800c082:	2304      	movs	r3, #4
 800c084:	e0bb      	b.n	800c1fe <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	899b      	ldrh	r3, [r3, #12]
 800c08a:	461a      	mov	r2, r3
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c092:	fb01 f202 	mul.w	r2, r1, r2
 800c096:	1a9b      	subs	r3, r3, r2
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f040 809d 	bne.w	800c1d8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	69db      	ldr	r3, [r3, #28]
 800c0a2:	1c5a      	adds	r2, r3, #1
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	699b      	ldr	r3, [r3, #24]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d10b      	bne.n	800c0c8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	095b      	lsrs	r3, r3, #5
 800c0b4:	68fa      	ldr	r2, [r7, #12]
 800c0b6:	8912      	ldrh	r2, [r2, #8]
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	f0c0 808d 	bcc.w	800c1d8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	61da      	str	r2, [r3, #28]
 800c0c4:	2304      	movs	r3, #4
 800c0c6:	e09a      	b.n	800c1fe <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	899b      	ldrh	r3, [r3, #12]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0d4:	68fa      	ldr	r2, [r7, #12]
 800c0d6:	8952      	ldrh	r2, [r2, #10]
 800c0d8:	3a01      	subs	r2, #1
 800c0da:	4013      	ands	r3, r2
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d17b      	bne.n	800c1d8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	699b      	ldr	r3, [r3, #24]
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	4610      	mov	r0, r2
 800c0ea:	f7ff fc08 	bl	800b8fe <get_fat>
 800c0ee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d801      	bhi.n	800c0fa <dir_next+0xa0>
 800c0f6:	2302      	movs	r3, #2
 800c0f8:	e081      	b.n	800c1fe <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c100:	d101      	bne.n	800c106 <dir_next+0xac>
 800c102:	2301      	movs	r3, #1
 800c104:	e07b      	b.n	800c1fe <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	69db      	ldr	r3, [r3, #28]
 800c10a:	697a      	ldr	r2, [r7, #20]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d359      	bcc.n	800c1c4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d104      	bne.n	800c120 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	61da      	str	r2, [r3, #28]
 800c11c:	2304      	movs	r3, #4
 800c11e:	e06e      	b.n	800c1fe <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	699b      	ldr	r3, [r3, #24]
 800c126:	4619      	mov	r1, r3
 800c128:	4610      	mov	r0, r2
 800c12a:	f7ff fe3d 	bl	800bda8 <create_chain>
 800c12e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d101      	bne.n	800c13a <dir_next+0xe0>
 800c136:	2307      	movs	r3, #7
 800c138:	e061      	b.n	800c1fe <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d101      	bne.n	800c144 <dir_next+0xea>
 800c140:	2302      	movs	r3, #2
 800c142:	e05c      	b.n	800c1fe <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c14a:	d101      	bne.n	800c150 <dir_next+0xf6>
 800c14c:	2301      	movs	r3, #1
 800c14e:	e056      	b.n	800c1fe <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c150:	68f8      	ldr	r0, [r7, #12]
 800c152:	f7ff fad3 	bl	800b6fc <sync_window>
 800c156:	4603      	mov	r3, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d001      	beq.n	800c160 <dir_next+0x106>
 800c15c:	2301      	movs	r3, #1
 800c15e:	e04e      	b.n	800c1fe <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	899b      	ldrh	r3, [r3, #12]
 800c16a:	461a      	mov	r2, r3
 800c16c:	2100      	movs	r1, #0
 800c16e:	f7ff f8ca 	bl	800b306 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c172:	2300      	movs	r3, #0
 800c174:	613b      	str	r3, [r7, #16]
 800c176:	6979      	ldr	r1, [r7, #20]
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	f7ff fba1 	bl	800b8c0 <clust2sect>
 800c17e:	4602      	mov	r2, r0
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	635a      	str	r2, [r3, #52]	; 0x34
 800c184:	e012      	b.n	800c1ac <dir_next+0x152>
						fs->wflag = 1;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2201      	movs	r2, #1
 800c18a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c18c:	68f8      	ldr	r0, [r7, #12]
 800c18e:	f7ff fab5 	bl	800b6fc <sync_window>
 800c192:	4603      	mov	r3, r0
 800c194:	2b00      	cmp	r3, #0
 800c196:	d001      	beq.n	800c19c <dir_next+0x142>
 800c198:	2301      	movs	r3, #1
 800c19a:	e030      	b.n	800c1fe <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	613b      	str	r3, [r7, #16]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1a6:	1c5a      	adds	r2, r3, #1
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	635a      	str	r2, [r3, #52]	; 0x34
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	895b      	ldrh	r3, [r3, #10]
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d3e6      	bcc.n	800c186 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	1ad2      	subs	r2, r2, r3
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	697a      	ldr	r2, [r7, #20]
 800c1c8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c1ca:	6979      	ldr	r1, [r7, #20]
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f7ff fb77 	bl	800b8c0 <clust2sect>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	68ba      	ldr	r2, [r7, #8]
 800c1dc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	899b      	ldrh	r3, [r3, #12]
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800c1f0:	fb00 f202 	mul.w	r2, r0, r2
 800c1f4:	1a9b      	subs	r3, r3, r2
 800c1f6:	18ca      	adds	r2, r1, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c1fc:	2300      	movs	r3, #0
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3718      	adds	r7, #24
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c206:	b580      	push	{r7, lr}
 800c208:	b086      	sub	sp, #24
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
 800c20e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c216:	2100      	movs	r1, #0
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7ff fe95 	bl	800bf48 <dir_sdi>
 800c21e:	4603      	mov	r3, r0
 800c220:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c222:	7dfb      	ldrb	r3, [r7, #23]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d12b      	bne.n	800c280 <dir_alloc+0x7a>
		n = 0;
 800c228:	2300      	movs	r3, #0
 800c22a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	69db      	ldr	r3, [r3, #28]
 800c230:	4619      	mov	r1, r3
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f7ff faa6 	bl	800b784 <move_window>
 800c238:	4603      	mov	r3, r0
 800c23a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c23c:	7dfb      	ldrb	r3, [r7, #23]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d11d      	bne.n	800c27e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6a1b      	ldr	r3, [r3, #32]
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	2be5      	cmp	r3, #229	; 0xe5
 800c24a:	d004      	beq.n	800c256 <dir_alloc+0x50>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6a1b      	ldr	r3, [r3, #32]
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d107      	bne.n	800c266 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	3301      	adds	r3, #1
 800c25a:	613b      	str	r3, [r7, #16]
 800c25c:	693a      	ldr	r2, [r7, #16]
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	429a      	cmp	r2, r3
 800c262:	d102      	bne.n	800c26a <dir_alloc+0x64>
 800c264:	e00c      	b.n	800c280 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c266:	2300      	movs	r3, #0
 800c268:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c26a:	2101      	movs	r1, #1
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f7ff fef4 	bl	800c05a <dir_next>
 800c272:	4603      	mov	r3, r0
 800c274:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c276:	7dfb      	ldrb	r3, [r7, #23]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d0d7      	beq.n	800c22c <dir_alloc+0x26>
 800c27c:	e000      	b.n	800c280 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c27e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c280:	7dfb      	ldrb	r3, [r7, #23]
 800c282:	2b04      	cmp	r3, #4
 800c284:	d101      	bne.n	800c28a <dir_alloc+0x84>
 800c286:	2307      	movs	r3, #7
 800c288:	75fb      	strb	r3, [r7, #23]
	return res;
 800c28a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3718      	adds	r7, #24
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	331a      	adds	r3, #26
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fe ff8c 	bl	800b1c0 <ld_word>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	2b03      	cmp	r3, #3
 800c2b2:	d109      	bne.n	800c2c8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	3314      	adds	r3, #20
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7fe ff81 	bl	800b1c0 <ld_word>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	041b      	lsls	r3, r3, #16
 800c2c2:	68fa      	ldr	r2, [r7, #12]
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3710      	adds	r7, #16
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b084      	sub	sp, #16
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	60f8      	str	r0, [r7, #12]
 800c2da:	60b9      	str	r1, [r7, #8]
 800c2dc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	331a      	adds	r3, #26
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	b292      	uxth	r2, r2
 800c2e6:	4611      	mov	r1, r2
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7fe ffa4 	bl	800b236 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	2b03      	cmp	r3, #3
 800c2f4:	d109      	bne.n	800c30a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	f103 0214 	add.w	r2, r3, #20
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	0c1b      	lsrs	r3, r3, #16
 800c300:	b29b      	uxth	r3, r3
 800c302:	4619      	mov	r1, r3
 800c304:	4610      	mov	r0, r2
 800c306:	f7fe ff96 	bl	800b236 <st_word>
	}
}
 800c30a:	bf00      	nop
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b086      	sub	sp, #24
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c320:	2100      	movs	r1, #0
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f7ff fe10 	bl	800bf48 <dir_sdi>
 800c328:	4603      	mov	r3, r0
 800c32a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c32c:	7dfb      	ldrb	r3, [r7, #23]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d001      	beq.n	800c336 <dir_find+0x24>
 800c332:	7dfb      	ldrb	r3, [r7, #23]
 800c334:	e03e      	b.n	800c3b4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	69db      	ldr	r3, [r3, #28]
 800c33a:	4619      	mov	r1, r3
 800c33c:	6938      	ldr	r0, [r7, #16]
 800c33e:	f7ff fa21 	bl	800b784 <move_window>
 800c342:	4603      	mov	r3, r0
 800c344:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c346:	7dfb      	ldrb	r3, [r7, #23]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d12f      	bne.n	800c3ac <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6a1b      	ldr	r3, [r3, #32]
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c354:	7bfb      	ldrb	r3, [r7, #15]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d102      	bne.n	800c360 <dir_find+0x4e>
 800c35a:	2304      	movs	r3, #4
 800c35c:	75fb      	strb	r3, [r7, #23]
 800c35e:	e028      	b.n	800c3b2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6a1b      	ldr	r3, [r3, #32]
 800c364:	330b      	adds	r3, #11
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c36c:	b2da      	uxtb	r2, r3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6a1b      	ldr	r3, [r3, #32]
 800c376:	330b      	adds	r3, #11
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	f003 0308 	and.w	r3, r3, #8
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d10a      	bne.n	800c398 <dir_find+0x86>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6a18      	ldr	r0, [r3, #32]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	3324      	adds	r3, #36	; 0x24
 800c38a:	220b      	movs	r2, #11
 800c38c:	4619      	mov	r1, r3
 800c38e:	f7fe ffd5 	bl	800b33c <mem_cmp>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00b      	beq.n	800c3b0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c398:	2100      	movs	r1, #0
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7ff fe5d 	bl	800c05a <dir_next>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c3a4:	7dfb      	ldrb	r3, [r7, #23]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d0c5      	beq.n	800c336 <dir_find+0x24>
 800c3aa:	e002      	b.n	800c3b2 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c3ac:	bf00      	nop
 800c3ae:	e000      	b.n	800c3b2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c3b0:	bf00      	nop

	return res;
 800c3b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3718      	adds	r7, #24
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c3ca:	2101      	movs	r1, #1
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f7ff ff1a 	bl	800c206 <dir_alloc>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c3d6:	7bfb      	ldrb	r3, [r7, #15]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d11c      	bne.n	800c416 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	69db      	ldr	r3, [r3, #28]
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	68b8      	ldr	r0, [r7, #8]
 800c3e4:	f7ff f9ce 	bl	800b784 <move_window>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c3ec:	7bfb      	ldrb	r3, [r7, #15]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d111      	bne.n	800c416 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6a1b      	ldr	r3, [r3, #32]
 800c3f6:	2220      	movs	r2, #32
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fe ff83 	bl	800b306 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6a18      	ldr	r0, [r3, #32]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	3324      	adds	r3, #36	; 0x24
 800c408:	220b      	movs	r2, #11
 800c40a:	4619      	mov	r1, r3
 800c40c:	f7fe ff5a 	bl	800b2c4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	2201      	movs	r2, #1
 800c414:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c416:	7bfb      	ldrb	r3, [r7, #15]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b088      	sub	sp, #32
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	60fb      	str	r3, [r7, #12]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	3324      	adds	r3, #36	; 0x24
 800c434:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c436:	220b      	movs	r2, #11
 800c438:	2120      	movs	r1, #32
 800c43a:	68b8      	ldr	r0, [r7, #8]
 800c43c:	f7fe ff63 	bl	800b306 <mem_set>
	si = i = 0; ni = 8;
 800c440:	2300      	movs	r3, #0
 800c442:	613b      	str	r3, [r7, #16]
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	61fb      	str	r3, [r7, #28]
 800c448:	2308      	movs	r3, #8
 800c44a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	1c5a      	adds	r2, r3, #1
 800c450:	61fa      	str	r2, [r7, #28]
 800c452:	68fa      	ldr	r2, [r7, #12]
 800c454:	4413      	add	r3, r2
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c45a:	7efb      	ldrb	r3, [r7, #27]
 800c45c:	2b20      	cmp	r3, #32
 800c45e:	d94e      	bls.n	800c4fe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c460:	7efb      	ldrb	r3, [r7, #27]
 800c462:	2b2f      	cmp	r3, #47	; 0x2f
 800c464:	d006      	beq.n	800c474 <create_name+0x54>
 800c466:	7efb      	ldrb	r3, [r7, #27]
 800c468:	2b5c      	cmp	r3, #92	; 0x5c
 800c46a:	d110      	bne.n	800c48e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c46c:	e002      	b.n	800c474 <create_name+0x54>
 800c46e:	69fb      	ldr	r3, [r7, #28]
 800c470:	3301      	adds	r3, #1
 800c472:	61fb      	str	r3, [r7, #28]
 800c474:	68fa      	ldr	r2, [r7, #12]
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	4413      	add	r3, r2
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	2b2f      	cmp	r3, #47	; 0x2f
 800c47e:	d0f6      	beq.n	800c46e <create_name+0x4e>
 800c480:	68fa      	ldr	r2, [r7, #12]
 800c482:	69fb      	ldr	r3, [r7, #28]
 800c484:	4413      	add	r3, r2
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	2b5c      	cmp	r3, #92	; 0x5c
 800c48a:	d0f0      	beq.n	800c46e <create_name+0x4e>
			break;
 800c48c:	e038      	b.n	800c500 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c48e:	7efb      	ldrb	r3, [r7, #27]
 800c490:	2b2e      	cmp	r3, #46	; 0x2e
 800c492:	d003      	beq.n	800c49c <create_name+0x7c>
 800c494:	693a      	ldr	r2, [r7, #16]
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d30c      	bcc.n	800c4b6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	2b0b      	cmp	r3, #11
 800c4a0:	d002      	beq.n	800c4a8 <create_name+0x88>
 800c4a2:	7efb      	ldrb	r3, [r7, #27]
 800c4a4:	2b2e      	cmp	r3, #46	; 0x2e
 800c4a6:	d001      	beq.n	800c4ac <create_name+0x8c>
 800c4a8:	2306      	movs	r3, #6
 800c4aa:	e044      	b.n	800c536 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c4ac:	2308      	movs	r3, #8
 800c4ae:	613b      	str	r3, [r7, #16]
 800c4b0:	230b      	movs	r3, #11
 800c4b2:	617b      	str	r3, [r7, #20]
			continue;
 800c4b4:	e022      	b.n	800c4fc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c4b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	da04      	bge.n	800c4c8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c4be:	7efb      	ldrb	r3, [r7, #27]
 800c4c0:	3b80      	subs	r3, #128	; 0x80
 800c4c2:	4a1f      	ldr	r2, [pc, #124]	; (800c540 <create_name+0x120>)
 800c4c4:	5cd3      	ldrb	r3, [r2, r3]
 800c4c6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c4c8:	7efb      	ldrb	r3, [r7, #27]
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	481d      	ldr	r0, [pc, #116]	; (800c544 <create_name+0x124>)
 800c4ce:	f7fe ff5c 	bl	800b38a <chk_chr>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d001      	beq.n	800c4dc <create_name+0xbc>
 800c4d8:	2306      	movs	r3, #6
 800c4da:	e02c      	b.n	800c536 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c4dc:	7efb      	ldrb	r3, [r7, #27]
 800c4de:	2b60      	cmp	r3, #96	; 0x60
 800c4e0:	d905      	bls.n	800c4ee <create_name+0xce>
 800c4e2:	7efb      	ldrb	r3, [r7, #27]
 800c4e4:	2b7a      	cmp	r3, #122	; 0x7a
 800c4e6:	d802      	bhi.n	800c4ee <create_name+0xce>
 800c4e8:	7efb      	ldrb	r3, [r7, #27]
 800c4ea:	3b20      	subs	r3, #32
 800c4ec:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	1c5a      	adds	r2, r3, #1
 800c4f2:	613a      	str	r2, [r7, #16]
 800c4f4:	68ba      	ldr	r2, [r7, #8]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	7efa      	ldrb	r2, [r7, #27]
 800c4fa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c4fc:	e7a6      	b.n	800c44c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c4fe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	69fb      	ldr	r3, [r7, #28]
 800c504:	441a      	add	r2, r3
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d101      	bne.n	800c514 <create_name+0xf4>
 800c510:	2306      	movs	r3, #6
 800c512:	e010      	b.n	800c536 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	2be5      	cmp	r3, #229	; 0xe5
 800c51a:	d102      	bne.n	800c522 <create_name+0x102>
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	2205      	movs	r2, #5
 800c520:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c522:	7efb      	ldrb	r3, [r7, #27]
 800c524:	2b20      	cmp	r3, #32
 800c526:	d801      	bhi.n	800c52c <create_name+0x10c>
 800c528:	2204      	movs	r2, #4
 800c52a:	e000      	b.n	800c52e <create_name+0x10e>
 800c52c:	2200      	movs	r2, #0
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	330b      	adds	r3, #11
 800c532:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c534:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c536:	4618      	mov	r0, r3
 800c538:	3720      	adds	r7, #32
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	080132bc 	.word	0x080132bc
 800c544:	08012ec0 	.word	0x08012ec0

0800c548 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b086      	sub	sp, #24
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c55c:	e002      	b.n	800c564 <follow_path+0x1c>
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	3301      	adds	r3, #1
 800c562:	603b      	str	r3, [r7, #0]
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	2b2f      	cmp	r3, #47	; 0x2f
 800c56a:	d0f8      	beq.n	800c55e <follow_path+0x16>
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	2b5c      	cmp	r3, #92	; 0x5c
 800c572:	d0f4      	beq.n	800c55e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	2200      	movs	r2, #0
 800c578:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	2b1f      	cmp	r3, #31
 800c580:	d80a      	bhi.n	800c598 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2280      	movs	r2, #128	; 0x80
 800c586:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c58a:	2100      	movs	r1, #0
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f7ff fcdb 	bl	800bf48 <dir_sdi>
 800c592:	4603      	mov	r3, r0
 800c594:	75fb      	strb	r3, [r7, #23]
 800c596:	e048      	b.n	800c62a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c598:	463b      	mov	r3, r7
 800c59a:	4619      	mov	r1, r3
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f7ff ff3f 	bl	800c420 <create_name>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c5a6:	7dfb      	ldrb	r3, [r7, #23]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d139      	bne.n	800c620 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f7ff feb0 	bl	800c312 <dir_find>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c5bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c5be:	7dfb      	ldrb	r3, [r7, #23]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00a      	beq.n	800c5da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c5c4:	7dfb      	ldrb	r3, [r7, #23]
 800c5c6:	2b04      	cmp	r3, #4
 800c5c8:	d12c      	bne.n	800c624 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c5ca:	7afb      	ldrb	r3, [r7, #11]
 800c5cc:	f003 0304 	and.w	r3, r3, #4
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d127      	bne.n	800c624 <follow_path+0xdc>
 800c5d4:	2305      	movs	r3, #5
 800c5d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c5d8:	e024      	b.n	800c624 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c5da:	7afb      	ldrb	r3, [r7, #11]
 800c5dc:	f003 0304 	and.w	r3, r3, #4
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d121      	bne.n	800c628 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	799b      	ldrb	r3, [r3, #6]
 800c5e8:	f003 0310 	and.w	r3, r3, #16
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d102      	bne.n	800c5f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c5f0:	2305      	movs	r3, #5
 800c5f2:	75fb      	strb	r3, [r7, #23]
 800c5f4:	e019      	b.n	800c62a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	695b      	ldr	r3, [r3, #20]
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	8992      	ldrh	r2, [r2, #12]
 800c604:	fbb3 f0f2 	udiv	r0, r3, r2
 800c608:	fb00 f202 	mul.w	r2, r0, r2
 800c60c:	1a9b      	subs	r3, r3, r2
 800c60e:	440b      	add	r3, r1
 800c610:	4619      	mov	r1, r3
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f7ff fe3e 	bl	800c294 <ld_clust>
 800c618:	4602      	mov	r2, r0
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c61e:	e7bb      	b.n	800c598 <follow_path+0x50>
			if (res != FR_OK) break;
 800c620:	bf00      	nop
 800c622:	e002      	b.n	800c62a <follow_path+0xe2>
				break;
 800c624:	bf00      	nop
 800c626:	e000      	b.n	800c62a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c628:	bf00      	nop
			}
		}
	}

	return res;
 800c62a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3718      	adds	r7, #24
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c634:	b480      	push	{r7}
 800c636:	b087      	sub	sp, #28
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c63c:	f04f 33ff 	mov.w	r3, #4294967295
 800c640:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d031      	beq.n	800c6ae <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	617b      	str	r3, [r7, #20]
 800c650:	e002      	b.n	800c658 <get_ldnumber+0x24>
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	3301      	adds	r3, #1
 800c656:	617b      	str	r3, [r7, #20]
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	2b20      	cmp	r3, #32
 800c65e:	d903      	bls.n	800c668 <get_ldnumber+0x34>
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	2b3a      	cmp	r3, #58	; 0x3a
 800c666:	d1f4      	bne.n	800c652 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	2b3a      	cmp	r3, #58	; 0x3a
 800c66e:	d11c      	bne.n	800c6aa <get_ldnumber+0x76>
			tp = *path;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	1c5a      	adds	r2, r3, #1
 800c67a:	60fa      	str	r2, [r7, #12]
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	3b30      	subs	r3, #48	; 0x30
 800c680:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	2b09      	cmp	r3, #9
 800c686:	d80e      	bhi.n	800c6a6 <get_ldnumber+0x72>
 800c688:	68fa      	ldr	r2, [r7, #12]
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d10a      	bne.n	800c6a6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d107      	bne.n	800c6a6 <get_ldnumber+0x72>
					vol = (int)i;
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	3301      	adds	r3, #1
 800c69e:	617b      	str	r3, [r7, #20]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	697a      	ldr	r2, [r7, #20]
 800c6a4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	e002      	b.n	800c6b0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c6ae:	693b      	ldr	r3, [r7, #16]
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	371c      	adds	r7, #28
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	70da      	strb	r2, [r3, #3]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c6d2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c6d4:	6839      	ldr	r1, [r7, #0]
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f7ff f854 	bl	800b784 <move_window>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d001      	beq.n	800c6e6 <check_fs+0x2a>
 800c6e2:	2304      	movs	r3, #4
 800c6e4:	e038      	b.n	800c758 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	3338      	adds	r3, #56	; 0x38
 800c6ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7fe fd66 	bl	800b1c0 <ld_word>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d001      	beq.n	800c704 <check_fs+0x48>
 800c700:	2303      	movs	r3, #3
 800c702:	e029      	b.n	800c758 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c70a:	2be9      	cmp	r3, #233	; 0xe9
 800c70c:	d009      	beq.n	800c722 <check_fs+0x66>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c714:	2beb      	cmp	r3, #235	; 0xeb
 800c716:	d11e      	bne.n	800c756 <check_fs+0x9a>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c71e:	2b90      	cmp	r3, #144	; 0x90
 800c720:	d119      	bne.n	800c756 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	3338      	adds	r3, #56	; 0x38
 800c726:	3336      	adds	r3, #54	; 0x36
 800c728:	4618      	mov	r0, r3
 800c72a:	f7fe fd61 	bl	800b1f0 <ld_dword>
 800c72e:	4603      	mov	r3, r0
 800c730:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c734:	4a0a      	ldr	r2, [pc, #40]	; (800c760 <check_fs+0xa4>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d101      	bne.n	800c73e <check_fs+0x82>
 800c73a:	2300      	movs	r3, #0
 800c73c:	e00c      	b.n	800c758 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	3338      	adds	r3, #56	; 0x38
 800c742:	3352      	adds	r3, #82	; 0x52
 800c744:	4618      	mov	r0, r3
 800c746:	f7fe fd53 	bl	800b1f0 <ld_dword>
 800c74a:	4603      	mov	r3, r0
 800c74c:	4a05      	ldr	r2, [pc, #20]	; (800c764 <check_fs+0xa8>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d101      	bne.n	800c756 <check_fs+0x9a>
 800c752:	2300      	movs	r3, #0
 800c754:	e000      	b.n	800c758 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c756:	2302      	movs	r3, #2
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3708      	adds	r7, #8
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	00544146 	.word	0x00544146
 800c764:	33544146 	.word	0x33544146

0800c768 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b096      	sub	sp, #88	; 0x58
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	4613      	mov	r3, r2
 800c774:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	2200      	movs	r2, #0
 800c77a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f7ff ff59 	bl	800c634 <get_ldnumber>
 800c782:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c786:	2b00      	cmp	r3, #0
 800c788:	da01      	bge.n	800c78e <find_volume+0x26>
 800c78a:	230b      	movs	r3, #11
 800c78c:	e26a      	b.n	800cc64 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c78e:	4aa3      	ldr	r2, [pc, #652]	; (800ca1c <find_volume+0x2b4>)
 800c790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c796:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d101      	bne.n	800c7a2 <find_volume+0x3a>
 800c79e:	230c      	movs	r3, #12
 800c7a0:	e260      	b.n	800cc64 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800c7a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c7a4:	f7fe fe0c 	bl	800b3c0 <lock_fs>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d101      	bne.n	800c7b2 <find_volume+0x4a>
 800c7ae:	230f      	movs	r3, #15
 800c7b0:	e258      	b.n	800cc64 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7b6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c7b8:	79fb      	ldrb	r3, [r7, #7]
 800c7ba:	f023 0301 	bic.w	r3, r3, #1
 800c7be:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d01a      	beq.n	800c7fe <find_volume+0x96>
		stat = disk_status(fs->drv);
 800c7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ca:	785b      	ldrb	r3, [r3, #1]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7fe fc59 	bl	800b084 <disk_status>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c7d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c7dc:	f003 0301 	and.w	r3, r3, #1
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d10c      	bne.n	800c7fe <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c7e4:	79fb      	ldrb	r3, [r7, #7]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d007      	beq.n	800c7fa <find_volume+0x92>
 800c7ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c7ee:	f003 0304 	and.w	r3, r3, #4
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d001      	beq.n	800c7fa <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800c7f6:	230a      	movs	r3, #10
 800c7f8:	e234      	b.n	800cc64 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	e232      	b.n	800cc64 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c800:	2200      	movs	r2, #0
 800c802:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c806:	b2da      	uxtb	r2, r3
 800c808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80e:	785b      	ldrb	r3, [r3, #1]
 800c810:	4618      	mov	r0, r3
 800c812:	f7fe fc51 	bl	800b0b8 <disk_initialize>
 800c816:	4603      	mov	r3, r0
 800c818:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c81c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c820:	f003 0301 	and.w	r3, r3, #1
 800c824:	2b00      	cmp	r3, #0
 800c826:	d001      	beq.n	800c82c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c828:	2303      	movs	r3, #3
 800c82a:	e21b      	b.n	800cc64 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c82c:	79fb      	ldrb	r3, [r7, #7]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d007      	beq.n	800c842 <find_volume+0xda>
 800c832:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c836:	f003 0304 	and.w	r3, r3, #4
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d001      	beq.n	800c842 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800c83e:	230a      	movs	r3, #10
 800c840:	e210      	b.n	800cc64 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c844:	7858      	ldrb	r0, [r3, #1]
 800c846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c848:	330c      	adds	r3, #12
 800c84a:	461a      	mov	r2, r3
 800c84c:	2102      	movs	r1, #2
 800c84e:	f7fe fc99 	bl	800b184 <disk_ioctl>
 800c852:	4603      	mov	r3, r0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d001      	beq.n	800c85c <find_volume+0xf4>
 800c858:	2301      	movs	r3, #1
 800c85a:	e203      	b.n	800cc64 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85e:	899b      	ldrh	r3, [r3, #12]
 800c860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c864:	d80d      	bhi.n	800c882 <find_volume+0x11a>
 800c866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c868:	899b      	ldrh	r3, [r3, #12]
 800c86a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c86e:	d308      	bcc.n	800c882 <find_volume+0x11a>
 800c870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c872:	899b      	ldrh	r3, [r3, #12]
 800c874:	461a      	mov	r2, r3
 800c876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c878:	899b      	ldrh	r3, [r3, #12]
 800c87a:	3b01      	subs	r3, #1
 800c87c:	4013      	ands	r3, r2
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d001      	beq.n	800c886 <find_volume+0x11e>
 800c882:	2301      	movs	r3, #1
 800c884:	e1ee      	b.n	800cc64 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c886:	2300      	movs	r3, #0
 800c888:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c88a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c88c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c88e:	f7ff ff15 	bl	800c6bc <check_fs>
 800c892:	4603      	mov	r3, r0
 800c894:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c898:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c89c:	2b02      	cmp	r3, #2
 800c89e:	d149      	bne.n	800c934 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	643b      	str	r3, [r7, #64]	; 0x40
 800c8a4:	e01e      	b.n	800c8e4 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c8ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8ae:	011b      	lsls	r3, r3, #4
 800c8b0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c8b4:	4413      	add	r3, r2
 800c8b6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ba:	3304      	adds	r3, #4
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d006      	beq.n	800c8d0 <find_volume+0x168>
 800c8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c4:	3308      	adds	r3, #8
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7fe fc92 	bl	800b1f0 <ld_dword>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	e000      	b.n	800c8d2 <find_volume+0x16a>
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	3358      	adds	r3, #88	; 0x58
 800c8d8:	443b      	add	r3, r7
 800c8da:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c8de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	643b      	str	r3, [r7, #64]	; 0x40
 800c8e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8e6:	2b03      	cmp	r3, #3
 800c8e8:	d9dd      	bls.n	800c8a6 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c8ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d002      	beq.n	800c8fa <find_volume+0x192>
 800c8f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c8fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8fc:	009b      	lsls	r3, r3, #2
 800c8fe:	3358      	adds	r3, #88	; 0x58
 800c900:	443b      	add	r3, r7
 800c902:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c906:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d005      	beq.n	800c91a <find_volume+0x1b2>
 800c90e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c910:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c912:	f7ff fed3 	bl	800c6bc <check_fs>
 800c916:	4603      	mov	r3, r0
 800c918:	e000      	b.n	800c91c <find_volume+0x1b4>
 800c91a:	2303      	movs	r3, #3
 800c91c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c920:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c924:	2b01      	cmp	r3, #1
 800c926:	d905      	bls.n	800c934 <find_volume+0x1cc>
 800c928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c92a:	3301      	adds	r3, #1
 800c92c:	643b      	str	r3, [r7, #64]	; 0x40
 800c92e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c930:	2b03      	cmp	r3, #3
 800c932:	d9e2      	bls.n	800c8fa <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c934:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c938:	2b04      	cmp	r3, #4
 800c93a:	d101      	bne.n	800c940 <find_volume+0x1d8>
 800c93c:	2301      	movs	r3, #1
 800c93e:	e191      	b.n	800cc64 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c940:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c944:	2b01      	cmp	r3, #1
 800c946:	d901      	bls.n	800c94c <find_volume+0x1e4>
 800c948:	230d      	movs	r3, #13
 800c94a:	e18b      	b.n	800cc64 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94e:	3338      	adds	r3, #56	; 0x38
 800c950:	330b      	adds	r3, #11
 800c952:	4618      	mov	r0, r3
 800c954:	f7fe fc34 	bl	800b1c0 <ld_word>
 800c958:	4603      	mov	r3, r0
 800c95a:	461a      	mov	r2, r3
 800c95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95e:	899b      	ldrh	r3, [r3, #12]
 800c960:	429a      	cmp	r2, r3
 800c962:	d001      	beq.n	800c968 <find_volume+0x200>
 800c964:	230d      	movs	r3, #13
 800c966:	e17d      	b.n	800cc64 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96a:	3338      	adds	r3, #56	; 0x38
 800c96c:	3316      	adds	r3, #22
 800c96e:	4618      	mov	r0, r3
 800c970:	f7fe fc26 	bl	800b1c0 <ld_word>
 800c974:	4603      	mov	r3, r0
 800c976:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d106      	bne.n	800c98c <find_volume+0x224>
 800c97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c980:	3338      	adds	r3, #56	; 0x38
 800c982:	3324      	adds	r3, #36	; 0x24
 800c984:	4618      	mov	r0, r3
 800c986:	f7fe fc33 	bl	800b1f0 <ld_dword>
 800c98a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c990:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c994:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99e:	789b      	ldrb	r3, [r3, #2]
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d005      	beq.n	800c9b0 <find_volume+0x248>
 800c9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a6:	789b      	ldrb	r3, [r3, #2]
 800c9a8:	2b02      	cmp	r3, #2
 800c9aa:	d001      	beq.n	800c9b0 <find_volume+0x248>
 800c9ac:	230d      	movs	r3, #13
 800c9ae:	e159      	b.n	800cc64 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b2:	789b      	ldrb	r3, [r3, #2]
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9b8:	fb02 f303 	mul.w	r3, r2, r3
 800c9bc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9c4:	b29a      	uxth	r2, r3
 800c9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9cc:	895b      	ldrh	r3, [r3, #10]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d008      	beq.n	800c9e4 <find_volume+0x27c>
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d4:	895b      	ldrh	r3, [r3, #10]
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9da:	895b      	ldrh	r3, [r3, #10]
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	4013      	ands	r3, r2
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d001      	beq.n	800c9e8 <find_volume+0x280>
 800c9e4:	230d      	movs	r3, #13
 800c9e6:	e13d      	b.n	800cc64 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ea:	3338      	adds	r3, #56	; 0x38
 800c9ec:	3311      	adds	r3, #17
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fe fbe6 	bl	800b1c0 <ld_word>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fe:	891b      	ldrh	r3, [r3, #8]
 800ca00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca02:	8992      	ldrh	r2, [r2, #12]
 800ca04:	0952      	lsrs	r2, r2, #5
 800ca06:	b292      	uxth	r2, r2
 800ca08:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca0c:	fb01 f202 	mul.w	r2, r1, r2
 800ca10:	1a9b      	subs	r3, r3, r2
 800ca12:	b29b      	uxth	r3, r3
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d003      	beq.n	800ca20 <find_volume+0x2b8>
 800ca18:	230d      	movs	r3, #13
 800ca1a:	e123      	b.n	800cc64 <find_volume+0x4fc>
 800ca1c:	200010c4 	.word	0x200010c4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ca20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca22:	3338      	adds	r3, #56	; 0x38
 800ca24:	3313      	adds	r3, #19
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7fe fbca 	bl	800b1c0 <ld_word>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ca30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d106      	bne.n	800ca44 <find_volume+0x2dc>
 800ca36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca38:	3338      	adds	r3, #56	; 0x38
 800ca3a:	3320      	adds	r3, #32
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f7fe fbd7 	bl	800b1f0 <ld_dword>
 800ca42:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ca44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca46:	3338      	adds	r3, #56	; 0x38
 800ca48:	330e      	adds	r3, #14
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fe fbb8 	bl	800b1c0 <ld_word>
 800ca50:	4603      	mov	r3, r0
 800ca52:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ca54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d101      	bne.n	800ca5e <find_volume+0x2f6>
 800ca5a:	230d      	movs	r3, #13
 800ca5c:	e102      	b.n	800cc64 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ca5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ca60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca62:	4413      	add	r3, r2
 800ca64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca66:	8911      	ldrh	r1, [r2, #8]
 800ca68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca6a:	8992      	ldrh	r2, [r2, #12]
 800ca6c:	0952      	lsrs	r2, r2, #5
 800ca6e:	b292      	uxth	r2, r2
 800ca70:	fbb1 f2f2 	udiv	r2, r1, r2
 800ca74:	b292      	uxth	r2, r2
 800ca76:	4413      	add	r3, r2
 800ca78:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ca7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d201      	bcs.n	800ca86 <find_volume+0x31e>
 800ca82:	230d      	movs	r3, #13
 800ca84:	e0ee      	b.n	800cc64 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ca86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8a:	1ad3      	subs	r3, r2, r3
 800ca8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca8e:	8952      	ldrh	r2, [r2, #10]
 800ca90:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca94:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ca96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d101      	bne.n	800caa0 <find_volume+0x338>
 800ca9c:	230d      	movs	r3, #13
 800ca9e:	e0e1      	b.n	800cc64 <find_volume+0x4fc>
		fmt = FS_FAT32;
 800caa0:	2303      	movs	r3, #3
 800caa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800caa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800caac:	4293      	cmp	r3, r2
 800caae:	d802      	bhi.n	800cab6 <find_volume+0x34e>
 800cab0:	2302      	movs	r3, #2
 800cab2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d802      	bhi.n	800cac6 <find_volume+0x35e>
 800cac0:	2301      	movs	r3, #1
 800cac2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac8:	1c9a      	adds	r2, r3, #2
 800caca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cacc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800cace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cad2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cad4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cad8:	441a      	add	r2, r3
 800cada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cadc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800cade:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae2:	441a      	add	r2, r3
 800cae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800cae8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800caec:	2b03      	cmp	r3, #3
 800caee:	d11e      	bne.n	800cb2e <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800caf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf2:	3338      	adds	r3, #56	; 0x38
 800caf4:	332a      	adds	r3, #42	; 0x2a
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7fe fb62 	bl	800b1c0 <ld_word>
 800cafc:	4603      	mov	r3, r0
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d001      	beq.n	800cb06 <find_volume+0x39e>
 800cb02:	230d      	movs	r3, #13
 800cb04:	e0ae      	b.n	800cc64 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb08:	891b      	ldrh	r3, [r3, #8]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d001      	beq.n	800cb12 <find_volume+0x3aa>
 800cb0e:	230d      	movs	r3, #13
 800cb10:	e0a8      	b.n	800cc64 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb14:	3338      	adds	r3, #56	; 0x38
 800cb16:	332c      	adds	r3, #44	; 0x2c
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7fe fb69 	bl	800b1f0 <ld_dword>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb22:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb26:	69db      	ldr	r3, [r3, #28]
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	647b      	str	r3, [r7, #68]	; 0x44
 800cb2c:	e01f      	b.n	800cb6e <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb30:	891b      	ldrh	r3, [r3, #8]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d101      	bne.n	800cb3a <find_volume+0x3d2>
 800cb36:	230d      	movs	r3, #13
 800cb38:	e094      	b.n	800cc64 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb40:	441a      	add	r2, r3
 800cb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb44:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cb46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb4a:	2b02      	cmp	r3, #2
 800cb4c:	d103      	bne.n	800cb56 <find_volume+0x3ee>
 800cb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb50:	69db      	ldr	r3, [r3, #28]
 800cb52:	005b      	lsls	r3, r3, #1
 800cb54:	e00a      	b.n	800cb6c <find_volume+0x404>
 800cb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb58:	69da      	ldr	r2, [r3, #28]
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	005b      	lsls	r3, r3, #1
 800cb5e:	4413      	add	r3, r2
 800cb60:	085a      	lsrs	r2, r3, #1
 800cb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb64:	69db      	ldr	r3, [r3, #28]
 800cb66:	f003 0301 	and.w	r3, r3, #1
 800cb6a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cb6c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb70:	6a1a      	ldr	r2, [r3, #32]
 800cb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb74:	899b      	ldrh	r3, [r3, #12]
 800cb76:	4619      	mov	r1, r3
 800cb78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb7a:	440b      	add	r3, r1
 800cb7c:	3b01      	subs	r3, #1
 800cb7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb80:	8989      	ldrh	r1, [r1, #12]
 800cb82:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d201      	bcs.n	800cb8e <find_volume+0x426>
 800cb8a:	230d      	movs	r3, #13
 800cb8c:	e06a      	b.n	800cc64 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb90:	f04f 32ff 	mov.w	r2, #4294967295
 800cb94:	619a      	str	r2, [r3, #24]
 800cb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb98:	699a      	ldr	r2, [r3, #24]
 800cb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800cb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba0:	2280      	movs	r2, #128	; 0x80
 800cba2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cba4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cba8:	2b03      	cmp	r3, #3
 800cbaa:	d149      	bne.n	800cc40 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbae:	3338      	adds	r3, #56	; 0x38
 800cbb0:	3330      	adds	r3, #48	; 0x30
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fe fb04 	bl	800b1c0 <ld_word>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d140      	bne.n	800cc40 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cbbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cbc6:	f7fe fddd 	bl	800b784 <move_window>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d137      	bne.n	800cc40 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800cbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd8:	3338      	adds	r3, #56	; 0x38
 800cbda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7fe faee 	bl	800b1c0 <ld_word>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d127      	bne.n	800cc40 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf2:	3338      	adds	r3, #56	; 0x38
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7fe fafb 	bl	800b1f0 <ld_dword>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	4a1b      	ldr	r2, [pc, #108]	; (800cc6c <find_volume+0x504>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d11e      	bne.n	800cc40 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc04:	3338      	adds	r3, #56	; 0x38
 800cc06:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7fe faf0 	bl	800b1f0 <ld_dword>
 800cc10:	4603      	mov	r3, r0
 800cc12:	4a17      	ldr	r2, [pc, #92]	; (800cc70 <find_volume+0x508>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d113      	bne.n	800cc40 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1a:	3338      	adds	r3, #56	; 0x38
 800cc1c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7fe fae5 	bl	800b1f0 <ld_dword>
 800cc26:	4602      	mov	r2, r0
 800cc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2e:	3338      	adds	r3, #56	; 0x38
 800cc30:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7fe fadb 	bl	800b1f0 <ld_dword>
 800cc3a:	4602      	mov	r2, r0
 800cc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc42:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cc46:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cc48:	4b0a      	ldr	r3, [pc, #40]	; (800cc74 <find_volume+0x50c>)
 800cc4a:	881b      	ldrh	r3, [r3, #0]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	b29a      	uxth	r2, r3
 800cc50:	4b08      	ldr	r3, [pc, #32]	; (800cc74 <find_volume+0x50c>)
 800cc52:	801a      	strh	r2, [r3, #0]
 800cc54:	4b07      	ldr	r3, [pc, #28]	; (800cc74 <find_volume+0x50c>)
 800cc56:	881a      	ldrh	r2, [r3, #0]
 800cc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cc5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc5e:	f7fe fd29 	bl	800b6b4 <clear_lock>
#endif
	return FR_OK;
 800cc62:	2300      	movs	r3, #0
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3758      	adds	r7, #88	; 0x58
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	41615252 	.word	0x41615252
 800cc70:	61417272 	.word	0x61417272
 800cc74:	200010c8 	.word	0x200010c8

0800cc78 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cc82:	2309      	movs	r3, #9
 800cc84:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d02e      	beq.n	800ccea <validate+0x72>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d02a      	beq.n	800ccea <validate+0x72>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d025      	beq.n	800ccea <validate+0x72>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	889a      	ldrh	r2, [r3, #4]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	88db      	ldrh	r3, [r3, #6]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d11e      	bne.n	800ccea <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f7fe fb85 	bl	800b3c0 <lock_fs>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d014      	beq.n	800cce6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	785b      	ldrb	r3, [r3, #1]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7fe f9de 	bl	800b084 <disk_status>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	f003 0301 	and.w	r3, r3, #1
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d102      	bne.n	800ccd8 <validate+0x60>
				res = FR_OK;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	73fb      	strb	r3, [r7, #15]
 800ccd6:	e008      	b.n	800ccea <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2100      	movs	r1, #0
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7fe fb84 	bl	800b3ec <unlock_fs>
 800cce4:	e001      	b.n	800ccea <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800cce6:	230f      	movs	r3, #15
 800cce8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ccea:	7bfb      	ldrb	r3, [r7, #15]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d102      	bne.n	800ccf6 <validate+0x7e>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	e000      	b.n	800ccf8 <validate+0x80>
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	683a      	ldr	r2, [r7, #0]
 800ccfa:	6013      	str	r3, [r2, #0]
	return res;
 800ccfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
	...

0800cd08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b088      	sub	sp, #32
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	4613      	mov	r3, r2
 800cd14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cd1a:	f107 0310 	add.w	r3, r7, #16
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7ff fc88 	bl	800c634 <get_ldnumber>
 800cd24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cd26:	69fb      	ldr	r3, [r7, #28]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	da01      	bge.n	800cd30 <f_mount+0x28>
 800cd2c:	230b      	movs	r3, #11
 800cd2e:	e048      	b.n	800cdc2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cd30:	4a26      	ldr	r2, [pc, #152]	; (800cdcc <f_mount+0xc4>)
 800cd32:	69fb      	ldr	r3, [r7, #28]
 800cd34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d00f      	beq.n	800cd60 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cd40:	69b8      	ldr	r0, [r7, #24]
 800cd42:	f7fe fcb7 	bl	800b6b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800cd46:	69bb      	ldr	r3, [r7, #24]
 800cd48:	691b      	ldr	r3, [r3, #16]
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f001 f954 	bl	800dff8 <ff_del_syncobj>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d101      	bne.n	800cd5a <f_mount+0x52>
 800cd56:	2302      	movs	r3, #2
 800cd58:	e033      	b.n	800cdc2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00f      	beq.n	800cd86 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	b2da      	uxtb	r2, r3
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	3310      	adds	r3, #16
 800cd74:	4619      	mov	r1, r3
 800cd76:	4610      	mov	r0, r2
 800cd78:	f001 f923 	bl	800dfc2 <ff_cre_syncobj>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d101      	bne.n	800cd86 <f_mount+0x7e>
 800cd82:	2302      	movs	r3, #2
 800cd84:	e01d      	b.n	800cdc2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cd86:	68fa      	ldr	r2, [r7, #12]
 800cd88:	4910      	ldr	r1, [pc, #64]	; (800cdcc <f_mount+0xc4>)
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d002      	beq.n	800cd9c <f_mount+0x94>
 800cd96:	79fb      	ldrb	r3, [r7, #7]
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d001      	beq.n	800cda0 <f_mount+0x98>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	e010      	b.n	800cdc2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cda0:	f107 010c 	add.w	r1, r7, #12
 800cda4:	f107 0308 	add.w	r3, r7, #8
 800cda8:	2200      	movs	r2, #0
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7ff fcdc 	bl	800c768 <find_volume>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	7dfa      	ldrb	r2, [r7, #23]
 800cdb8:	4611      	mov	r1, r2
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7fe fb16 	bl	800b3ec <unlock_fs>
 800cdc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3720      	adds	r7, #32
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	200010c4 	.word	0x200010c4

0800cdd0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b098      	sub	sp, #96	; 0x60
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	4613      	mov	r3, r2
 800cddc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d101      	bne.n	800cde8 <f_open+0x18>
 800cde4:	2309      	movs	r3, #9
 800cde6:	e1c2      	b.n	800d16e <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cde8:	79fb      	ldrb	r3, [r7, #7]
 800cdea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cdf0:	79fa      	ldrb	r2, [r7, #7]
 800cdf2:	f107 0110 	add.w	r1, r7, #16
 800cdf6:	f107 0308 	add.w	r3, r7, #8
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7ff fcb4 	bl	800c768 <find_volume>
 800ce00:	4603      	mov	r3, r0
 800ce02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ce06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	f040 819f 	bne.w	800d14e <f_open+0x37e>
		dj.obj.fs = fs;
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ce14:	68ba      	ldr	r2, [r7, #8]
 800ce16:	f107 0314 	add.w	r3, r7, #20
 800ce1a:	4611      	mov	r1, r2
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7ff fb93 	bl	800c548 <follow_path>
 800ce22:	4603      	mov	r3, r0
 800ce24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ce28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d11a      	bne.n	800ce66 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ce30:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ce34:	b25b      	sxtb	r3, r3
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	da03      	bge.n	800ce42 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ce3a:	2306      	movs	r3, #6
 800ce3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ce40:	e011      	b.n	800ce66 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ce42:	79fb      	ldrb	r3, [r7, #7]
 800ce44:	f023 0301 	bic.w	r3, r3, #1
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	bf14      	ite	ne
 800ce4c:	2301      	movne	r3, #1
 800ce4e:	2300      	moveq	r3, #0
 800ce50:	b2db      	uxtb	r3, r3
 800ce52:	461a      	mov	r2, r3
 800ce54:	f107 0314 	add.w	r3, r7, #20
 800ce58:	4611      	mov	r1, r2
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7fe fae2 	bl	800b424 <chk_lock>
 800ce60:	4603      	mov	r3, r0
 800ce62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ce66:	79fb      	ldrb	r3, [r7, #7]
 800ce68:	f003 031c 	and.w	r3, r3, #28
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d07f      	beq.n	800cf70 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ce70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d017      	beq.n	800cea8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ce78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce7c:	2b04      	cmp	r3, #4
 800ce7e:	d10e      	bne.n	800ce9e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ce80:	f7fe fb2c 	bl	800b4dc <enq_lock>
 800ce84:	4603      	mov	r3, r0
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d006      	beq.n	800ce98 <f_open+0xc8>
 800ce8a:	f107 0314 	add.w	r3, r7, #20
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7ff fa94 	bl	800c3bc <dir_register>
 800ce94:	4603      	mov	r3, r0
 800ce96:	e000      	b.n	800ce9a <f_open+0xca>
 800ce98:	2312      	movs	r3, #18
 800ce9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ce9e:	79fb      	ldrb	r3, [r7, #7]
 800cea0:	f043 0308 	orr.w	r3, r3, #8
 800cea4:	71fb      	strb	r3, [r7, #7]
 800cea6:	e010      	b.n	800ceca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cea8:	7ebb      	ldrb	r3, [r7, #26]
 800ceaa:	f003 0311 	and.w	r3, r3, #17
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d003      	beq.n	800ceba <f_open+0xea>
					res = FR_DENIED;
 800ceb2:	2307      	movs	r3, #7
 800ceb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ceb8:	e007      	b.n	800ceca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ceba:	79fb      	ldrb	r3, [r7, #7]
 800cebc:	f003 0304 	and.w	r3, r3, #4
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d002      	beq.n	800ceca <f_open+0xfa>
 800cec4:	2308      	movs	r3, #8
 800cec6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ceca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d168      	bne.n	800cfa4 <f_open+0x1d4>
 800ced2:	79fb      	ldrb	r3, [r7, #7]
 800ced4:	f003 0308 	and.w	r3, r3, #8
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d063      	beq.n	800cfa4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800cedc:	f7fc f882 	bl	8008fe4 <get_fattime>
 800cee0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cee4:	330e      	adds	r3, #14
 800cee6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7fe f9bf 	bl	800b26c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ceee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef0:	3316      	adds	r3, #22
 800cef2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cef4:	4618      	mov	r0, r3
 800cef6:	f7fe f9b9 	bl	800b26c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cefa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cefc:	330b      	adds	r3, #11
 800cefe:	2220      	movs	r2, #32
 800cf00:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf06:	4611      	mov	r1, r2
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7ff f9c3 	bl	800c294 <ld_clust>
 800cf0e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cf14:	2200      	movs	r2, #0
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7ff f9db 	bl	800c2d2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cf1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf1e:	331c      	adds	r3, #28
 800cf20:	2100      	movs	r1, #0
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7fe f9a2 	bl	800b26c <st_dword>
					fs->wflag = 1;
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cf2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d037      	beq.n	800cfa4 <f_open+0x1d4>
						dw = fs->winsect;
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf38:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cf3a:	f107 0314 	add.w	r3, r7, #20
 800cf3e:	2200      	movs	r2, #0
 800cf40:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fe fecb 	bl	800bcde <remove_chain>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800cf4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d126      	bne.n	800cfa4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7fe fc12 	bl	800b784 <move_window>
 800cf60:	4603      	mov	r3, r0
 800cf62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf6a:	3a01      	subs	r2, #1
 800cf6c:	615a      	str	r2, [r3, #20]
 800cf6e:	e019      	b.n	800cfa4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cf70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d115      	bne.n	800cfa4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cf78:	7ebb      	ldrb	r3, [r7, #26]
 800cf7a:	f003 0310 	and.w	r3, r3, #16
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d003      	beq.n	800cf8a <f_open+0x1ba>
					res = FR_NO_FILE;
 800cf82:	2304      	movs	r3, #4
 800cf84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cf88:	e00c      	b.n	800cfa4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cf8a:	79fb      	ldrb	r3, [r7, #7]
 800cf8c:	f003 0302 	and.w	r3, r3, #2
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d007      	beq.n	800cfa4 <f_open+0x1d4>
 800cf94:	7ebb      	ldrb	r3, [r7, #26]
 800cf96:	f003 0301 	and.w	r3, r3, #1
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d002      	beq.n	800cfa4 <f_open+0x1d4>
						res = FR_DENIED;
 800cf9e:	2307      	movs	r3, #7
 800cfa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cfa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d128      	bne.n	800cffe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cfac:	79fb      	ldrb	r3, [r7, #7]
 800cfae:	f003 0308 	and.w	r3, r3, #8
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d003      	beq.n	800cfbe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cfb6:	79fb      	ldrb	r3, [r7, #7]
 800cfb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfbc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cfc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cfcc:	79fb      	ldrb	r3, [r7, #7]
 800cfce:	f023 0301 	bic.w	r3, r3, #1
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	bf14      	ite	ne
 800cfd6:	2301      	movne	r3, #1
 800cfd8:	2300      	moveq	r3, #0
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	461a      	mov	r2, r3
 800cfde:	f107 0314 	add.w	r3, r7, #20
 800cfe2:	4611      	mov	r1, r2
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7fe fa9b 	bl	800b520 <inc_lock>
 800cfea:	4602      	mov	r2, r0
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	691b      	ldr	r3, [r3, #16]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d102      	bne.n	800cffe <f_open+0x22e>
 800cff8:	2302      	movs	r3, #2
 800cffa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cffe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d002:	2b00      	cmp	r3, #0
 800d004:	f040 80a3 	bne.w	800d14e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d00c:	4611      	mov	r1, r2
 800d00e:	4618      	mov	r0, r3
 800d010:	f7ff f940 	bl	800c294 <ld_clust>
 800d014:	4602      	mov	r2, r0
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d01c:	331c      	adds	r3, #28
 800d01e:	4618      	mov	r0, r3
 800d020:	f7fe f8e6 	bl	800b1f0 <ld_dword>
 800d024:	4602      	mov	r2, r0
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2200      	movs	r2, #0
 800d02e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d030:	693a      	ldr	r2, [r7, #16]
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	88da      	ldrh	r2, [r3, #6]
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	79fa      	ldrb	r2, [r7, #7]
 800d042:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2200      	movs	r2, #0
 800d048:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2200      	movs	r2, #0
 800d04e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2200      	movs	r2, #0
 800d054:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	3330      	adds	r3, #48	; 0x30
 800d05a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d05e:	2100      	movs	r1, #0
 800d060:	4618      	mov	r0, r3
 800d062:	f7fe f950 	bl	800b306 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d066:	79fb      	ldrb	r3, [r7, #7]
 800d068:	f003 0320 	and.w	r3, r3, #32
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d06e      	beq.n	800d14e <f_open+0x37e>
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	68db      	ldr	r3, [r3, #12]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d06a      	beq.n	800d14e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	68da      	ldr	r2, [r3, #12]
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	895b      	ldrh	r3, [r3, #10]
 800d084:	461a      	mov	r2, r3
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	899b      	ldrh	r3, [r3, #12]
 800d08a:	fb02 f303 	mul.w	r3, r2, r3
 800d08e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	657b      	str	r3, [r7, #84]	; 0x54
 800d09c:	e016      	b.n	800d0cc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7fe fc2b 	bl	800b8fe <get_fat>
 800d0a8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d0aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d802      	bhi.n	800d0b6 <f_open+0x2e6>
 800d0b0:	2302      	movs	r3, #2
 800d0b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d0b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0bc:	d102      	bne.n	800d0c4 <f_open+0x2f4>
 800d0be:	2301      	movs	r3, #1
 800d0c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d0c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d0c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0c8:	1ad3      	subs	r3, r2, r3
 800d0ca:	657b      	str	r3, [r7, #84]	; 0x54
 800d0cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d103      	bne.n	800d0dc <f_open+0x30c>
 800d0d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d0d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d8e0      	bhi.n	800d09e <f_open+0x2ce>
				}
				fp->clust = clst;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d0e0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d0e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d131      	bne.n	800d14e <f_open+0x37e>
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	899b      	ldrh	r3, [r3, #12]
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0f6:	fb01 f202 	mul.w	r2, r1, r2
 800d0fa:	1a9b      	subs	r3, r3, r2
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d026      	beq.n	800d14e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d104:	4618      	mov	r0, r3
 800d106:	f7fe fbdb 	bl	800b8c0 <clust2sect>
 800d10a:	6478      	str	r0, [r7, #68]	; 0x44
 800d10c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d103      	bne.n	800d11a <f_open+0x34a>
						res = FR_INT_ERR;
 800d112:	2302      	movs	r3, #2
 800d114:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d118:	e019      	b.n	800d14e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	899b      	ldrh	r3, [r3, #12]
 800d11e:	461a      	mov	r2, r3
 800d120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d122:	fbb3 f2f2 	udiv	r2, r3, r2
 800d126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d128:	441a      	add	r2, r3
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	7858      	ldrb	r0, [r3, #1]
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	6a1a      	ldr	r2, [r3, #32]
 800d13c:	2301      	movs	r3, #1
 800d13e:	f7fd ffe1 	bl	800b104 <disk_read>
 800d142:	4603      	mov	r3, r0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d002      	beq.n	800d14e <f_open+0x37e>
 800d148:	2301      	movs	r3, #1
 800d14a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d14e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d152:	2b00      	cmp	r3, #0
 800d154:	d002      	beq.n	800d15c <f_open+0x38c>
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2200      	movs	r2, #0
 800d15a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800d162:	4611      	mov	r1, r2
 800d164:	4618      	mov	r0, r3
 800d166:	f7fe f941 	bl	800b3ec <unlock_fs>
 800d16a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3760      	adds	r7, #96	; 0x60
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b08c      	sub	sp, #48	; 0x30
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	60f8      	str	r0, [r7, #12]
 800d17e:	60b9      	str	r1, [r7, #8]
 800d180:	607a      	str	r2, [r7, #4]
 800d182:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	2200      	movs	r2, #0
 800d18c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f107 0210 	add.w	r2, r7, #16
 800d194:	4611      	mov	r1, r2
 800d196:	4618      	mov	r0, r3
 800d198:	f7ff fd6e 	bl	800cc78 <validate>
 800d19c:	4603      	mov	r3, r0
 800d19e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d1a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d107      	bne.n	800d1ba <f_write+0x44>
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	7d5b      	ldrb	r3, [r3, #21]
 800d1ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d1b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d009      	beq.n	800d1ce <f_write+0x58>
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d1c0:	4611      	mov	r1, r2
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fe f912 	bl	800b3ec <unlock_fs>
 800d1c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d1cc:	e192      	b.n	800d4f4 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	7d1b      	ldrb	r3, [r3, #20]
 800d1d2:	f003 0302 	and.w	r3, r3, #2
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d106      	bne.n	800d1e8 <f_write+0x72>
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	2107      	movs	r1, #7
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fe f904 	bl	800b3ec <unlock_fs>
 800d1e4:	2307      	movs	r3, #7
 800d1e6:	e185      	b.n	800d4f4 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	699a      	ldr	r2, [r3, #24]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	441a      	add	r2, r3
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	699b      	ldr	r3, [r3, #24]
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	f080 816a 	bcs.w	800d4ce <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	699b      	ldr	r3, [r3, #24]
 800d1fe:	43db      	mvns	r3, r3
 800d200:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d202:	e164      	b.n	800d4ce <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	699b      	ldr	r3, [r3, #24]
 800d208:	693a      	ldr	r2, [r7, #16]
 800d20a:	8992      	ldrh	r2, [r2, #12]
 800d20c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d210:	fb01 f202 	mul.w	r2, r1, r2
 800d214:	1a9b      	subs	r3, r3, r2
 800d216:	2b00      	cmp	r3, #0
 800d218:	f040 810f 	bne.w	800d43a <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	699b      	ldr	r3, [r3, #24]
 800d220:	693a      	ldr	r2, [r7, #16]
 800d222:	8992      	ldrh	r2, [r2, #12]
 800d224:	fbb3 f3f2 	udiv	r3, r3, r2
 800d228:	693a      	ldr	r2, [r7, #16]
 800d22a:	8952      	ldrh	r2, [r2, #10]
 800d22c:	3a01      	subs	r2, #1
 800d22e:	4013      	ands	r3, r2
 800d230:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d232:	69bb      	ldr	r3, [r7, #24]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d14d      	bne.n	800d2d4 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	699b      	ldr	r3, [r3, #24]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d10c      	bne.n	800d25a <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	689b      	ldr	r3, [r3, #8]
 800d244:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d11a      	bne.n	800d282 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2100      	movs	r1, #0
 800d250:	4618      	mov	r0, r3
 800d252:	f7fe fda9 	bl	800bda8 <create_chain>
 800d256:	62b8      	str	r0, [r7, #40]	; 0x28
 800d258:	e013      	b.n	800d282 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d007      	beq.n	800d272 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	699b      	ldr	r3, [r3, #24]
 800d266:	4619      	mov	r1, r3
 800d268:	68f8      	ldr	r0, [r7, #12]
 800d26a:	f7fe fe35 	bl	800bed8 <clmt_clust>
 800d26e:	62b8      	str	r0, [r7, #40]	; 0x28
 800d270:	e007      	b.n	800d282 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d272:	68fa      	ldr	r2, [r7, #12]
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	69db      	ldr	r3, [r3, #28]
 800d278:	4619      	mov	r1, r3
 800d27a:	4610      	mov	r0, r2
 800d27c:	f7fe fd94 	bl	800bda8 <create_chain>
 800d280:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d284:	2b00      	cmp	r3, #0
 800d286:	f000 8127 	beq.w	800d4d8 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d109      	bne.n	800d2a4 <f_write+0x12e>
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	2202      	movs	r2, #2
 800d294:	755a      	strb	r2, [r3, #21]
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	2102      	movs	r1, #2
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7fe f8a6 	bl	800b3ec <unlock_fs>
 800d2a0:	2302      	movs	r3, #2
 800d2a2:	e127      	b.n	800d4f4 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2aa:	d109      	bne.n	800d2c0 <f_write+0x14a>
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	755a      	strb	r2, [r3, #21]
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	2101      	movs	r1, #1
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7fe f898 	bl	800b3ec <unlock_fs>
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e119      	b.n	800d4f4 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2c4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d102      	bne.n	800d2d4 <f_write+0x15e>
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2d2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	7d1b      	ldrb	r3, [r3, #20]
 800d2d8:	b25b      	sxtb	r3, r3
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	da1d      	bge.n	800d31a <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	7858      	ldrb	r0, [r3, #1]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6a1a      	ldr	r2, [r3, #32]
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	f7fd ff29 	bl	800b144 <disk_write>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d009      	beq.n	800d30c <f_write+0x196>
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	755a      	strb	r2, [r3, #21]
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	2101      	movs	r1, #1
 800d302:	4618      	mov	r0, r3
 800d304:	f7fe f872 	bl	800b3ec <unlock_fs>
 800d308:	2301      	movs	r3, #1
 800d30a:	e0f3      	b.n	800d4f4 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	7d1b      	ldrb	r3, [r3, #20]
 800d310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d314:	b2da      	uxtb	r2, r3
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d31a:	693a      	ldr	r2, [r7, #16]
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	69db      	ldr	r3, [r3, #28]
 800d320:	4619      	mov	r1, r3
 800d322:	4610      	mov	r0, r2
 800d324:	f7fe facc 	bl	800b8c0 <clust2sect>
 800d328:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d109      	bne.n	800d344 <f_write+0x1ce>
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2202      	movs	r2, #2
 800d334:	755a      	strb	r2, [r3, #21]
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	2102      	movs	r1, #2
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7fe f856 	bl	800b3ec <unlock_fs>
 800d340:	2302      	movs	r3, #2
 800d342:	e0d7      	b.n	800d4f4 <f_write+0x37e>
			sect += csect;
 800d344:	697a      	ldr	r2, [r7, #20]
 800d346:	69bb      	ldr	r3, [r7, #24]
 800d348:	4413      	add	r3, r2
 800d34a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	899b      	ldrh	r3, [r3, #12]
 800d350:	461a      	mov	r2, r3
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	fbb3 f3f2 	udiv	r3, r3, r2
 800d358:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d35a:	6a3b      	ldr	r3, [r7, #32]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d048      	beq.n	800d3f2 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d360:	69ba      	ldr	r2, [r7, #24]
 800d362:	6a3b      	ldr	r3, [r7, #32]
 800d364:	4413      	add	r3, r2
 800d366:	693a      	ldr	r2, [r7, #16]
 800d368:	8952      	ldrh	r2, [r2, #10]
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d905      	bls.n	800d37a <f_write+0x204>
					cc = fs->csize - csect;
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	895b      	ldrh	r3, [r3, #10]
 800d372:	461a      	mov	r2, r3
 800d374:	69bb      	ldr	r3, [r7, #24]
 800d376:	1ad3      	subs	r3, r2, r3
 800d378:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	7858      	ldrb	r0, [r3, #1]
 800d37e:	6a3b      	ldr	r3, [r7, #32]
 800d380:	697a      	ldr	r2, [r7, #20]
 800d382:	69f9      	ldr	r1, [r7, #28]
 800d384:	f7fd fede 	bl	800b144 <disk_write>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d009      	beq.n	800d3a2 <f_write+0x22c>
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2201      	movs	r2, #1
 800d392:	755a      	strb	r2, [r3, #21]
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	2101      	movs	r1, #1
 800d398:	4618      	mov	r0, r3
 800d39a:	f7fe f827 	bl	800b3ec <unlock_fs>
 800d39e:	2301      	movs	r3, #1
 800d3a0:	e0a8      	b.n	800d4f4 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	6a1a      	ldr	r2, [r3, #32]
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	1ad3      	subs	r3, r2, r3
 800d3aa:	6a3a      	ldr	r2, [r7, #32]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d918      	bls.n	800d3e2 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	6a1a      	ldr	r2, [r3, #32]
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	1ad3      	subs	r3, r2, r3
 800d3be:	693a      	ldr	r2, [r7, #16]
 800d3c0:	8992      	ldrh	r2, [r2, #12]
 800d3c2:	fb02 f303 	mul.w	r3, r2, r3
 800d3c6:	69fa      	ldr	r2, [r7, #28]
 800d3c8:	18d1      	adds	r1, r2, r3
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	899b      	ldrh	r3, [r3, #12]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	f7fd ff78 	bl	800b2c4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	7d1b      	ldrb	r3, [r3, #20]
 800d3d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3dc:	b2da      	uxtb	r2, r3
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	899b      	ldrh	r3, [r3, #12]
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	6a3b      	ldr	r3, [r7, #32]
 800d3ea:	fb02 f303 	mul.w	r3, r2, r3
 800d3ee:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d3f0:	e050      	b.n	800d494 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	6a1b      	ldr	r3, [r3, #32]
 800d3f6:	697a      	ldr	r2, [r7, #20]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d01b      	beq.n	800d434 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	699a      	ldr	r2, [r3, #24]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d404:	429a      	cmp	r2, r3
 800d406:	d215      	bcs.n	800d434 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	7858      	ldrb	r0, [r3, #1]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d412:	2301      	movs	r3, #1
 800d414:	697a      	ldr	r2, [r7, #20]
 800d416:	f7fd fe75 	bl	800b104 <disk_read>
 800d41a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d009      	beq.n	800d434 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2201      	movs	r2, #1
 800d424:	755a      	strb	r2, [r3, #21]
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	2101      	movs	r1, #1
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fd ffde 	bl	800b3ec <unlock_fs>
 800d430:	2301      	movs	r3, #1
 800d432:	e05f      	b.n	800d4f4 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	697a      	ldr	r2, [r7, #20]
 800d438:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	899b      	ldrh	r3, [r3, #12]
 800d43e:	4618      	mov	r0, r3
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	699b      	ldr	r3, [r3, #24]
 800d444:	693a      	ldr	r2, [r7, #16]
 800d446:	8992      	ldrh	r2, [r2, #12]
 800d448:	fbb3 f1f2 	udiv	r1, r3, r2
 800d44c:	fb01 f202 	mul.w	r2, r1, r2
 800d450:	1a9b      	subs	r3, r3, r2
 800d452:	1ac3      	subs	r3, r0, r3
 800d454:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d901      	bls.n	800d462 <f_write+0x2ec>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	699b      	ldr	r3, [r3, #24]
 800d46c:	693a      	ldr	r2, [r7, #16]
 800d46e:	8992      	ldrh	r2, [r2, #12]
 800d470:	fbb3 f0f2 	udiv	r0, r3, r2
 800d474:	fb00 f202 	mul.w	r2, r0, r2
 800d478:	1a9b      	subs	r3, r3, r2
 800d47a:	440b      	add	r3, r1
 800d47c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d47e:	69f9      	ldr	r1, [r7, #28]
 800d480:	4618      	mov	r0, r3
 800d482:	f7fd ff1f 	bl	800b2c4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	7d1b      	ldrb	r3, [r3, #20]
 800d48a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d48e:	b2da      	uxtb	r2, r3
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d494:	69fa      	ldr	r2, [r7, #28]
 800d496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d498:	4413      	add	r3, r2
 800d49a:	61fb      	str	r3, [r7, #28]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	699a      	ldr	r2, [r3, #24]
 800d4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a2:	441a      	add	r2, r3
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	619a      	str	r2, [r3, #24]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	68da      	ldr	r2, [r3, #12]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	699b      	ldr	r3, [r3, #24]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	bf38      	it	cc
 800d4b4:	461a      	movcc	r2, r3
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	60da      	str	r2, [r3, #12]
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c0:	441a      	add	r2, r3
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	601a      	str	r2, [r3, #0]
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ca:	1ad3      	subs	r3, r2, r3
 800d4cc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f47f ae97 	bne.w	800d204 <f_write+0x8e>
 800d4d6:	e000      	b.n	800d4da <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d4d8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	7d1b      	ldrb	r3, [r3, #20]
 800d4de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	2100      	movs	r1, #0
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7fd ff7d 	bl	800b3ec <unlock_fs>
 800d4f2:	2300      	movs	r3, #0
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3730      	adds	r7, #48	; 0x30
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b086      	sub	sp, #24
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f107 0208 	add.w	r2, r7, #8
 800d50a:	4611      	mov	r1, r2
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7ff fbb3 	bl	800cc78 <validate>
 800d512:	4603      	mov	r3, r0
 800d514:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d516:	7dfb      	ldrb	r3, [r7, #23]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d16d      	bne.n	800d5f8 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	7d1b      	ldrb	r3, [r3, #20]
 800d520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d524:	2b00      	cmp	r3, #0
 800d526:	d067      	beq.n	800d5f8 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	7d1b      	ldrb	r3, [r3, #20]
 800d52c:	b25b      	sxtb	r3, r3
 800d52e:	2b00      	cmp	r3, #0
 800d530:	da1a      	bge.n	800d568 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	7858      	ldrb	r0, [r3, #1]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6a1a      	ldr	r2, [r3, #32]
 800d540:	2301      	movs	r3, #1
 800d542:	f7fd fdff 	bl	800b144 <disk_write>
 800d546:	4603      	mov	r3, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d006      	beq.n	800d55a <f_sync+0x5e>
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	2101      	movs	r1, #1
 800d550:	4618      	mov	r0, r3
 800d552:	f7fd ff4b 	bl	800b3ec <unlock_fs>
 800d556:	2301      	movs	r3, #1
 800d558:	e055      	b.n	800d606 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	7d1b      	ldrb	r3, [r3, #20]
 800d55e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d562:	b2da      	uxtb	r2, r3
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d568:	f7fb fd3c 	bl	8008fe4 <get_fattime>
 800d56c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d56e:	68ba      	ldr	r2, [r7, #8]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d574:	4619      	mov	r1, r3
 800d576:	4610      	mov	r0, r2
 800d578:	f7fe f904 	bl	800b784 <move_window>
 800d57c:	4603      	mov	r3, r0
 800d57e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d580:	7dfb      	ldrb	r3, [r7, #23]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d138      	bne.n	800d5f8 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d58a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	330b      	adds	r3, #11
 800d590:	781a      	ldrb	r2, [r3, #0]
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	330b      	adds	r3, #11
 800d596:	f042 0220 	orr.w	r2, r2, #32
 800d59a:	b2d2      	uxtb	r2, r2
 800d59c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6818      	ldr	r0, [r3, #0]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	689b      	ldr	r3, [r3, #8]
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	68f9      	ldr	r1, [r7, #12]
 800d5aa:	f7fe fe92 	bl	800c2d2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f103 021c 	add.w	r2, r3, #28
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	4610      	mov	r0, r2
 800d5bc:	f7fd fe56 	bl	800b26c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	3316      	adds	r3, #22
 800d5c4:	6939      	ldr	r1, [r7, #16]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7fd fe50 	bl	800b26c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	3312      	adds	r3, #18
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fd fe2f 	bl	800b236 <st_word>
					fs->wflag = 1;
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	2201      	movs	r2, #1
 800d5dc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fe f8fd 	bl	800b7e0 <sync_fs>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	7d1b      	ldrb	r3, [r3, #20]
 800d5ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5f2:	b2da      	uxtb	r2, r3
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	7dfa      	ldrb	r2, [r7, #23]
 800d5fc:	4611      	mov	r1, r2
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7fd fef4 	bl	800b3ec <unlock_fs>
 800d604:	7dfb      	ldrb	r3, [r7, #23]
}
 800d606:	4618      	mov	r0, r3
 800d608:	3718      	adds	r7, #24
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}

0800d60e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d60e:	b580      	push	{r7, lr}
 800d610:	b084      	sub	sp, #16
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f7ff ff70 	bl	800d4fc <f_sync>
 800d61c:	4603      	mov	r3, r0
 800d61e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d620:	7bfb      	ldrb	r3, [r7, #15]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d11d      	bne.n	800d662 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f107 0208 	add.w	r2, r7, #8
 800d62c:	4611      	mov	r1, r2
 800d62e:	4618      	mov	r0, r3
 800d630:	f7ff fb22 	bl	800cc78 <validate>
 800d634:	4603      	mov	r3, r0
 800d636:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d638:	7bfb      	ldrb	r3, [r7, #15]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d111      	bne.n	800d662 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	691b      	ldr	r3, [r3, #16]
 800d642:	4618      	mov	r0, r3
 800d644:	f7fd fffa 	bl	800b63c <dec_lock>
 800d648:	4603      	mov	r3, r0
 800d64a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d64c:	7bfb      	ldrb	r3, [r7, #15]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d102      	bne.n	800d658 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2200      	movs	r2, #0
 800d656:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	2100      	movs	r1, #0
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7fd fec5 	bl	800b3ec <unlock_fs>
#endif
		}
	}
	return res;
 800d662:	7bfb      	ldrb	r3, [r7, #15]
}
 800d664:	4618      	mov	r0, r3
 800d666:	3710      	adds	r7, #16
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800d66c:	b590      	push	{r4, r7, lr}
 800d66e:	b09d      	sub	sp, #116	; 0x74
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	607a      	str	r2, [r7, #4]
 800d676:	603b      	str	r3, [r7, #0]
 800d678:	460b      	mov	r3, r1
 800d67a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800d67c:	2301      	movs	r3, #1
 800d67e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800d680:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d684:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800d686:	f107 030c 	add.w	r3, r7, #12
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7fe ffd2 	bl	800c634 <get_ldnumber>
 800d690:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d694:	2b00      	cmp	r3, #0
 800d696:	da02      	bge.n	800d69e <f_mkfs+0x32>
 800d698:	230b      	movs	r3, #11
 800d69a:	f000 bc31 	b.w	800df00 <f_mkfs+0x894>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800d69e:	4aa5      	ldr	r2, [pc, #660]	; (800d934 <f_mkfs+0x2c8>)
 800d6a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d005      	beq.n	800d6b6 <f_mkfs+0x4a>
 800d6aa:	4aa2      	ldr	r2, [pc, #648]	; (800d934 <f_mkfs+0x2c8>)
 800d6ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800d6b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6b8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800d6bc:	2300      	movs	r3, #0
 800d6be:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800d6c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7fd fcf6 	bl	800b0b8 <disk_initialize>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800d6d2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d6d6:	f003 0301 	and.w	r3, r3, #1
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d002      	beq.n	800d6e4 <f_mkfs+0x78>
 800d6de:	2303      	movs	r3, #3
 800d6e0:	f000 bc0e 	b.w	800df00 <f_mkfs+0x894>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800d6e4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d6e8:	f003 0304 	and.w	r3, r3, #4
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d002      	beq.n	800d6f6 <f_mkfs+0x8a>
 800d6f0:	230a      	movs	r3, #10
 800d6f2:	f000 bc05 	b.w	800df00 <f_mkfs+0x894>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800d6f6:	f107 0214 	add.w	r2, r7, #20
 800d6fa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d6fe:	2103      	movs	r1, #3
 800d700:	4618      	mov	r0, r3
 800d702:	f7fd fd3f 	bl	800b184 <disk_ioctl>
 800d706:	4603      	mov	r3, r0
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d10c      	bne.n	800d726 <f_mkfs+0xba>
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d009      	beq.n	800d726 <f_mkfs+0xba>
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d718:	d805      	bhi.n	800d726 <f_mkfs+0xba>
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	1e5a      	subs	r2, r3, #1
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	4013      	ands	r3, r2
 800d722:	2b00      	cmp	r3, #0
 800d724:	d001      	beq.n	800d72a <f_mkfs+0xbe>
 800d726:	2301      	movs	r3, #1
 800d728:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 800d72a:	f107 021a 	add.w	r2, r7, #26
 800d72e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d732:	2102      	movs	r1, #2
 800d734:	4618      	mov	r0, r3
 800d736:	f7fd fd25 	bl	800b184 <disk_ioctl>
 800d73a:	4603      	mov	r3, r0
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d001      	beq.n	800d744 <f_mkfs+0xd8>
 800d740:	2301      	movs	r3, #1
 800d742:	e3dd      	b.n	800df00 <f_mkfs+0x894>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 800d744:	8b7b      	ldrh	r3, [r7, #26]
 800d746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d74a:	d80a      	bhi.n	800d762 <f_mkfs+0xf6>
 800d74c:	8b7b      	ldrh	r3, [r7, #26]
 800d74e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d752:	d306      	bcc.n	800d762 <f_mkfs+0xf6>
 800d754:	8b7b      	ldrh	r3, [r7, #26]
 800d756:	461a      	mov	r2, r3
 800d758:	8b7b      	ldrh	r3, [r7, #26]
 800d75a:	3b01      	subs	r3, #1
 800d75c:	4013      	ands	r3, r2
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d001      	beq.n	800d766 <f_mkfs+0xfa>
 800d762:	2301      	movs	r3, #1
 800d764:	e3cc      	b.n	800df00 <f_mkfs+0x894>
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d004      	beq.n	800d776 <f_mkfs+0x10a>
 800d76c:	8b7b      	ldrh	r3, [r7, #26]
 800d76e:	461a      	mov	r2, r3
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	4293      	cmp	r3, r2
 800d774:	d309      	bcc.n	800d78a <f_mkfs+0x11e>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d77c:	d805      	bhi.n	800d78a <f_mkfs+0x11e>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	1e5a      	subs	r2, r3, #1
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	4013      	ands	r3, r2
 800d786:	2b00      	cmp	r3, #0
 800d788:	d001      	beq.n	800d78e <f_mkfs+0x122>
 800d78a:	2313      	movs	r3, #19
 800d78c:	e3b8      	b.n	800df00 <f_mkfs+0x894>
	au /= ss;	/* Cluster size in unit of sector */
 800d78e:	8b7b      	ldrh	r3, [r7, #26]
 800d790:	461a      	mov	r2, r3
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	fbb3 f3f2 	udiv	r3, r3, r2
 800d798:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	637b      	str	r3, [r7, #52]	; 0x34
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800d79e:	8b7b      	ldrh	r3, [r7, #26]
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d7a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7aa:	633b      	str	r3, [r7, #48]	; 0x30
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800d7ac:	8b7b      	ldrh	r3, [r7, #26]
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b2:	fb02 f303 	mul.w	r3, r2, r3
 800d7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!szb_buf) return FR_MKFS_ABORTED;
 800d7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d101      	bne.n	800d7c2 <f_mkfs+0x156>
 800d7be:	230e      	movs	r3, #14
 800d7c0:	e39e      	b.n	800df00 <f_mkfs+0x894>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800d7c2:	f107 0210 	add.w	r2, r7, #16
 800d7c6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d7ca:	2101      	movs	r1, #1
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7fd fcd9 	bl	800b184 <disk_ioctl>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d001      	beq.n	800d7dc <f_mkfs+0x170>
 800d7d8:	2301      	movs	r3, #1
 800d7da:	e391      	b.n	800df00 <f_mkfs+0x894>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800d7dc:	7afb      	ldrb	r3, [r7, #11]
 800d7de:	f003 0308 	and.w	r3, r3, #8
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d001      	beq.n	800d7ea <f_mkfs+0x17e>
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	e000      	b.n	800d7ec <f_mkfs+0x180>
 800d7ea:	233f      	movs	r3, #63	; 0x3f
 800d7ec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d901      	bls.n	800d7fa <f_mkfs+0x18e>
 800d7f6:	230e      	movs	r3, #14
 800d7f8:	e382      	b.n	800df00 <f_mkfs+0x894>
		sz_vol -= b_vol;						/* Volume size */
 800d7fa:	693a      	ldr	r2, [r7, #16]
 800d7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fe:	1ad3      	subs	r3, r2, r3
 800d800:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	2b7f      	cmp	r3, #127	; 0x7f
 800d806:	d801      	bhi.n	800d80c <f_mkfs+0x1a0>
 800d808:	230e      	movs	r3, #14
 800d80a:	e379      	b.n	800df00 <f_mkfs+0x894>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2b80      	cmp	r3, #128	; 0x80
 800d810:	d901      	bls.n	800d816 <f_mkfs+0x1aa>
 800d812:	2313      	movs	r3, #19
 800d814:	e374      	b.n	800df00 <f_mkfs+0x894>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800d816:	7afb      	ldrb	r3, [r7, #11]
 800d818:	f003 0302 	and.w	r3, r3, #2
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d00d      	beq.n	800d83c <f_mkfs+0x1d0>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800d820:	7afb      	ldrb	r3, [r7, #11]
 800d822:	f003 0307 	and.w	r3, r3, #7
 800d826:	2b02      	cmp	r3, #2
 800d828:	d004      	beq.n	800d834 <f_mkfs+0x1c8>
 800d82a:	7afb      	ldrb	r3, [r7, #11]
 800d82c:	f003 0301 	and.w	r3, r3, #1
 800d830:	2b00      	cmp	r3, #0
 800d832:	d103      	bne.n	800d83c <f_mkfs+0x1d0>
				fmt = FS_FAT32; break;
 800d834:	2303      	movs	r3, #3
 800d836:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d83a:	e009      	b.n	800d850 <f_mkfs+0x1e4>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800d83c:	7afb      	ldrb	r3, [r7, #11]
 800d83e:	f003 0301 	and.w	r3, r3, #1
 800d842:	2b00      	cmp	r3, #0
 800d844:	d101      	bne.n	800d84a <f_mkfs+0x1de>
 800d846:	2313      	movs	r3, #19
 800d848:	e35a      	b.n	800df00 <f_mkfs+0x894>
		fmt = FS_FAT16;
 800d84a:	2302      	movs	r3, #2
 800d84c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800d854:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d858:	2b03      	cmp	r3, #3
 800d85a:	d13c      	bne.n	800d8d6 <f_mkfs+0x26a>
				if (!pau) {	/* au auto-selection */
 800d85c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d11b      	bne.n	800d89a <f_mkfs+0x22e>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	0c5b      	lsrs	r3, r3, #17
 800d866:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800d868:	2300      	movs	r3, #0
 800d86a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d86c:	2301      	movs	r3, #1
 800d86e:	653b      	str	r3, [r7, #80]	; 0x50
 800d870:	e005      	b.n	800d87e <f_mkfs+0x212>
 800d872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d874:	3301      	adds	r3, #1
 800d876:	64bb      	str	r3, [r7, #72]	; 0x48
 800d878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d87a:	005b      	lsls	r3, r3, #1
 800d87c:	653b      	str	r3, [r7, #80]	; 0x50
 800d87e:	4a2e      	ldr	r2, [pc, #184]	; (800d938 <f_mkfs+0x2cc>)
 800d880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d007      	beq.n	800d89a <f_mkfs+0x22e>
 800d88a:	4a2b      	ldr	r2, [pc, #172]	; (800d938 <f_mkfs+0x2cc>)
 800d88c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d88e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d892:	461a      	mov	r2, r3
 800d894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d896:	4293      	cmp	r3, r2
 800d898:	d2eb      	bcs.n	800d872 <f_mkfs+0x206>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800d89a:	693a      	ldr	r2, [r7, #16]
 800d89c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d89e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8a2:	627b      	str	r3, [r7, #36]	; 0x24
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800d8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a6:	3302      	adds	r3, #2
 800d8a8:	009b      	lsls	r3, r3, #2
 800d8aa:	8b7a      	ldrh	r2, [r7, #26]
 800d8ac:	4413      	add	r3, r2
 800d8ae:	3b01      	subs	r3, #1
 800d8b0:	8b7a      	ldrh	r2, [r7, #26]
 800d8b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8b6:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800d8b8:	2320      	movs	r3, #32
 800d8ba:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800d8bc:	2300      	movs	r3, #0
 800d8be:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800d8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d903      	bls.n	800d8d2 <f_mkfs+0x266>
 800d8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8cc:	4a1b      	ldr	r2, [pc, #108]	; (800d93c <f_mkfs+0x2d0>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d954      	bls.n	800d97c <f_mkfs+0x310>
 800d8d2:	230e      	movs	r3, #14
 800d8d4:	e314      	b.n	800df00 <f_mkfs+0x894>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800d8d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d11b      	bne.n	800d914 <f_mkfs+0x2a8>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	0b1b      	lsrs	r3, r3, #12
 800d8e0:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	653b      	str	r3, [r7, #80]	; 0x50
 800d8ea:	e005      	b.n	800d8f8 <f_mkfs+0x28c>
 800d8ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8f4:	005b      	lsls	r3, r3, #1
 800d8f6:	653b      	str	r3, [r7, #80]	; 0x50
 800d8f8:	4a11      	ldr	r2, [pc, #68]	; (800d940 <f_mkfs+0x2d4>)
 800d8fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d007      	beq.n	800d914 <f_mkfs+0x2a8>
 800d904:	4a0e      	ldr	r2, [pc, #56]	; (800d940 <f_mkfs+0x2d4>)
 800d906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d90c:	461a      	mov	r2, r3
 800d90e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d910:	4293      	cmp	r3, r2
 800d912:	d2eb      	bcs.n	800d8ec <f_mkfs+0x280>
				}
				n_clst = sz_vol / pau;
 800d914:	693a      	ldr	r2, [r7, #16]
 800d916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d918:	fbb2 f3f3 	udiv	r3, r2, r3
 800d91c:	627b      	str	r3, [r7, #36]	; 0x24
				if (n_clst > MAX_FAT12) {
 800d91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d920:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d924:	4293      	cmp	r3, r2
 800d926:	d90d      	bls.n	800d944 <f_mkfs+0x2d8>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800d928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92a:	3302      	adds	r3, #2
 800d92c:	005b      	lsls	r3, r3, #1
 800d92e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d930:	e013      	b.n	800d95a <f_mkfs+0x2ee>
 800d932:	bf00      	nop
 800d934:	200010c4 	.word	0x200010c4
 800d938:	0801333c 	.word	0x0801333c
 800d93c:	0ffffff5 	.word	0x0ffffff5
 800d940:	0801334c 	.word	0x0801334c
				} else {
					fmt = FS_FAT12;
 800d944:	2301      	movs	r3, #1
 800d946:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800d94a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d94c:	4613      	mov	r3, r2
 800d94e:	005b      	lsls	r3, r3, #1
 800d950:	4413      	add	r3, r2
 800d952:	3301      	adds	r3, #1
 800d954:	085b      	lsrs	r3, r3, #1
 800d956:	3303      	adds	r3, #3
 800d958:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800d95a:	8b7b      	ldrh	r3, [r7, #26]
 800d95c:	461a      	mov	r2, r3
 800d95e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d960:	4413      	add	r3, r2
 800d962:	3b01      	subs	r3, #1
 800d964:	8b7a      	ldrh	r2, [r7, #26]
 800d966:	fbb3 f3f2 	udiv	r3, r3, r2
 800d96a:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800d96c:	2301      	movs	r3, #1
 800d96e:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800d970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d972:	015b      	lsls	r3, r3, #5
 800d974:	8b7a      	ldrh	r2, [r7, #26]
 800d976:	fbb3 f3f2 	udiv	r3, r3, r2
 800d97a:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800d97c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d97e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d980:	4413      	add	r3, r2
 800d982:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800d984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d988:	fb03 f202 	mul.w	r2, r3, r2
 800d98c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d98e:	4413      	add	r3, r2
 800d990:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d992:	4413      	add	r3, r2
 800d994:	623b      	str	r3, [r7, #32]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800d996:	697a      	ldr	r2, [r7, #20]
 800d998:	6a3b      	ldr	r3, [r7, #32]
 800d99a:	4413      	add	r3, r2
 800d99c:	1e5a      	subs	r2, r3, #1
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	425b      	negs	r3, r3
 800d9a2:	401a      	ands	r2, r3
 800d9a4:	6a3b      	ldr	r3, [r7, #32]
 800d9a6:	1ad3      	subs	r3, r2, r3
 800d9a8:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800d9aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d9ae:	2b03      	cmp	r3, #3
 800d9b0:	d108      	bne.n	800d9c4 <f_mkfs+0x358>
				sz_rsv += n; b_fat += n;
 800d9b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d9b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9b6:	4413      	add	r3, r2
 800d9b8:	657b      	str	r3, [r7, #84]	; 0x54
 800d9ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d9bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9be:	4413      	add	r3, r2
 800d9c0:	65bb      	str	r3, [r7, #88]	; 0x58
 800d9c2:	e006      	b.n	800d9d2 <f_mkfs+0x366>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800d9c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d9c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d9ce:	4413      	add	r3, r2
 800d9d0:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800d9d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9d4:	011a      	lsls	r2, r3, #4
 800d9d6:	6a3b      	ldr	r3, [r7, #32]
 800d9d8:	441a      	add	r2, r3
 800d9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9dc:	1ad2      	subs	r2, r2, r3
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d901      	bls.n	800d9e8 <f_mkfs+0x37c>
 800d9e4:	230e      	movs	r3, #14
 800d9e6:	e28b      	b.n	800df00 <f_mkfs+0x894>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800d9e8:	693a      	ldr	r2, [r7, #16]
 800d9ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9ec:	1ad2      	subs	r2, r2, r3
 800d9ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d9f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9f2:	fb01 f303 	mul.w	r3, r1, r3
 800d9f6:	1ad2      	subs	r2, r2, r3
 800d9f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9fa:	1ad2      	subs	r2, r2, r3
 800d9fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800da02:	627b      	str	r3, [r7, #36]	; 0x24
			if (fmt == FS_FAT32) {
 800da04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800da08:	2b03      	cmp	r3, #3
 800da0a:	d10f      	bne.n	800da2c <f_mkfs+0x3c0>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800da0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800da12:	4293      	cmp	r3, r2
 800da14:	d80a      	bhi.n	800da2c <f_mkfs+0x3c0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d105      	bne.n	800da28 <f_mkfs+0x3bc>
 800da1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da1e:	085b      	lsrs	r3, r3, #1
 800da20:	607b      	str	r3, [r7, #4]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d144      	bne.n	800dab2 <f_mkfs+0x446>
					return FR_MKFS_ABORTED;
 800da28:	230e      	movs	r3, #14
 800da2a:	e269      	b.n	800df00 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT16) {
 800da2c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800da30:	2b02      	cmp	r3, #2
 800da32:	d133      	bne.n	800da9c <f_mkfs+0x430>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800da34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da36:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800da3a:	4293      	cmp	r3, r2
 800da3c:	d91e      	bls.n	800da7c <f_mkfs+0x410>
					if (!au && (pau * 2) <= 64) {
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d107      	bne.n	800da54 <f_mkfs+0x3e8>
 800da44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da46:	005b      	lsls	r3, r3, #1
 800da48:	2b40      	cmp	r3, #64	; 0x40
 800da4a:	d803      	bhi.n	800da54 <f_mkfs+0x3e8>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800da4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da4e:	005b      	lsls	r3, r3, #1
 800da50:	607b      	str	r3, [r7, #4]
 800da52:	e033      	b.n	800dabc <f_mkfs+0x450>
					}
					if ((opt & FM_FAT32)) {
 800da54:	7afb      	ldrb	r3, [r7, #11]
 800da56:	f003 0302 	and.w	r3, r3, #2
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d003      	beq.n	800da66 <f_mkfs+0x3fa>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800da5e:	2303      	movs	r3, #3
 800da60:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800da64:	e02a      	b.n	800dabc <f_mkfs+0x450>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d105      	bne.n	800da78 <f_mkfs+0x40c>
 800da6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da6e:	005b      	lsls	r3, r3, #1
 800da70:	607b      	str	r3, [r7, #4]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2b80      	cmp	r3, #128	; 0x80
 800da76:	d91e      	bls.n	800dab6 <f_mkfs+0x44a>
					return FR_MKFS_ABORTED;
 800da78:	230e      	movs	r3, #14
 800da7a:	e241      	b.n	800df00 <f_mkfs+0x894>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800da7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800da82:	4293      	cmp	r3, r2
 800da84:	d80a      	bhi.n	800da9c <f_mkfs+0x430>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d105      	bne.n	800da98 <f_mkfs+0x42c>
 800da8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da8e:	005b      	lsls	r3, r3, #1
 800da90:	607b      	str	r3, [r7, #4]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2b80      	cmp	r3, #128	; 0x80
 800da96:	d910      	bls.n	800daba <f_mkfs+0x44e>
					return FR_MKFS_ABORTED;
 800da98:	230e      	movs	r3, #14
 800da9a:	e231      	b.n	800df00 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800da9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	d10c      	bne.n	800dabe <f_mkfs+0x452>
 800daa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800daaa:	4293      	cmp	r3, r2
 800daac:	d907      	bls.n	800dabe <f_mkfs+0x452>
 800daae:	230e      	movs	r3, #14
 800dab0:	e226      	b.n	800df00 <f_mkfs+0x894>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800dab2:	bf00      	nop
 800dab4:	e6cc      	b.n	800d850 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800dab6:	bf00      	nop
 800dab8:	e6ca      	b.n	800d850 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800daba:	bf00      	nop
			pau = au;
 800dabc:	e6c8      	b.n	800d850 <f_mkfs+0x1e4>

			/* Ok, it is the valid cluster configuration */
			break;
 800dabe:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800dac0:	8b7b      	ldrh	r3, [r7, #26]
 800dac2:	461a      	mov	r2, r3
 800dac4:	2100      	movs	r1, #0
 800dac6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dac8:	f7fd fc1d 	bl	800b306 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800dacc:	220b      	movs	r2, #11
 800dace:	49b3      	ldr	r1, [pc, #716]	; (800dd9c <f_mkfs+0x730>)
 800dad0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dad2:	f7fd fbf7 	bl	800b2c4 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800dad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dad8:	330b      	adds	r3, #11
 800dada:	8b7a      	ldrh	r2, [r7, #26]
 800dadc:	4611      	mov	r1, r2
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fd fba9 	bl	800b236 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800dae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dae6:	330d      	adds	r3, #13
 800dae8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800daea:	b2d2      	uxtb	r2, r2
 800daec:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800daee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf0:	330e      	adds	r3, #14
 800daf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800daf4:	b292      	uxth	r2, r2
 800daf6:	4611      	mov	r1, r2
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7fd fb9c 	bl	800b236 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800dafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db00:	3310      	adds	r3, #16
 800db02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db04:	b2d2      	uxtb	r2, r2
 800db06:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800db08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db0a:	f103 0211 	add.w	r2, r3, #17
 800db0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800db12:	2b03      	cmp	r3, #3
 800db14:	d002      	beq.n	800db1c <f_mkfs+0x4b0>
 800db16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db18:	b29b      	uxth	r3, r3
 800db1a:	e000      	b.n	800db1e <f_mkfs+0x4b2>
 800db1c:	2300      	movs	r3, #0
 800db1e:	4619      	mov	r1, r3
 800db20:	4610      	mov	r0, r2
 800db22:	f7fd fb88 	bl	800b236 <st_word>
		if (sz_vol < 0x10000) {
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db2c:	d208      	bcs.n	800db40 <f_mkfs+0x4d4>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800db2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db30:	3313      	adds	r3, #19
 800db32:	693a      	ldr	r2, [r7, #16]
 800db34:	b292      	uxth	r2, r2
 800db36:	4611      	mov	r1, r2
 800db38:	4618      	mov	r0, r3
 800db3a:	f7fd fb7c 	bl	800b236 <st_word>
 800db3e:	e006      	b.n	800db4e <f_mkfs+0x4e2>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800db40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db42:	3320      	adds	r3, #32
 800db44:	693a      	ldr	r2, [r7, #16]
 800db46:	4611      	mov	r1, r2
 800db48:	4618      	mov	r0, r3
 800db4a:	f7fd fb8f 	bl	800b26c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800db4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db50:	3315      	adds	r3, #21
 800db52:	22f8      	movs	r2, #248	; 0xf8
 800db54:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800db56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db58:	3318      	adds	r3, #24
 800db5a:	213f      	movs	r1, #63	; 0x3f
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7fd fb6a 	bl	800b236 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800db62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db64:	331a      	adds	r3, #26
 800db66:	21ff      	movs	r1, #255	; 0xff
 800db68:	4618      	mov	r0, r3
 800db6a:	f7fd fb64 	bl	800b236 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800db6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db70:	331c      	adds	r3, #28
 800db72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db74:	4618      	mov	r0, r3
 800db76:	f7fd fb79 	bl	800b26c <st_dword>
		if (fmt == FS_FAT32) {
 800db7a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800db7e:	2b03      	cmp	r3, #3
 800db80:	d131      	bne.n	800dbe6 <f_mkfs+0x57a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800db82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db84:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800db88:	f7fb fa2c 	bl	8008fe4 <get_fattime>
 800db8c:	4603      	mov	r3, r0
 800db8e:	4619      	mov	r1, r3
 800db90:	4620      	mov	r0, r4
 800db92:	f7fd fb6b 	bl	800b26c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800db96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db98:	3324      	adds	r3, #36	; 0x24
 800db9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7fd fb65 	bl	800b26c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800dba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dba4:	332c      	adds	r3, #44	; 0x2c
 800dba6:	2102      	movs	r1, #2
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7fd fb5f 	bl	800b26c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800dbae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbb0:	3330      	adds	r3, #48	; 0x30
 800dbb2:	2101      	movs	r1, #1
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7fd fb3e 	bl	800b236 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800dbba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbbc:	3332      	adds	r3, #50	; 0x32
 800dbbe:	2106      	movs	r1, #6
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f7fd fb38 	bl	800b236 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800dbc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbc8:	3340      	adds	r3, #64	; 0x40
 800dbca:	2280      	movs	r2, #128	; 0x80
 800dbcc:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800dbce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbd0:	3342      	adds	r3, #66	; 0x42
 800dbd2:	2229      	movs	r2, #41	; 0x29
 800dbd4:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800dbd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbd8:	3347      	adds	r3, #71	; 0x47
 800dbda:	2213      	movs	r2, #19
 800dbdc:	4970      	ldr	r1, [pc, #448]	; (800dda0 <f_mkfs+0x734>)
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7fd fb70 	bl	800b2c4 <mem_cpy>
 800dbe4:	e020      	b.n	800dc28 <f_mkfs+0x5bc>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800dbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbe8:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800dbec:	f7fb f9fa 	bl	8008fe4 <get_fattime>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	f7fd fb39 	bl	800b26c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800dbfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbfc:	3316      	adds	r3, #22
 800dbfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dc00:	b292      	uxth	r2, r2
 800dc02:	4611      	mov	r1, r2
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7fd fb16 	bl	800b236 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800dc0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc0c:	3324      	adds	r3, #36	; 0x24
 800dc0e:	2280      	movs	r2, #128	; 0x80
 800dc10:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800dc12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc14:	3326      	adds	r3, #38	; 0x26
 800dc16:	2229      	movs	r2, #41	; 0x29
 800dc18:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800dc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc1c:	332b      	adds	r3, #43	; 0x2b
 800dc1e:	2213      	movs	r2, #19
 800dc20:	4960      	ldr	r1, [pc, #384]	; (800dda4 <f_mkfs+0x738>)
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fd fb4e 	bl	800b2c4 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800dc28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dc2e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fd faff 	bl	800b236 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800dc38:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dc42:	f7fd fa7f 	bl	800b144 <disk_write>
 800dc46:	4603      	mov	r3, r0
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d001      	beq.n	800dc50 <f_mkfs+0x5e4>
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	e157      	b.n	800df00 <f_mkfs+0x894>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800dc50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dc54:	2b03      	cmp	r3, #3
 800dc56:	d140      	bne.n	800dcda <f_mkfs+0x66e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800dc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5a:	1d9a      	adds	r2, r3, #6
 800dc5c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800dc60:	2301      	movs	r3, #1
 800dc62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dc64:	f7fd fa6e 	bl	800b144 <disk_write>
			mem_set(buf, 0, ss);
 800dc68:	8b7b      	ldrh	r3, [r7, #26]
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	2100      	movs	r1, #0
 800dc6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dc70:	f7fd fb49 	bl	800b306 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800dc74:	494c      	ldr	r1, [pc, #304]	; (800dda8 <f_mkfs+0x73c>)
 800dc76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dc78:	f7fd faf8 	bl	800b26c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800dc7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc7e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dc82:	494a      	ldr	r1, [pc, #296]	; (800ddac <f_mkfs+0x740>)
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7fd faf1 	bl	800b26c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800dc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc8c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc92:	3b01      	subs	r3, #1
 800dc94:	4619      	mov	r1, r3
 800dc96:	4610      	mov	r0, r2
 800dc98:	f7fd fae8 	bl	800b26c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800dc9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc9e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800dca2:	2102      	movs	r1, #2
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7fd fae1 	bl	800b26c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800dcaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dcb0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7fd fabe 	bl	800b236 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800dcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbc:	1dda      	adds	r2, r3, #7
 800dcbe:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dcc6:	f7fd fa3d 	bl	800b144 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800dcca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dccc:	1c5a      	adds	r2, r3, #1
 800dcce:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dcd6:	f7fd fa35 	bl	800b144 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800dcda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcdc:	2100      	movs	r1, #0
 800dcde:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dce0:	f7fd fb11 	bl	800b306 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800dce4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dce6:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800dce8:	2300      	movs	r3, #0
 800dcea:	64bb      	str	r3, [r7, #72]	; 0x48
 800dcec:	e04b      	b.n	800dd86 <f_mkfs+0x71a>
			if (fmt == FS_FAT32) {
 800dcee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dcf2:	2b03      	cmp	r3, #3
 800dcf4:	d113      	bne.n	800dd1e <f_mkfs+0x6b2>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800dcf6:	f06f 0107 	mvn.w	r1, #7
 800dcfa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dcfc:	f7fd fab6 	bl	800b26c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800dd00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd02:	3304      	adds	r3, #4
 800dd04:	f04f 31ff 	mov.w	r1, #4294967295
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7fd faaf 	bl	800b26c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800dd0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd10:	3308      	adds	r3, #8
 800dd12:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7fd faa8 	bl	800b26c <st_dword>
 800dd1c:	e00b      	b.n	800dd36 <f_mkfs+0x6ca>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800dd1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	d101      	bne.n	800dd2a <f_mkfs+0x6be>
 800dd26:	4b22      	ldr	r3, [pc, #136]	; (800ddb0 <f_mkfs+0x744>)
 800dd28:	e001      	b.n	800dd2e <f_mkfs+0x6c2>
 800dd2a:	f06f 0307 	mvn.w	r3, #7
 800dd2e:	4619      	mov	r1, r3
 800dd30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dd32:	f7fd fa9b 	bl	800b26c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800dd36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd38:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800dd3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	bf28      	it	cs
 800dd42:	4613      	movcs	r3, r2
 800dd44:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800dd46:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800dd4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dd4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dd50:	f7fd f9f8 	bl	800b144 <disk_write>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d001      	beq.n	800dd5e <f_mkfs+0x6f2>
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	e0d0      	b.n	800df00 <f_mkfs+0x894>
				mem_set(buf, 0, ss);
 800dd5e:	8b7b      	ldrh	r3, [r7, #26]
 800dd60:	461a      	mov	r2, r3
 800dd62:	2100      	movs	r1, #0
 800dd64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dd66:	f7fd face 	bl	800b306 <mem_set>
				sect += n; nsect -= n;
 800dd6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dd6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd6e:	4413      	add	r3, r2
 800dd70:	667b      	str	r3, [r7, #100]	; 0x64
 800dd72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dd74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd76:	1ad3      	subs	r3, r2, r3
 800dd78:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800dd7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1dc      	bne.n	800dd3a <f_mkfs+0x6ce>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800dd80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd82:	3301      	adds	r3, #1
 800dd84:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d3af      	bcc.n	800dcee <f_mkfs+0x682>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800dd8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dd92:	2b03      	cmp	r3, #3
 800dd94:	d10e      	bne.n	800ddb4 <f_mkfs+0x748>
 800dd96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd98:	e00d      	b.n	800ddb6 <f_mkfs+0x74a>
 800dd9a:	bf00      	nop
 800dd9c:	08012ed0 	.word	0x08012ed0
 800dda0:	08012edc 	.word	0x08012edc
 800dda4:	08012ef0 	.word	0x08012ef0
 800dda8:	41615252 	.word	0x41615252
 800ddac:	61417272 	.word	0x61417272
 800ddb0:	00fffff8 	.word	0x00fffff8
 800ddb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ddb6:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800ddb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ddba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	bf28      	it	cs
 800ddc0:	4613      	movcs	r3, r2
 800ddc2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800ddc4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ddc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ddcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ddce:	f7fd f9b9 	bl	800b144 <disk_write>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d001      	beq.n	800dddc <f_mkfs+0x770>
 800ddd8:	2301      	movs	r3, #1
 800ddda:	e091      	b.n	800df00 <f_mkfs+0x894>
			sect += n; nsect -= n;
 800dddc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ddde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dde0:	4413      	add	r3, r2
 800dde2:	667b      	str	r3, [r7, #100]	; 0x64
 800dde4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dde6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dde8:	1ad3      	subs	r3, r2, r3
 800ddea:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800ddec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d1e2      	bne.n	800ddb8 <f_mkfs+0x74c>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800ddf2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ddf6:	2b03      	cmp	r3, #3
 800ddf8:	d103      	bne.n	800de02 <f_mkfs+0x796>
			sys = 0x0C;		/* FAT32X */
 800ddfa:	230c      	movs	r3, #12
 800ddfc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800de00:	e010      	b.n	800de24 <f_mkfs+0x7b8>
		} else {
			if (sz_vol >= 0x10000) {
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de08:	d303      	bcc.n	800de12 <f_mkfs+0x7a6>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800de0a:	2306      	movs	r3, #6
 800de0c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800de10:	e008      	b.n	800de24 <f_mkfs+0x7b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800de12:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800de16:	2b02      	cmp	r3, #2
 800de18:	d101      	bne.n	800de1e <f_mkfs+0x7b2>
 800de1a:	2304      	movs	r3, #4
 800de1c:	e000      	b.n	800de20 <f_mkfs+0x7b4>
 800de1e:	2301      	movs	r3, #1
 800de20:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800de24:	7afb      	ldrb	r3, [r7, #11]
 800de26:	f003 0308 	and.w	r3, r3, #8
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d15b      	bne.n	800dee6 <f_mkfs+0x87a>
			mem_set(buf, 0, ss);
 800de2e:	8b7b      	ldrh	r3, [r7, #26]
 800de30:	461a      	mov	r2, r3
 800de32:	2100      	movs	r1, #0
 800de34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800de36:	f7fd fa66 	bl	800b306 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800de3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de3c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800de40:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800de44:	4618      	mov	r0, r3
 800de46:	f7fd f9f6 	bl	800b236 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800de4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de4c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800de50:	61fb      	str	r3, [r7, #28]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800de52:	69fb      	ldr	r3, [r7, #28]
 800de54:	2200      	movs	r2, #0
 800de56:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800de58:	69fb      	ldr	r3, [r7, #28]
 800de5a:	3301      	adds	r3, #1
 800de5c:	2201      	movs	r2, #1
 800de5e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800de60:	69fb      	ldr	r3, [r7, #28]
 800de62:	3302      	adds	r3, #2
 800de64:	2201      	movs	r2, #1
 800de66:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	3303      	adds	r3, #3
 800de6c:	2200      	movs	r2, #0
 800de6e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800de70:	69fb      	ldr	r3, [r7, #28]
 800de72:	3304      	adds	r3, #4
 800de74:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800de78:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800de7a:	693a      	ldr	r2, [r7, #16]
 800de7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7e:	441a      	add	r2, r3
 800de80:	4b21      	ldr	r3, [pc, #132]	; (800df08 <f_mkfs+0x89c>)
 800de82:	fba3 1302 	umull	r1, r3, r3, r2
 800de86:	1ad2      	subs	r2, r2, r3
 800de88:	0852      	lsrs	r2, r2, #1
 800de8a:	4413      	add	r3, r2
 800de8c:	0b5b      	lsrs	r3, r3, #13
 800de8e:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800de90:	69fb      	ldr	r3, [r7, #28]
 800de92:	3305      	adds	r3, #5
 800de94:	22fe      	movs	r2, #254	; 0xfe
 800de96:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800de98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de9a:	089b      	lsrs	r3, r3, #2
 800de9c:	b2da      	uxtb	r2, r3
 800de9e:	69fb      	ldr	r3, [r7, #28]
 800dea0:	3306      	adds	r3, #6
 800dea2:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800dea6:	b2d2      	uxtb	r2, r2
 800dea8:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800deaa:	69fb      	ldr	r3, [r7, #28]
 800deac:	3307      	adds	r3, #7
 800deae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800deb0:	b2d2      	uxtb	r2, r2
 800deb2:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800deb4:	69fb      	ldr	r3, [r7, #28]
 800deb6:	3308      	adds	r3, #8
 800deb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800deba:	4618      	mov	r0, r3
 800debc:	f7fd f9d6 	bl	800b26c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	330c      	adds	r3, #12
 800dec4:	693a      	ldr	r2, [r7, #16]
 800dec6:	4611      	mov	r1, r2
 800dec8:	4618      	mov	r0, r3
 800deca:	f7fd f9cf 	bl	800b26c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800dece:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ded2:	2301      	movs	r3, #1
 800ded4:	2200      	movs	r2, #0
 800ded6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ded8:	f7fd f934 	bl	800b144 <disk_write>
 800dedc:	4603      	mov	r3, r0
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d001      	beq.n	800dee6 <f_mkfs+0x87a>
 800dee2:	2301      	movs	r3, #1
 800dee4:	e00c      	b.n	800df00 <f_mkfs+0x894>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800dee6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800deea:	2200      	movs	r2, #0
 800deec:	2100      	movs	r1, #0
 800deee:	4618      	mov	r0, r3
 800def0:	f7fd f948 	bl	800b184 <disk_ioctl>
 800def4:	4603      	mov	r3, r0
 800def6:	2b00      	cmp	r3, #0
 800def8:	d001      	beq.n	800defe <f_mkfs+0x892>
 800defa:	2301      	movs	r3, #1
 800defc:	e000      	b.n	800df00 <f_mkfs+0x894>

	return FR_OK;
 800defe:	2300      	movs	r3, #0
}
 800df00:	4618      	mov	r0, r3
 800df02:	3774      	adds	r7, #116	; 0x74
 800df04:	46bd      	mov	sp, r7
 800df06:	bd90      	pop	{r4, r7, pc}
 800df08:	0515565b 	.word	0x0515565b

0800df0c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b087      	sub	sp, #28
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	4613      	mov	r3, r2
 800df18:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800df1a:	2301      	movs	r3, #1
 800df1c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800df1e:	2300      	movs	r3, #0
 800df20:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800df22:	4b1f      	ldr	r3, [pc, #124]	; (800dfa0 <FATFS_LinkDriverEx+0x94>)
 800df24:	7a5b      	ldrb	r3, [r3, #9]
 800df26:	b2db      	uxtb	r3, r3
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d131      	bne.n	800df90 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800df2c:	4b1c      	ldr	r3, [pc, #112]	; (800dfa0 <FATFS_LinkDriverEx+0x94>)
 800df2e:	7a5b      	ldrb	r3, [r3, #9]
 800df30:	b2db      	uxtb	r3, r3
 800df32:	461a      	mov	r2, r3
 800df34:	4b1a      	ldr	r3, [pc, #104]	; (800dfa0 <FATFS_LinkDriverEx+0x94>)
 800df36:	2100      	movs	r1, #0
 800df38:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800df3a:	4b19      	ldr	r3, [pc, #100]	; (800dfa0 <FATFS_LinkDriverEx+0x94>)
 800df3c:	7a5b      	ldrb	r3, [r3, #9]
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	4a17      	ldr	r2, [pc, #92]	; (800dfa0 <FATFS_LinkDriverEx+0x94>)
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	4413      	add	r3, r2
 800df46:	68fa      	ldr	r2, [r7, #12]
 800df48:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800df4a:	4b15      	ldr	r3, [pc, #84]	; (800dfa0 <FATFS_LinkDriverEx+0x94>)
 800df4c:	7a5b      	ldrb	r3, [r3, #9]
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	461a      	mov	r2, r3
 800df52:	4b13      	ldr	r3, [pc, #76]	; (800dfa0 <FATFS_LinkDriverEx+0x94>)
 800df54:	4413      	add	r3, r2
 800df56:	79fa      	ldrb	r2, [r7, #7]
 800df58:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800df5a:	4b11      	ldr	r3, [pc, #68]	; (800dfa0 <FATFS_LinkDriverEx+0x94>)
 800df5c:	7a5b      	ldrb	r3, [r3, #9]
 800df5e:	b2db      	uxtb	r3, r3
 800df60:	1c5a      	adds	r2, r3, #1
 800df62:	b2d1      	uxtb	r1, r2
 800df64:	4a0e      	ldr	r2, [pc, #56]	; (800dfa0 <FATFS_LinkDriverEx+0x94>)
 800df66:	7251      	strb	r1, [r2, #9]
 800df68:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800df6a:	7dbb      	ldrb	r3, [r7, #22]
 800df6c:	3330      	adds	r3, #48	; 0x30
 800df6e:	b2da      	uxtb	r2, r3
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	3301      	adds	r3, #1
 800df78:	223a      	movs	r2, #58	; 0x3a
 800df7a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	3302      	adds	r3, #2
 800df80:	222f      	movs	r2, #47	; 0x2f
 800df82:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	3303      	adds	r3, #3
 800df88:	2200      	movs	r2, #0
 800df8a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800df8c:	2300      	movs	r3, #0
 800df8e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800df90:	7dfb      	ldrb	r3, [r7, #23]
}
 800df92:	4618      	mov	r0, r3
 800df94:	371c      	adds	r7, #28
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr
 800df9e:	bf00      	nop
 800dfa0:	200010ec 	.word	0x200010ec

0800dfa4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dfae:	2200      	movs	r2, #0
 800dfb0:	6839      	ldr	r1, [r7, #0]
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f7ff ffaa 	bl	800df0c <FATFS_LinkDriverEx>
 800dfb8:	4603      	mov	r3, r0
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3708      	adds	r7, #8
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}

0800dfc2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800dfc2:	b580      	push	{r7, lr}
 800dfc4:	b084      	sub	sp, #16
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	4603      	mov	r3, r0
 800dfca:	6039      	str	r1, [r7, #0]
 800dfcc:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800dfce:	2200      	movs	r2, #0
 800dfd0:	2101      	movs	r1, #1
 800dfd2:	2001      	movs	r0, #1
 800dfd4:	f000 f978 	bl	800e2c8 <osSemaphoreNew>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	bf14      	ite	ne
 800dfe6:	2301      	movne	r3, #1
 800dfe8:	2300      	moveq	r3, #0
 800dfea:	b2db      	uxtb	r3, r3
 800dfec:	60fb      	str	r3, [r7, #12]

    return ret;
 800dfee:	68fb      	ldr	r3, [r7, #12]
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f000 fa81 	bl	800e508 <osSemaphoreDelete>
#endif
    return 1;
 800e006:	2301      	movs	r3, #1
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3708      	adds	r7, #8
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800e018:	2300      	movs	r3, #0
 800e01a:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800e01c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f000 f9db 	bl	800e3dc <osSemaphoreAcquire>
 800e026:	4603      	mov	r3, r0
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d101      	bne.n	800e030 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800e02c:	2301      	movs	r3, #1
 800e02e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e030:	68fb      	ldr	r3, [r7, #12]
}
 800e032:	4618      	mov	r0, r3
 800e034:	3710      	adds	r7, #16
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}

0800e03a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800e03a:	b580      	push	{r7, lr}
 800e03c:	b082      	sub	sp, #8
 800e03e:	af00      	add	r7, sp, #0
 800e040:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 fa1c 	bl	800e480 <osSemaphoreRelease>
#endif
}
 800e048:	bf00      	nop
 800e04a:	3708      	adds	r7, #8
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <__NVIC_SetPriority>:
{
 800e050:	b480      	push	{r7}
 800e052:	b083      	sub	sp, #12
 800e054:	af00      	add	r7, sp, #0
 800e056:	4603      	mov	r3, r0
 800e058:	6039      	str	r1, [r7, #0]
 800e05a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e05c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e060:	2b00      	cmp	r3, #0
 800e062:	db0a      	blt.n	800e07a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	b2da      	uxtb	r2, r3
 800e068:	490c      	ldr	r1, [pc, #48]	; (800e09c <__NVIC_SetPriority+0x4c>)
 800e06a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e06e:	0112      	lsls	r2, r2, #4
 800e070:	b2d2      	uxtb	r2, r2
 800e072:	440b      	add	r3, r1
 800e074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e078:	e00a      	b.n	800e090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	b2da      	uxtb	r2, r3
 800e07e:	4908      	ldr	r1, [pc, #32]	; (800e0a0 <__NVIC_SetPriority+0x50>)
 800e080:	79fb      	ldrb	r3, [r7, #7]
 800e082:	f003 030f 	and.w	r3, r3, #15
 800e086:	3b04      	subs	r3, #4
 800e088:	0112      	lsls	r2, r2, #4
 800e08a:	b2d2      	uxtb	r2, r2
 800e08c:	440b      	add	r3, r1
 800e08e:	761a      	strb	r2, [r3, #24]
}
 800e090:	bf00      	nop
 800e092:	370c      	adds	r7, #12
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr
 800e09c:	e000e100 	.word	0xe000e100
 800e0a0:	e000ed00 	.word	0xe000ed00

0800e0a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e0a8:	4b05      	ldr	r3, [pc, #20]	; (800e0c0 <SysTick_Handler+0x1c>)
 800e0aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e0ac:	f002 fade 	bl	801066c <xTaskGetSchedulerState>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2b01      	cmp	r3, #1
 800e0b4:	d001      	beq.n	800e0ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e0b6:	f003 f9c7 	bl	8011448 <xPortSysTickHandler>
  }
}
 800e0ba:	bf00      	nop
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	e000e010 	.word	0xe000e010

0800e0c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	f06f 0004 	mvn.w	r0, #4
 800e0ce:	f7ff ffbf 	bl	800e050 <__NVIC_SetPriority>
#endif
}
 800e0d2:	bf00      	nop
 800e0d4:	bd80      	pop	{r7, pc}
	...

0800e0d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e0d8:	b480      	push	{r7}
 800e0da:	b083      	sub	sp, #12
 800e0dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0de:	f3ef 8305 	mrs	r3, IPSR
 800e0e2:	603b      	str	r3, [r7, #0]
  return(result);
 800e0e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d003      	beq.n	800e0f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e0ea:	f06f 0305 	mvn.w	r3, #5
 800e0ee:	607b      	str	r3, [r7, #4]
 800e0f0:	e00c      	b.n	800e10c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e0f2:	4b0a      	ldr	r3, [pc, #40]	; (800e11c <osKernelInitialize+0x44>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d105      	bne.n	800e106 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e0fa:	4b08      	ldr	r3, [pc, #32]	; (800e11c <osKernelInitialize+0x44>)
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e100:	2300      	movs	r3, #0
 800e102:	607b      	str	r3, [r7, #4]
 800e104:	e002      	b.n	800e10c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e106:	f04f 33ff 	mov.w	r3, #4294967295
 800e10a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e10c:	687b      	ldr	r3, [r7, #4]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	370c      	adds	r7, #12
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr
 800e11a:	bf00      	nop
 800e11c:	200010f8 	.word	0x200010f8

0800e120 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e126:	f3ef 8305 	mrs	r3, IPSR
 800e12a:	603b      	str	r3, [r7, #0]
  return(result);
 800e12c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d003      	beq.n	800e13a <osKernelStart+0x1a>
    stat = osErrorISR;
 800e132:	f06f 0305 	mvn.w	r3, #5
 800e136:	607b      	str	r3, [r7, #4]
 800e138:	e010      	b.n	800e15c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e13a:	4b0b      	ldr	r3, [pc, #44]	; (800e168 <osKernelStart+0x48>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	2b01      	cmp	r3, #1
 800e140:	d109      	bne.n	800e156 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e142:	f7ff ffbf 	bl	800e0c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e146:	4b08      	ldr	r3, [pc, #32]	; (800e168 <osKernelStart+0x48>)
 800e148:	2202      	movs	r2, #2
 800e14a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e14c:	f001 fe46 	bl	800fddc <vTaskStartScheduler>
      stat = osOK;
 800e150:	2300      	movs	r3, #0
 800e152:	607b      	str	r3, [r7, #4]
 800e154:	e002      	b.n	800e15c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e156:	f04f 33ff 	mov.w	r3, #4294967295
 800e15a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e15c:	687b      	ldr	r3, [r7, #4]
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3708      	adds	r7, #8
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	200010f8 	.word	0x200010f8

0800e16c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b08e      	sub	sp, #56	; 0x38
 800e170:	af04      	add	r7, sp, #16
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e178:	2300      	movs	r3, #0
 800e17a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e17c:	f3ef 8305 	mrs	r3, IPSR
 800e180:	617b      	str	r3, [r7, #20]
  return(result);
 800e182:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e184:	2b00      	cmp	r3, #0
 800e186:	d17f      	bne.n	800e288 <osThreadNew+0x11c>
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d07c      	beq.n	800e288 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800e18e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e192:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e194:	2318      	movs	r3, #24
 800e196:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e198:	2300      	movs	r3, #0
 800e19a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e19c:	f04f 33ff 	mov.w	r3, #4294967295
 800e1a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d045      	beq.n	800e234 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d002      	beq.n	800e1b6 <osThreadNew+0x4a>
        name = attr->name;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	699b      	ldr	r3, [r3, #24]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d002      	beq.n	800e1c4 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	699b      	ldr	r3, [r3, #24]
 800e1c2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d008      	beq.n	800e1dc <osThreadNew+0x70>
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	2b38      	cmp	r3, #56	; 0x38
 800e1ce:	d805      	bhi.n	800e1dc <osThreadNew+0x70>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	f003 0301 	and.w	r3, r3, #1
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d001      	beq.n	800e1e0 <osThreadNew+0x74>
        return (NULL);
 800e1dc:	2300      	movs	r3, #0
 800e1de:	e054      	b.n	800e28a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	695b      	ldr	r3, [r3, #20]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d003      	beq.n	800e1f0 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	695b      	ldr	r3, [r3, #20]
 800e1ec:	089b      	lsrs	r3, r3, #2
 800e1ee:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	689b      	ldr	r3, [r3, #8]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d00e      	beq.n	800e216 <osThreadNew+0xaa>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	2b6b      	cmp	r3, #107	; 0x6b
 800e1fe:	d90a      	bls.n	800e216 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e204:	2b00      	cmp	r3, #0
 800e206:	d006      	beq.n	800e216 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	695b      	ldr	r3, [r3, #20]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d002      	beq.n	800e216 <osThreadNew+0xaa>
        mem = 1;
 800e210:	2301      	movs	r3, #1
 800e212:	61bb      	str	r3, [r7, #24]
 800e214:	e010      	b.n	800e238 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	689b      	ldr	r3, [r3, #8]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d10c      	bne.n	800e238 <osThreadNew+0xcc>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	68db      	ldr	r3, [r3, #12]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d108      	bne.n	800e238 <osThreadNew+0xcc>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	691b      	ldr	r3, [r3, #16]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d104      	bne.n	800e238 <osThreadNew+0xcc>
          mem = 0;
 800e22e:	2300      	movs	r3, #0
 800e230:	61bb      	str	r3, [r7, #24]
 800e232:	e001      	b.n	800e238 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800e234:	2300      	movs	r3, #0
 800e236:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e238:	69bb      	ldr	r3, [r7, #24]
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d110      	bne.n	800e260 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e242:	687a      	ldr	r2, [r7, #4]
 800e244:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e246:	9202      	str	r2, [sp, #8]
 800e248:	9301      	str	r3, [sp, #4]
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	9300      	str	r3, [sp, #0]
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	6a3a      	ldr	r2, [r7, #32]
 800e252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e254:	68f8      	ldr	r0, [r7, #12]
 800e256:	f001 fae5 	bl	800f824 <xTaskCreateStatic>
 800e25a:	4603      	mov	r3, r0
 800e25c:	613b      	str	r3, [r7, #16]
 800e25e:	e013      	b.n	800e288 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800e260:	69bb      	ldr	r3, [r7, #24]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d110      	bne.n	800e288 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e266:	6a3b      	ldr	r3, [r7, #32]
 800e268:	b29a      	uxth	r2, r3
 800e26a:	f107 0310 	add.w	r3, r7, #16
 800e26e:	9301      	str	r3, [sp, #4]
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	9300      	str	r3, [sp, #0]
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f001 fb30 	bl	800f8de <xTaskCreate>
 800e27e:	4603      	mov	r3, r0
 800e280:	2b01      	cmp	r3, #1
 800e282:	d001      	beq.n	800e288 <osThreadNew+0x11c>
            hTask = NULL;
 800e284:	2300      	movs	r3, #0
 800e286:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e288:	693b      	ldr	r3, [r7, #16]
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3728      	adds	r7, #40	; 0x28
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}

0800e292 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e292:	b580      	push	{r7, lr}
 800e294:	b084      	sub	sp, #16
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e29a:	f3ef 8305 	mrs	r3, IPSR
 800e29e:	60bb      	str	r3, [r7, #8]
  return(result);
 800e2a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d003      	beq.n	800e2ae <osDelay+0x1c>
    stat = osErrorISR;
 800e2a6:	f06f 0305 	mvn.w	r3, #5
 800e2aa:	60fb      	str	r3, [r7, #12]
 800e2ac:	e007      	b.n	800e2be <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d002      	beq.n	800e2be <osDelay+0x2c>
      vTaskDelay(ticks);
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f001 fc55 	bl	800fb68 <vTaskDelay>
    }
  }

  return (stat);
 800e2be:	68fb      	ldr	r3, [r7, #12]
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3710      	adds	r7, #16
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b08a      	sub	sp, #40	; 0x28
 800e2cc:	af02      	add	r7, sp, #8
 800e2ce:	60f8      	str	r0, [r7, #12]
 800e2d0:	60b9      	str	r1, [r7, #8]
 800e2d2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2d8:	f3ef 8305 	mrs	r3, IPSR
 800e2dc:	613b      	str	r3, [r7, #16]
  return(result);
 800e2de:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d175      	bne.n	800e3d0 <osSemaphoreNew+0x108>
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d072      	beq.n	800e3d0 <osSemaphoreNew+0x108>
 800e2ea:	68ba      	ldr	r2, [r7, #8]
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d86e      	bhi.n	800e3d0 <osSemaphoreNew+0x108>
    mem = -1;
 800e2f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e2f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d015      	beq.n	800e32a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	689b      	ldr	r3, [r3, #8]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d006      	beq.n	800e314 <osSemaphoreNew+0x4c>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	68db      	ldr	r3, [r3, #12]
 800e30a:	2b4f      	cmp	r3, #79	; 0x4f
 800e30c:	d902      	bls.n	800e314 <osSemaphoreNew+0x4c>
        mem = 1;
 800e30e:	2301      	movs	r3, #1
 800e310:	61bb      	str	r3, [r7, #24]
 800e312:	e00c      	b.n	800e32e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	689b      	ldr	r3, [r3, #8]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d108      	bne.n	800e32e <osSemaphoreNew+0x66>
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d104      	bne.n	800e32e <osSemaphoreNew+0x66>
          mem = 0;
 800e324:	2300      	movs	r3, #0
 800e326:	61bb      	str	r3, [r7, #24]
 800e328:	e001      	b.n	800e32e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e32a:	2300      	movs	r3, #0
 800e32c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e32e:	69bb      	ldr	r3, [r7, #24]
 800e330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e334:	d04c      	beq.n	800e3d0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2b01      	cmp	r3, #1
 800e33a:	d128      	bne.n	800e38e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e33c:	69bb      	ldr	r3, [r7, #24]
 800e33e:	2b01      	cmp	r3, #1
 800e340:	d10a      	bne.n	800e358 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	689b      	ldr	r3, [r3, #8]
 800e346:	2203      	movs	r2, #3
 800e348:	9200      	str	r2, [sp, #0]
 800e34a:	2200      	movs	r2, #0
 800e34c:	2100      	movs	r1, #0
 800e34e:	2001      	movs	r0, #1
 800e350:	f000 fac2 	bl	800e8d8 <xQueueGenericCreateStatic>
 800e354:	61f8      	str	r0, [r7, #28]
 800e356:	e005      	b.n	800e364 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e358:	2203      	movs	r2, #3
 800e35a:	2100      	movs	r1, #0
 800e35c:	2001      	movs	r0, #1
 800e35e:	f000 fb33 	bl	800e9c8 <xQueueGenericCreate>
 800e362:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d022      	beq.n	800e3b0 <osSemaphoreNew+0xe8>
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d01f      	beq.n	800e3b0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e370:	2300      	movs	r3, #0
 800e372:	2200      	movs	r2, #0
 800e374:	2100      	movs	r1, #0
 800e376:	69f8      	ldr	r0, [r7, #28]
 800e378:	f000 fbee 	bl	800eb58 <xQueueGenericSend>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b01      	cmp	r3, #1
 800e380:	d016      	beq.n	800e3b0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e382:	69f8      	ldr	r0, [r7, #28]
 800e384:	f001 f87a 	bl	800f47c <vQueueDelete>
            hSemaphore = NULL;
 800e388:	2300      	movs	r3, #0
 800e38a:	61fb      	str	r3, [r7, #28]
 800e38c:	e010      	b.n	800e3b0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e38e:	69bb      	ldr	r3, [r7, #24]
 800e390:	2b01      	cmp	r3, #1
 800e392:	d108      	bne.n	800e3a6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	689b      	ldr	r3, [r3, #8]
 800e398:	461a      	mov	r2, r3
 800e39a:	68b9      	ldr	r1, [r7, #8]
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f000 fb70 	bl	800ea82 <xQueueCreateCountingSemaphoreStatic>
 800e3a2:	61f8      	str	r0, [r7, #28]
 800e3a4:	e004      	b.n	800e3b0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e3a6:	68b9      	ldr	r1, [r7, #8]
 800e3a8:	68f8      	ldr	r0, [r7, #12]
 800e3aa:	f000 fba1 	bl	800eaf0 <xQueueCreateCountingSemaphore>
 800e3ae:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00c      	beq.n	800e3d0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d003      	beq.n	800e3c4 <osSemaphoreNew+0xfc>
          name = attr->name;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	617b      	str	r3, [r7, #20]
 800e3c2:	e001      	b.n	800e3c8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e3c8:	6979      	ldr	r1, [r7, #20]
 800e3ca:	69f8      	ldr	r0, [r7, #28]
 800e3cc:	f001 f9a2 	bl	800f714 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e3d0:	69fb      	ldr	r3, [r7, #28]
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3720      	adds	r7, #32
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
	...

0800e3dc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b086      	sub	sp, #24
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e3ee:	693b      	ldr	r3, [r7, #16]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d103      	bne.n	800e3fc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e3f4:	f06f 0303 	mvn.w	r3, #3
 800e3f8:	617b      	str	r3, [r7, #20]
 800e3fa:	e039      	b.n	800e470 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3fc:	f3ef 8305 	mrs	r3, IPSR
 800e400:	60fb      	str	r3, [r7, #12]
  return(result);
 800e402:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e404:	2b00      	cmp	r3, #0
 800e406:	d022      	beq.n	800e44e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d003      	beq.n	800e416 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800e40e:	f06f 0303 	mvn.w	r3, #3
 800e412:	617b      	str	r3, [r7, #20]
 800e414:	e02c      	b.n	800e470 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800e416:	2300      	movs	r3, #0
 800e418:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e41a:	f107 0308 	add.w	r3, r7, #8
 800e41e:	461a      	mov	r2, r3
 800e420:	2100      	movs	r1, #0
 800e422:	6938      	ldr	r0, [r7, #16]
 800e424:	f000 ffaa 	bl	800f37c <xQueueReceiveFromISR>
 800e428:	4603      	mov	r3, r0
 800e42a:	2b01      	cmp	r3, #1
 800e42c:	d003      	beq.n	800e436 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800e42e:	f06f 0302 	mvn.w	r3, #2
 800e432:	617b      	str	r3, [r7, #20]
 800e434:	e01c      	b.n	800e470 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d019      	beq.n	800e470 <osSemaphoreAcquire+0x94>
 800e43c:	4b0f      	ldr	r3, [pc, #60]	; (800e47c <osSemaphoreAcquire+0xa0>)
 800e43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e442:	601a      	str	r2, [r3, #0]
 800e444:	f3bf 8f4f 	dsb	sy
 800e448:	f3bf 8f6f 	isb	sy
 800e44c:	e010      	b.n	800e470 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e44e:	6839      	ldr	r1, [r7, #0]
 800e450:	6938      	ldr	r0, [r7, #16]
 800e452:	f000 fe87 	bl	800f164 <xQueueSemaphoreTake>
 800e456:	4603      	mov	r3, r0
 800e458:	2b01      	cmp	r3, #1
 800e45a:	d009      	beq.n	800e470 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d003      	beq.n	800e46a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800e462:	f06f 0301 	mvn.w	r3, #1
 800e466:	617b      	str	r3, [r7, #20]
 800e468:	e002      	b.n	800e470 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800e46a:	f06f 0302 	mvn.w	r3, #2
 800e46e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e470:	697b      	ldr	r3, [r7, #20]
}
 800e472:	4618      	mov	r0, r3
 800e474:	3718      	adds	r7, #24
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop
 800e47c:	e000ed04 	.word	0xe000ed04

0800e480 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e480:	b580      	push	{r7, lr}
 800e482:	b086      	sub	sp, #24
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e48c:	2300      	movs	r3, #0
 800e48e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d103      	bne.n	800e49e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e496:	f06f 0303 	mvn.w	r3, #3
 800e49a:	617b      	str	r3, [r7, #20]
 800e49c:	e02c      	b.n	800e4f8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e49e:	f3ef 8305 	mrs	r3, IPSR
 800e4a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800e4a4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d01a      	beq.n	800e4e0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e4ae:	f107 0308 	add.w	r3, r7, #8
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	6938      	ldr	r0, [r7, #16]
 800e4b6:	f000 fce8 	bl	800ee8a <xQueueGiveFromISR>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d003      	beq.n	800e4c8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800e4c0:	f06f 0302 	mvn.w	r3, #2
 800e4c4:	617b      	str	r3, [r7, #20]
 800e4c6:	e017      	b.n	800e4f8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d014      	beq.n	800e4f8 <osSemaphoreRelease+0x78>
 800e4ce:	4b0d      	ldr	r3, [pc, #52]	; (800e504 <osSemaphoreRelease+0x84>)
 800e4d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4d4:	601a      	str	r2, [r3, #0]
 800e4d6:	f3bf 8f4f 	dsb	sy
 800e4da:	f3bf 8f6f 	isb	sy
 800e4de:	e00b      	b.n	800e4f8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	2100      	movs	r1, #0
 800e4e6:	6938      	ldr	r0, [r7, #16]
 800e4e8:	f000 fb36 	bl	800eb58 <xQueueGenericSend>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d002      	beq.n	800e4f8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800e4f2:	f06f 0302 	mvn.w	r3, #2
 800e4f6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e4f8:	697b      	ldr	r3, [r7, #20]
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3718      	adds	r7, #24
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop
 800e504:	e000ed04 	.word	0xe000ed04

0800e508 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800e508:	b580      	push	{r7, lr}
 800e50a:	b086      	sub	sp, #24
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e514:	f3ef 8305 	mrs	r3, IPSR
 800e518:	60fb      	str	r3, [r7, #12]
  return(result);
 800e51a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d003      	beq.n	800e528 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800e520:	f06f 0305 	mvn.w	r3, #5
 800e524:	617b      	str	r3, [r7, #20]
 800e526:	e00e      	b.n	800e546 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d103      	bne.n	800e536 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800e52e:	f06f 0303 	mvn.w	r3, #3
 800e532:	617b      	str	r3, [r7, #20]
 800e534:	e007      	b.n	800e546 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800e536:	6938      	ldr	r0, [r7, #16]
 800e538:	f001 f916 	bl	800f768 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800e53c:	2300      	movs	r3, #0
 800e53e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800e540:	6938      	ldr	r0, [r7, #16]
 800e542:	f000 ff9b 	bl	800f47c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800e546:	697b      	ldr	r3, [r7, #20]
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3718      	adds	r7, #24
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e550:	b580      	push	{r7, lr}
 800e552:	b08a      	sub	sp, #40	; 0x28
 800e554:	af02      	add	r7, sp, #8
 800e556:	60f8      	str	r0, [r7, #12]
 800e558:	60b9      	str	r1, [r7, #8]
 800e55a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e55c:	2300      	movs	r3, #0
 800e55e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e560:	f3ef 8305 	mrs	r3, IPSR
 800e564:	613b      	str	r3, [r7, #16]
  return(result);
 800e566:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d15f      	bne.n	800e62c <osMessageQueueNew+0xdc>
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d05c      	beq.n	800e62c <osMessageQueueNew+0xdc>
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d059      	beq.n	800e62c <osMessageQueueNew+0xdc>
    mem = -1;
 800e578:	f04f 33ff 	mov.w	r3, #4294967295
 800e57c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d029      	beq.n	800e5d8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	689b      	ldr	r3, [r3, #8]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d012      	beq.n	800e5b2 <osMessageQueueNew+0x62>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	2b4f      	cmp	r3, #79	; 0x4f
 800e592:	d90e      	bls.n	800e5b2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d00a      	beq.n	800e5b2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	695a      	ldr	r2, [r3, #20]
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	68b9      	ldr	r1, [r7, #8]
 800e5a4:	fb01 f303 	mul.w	r3, r1, r3
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d302      	bcc.n	800e5b2 <osMessageQueueNew+0x62>
        mem = 1;
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	61bb      	str	r3, [r7, #24]
 800e5b0:	e014      	b.n	800e5dc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	689b      	ldr	r3, [r3, #8]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d110      	bne.n	800e5dc <osMessageQueueNew+0x8c>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	68db      	ldr	r3, [r3, #12]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d10c      	bne.n	800e5dc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d108      	bne.n	800e5dc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	695b      	ldr	r3, [r3, #20]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d104      	bne.n	800e5dc <osMessageQueueNew+0x8c>
          mem = 0;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	61bb      	str	r3, [r7, #24]
 800e5d6:	e001      	b.n	800e5dc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e5dc:	69bb      	ldr	r3, [r7, #24]
 800e5de:	2b01      	cmp	r3, #1
 800e5e0:	d10b      	bne.n	800e5fa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	691a      	ldr	r2, [r3, #16]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	689b      	ldr	r3, [r3, #8]
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	9100      	str	r1, [sp, #0]
 800e5ee:	68b9      	ldr	r1, [r7, #8]
 800e5f0:	68f8      	ldr	r0, [r7, #12]
 800e5f2:	f000 f971 	bl	800e8d8 <xQueueGenericCreateStatic>
 800e5f6:	61f8      	str	r0, [r7, #28]
 800e5f8:	e008      	b.n	800e60c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800e5fa:	69bb      	ldr	r3, [r7, #24]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d105      	bne.n	800e60c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800e600:	2200      	movs	r2, #0
 800e602:	68b9      	ldr	r1, [r7, #8]
 800e604:	68f8      	ldr	r0, [r7, #12]
 800e606:	f000 f9df 	bl	800e9c8 <xQueueGenericCreate>
 800e60a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e60c:	69fb      	ldr	r3, [r7, #28]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d00c      	beq.n	800e62c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d003      	beq.n	800e620 <osMessageQueueNew+0xd0>
        name = attr->name;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	617b      	str	r3, [r7, #20]
 800e61e:	e001      	b.n	800e624 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800e620:	2300      	movs	r3, #0
 800e622:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800e624:	6979      	ldr	r1, [r7, #20]
 800e626:	69f8      	ldr	r0, [r7, #28]
 800e628:	f001 f874 	bl	800f714 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e62c:	69fb      	ldr	r3, [r7, #28]
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3720      	adds	r7, #32
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
	...

0800e638 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e638:	b480      	push	{r7}
 800e63a:	b085      	sub	sp, #20
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	4a07      	ldr	r2, [pc, #28]	; (800e664 <vApplicationGetIdleTaskMemory+0x2c>)
 800e648:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	4a06      	ldr	r2, [pc, #24]	; (800e668 <vApplicationGetIdleTaskMemory+0x30>)
 800e64e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e656:	601a      	str	r2, [r3, #0]
}
 800e658:	bf00      	nop
 800e65a:	3714      	adds	r7, #20
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr
 800e664:	200010fc 	.word	0x200010fc
 800e668:	20001168 	.word	0x20001168

0800e66c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e66c:	b480      	push	{r7}
 800e66e:	b085      	sub	sp, #20
 800e670:	af00      	add	r7, sp, #0
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	60b9      	str	r1, [r7, #8]
 800e676:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	4a07      	ldr	r2, [pc, #28]	; (800e698 <vApplicationGetTimerTaskMemory+0x2c>)
 800e67c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	4a06      	ldr	r2, [pc, #24]	; (800e69c <vApplicationGetTimerTaskMemory+0x30>)
 800e682:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e68a:	601a      	str	r2, [r3, #0]
}
 800e68c:	bf00      	nop
 800e68e:	3714      	adds	r7, #20
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr
 800e698:	20001568 	.word	0x20001568
 800e69c:	200015d4 	.word	0x200015d4

0800e6a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e6a0:	b480      	push	{r7}
 800e6a2:	b083      	sub	sp, #12
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f103 0208 	add.w	r2, r3, #8
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e6b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f103 0208 	add.w	r2, r3, #8
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f103 0208 	add.w	r2, r3, #8
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e6d4:	bf00      	nop
 800e6d6:	370c      	adds	r7, #12
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr

0800e6e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b083      	sub	sp, #12
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e6ee:	bf00      	nop
 800e6f0:	370c      	adds	r7, #12
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f8:	4770      	bx	lr

0800e6fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e6fa:	b480      	push	{r7}
 800e6fc:	b085      	sub	sp, #20
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	6078      	str	r0, [r7, #4]
 800e702:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	685b      	ldr	r3, [r3, #4]
 800e708:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	68fa      	ldr	r2, [r7, #12]
 800e70e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	689a      	ldr	r2, [r3, #8]
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	689b      	ldr	r3, [r3, #8]
 800e71c:	683a      	ldr	r2, [r7, #0]
 800e71e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	683a      	ldr	r2, [r7, #0]
 800e724:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	687a      	ldr	r2, [r7, #4]
 800e72a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	1c5a      	adds	r2, r3, #1
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	601a      	str	r2, [r3, #0]
}
 800e736:	bf00      	nop
 800e738:	3714      	adds	r7, #20
 800e73a:	46bd      	mov	sp, r7
 800e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e740:	4770      	bx	lr

0800e742 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e742:	b480      	push	{r7}
 800e744:	b085      	sub	sp, #20
 800e746:	af00      	add	r7, sp, #0
 800e748:	6078      	str	r0, [r7, #4]
 800e74a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e758:	d103      	bne.n	800e762 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	691b      	ldr	r3, [r3, #16]
 800e75e:	60fb      	str	r3, [r7, #12]
 800e760:	e00c      	b.n	800e77c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	3308      	adds	r3, #8
 800e766:	60fb      	str	r3, [r7, #12]
 800e768:	e002      	b.n	800e770 <vListInsert+0x2e>
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	685b      	ldr	r3, [r3, #4]
 800e76e:	60fb      	str	r3, [r7, #12]
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	68ba      	ldr	r2, [r7, #8]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d2f6      	bcs.n	800e76a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	685a      	ldr	r2, [r3, #4]
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	685b      	ldr	r3, [r3, #4]
 800e788:	683a      	ldr	r2, [r7, #0]
 800e78a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	68fa      	ldr	r2, [r7, #12]
 800e790:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	683a      	ldr	r2, [r7, #0]
 800e796:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	1c5a      	adds	r2, r3, #1
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	601a      	str	r2, [r3, #0]
}
 800e7a8:	bf00      	nop
 800e7aa:	3714      	adds	r7, #20
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b2:	4770      	bx	lr

0800e7b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b085      	sub	sp, #20
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	691b      	ldr	r3, [r3, #16]
 800e7c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	687a      	ldr	r2, [r7, #4]
 800e7c8:	6892      	ldr	r2, [r2, #8]
 800e7ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	689b      	ldr	r3, [r3, #8]
 800e7d0:	687a      	ldr	r2, [r7, #4]
 800e7d2:	6852      	ldr	r2, [r2, #4]
 800e7d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	685b      	ldr	r3, [r3, #4]
 800e7da:	687a      	ldr	r2, [r7, #4]
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d103      	bne.n	800e7e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	689a      	ldr	r2, [r3, #8]
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	1e5a      	subs	r2, r3, #1
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3714      	adds	r7, #20
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr

0800e808 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b084      	sub	sp, #16
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d10a      	bne.n	800e832 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e820:	f383 8811 	msr	BASEPRI, r3
 800e824:	f3bf 8f6f 	isb	sy
 800e828:	f3bf 8f4f 	dsb	sy
 800e82c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e82e:	bf00      	nop
 800e830:	e7fe      	b.n	800e830 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e832:	f002 fd77 	bl	8011324 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e83e:	68f9      	ldr	r1, [r7, #12]
 800e840:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e842:	fb01 f303 	mul.w	r3, r1, r3
 800e846:	441a      	add	r2, r3
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	2200      	movs	r2, #0
 800e850:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681a      	ldr	r2, [r3, #0]
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681a      	ldr	r2, [r3, #0]
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e862:	3b01      	subs	r3, #1
 800e864:	68f9      	ldr	r1, [r7, #12]
 800e866:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e868:	fb01 f303 	mul.w	r3, r1, r3
 800e86c:	441a      	add	r2, r3
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	22ff      	movs	r2, #255	; 0xff
 800e876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	22ff      	movs	r2, #255	; 0xff
 800e87e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d114      	bne.n	800e8b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	691b      	ldr	r3, [r3, #16]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d01a      	beq.n	800e8c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	3310      	adds	r3, #16
 800e894:	4618      	mov	r0, r3
 800e896:	f001 fd2b 	bl	80102f0 <xTaskRemoveFromEventList>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d012      	beq.n	800e8c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e8a0:	4b0c      	ldr	r3, [pc, #48]	; (800e8d4 <xQueueGenericReset+0xcc>)
 800e8a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8a6:	601a      	str	r2, [r3, #0]
 800e8a8:	f3bf 8f4f 	dsb	sy
 800e8ac:	f3bf 8f6f 	isb	sy
 800e8b0:	e009      	b.n	800e8c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	3310      	adds	r3, #16
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7ff fef2 	bl	800e6a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	3324      	adds	r3, #36	; 0x24
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7ff feed 	bl	800e6a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e8c6:	f002 fd5d 	bl	8011384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e8ca:	2301      	movs	r3, #1
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3710      	adds	r7, #16
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	e000ed04 	.word	0xe000ed04

0800e8d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b08e      	sub	sp, #56	; 0x38
 800e8dc:	af02      	add	r7, sp, #8
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	607a      	str	r2, [r7, #4]
 800e8e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d10a      	bne.n	800e902 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f0:	f383 8811 	msr	BASEPRI, r3
 800e8f4:	f3bf 8f6f 	isb	sy
 800e8f8:	f3bf 8f4f 	dsb	sy
 800e8fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e8fe:	bf00      	nop
 800e900:	e7fe      	b.n	800e900 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d10a      	bne.n	800e91e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e90c:	f383 8811 	msr	BASEPRI, r3
 800e910:	f3bf 8f6f 	isb	sy
 800e914:	f3bf 8f4f 	dsb	sy
 800e918:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e91a:	bf00      	nop
 800e91c:	e7fe      	b.n	800e91c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d002      	beq.n	800e92a <xQueueGenericCreateStatic+0x52>
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d001      	beq.n	800e92e <xQueueGenericCreateStatic+0x56>
 800e92a:	2301      	movs	r3, #1
 800e92c:	e000      	b.n	800e930 <xQueueGenericCreateStatic+0x58>
 800e92e:	2300      	movs	r3, #0
 800e930:	2b00      	cmp	r3, #0
 800e932:	d10a      	bne.n	800e94a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e938:	f383 8811 	msr	BASEPRI, r3
 800e93c:	f3bf 8f6f 	isb	sy
 800e940:	f3bf 8f4f 	dsb	sy
 800e944:	623b      	str	r3, [r7, #32]
}
 800e946:	bf00      	nop
 800e948:	e7fe      	b.n	800e948 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d102      	bne.n	800e956 <xQueueGenericCreateStatic+0x7e>
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d101      	bne.n	800e95a <xQueueGenericCreateStatic+0x82>
 800e956:	2301      	movs	r3, #1
 800e958:	e000      	b.n	800e95c <xQueueGenericCreateStatic+0x84>
 800e95a:	2300      	movs	r3, #0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d10a      	bne.n	800e976 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e964:	f383 8811 	msr	BASEPRI, r3
 800e968:	f3bf 8f6f 	isb	sy
 800e96c:	f3bf 8f4f 	dsb	sy
 800e970:	61fb      	str	r3, [r7, #28]
}
 800e972:	bf00      	nop
 800e974:	e7fe      	b.n	800e974 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e976:	2350      	movs	r3, #80	; 0x50
 800e978:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	2b50      	cmp	r3, #80	; 0x50
 800e97e:	d00a      	beq.n	800e996 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e984:	f383 8811 	msr	BASEPRI, r3
 800e988:	f3bf 8f6f 	isb	sy
 800e98c:	f3bf 8f4f 	dsb	sy
 800e990:	61bb      	str	r3, [r7, #24]
}
 800e992:	bf00      	nop
 800e994:	e7fe      	b.n	800e994 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e996:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d00d      	beq.n	800e9be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e9aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b0:	9300      	str	r3, [sp, #0]
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	68b9      	ldr	r1, [r7, #8]
 800e9b8:	68f8      	ldr	r0, [r7, #12]
 800e9ba:	f000 f83f 	bl	800ea3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3730      	adds	r7, #48	; 0x30
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b08a      	sub	sp, #40	; 0x28
 800e9cc:	af02      	add	r7, sp, #8
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	4613      	mov	r3, r2
 800e9d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d10a      	bne.n	800e9f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e0:	f383 8811 	msr	BASEPRI, r3
 800e9e4:	f3bf 8f6f 	isb	sy
 800e9e8:	f3bf 8f4f 	dsb	sy
 800e9ec:	613b      	str	r3, [r7, #16]
}
 800e9ee:	bf00      	nop
 800e9f0:	e7fe      	b.n	800e9f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	68ba      	ldr	r2, [r7, #8]
 800e9f6:	fb02 f303 	mul.w	r3, r2, r3
 800e9fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e9fc:	69fb      	ldr	r3, [r7, #28]
 800e9fe:	3350      	adds	r3, #80	; 0x50
 800ea00:	4618      	mov	r0, r3
 800ea02:	f002 fdb1 	bl	8011568 <pvPortMalloc>
 800ea06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ea08:	69bb      	ldr	r3, [r7, #24]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d011      	beq.n	800ea32 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ea0e:	69bb      	ldr	r3, [r7, #24]
 800ea10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	3350      	adds	r3, #80	; 0x50
 800ea16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ea18:	69bb      	ldr	r3, [r7, #24]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ea20:	79fa      	ldrb	r2, [r7, #7]
 800ea22:	69bb      	ldr	r3, [r7, #24]
 800ea24:	9300      	str	r3, [sp, #0]
 800ea26:	4613      	mov	r3, r2
 800ea28:	697a      	ldr	r2, [r7, #20]
 800ea2a:	68b9      	ldr	r1, [r7, #8]
 800ea2c:	68f8      	ldr	r0, [r7, #12]
 800ea2e:	f000 f805 	bl	800ea3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ea32:	69bb      	ldr	r3, [r7, #24]
	}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3720      	adds	r7, #32
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	607a      	str	r2, [r7, #4]
 800ea48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d103      	bne.n	800ea58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ea50:	69bb      	ldr	r3, [r7, #24]
 800ea52:	69ba      	ldr	r2, [r7, #24]
 800ea54:	601a      	str	r2, [r3, #0]
 800ea56:	e002      	b.n	800ea5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ea58:	69bb      	ldr	r3, [r7, #24]
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ea5e:	69bb      	ldr	r3, [r7, #24]
 800ea60:	68fa      	ldr	r2, [r7, #12]
 800ea62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ea64:	69bb      	ldr	r3, [r7, #24]
 800ea66:	68ba      	ldr	r2, [r7, #8]
 800ea68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ea6a:	2101      	movs	r1, #1
 800ea6c:	69b8      	ldr	r0, [r7, #24]
 800ea6e:	f7ff fecb 	bl	800e808 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ea72:	69bb      	ldr	r3, [r7, #24]
 800ea74:	78fa      	ldrb	r2, [r7, #3]
 800ea76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ea7a:	bf00      	nop
 800ea7c:	3710      	adds	r7, #16
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}

0800ea82 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ea82:	b580      	push	{r7, lr}
 800ea84:	b08a      	sub	sp, #40	; 0x28
 800ea86:	af02      	add	r7, sp, #8
 800ea88:	60f8      	str	r0, [r7, #12]
 800ea8a:	60b9      	str	r1, [r7, #8]
 800ea8c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d10a      	bne.n	800eaaa <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800ea94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea98:	f383 8811 	msr	BASEPRI, r3
 800ea9c:	f3bf 8f6f 	isb	sy
 800eaa0:	f3bf 8f4f 	dsb	sy
 800eaa4:	61bb      	str	r3, [r7, #24]
}
 800eaa6:	bf00      	nop
 800eaa8:	e7fe      	b.n	800eaa8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800eaaa:	68ba      	ldr	r2, [r7, #8]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d90a      	bls.n	800eac8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800eab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab6:	f383 8811 	msr	BASEPRI, r3
 800eaba:	f3bf 8f6f 	isb	sy
 800eabe:	f3bf 8f4f 	dsb	sy
 800eac2:	617b      	str	r3, [r7, #20]
}
 800eac4:	bf00      	nop
 800eac6:	e7fe      	b.n	800eac6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800eac8:	2302      	movs	r3, #2
 800eaca:	9300      	str	r3, [sp, #0]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2200      	movs	r2, #0
 800ead0:	2100      	movs	r1, #0
 800ead2:	68f8      	ldr	r0, [r7, #12]
 800ead4:	f7ff ff00 	bl	800e8d8 <xQueueGenericCreateStatic>
 800ead8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800eada:	69fb      	ldr	r3, [r7, #28]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d002      	beq.n	800eae6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	68ba      	ldr	r2, [r7, #8]
 800eae4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800eae6:	69fb      	ldr	r3, [r7, #28]
	}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3720      	adds	r7, #32
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b086      	sub	sp, #24
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d10a      	bne.n	800eb16 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800eb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb04:	f383 8811 	msr	BASEPRI, r3
 800eb08:	f3bf 8f6f 	isb	sy
 800eb0c:	f3bf 8f4f 	dsb	sy
 800eb10:	613b      	str	r3, [r7, #16]
}
 800eb12:	bf00      	nop
 800eb14:	e7fe      	b.n	800eb14 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800eb16:	683a      	ldr	r2, [r7, #0]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d90a      	bls.n	800eb34 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800eb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb22:	f383 8811 	msr	BASEPRI, r3
 800eb26:	f3bf 8f6f 	isb	sy
 800eb2a:	f3bf 8f4f 	dsb	sy
 800eb2e:	60fb      	str	r3, [r7, #12]
}
 800eb30:	bf00      	nop
 800eb32:	e7fe      	b.n	800eb32 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800eb34:	2202      	movs	r2, #2
 800eb36:	2100      	movs	r1, #0
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f7ff ff45 	bl	800e9c8 <xQueueGenericCreate>
 800eb3e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d002      	beq.n	800eb4c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	683a      	ldr	r2, [r7, #0]
 800eb4a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800eb4c:	697b      	ldr	r3, [r7, #20]
	}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3718      	adds	r7, #24
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}
	...

0800eb58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b08e      	sub	sp, #56	; 0x38
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	60f8      	str	r0, [r7, #12]
 800eb60:	60b9      	str	r1, [r7, #8]
 800eb62:	607a      	str	r2, [r7, #4]
 800eb64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eb66:	2300      	movs	r3, #0
 800eb68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d10a      	bne.n	800eb8a <xQueueGenericSend+0x32>
	__asm volatile
 800eb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb78:	f383 8811 	msr	BASEPRI, r3
 800eb7c:	f3bf 8f6f 	isb	sy
 800eb80:	f3bf 8f4f 	dsb	sy
 800eb84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eb86:	bf00      	nop
 800eb88:	e7fe      	b.n	800eb88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d103      	bne.n	800eb98 <xQueueGenericSend+0x40>
 800eb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d101      	bne.n	800eb9c <xQueueGenericSend+0x44>
 800eb98:	2301      	movs	r3, #1
 800eb9a:	e000      	b.n	800eb9e <xQueueGenericSend+0x46>
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d10a      	bne.n	800ebb8 <xQueueGenericSend+0x60>
	__asm volatile
 800eba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba6:	f383 8811 	msr	BASEPRI, r3
 800ebaa:	f3bf 8f6f 	isb	sy
 800ebae:	f3bf 8f4f 	dsb	sy
 800ebb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ebb4:	bf00      	nop
 800ebb6:	e7fe      	b.n	800ebb6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	2b02      	cmp	r3, #2
 800ebbc:	d103      	bne.n	800ebc6 <xQueueGenericSend+0x6e>
 800ebbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	d101      	bne.n	800ebca <xQueueGenericSend+0x72>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e000      	b.n	800ebcc <xQueueGenericSend+0x74>
 800ebca:	2300      	movs	r3, #0
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d10a      	bne.n	800ebe6 <xQueueGenericSend+0x8e>
	__asm volatile
 800ebd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd4:	f383 8811 	msr	BASEPRI, r3
 800ebd8:	f3bf 8f6f 	isb	sy
 800ebdc:	f3bf 8f4f 	dsb	sy
 800ebe0:	623b      	str	r3, [r7, #32]
}
 800ebe2:	bf00      	nop
 800ebe4:	e7fe      	b.n	800ebe4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ebe6:	f001 fd41 	bl	801066c <xTaskGetSchedulerState>
 800ebea:	4603      	mov	r3, r0
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d102      	bne.n	800ebf6 <xQueueGenericSend+0x9e>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d101      	bne.n	800ebfa <xQueueGenericSend+0xa2>
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	e000      	b.n	800ebfc <xQueueGenericSend+0xa4>
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d10a      	bne.n	800ec16 <xQueueGenericSend+0xbe>
	__asm volatile
 800ec00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec04:	f383 8811 	msr	BASEPRI, r3
 800ec08:	f3bf 8f6f 	isb	sy
 800ec0c:	f3bf 8f4f 	dsb	sy
 800ec10:	61fb      	str	r3, [r7, #28]
}
 800ec12:	bf00      	nop
 800ec14:	e7fe      	b.n	800ec14 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ec16:	f002 fb85 	bl	8011324 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d302      	bcc.n	800ec2c <xQueueGenericSend+0xd4>
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	2b02      	cmp	r3, #2
 800ec2a:	d129      	bne.n	800ec80 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ec2c:	683a      	ldr	r2, [r7, #0]
 800ec2e:	68b9      	ldr	r1, [r7, #8]
 800ec30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec32:	f000 fc5e 	bl	800f4f2 <prvCopyDataToQueue>
 800ec36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d010      	beq.n	800ec62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec42:	3324      	adds	r3, #36	; 0x24
 800ec44:	4618      	mov	r0, r3
 800ec46:	f001 fb53 	bl	80102f0 <xTaskRemoveFromEventList>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d013      	beq.n	800ec78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ec50:	4b3f      	ldr	r3, [pc, #252]	; (800ed50 <xQueueGenericSend+0x1f8>)
 800ec52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec56:	601a      	str	r2, [r3, #0]
 800ec58:	f3bf 8f4f 	dsb	sy
 800ec5c:	f3bf 8f6f 	isb	sy
 800ec60:	e00a      	b.n	800ec78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ec62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d007      	beq.n	800ec78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ec68:	4b39      	ldr	r3, [pc, #228]	; (800ed50 <xQueueGenericSend+0x1f8>)
 800ec6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec6e:	601a      	str	r2, [r3, #0]
 800ec70:	f3bf 8f4f 	dsb	sy
 800ec74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ec78:	f002 fb84 	bl	8011384 <vPortExitCritical>
				return pdPASS;
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	e063      	b.n	800ed48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d103      	bne.n	800ec8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ec86:	f002 fb7d 	bl	8011384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	e05c      	b.n	800ed48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ec8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d106      	bne.n	800eca2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ec94:	f107 0314 	add.w	r3, r7, #20
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f001 fb8d 	bl	80103b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ec9e:	2301      	movs	r3, #1
 800eca0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eca2:	f002 fb6f 	bl	8011384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eca6:	f001 f8ff 	bl	800fea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ecaa:	f002 fb3b 	bl	8011324 <vPortEnterCritical>
 800ecae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ecb4:	b25b      	sxtb	r3, r3
 800ecb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecba:	d103      	bne.n	800ecc4 <xQueueGenericSend+0x16c>
 800ecbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ecc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ecca:	b25b      	sxtb	r3, r3
 800eccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecd0:	d103      	bne.n	800ecda <xQueueGenericSend+0x182>
 800ecd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ecda:	f002 fb53 	bl	8011384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ecde:	1d3a      	adds	r2, r7, #4
 800ece0:	f107 0314 	add.w	r3, r7, #20
 800ece4:	4611      	mov	r1, r2
 800ece6:	4618      	mov	r0, r3
 800ece8:	f001 fb7c 	bl	80103e4 <xTaskCheckForTimeOut>
 800ecec:	4603      	mov	r3, r0
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d124      	bne.n	800ed3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ecf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecf4:	f000 fcf5 	bl	800f6e2 <prvIsQueueFull>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d018      	beq.n	800ed30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ecfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed00:	3310      	adds	r3, #16
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	4611      	mov	r1, r2
 800ed06:	4618      	mov	r0, r3
 800ed08:	f001 faa2 	bl	8010250 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ed0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed0e:	f000 fc80 	bl	800f612 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ed12:	f001 f8d7 	bl	800fec4 <xTaskResumeAll>
 800ed16:	4603      	mov	r3, r0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	f47f af7c 	bne.w	800ec16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ed1e:	4b0c      	ldr	r3, [pc, #48]	; (800ed50 <xQueueGenericSend+0x1f8>)
 800ed20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed24:	601a      	str	r2, [r3, #0]
 800ed26:	f3bf 8f4f 	dsb	sy
 800ed2a:	f3bf 8f6f 	isb	sy
 800ed2e:	e772      	b.n	800ec16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ed30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed32:	f000 fc6e 	bl	800f612 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed36:	f001 f8c5 	bl	800fec4 <xTaskResumeAll>
 800ed3a:	e76c      	b.n	800ec16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ed3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed3e:	f000 fc68 	bl	800f612 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed42:	f001 f8bf 	bl	800fec4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ed46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3738      	adds	r7, #56	; 0x38
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}
 800ed50:	e000ed04 	.word	0xe000ed04

0800ed54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b090      	sub	sp, #64	; 0x40
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	60f8      	str	r0, [r7, #12]
 800ed5c:	60b9      	str	r1, [r7, #8]
 800ed5e:	607a      	str	r2, [r7, #4]
 800ed60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ed66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d10a      	bne.n	800ed82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ed6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed70:	f383 8811 	msr	BASEPRI, r3
 800ed74:	f3bf 8f6f 	isb	sy
 800ed78:	f3bf 8f4f 	dsb	sy
 800ed7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ed7e:	bf00      	nop
 800ed80:	e7fe      	b.n	800ed80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d103      	bne.n	800ed90 <xQueueGenericSendFromISR+0x3c>
 800ed88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d101      	bne.n	800ed94 <xQueueGenericSendFromISR+0x40>
 800ed90:	2301      	movs	r3, #1
 800ed92:	e000      	b.n	800ed96 <xQueueGenericSendFromISR+0x42>
 800ed94:	2300      	movs	r3, #0
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d10a      	bne.n	800edb0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ed9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed9e:	f383 8811 	msr	BASEPRI, r3
 800eda2:	f3bf 8f6f 	isb	sy
 800eda6:	f3bf 8f4f 	dsb	sy
 800edaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800edac:	bf00      	nop
 800edae:	e7fe      	b.n	800edae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	2b02      	cmp	r3, #2
 800edb4:	d103      	bne.n	800edbe <xQueueGenericSendFromISR+0x6a>
 800edb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d101      	bne.n	800edc2 <xQueueGenericSendFromISR+0x6e>
 800edbe:	2301      	movs	r3, #1
 800edc0:	e000      	b.n	800edc4 <xQueueGenericSendFromISR+0x70>
 800edc2:	2300      	movs	r3, #0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d10a      	bne.n	800edde <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800edc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edcc:	f383 8811 	msr	BASEPRI, r3
 800edd0:	f3bf 8f6f 	isb	sy
 800edd4:	f3bf 8f4f 	dsb	sy
 800edd8:	623b      	str	r3, [r7, #32]
}
 800edda:	bf00      	nop
 800eddc:	e7fe      	b.n	800eddc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800edde:	f002 fb83 	bl	80114e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ede2:	f3ef 8211 	mrs	r2, BASEPRI
 800ede6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edea:	f383 8811 	msr	BASEPRI, r3
 800edee:	f3bf 8f6f 	isb	sy
 800edf2:	f3bf 8f4f 	dsb	sy
 800edf6:	61fa      	str	r2, [r7, #28]
 800edf8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800edfa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800edfc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800edfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d302      	bcc.n	800ee10 <xQueueGenericSendFromISR+0xbc>
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	2b02      	cmp	r3, #2
 800ee0e:	d12f      	bne.n	800ee70 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ee10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ee20:	683a      	ldr	r2, [r7, #0]
 800ee22:	68b9      	ldr	r1, [r7, #8]
 800ee24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ee26:	f000 fb64 	bl	800f4f2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ee2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ee2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee32:	d112      	bne.n	800ee5a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d016      	beq.n	800ee6a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee3e:	3324      	adds	r3, #36	; 0x24
 800ee40:	4618      	mov	r0, r3
 800ee42:	f001 fa55 	bl	80102f0 <xTaskRemoveFromEventList>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d00e      	beq.n	800ee6a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d00b      	beq.n	800ee6a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2201      	movs	r2, #1
 800ee56:	601a      	str	r2, [r3, #0]
 800ee58:	e007      	b.n	800ee6a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ee5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ee5e:	3301      	adds	r3, #1
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	b25a      	sxtb	r2, r3
 800ee64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ee6e:	e001      	b.n	800ee74 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ee70:	2300      	movs	r3, #0
 800ee72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee76:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ee7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ee80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	3740      	adds	r7, #64	; 0x40
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}

0800ee8a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ee8a:	b580      	push	{r7, lr}
 800ee8c:	b08e      	sub	sp, #56	; 0x38
 800ee8e:	af00      	add	r7, sp, #0
 800ee90:	6078      	str	r0, [r7, #4]
 800ee92:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ee98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d10a      	bne.n	800eeb4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ee9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea2:	f383 8811 	msr	BASEPRI, r3
 800eea6:	f3bf 8f6f 	isb	sy
 800eeaa:	f3bf 8f4f 	dsb	sy
 800eeae:	623b      	str	r3, [r7, #32]
}
 800eeb0:	bf00      	nop
 800eeb2:	e7fe      	b.n	800eeb2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800eeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d00a      	beq.n	800eed2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800eebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec0:	f383 8811 	msr	BASEPRI, r3
 800eec4:	f3bf 8f6f 	isb	sy
 800eec8:	f3bf 8f4f 	dsb	sy
 800eecc:	61fb      	str	r3, [r7, #28]
}
 800eece:	bf00      	nop
 800eed0:	e7fe      	b.n	800eed0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800eed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d103      	bne.n	800eee2 <xQueueGiveFromISR+0x58>
 800eeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d101      	bne.n	800eee6 <xQueueGiveFromISR+0x5c>
 800eee2:	2301      	movs	r3, #1
 800eee4:	e000      	b.n	800eee8 <xQueueGiveFromISR+0x5e>
 800eee6:	2300      	movs	r3, #0
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d10a      	bne.n	800ef02 <xQueueGiveFromISR+0x78>
	__asm volatile
 800eeec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef0:	f383 8811 	msr	BASEPRI, r3
 800eef4:	f3bf 8f6f 	isb	sy
 800eef8:	f3bf 8f4f 	dsb	sy
 800eefc:	61bb      	str	r3, [r7, #24]
}
 800eefe:	bf00      	nop
 800ef00:	e7fe      	b.n	800ef00 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ef02:	f002 faf1 	bl	80114e8 <vPortValidateInterruptPriority>
	__asm volatile
 800ef06:	f3ef 8211 	mrs	r2, BASEPRI
 800ef0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef0e:	f383 8811 	msr	BASEPRI, r3
 800ef12:	f3bf 8f6f 	isb	sy
 800ef16:	f3bf 8f4f 	dsb	sy
 800ef1a:	617a      	str	r2, [r7, #20]
 800ef1c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ef1e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ef28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d22b      	bcs.n	800ef8a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ef32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ef3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef3e:	1c5a      	adds	r2, r3, #1
 800ef40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef42:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ef44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ef48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef4c:	d112      	bne.n	800ef74 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d016      	beq.n	800ef84 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef58:	3324      	adds	r3, #36	; 0x24
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f001 f9c8 	bl	80102f0 <xTaskRemoveFromEventList>
 800ef60:	4603      	mov	r3, r0
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d00e      	beq.n	800ef84 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d00b      	beq.n	800ef84 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	2201      	movs	r2, #1
 800ef70:	601a      	str	r2, [r3, #0]
 800ef72:	e007      	b.n	800ef84 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ef74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef78:	3301      	adds	r3, #1
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	b25a      	sxtb	r2, r3
 800ef7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ef84:	2301      	movs	r3, #1
 800ef86:	637b      	str	r3, [r7, #52]	; 0x34
 800ef88:	e001      	b.n	800ef8e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	637b      	str	r3, [r7, #52]	; 0x34
 800ef8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef90:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f383 8811 	msr	BASEPRI, r3
}
 800ef98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ef9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3738      	adds	r7, #56	; 0x38
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}

0800efa4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b08c      	sub	sp, #48	; 0x30
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	60f8      	str	r0, [r7, #12]
 800efac:	60b9      	str	r1, [r7, #8]
 800efae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800efb0:	2300      	movs	r3, #0
 800efb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800efb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d10a      	bne.n	800efd4 <xQueueReceive+0x30>
	__asm volatile
 800efbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc2:	f383 8811 	msr	BASEPRI, r3
 800efc6:	f3bf 8f6f 	isb	sy
 800efca:	f3bf 8f4f 	dsb	sy
 800efce:	623b      	str	r3, [r7, #32]
}
 800efd0:	bf00      	nop
 800efd2:	e7fe      	b.n	800efd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d103      	bne.n	800efe2 <xQueueReceive+0x3e>
 800efda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d101      	bne.n	800efe6 <xQueueReceive+0x42>
 800efe2:	2301      	movs	r3, #1
 800efe4:	e000      	b.n	800efe8 <xQueueReceive+0x44>
 800efe6:	2300      	movs	r3, #0
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d10a      	bne.n	800f002 <xQueueReceive+0x5e>
	__asm volatile
 800efec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff0:	f383 8811 	msr	BASEPRI, r3
 800eff4:	f3bf 8f6f 	isb	sy
 800eff8:	f3bf 8f4f 	dsb	sy
 800effc:	61fb      	str	r3, [r7, #28]
}
 800effe:	bf00      	nop
 800f000:	e7fe      	b.n	800f000 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f002:	f001 fb33 	bl	801066c <xTaskGetSchedulerState>
 800f006:	4603      	mov	r3, r0
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d102      	bne.n	800f012 <xQueueReceive+0x6e>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d101      	bne.n	800f016 <xQueueReceive+0x72>
 800f012:	2301      	movs	r3, #1
 800f014:	e000      	b.n	800f018 <xQueueReceive+0x74>
 800f016:	2300      	movs	r3, #0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d10a      	bne.n	800f032 <xQueueReceive+0x8e>
	__asm volatile
 800f01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f020:	f383 8811 	msr	BASEPRI, r3
 800f024:	f3bf 8f6f 	isb	sy
 800f028:	f3bf 8f4f 	dsb	sy
 800f02c:	61bb      	str	r3, [r7, #24]
}
 800f02e:	bf00      	nop
 800f030:	e7fe      	b.n	800f030 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f032:	f002 f977 	bl	8011324 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f03a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d01f      	beq.n	800f082 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f042:	68b9      	ldr	r1, [r7, #8]
 800f044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f046:	f000 fabe 	bl	800f5c6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f04c:	1e5a      	subs	r2, r3, #1
 800f04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f050:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f054:	691b      	ldr	r3, [r3, #16]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d00f      	beq.n	800f07a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f05c:	3310      	adds	r3, #16
 800f05e:	4618      	mov	r0, r3
 800f060:	f001 f946 	bl	80102f0 <xTaskRemoveFromEventList>
 800f064:	4603      	mov	r3, r0
 800f066:	2b00      	cmp	r3, #0
 800f068:	d007      	beq.n	800f07a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f06a:	4b3d      	ldr	r3, [pc, #244]	; (800f160 <xQueueReceive+0x1bc>)
 800f06c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f070:	601a      	str	r2, [r3, #0]
 800f072:	f3bf 8f4f 	dsb	sy
 800f076:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f07a:	f002 f983 	bl	8011384 <vPortExitCritical>
				return pdPASS;
 800f07e:	2301      	movs	r3, #1
 800f080:	e069      	b.n	800f156 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d103      	bne.n	800f090 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f088:	f002 f97c 	bl	8011384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f08c:	2300      	movs	r3, #0
 800f08e:	e062      	b.n	800f156 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f092:	2b00      	cmp	r3, #0
 800f094:	d106      	bne.n	800f0a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f096:	f107 0310 	add.w	r3, r7, #16
 800f09a:	4618      	mov	r0, r3
 800f09c:	f001 f98c 	bl	80103b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f0a4:	f002 f96e 	bl	8011384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f0a8:	f000 fefe 	bl	800fea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f0ac:	f002 f93a 	bl	8011324 <vPortEnterCritical>
 800f0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f0b6:	b25b      	sxtb	r3, r3
 800f0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0bc:	d103      	bne.n	800f0c6 <xQueueReceive+0x122>
 800f0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0cc:	b25b      	sxtb	r3, r3
 800f0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0d2:	d103      	bne.n	800f0dc <xQueueReceive+0x138>
 800f0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f0dc:	f002 f952 	bl	8011384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f0e0:	1d3a      	adds	r2, r7, #4
 800f0e2:	f107 0310 	add.w	r3, r7, #16
 800f0e6:	4611      	mov	r1, r2
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f001 f97b 	bl	80103e4 <xTaskCheckForTimeOut>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d123      	bne.n	800f13c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f0f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0f6:	f000 fade 	bl	800f6b6 <prvIsQueueEmpty>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d017      	beq.n	800f130 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f102:	3324      	adds	r3, #36	; 0x24
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	4611      	mov	r1, r2
 800f108:	4618      	mov	r0, r3
 800f10a:	f001 f8a1 	bl	8010250 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f10e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f110:	f000 fa7f 	bl	800f612 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f114:	f000 fed6 	bl	800fec4 <xTaskResumeAll>
 800f118:	4603      	mov	r3, r0
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d189      	bne.n	800f032 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f11e:	4b10      	ldr	r3, [pc, #64]	; (800f160 <xQueueReceive+0x1bc>)
 800f120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f124:	601a      	str	r2, [r3, #0]
 800f126:	f3bf 8f4f 	dsb	sy
 800f12a:	f3bf 8f6f 	isb	sy
 800f12e:	e780      	b.n	800f032 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f132:	f000 fa6e 	bl	800f612 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f136:	f000 fec5 	bl	800fec4 <xTaskResumeAll>
 800f13a:	e77a      	b.n	800f032 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f13c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f13e:	f000 fa68 	bl	800f612 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f142:	f000 febf 	bl	800fec4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f148:	f000 fab5 	bl	800f6b6 <prvIsQueueEmpty>
 800f14c:	4603      	mov	r3, r0
 800f14e:	2b00      	cmp	r3, #0
 800f150:	f43f af6f 	beq.w	800f032 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f154:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f156:	4618      	mov	r0, r3
 800f158:	3730      	adds	r7, #48	; 0x30
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	e000ed04 	.word	0xe000ed04

0800f164 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b08e      	sub	sp, #56	; 0x38
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f16e:	2300      	movs	r3, #0
 800f170:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f176:	2300      	movs	r3, #0
 800f178:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d10a      	bne.n	800f196 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f184:	f383 8811 	msr	BASEPRI, r3
 800f188:	f3bf 8f6f 	isb	sy
 800f18c:	f3bf 8f4f 	dsb	sy
 800f190:	623b      	str	r3, [r7, #32]
}
 800f192:	bf00      	nop
 800f194:	e7fe      	b.n	800f194 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d00a      	beq.n	800f1b4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a2:	f383 8811 	msr	BASEPRI, r3
 800f1a6:	f3bf 8f6f 	isb	sy
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	61fb      	str	r3, [r7, #28]
}
 800f1b0:	bf00      	nop
 800f1b2:	e7fe      	b.n	800f1b2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f1b4:	f001 fa5a 	bl	801066c <xTaskGetSchedulerState>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d102      	bne.n	800f1c4 <xQueueSemaphoreTake+0x60>
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d101      	bne.n	800f1c8 <xQueueSemaphoreTake+0x64>
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	e000      	b.n	800f1ca <xQueueSemaphoreTake+0x66>
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d10a      	bne.n	800f1e4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d2:	f383 8811 	msr	BASEPRI, r3
 800f1d6:	f3bf 8f6f 	isb	sy
 800f1da:	f3bf 8f4f 	dsb	sy
 800f1de:	61bb      	str	r3, [r7, #24]
}
 800f1e0:	bf00      	nop
 800f1e2:	e7fe      	b.n	800f1e2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f1e4:	f002 f89e 	bl	8011324 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1ec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d024      	beq.n	800f23e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f6:	1e5a      	subs	r2, r3, #1
 800f1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d104      	bne.n	800f20e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f204:	f001 fba8 	bl	8010958 <pvTaskIncrementMutexHeldCount>
 800f208:	4602      	mov	r2, r0
 800f20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f210:	691b      	ldr	r3, [r3, #16]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d00f      	beq.n	800f236 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f218:	3310      	adds	r3, #16
 800f21a:	4618      	mov	r0, r3
 800f21c:	f001 f868 	bl	80102f0 <xTaskRemoveFromEventList>
 800f220:	4603      	mov	r3, r0
 800f222:	2b00      	cmp	r3, #0
 800f224:	d007      	beq.n	800f236 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f226:	4b54      	ldr	r3, [pc, #336]	; (800f378 <xQueueSemaphoreTake+0x214>)
 800f228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f22c:	601a      	str	r2, [r3, #0]
 800f22e:	f3bf 8f4f 	dsb	sy
 800f232:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f236:	f002 f8a5 	bl	8011384 <vPortExitCritical>
				return pdPASS;
 800f23a:	2301      	movs	r3, #1
 800f23c:	e097      	b.n	800f36e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d111      	bne.n	800f268 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f246:	2b00      	cmp	r3, #0
 800f248:	d00a      	beq.n	800f260 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f24e:	f383 8811 	msr	BASEPRI, r3
 800f252:	f3bf 8f6f 	isb	sy
 800f256:	f3bf 8f4f 	dsb	sy
 800f25a:	617b      	str	r3, [r7, #20]
}
 800f25c:	bf00      	nop
 800f25e:	e7fe      	b.n	800f25e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f260:	f002 f890 	bl	8011384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f264:	2300      	movs	r3, #0
 800f266:	e082      	b.n	800f36e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d106      	bne.n	800f27c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f26e:	f107 030c 	add.w	r3, r7, #12
 800f272:	4618      	mov	r0, r3
 800f274:	f001 f8a0 	bl	80103b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f278:	2301      	movs	r3, #1
 800f27a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f27c:	f002 f882 	bl	8011384 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f280:	f000 fe12 	bl	800fea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f284:	f002 f84e 	bl	8011324 <vPortEnterCritical>
 800f288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f28e:	b25b      	sxtb	r3, r3
 800f290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f294:	d103      	bne.n	800f29e <xQueueSemaphoreTake+0x13a>
 800f296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f298:	2200      	movs	r2, #0
 800f29a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f2a4:	b25b      	sxtb	r3, r3
 800f2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2aa:	d103      	bne.n	800f2b4 <xQueueSemaphoreTake+0x150>
 800f2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f2b4:	f002 f866 	bl	8011384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f2b8:	463a      	mov	r2, r7
 800f2ba:	f107 030c 	add.w	r3, r7, #12
 800f2be:	4611      	mov	r1, r2
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f001 f88f 	bl	80103e4 <xTaskCheckForTimeOut>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d132      	bne.n	800f332 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f2cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2ce:	f000 f9f2 	bl	800f6b6 <prvIsQueueEmpty>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d026      	beq.n	800f326 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d109      	bne.n	800f2f4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f2e0:	f002 f820 	bl	8011324 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e6:	689b      	ldr	r3, [r3, #8]
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f001 f9dd 	bl	80106a8 <xTaskPriorityInherit>
 800f2ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f2f0:	f002 f848 	bl	8011384 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f6:	3324      	adds	r3, #36	; 0x24
 800f2f8:	683a      	ldr	r2, [r7, #0]
 800f2fa:	4611      	mov	r1, r2
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f000 ffa7 	bl	8010250 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f304:	f000 f985 	bl	800f612 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f308:	f000 fddc 	bl	800fec4 <xTaskResumeAll>
 800f30c:	4603      	mov	r3, r0
 800f30e:	2b00      	cmp	r3, #0
 800f310:	f47f af68 	bne.w	800f1e4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f314:	4b18      	ldr	r3, [pc, #96]	; (800f378 <xQueueSemaphoreTake+0x214>)
 800f316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f31a:	601a      	str	r2, [r3, #0]
 800f31c:	f3bf 8f4f 	dsb	sy
 800f320:	f3bf 8f6f 	isb	sy
 800f324:	e75e      	b.n	800f1e4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f328:	f000 f973 	bl	800f612 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f32c:	f000 fdca 	bl	800fec4 <xTaskResumeAll>
 800f330:	e758      	b.n	800f1e4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f334:	f000 f96d 	bl	800f612 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f338:	f000 fdc4 	bl	800fec4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f33c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f33e:	f000 f9ba 	bl	800f6b6 <prvIsQueueEmpty>
 800f342:	4603      	mov	r3, r0
 800f344:	2b00      	cmp	r3, #0
 800f346:	f43f af4d 	beq.w	800f1e4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00d      	beq.n	800f36c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f350:	f001 ffe8 	bl	8011324 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f354:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f356:	f000 f8b4 	bl	800f4c2 <prvGetDisinheritPriorityAfterTimeout>
 800f35a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35e:	689b      	ldr	r3, [r3, #8]
 800f360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f362:	4618      	mov	r0, r3
 800f364:	f001 fa76 	bl	8010854 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f368:	f002 f80c 	bl	8011384 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f36c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3738      	adds	r7, #56	; 0x38
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
 800f376:	bf00      	nop
 800f378:	e000ed04 	.word	0xe000ed04

0800f37c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b08e      	sub	sp, #56	; 0x38
 800f380:	af00      	add	r7, sp, #0
 800f382:	60f8      	str	r0, [r7, #12]
 800f384:	60b9      	str	r1, [r7, #8]
 800f386:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d10a      	bne.n	800f3a8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f396:	f383 8811 	msr	BASEPRI, r3
 800f39a:	f3bf 8f6f 	isb	sy
 800f39e:	f3bf 8f4f 	dsb	sy
 800f3a2:	623b      	str	r3, [r7, #32]
}
 800f3a4:	bf00      	nop
 800f3a6:	e7fe      	b.n	800f3a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d103      	bne.n	800f3b6 <xQueueReceiveFromISR+0x3a>
 800f3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d101      	bne.n	800f3ba <xQueueReceiveFromISR+0x3e>
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	e000      	b.n	800f3bc <xQueueReceiveFromISR+0x40>
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d10a      	bne.n	800f3d6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c4:	f383 8811 	msr	BASEPRI, r3
 800f3c8:	f3bf 8f6f 	isb	sy
 800f3cc:	f3bf 8f4f 	dsb	sy
 800f3d0:	61fb      	str	r3, [r7, #28]
}
 800f3d2:	bf00      	nop
 800f3d4:	e7fe      	b.n	800f3d4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f3d6:	f002 f887 	bl	80114e8 <vPortValidateInterruptPriority>
	__asm volatile
 800f3da:	f3ef 8211 	mrs	r2, BASEPRI
 800f3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e2:	f383 8811 	msr	BASEPRI, r3
 800f3e6:	f3bf 8f6f 	isb	sy
 800f3ea:	f3bf 8f4f 	dsb	sy
 800f3ee:	61ba      	str	r2, [r7, #24]
 800f3f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f3f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d02f      	beq.n	800f462 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f404:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f40c:	68b9      	ldr	r1, [r7, #8]
 800f40e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f410:	f000 f8d9 	bl	800f5c6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f416:	1e5a      	subs	r2, r3, #1
 800f418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f41a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f41c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f424:	d112      	bne.n	800f44c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f428:	691b      	ldr	r3, [r3, #16]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d016      	beq.n	800f45c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f430:	3310      	adds	r3, #16
 800f432:	4618      	mov	r0, r3
 800f434:	f000 ff5c 	bl	80102f0 <xTaskRemoveFromEventList>
 800f438:	4603      	mov	r3, r0
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d00e      	beq.n	800f45c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d00b      	beq.n	800f45c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2201      	movs	r2, #1
 800f448:	601a      	str	r2, [r3, #0]
 800f44a:	e007      	b.n	800f45c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f44c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f450:	3301      	adds	r3, #1
 800f452:	b2db      	uxtb	r3, r3
 800f454:	b25a      	sxtb	r2, r3
 800f456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f45c:	2301      	movs	r3, #1
 800f45e:	637b      	str	r3, [r7, #52]	; 0x34
 800f460:	e001      	b.n	800f466 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f462:	2300      	movs	r3, #0
 800f464:	637b      	str	r3, [r7, #52]	; 0x34
 800f466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f468:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	f383 8811 	msr	BASEPRI, r3
}
 800f470:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f474:	4618      	mov	r0, r3
 800f476:	3738      	adds	r7, #56	; 0x38
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b084      	sub	sp, #16
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d10a      	bne.n	800f4a4 <vQueueDelete+0x28>
	__asm volatile
 800f48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f492:	f383 8811 	msr	BASEPRI, r3
 800f496:	f3bf 8f6f 	isb	sy
 800f49a:	f3bf 8f4f 	dsb	sy
 800f49e:	60bb      	str	r3, [r7, #8]
}
 800f4a0:	bf00      	nop
 800f4a2:	e7fe      	b.n	800f4a2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f4a4:	68f8      	ldr	r0, [r7, #12]
 800f4a6:	f000 f95f 	bl	800f768 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d102      	bne.n	800f4ba <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f4b4:	68f8      	ldr	r0, [r7, #12]
 800f4b6:	f002 f923 	bl	8011700 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f4ba:	bf00      	nop
 800f4bc:	3710      	adds	r7, #16
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}

0800f4c2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f4c2:	b480      	push	{r7}
 800f4c4:	b085      	sub	sp, #20
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d006      	beq.n	800f4e0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f4dc:	60fb      	str	r3, [r7, #12]
 800f4de:	e001      	b.n	800f4e4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
	}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3714      	adds	r7, #20
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr

0800f4f2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f4f2:	b580      	push	{r7, lr}
 800f4f4:	b086      	sub	sp, #24
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	60f8      	str	r0, [r7, #12]
 800f4fa:	60b9      	str	r1, [r7, #8]
 800f4fc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f4fe:	2300      	movs	r3, #0
 800f500:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f506:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d10d      	bne.n	800f52c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d14d      	bne.n	800f5b4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	689b      	ldr	r3, [r3, #8]
 800f51c:	4618      	mov	r0, r3
 800f51e:	f001 f92b 	bl	8010778 <xTaskPriorityDisinherit>
 800f522:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	2200      	movs	r2, #0
 800f528:	609a      	str	r2, [r3, #8]
 800f52a:	e043      	b.n	800f5b4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d119      	bne.n	800f566 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	6858      	ldr	r0, [r3, #4]
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f53a:	461a      	mov	r2, r3
 800f53c:	68b9      	ldr	r1, [r7, #8]
 800f53e:	f002 ff47 	bl	80123d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	685a      	ldr	r2, [r3, #4]
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f54a:	441a      	add	r2, r3
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	685a      	ldr	r2, [r3, #4]
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	689b      	ldr	r3, [r3, #8]
 800f558:	429a      	cmp	r2, r3
 800f55a:	d32b      	bcc.n	800f5b4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	681a      	ldr	r2, [r3, #0]
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	605a      	str	r2, [r3, #4]
 800f564:	e026      	b.n	800f5b4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	68d8      	ldr	r0, [r3, #12]
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f56e:	461a      	mov	r2, r3
 800f570:	68b9      	ldr	r1, [r7, #8]
 800f572:	f002 ff2d 	bl	80123d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	68da      	ldr	r2, [r3, #12]
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f57e:	425b      	negs	r3, r3
 800f580:	441a      	add	r2, r3
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	68da      	ldr	r2, [r3, #12]
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	429a      	cmp	r2, r3
 800f590:	d207      	bcs.n	800f5a2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	689a      	ldr	r2, [r3, #8]
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f59a:	425b      	negs	r3, r3
 800f59c:	441a      	add	r2, r3
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2b02      	cmp	r3, #2
 800f5a6:	d105      	bne.n	800f5b4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d002      	beq.n	800f5b4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f5ae:	693b      	ldr	r3, [r7, #16]
 800f5b0:	3b01      	subs	r3, #1
 800f5b2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f5b4:	693b      	ldr	r3, [r7, #16]
 800f5b6:	1c5a      	adds	r2, r3, #1
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f5bc:	697b      	ldr	r3, [r7, #20]
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3718      	adds	r7, #24
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}

0800f5c6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f5c6:	b580      	push	{r7, lr}
 800f5c8:	b082      	sub	sp, #8
 800f5ca:	af00      	add	r7, sp, #0
 800f5cc:	6078      	str	r0, [r7, #4]
 800f5ce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d018      	beq.n	800f60a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	68da      	ldr	r2, [r3, #12]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5e0:	441a      	add	r2, r3
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	68da      	ldr	r2, [r3, #12]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	689b      	ldr	r3, [r3, #8]
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d303      	bcc.n	800f5fa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681a      	ldr	r2, [r3, #0]
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	68d9      	ldr	r1, [r3, #12]
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f602:	461a      	mov	r2, r3
 800f604:	6838      	ldr	r0, [r7, #0]
 800f606:	f002 fee3 	bl	80123d0 <memcpy>
	}
}
 800f60a:	bf00      	nop
 800f60c:	3708      	adds	r7, #8
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}

0800f612 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f612:	b580      	push	{r7, lr}
 800f614:	b084      	sub	sp, #16
 800f616:	af00      	add	r7, sp, #0
 800f618:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f61a:	f001 fe83 	bl	8011324 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f624:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f626:	e011      	b.n	800f64c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d012      	beq.n	800f656 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	3324      	adds	r3, #36	; 0x24
 800f634:	4618      	mov	r0, r3
 800f636:	f000 fe5b 	bl	80102f0 <xTaskRemoveFromEventList>
 800f63a:	4603      	mov	r3, r0
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d001      	beq.n	800f644 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f640:	f000 ff32 	bl	80104a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f644:	7bfb      	ldrb	r3, [r7, #15]
 800f646:	3b01      	subs	r3, #1
 800f648:	b2db      	uxtb	r3, r3
 800f64a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f64c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f650:	2b00      	cmp	r3, #0
 800f652:	dce9      	bgt.n	800f628 <prvUnlockQueue+0x16>
 800f654:	e000      	b.n	800f658 <prvUnlockQueue+0x46>
					break;
 800f656:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	22ff      	movs	r2, #255	; 0xff
 800f65c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f660:	f001 fe90 	bl	8011384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f664:	f001 fe5e 	bl	8011324 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f66e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f670:	e011      	b.n	800f696 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	691b      	ldr	r3, [r3, #16]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d012      	beq.n	800f6a0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	3310      	adds	r3, #16
 800f67e:	4618      	mov	r0, r3
 800f680:	f000 fe36 	bl	80102f0 <xTaskRemoveFromEventList>
 800f684:	4603      	mov	r3, r0
 800f686:	2b00      	cmp	r3, #0
 800f688:	d001      	beq.n	800f68e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f68a:	f000 ff0d 	bl	80104a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f68e:	7bbb      	ldrb	r3, [r7, #14]
 800f690:	3b01      	subs	r3, #1
 800f692:	b2db      	uxtb	r3, r3
 800f694:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f696:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	dce9      	bgt.n	800f672 <prvUnlockQueue+0x60>
 800f69e:	e000      	b.n	800f6a2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f6a0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	22ff      	movs	r2, #255	; 0xff
 800f6a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f6aa:	f001 fe6b 	bl	8011384 <vPortExitCritical>
}
 800f6ae:	bf00      	nop
 800f6b0:	3710      	adds	r7, #16
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}

0800f6b6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f6b6:	b580      	push	{r7, lr}
 800f6b8:	b084      	sub	sp, #16
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f6be:	f001 fe31 	bl	8011324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d102      	bne.n	800f6d0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	60fb      	str	r3, [r7, #12]
 800f6ce:	e001      	b.n	800f6d4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f6d4:	f001 fe56 	bl	8011384 <vPortExitCritical>

	return xReturn;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3710      	adds	r7, #16
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}

0800f6e2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f6e2:	b580      	push	{r7, lr}
 800f6e4:	b084      	sub	sp, #16
 800f6e6:	af00      	add	r7, sp, #0
 800f6e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f6ea:	f001 fe1b 	bl	8011324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d102      	bne.n	800f700 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	60fb      	str	r3, [r7, #12]
 800f6fe:	e001      	b.n	800f704 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f700:	2300      	movs	r3, #0
 800f702:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f704:	f001 fe3e 	bl	8011384 <vPortExitCritical>

	return xReturn;
 800f708:	68fb      	ldr	r3, [r7, #12]
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3710      	adds	r7, #16
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
	...

0800f714 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f714:	b480      	push	{r7}
 800f716:	b085      	sub	sp, #20
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
 800f71c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f71e:	2300      	movs	r3, #0
 800f720:	60fb      	str	r3, [r7, #12]
 800f722:	e014      	b.n	800f74e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f724:	4a0f      	ldr	r2, [pc, #60]	; (800f764 <vQueueAddToRegistry+0x50>)
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d10b      	bne.n	800f748 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f730:	490c      	ldr	r1, [pc, #48]	; (800f764 <vQueueAddToRegistry+0x50>)
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	683a      	ldr	r2, [r7, #0]
 800f736:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f73a:	4a0a      	ldr	r2, [pc, #40]	; (800f764 <vQueueAddToRegistry+0x50>)
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	00db      	lsls	r3, r3, #3
 800f740:	4413      	add	r3, r2
 800f742:	687a      	ldr	r2, [r7, #4]
 800f744:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f746:	e006      	b.n	800f756 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	3301      	adds	r3, #1
 800f74c:	60fb      	str	r3, [r7, #12]
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2b07      	cmp	r3, #7
 800f752:	d9e7      	bls.n	800f724 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f754:	bf00      	nop
 800f756:	bf00      	nop
 800f758:	3714      	adds	r7, #20
 800f75a:	46bd      	mov	sp, r7
 800f75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f760:	4770      	bx	lr
 800f762:	bf00      	nop
 800f764:	20001dd4 	.word	0x20001dd4

0800f768 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f768:	b480      	push	{r7}
 800f76a:	b085      	sub	sp, #20
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f770:	2300      	movs	r3, #0
 800f772:	60fb      	str	r3, [r7, #12]
 800f774:	e016      	b.n	800f7a4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f776:	4a10      	ldr	r2, [pc, #64]	; (800f7b8 <vQueueUnregisterQueue+0x50>)
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	00db      	lsls	r3, r3, #3
 800f77c:	4413      	add	r3, r2
 800f77e:	685b      	ldr	r3, [r3, #4]
 800f780:	687a      	ldr	r2, [r7, #4]
 800f782:	429a      	cmp	r2, r3
 800f784:	d10b      	bne.n	800f79e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f786:	4a0c      	ldr	r2, [pc, #48]	; (800f7b8 <vQueueUnregisterQueue+0x50>)
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2100      	movs	r1, #0
 800f78c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f790:	4a09      	ldr	r2, [pc, #36]	; (800f7b8 <vQueueUnregisterQueue+0x50>)
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	00db      	lsls	r3, r3, #3
 800f796:	4413      	add	r3, r2
 800f798:	2200      	movs	r2, #0
 800f79a:	605a      	str	r2, [r3, #4]
				break;
 800f79c:	e006      	b.n	800f7ac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	3301      	adds	r3, #1
 800f7a2:	60fb      	str	r3, [r7, #12]
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2b07      	cmp	r3, #7
 800f7a8:	d9e5      	bls.n	800f776 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f7aa:	bf00      	nop
 800f7ac:	bf00      	nop
 800f7ae:	3714      	adds	r7, #20
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b6:	4770      	bx	lr
 800f7b8:	20001dd4 	.word	0x20001dd4

0800f7bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b086      	sub	sp, #24
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	60f8      	str	r0, [r7, #12]
 800f7c4:	60b9      	str	r1, [r7, #8]
 800f7c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f7cc:	f001 fdaa 	bl	8011324 <vPortEnterCritical>
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f7d6:	b25b      	sxtb	r3, r3
 800f7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7dc:	d103      	bne.n	800f7e6 <vQueueWaitForMessageRestricted+0x2a>
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f7ec:	b25b      	sxtb	r3, r3
 800f7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7f2:	d103      	bne.n	800f7fc <vQueueWaitForMessageRestricted+0x40>
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f7fc:	f001 fdc2 	bl	8011384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f804:	2b00      	cmp	r3, #0
 800f806:	d106      	bne.n	800f816 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	3324      	adds	r3, #36	; 0x24
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	68b9      	ldr	r1, [r7, #8]
 800f810:	4618      	mov	r0, r3
 800f812:	f000 fd41 	bl	8010298 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f816:	6978      	ldr	r0, [r7, #20]
 800f818:	f7ff fefb 	bl	800f612 <prvUnlockQueue>
	}
 800f81c:	bf00      	nop
 800f81e:	3718      	adds	r7, #24
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}

0800f824 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f824:	b580      	push	{r7, lr}
 800f826:	b08e      	sub	sp, #56	; 0x38
 800f828:	af04      	add	r7, sp, #16
 800f82a:	60f8      	str	r0, [r7, #12]
 800f82c:	60b9      	str	r1, [r7, #8]
 800f82e:	607a      	str	r2, [r7, #4]
 800f830:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f834:	2b00      	cmp	r3, #0
 800f836:	d10a      	bne.n	800f84e <xTaskCreateStatic+0x2a>
	__asm volatile
 800f838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f83c:	f383 8811 	msr	BASEPRI, r3
 800f840:	f3bf 8f6f 	isb	sy
 800f844:	f3bf 8f4f 	dsb	sy
 800f848:	623b      	str	r3, [r7, #32]
}
 800f84a:	bf00      	nop
 800f84c:	e7fe      	b.n	800f84c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f850:	2b00      	cmp	r3, #0
 800f852:	d10a      	bne.n	800f86a <xTaskCreateStatic+0x46>
	__asm volatile
 800f854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f858:	f383 8811 	msr	BASEPRI, r3
 800f85c:	f3bf 8f6f 	isb	sy
 800f860:	f3bf 8f4f 	dsb	sy
 800f864:	61fb      	str	r3, [r7, #28]
}
 800f866:	bf00      	nop
 800f868:	e7fe      	b.n	800f868 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f86a:	236c      	movs	r3, #108	; 0x6c
 800f86c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	2b6c      	cmp	r3, #108	; 0x6c
 800f872:	d00a      	beq.n	800f88a <xTaskCreateStatic+0x66>
	__asm volatile
 800f874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f878:	f383 8811 	msr	BASEPRI, r3
 800f87c:	f3bf 8f6f 	isb	sy
 800f880:	f3bf 8f4f 	dsb	sy
 800f884:	61bb      	str	r3, [r7, #24]
}
 800f886:	bf00      	nop
 800f888:	e7fe      	b.n	800f888 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f88a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d01e      	beq.n	800f8d0 <xTaskCreateStatic+0xac>
 800f892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f894:	2b00      	cmp	r3, #0
 800f896:	d01b      	beq.n	800f8d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f89a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a4:	2202      	movs	r2, #2
 800f8a6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	9303      	str	r3, [sp, #12]
 800f8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b0:	9302      	str	r3, [sp, #8]
 800f8b2:	f107 0314 	add.w	r3, r7, #20
 800f8b6:	9301      	str	r3, [sp, #4]
 800f8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ba:	9300      	str	r3, [sp, #0]
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	687a      	ldr	r2, [r7, #4]
 800f8c0:	68b9      	ldr	r1, [r7, #8]
 800f8c2:	68f8      	ldr	r0, [r7, #12]
 800f8c4:	f000 f850 	bl	800f968 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f8c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f8ca:	f000 f8dd 	bl	800fa88 <prvAddNewTaskToReadyList>
 800f8ce:	e001      	b.n	800f8d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f8d4:	697b      	ldr	r3, [r7, #20]
	}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3728      	adds	r7, #40	; 0x28
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}

0800f8de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f8de:	b580      	push	{r7, lr}
 800f8e0:	b08c      	sub	sp, #48	; 0x30
 800f8e2:	af04      	add	r7, sp, #16
 800f8e4:	60f8      	str	r0, [r7, #12]
 800f8e6:	60b9      	str	r1, [r7, #8]
 800f8e8:	603b      	str	r3, [r7, #0]
 800f8ea:	4613      	mov	r3, r2
 800f8ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f8ee:	88fb      	ldrh	r3, [r7, #6]
 800f8f0:	009b      	lsls	r3, r3, #2
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f001 fe38 	bl	8011568 <pvPortMalloc>
 800f8f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d00e      	beq.n	800f91e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f900:	206c      	movs	r0, #108	; 0x6c
 800f902:	f001 fe31 	bl	8011568 <pvPortMalloc>
 800f906:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f908:	69fb      	ldr	r3, [r7, #28]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d003      	beq.n	800f916 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	697a      	ldr	r2, [r7, #20]
 800f912:	631a      	str	r2, [r3, #48]	; 0x30
 800f914:	e005      	b.n	800f922 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f916:	6978      	ldr	r0, [r7, #20]
 800f918:	f001 fef2 	bl	8011700 <vPortFree>
 800f91c:	e001      	b.n	800f922 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f91e:	2300      	movs	r3, #0
 800f920:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f922:	69fb      	ldr	r3, [r7, #28]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d017      	beq.n	800f958 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f928:	69fb      	ldr	r3, [r7, #28]
 800f92a:	2200      	movs	r2, #0
 800f92c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f930:	88fa      	ldrh	r2, [r7, #6]
 800f932:	2300      	movs	r3, #0
 800f934:	9303      	str	r3, [sp, #12]
 800f936:	69fb      	ldr	r3, [r7, #28]
 800f938:	9302      	str	r3, [sp, #8]
 800f93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f93c:	9301      	str	r3, [sp, #4]
 800f93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f940:	9300      	str	r3, [sp, #0]
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	68b9      	ldr	r1, [r7, #8]
 800f946:	68f8      	ldr	r0, [r7, #12]
 800f948:	f000 f80e 	bl	800f968 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f94c:	69f8      	ldr	r0, [r7, #28]
 800f94e:	f000 f89b 	bl	800fa88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f952:	2301      	movs	r3, #1
 800f954:	61bb      	str	r3, [r7, #24]
 800f956:	e002      	b.n	800f95e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f958:	f04f 33ff 	mov.w	r3, #4294967295
 800f95c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f95e:	69bb      	ldr	r3, [r7, #24]
	}
 800f960:	4618      	mov	r0, r3
 800f962:	3720      	adds	r7, #32
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}

0800f968 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b088      	sub	sp, #32
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	60b9      	str	r1, [r7, #8]
 800f972:	607a      	str	r2, [r7, #4]
 800f974:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f978:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	009b      	lsls	r3, r3, #2
 800f97e:	461a      	mov	r2, r3
 800f980:	21a5      	movs	r1, #165	; 0xa5
 800f982:	f002 fd33 	bl	80123ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f990:	3b01      	subs	r3, #1
 800f992:	009b      	lsls	r3, r3, #2
 800f994:	4413      	add	r3, r2
 800f996:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f998:	69bb      	ldr	r3, [r7, #24]
 800f99a:	f023 0307 	bic.w	r3, r3, #7
 800f99e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f9a0:	69bb      	ldr	r3, [r7, #24]
 800f9a2:	f003 0307 	and.w	r3, r3, #7
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d00a      	beq.n	800f9c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ae:	f383 8811 	msr	BASEPRI, r3
 800f9b2:	f3bf 8f6f 	isb	sy
 800f9b6:	f3bf 8f4f 	dsb	sy
 800f9ba:	617b      	str	r3, [r7, #20]
}
 800f9bc:	bf00      	nop
 800f9be:	e7fe      	b.n	800f9be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d01f      	beq.n	800fa06 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	61fb      	str	r3, [r7, #28]
 800f9ca:	e012      	b.n	800f9f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f9cc:	68ba      	ldr	r2, [r7, #8]
 800f9ce:	69fb      	ldr	r3, [r7, #28]
 800f9d0:	4413      	add	r3, r2
 800f9d2:	7819      	ldrb	r1, [r3, #0]
 800f9d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9d6:	69fb      	ldr	r3, [r7, #28]
 800f9d8:	4413      	add	r3, r2
 800f9da:	3334      	adds	r3, #52	; 0x34
 800f9dc:	460a      	mov	r2, r1
 800f9de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f9e0:	68ba      	ldr	r2, [r7, #8]
 800f9e2:	69fb      	ldr	r3, [r7, #28]
 800f9e4:	4413      	add	r3, r2
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d006      	beq.n	800f9fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f9ec:	69fb      	ldr	r3, [r7, #28]
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	61fb      	str	r3, [r7, #28]
 800f9f2:	69fb      	ldr	r3, [r7, #28]
 800f9f4:	2b1d      	cmp	r3, #29
 800f9f6:	d9e9      	bls.n	800f9cc <prvInitialiseNewTask+0x64>
 800f9f8:	e000      	b.n	800f9fc <prvInitialiseNewTask+0x94>
			{
				break;
 800f9fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9fe:	2200      	movs	r2, #0
 800fa00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800fa04:	e003      	b.n	800fa0e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa08:	2200      	movs	r2, #0
 800fa0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fa0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa10:	2b37      	cmp	r3, #55	; 0x37
 800fa12:	d901      	bls.n	800fa18 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fa14:	2337      	movs	r3, #55	; 0x37
 800fa16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fa18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fa1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa22:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800fa24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa26:	2200      	movs	r2, #0
 800fa28:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa2c:	3304      	adds	r3, #4
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7fe fe56 	bl	800e6e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fa34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa36:	3318      	adds	r3, #24
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7fe fe51 	bl	800e6e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fa54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa56:	2200      	movs	r2, #0
 800fa58:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fa62:	683a      	ldr	r2, [r7, #0]
 800fa64:	68f9      	ldr	r1, [r7, #12]
 800fa66:	69b8      	ldr	r0, [r7, #24]
 800fa68:	f001 fb2c 	bl	80110c4 <pxPortInitialiseStack>
 800fa6c:	4602      	mov	r2, r0
 800fa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fa72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d002      	beq.n	800fa7e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fa78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa7e:	bf00      	nop
 800fa80:	3720      	adds	r7, #32
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}
	...

0800fa88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fa90:	f001 fc48 	bl	8011324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fa94:	4b2d      	ldr	r3, [pc, #180]	; (800fb4c <prvAddNewTaskToReadyList+0xc4>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	3301      	adds	r3, #1
 800fa9a:	4a2c      	ldr	r2, [pc, #176]	; (800fb4c <prvAddNewTaskToReadyList+0xc4>)
 800fa9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fa9e:	4b2c      	ldr	r3, [pc, #176]	; (800fb50 <prvAddNewTaskToReadyList+0xc8>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d109      	bne.n	800faba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800faa6:	4a2a      	ldr	r2, [pc, #168]	; (800fb50 <prvAddNewTaskToReadyList+0xc8>)
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800faac:	4b27      	ldr	r3, [pc, #156]	; (800fb4c <prvAddNewTaskToReadyList+0xc4>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d110      	bne.n	800fad6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fab4:	f000 fd1c 	bl	80104f0 <prvInitialiseTaskLists>
 800fab8:	e00d      	b.n	800fad6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800faba:	4b26      	ldr	r3, [pc, #152]	; (800fb54 <prvAddNewTaskToReadyList+0xcc>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d109      	bne.n	800fad6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fac2:	4b23      	ldr	r3, [pc, #140]	; (800fb50 <prvAddNewTaskToReadyList+0xc8>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800facc:	429a      	cmp	r2, r3
 800face:	d802      	bhi.n	800fad6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fad0:	4a1f      	ldr	r2, [pc, #124]	; (800fb50 <prvAddNewTaskToReadyList+0xc8>)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fad6:	4b20      	ldr	r3, [pc, #128]	; (800fb58 <prvAddNewTaskToReadyList+0xd0>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	3301      	adds	r3, #1
 800fadc:	4a1e      	ldr	r2, [pc, #120]	; (800fb58 <prvAddNewTaskToReadyList+0xd0>)
 800fade:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fae0:	4b1d      	ldr	r3, [pc, #116]	; (800fb58 <prvAddNewTaskToReadyList+0xd0>)
 800fae2:	681a      	ldr	r2, [r3, #0]
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faec:	4b1b      	ldr	r3, [pc, #108]	; (800fb5c <prvAddNewTaskToReadyList+0xd4>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d903      	bls.n	800fafc <prvAddNewTaskToReadyList+0x74>
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faf8:	4a18      	ldr	r2, [pc, #96]	; (800fb5c <prvAddNewTaskToReadyList+0xd4>)
 800fafa:	6013      	str	r3, [r2, #0]
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb00:	4613      	mov	r3, r2
 800fb02:	009b      	lsls	r3, r3, #2
 800fb04:	4413      	add	r3, r2
 800fb06:	009b      	lsls	r3, r3, #2
 800fb08:	4a15      	ldr	r2, [pc, #84]	; (800fb60 <prvAddNewTaskToReadyList+0xd8>)
 800fb0a:	441a      	add	r2, r3
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	3304      	adds	r3, #4
 800fb10:	4619      	mov	r1, r3
 800fb12:	4610      	mov	r0, r2
 800fb14:	f7fe fdf1 	bl	800e6fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fb18:	f001 fc34 	bl	8011384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fb1c:	4b0d      	ldr	r3, [pc, #52]	; (800fb54 <prvAddNewTaskToReadyList+0xcc>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d00e      	beq.n	800fb42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fb24:	4b0a      	ldr	r3, [pc, #40]	; (800fb50 <prvAddNewTaskToReadyList+0xc8>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d207      	bcs.n	800fb42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fb32:	4b0c      	ldr	r3, [pc, #48]	; (800fb64 <prvAddNewTaskToReadyList+0xdc>)
 800fb34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb38:	601a      	str	r2, [r3, #0]
 800fb3a:	f3bf 8f4f 	dsb	sy
 800fb3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fb42:	bf00      	nop
 800fb44:	3708      	adds	r7, #8
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	200022e8 	.word	0x200022e8
 800fb50:	20001e14 	.word	0x20001e14
 800fb54:	200022f4 	.word	0x200022f4
 800fb58:	20002304 	.word	0x20002304
 800fb5c:	200022f0 	.word	0x200022f0
 800fb60:	20001e18 	.word	0x20001e18
 800fb64:	e000ed04 	.word	0xe000ed04

0800fb68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fb70:	2300      	movs	r3, #0
 800fb72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d017      	beq.n	800fbaa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fb7a:	4b13      	ldr	r3, [pc, #76]	; (800fbc8 <vTaskDelay+0x60>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d00a      	beq.n	800fb98 <vTaskDelay+0x30>
	__asm volatile
 800fb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb86:	f383 8811 	msr	BASEPRI, r3
 800fb8a:	f3bf 8f6f 	isb	sy
 800fb8e:	f3bf 8f4f 	dsb	sy
 800fb92:	60bb      	str	r3, [r7, #8]
}
 800fb94:	bf00      	nop
 800fb96:	e7fe      	b.n	800fb96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fb98:	f000 f986 	bl	800fea8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fb9c:	2100      	movs	r1, #0
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f000 feee 	bl	8010980 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fba4:	f000 f98e 	bl	800fec4 <xTaskResumeAll>
 800fba8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d107      	bne.n	800fbc0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fbb0:	4b06      	ldr	r3, [pc, #24]	; (800fbcc <vTaskDelay+0x64>)
 800fbb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbb6:	601a      	str	r2, [r3, #0]
 800fbb8:	f3bf 8f4f 	dsb	sy
 800fbbc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fbc0:	bf00      	nop
 800fbc2:	3710      	adds	r7, #16
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	20002310 	.word	0x20002310
 800fbcc:	e000ed04 	.word	0xe000ed04

0800fbd0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800fbd8:	f001 fba4 	bl	8011324 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d102      	bne.n	800fbe8 <vTaskSuspend+0x18>
 800fbe2:	4b30      	ldr	r3, [pc, #192]	; (800fca4 <vTaskSuspend+0xd4>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	e000      	b.n	800fbea <vTaskSuspend+0x1a>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	3304      	adds	r3, #4
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7fe fddf 	bl	800e7b4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d004      	beq.n	800fc08 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	3318      	adds	r3, #24
 800fc02:	4618      	mov	r0, r3
 800fc04:	f7fe fdd6 	bl	800e7b4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	3304      	adds	r3, #4
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	4826      	ldr	r0, [pc, #152]	; (800fca8 <vTaskSuspend+0xd8>)
 800fc10:	f7fe fd73 	bl	800e6fa <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800fc1a:	b2db      	uxtb	r3, r3
 800fc1c:	2b01      	cmp	r3, #1
 800fc1e:	d103      	bne.n	800fc28 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	2200      	movs	r2, #0
 800fc24:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800fc28:	f001 fbac 	bl	8011384 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800fc2c:	4b1f      	ldr	r3, [pc, #124]	; (800fcac <vTaskSuspend+0xdc>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d005      	beq.n	800fc40 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800fc34:	f001 fb76 	bl	8011324 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800fc38:	f000 fcf8 	bl	801062c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800fc3c:	f001 fba2 	bl	8011384 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800fc40:	4b18      	ldr	r3, [pc, #96]	; (800fca4 <vTaskSuspend+0xd4>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	68fa      	ldr	r2, [r7, #12]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d127      	bne.n	800fc9a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800fc4a:	4b18      	ldr	r3, [pc, #96]	; (800fcac <vTaskSuspend+0xdc>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d017      	beq.n	800fc82 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800fc52:	4b17      	ldr	r3, [pc, #92]	; (800fcb0 <vTaskSuspend+0xe0>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d00a      	beq.n	800fc70 <vTaskSuspend+0xa0>
	__asm volatile
 800fc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc5e:	f383 8811 	msr	BASEPRI, r3
 800fc62:	f3bf 8f6f 	isb	sy
 800fc66:	f3bf 8f4f 	dsb	sy
 800fc6a:	60bb      	str	r3, [r7, #8]
}
 800fc6c:	bf00      	nop
 800fc6e:	e7fe      	b.n	800fc6e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800fc70:	4b10      	ldr	r3, [pc, #64]	; (800fcb4 <vTaskSuspend+0xe4>)
 800fc72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc76:	601a      	str	r2, [r3, #0]
 800fc78:	f3bf 8f4f 	dsb	sy
 800fc7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fc80:	e00b      	b.n	800fc9a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800fc82:	4b09      	ldr	r3, [pc, #36]	; (800fca8 <vTaskSuspend+0xd8>)
 800fc84:	681a      	ldr	r2, [r3, #0]
 800fc86:	4b0c      	ldr	r3, [pc, #48]	; (800fcb8 <vTaskSuspend+0xe8>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d103      	bne.n	800fc96 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800fc8e:	4b05      	ldr	r3, [pc, #20]	; (800fca4 <vTaskSuspend+0xd4>)
 800fc90:	2200      	movs	r2, #0
 800fc92:	601a      	str	r2, [r3, #0]
	}
 800fc94:	e001      	b.n	800fc9a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800fc96:	f000 fa7d 	bl	8010194 <vTaskSwitchContext>
	}
 800fc9a:	bf00      	nop
 800fc9c:	3710      	adds	r7, #16
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
 800fca2:	bf00      	nop
 800fca4:	20001e14 	.word	0x20001e14
 800fca8:	200022d4 	.word	0x200022d4
 800fcac:	200022f4 	.word	0x200022f4
 800fcb0:	20002310 	.word	0x20002310
 800fcb4:	e000ed04 	.word	0xe000ed04
 800fcb8:	200022e8 	.word	0x200022e8

0800fcbc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800fcbc:	b480      	push	{r7}
 800fcbe:	b087      	sub	sp, #28
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d10a      	bne.n	800fce8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800fcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd6:	f383 8811 	msr	BASEPRI, r3
 800fcda:	f3bf 8f6f 	isb	sy
 800fcde:	f3bf 8f4f 	dsb	sy
 800fce2:	60fb      	str	r3, [r7, #12]
}
 800fce4:	bf00      	nop
 800fce6:	e7fe      	b.n	800fce6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fce8:	693b      	ldr	r3, [r7, #16]
 800fcea:	695b      	ldr	r3, [r3, #20]
 800fcec:	4a0a      	ldr	r2, [pc, #40]	; (800fd18 <prvTaskIsTaskSuspended+0x5c>)
 800fcee:	4293      	cmp	r3, r2
 800fcf0:	d10a      	bne.n	800fd08 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcf6:	4a09      	ldr	r2, [pc, #36]	; (800fd1c <prvTaskIsTaskSuspended+0x60>)
 800fcf8:	4293      	cmp	r3, r2
 800fcfa:	d005      	beq.n	800fd08 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800fcfc:	693b      	ldr	r3, [r7, #16]
 800fcfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d101      	bne.n	800fd08 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800fd04:	2301      	movs	r3, #1
 800fd06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fd08:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	371c      	adds	r7, #28
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr
 800fd16:	bf00      	nop
 800fd18:	200022d4 	.word	0x200022d4
 800fd1c:	200022a8 	.word	0x200022a8

0800fd20 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b084      	sub	sp, #16
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d10a      	bne.n	800fd48 <vTaskResume+0x28>
	__asm volatile
 800fd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd36:	f383 8811 	msr	BASEPRI, r3
 800fd3a:	f3bf 8f6f 	isb	sy
 800fd3e:	f3bf 8f4f 	dsb	sy
 800fd42:	60bb      	str	r3, [r7, #8]
}
 800fd44:	bf00      	nop
 800fd46:	e7fe      	b.n	800fd46 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800fd48:	4b20      	ldr	r3, [pc, #128]	; (800fdcc <vTaskResume+0xac>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	68fa      	ldr	r2, [r7, #12]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d038      	beq.n	800fdc4 <vTaskResume+0xa4>
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d035      	beq.n	800fdc4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800fd58:	f001 fae4 	bl	8011324 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800fd5c:	68f8      	ldr	r0, [r7, #12]
 800fd5e:	f7ff ffad 	bl	800fcbc <prvTaskIsTaskSuspended>
 800fd62:	4603      	mov	r3, r0
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d02b      	beq.n	800fdc0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	3304      	adds	r3, #4
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f7fe fd21 	bl	800e7b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd76:	4b16      	ldr	r3, [pc, #88]	; (800fdd0 <vTaskResume+0xb0>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d903      	bls.n	800fd86 <vTaskResume+0x66>
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd82:	4a13      	ldr	r2, [pc, #76]	; (800fdd0 <vTaskResume+0xb0>)
 800fd84:	6013      	str	r3, [r2, #0]
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd8a:	4613      	mov	r3, r2
 800fd8c:	009b      	lsls	r3, r3, #2
 800fd8e:	4413      	add	r3, r2
 800fd90:	009b      	lsls	r3, r3, #2
 800fd92:	4a10      	ldr	r2, [pc, #64]	; (800fdd4 <vTaskResume+0xb4>)
 800fd94:	441a      	add	r2, r3
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	3304      	adds	r3, #4
 800fd9a:	4619      	mov	r1, r3
 800fd9c:	4610      	mov	r0, r2
 800fd9e:	f7fe fcac 	bl	800e6fa <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fda6:	4b09      	ldr	r3, [pc, #36]	; (800fdcc <vTaskResume+0xac>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d307      	bcc.n	800fdc0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800fdb0:	4b09      	ldr	r3, [pc, #36]	; (800fdd8 <vTaskResume+0xb8>)
 800fdb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdb6:	601a      	str	r2, [r3, #0]
 800fdb8:	f3bf 8f4f 	dsb	sy
 800fdbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800fdc0:	f001 fae0 	bl	8011384 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fdc4:	bf00      	nop
 800fdc6:	3710      	adds	r7, #16
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	20001e14 	.word	0x20001e14
 800fdd0:	200022f0 	.word	0x200022f0
 800fdd4:	20001e18 	.word	0x20001e18
 800fdd8:	e000ed04 	.word	0xe000ed04

0800fddc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b08a      	sub	sp, #40	; 0x28
 800fde0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fde2:	2300      	movs	r3, #0
 800fde4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fde6:	2300      	movs	r3, #0
 800fde8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fdea:	463a      	mov	r2, r7
 800fdec:	1d39      	adds	r1, r7, #4
 800fdee:	f107 0308 	add.w	r3, r7, #8
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7fe fc20 	bl	800e638 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fdf8:	6839      	ldr	r1, [r7, #0]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	68ba      	ldr	r2, [r7, #8]
 800fdfe:	9202      	str	r2, [sp, #8]
 800fe00:	9301      	str	r3, [sp, #4]
 800fe02:	2300      	movs	r3, #0
 800fe04:	9300      	str	r3, [sp, #0]
 800fe06:	2300      	movs	r3, #0
 800fe08:	460a      	mov	r2, r1
 800fe0a:	4921      	ldr	r1, [pc, #132]	; (800fe90 <vTaskStartScheduler+0xb4>)
 800fe0c:	4821      	ldr	r0, [pc, #132]	; (800fe94 <vTaskStartScheduler+0xb8>)
 800fe0e:	f7ff fd09 	bl	800f824 <xTaskCreateStatic>
 800fe12:	4603      	mov	r3, r0
 800fe14:	4a20      	ldr	r2, [pc, #128]	; (800fe98 <vTaskStartScheduler+0xbc>)
 800fe16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fe18:	4b1f      	ldr	r3, [pc, #124]	; (800fe98 <vTaskStartScheduler+0xbc>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d002      	beq.n	800fe26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fe20:	2301      	movs	r3, #1
 800fe22:	617b      	str	r3, [r7, #20]
 800fe24:	e001      	b.n	800fe2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fe26:	2300      	movs	r3, #0
 800fe28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fe2a:	697b      	ldr	r3, [r7, #20]
 800fe2c:	2b01      	cmp	r3, #1
 800fe2e:	d102      	bne.n	800fe36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fe30:	f000 fdfa 	bl	8010a28 <xTimerCreateTimerTask>
 800fe34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	2b01      	cmp	r3, #1
 800fe3a:	d116      	bne.n	800fe6a <vTaskStartScheduler+0x8e>
	__asm volatile
 800fe3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe40:	f383 8811 	msr	BASEPRI, r3
 800fe44:	f3bf 8f6f 	isb	sy
 800fe48:	f3bf 8f4f 	dsb	sy
 800fe4c:	613b      	str	r3, [r7, #16]
}
 800fe4e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fe50:	4b12      	ldr	r3, [pc, #72]	; (800fe9c <vTaskStartScheduler+0xc0>)
 800fe52:	f04f 32ff 	mov.w	r2, #4294967295
 800fe56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fe58:	4b11      	ldr	r3, [pc, #68]	; (800fea0 <vTaskStartScheduler+0xc4>)
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fe5e:	4b11      	ldr	r3, [pc, #68]	; (800fea4 <vTaskStartScheduler+0xc8>)
 800fe60:	2200      	movs	r2, #0
 800fe62:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fe64:	f001 f9bc 	bl	80111e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fe68:	e00e      	b.n	800fe88 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe70:	d10a      	bne.n	800fe88 <vTaskStartScheduler+0xac>
	__asm volatile
 800fe72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe76:	f383 8811 	msr	BASEPRI, r3
 800fe7a:	f3bf 8f6f 	isb	sy
 800fe7e:	f3bf 8f4f 	dsb	sy
 800fe82:	60fb      	str	r3, [r7, #12]
}
 800fe84:	bf00      	nop
 800fe86:	e7fe      	b.n	800fe86 <vTaskStartScheduler+0xaa>
}
 800fe88:	bf00      	nop
 800fe8a:	3718      	adds	r7, #24
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}
 800fe90:	08012f04 	.word	0x08012f04
 800fe94:	080104c1 	.word	0x080104c1
 800fe98:	2000230c 	.word	0x2000230c
 800fe9c:	20002308 	.word	0x20002308
 800fea0:	200022f4 	.word	0x200022f4
 800fea4:	200022ec 	.word	0x200022ec

0800fea8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fea8:	b480      	push	{r7}
 800feaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800feac:	4b04      	ldr	r3, [pc, #16]	; (800fec0 <vTaskSuspendAll+0x18>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	3301      	adds	r3, #1
 800feb2:	4a03      	ldr	r2, [pc, #12]	; (800fec0 <vTaskSuspendAll+0x18>)
 800feb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800feb6:	bf00      	nop
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr
 800fec0:	20002310 	.word	0x20002310

0800fec4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b084      	sub	sp, #16
 800fec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800feca:	2300      	movs	r3, #0
 800fecc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fece:	2300      	movs	r3, #0
 800fed0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fed2:	4b42      	ldr	r3, [pc, #264]	; (800ffdc <xTaskResumeAll+0x118>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d10a      	bne.n	800fef0 <xTaskResumeAll+0x2c>
	__asm volatile
 800feda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fede:	f383 8811 	msr	BASEPRI, r3
 800fee2:	f3bf 8f6f 	isb	sy
 800fee6:	f3bf 8f4f 	dsb	sy
 800feea:	603b      	str	r3, [r7, #0]
}
 800feec:	bf00      	nop
 800feee:	e7fe      	b.n	800feee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fef0:	f001 fa18 	bl	8011324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fef4:	4b39      	ldr	r3, [pc, #228]	; (800ffdc <xTaskResumeAll+0x118>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	3b01      	subs	r3, #1
 800fefa:	4a38      	ldr	r2, [pc, #224]	; (800ffdc <xTaskResumeAll+0x118>)
 800fefc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fefe:	4b37      	ldr	r3, [pc, #220]	; (800ffdc <xTaskResumeAll+0x118>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d162      	bne.n	800ffcc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ff06:	4b36      	ldr	r3, [pc, #216]	; (800ffe0 <xTaskResumeAll+0x11c>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d05e      	beq.n	800ffcc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ff0e:	e02f      	b.n	800ff70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff10:	4b34      	ldr	r3, [pc, #208]	; (800ffe4 <xTaskResumeAll+0x120>)
 800ff12:	68db      	ldr	r3, [r3, #12]
 800ff14:	68db      	ldr	r3, [r3, #12]
 800ff16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	3318      	adds	r3, #24
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f7fe fc49 	bl	800e7b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	3304      	adds	r3, #4
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7fe fc44 	bl	800e7b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff30:	4b2d      	ldr	r3, [pc, #180]	; (800ffe8 <xTaskResumeAll+0x124>)
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	429a      	cmp	r2, r3
 800ff36:	d903      	bls.n	800ff40 <xTaskResumeAll+0x7c>
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff3c:	4a2a      	ldr	r2, [pc, #168]	; (800ffe8 <xTaskResumeAll+0x124>)
 800ff3e:	6013      	str	r3, [r2, #0]
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff44:	4613      	mov	r3, r2
 800ff46:	009b      	lsls	r3, r3, #2
 800ff48:	4413      	add	r3, r2
 800ff4a:	009b      	lsls	r3, r3, #2
 800ff4c:	4a27      	ldr	r2, [pc, #156]	; (800ffec <xTaskResumeAll+0x128>)
 800ff4e:	441a      	add	r2, r3
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	3304      	adds	r3, #4
 800ff54:	4619      	mov	r1, r3
 800ff56:	4610      	mov	r0, r2
 800ff58:	f7fe fbcf 	bl	800e6fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff60:	4b23      	ldr	r3, [pc, #140]	; (800fff0 <xTaskResumeAll+0x12c>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d302      	bcc.n	800ff70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ff6a:	4b22      	ldr	r3, [pc, #136]	; (800fff4 <xTaskResumeAll+0x130>)
 800ff6c:	2201      	movs	r2, #1
 800ff6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ff70:	4b1c      	ldr	r3, [pc, #112]	; (800ffe4 <xTaskResumeAll+0x120>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d1cb      	bne.n	800ff10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d001      	beq.n	800ff82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ff7e:	f000 fb55 	bl	801062c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ff82:	4b1d      	ldr	r3, [pc, #116]	; (800fff8 <xTaskResumeAll+0x134>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d010      	beq.n	800ffb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ff8e:	f000 f847 	bl	8010020 <xTaskIncrementTick>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d002      	beq.n	800ff9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ff98:	4b16      	ldr	r3, [pc, #88]	; (800fff4 <xTaskResumeAll+0x130>)
 800ff9a:	2201      	movs	r2, #1
 800ff9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	3b01      	subs	r3, #1
 800ffa2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d1f1      	bne.n	800ff8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ffaa:	4b13      	ldr	r3, [pc, #76]	; (800fff8 <xTaskResumeAll+0x134>)
 800ffac:	2200      	movs	r2, #0
 800ffae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ffb0:	4b10      	ldr	r3, [pc, #64]	; (800fff4 <xTaskResumeAll+0x130>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d009      	beq.n	800ffcc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ffb8:	2301      	movs	r3, #1
 800ffba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ffbc:	4b0f      	ldr	r3, [pc, #60]	; (800fffc <xTaskResumeAll+0x138>)
 800ffbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffc2:	601a      	str	r2, [r3, #0]
 800ffc4:	f3bf 8f4f 	dsb	sy
 800ffc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ffcc:	f001 f9da 	bl	8011384 <vPortExitCritical>

	return xAlreadyYielded;
 800ffd0:	68bb      	ldr	r3, [r7, #8]
}
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	3710      	adds	r7, #16
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}
 800ffda:	bf00      	nop
 800ffdc:	20002310 	.word	0x20002310
 800ffe0:	200022e8 	.word	0x200022e8
 800ffe4:	200022a8 	.word	0x200022a8
 800ffe8:	200022f0 	.word	0x200022f0
 800ffec:	20001e18 	.word	0x20001e18
 800fff0:	20001e14 	.word	0x20001e14
 800fff4:	200022fc 	.word	0x200022fc
 800fff8:	200022f8 	.word	0x200022f8
 800fffc:	e000ed04 	.word	0xe000ed04

08010000 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010000:	b480      	push	{r7}
 8010002:	b083      	sub	sp, #12
 8010004:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010006:	4b05      	ldr	r3, [pc, #20]	; (801001c <xTaskGetTickCount+0x1c>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801000c:	687b      	ldr	r3, [r7, #4]
}
 801000e:	4618      	mov	r0, r3
 8010010:	370c      	adds	r7, #12
 8010012:	46bd      	mov	sp, r7
 8010014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010018:	4770      	bx	lr
 801001a:	bf00      	nop
 801001c:	200022ec 	.word	0x200022ec

08010020 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b086      	sub	sp, #24
 8010024:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010026:	2300      	movs	r3, #0
 8010028:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801002a:	4b4f      	ldr	r3, [pc, #316]	; (8010168 <xTaskIncrementTick+0x148>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	2b00      	cmp	r3, #0
 8010030:	f040 808f 	bne.w	8010152 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010034:	4b4d      	ldr	r3, [pc, #308]	; (801016c <xTaskIncrementTick+0x14c>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	3301      	adds	r3, #1
 801003a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801003c:	4a4b      	ldr	r2, [pc, #300]	; (801016c <xTaskIncrementTick+0x14c>)
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d120      	bne.n	801008a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010048:	4b49      	ldr	r3, [pc, #292]	; (8010170 <xTaskIncrementTick+0x150>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d00a      	beq.n	8010068 <xTaskIncrementTick+0x48>
	__asm volatile
 8010052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010056:	f383 8811 	msr	BASEPRI, r3
 801005a:	f3bf 8f6f 	isb	sy
 801005e:	f3bf 8f4f 	dsb	sy
 8010062:	603b      	str	r3, [r7, #0]
}
 8010064:	bf00      	nop
 8010066:	e7fe      	b.n	8010066 <xTaskIncrementTick+0x46>
 8010068:	4b41      	ldr	r3, [pc, #260]	; (8010170 <xTaskIncrementTick+0x150>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	60fb      	str	r3, [r7, #12]
 801006e:	4b41      	ldr	r3, [pc, #260]	; (8010174 <xTaskIncrementTick+0x154>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	4a3f      	ldr	r2, [pc, #252]	; (8010170 <xTaskIncrementTick+0x150>)
 8010074:	6013      	str	r3, [r2, #0]
 8010076:	4a3f      	ldr	r2, [pc, #252]	; (8010174 <xTaskIncrementTick+0x154>)
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	6013      	str	r3, [r2, #0]
 801007c:	4b3e      	ldr	r3, [pc, #248]	; (8010178 <xTaskIncrementTick+0x158>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	3301      	adds	r3, #1
 8010082:	4a3d      	ldr	r2, [pc, #244]	; (8010178 <xTaskIncrementTick+0x158>)
 8010084:	6013      	str	r3, [r2, #0]
 8010086:	f000 fad1 	bl	801062c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801008a:	4b3c      	ldr	r3, [pc, #240]	; (801017c <xTaskIncrementTick+0x15c>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	693a      	ldr	r2, [r7, #16]
 8010090:	429a      	cmp	r2, r3
 8010092:	d349      	bcc.n	8010128 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010094:	4b36      	ldr	r3, [pc, #216]	; (8010170 <xTaskIncrementTick+0x150>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d104      	bne.n	80100a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801009e:	4b37      	ldr	r3, [pc, #220]	; (801017c <xTaskIncrementTick+0x15c>)
 80100a0:	f04f 32ff 	mov.w	r2, #4294967295
 80100a4:	601a      	str	r2, [r3, #0]
					break;
 80100a6:	e03f      	b.n	8010128 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100a8:	4b31      	ldr	r3, [pc, #196]	; (8010170 <xTaskIncrementTick+0x150>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	68db      	ldr	r3, [r3, #12]
 80100ae:	68db      	ldr	r3, [r3, #12]
 80100b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	685b      	ldr	r3, [r3, #4]
 80100b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80100b8:	693a      	ldr	r2, [r7, #16]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d203      	bcs.n	80100c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80100c0:	4a2e      	ldr	r2, [pc, #184]	; (801017c <xTaskIncrementTick+0x15c>)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80100c6:	e02f      	b.n	8010128 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	3304      	adds	r3, #4
 80100cc:	4618      	mov	r0, r3
 80100ce:	f7fe fb71 	bl	800e7b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d004      	beq.n	80100e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	3318      	adds	r3, #24
 80100de:	4618      	mov	r0, r3
 80100e0:	f7fe fb68 	bl	800e7b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100e8:	4b25      	ldr	r3, [pc, #148]	; (8010180 <xTaskIncrementTick+0x160>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d903      	bls.n	80100f8 <xTaskIncrementTick+0xd8>
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100f4:	4a22      	ldr	r2, [pc, #136]	; (8010180 <xTaskIncrementTick+0x160>)
 80100f6:	6013      	str	r3, [r2, #0]
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100fc:	4613      	mov	r3, r2
 80100fe:	009b      	lsls	r3, r3, #2
 8010100:	4413      	add	r3, r2
 8010102:	009b      	lsls	r3, r3, #2
 8010104:	4a1f      	ldr	r2, [pc, #124]	; (8010184 <xTaskIncrementTick+0x164>)
 8010106:	441a      	add	r2, r3
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	3304      	adds	r3, #4
 801010c:	4619      	mov	r1, r3
 801010e:	4610      	mov	r0, r2
 8010110:	f7fe faf3 	bl	800e6fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010118:	4b1b      	ldr	r3, [pc, #108]	; (8010188 <xTaskIncrementTick+0x168>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801011e:	429a      	cmp	r2, r3
 8010120:	d3b8      	bcc.n	8010094 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010122:	2301      	movs	r3, #1
 8010124:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010126:	e7b5      	b.n	8010094 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010128:	4b17      	ldr	r3, [pc, #92]	; (8010188 <xTaskIncrementTick+0x168>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801012e:	4915      	ldr	r1, [pc, #84]	; (8010184 <xTaskIncrementTick+0x164>)
 8010130:	4613      	mov	r3, r2
 8010132:	009b      	lsls	r3, r3, #2
 8010134:	4413      	add	r3, r2
 8010136:	009b      	lsls	r3, r3, #2
 8010138:	440b      	add	r3, r1
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	2b01      	cmp	r3, #1
 801013e:	d901      	bls.n	8010144 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010140:	2301      	movs	r3, #1
 8010142:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010144:	4b11      	ldr	r3, [pc, #68]	; (801018c <xTaskIncrementTick+0x16c>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d007      	beq.n	801015c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801014c:	2301      	movs	r3, #1
 801014e:	617b      	str	r3, [r7, #20]
 8010150:	e004      	b.n	801015c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010152:	4b0f      	ldr	r3, [pc, #60]	; (8010190 <xTaskIncrementTick+0x170>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	3301      	adds	r3, #1
 8010158:	4a0d      	ldr	r2, [pc, #52]	; (8010190 <xTaskIncrementTick+0x170>)
 801015a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801015c:	697b      	ldr	r3, [r7, #20]
}
 801015e:	4618      	mov	r0, r3
 8010160:	3718      	adds	r7, #24
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}
 8010166:	bf00      	nop
 8010168:	20002310 	.word	0x20002310
 801016c:	200022ec 	.word	0x200022ec
 8010170:	200022a0 	.word	0x200022a0
 8010174:	200022a4 	.word	0x200022a4
 8010178:	20002300 	.word	0x20002300
 801017c:	20002308 	.word	0x20002308
 8010180:	200022f0 	.word	0x200022f0
 8010184:	20001e18 	.word	0x20001e18
 8010188:	20001e14 	.word	0x20001e14
 801018c:	200022fc 	.word	0x200022fc
 8010190:	200022f8 	.word	0x200022f8

08010194 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010194:	b480      	push	{r7}
 8010196:	b085      	sub	sp, #20
 8010198:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801019a:	4b28      	ldr	r3, [pc, #160]	; (801023c <vTaskSwitchContext+0xa8>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d003      	beq.n	80101aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80101a2:	4b27      	ldr	r3, [pc, #156]	; (8010240 <vTaskSwitchContext+0xac>)
 80101a4:	2201      	movs	r2, #1
 80101a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80101a8:	e041      	b.n	801022e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80101aa:	4b25      	ldr	r3, [pc, #148]	; (8010240 <vTaskSwitchContext+0xac>)
 80101ac:	2200      	movs	r2, #0
 80101ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101b0:	4b24      	ldr	r3, [pc, #144]	; (8010244 <vTaskSwitchContext+0xb0>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	60fb      	str	r3, [r7, #12]
 80101b6:	e010      	b.n	80101da <vTaskSwitchContext+0x46>
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d10a      	bne.n	80101d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80101be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c2:	f383 8811 	msr	BASEPRI, r3
 80101c6:	f3bf 8f6f 	isb	sy
 80101ca:	f3bf 8f4f 	dsb	sy
 80101ce:	607b      	str	r3, [r7, #4]
}
 80101d0:	bf00      	nop
 80101d2:	e7fe      	b.n	80101d2 <vTaskSwitchContext+0x3e>
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	3b01      	subs	r3, #1
 80101d8:	60fb      	str	r3, [r7, #12]
 80101da:	491b      	ldr	r1, [pc, #108]	; (8010248 <vTaskSwitchContext+0xb4>)
 80101dc:	68fa      	ldr	r2, [r7, #12]
 80101de:	4613      	mov	r3, r2
 80101e0:	009b      	lsls	r3, r3, #2
 80101e2:	4413      	add	r3, r2
 80101e4:	009b      	lsls	r3, r3, #2
 80101e6:	440b      	add	r3, r1
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d0e4      	beq.n	80101b8 <vTaskSwitchContext+0x24>
 80101ee:	68fa      	ldr	r2, [r7, #12]
 80101f0:	4613      	mov	r3, r2
 80101f2:	009b      	lsls	r3, r3, #2
 80101f4:	4413      	add	r3, r2
 80101f6:	009b      	lsls	r3, r3, #2
 80101f8:	4a13      	ldr	r2, [pc, #76]	; (8010248 <vTaskSwitchContext+0xb4>)
 80101fa:	4413      	add	r3, r2
 80101fc:	60bb      	str	r3, [r7, #8]
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	685a      	ldr	r2, [r3, #4]
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	605a      	str	r2, [r3, #4]
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	685a      	ldr	r2, [r3, #4]
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	3308      	adds	r3, #8
 8010210:	429a      	cmp	r2, r3
 8010212:	d104      	bne.n	801021e <vTaskSwitchContext+0x8a>
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	685b      	ldr	r3, [r3, #4]
 8010218:	685a      	ldr	r2, [r3, #4]
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	605a      	str	r2, [r3, #4]
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	685b      	ldr	r3, [r3, #4]
 8010222:	68db      	ldr	r3, [r3, #12]
 8010224:	4a09      	ldr	r2, [pc, #36]	; (801024c <vTaskSwitchContext+0xb8>)
 8010226:	6013      	str	r3, [r2, #0]
 8010228:	4a06      	ldr	r2, [pc, #24]	; (8010244 <vTaskSwitchContext+0xb0>)
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	6013      	str	r3, [r2, #0]
}
 801022e:	bf00      	nop
 8010230:	3714      	adds	r7, #20
 8010232:	46bd      	mov	sp, r7
 8010234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010238:	4770      	bx	lr
 801023a:	bf00      	nop
 801023c:	20002310 	.word	0x20002310
 8010240:	200022fc 	.word	0x200022fc
 8010244:	200022f0 	.word	0x200022f0
 8010248:	20001e18 	.word	0x20001e18
 801024c:	20001e14 	.word	0x20001e14

08010250 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b084      	sub	sp, #16
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d10a      	bne.n	8010276 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010264:	f383 8811 	msr	BASEPRI, r3
 8010268:	f3bf 8f6f 	isb	sy
 801026c:	f3bf 8f4f 	dsb	sy
 8010270:	60fb      	str	r3, [r7, #12]
}
 8010272:	bf00      	nop
 8010274:	e7fe      	b.n	8010274 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010276:	4b07      	ldr	r3, [pc, #28]	; (8010294 <vTaskPlaceOnEventList+0x44>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	3318      	adds	r3, #24
 801027c:	4619      	mov	r1, r3
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f7fe fa5f 	bl	800e742 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010284:	2101      	movs	r1, #1
 8010286:	6838      	ldr	r0, [r7, #0]
 8010288:	f000 fb7a 	bl	8010980 <prvAddCurrentTaskToDelayedList>
}
 801028c:	bf00      	nop
 801028e:	3710      	adds	r7, #16
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}
 8010294:	20001e14 	.word	0x20001e14

08010298 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010298:	b580      	push	{r7, lr}
 801029a:	b086      	sub	sp, #24
 801029c:	af00      	add	r7, sp, #0
 801029e:	60f8      	str	r0, [r7, #12]
 80102a0:	60b9      	str	r1, [r7, #8]
 80102a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d10a      	bne.n	80102c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80102aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102ae:	f383 8811 	msr	BASEPRI, r3
 80102b2:	f3bf 8f6f 	isb	sy
 80102b6:	f3bf 8f4f 	dsb	sy
 80102ba:	617b      	str	r3, [r7, #20]
}
 80102bc:	bf00      	nop
 80102be:	e7fe      	b.n	80102be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80102c0:	4b0a      	ldr	r3, [pc, #40]	; (80102ec <vTaskPlaceOnEventListRestricted+0x54>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	3318      	adds	r3, #24
 80102c6:	4619      	mov	r1, r3
 80102c8:	68f8      	ldr	r0, [r7, #12]
 80102ca:	f7fe fa16 	bl	800e6fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d002      	beq.n	80102da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80102d4:	f04f 33ff 	mov.w	r3, #4294967295
 80102d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80102da:	6879      	ldr	r1, [r7, #4]
 80102dc:	68b8      	ldr	r0, [r7, #8]
 80102de:	f000 fb4f 	bl	8010980 <prvAddCurrentTaskToDelayedList>
	}
 80102e2:	bf00      	nop
 80102e4:	3718      	adds	r7, #24
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
 80102ea:	bf00      	nop
 80102ec:	20001e14 	.word	0x20001e14

080102f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b086      	sub	sp, #24
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	68db      	ldr	r3, [r3, #12]
 80102fc:	68db      	ldr	r3, [r3, #12]
 80102fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d10a      	bne.n	801031c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010306:	f04f 0350 	mov.w	r3, #80	; 0x50
 801030a:	f383 8811 	msr	BASEPRI, r3
 801030e:	f3bf 8f6f 	isb	sy
 8010312:	f3bf 8f4f 	dsb	sy
 8010316:	60fb      	str	r3, [r7, #12]
}
 8010318:	bf00      	nop
 801031a:	e7fe      	b.n	801031a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801031c:	693b      	ldr	r3, [r7, #16]
 801031e:	3318      	adds	r3, #24
 8010320:	4618      	mov	r0, r3
 8010322:	f7fe fa47 	bl	800e7b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010326:	4b1e      	ldr	r3, [pc, #120]	; (80103a0 <xTaskRemoveFromEventList+0xb0>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d11d      	bne.n	801036a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	3304      	adds	r3, #4
 8010332:	4618      	mov	r0, r3
 8010334:	f7fe fa3e 	bl	800e7b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801033c:	4b19      	ldr	r3, [pc, #100]	; (80103a4 <xTaskRemoveFromEventList+0xb4>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	429a      	cmp	r2, r3
 8010342:	d903      	bls.n	801034c <xTaskRemoveFromEventList+0x5c>
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010348:	4a16      	ldr	r2, [pc, #88]	; (80103a4 <xTaskRemoveFromEventList+0xb4>)
 801034a:	6013      	str	r3, [r2, #0]
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010350:	4613      	mov	r3, r2
 8010352:	009b      	lsls	r3, r3, #2
 8010354:	4413      	add	r3, r2
 8010356:	009b      	lsls	r3, r3, #2
 8010358:	4a13      	ldr	r2, [pc, #76]	; (80103a8 <xTaskRemoveFromEventList+0xb8>)
 801035a:	441a      	add	r2, r3
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	3304      	adds	r3, #4
 8010360:	4619      	mov	r1, r3
 8010362:	4610      	mov	r0, r2
 8010364:	f7fe f9c9 	bl	800e6fa <vListInsertEnd>
 8010368:	e005      	b.n	8010376 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	3318      	adds	r3, #24
 801036e:	4619      	mov	r1, r3
 8010370:	480e      	ldr	r0, [pc, #56]	; (80103ac <xTaskRemoveFromEventList+0xbc>)
 8010372:	f7fe f9c2 	bl	800e6fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801037a:	4b0d      	ldr	r3, [pc, #52]	; (80103b0 <xTaskRemoveFromEventList+0xc0>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010380:	429a      	cmp	r2, r3
 8010382:	d905      	bls.n	8010390 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010384:	2301      	movs	r3, #1
 8010386:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010388:	4b0a      	ldr	r3, [pc, #40]	; (80103b4 <xTaskRemoveFromEventList+0xc4>)
 801038a:	2201      	movs	r2, #1
 801038c:	601a      	str	r2, [r3, #0]
 801038e:	e001      	b.n	8010394 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010390:	2300      	movs	r3, #0
 8010392:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010394:	697b      	ldr	r3, [r7, #20]
}
 8010396:	4618      	mov	r0, r3
 8010398:	3718      	adds	r7, #24
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}
 801039e:	bf00      	nop
 80103a0:	20002310 	.word	0x20002310
 80103a4:	200022f0 	.word	0x200022f0
 80103a8:	20001e18 	.word	0x20001e18
 80103ac:	200022a8 	.word	0x200022a8
 80103b0:	20001e14 	.word	0x20001e14
 80103b4:	200022fc 	.word	0x200022fc

080103b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80103b8:	b480      	push	{r7}
 80103ba:	b083      	sub	sp, #12
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80103c0:	4b06      	ldr	r3, [pc, #24]	; (80103dc <vTaskInternalSetTimeOutState+0x24>)
 80103c2:	681a      	ldr	r2, [r3, #0]
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80103c8:	4b05      	ldr	r3, [pc, #20]	; (80103e0 <vTaskInternalSetTimeOutState+0x28>)
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	605a      	str	r2, [r3, #4]
}
 80103d0:	bf00      	nop
 80103d2:	370c      	adds	r7, #12
 80103d4:	46bd      	mov	sp, r7
 80103d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103da:	4770      	bx	lr
 80103dc:	20002300 	.word	0x20002300
 80103e0:	200022ec 	.word	0x200022ec

080103e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b088      	sub	sp, #32
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d10a      	bne.n	801040a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80103f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f8:	f383 8811 	msr	BASEPRI, r3
 80103fc:	f3bf 8f6f 	isb	sy
 8010400:	f3bf 8f4f 	dsb	sy
 8010404:	613b      	str	r3, [r7, #16]
}
 8010406:	bf00      	nop
 8010408:	e7fe      	b.n	8010408 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d10a      	bne.n	8010426 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010414:	f383 8811 	msr	BASEPRI, r3
 8010418:	f3bf 8f6f 	isb	sy
 801041c:	f3bf 8f4f 	dsb	sy
 8010420:	60fb      	str	r3, [r7, #12]
}
 8010422:	bf00      	nop
 8010424:	e7fe      	b.n	8010424 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010426:	f000 ff7d 	bl	8011324 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801042a:	4b1d      	ldr	r3, [pc, #116]	; (80104a0 <xTaskCheckForTimeOut+0xbc>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	685b      	ldr	r3, [r3, #4]
 8010434:	69ba      	ldr	r2, [r7, #24]
 8010436:	1ad3      	subs	r3, r2, r3
 8010438:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010442:	d102      	bne.n	801044a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010444:	2300      	movs	r3, #0
 8010446:	61fb      	str	r3, [r7, #28]
 8010448:	e023      	b.n	8010492 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681a      	ldr	r2, [r3, #0]
 801044e:	4b15      	ldr	r3, [pc, #84]	; (80104a4 <xTaskCheckForTimeOut+0xc0>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	429a      	cmp	r2, r3
 8010454:	d007      	beq.n	8010466 <xTaskCheckForTimeOut+0x82>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	69ba      	ldr	r2, [r7, #24]
 801045c:	429a      	cmp	r2, r3
 801045e:	d302      	bcc.n	8010466 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010460:	2301      	movs	r3, #1
 8010462:	61fb      	str	r3, [r7, #28]
 8010464:	e015      	b.n	8010492 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	697a      	ldr	r2, [r7, #20]
 801046c:	429a      	cmp	r2, r3
 801046e:	d20b      	bcs.n	8010488 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	681a      	ldr	r2, [r3, #0]
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	1ad2      	subs	r2, r2, r3
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f7ff ff9b 	bl	80103b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010482:	2300      	movs	r3, #0
 8010484:	61fb      	str	r3, [r7, #28]
 8010486:	e004      	b.n	8010492 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	2200      	movs	r2, #0
 801048c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801048e:	2301      	movs	r3, #1
 8010490:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010492:	f000 ff77 	bl	8011384 <vPortExitCritical>

	return xReturn;
 8010496:	69fb      	ldr	r3, [r7, #28]
}
 8010498:	4618      	mov	r0, r3
 801049a:	3720      	adds	r7, #32
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}
 80104a0:	200022ec 	.word	0x200022ec
 80104a4:	20002300 	.word	0x20002300

080104a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80104a8:	b480      	push	{r7}
 80104aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80104ac:	4b03      	ldr	r3, [pc, #12]	; (80104bc <vTaskMissedYield+0x14>)
 80104ae:	2201      	movs	r2, #1
 80104b0:	601a      	str	r2, [r3, #0]
}
 80104b2:	bf00      	nop
 80104b4:	46bd      	mov	sp, r7
 80104b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ba:	4770      	bx	lr
 80104bc:	200022fc 	.word	0x200022fc

080104c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80104c8:	f000 f852 	bl	8010570 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80104cc:	4b06      	ldr	r3, [pc, #24]	; (80104e8 <prvIdleTask+0x28>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	2b01      	cmp	r3, #1
 80104d2:	d9f9      	bls.n	80104c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80104d4:	4b05      	ldr	r3, [pc, #20]	; (80104ec <prvIdleTask+0x2c>)
 80104d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104da:	601a      	str	r2, [r3, #0]
 80104dc:	f3bf 8f4f 	dsb	sy
 80104e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80104e4:	e7f0      	b.n	80104c8 <prvIdleTask+0x8>
 80104e6:	bf00      	nop
 80104e8:	20001e18 	.word	0x20001e18
 80104ec:	e000ed04 	.word	0xe000ed04

080104f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b082      	sub	sp, #8
 80104f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80104f6:	2300      	movs	r3, #0
 80104f8:	607b      	str	r3, [r7, #4]
 80104fa:	e00c      	b.n	8010516 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80104fc:	687a      	ldr	r2, [r7, #4]
 80104fe:	4613      	mov	r3, r2
 8010500:	009b      	lsls	r3, r3, #2
 8010502:	4413      	add	r3, r2
 8010504:	009b      	lsls	r3, r3, #2
 8010506:	4a12      	ldr	r2, [pc, #72]	; (8010550 <prvInitialiseTaskLists+0x60>)
 8010508:	4413      	add	r3, r2
 801050a:	4618      	mov	r0, r3
 801050c:	f7fe f8c8 	bl	800e6a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	3301      	adds	r3, #1
 8010514:	607b      	str	r3, [r7, #4]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2b37      	cmp	r3, #55	; 0x37
 801051a:	d9ef      	bls.n	80104fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801051c:	480d      	ldr	r0, [pc, #52]	; (8010554 <prvInitialiseTaskLists+0x64>)
 801051e:	f7fe f8bf 	bl	800e6a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010522:	480d      	ldr	r0, [pc, #52]	; (8010558 <prvInitialiseTaskLists+0x68>)
 8010524:	f7fe f8bc 	bl	800e6a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010528:	480c      	ldr	r0, [pc, #48]	; (801055c <prvInitialiseTaskLists+0x6c>)
 801052a:	f7fe f8b9 	bl	800e6a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801052e:	480c      	ldr	r0, [pc, #48]	; (8010560 <prvInitialiseTaskLists+0x70>)
 8010530:	f7fe f8b6 	bl	800e6a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010534:	480b      	ldr	r0, [pc, #44]	; (8010564 <prvInitialiseTaskLists+0x74>)
 8010536:	f7fe f8b3 	bl	800e6a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801053a:	4b0b      	ldr	r3, [pc, #44]	; (8010568 <prvInitialiseTaskLists+0x78>)
 801053c:	4a05      	ldr	r2, [pc, #20]	; (8010554 <prvInitialiseTaskLists+0x64>)
 801053e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010540:	4b0a      	ldr	r3, [pc, #40]	; (801056c <prvInitialiseTaskLists+0x7c>)
 8010542:	4a05      	ldr	r2, [pc, #20]	; (8010558 <prvInitialiseTaskLists+0x68>)
 8010544:	601a      	str	r2, [r3, #0]
}
 8010546:	bf00      	nop
 8010548:	3708      	adds	r7, #8
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}
 801054e:	bf00      	nop
 8010550:	20001e18 	.word	0x20001e18
 8010554:	20002278 	.word	0x20002278
 8010558:	2000228c 	.word	0x2000228c
 801055c:	200022a8 	.word	0x200022a8
 8010560:	200022bc 	.word	0x200022bc
 8010564:	200022d4 	.word	0x200022d4
 8010568:	200022a0 	.word	0x200022a0
 801056c:	200022a4 	.word	0x200022a4

08010570 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b082      	sub	sp, #8
 8010574:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010576:	e019      	b.n	80105ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010578:	f000 fed4 	bl	8011324 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801057c:	4b10      	ldr	r3, [pc, #64]	; (80105c0 <prvCheckTasksWaitingTermination+0x50>)
 801057e:	68db      	ldr	r3, [r3, #12]
 8010580:	68db      	ldr	r3, [r3, #12]
 8010582:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	3304      	adds	r3, #4
 8010588:	4618      	mov	r0, r3
 801058a:	f7fe f913 	bl	800e7b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801058e:	4b0d      	ldr	r3, [pc, #52]	; (80105c4 <prvCheckTasksWaitingTermination+0x54>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	3b01      	subs	r3, #1
 8010594:	4a0b      	ldr	r2, [pc, #44]	; (80105c4 <prvCheckTasksWaitingTermination+0x54>)
 8010596:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010598:	4b0b      	ldr	r3, [pc, #44]	; (80105c8 <prvCheckTasksWaitingTermination+0x58>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	3b01      	subs	r3, #1
 801059e:	4a0a      	ldr	r2, [pc, #40]	; (80105c8 <prvCheckTasksWaitingTermination+0x58>)
 80105a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80105a2:	f000 feef 	bl	8011384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f000 f810 	bl	80105cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80105ac:	4b06      	ldr	r3, [pc, #24]	; (80105c8 <prvCheckTasksWaitingTermination+0x58>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d1e1      	bne.n	8010578 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80105b4:	bf00      	nop
 80105b6:	bf00      	nop
 80105b8:	3708      	adds	r7, #8
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
 80105be:	bf00      	nop
 80105c0:	200022bc 	.word	0x200022bc
 80105c4:	200022e8 	.word	0x200022e8
 80105c8:	200022d0 	.word	0x200022d0

080105cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d108      	bne.n	80105f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105e2:	4618      	mov	r0, r3
 80105e4:	f001 f88c 	bl	8011700 <vPortFree>
				vPortFree( pxTCB );
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f001 f889 	bl	8011700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80105ee:	e018      	b.n	8010622 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80105f6:	2b01      	cmp	r3, #1
 80105f8:	d103      	bne.n	8010602 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f001 f880 	bl	8011700 <vPortFree>
	}
 8010600:	e00f      	b.n	8010622 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8010608:	2b02      	cmp	r3, #2
 801060a:	d00a      	beq.n	8010622 <prvDeleteTCB+0x56>
	__asm volatile
 801060c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010610:	f383 8811 	msr	BASEPRI, r3
 8010614:	f3bf 8f6f 	isb	sy
 8010618:	f3bf 8f4f 	dsb	sy
 801061c:	60fb      	str	r3, [r7, #12]
}
 801061e:	bf00      	nop
 8010620:	e7fe      	b.n	8010620 <prvDeleteTCB+0x54>
	}
 8010622:	bf00      	nop
 8010624:	3710      	adds	r7, #16
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
	...

0801062c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801062c:	b480      	push	{r7}
 801062e:	b083      	sub	sp, #12
 8010630:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010632:	4b0c      	ldr	r3, [pc, #48]	; (8010664 <prvResetNextTaskUnblockTime+0x38>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d104      	bne.n	8010646 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801063c:	4b0a      	ldr	r3, [pc, #40]	; (8010668 <prvResetNextTaskUnblockTime+0x3c>)
 801063e:	f04f 32ff 	mov.w	r2, #4294967295
 8010642:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010644:	e008      	b.n	8010658 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010646:	4b07      	ldr	r3, [pc, #28]	; (8010664 <prvResetNextTaskUnblockTime+0x38>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	68db      	ldr	r3, [r3, #12]
 801064c:	68db      	ldr	r3, [r3, #12]
 801064e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	685b      	ldr	r3, [r3, #4]
 8010654:	4a04      	ldr	r2, [pc, #16]	; (8010668 <prvResetNextTaskUnblockTime+0x3c>)
 8010656:	6013      	str	r3, [r2, #0]
}
 8010658:	bf00      	nop
 801065a:	370c      	adds	r7, #12
 801065c:	46bd      	mov	sp, r7
 801065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010662:	4770      	bx	lr
 8010664:	200022a0 	.word	0x200022a0
 8010668:	20002308 	.word	0x20002308

0801066c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801066c:	b480      	push	{r7}
 801066e:	b083      	sub	sp, #12
 8010670:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010672:	4b0b      	ldr	r3, [pc, #44]	; (80106a0 <xTaskGetSchedulerState+0x34>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d102      	bne.n	8010680 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801067a:	2301      	movs	r3, #1
 801067c:	607b      	str	r3, [r7, #4]
 801067e:	e008      	b.n	8010692 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010680:	4b08      	ldr	r3, [pc, #32]	; (80106a4 <xTaskGetSchedulerState+0x38>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d102      	bne.n	801068e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010688:	2302      	movs	r3, #2
 801068a:	607b      	str	r3, [r7, #4]
 801068c:	e001      	b.n	8010692 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801068e:	2300      	movs	r3, #0
 8010690:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010692:	687b      	ldr	r3, [r7, #4]
	}
 8010694:	4618      	mov	r0, r3
 8010696:	370c      	adds	r7, #12
 8010698:	46bd      	mov	sp, r7
 801069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069e:	4770      	bx	lr
 80106a0:	200022f4 	.word	0x200022f4
 80106a4:	20002310 	.word	0x20002310

080106a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b084      	sub	sp, #16
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80106b4:	2300      	movs	r3, #0
 80106b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d051      	beq.n	8010762 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106c2:	4b2a      	ldr	r3, [pc, #168]	; (801076c <xTaskPriorityInherit+0xc4>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d241      	bcs.n	8010750 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	699b      	ldr	r3, [r3, #24]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	db06      	blt.n	80106e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106d4:	4b25      	ldr	r3, [pc, #148]	; (801076c <xTaskPriorityInherit+0xc4>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	6959      	ldr	r1, [r3, #20]
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106ea:	4613      	mov	r3, r2
 80106ec:	009b      	lsls	r3, r3, #2
 80106ee:	4413      	add	r3, r2
 80106f0:	009b      	lsls	r3, r3, #2
 80106f2:	4a1f      	ldr	r2, [pc, #124]	; (8010770 <xTaskPriorityInherit+0xc8>)
 80106f4:	4413      	add	r3, r2
 80106f6:	4299      	cmp	r1, r3
 80106f8:	d122      	bne.n	8010740 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	3304      	adds	r3, #4
 80106fe:	4618      	mov	r0, r3
 8010700:	f7fe f858 	bl	800e7b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010704:	4b19      	ldr	r3, [pc, #100]	; (801076c <xTaskPriorityInherit+0xc4>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010712:	4b18      	ldr	r3, [pc, #96]	; (8010774 <xTaskPriorityInherit+0xcc>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	429a      	cmp	r2, r3
 8010718:	d903      	bls.n	8010722 <xTaskPriorityInherit+0x7a>
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801071e:	4a15      	ldr	r2, [pc, #84]	; (8010774 <xTaskPriorityInherit+0xcc>)
 8010720:	6013      	str	r3, [r2, #0]
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010726:	4613      	mov	r3, r2
 8010728:	009b      	lsls	r3, r3, #2
 801072a:	4413      	add	r3, r2
 801072c:	009b      	lsls	r3, r3, #2
 801072e:	4a10      	ldr	r2, [pc, #64]	; (8010770 <xTaskPriorityInherit+0xc8>)
 8010730:	441a      	add	r2, r3
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	3304      	adds	r3, #4
 8010736:	4619      	mov	r1, r3
 8010738:	4610      	mov	r0, r2
 801073a:	f7fd ffde 	bl	800e6fa <vListInsertEnd>
 801073e:	e004      	b.n	801074a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010740:	4b0a      	ldr	r3, [pc, #40]	; (801076c <xTaskPriorityInherit+0xc4>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801074a:	2301      	movs	r3, #1
 801074c:	60fb      	str	r3, [r7, #12]
 801074e:	e008      	b.n	8010762 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010754:	4b05      	ldr	r3, [pc, #20]	; (801076c <xTaskPriorityInherit+0xc4>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801075a:	429a      	cmp	r2, r3
 801075c:	d201      	bcs.n	8010762 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801075e:	2301      	movs	r3, #1
 8010760:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010762:	68fb      	ldr	r3, [r7, #12]
	}
 8010764:	4618      	mov	r0, r3
 8010766:	3710      	adds	r7, #16
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}
 801076c:	20001e14 	.word	0x20001e14
 8010770:	20001e18 	.word	0x20001e18
 8010774:	200022f0 	.word	0x200022f0

08010778 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010778:	b580      	push	{r7, lr}
 801077a:	b086      	sub	sp, #24
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010784:	2300      	movs	r3, #0
 8010786:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d056      	beq.n	801083c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801078e:	4b2e      	ldr	r3, [pc, #184]	; (8010848 <xTaskPriorityDisinherit+0xd0>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	693a      	ldr	r2, [r7, #16]
 8010794:	429a      	cmp	r2, r3
 8010796:	d00a      	beq.n	80107ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801079c:	f383 8811 	msr	BASEPRI, r3
 80107a0:	f3bf 8f6f 	isb	sy
 80107a4:	f3bf 8f4f 	dsb	sy
 80107a8:	60fb      	str	r3, [r7, #12]
}
 80107aa:	bf00      	nop
 80107ac:	e7fe      	b.n	80107ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d10a      	bne.n	80107cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80107b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ba:	f383 8811 	msr	BASEPRI, r3
 80107be:	f3bf 8f6f 	isb	sy
 80107c2:	f3bf 8f4f 	dsb	sy
 80107c6:	60bb      	str	r3, [r7, #8]
}
 80107c8:	bf00      	nop
 80107ca:	e7fe      	b.n	80107ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80107cc:	693b      	ldr	r3, [r7, #16]
 80107ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80107d0:	1e5a      	subs	r2, r3, #1
 80107d2:	693b      	ldr	r3, [r7, #16]
 80107d4:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80107d6:	693b      	ldr	r3, [r7, #16]
 80107d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80107de:	429a      	cmp	r2, r3
 80107e0:	d02c      	beq.n	801083c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d128      	bne.n	801083c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	3304      	adds	r3, #4
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7fd ffe0 	bl	800e7b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80107f8:	693b      	ldr	r3, [r7, #16]
 80107fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107fc:	693b      	ldr	r3, [r7, #16]
 80107fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010800:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801080c:	4b0f      	ldr	r3, [pc, #60]	; (801084c <xTaskPriorityDisinherit+0xd4>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	429a      	cmp	r2, r3
 8010812:	d903      	bls.n	801081c <xTaskPriorityDisinherit+0xa4>
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010818:	4a0c      	ldr	r2, [pc, #48]	; (801084c <xTaskPriorityDisinherit+0xd4>)
 801081a:	6013      	str	r3, [r2, #0]
 801081c:	693b      	ldr	r3, [r7, #16]
 801081e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010820:	4613      	mov	r3, r2
 8010822:	009b      	lsls	r3, r3, #2
 8010824:	4413      	add	r3, r2
 8010826:	009b      	lsls	r3, r3, #2
 8010828:	4a09      	ldr	r2, [pc, #36]	; (8010850 <xTaskPriorityDisinherit+0xd8>)
 801082a:	441a      	add	r2, r3
 801082c:	693b      	ldr	r3, [r7, #16]
 801082e:	3304      	adds	r3, #4
 8010830:	4619      	mov	r1, r3
 8010832:	4610      	mov	r0, r2
 8010834:	f7fd ff61 	bl	800e6fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010838:	2301      	movs	r3, #1
 801083a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801083c:	697b      	ldr	r3, [r7, #20]
	}
 801083e:	4618      	mov	r0, r3
 8010840:	3718      	adds	r7, #24
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}
 8010846:	bf00      	nop
 8010848:	20001e14 	.word	0x20001e14
 801084c:	200022f0 	.word	0x200022f0
 8010850:	20001e18 	.word	0x20001e18

08010854 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010854:	b580      	push	{r7, lr}
 8010856:	b088      	sub	sp, #32
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010862:	2301      	movs	r3, #1
 8010864:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d06a      	beq.n	8010942 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801086c:	69bb      	ldr	r3, [r7, #24]
 801086e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010870:	2b00      	cmp	r3, #0
 8010872:	d10a      	bne.n	801088a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010878:	f383 8811 	msr	BASEPRI, r3
 801087c:	f3bf 8f6f 	isb	sy
 8010880:	f3bf 8f4f 	dsb	sy
 8010884:	60fb      	str	r3, [r7, #12]
}
 8010886:	bf00      	nop
 8010888:	e7fe      	b.n	8010888 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801088a:	69bb      	ldr	r3, [r7, #24]
 801088c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801088e:	683a      	ldr	r2, [r7, #0]
 8010890:	429a      	cmp	r2, r3
 8010892:	d902      	bls.n	801089a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	61fb      	str	r3, [r7, #28]
 8010898:	e002      	b.n	80108a0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801089a:	69bb      	ldr	r3, [r7, #24]
 801089c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801089e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80108a0:	69bb      	ldr	r3, [r7, #24]
 80108a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108a4:	69fa      	ldr	r2, [r7, #28]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d04b      	beq.n	8010942 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80108aa:	69bb      	ldr	r3, [r7, #24]
 80108ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80108ae:	697a      	ldr	r2, [r7, #20]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d146      	bne.n	8010942 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80108b4:	4b25      	ldr	r3, [pc, #148]	; (801094c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	69ba      	ldr	r2, [r7, #24]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d10a      	bne.n	80108d4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80108be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c2:	f383 8811 	msr	BASEPRI, r3
 80108c6:	f3bf 8f6f 	isb	sy
 80108ca:	f3bf 8f4f 	dsb	sy
 80108ce:	60bb      	str	r3, [r7, #8]
}
 80108d0:	bf00      	nop
 80108d2:	e7fe      	b.n	80108d2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80108d4:	69bb      	ldr	r3, [r7, #24]
 80108d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80108da:	69bb      	ldr	r3, [r7, #24]
 80108dc:	69fa      	ldr	r2, [r7, #28]
 80108de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80108e0:	69bb      	ldr	r3, [r7, #24]
 80108e2:	699b      	ldr	r3, [r3, #24]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	db04      	blt.n	80108f2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108e8:	69fb      	ldr	r3, [r7, #28]
 80108ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80108ee:	69bb      	ldr	r3, [r7, #24]
 80108f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80108f2:	69bb      	ldr	r3, [r7, #24]
 80108f4:	6959      	ldr	r1, [r3, #20]
 80108f6:	693a      	ldr	r2, [r7, #16]
 80108f8:	4613      	mov	r3, r2
 80108fa:	009b      	lsls	r3, r3, #2
 80108fc:	4413      	add	r3, r2
 80108fe:	009b      	lsls	r3, r3, #2
 8010900:	4a13      	ldr	r2, [pc, #76]	; (8010950 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010902:	4413      	add	r3, r2
 8010904:	4299      	cmp	r1, r3
 8010906:	d11c      	bne.n	8010942 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010908:	69bb      	ldr	r3, [r7, #24]
 801090a:	3304      	adds	r3, #4
 801090c:	4618      	mov	r0, r3
 801090e:	f7fd ff51 	bl	800e7b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010912:	69bb      	ldr	r3, [r7, #24]
 8010914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010916:	4b0f      	ldr	r3, [pc, #60]	; (8010954 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	429a      	cmp	r2, r3
 801091c:	d903      	bls.n	8010926 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801091e:	69bb      	ldr	r3, [r7, #24]
 8010920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010922:	4a0c      	ldr	r2, [pc, #48]	; (8010954 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010924:	6013      	str	r3, [r2, #0]
 8010926:	69bb      	ldr	r3, [r7, #24]
 8010928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801092a:	4613      	mov	r3, r2
 801092c:	009b      	lsls	r3, r3, #2
 801092e:	4413      	add	r3, r2
 8010930:	009b      	lsls	r3, r3, #2
 8010932:	4a07      	ldr	r2, [pc, #28]	; (8010950 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010934:	441a      	add	r2, r3
 8010936:	69bb      	ldr	r3, [r7, #24]
 8010938:	3304      	adds	r3, #4
 801093a:	4619      	mov	r1, r3
 801093c:	4610      	mov	r0, r2
 801093e:	f7fd fedc 	bl	800e6fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010942:	bf00      	nop
 8010944:	3720      	adds	r7, #32
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}
 801094a:	bf00      	nop
 801094c:	20001e14 	.word	0x20001e14
 8010950:	20001e18 	.word	0x20001e18
 8010954:	200022f0 	.word	0x200022f0

08010958 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010958:	b480      	push	{r7}
 801095a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801095c:	4b07      	ldr	r3, [pc, #28]	; (801097c <pvTaskIncrementMutexHeldCount+0x24>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d004      	beq.n	801096e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010964:	4b05      	ldr	r3, [pc, #20]	; (801097c <pvTaskIncrementMutexHeldCount+0x24>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801096a:	3201      	adds	r2, #1
 801096c:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 801096e:	4b03      	ldr	r3, [pc, #12]	; (801097c <pvTaskIncrementMutexHeldCount+0x24>)
 8010970:	681b      	ldr	r3, [r3, #0]
	}
 8010972:	4618      	mov	r0, r3
 8010974:	46bd      	mov	sp, r7
 8010976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097a:	4770      	bx	lr
 801097c:	20001e14 	.word	0x20001e14

08010980 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b084      	sub	sp, #16
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801098a:	4b21      	ldr	r3, [pc, #132]	; (8010a10 <prvAddCurrentTaskToDelayedList+0x90>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010990:	4b20      	ldr	r3, [pc, #128]	; (8010a14 <prvAddCurrentTaskToDelayedList+0x94>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	3304      	adds	r3, #4
 8010996:	4618      	mov	r0, r3
 8010998:	f7fd ff0c 	bl	800e7b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109a2:	d10a      	bne.n	80109ba <prvAddCurrentTaskToDelayedList+0x3a>
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d007      	beq.n	80109ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80109aa:	4b1a      	ldr	r3, [pc, #104]	; (8010a14 <prvAddCurrentTaskToDelayedList+0x94>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	3304      	adds	r3, #4
 80109b0:	4619      	mov	r1, r3
 80109b2:	4819      	ldr	r0, [pc, #100]	; (8010a18 <prvAddCurrentTaskToDelayedList+0x98>)
 80109b4:	f7fd fea1 	bl	800e6fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80109b8:	e026      	b.n	8010a08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80109ba:	68fa      	ldr	r2, [r7, #12]
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	4413      	add	r3, r2
 80109c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80109c2:	4b14      	ldr	r3, [pc, #80]	; (8010a14 <prvAddCurrentTaskToDelayedList+0x94>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	68ba      	ldr	r2, [r7, #8]
 80109c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80109ca:	68ba      	ldr	r2, [r7, #8]
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d209      	bcs.n	80109e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80109d2:	4b12      	ldr	r3, [pc, #72]	; (8010a1c <prvAddCurrentTaskToDelayedList+0x9c>)
 80109d4:	681a      	ldr	r2, [r3, #0]
 80109d6:	4b0f      	ldr	r3, [pc, #60]	; (8010a14 <prvAddCurrentTaskToDelayedList+0x94>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	3304      	adds	r3, #4
 80109dc:	4619      	mov	r1, r3
 80109de:	4610      	mov	r0, r2
 80109e0:	f7fd feaf 	bl	800e742 <vListInsert>
}
 80109e4:	e010      	b.n	8010a08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80109e6:	4b0e      	ldr	r3, [pc, #56]	; (8010a20 <prvAddCurrentTaskToDelayedList+0xa0>)
 80109e8:	681a      	ldr	r2, [r3, #0]
 80109ea:	4b0a      	ldr	r3, [pc, #40]	; (8010a14 <prvAddCurrentTaskToDelayedList+0x94>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	3304      	adds	r3, #4
 80109f0:	4619      	mov	r1, r3
 80109f2:	4610      	mov	r0, r2
 80109f4:	f7fd fea5 	bl	800e742 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80109f8:	4b0a      	ldr	r3, [pc, #40]	; (8010a24 <prvAddCurrentTaskToDelayedList+0xa4>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	68ba      	ldr	r2, [r7, #8]
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d202      	bcs.n	8010a08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010a02:	4a08      	ldr	r2, [pc, #32]	; (8010a24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	6013      	str	r3, [r2, #0]
}
 8010a08:	bf00      	nop
 8010a0a:	3710      	adds	r7, #16
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}
 8010a10:	200022ec 	.word	0x200022ec
 8010a14:	20001e14 	.word	0x20001e14
 8010a18:	200022d4 	.word	0x200022d4
 8010a1c:	200022a4 	.word	0x200022a4
 8010a20:	200022a0 	.word	0x200022a0
 8010a24:	20002308 	.word	0x20002308

08010a28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b08a      	sub	sp, #40	; 0x28
 8010a2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010a32:	f000 fb07 	bl	8011044 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010a36:	4b1c      	ldr	r3, [pc, #112]	; (8010aa8 <xTimerCreateTimerTask+0x80>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d021      	beq.n	8010a82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010a42:	2300      	movs	r3, #0
 8010a44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010a46:	1d3a      	adds	r2, r7, #4
 8010a48:	f107 0108 	add.w	r1, r7, #8
 8010a4c:	f107 030c 	add.w	r3, r7, #12
 8010a50:	4618      	mov	r0, r3
 8010a52:	f7fd fe0b 	bl	800e66c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010a56:	6879      	ldr	r1, [r7, #4]
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	68fa      	ldr	r2, [r7, #12]
 8010a5c:	9202      	str	r2, [sp, #8]
 8010a5e:	9301      	str	r3, [sp, #4]
 8010a60:	2302      	movs	r3, #2
 8010a62:	9300      	str	r3, [sp, #0]
 8010a64:	2300      	movs	r3, #0
 8010a66:	460a      	mov	r2, r1
 8010a68:	4910      	ldr	r1, [pc, #64]	; (8010aac <xTimerCreateTimerTask+0x84>)
 8010a6a:	4811      	ldr	r0, [pc, #68]	; (8010ab0 <xTimerCreateTimerTask+0x88>)
 8010a6c:	f7fe feda 	bl	800f824 <xTaskCreateStatic>
 8010a70:	4603      	mov	r3, r0
 8010a72:	4a10      	ldr	r2, [pc, #64]	; (8010ab4 <xTimerCreateTimerTask+0x8c>)
 8010a74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010a76:	4b0f      	ldr	r3, [pc, #60]	; (8010ab4 <xTimerCreateTimerTask+0x8c>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d001      	beq.n	8010a82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010a7e:	2301      	movs	r3, #1
 8010a80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d10a      	bne.n	8010a9e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a8c:	f383 8811 	msr	BASEPRI, r3
 8010a90:	f3bf 8f6f 	isb	sy
 8010a94:	f3bf 8f4f 	dsb	sy
 8010a98:	613b      	str	r3, [r7, #16]
}
 8010a9a:	bf00      	nop
 8010a9c:	e7fe      	b.n	8010a9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010a9e:	697b      	ldr	r3, [r7, #20]
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3718      	adds	r7, #24
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}
 8010aa8:	20002344 	.word	0x20002344
 8010aac:	08012f0c 	.word	0x08012f0c
 8010ab0:	08010bed 	.word	0x08010bed
 8010ab4:	20002348 	.word	0x20002348

08010ab8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b08a      	sub	sp, #40	; 0x28
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	60f8      	str	r0, [r7, #12]
 8010ac0:	60b9      	str	r1, [r7, #8]
 8010ac2:	607a      	str	r2, [r7, #4]
 8010ac4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d10a      	bne.n	8010ae6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8010ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ad4:	f383 8811 	msr	BASEPRI, r3
 8010ad8:	f3bf 8f6f 	isb	sy
 8010adc:	f3bf 8f4f 	dsb	sy
 8010ae0:	623b      	str	r3, [r7, #32]
}
 8010ae2:	bf00      	nop
 8010ae4:	e7fe      	b.n	8010ae4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010ae6:	4b1a      	ldr	r3, [pc, #104]	; (8010b50 <xTimerGenericCommand+0x98>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d02a      	beq.n	8010b44 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	2b05      	cmp	r3, #5
 8010afe:	dc18      	bgt.n	8010b32 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010b00:	f7ff fdb4 	bl	801066c <xTaskGetSchedulerState>
 8010b04:	4603      	mov	r3, r0
 8010b06:	2b02      	cmp	r3, #2
 8010b08:	d109      	bne.n	8010b1e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010b0a:	4b11      	ldr	r3, [pc, #68]	; (8010b50 <xTimerGenericCommand+0x98>)
 8010b0c:	6818      	ldr	r0, [r3, #0]
 8010b0e:	f107 0110 	add.w	r1, r7, #16
 8010b12:	2300      	movs	r3, #0
 8010b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b16:	f7fe f81f 	bl	800eb58 <xQueueGenericSend>
 8010b1a:	6278      	str	r0, [r7, #36]	; 0x24
 8010b1c:	e012      	b.n	8010b44 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010b1e:	4b0c      	ldr	r3, [pc, #48]	; (8010b50 <xTimerGenericCommand+0x98>)
 8010b20:	6818      	ldr	r0, [r3, #0]
 8010b22:	f107 0110 	add.w	r1, r7, #16
 8010b26:	2300      	movs	r3, #0
 8010b28:	2200      	movs	r2, #0
 8010b2a:	f7fe f815 	bl	800eb58 <xQueueGenericSend>
 8010b2e:	6278      	str	r0, [r7, #36]	; 0x24
 8010b30:	e008      	b.n	8010b44 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010b32:	4b07      	ldr	r3, [pc, #28]	; (8010b50 <xTimerGenericCommand+0x98>)
 8010b34:	6818      	ldr	r0, [r3, #0]
 8010b36:	f107 0110 	add.w	r1, r7, #16
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	683a      	ldr	r2, [r7, #0]
 8010b3e:	f7fe f909 	bl	800ed54 <xQueueGenericSendFromISR>
 8010b42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010b46:	4618      	mov	r0, r3
 8010b48:	3728      	adds	r7, #40	; 0x28
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}
 8010b4e:	bf00      	nop
 8010b50:	20002344 	.word	0x20002344

08010b54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b088      	sub	sp, #32
 8010b58:	af02      	add	r7, sp, #8
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b5e:	4b22      	ldr	r3, [pc, #136]	; (8010be8 <prvProcessExpiredTimer+0x94>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	68db      	ldr	r3, [r3, #12]
 8010b64:	68db      	ldr	r3, [r3, #12]
 8010b66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010b68:	697b      	ldr	r3, [r7, #20]
 8010b6a:	3304      	adds	r3, #4
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7fd fe21 	bl	800e7b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b78:	f003 0304 	and.w	r3, r3, #4
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d022      	beq.n	8010bc6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	699a      	ldr	r2, [r3, #24]
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	18d1      	adds	r1, r2, r3
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	683a      	ldr	r2, [r7, #0]
 8010b8c:	6978      	ldr	r0, [r7, #20]
 8010b8e:	f000 f8d1 	bl	8010d34 <prvInsertTimerInActiveList>
 8010b92:	4603      	mov	r3, r0
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d01f      	beq.n	8010bd8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010b98:	2300      	movs	r3, #0
 8010b9a:	9300      	str	r3, [sp, #0]
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	687a      	ldr	r2, [r7, #4]
 8010ba0:	2100      	movs	r1, #0
 8010ba2:	6978      	ldr	r0, [r7, #20]
 8010ba4:	f7ff ff88 	bl	8010ab8 <xTimerGenericCommand>
 8010ba8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d113      	bne.n	8010bd8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bb4:	f383 8811 	msr	BASEPRI, r3
 8010bb8:	f3bf 8f6f 	isb	sy
 8010bbc:	f3bf 8f4f 	dsb	sy
 8010bc0:	60fb      	str	r3, [r7, #12]
}
 8010bc2:	bf00      	nop
 8010bc4:	e7fe      	b.n	8010bc4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010bcc:	f023 0301 	bic.w	r3, r3, #1
 8010bd0:	b2da      	uxtb	r2, r3
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	6a1b      	ldr	r3, [r3, #32]
 8010bdc:	6978      	ldr	r0, [r7, #20]
 8010bde:	4798      	blx	r3
}
 8010be0:	bf00      	nop
 8010be2:	3718      	adds	r7, #24
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}
 8010be8:	2000233c 	.word	0x2000233c

08010bec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b084      	sub	sp, #16
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010bf4:	f107 0308 	add.w	r3, r7, #8
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f000 f857 	bl	8010cac <prvGetNextExpireTime>
 8010bfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	4619      	mov	r1, r3
 8010c04:	68f8      	ldr	r0, [r7, #12]
 8010c06:	f000 f803 	bl	8010c10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010c0a:	f000 f8d5 	bl	8010db8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010c0e:	e7f1      	b.n	8010bf4 <prvTimerTask+0x8>

08010c10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b084      	sub	sp, #16
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010c1a:	f7ff f945 	bl	800fea8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010c1e:	f107 0308 	add.w	r3, r7, #8
 8010c22:	4618      	mov	r0, r3
 8010c24:	f000 f866 	bl	8010cf4 <prvSampleTimeNow>
 8010c28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010c2a:	68bb      	ldr	r3, [r7, #8]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d130      	bne.n	8010c92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d10a      	bne.n	8010c4c <prvProcessTimerOrBlockTask+0x3c>
 8010c36:	687a      	ldr	r2, [r7, #4]
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d806      	bhi.n	8010c4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010c3e:	f7ff f941 	bl	800fec4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010c42:	68f9      	ldr	r1, [r7, #12]
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f7ff ff85 	bl	8010b54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010c4a:	e024      	b.n	8010c96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d008      	beq.n	8010c64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010c52:	4b13      	ldr	r3, [pc, #76]	; (8010ca0 <prvProcessTimerOrBlockTask+0x90>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d101      	bne.n	8010c60 <prvProcessTimerOrBlockTask+0x50>
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	e000      	b.n	8010c62 <prvProcessTimerOrBlockTask+0x52>
 8010c60:	2300      	movs	r3, #0
 8010c62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010c64:	4b0f      	ldr	r3, [pc, #60]	; (8010ca4 <prvProcessTimerOrBlockTask+0x94>)
 8010c66:	6818      	ldr	r0, [r3, #0]
 8010c68:	687a      	ldr	r2, [r7, #4]
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	1ad3      	subs	r3, r2, r3
 8010c6e:	683a      	ldr	r2, [r7, #0]
 8010c70:	4619      	mov	r1, r3
 8010c72:	f7fe fda3 	bl	800f7bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010c76:	f7ff f925 	bl	800fec4 <xTaskResumeAll>
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d10a      	bne.n	8010c96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010c80:	4b09      	ldr	r3, [pc, #36]	; (8010ca8 <prvProcessTimerOrBlockTask+0x98>)
 8010c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c86:	601a      	str	r2, [r3, #0]
 8010c88:	f3bf 8f4f 	dsb	sy
 8010c8c:	f3bf 8f6f 	isb	sy
}
 8010c90:	e001      	b.n	8010c96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010c92:	f7ff f917 	bl	800fec4 <xTaskResumeAll>
}
 8010c96:	bf00      	nop
 8010c98:	3710      	adds	r7, #16
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}
 8010c9e:	bf00      	nop
 8010ca0:	20002340 	.word	0x20002340
 8010ca4:	20002344 	.word	0x20002344
 8010ca8:	e000ed04 	.word	0xe000ed04

08010cac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010cac:	b480      	push	{r7}
 8010cae:	b085      	sub	sp, #20
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010cb4:	4b0e      	ldr	r3, [pc, #56]	; (8010cf0 <prvGetNextExpireTime+0x44>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d101      	bne.n	8010cc2 <prvGetNextExpireTime+0x16>
 8010cbe:	2201      	movs	r2, #1
 8010cc0:	e000      	b.n	8010cc4 <prvGetNextExpireTime+0x18>
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d105      	bne.n	8010cdc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010cd0:	4b07      	ldr	r3, [pc, #28]	; (8010cf0 <prvGetNextExpireTime+0x44>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	68db      	ldr	r3, [r3, #12]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	60fb      	str	r3, [r7, #12]
 8010cda:	e001      	b.n	8010ce0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010ce0:	68fb      	ldr	r3, [r7, #12]
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3714      	adds	r7, #20
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cec:	4770      	bx	lr
 8010cee:	bf00      	nop
 8010cf0:	2000233c 	.word	0x2000233c

08010cf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b084      	sub	sp, #16
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010cfc:	f7ff f980 	bl	8010000 <xTaskGetTickCount>
 8010d00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010d02:	4b0b      	ldr	r3, [pc, #44]	; (8010d30 <prvSampleTimeNow+0x3c>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	68fa      	ldr	r2, [r7, #12]
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	d205      	bcs.n	8010d18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010d0c:	f000 f936 	bl	8010f7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2201      	movs	r2, #1
 8010d14:	601a      	str	r2, [r3, #0]
 8010d16:	e002      	b.n	8010d1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010d1e:	4a04      	ldr	r2, [pc, #16]	; (8010d30 <prvSampleTimeNow+0x3c>)
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010d24:	68fb      	ldr	r3, [r7, #12]
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3710      	adds	r7, #16
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	2000234c 	.word	0x2000234c

08010d34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b086      	sub	sp, #24
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	60f8      	str	r0, [r7, #12]
 8010d3c:	60b9      	str	r1, [r7, #8]
 8010d3e:	607a      	str	r2, [r7, #4]
 8010d40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010d42:	2300      	movs	r3, #0
 8010d44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	68ba      	ldr	r2, [r7, #8]
 8010d4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	68fa      	ldr	r2, [r7, #12]
 8010d50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010d52:	68ba      	ldr	r2, [r7, #8]
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	429a      	cmp	r2, r3
 8010d58:	d812      	bhi.n	8010d80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d5a:	687a      	ldr	r2, [r7, #4]
 8010d5c:	683b      	ldr	r3, [r7, #0]
 8010d5e:	1ad2      	subs	r2, r2, r3
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	699b      	ldr	r3, [r3, #24]
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d302      	bcc.n	8010d6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010d68:	2301      	movs	r3, #1
 8010d6a:	617b      	str	r3, [r7, #20]
 8010d6c:	e01b      	b.n	8010da6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010d6e:	4b10      	ldr	r3, [pc, #64]	; (8010db0 <prvInsertTimerInActiveList+0x7c>)
 8010d70:	681a      	ldr	r2, [r3, #0]
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	3304      	adds	r3, #4
 8010d76:	4619      	mov	r1, r3
 8010d78:	4610      	mov	r0, r2
 8010d7a:	f7fd fce2 	bl	800e742 <vListInsert>
 8010d7e:	e012      	b.n	8010da6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010d80:	687a      	ldr	r2, [r7, #4]
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	429a      	cmp	r2, r3
 8010d86:	d206      	bcs.n	8010d96 <prvInsertTimerInActiveList+0x62>
 8010d88:	68ba      	ldr	r2, [r7, #8]
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d302      	bcc.n	8010d96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010d90:	2301      	movs	r3, #1
 8010d92:	617b      	str	r3, [r7, #20]
 8010d94:	e007      	b.n	8010da6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010d96:	4b07      	ldr	r3, [pc, #28]	; (8010db4 <prvInsertTimerInActiveList+0x80>)
 8010d98:	681a      	ldr	r2, [r3, #0]
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	3304      	adds	r3, #4
 8010d9e:	4619      	mov	r1, r3
 8010da0:	4610      	mov	r0, r2
 8010da2:	f7fd fcce 	bl	800e742 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010da6:	697b      	ldr	r3, [r7, #20]
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3718      	adds	r7, #24
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}
 8010db0:	20002340 	.word	0x20002340
 8010db4:	2000233c 	.word	0x2000233c

08010db8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b08e      	sub	sp, #56	; 0x38
 8010dbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010dbe:	e0ca      	b.n	8010f56 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	da18      	bge.n	8010df8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010dc6:	1d3b      	adds	r3, r7, #4
 8010dc8:	3304      	adds	r3, #4
 8010dca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d10a      	bne.n	8010de8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd6:	f383 8811 	msr	BASEPRI, r3
 8010dda:	f3bf 8f6f 	isb	sy
 8010dde:	f3bf 8f4f 	dsb	sy
 8010de2:	61fb      	str	r3, [r7, #28]
}
 8010de4:	bf00      	nop
 8010de6:	e7fe      	b.n	8010de6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dee:	6850      	ldr	r0, [r2, #4]
 8010df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010df2:	6892      	ldr	r2, [r2, #8]
 8010df4:	4611      	mov	r1, r2
 8010df6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	f2c0 80aa 	blt.w	8010f54 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e06:	695b      	ldr	r3, [r3, #20]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d004      	beq.n	8010e16 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0e:	3304      	adds	r3, #4
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7fd fccf 	bl	800e7b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010e16:	463b      	mov	r3, r7
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7ff ff6b 	bl	8010cf4 <prvSampleTimeNow>
 8010e1e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2b09      	cmp	r3, #9
 8010e24:	f200 8097 	bhi.w	8010f56 <prvProcessReceivedCommands+0x19e>
 8010e28:	a201      	add	r2, pc, #4	; (adr r2, 8010e30 <prvProcessReceivedCommands+0x78>)
 8010e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e2e:	bf00      	nop
 8010e30:	08010e59 	.word	0x08010e59
 8010e34:	08010e59 	.word	0x08010e59
 8010e38:	08010e59 	.word	0x08010e59
 8010e3c:	08010ecd 	.word	0x08010ecd
 8010e40:	08010ee1 	.word	0x08010ee1
 8010e44:	08010f2b 	.word	0x08010f2b
 8010e48:	08010e59 	.word	0x08010e59
 8010e4c:	08010e59 	.word	0x08010e59
 8010e50:	08010ecd 	.word	0x08010ecd
 8010e54:	08010ee1 	.word	0x08010ee1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e5e:	f043 0301 	orr.w	r3, r3, #1
 8010e62:	b2da      	uxtb	r2, r3
 8010e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010e6a:	68ba      	ldr	r2, [r7, #8]
 8010e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e6e:	699b      	ldr	r3, [r3, #24]
 8010e70:	18d1      	adds	r1, r2, r3
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e78:	f7ff ff5c 	bl	8010d34 <prvInsertTimerInActiveList>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d069      	beq.n	8010f56 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e84:	6a1b      	ldr	r3, [r3, #32]
 8010e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e90:	f003 0304 	and.w	r3, r3, #4
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d05e      	beq.n	8010f56 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010e98:	68ba      	ldr	r2, [r7, #8]
 8010e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e9c:	699b      	ldr	r3, [r3, #24]
 8010e9e:	441a      	add	r2, r3
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	9300      	str	r3, [sp, #0]
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	2100      	movs	r1, #0
 8010ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010eaa:	f7ff fe05 	bl	8010ab8 <xTimerGenericCommand>
 8010eae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010eb0:	6a3b      	ldr	r3, [r7, #32]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d14f      	bne.n	8010f56 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eba:	f383 8811 	msr	BASEPRI, r3
 8010ebe:	f3bf 8f6f 	isb	sy
 8010ec2:	f3bf 8f4f 	dsb	sy
 8010ec6:	61bb      	str	r3, [r7, #24]
}
 8010ec8:	bf00      	nop
 8010eca:	e7fe      	b.n	8010eca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ece:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ed2:	f023 0301 	bic.w	r3, r3, #1
 8010ed6:	b2da      	uxtb	r2, r3
 8010ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010ede:	e03a      	b.n	8010f56 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ee6:	f043 0301 	orr.w	r3, r3, #1
 8010eea:	b2da      	uxtb	r2, r3
 8010eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010ef2:	68ba      	ldr	r2, [r7, #8]
 8010ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010efa:	699b      	ldr	r3, [r3, #24]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d10a      	bne.n	8010f16 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f04:	f383 8811 	msr	BASEPRI, r3
 8010f08:	f3bf 8f6f 	isb	sy
 8010f0c:	f3bf 8f4f 	dsb	sy
 8010f10:	617b      	str	r3, [r7, #20]
}
 8010f12:	bf00      	nop
 8010f14:	e7fe      	b.n	8010f14 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f18:	699a      	ldr	r2, [r3, #24]
 8010f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f1c:	18d1      	adds	r1, r2, r3
 8010f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f24:	f7ff ff06 	bl	8010d34 <prvInsertTimerInActiveList>
					break;
 8010f28:	e015      	b.n	8010f56 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f30:	f003 0302 	and.w	r3, r3, #2
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d103      	bne.n	8010f40 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f3a:	f000 fbe1 	bl	8011700 <vPortFree>
 8010f3e:	e00a      	b.n	8010f56 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f46:	f023 0301 	bic.w	r3, r3, #1
 8010f4a:	b2da      	uxtb	r2, r3
 8010f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010f52:	e000      	b.n	8010f56 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010f54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010f56:	4b08      	ldr	r3, [pc, #32]	; (8010f78 <prvProcessReceivedCommands+0x1c0>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	1d39      	adds	r1, r7, #4
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7fe f820 	bl	800efa4 <xQueueReceive>
 8010f64:	4603      	mov	r3, r0
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	f47f af2a 	bne.w	8010dc0 <prvProcessReceivedCommands+0x8>
	}
}
 8010f6c:	bf00      	nop
 8010f6e:	bf00      	nop
 8010f70:	3730      	adds	r7, #48	; 0x30
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}
 8010f76:	bf00      	nop
 8010f78:	20002344 	.word	0x20002344

08010f7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b088      	sub	sp, #32
 8010f80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010f82:	e048      	b.n	8011016 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010f84:	4b2d      	ldr	r3, [pc, #180]	; (801103c <prvSwitchTimerLists+0xc0>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	68db      	ldr	r3, [r3, #12]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f8e:	4b2b      	ldr	r3, [pc, #172]	; (801103c <prvSwitchTimerLists+0xc0>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	68db      	ldr	r3, [r3, #12]
 8010f94:	68db      	ldr	r3, [r3, #12]
 8010f96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	3304      	adds	r3, #4
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f7fd fc09 	bl	800e7b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	6a1b      	ldr	r3, [r3, #32]
 8010fa6:	68f8      	ldr	r0, [r7, #12]
 8010fa8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010fb0:	f003 0304 	and.w	r3, r3, #4
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d02e      	beq.n	8011016 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	699b      	ldr	r3, [r3, #24]
 8010fbc:	693a      	ldr	r2, [r7, #16]
 8010fbe:	4413      	add	r3, r2
 8010fc0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010fc2:	68ba      	ldr	r2, [r7, #8]
 8010fc4:	693b      	ldr	r3, [r7, #16]
 8010fc6:	429a      	cmp	r2, r3
 8010fc8:	d90e      	bls.n	8010fe8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	68ba      	ldr	r2, [r7, #8]
 8010fce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	68fa      	ldr	r2, [r7, #12]
 8010fd4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010fd6:	4b19      	ldr	r3, [pc, #100]	; (801103c <prvSwitchTimerLists+0xc0>)
 8010fd8:	681a      	ldr	r2, [r3, #0]
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	3304      	adds	r3, #4
 8010fde:	4619      	mov	r1, r3
 8010fe0:	4610      	mov	r0, r2
 8010fe2:	f7fd fbae 	bl	800e742 <vListInsert>
 8010fe6:	e016      	b.n	8011016 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010fe8:	2300      	movs	r3, #0
 8010fea:	9300      	str	r3, [sp, #0]
 8010fec:	2300      	movs	r3, #0
 8010fee:	693a      	ldr	r2, [r7, #16]
 8010ff0:	2100      	movs	r1, #0
 8010ff2:	68f8      	ldr	r0, [r7, #12]
 8010ff4:	f7ff fd60 	bl	8010ab8 <xTimerGenericCommand>
 8010ff8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d10a      	bne.n	8011016 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8011000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011004:	f383 8811 	msr	BASEPRI, r3
 8011008:	f3bf 8f6f 	isb	sy
 801100c:	f3bf 8f4f 	dsb	sy
 8011010:	603b      	str	r3, [r7, #0]
}
 8011012:	bf00      	nop
 8011014:	e7fe      	b.n	8011014 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011016:	4b09      	ldr	r3, [pc, #36]	; (801103c <prvSwitchTimerLists+0xc0>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d1b1      	bne.n	8010f84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011020:	4b06      	ldr	r3, [pc, #24]	; (801103c <prvSwitchTimerLists+0xc0>)
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011026:	4b06      	ldr	r3, [pc, #24]	; (8011040 <prvSwitchTimerLists+0xc4>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	4a04      	ldr	r2, [pc, #16]	; (801103c <prvSwitchTimerLists+0xc0>)
 801102c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801102e:	4a04      	ldr	r2, [pc, #16]	; (8011040 <prvSwitchTimerLists+0xc4>)
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	6013      	str	r3, [r2, #0]
}
 8011034:	bf00      	nop
 8011036:	3718      	adds	r7, #24
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}
 801103c:	2000233c 	.word	0x2000233c
 8011040:	20002340 	.word	0x20002340

08011044 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b082      	sub	sp, #8
 8011048:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801104a:	f000 f96b 	bl	8011324 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801104e:	4b15      	ldr	r3, [pc, #84]	; (80110a4 <prvCheckForValidListAndQueue+0x60>)
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d120      	bne.n	8011098 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011056:	4814      	ldr	r0, [pc, #80]	; (80110a8 <prvCheckForValidListAndQueue+0x64>)
 8011058:	f7fd fb22 	bl	800e6a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801105c:	4813      	ldr	r0, [pc, #76]	; (80110ac <prvCheckForValidListAndQueue+0x68>)
 801105e:	f7fd fb1f 	bl	800e6a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011062:	4b13      	ldr	r3, [pc, #76]	; (80110b0 <prvCheckForValidListAndQueue+0x6c>)
 8011064:	4a10      	ldr	r2, [pc, #64]	; (80110a8 <prvCheckForValidListAndQueue+0x64>)
 8011066:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011068:	4b12      	ldr	r3, [pc, #72]	; (80110b4 <prvCheckForValidListAndQueue+0x70>)
 801106a:	4a10      	ldr	r2, [pc, #64]	; (80110ac <prvCheckForValidListAndQueue+0x68>)
 801106c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801106e:	2300      	movs	r3, #0
 8011070:	9300      	str	r3, [sp, #0]
 8011072:	4b11      	ldr	r3, [pc, #68]	; (80110b8 <prvCheckForValidListAndQueue+0x74>)
 8011074:	4a11      	ldr	r2, [pc, #68]	; (80110bc <prvCheckForValidListAndQueue+0x78>)
 8011076:	2110      	movs	r1, #16
 8011078:	200a      	movs	r0, #10
 801107a:	f7fd fc2d 	bl	800e8d8 <xQueueGenericCreateStatic>
 801107e:	4603      	mov	r3, r0
 8011080:	4a08      	ldr	r2, [pc, #32]	; (80110a4 <prvCheckForValidListAndQueue+0x60>)
 8011082:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011084:	4b07      	ldr	r3, [pc, #28]	; (80110a4 <prvCheckForValidListAndQueue+0x60>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d005      	beq.n	8011098 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801108c:	4b05      	ldr	r3, [pc, #20]	; (80110a4 <prvCheckForValidListAndQueue+0x60>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	490b      	ldr	r1, [pc, #44]	; (80110c0 <prvCheckForValidListAndQueue+0x7c>)
 8011092:	4618      	mov	r0, r3
 8011094:	f7fe fb3e 	bl	800f714 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011098:	f000 f974 	bl	8011384 <vPortExitCritical>
}
 801109c:	bf00      	nop
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}
 80110a2:	bf00      	nop
 80110a4:	20002344 	.word	0x20002344
 80110a8:	20002314 	.word	0x20002314
 80110ac:	20002328 	.word	0x20002328
 80110b0:	2000233c 	.word	0x2000233c
 80110b4:	20002340 	.word	0x20002340
 80110b8:	200023f0 	.word	0x200023f0
 80110bc:	20002350 	.word	0x20002350
 80110c0:	08012f14 	.word	0x08012f14

080110c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80110c4:	b480      	push	{r7}
 80110c6:	b085      	sub	sp, #20
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	60f8      	str	r0, [r7, #12]
 80110cc:	60b9      	str	r1, [r7, #8]
 80110ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	3b04      	subs	r3, #4
 80110d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80110dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	3b04      	subs	r3, #4
 80110e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	f023 0201 	bic.w	r2, r3, #1
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	3b04      	subs	r3, #4
 80110f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80110f4:	4a0c      	ldr	r2, [pc, #48]	; (8011128 <pxPortInitialiseStack+0x64>)
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	3b14      	subs	r3, #20
 80110fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011100:	687a      	ldr	r2, [r7, #4]
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	3b04      	subs	r3, #4
 801110a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	f06f 0202 	mvn.w	r2, #2
 8011112:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	3b20      	subs	r3, #32
 8011118:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801111a:	68fb      	ldr	r3, [r7, #12]
}
 801111c:	4618      	mov	r0, r3
 801111e:	3714      	adds	r7, #20
 8011120:	46bd      	mov	sp, r7
 8011122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011126:	4770      	bx	lr
 8011128:	0801112d 	.word	0x0801112d

0801112c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801112c:	b480      	push	{r7}
 801112e:	b085      	sub	sp, #20
 8011130:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011132:	2300      	movs	r3, #0
 8011134:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011136:	4b12      	ldr	r3, [pc, #72]	; (8011180 <prvTaskExitError+0x54>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801113e:	d00a      	beq.n	8011156 <prvTaskExitError+0x2a>
	__asm volatile
 8011140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011144:	f383 8811 	msr	BASEPRI, r3
 8011148:	f3bf 8f6f 	isb	sy
 801114c:	f3bf 8f4f 	dsb	sy
 8011150:	60fb      	str	r3, [r7, #12]
}
 8011152:	bf00      	nop
 8011154:	e7fe      	b.n	8011154 <prvTaskExitError+0x28>
	__asm volatile
 8011156:	f04f 0350 	mov.w	r3, #80	; 0x50
 801115a:	f383 8811 	msr	BASEPRI, r3
 801115e:	f3bf 8f6f 	isb	sy
 8011162:	f3bf 8f4f 	dsb	sy
 8011166:	60bb      	str	r3, [r7, #8]
}
 8011168:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801116a:	bf00      	nop
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d0fc      	beq.n	801116c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011172:	bf00      	nop
 8011174:	bf00      	nop
 8011176:	3714      	adds	r7, #20
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr
 8011180:	20000598 	.word	0x20000598
	...

08011190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011190:	4b07      	ldr	r3, [pc, #28]	; (80111b0 <pxCurrentTCBConst2>)
 8011192:	6819      	ldr	r1, [r3, #0]
 8011194:	6808      	ldr	r0, [r1, #0]
 8011196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801119a:	f380 8809 	msr	PSP, r0
 801119e:	f3bf 8f6f 	isb	sy
 80111a2:	f04f 0000 	mov.w	r0, #0
 80111a6:	f380 8811 	msr	BASEPRI, r0
 80111aa:	4770      	bx	lr
 80111ac:	f3af 8000 	nop.w

080111b0 <pxCurrentTCBConst2>:
 80111b0:	20001e14 	.word	0x20001e14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80111b4:	bf00      	nop
 80111b6:	bf00      	nop

080111b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80111b8:	4808      	ldr	r0, [pc, #32]	; (80111dc <prvPortStartFirstTask+0x24>)
 80111ba:	6800      	ldr	r0, [r0, #0]
 80111bc:	6800      	ldr	r0, [r0, #0]
 80111be:	f380 8808 	msr	MSP, r0
 80111c2:	f04f 0000 	mov.w	r0, #0
 80111c6:	f380 8814 	msr	CONTROL, r0
 80111ca:	b662      	cpsie	i
 80111cc:	b661      	cpsie	f
 80111ce:	f3bf 8f4f 	dsb	sy
 80111d2:	f3bf 8f6f 	isb	sy
 80111d6:	df00      	svc	0
 80111d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80111da:	bf00      	nop
 80111dc:	e000ed08 	.word	0xe000ed08

080111e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b086      	sub	sp, #24
 80111e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80111e6:	4b46      	ldr	r3, [pc, #280]	; (8011300 <xPortStartScheduler+0x120>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	4a46      	ldr	r2, [pc, #280]	; (8011304 <xPortStartScheduler+0x124>)
 80111ec:	4293      	cmp	r3, r2
 80111ee:	d10a      	bne.n	8011206 <xPortStartScheduler+0x26>
	__asm volatile
 80111f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f4:	f383 8811 	msr	BASEPRI, r3
 80111f8:	f3bf 8f6f 	isb	sy
 80111fc:	f3bf 8f4f 	dsb	sy
 8011200:	613b      	str	r3, [r7, #16]
}
 8011202:	bf00      	nop
 8011204:	e7fe      	b.n	8011204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011206:	4b3e      	ldr	r3, [pc, #248]	; (8011300 <xPortStartScheduler+0x120>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	4a3f      	ldr	r2, [pc, #252]	; (8011308 <xPortStartScheduler+0x128>)
 801120c:	4293      	cmp	r3, r2
 801120e:	d10a      	bne.n	8011226 <xPortStartScheduler+0x46>
	__asm volatile
 8011210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011214:	f383 8811 	msr	BASEPRI, r3
 8011218:	f3bf 8f6f 	isb	sy
 801121c:	f3bf 8f4f 	dsb	sy
 8011220:	60fb      	str	r3, [r7, #12]
}
 8011222:	bf00      	nop
 8011224:	e7fe      	b.n	8011224 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011226:	4b39      	ldr	r3, [pc, #228]	; (801130c <xPortStartScheduler+0x12c>)
 8011228:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	b2db      	uxtb	r3, r3
 8011230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011232:	697b      	ldr	r3, [r7, #20]
 8011234:	22ff      	movs	r2, #255	; 0xff
 8011236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011238:	697b      	ldr	r3, [r7, #20]
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	b2db      	uxtb	r3, r3
 801123e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011240:	78fb      	ldrb	r3, [r7, #3]
 8011242:	b2db      	uxtb	r3, r3
 8011244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011248:	b2da      	uxtb	r2, r3
 801124a:	4b31      	ldr	r3, [pc, #196]	; (8011310 <xPortStartScheduler+0x130>)
 801124c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801124e:	4b31      	ldr	r3, [pc, #196]	; (8011314 <xPortStartScheduler+0x134>)
 8011250:	2207      	movs	r2, #7
 8011252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011254:	e009      	b.n	801126a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011256:	4b2f      	ldr	r3, [pc, #188]	; (8011314 <xPortStartScheduler+0x134>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	3b01      	subs	r3, #1
 801125c:	4a2d      	ldr	r2, [pc, #180]	; (8011314 <xPortStartScheduler+0x134>)
 801125e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011260:	78fb      	ldrb	r3, [r7, #3]
 8011262:	b2db      	uxtb	r3, r3
 8011264:	005b      	lsls	r3, r3, #1
 8011266:	b2db      	uxtb	r3, r3
 8011268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801126a:	78fb      	ldrb	r3, [r7, #3]
 801126c:	b2db      	uxtb	r3, r3
 801126e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011272:	2b80      	cmp	r3, #128	; 0x80
 8011274:	d0ef      	beq.n	8011256 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011276:	4b27      	ldr	r3, [pc, #156]	; (8011314 <xPortStartScheduler+0x134>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f1c3 0307 	rsb	r3, r3, #7
 801127e:	2b04      	cmp	r3, #4
 8011280:	d00a      	beq.n	8011298 <xPortStartScheduler+0xb8>
	__asm volatile
 8011282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011286:	f383 8811 	msr	BASEPRI, r3
 801128a:	f3bf 8f6f 	isb	sy
 801128e:	f3bf 8f4f 	dsb	sy
 8011292:	60bb      	str	r3, [r7, #8]
}
 8011294:	bf00      	nop
 8011296:	e7fe      	b.n	8011296 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011298:	4b1e      	ldr	r3, [pc, #120]	; (8011314 <xPortStartScheduler+0x134>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	021b      	lsls	r3, r3, #8
 801129e:	4a1d      	ldr	r2, [pc, #116]	; (8011314 <xPortStartScheduler+0x134>)
 80112a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80112a2:	4b1c      	ldr	r3, [pc, #112]	; (8011314 <xPortStartScheduler+0x134>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80112aa:	4a1a      	ldr	r2, [pc, #104]	; (8011314 <xPortStartScheduler+0x134>)
 80112ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	b2da      	uxtb	r2, r3
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80112b6:	4b18      	ldr	r3, [pc, #96]	; (8011318 <xPortStartScheduler+0x138>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	4a17      	ldr	r2, [pc, #92]	; (8011318 <xPortStartScheduler+0x138>)
 80112bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80112c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80112c2:	4b15      	ldr	r3, [pc, #84]	; (8011318 <xPortStartScheduler+0x138>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	4a14      	ldr	r2, [pc, #80]	; (8011318 <xPortStartScheduler+0x138>)
 80112c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80112cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80112ce:	f000 f8dd 	bl	801148c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80112d2:	4b12      	ldr	r3, [pc, #72]	; (801131c <xPortStartScheduler+0x13c>)
 80112d4:	2200      	movs	r2, #0
 80112d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80112d8:	f000 f8fc 	bl	80114d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80112dc:	4b10      	ldr	r3, [pc, #64]	; (8011320 <xPortStartScheduler+0x140>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	4a0f      	ldr	r2, [pc, #60]	; (8011320 <xPortStartScheduler+0x140>)
 80112e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80112e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80112e8:	f7ff ff66 	bl	80111b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80112ec:	f7fe ff52 	bl	8010194 <vTaskSwitchContext>
	prvTaskExitError();
 80112f0:	f7ff ff1c 	bl	801112c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80112f4:	2300      	movs	r3, #0
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3718      	adds	r7, #24
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}
 80112fe:	bf00      	nop
 8011300:	e000ed00 	.word	0xe000ed00
 8011304:	410fc271 	.word	0x410fc271
 8011308:	410fc270 	.word	0x410fc270
 801130c:	e000e400 	.word	0xe000e400
 8011310:	20002440 	.word	0x20002440
 8011314:	20002444 	.word	0x20002444
 8011318:	e000ed20 	.word	0xe000ed20
 801131c:	20000598 	.word	0x20000598
 8011320:	e000ef34 	.word	0xe000ef34

08011324 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011324:	b480      	push	{r7}
 8011326:	b083      	sub	sp, #12
 8011328:	af00      	add	r7, sp, #0
	__asm volatile
 801132a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801132e:	f383 8811 	msr	BASEPRI, r3
 8011332:	f3bf 8f6f 	isb	sy
 8011336:	f3bf 8f4f 	dsb	sy
 801133a:	607b      	str	r3, [r7, #4]
}
 801133c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801133e:	4b0f      	ldr	r3, [pc, #60]	; (801137c <vPortEnterCritical+0x58>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	3301      	adds	r3, #1
 8011344:	4a0d      	ldr	r2, [pc, #52]	; (801137c <vPortEnterCritical+0x58>)
 8011346:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011348:	4b0c      	ldr	r3, [pc, #48]	; (801137c <vPortEnterCritical+0x58>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	2b01      	cmp	r3, #1
 801134e:	d10f      	bne.n	8011370 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011350:	4b0b      	ldr	r3, [pc, #44]	; (8011380 <vPortEnterCritical+0x5c>)
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	b2db      	uxtb	r3, r3
 8011356:	2b00      	cmp	r3, #0
 8011358:	d00a      	beq.n	8011370 <vPortEnterCritical+0x4c>
	__asm volatile
 801135a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801135e:	f383 8811 	msr	BASEPRI, r3
 8011362:	f3bf 8f6f 	isb	sy
 8011366:	f3bf 8f4f 	dsb	sy
 801136a:	603b      	str	r3, [r7, #0]
}
 801136c:	bf00      	nop
 801136e:	e7fe      	b.n	801136e <vPortEnterCritical+0x4a>
	}
}
 8011370:	bf00      	nop
 8011372:	370c      	adds	r7, #12
 8011374:	46bd      	mov	sp, r7
 8011376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137a:	4770      	bx	lr
 801137c:	20000598 	.word	0x20000598
 8011380:	e000ed04 	.word	0xe000ed04

08011384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011384:	b480      	push	{r7}
 8011386:	b083      	sub	sp, #12
 8011388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801138a:	4b12      	ldr	r3, [pc, #72]	; (80113d4 <vPortExitCritical+0x50>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d10a      	bne.n	80113a8 <vPortExitCritical+0x24>
	__asm volatile
 8011392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011396:	f383 8811 	msr	BASEPRI, r3
 801139a:	f3bf 8f6f 	isb	sy
 801139e:	f3bf 8f4f 	dsb	sy
 80113a2:	607b      	str	r3, [r7, #4]
}
 80113a4:	bf00      	nop
 80113a6:	e7fe      	b.n	80113a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80113a8:	4b0a      	ldr	r3, [pc, #40]	; (80113d4 <vPortExitCritical+0x50>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	3b01      	subs	r3, #1
 80113ae:	4a09      	ldr	r2, [pc, #36]	; (80113d4 <vPortExitCritical+0x50>)
 80113b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80113b2:	4b08      	ldr	r3, [pc, #32]	; (80113d4 <vPortExitCritical+0x50>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d105      	bne.n	80113c6 <vPortExitCritical+0x42>
 80113ba:	2300      	movs	r3, #0
 80113bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80113be:	683b      	ldr	r3, [r7, #0]
 80113c0:	f383 8811 	msr	BASEPRI, r3
}
 80113c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80113c6:	bf00      	nop
 80113c8:	370c      	adds	r7, #12
 80113ca:	46bd      	mov	sp, r7
 80113cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d0:	4770      	bx	lr
 80113d2:	bf00      	nop
 80113d4:	20000598 	.word	0x20000598
	...

080113e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80113e0:	f3ef 8009 	mrs	r0, PSP
 80113e4:	f3bf 8f6f 	isb	sy
 80113e8:	4b15      	ldr	r3, [pc, #84]	; (8011440 <pxCurrentTCBConst>)
 80113ea:	681a      	ldr	r2, [r3, #0]
 80113ec:	f01e 0f10 	tst.w	lr, #16
 80113f0:	bf08      	it	eq
 80113f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80113f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113fa:	6010      	str	r0, [r2, #0]
 80113fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011404:	f380 8811 	msr	BASEPRI, r0
 8011408:	f3bf 8f4f 	dsb	sy
 801140c:	f3bf 8f6f 	isb	sy
 8011410:	f7fe fec0 	bl	8010194 <vTaskSwitchContext>
 8011414:	f04f 0000 	mov.w	r0, #0
 8011418:	f380 8811 	msr	BASEPRI, r0
 801141c:	bc09      	pop	{r0, r3}
 801141e:	6819      	ldr	r1, [r3, #0]
 8011420:	6808      	ldr	r0, [r1, #0]
 8011422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011426:	f01e 0f10 	tst.w	lr, #16
 801142a:	bf08      	it	eq
 801142c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011430:	f380 8809 	msr	PSP, r0
 8011434:	f3bf 8f6f 	isb	sy
 8011438:	4770      	bx	lr
 801143a:	bf00      	nop
 801143c:	f3af 8000 	nop.w

08011440 <pxCurrentTCBConst>:
 8011440:	20001e14 	.word	0x20001e14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011444:	bf00      	nop
 8011446:	bf00      	nop

08011448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
	__asm volatile
 801144e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011452:	f383 8811 	msr	BASEPRI, r3
 8011456:	f3bf 8f6f 	isb	sy
 801145a:	f3bf 8f4f 	dsb	sy
 801145e:	607b      	str	r3, [r7, #4]
}
 8011460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011462:	f7fe fddd 	bl	8010020 <xTaskIncrementTick>
 8011466:	4603      	mov	r3, r0
 8011468:	2b00      	cmp	r3, #0
 801146a:	d003      	beq.n	8011474 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801146c:	4b06      	ldr	r3, [pc, #24]	; (8011488 <xPortSysTickHandler+0x40>)
 801146e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011472:	601a      	str	r2, [r3, #0]
 8011474:	2300      	movs	r3, #0
 8011476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	f383 8811 	msr	BASEPRI, r3
}
 801147e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011480:	bf00      	nop
 8011482:	3708      	adds	r7, #8
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}
 8011488:	e000ed04 	.word	0xe000ed04

0801148c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801148c:	b480      	push	{r7}
 801148e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011490:	4b0b      	ldr	r3, [pc, #44]	; (80114c0 <vPortSetupTimerInterrupt+0x34>)
 8011492:	2200      	movs	r2, #0
 8011494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011496:	4b0b      	ldr	r3, [pc, #44]	; (80114c4 <vPortSetupTimerInterrupt+0x38>)
 8011498:	2200      	movs	r2, #0
 801149a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801149c:	4b0a      	ldr	r3, [pc, #40]	; (80114c8 <vPortSetupTimerInterrupt+0x3c>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	4a0a      	ldr	r2, [pc, #40]	; (80114cc <vPortSetupTimerInterrupt+0x40>)
 80114a2:	fba2 2303 	umull	r2, r3, r2, r3
 80114a6:	099b      	lsrs	r3, r3, #6
 80114a8:	4a09      	ldr	r2, [pc, #36]	; (80114d0 <vPortSetupTimerInterrupt+0x44>)
 80114aa:	3b01      	subs	r3, #1
 80114ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80114ae:	4b04      	ldr	r3, [pc, #16]	; (80114c0 <vPortSetupTimerInterrupt+0x34>)
 80114b0:	2207      	movs	r2, #7
 80114b2:	601a      	str	r2, [r3, #0]
}
 80114b4:	bf00      	nop
 80114b6:	46bd      	mov	sp, r7
 80114b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114bc:	4770      	bx	lr
 80114be:	bf00      	nop
 80114c0:	e000e010 	.word	0xe000e010
 80114c4:	e000e018 	.word	0xe000e018
 80114c8:	200004ec 	.word	0x200004ec
 80114cc:	10624dd3 	.word	0x10624dd3
 80114d0:	e000e014 	.word	0xe000e014

080114d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80114d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80114e4 <vPortEnableVFP+0x10>
 80114d8:	6801      	ldr	r1, [r0, #0]
 80114da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80114de:	6001      	str	r1, [r0, #0]
 80114e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80114e2:	bf00      	nop
 80114e4:	e000ed88 	.word	0xe000ed88

080114e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80114e8:	b480      	push	{r7}
 80114ea:	b085      	sub	sp, #20
 80114ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80114ee:	f3ef 8305 	mrs	r3, IPSR
 80114f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	2b0f      	cmp	r3, #15
 80114f8:	d914      	bls.n	8011524 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80114fa:	4a17      	ldr	r2, [pc, #92]	; (8011558 <vPortValidateInterruptPriority+0x70>)
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	4413      	add	r3, r2
 8011500:	781b      	ldrb	r3, [r3, #0]
 8011502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011504:	4b15      	ldr	r3, [pc, #84]	; (801155c <vPortValidateInterruptPriority+0x74>)
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	7afa      	ldrb	r2, [r7, #11]
 801150a:	429a      	cmp	r2, r3
 801150c:	d20a      	bcs.n	8011524 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801150e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011512:	f383 8811 	msr	BASEPRI, r3
 8011516:	f3bf 8f6f 	isb	sy
 801151a:	f3bf 8f4f 	dsb	sy
 801151e:	607b      	str	r3, [r7, #4]
}
 8011520:	bf00      	nop
 8011522:	e7fe      	b.n	8011522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011524:	4b0e      	ldr	r3, [pc, #56]	; (8011560 <vPortValidateInterruptPriority+0x78>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801152c:	4b0d      	ldr	r3, [pc, #52]	; (8011564 <vPortValidateInterruptPriority+0x7c>)
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	429a      	cmp	r2, r3
 8011532:	d90a      	bls.n	801154a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011538:	f383 8811 	msr	BASEPRI, r3
 801153c:	f3bf 8f6f 	isb	sy
 8011540:	f3bf 8f4f 	dsb	sy
 8011544:	603b      	str	r3, [r7, #0]
}
 8011546:	bf00      	nop
 8011548:	e7fe      	b.n	8011548 <vPortValidateInterruptPriority+0x60>
	}
 801154a:	bf00      	nop
 801154c:	3714      	adds	r7, #20
 801154e:	46bd      	mov	sp, r7
 8011550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011554:	4770      	bx	lr
 8011556:	bf00      	nop
 8011558:	e000e3f0 	.word	0xe000e3f0
 801155c:	20002440 	.word	0x20002440
 8011560:	e000ed0c 	.word	0xe000ed0c
 8011564:	20002444 	.word	0x20002444

08011568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b08a      	sub	sp, #40	; 0x28
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011570:	2300      	movs	r3, #0
 8011572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011574:	f7fe fc98 	bl	800fea8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011578:	4b5b      	ldr	r3, [pc, #364]	; (80116e8 <pvPortMalloc+0x180>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d101      	bne.n	8011584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011580:	f000 f920 	bl	80117c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011584:	4b59      	ldr	r3, [pc, #356]	; (80116ec <pvPortMalloc+0x184>)
 8011586:	681a      	ldr	r2, [r3, #0]
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	4013      	ands	r3, r2
 801158c:	2b00      	cmp	r3, #0
 801158e:	f040 8093 	bne.w	80116b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d01d      	beq.n	80115d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011598:	2208      	movs	r2, #8
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	4413      	add	r3, r2
 801159e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f003 0307 	and.w	r3, r3, #7
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d014      	beq.n	80115d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f023 0307 	bic.w	r3, r3, #7
 80115b0:	3308      	adds	r3, #8
 80115b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	f003 0307 	and.w	r3, r3, #7
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d00a      	beq.n	80115d4 <pvPortMalloc+0x6c>
	__asm volatile
 80115be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115c2:	f383 8811 	msr	BASEPRI, r3
 80115c6:	f3bf 8f6f 	isb	sy
 80115ca:	f3bf 8f4f 	dsb	sy
 80115ce:	617b      	str	r3, [r7, #20]
}
 80115d0:	bf00      	nop
 80115d2:	e7fe      	b.n	80115d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d06e      	beq.n	80116b8 <pvPortMalloc+0x150>
 80115da:	4b45      	ldr	r3, [pc, #276]	; (80116f0 <pvPortMalloc+0x188>)
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	687a      	ldr	r2, [r7, #4]
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d869      	bhi.n	80116b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80115e4:	4b43      	ldr	r3, [pc, #268]	; (80116f4 <pvPortMalloc+0x18c>)
 80115e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80115e8:	4b42      	ldr	r3, [pc, #264]	; (80116f4 <pvPortMalloc+0x18c>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80115ee:	e004      	b.n	80115fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80115f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80115f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80115fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115fc:	685b      	ldr	r3, [r3, #4]
 80115fe:	687a      	ldr	r2, [r7, #4]
 8011600:	429a      	cmp	r2, r3
 8011602:	d903      	bls.n	801160c <pvPortMalloc+0xa4>
 8011604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d1f1      	bne.n	80115f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801160c:	4b36      	ldr	r3, [pc, #216]	; (80116e8 <pvPortMalloc+0x180>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011612:	429a      	cmp	r2, r3
 8011614:	d050      	beq.n	80116b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011616:	6a3b      	ldr	r3, [r7, #32]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	2208      	movs	r2, #8
 801161c:	4413      	add	r3, r2
 801161e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011622:	681a      	ldr	r2, [r3, #0]
 8011624:	6a3b      	ldr	r3, [r7, #32]
 8011626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801162a:	685a      	ldr	r2, [r3, #4]
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	1ad2      	subs	r2, r2, r3
 8011630:	2308      	movs	r3, #8
 8011632:	005b      	lsls	r3, r3, #1
 8011634:	429a      	cmp	r2, r3
 8011636:	d91f      	bls.n	8011678 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	4413      	add	r3, r2
 801163e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011640:	69bb      	ldr	r3, [r7, #24]
 8011642:	f003 0307 	and.w	r3, r3, #7
 8011646:	2b00      	cmp	r3, #0
 8011648:	d00a      	beq.n	8011660 <pvPortMalloc+0xf8>
	__asm volatile
 801164a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801164e:	f383 8811 	msr	BASEPRI, r3
 8011652:	f3bf 8f6f 	isb	sy
 8011656:	f3bf 8f4f 	dsb	sy
 801165a:	613b      	str	r3, [r7, #16]
}
 801165c:	bf00      	nop
 801165e:	e7fe      	b.n	801165e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011662:	685a      	ldr	r2, [r3, #4]
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	1ad2      	subs	r2, r2, r3
 8011668:	69bb      	ldr	r3, [r7, #24]
 801166a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801166e:	687a      	ldr	r2, [r7, #4]
 8011670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011672:	69b8      	ldr	r0, [r7, #24]
 8011674:	f000 f908 	bl	8011888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011678:	4b1d      	ldr	r3, [pc, #116]	; (80116f0 <pvPortMalloc+0x188>)
 801167a:	681a      	ldr	r2, [r3, #0]
 801167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801167e:	685b      	ldr	r3, [r3, #4]
 8011680:	1ad3      	subs	r3, r2, r3
 8011682:	4a1b      	ldr	r2, [pc, #108]	; (80116f0 <pvPortMalloc+0x188>)
 8011684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011686:	4b1a      	ldr	r3, [pc, #104]	; (80116f0 <pvPortMalloc+0x188>)
 8011688:	681a      	ldr	r2, [r3, #0]
 801168a:	4b1b      	ldr	r3, [pc, #108]	; (80116f8 <pvPortMalloc+0x190>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	429a      	cmp	r2, r3
 8011690:	d203      	bcs.n	801169a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011692:	4b17      	ldr	r3, [pc, #92]	; (80116f0 <pvPortMalloc+0x188>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	4a18      	ldr	r2, [pc, #96]	; (80116f8 <pvPortMalloc+0x190>)
 8011698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801169c:	685a      	ldr	r2, [r3, #4]
 801169e:	4b13      	ldr	r3, [pc, #76]	; (80116ec <pvPortMalloc+0x184>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	431a      	orrs	r2, r3
 80116a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80116a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116aa:	2200      	movs	r2, #0
 80116ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80116ae:	4b13      	ldr	r3, [pc, #76]	; (80116fc <pvPortMalloc+0x194>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	3301      	adds	r3, #1
 80116b4:	4a11      	ldr	r2, [pc, #68]	; (80116fc <pvPortMalloc+0x194>)
 80116b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80116b8:	f7fe fc04 	bl	800fec4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80116bc:	69fb      	ldr	r3, [r7, #28]
 80116be:	f003 0307 	and.w	r3, r3, #7
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d00a      	beq.n	80116dc <pvPortMalloc+0x174>
	__asm volatile
 80116c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ca:	f383 8811 	msr	BASEPRI, r3
 80116ce:	f3bf 8f6f 	isb	sy
 80116d2:	f3bf 8f4f 	dsb	sy
 80116d6:	60fb      	str	r3, [r7, #12]
}
 80116d8:	bf00      	nop
 80116da:	e7fe      	b.n	80116da <pvPortMalloc+0x172>
	return pvReturn;
 80116dc:	69fb      	ldr	r3, [r7, #28]
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3728      	adds	r7, #40	; 0x28
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	20006050 	.word	0x20006050
 80116ec:	20006064 	.word	0x20006064
 80116f0:	20006054 	.word	0x20006054
 80116f4:	20006048 	.word	0x20006048
 80116f8:	20006058 	.word	0x20006058
 80116fc:	2000605c 	.word	0x2000605c

08011700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b086      	sub	sp, #24
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d04d      	beq.n	80117ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011712:	2308      	movs	r3, #8
 8011714:	425b      	negs	r3, r3
 8011716:	697a      	ldr	r2, [r7, #20]
 8011718:	4413      	add	r3, r2
 801171a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011720:	693b      	ldr	r3, [r7, #16]
 8011722:	685a      	ldr	r2, [r3, #4]
 8011724:	4b24      	ldr	r3, [pc, #144]	; (80117b8 <vPortFree+0xb8>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	4013      	ands	r3, r2
 801172a:	2b00      	cmp	r3, #0
 801172c:	d10a      	bne.n	8011744 <vPortFree+0x44>
	__asm volatile
 801172e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011732:	f383 8811 	msr	BASEPRI, r3
 8011736:	f3bf 8f6f 	isb	sy
 801173a:	f3bf 8f4f 	dsb	sy
 801173e:	60fb      	str	r3, [r7, #12]
}
 8011740:	bf00      	nop
 8011742:	e7fe      	b.n	8011742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011744:	693b      	ldr	r3, [r7, #16]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d00a      	beq.n	8011762 <vPortFree+0x62>
	__asm volatile
 801174c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011750:	f383 8811 	msr	BASEPRI, r3
 8011754:	f3bf 8f6f 	isb	sy
 8011758:	f3bf 8f4f 	dsb	sy
 801175c:	60bb      	str	r3, [r7, #8]
}
 801175e:	bf00      	nop
 8011760:	e7fe      	b.n	8011760 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011762:	693b      	ldr	r3, [r7, #16]
 8011764:	685a      	ldr	r2, [r3, #4]
 8011766:	4b14      	ldr	r3, [pc, #80]	; (80117b8 <vPortFree+0xb8>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	4013      	ands	r3, r2
 801176c:	2b00      	cmp	r3, #0
 801176e:	d01e      	beq.n	80117ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d11a      	bne.n	80117ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011778:	693b      	ldr	r3, [r7, #16]
 801177a:	685a      	ldr	r2, [r3, #4]
 801177c:	4b0e      	ldr	r3, [pc, #56]	; (80117b8 <vPortFree+0xb8>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	43db      	mvns	r3, r3
 8011782:	401a      	ands	r2, r3
 8011784:	693b      	ldr	r3, [r7, #16]
 8011786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011788:	f7fe fb8e 	bl	800fea8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801178c:	693b      	ldr	r3, [r7, #16]
 801178e:	685a      	ldr	r2, [r3, #4]
 8011790:	4b0a      	ldr	r3, [pc, #40]	; (80117bc <vPortFree+0xbc>)
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	4413      	add	r3, r2
 8011796:	4a09      	ldr	r2, [pc, #36]	; (80117bc <vPortFree+0xbc>)
 8011798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801179a:	6938      	ldr	r0, [r7, #16]
 801179c:	f000 f874 	bl	8011888 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80117a0:	4b07      	ldr	r3, [pc, #28]	; (80117c0 <vPortFree+0xc0>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	3301      	adds	r3, #1
 80117a6:	4a06      	ldr	r2, [pc, #24]	; (80117c0 <vPortFree+0xc0>)
 80117a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80117aa:	f7fe fb8b 	bl	800fec4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80117ae:	bf00      	nop
 80117b0:	3718      	adds	r7, #24
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}
 80117b6:	bf00      	nop
 80117b8:	20006064 	.word	0x20006064
 80117bc:	20006054 	.word	0x20006054
 80117c0:	20006060 	.word	0x20006060

080117c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80117c4:	b480      	push	{r7}
 80117c6:	b085      	sub	sp, #20
 80117c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80117ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80117ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80117d0:	4b27      	ldr	r3, [pc, #156]	; (8011870 <prvHeapInit+0xac>)
 80117d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	f003 0307 	and.w	r3, r3, #7
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d00c      	beq.n	80117f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	3307      	adds	r3, #7
 80117e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	f023 0307 	bic.w	r3, r3, #7
 80117ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80117ec:	68ba      	ldr	r2, [r7, #8]
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	1ad3      	subs	r3, r2, r3
 80117f2:	4a1f      	ldr	r2, [pc, #124]	; (8011870 <prvHeapInit+0xac>)
 80117f4:	4413      	add	r3, r2
 80117f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80117fc:	4a1d      	ldr	r2, [pc, #116]	; (8011874 <prvHeapInit+0xb0>)
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011802:	4b1c      	ldr	r3, [pc, #112]	; (8011874 <prvHeapInit+0xb0>)
 8011804:	2200      	movs	r2, #0
 8011806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	68ba      	ldr	r2, [r7, #8]
 801180c:	4413      	add	r3, r2
 801180e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011810:	2208      	movs	r2, #8
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	1a9b      	subs	r3, r3, r2
 8011816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	f023 0307 	bic.w	r3, r3, #7
 801181e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	4a15      	ldr	r2, [pc, #84]	; (8011878 <prvHeapInit+0xb4>)
 8011824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011826:	4b14      	ldr	r3, [pc, #80]	; (8011878 <prvHeapInit+0xb4>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	2200      	movs	r2, #0
 801182c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801182e:	4b12      	ldr	r3, [pc, #72]	; (8011878 <prvHeapInit+0xb4>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	2200      	movs	r2, #0
 8011834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	68fa      	ldr	r2, [r7, #12]
 801183e:	1ad2      	subs	r2, r2, r3
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011844:	4b0c      	ldr	r3, [pc, #48]	; (8011878 <prvHeapInit+0xb4>)
 8011846:	681a      	ldr	r2, [r3, #0]
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	685b      	ldr	r3, [r3, #4]
 8011850:	4a0a      	ldr	r2, [pc, #40]	; (801187c <prvHeapInit+0xb8>)
 8011852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	4a09      	ldr	r2, [pc, #36]	; (8011880 <prvHeapInit+0xbc>)
 801185a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801185c:	4b09      	ldr	r3, [pc, #36]	; (8011884 <prvHeapInit+0xc0>)
 801185e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011862:	601a      	str	r2, [r3, #0]
}
 8011864:	bf00      	nop
 8011866:	3714      	adds	r7, #20
 8011868:	46bd      	mov	sp, r7
 801186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186e:	4770      	bx	lr
 8011870:	20002448 	.word	0x20002448
 8011874:	20006048 	.word	0x20006048
 8011878:	20006050 	.word	0x20006050
 801187c:	20006058 	.word	0x20006058
 8011880:	20006054 	.word	0x20006054
 8011884:	20006064 	.word	0x20006064

08011888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011888:	b480      	push	{r7}
 801188a:	b085      	sub	sp, #20
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011890:	4b28      	ldr	r3, [pc, #160]	; (8011934 <prvInsertBlockIntoFreeList+0xac>)
 8011892:	60fb      	str	r3, [r7, #12]
 8011894:	e002      	b.n	801189c <prvInsertBlockIntoFreeList+0x14>
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	60fb      	str	r3, [r7, #12]
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	687a      	ldr	r2, [r7, #4]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d8f7      	bhi.n	8011896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	685b      	ldr	r3, [r3, #4]
 80118ae:	68ba      	ldr	r2, [r7, #8]
 80118b0:	4413      	add	r3, r2
 80118b2:	687a      	ldr	r2, [r7, #4]
 80118b4:	429a      	cmp	r2, r3
 80118b6:	d108      	bne.n	80118ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	685a      	ldr	r2, [r3, #4]
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	685b      	ldr	r3, [r3, #4]
 80118c0:	441a      	add	r2, r3
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	685b      	ldr	r3, [r3, #4]
 80118d2:	68ba      	ldr	r2, [r7, #8]
 80118d4:	441a      	add	r2, r3
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	429a      	cmp	r2, r3
 80118dc:	d118      	bne.n	8011910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	681a      	ldr	r2, [r3, #0]
 80118e2:	4b15      	ldr	r3, [pc, #84]	; (8011938 <prvInsertBlockIntoFreeList+0xb0>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d00d      	beq.n	8011906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	685a      	ldr	r2, [r3, #4]
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	685b      	ldr	r3, [r3, #4]
 80118f4:	441a      	add	r2, r3
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	681a      	ldr	r2, [r3, #0]
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	601a      	str	r2, [r3, #0]
 8011904:	e008      	b.n	8011918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011906:	4b0c      	ldr	r3, [pc, #48]	; (8011938 <prvInsertBlockIntoFreeList+0xb0>)
 8011908:	681a      	ldr	r2, [r3, #0]
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	601a      	str	r2, [r3, #0]
 801190e:	e003      	b.n	8011918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	681a      	ldr	r2, [r3, #0]
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011918:	68fa      	ldr	r2, [r7, #12]
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	429a      	cmp	r2, r3
 801191e:	d002      	beq.n	8011926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	687a      	ldr	r2, [r7, #4]
 8011924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011926:	bf00      	nop
 8011928:	3714      	adds	r7, #20
 801192a:	46bd      	mov	sp, r7
 801192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011930:	4770      	bx	lr
 8011932:	bf00      	nop
 8011934:	20006048 	.word	0x20006048
 8011938:	20006050 	.word	0x20006050

0801193c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011940:	2200      	movs	r2, #0
 8011942:	4912      	ldr	r1, [pc, #72]	; (801198c <MX_USB_DEVICE_Init+0x50>)
 8011944:	4812      	ldr	r0, [pc, #72]	; (8011990 <MX_USB_DEVICE_Init+0x54>)
 8011946:	f7f8 f8ab 	bl	8009aa0 <USBD_Init>
 801194a:	4603      	mov	r3, r0
 801194c:	2b00      	cmp	r3, #0
 801194e:	d001      	beq.n	8011954 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011950:	f7f0 fda0 	bl	8002494 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011954:	490f      	ldr	r1, [pc, #60]	; (8011994 <MX_USB_DEVICE_Init+0x58>)
 8011956:	480e      	ldr	r0, [pc, #56]	; (8011990 <MX_USB_DEVICE_Init+0x54>)
 8011958:	f7f8 f8d2 	bl	8009b00 <USBD_RegisterClass>
 801195c:	4603      	mov	r3, r0
 801195e:	2b00      	cmp	r3, #0
 8011960:	d001      	beq.n	8011966 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011962:	f7f0 fd97 	bl	8002494 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011966:	490c      	ldr	r1, [pc, #48]	; (8011998 <MX_USB_DEVICE_Init+0x5c>)
 8011968:	4809      	ldr	r0, [pc, #36]	; (8011990 <MX_USB_DEVICE_Init+0x54>)
 801196a:	f7f7 ffc3 	bl	80098f4 <USBD_CDC_RegisterInterface>
 801196e:	4603      	mov	r3, r0
 8011970:	2b00      	cmp	r3, #0
 8011972:	d001      	beq.n	8011978 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011974:	f7f0 fd8e 	bl	8002494 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011978:	4805      	ldr	r0, [pc, #20]	; (8011990 <MX_USB_DEVICE_Init+0x54>)
 801197a:	f7f8 f8f7 	bl	8009b6c <USBD_Start>
 801197e:	4603      	mov	r3, r0
 8011980:	2b00      	cmp	r3, #0
 8011982:	d001      	beq.n	8011988 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011984:	f7f0 fd86 	bl	8002494 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011988:	bf00      	nop
 801198a:	bd80      	pop	{r7, pc}
 801198c:	200005b0 	.word	0x200005b0
 8011990:	20006068 	.word	0x20006068
 8011994:	20000518 	.word	0x20000518
 8011998:	2000059c 	.word	0x2000059c

0801199c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80119a0:	2200      	movs	r2, #0
 80119a2:	4905      	ldr	r1, [pc, #20]	; (80119b8 <CDC_Init_FS+0x1c>)
 80119a4:	4805      	ldr	r0, [pc, #20]	; (80119bc <CDC_Init_FS+0x20>)
 80119a6:	f7f7 ffbf 	bl	8009928 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80119aa:	4905      	ldr	r1, [pc, #20]	; (80119c0 <CDC_Init_FS+0x24>)
 80119ac:	4803      	ldr	r0, [pc, #12]	; (80119bc <CDC_Init_FS+0x20>)
 80119ae:	f7f7 ffdd 	bl	800996c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80119b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80119b4:	4618      	mov	r0, r3
 80119b6:	bd80      	pop	{r7, pc}
 80119b8:	20006744 	.word	0x20006744
 80119bc:	20006068 	.word	0x20006068
 80119c0:	20006344 	.word	0x20006344

080119c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80119c4:	b480      	push	{r7}
 80119c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80119c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	46bd      	mov	sp, r7
 80119ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d2:	4770      	bx	lr

080119d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80119d4:	b480      	push	{r7}
 80119d6:	b083      	sub	sp, #12
 80119d8:	af00      	add	r7, sp, #0
 80119da:	4603      	mov	r3, r0
 80119dc:	6039      	str	r1, [r7, #0]
 80119de:	71fb      	strb	r3, [r7, #7]
 80119e0:	4613      	mov	r3, r2
 80119e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80119e4:	79fb      	ldrb	r3, [r7, #7]
 80119e6:	2b23      	cmp	r3, #35	; 0x23
 80119e8:	d84a      	bhi.n	8011a80 <CDC_Control_FS+0xac>
 80119ea:	a201      	add	r2, pc, #4	; (adr r2, 80119f0 <CDC_Control_FS+0x1c>)
 80119ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119f0:	08011a81 	.word	0x08011a81
 80119f4:	08011a81 	.word	0x08011a81
 80119f8:	08011a81 	.word	0x08011a81
 80119fc:	08011a81 	.word	0x08011a81
 8011a00:	08011a81 	.word	0x08011a81
 8011a04:	08011a81 	.word	0x08011a81
 8011a08:	08011a81 	.word	0x08011a81
 8011a0c:	08011a81 	.word	0x08011a81
 8011a10:	08011a81 	.word	0x08011a81
 8011a14:	08011a81 	.word	0x08011a81
 8011a18:	08011a81 	.word	0x08011a81
 8011a1c:	08011a81 	.word	0x08011a81
 8011a20:	08011a81 	.word	0x08011a81
 8011a24:	08011a81 	.word	0x08011a81
 8011a28:	08011a81 	.word	0x08011a81
 8011a2c:	08011a81 	.word	0x08011a81
 8011a30:	08011a81 	.word	0x08011a81
 8011a34:	08011a81 	.word	0x08011a81
 8011a38:	08011a81 	.word	0x08011a81
 8011a3c:	08011a81 	.word	0x08011a81
 8011a40:	08011a81 	.word	0x08011a81
 8011a44:	08011a81 	.word	0x08011a81
 8011a48:	08011a81 	.word	0x08011a81
 8011a4c:	08011a81 	.word	0x08011a81
 8011a50:	08011a81 	.word	0x08011a81
 8011a54:	08011a81 	.word	0x08011a81
 8011a58:	08011a81 	.word	0x08011a81
 8011a5c:	08011a81 	.word	0x08011a81
 8011a60:	08011a81 	.word	0x08011a81
 8011a64:	08011a81 	.word	0x08011a81
 8011a68:	08011a81 	.word	0x08011a81
 8011a6c:	08011a81 	.word	0x08011a81
 8011a70:	08011a81 	.word	0x08011a81
 8011a74:	08011a81 	.word	0x08011a81
 8011a78:	08011a81 	.word	0x08011a81
 8011a7c:	08011a81 	.word	0x08011a81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011a80:	bf00      	nop
  }

  return (USBD_OK);
 8011a82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011a84:	4618      	mov	r0, r3
 8011a86:	370c      	adds	r7, #12
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8e:	4770      	bx	lr

08011a90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b082      	sub	sp, #8
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
 8011a98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011a9a:	6879      	ldr	r1, [r7, #4]
 8011a9c:	4805      	ldr	r0, [pc, #20]	; (8011ab4 <CDC_Receive_FS+0x24>)
 8011a9e:	f7f7 ff65 	bl	800996c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011aa2:	4804      	ldr	r0, [pc, #16]	; (8011ab4 <CDC_Receive_FS+0x24>)
 8011aa4:	f7f7 ffc6 	bl	8009a34 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011aa8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3708      	adds	r7, #8
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}
 8011ab2:	bf00      	nop
 8011ab4:	20006068 	.word	0x20006068

08011ab8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b084      	sub	sp, #16
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
 8011ac0:	460b      	mov	r3, r1
 8011ac2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011ac8:	4b0d      	ldr	r3, [pc, #52]	; (8011b00 <CDC_Transmit_FS+0x48>)
 8011aca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011ace:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d001      	beq.n	8011ade <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011ada:	2301      	movs	r3, #1
 8011adc:	e00b      	b.n	8011af6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011ade:	887b      	ldrh	r3, [r7, #2]
 8011ae0:	461a      	mov	r2, r3
 8011ae2:	6879      	ldr	r1, [r7, #4]
 8011ae4:	4806      	ldr	r0, [pc, #24]	; (8011b00 <CDC_Transmit_FS+0x48>)
 8011ae6:	f7f7 ff1f 	bl	8009928 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011aea:	4805      	ldr	r0, [pc, #20]	; (8011b00 <CDC_Transmit_FS+0x48>)
 8011aec:	f7f7 ff5c 	bl	80099a8 <USBD_CDC_TransmitPacket>
 8011af0:	4603      	mov	r3, r0
 8011af2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	3710      	adds	r7, #16
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}
 8011afe:	bf00      	nop
 8011b00:	20006068 	.word	0x20006068

08011b04 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011b04:	b480      	push	{r7}
 8011b06:	b087      	sub	sp, #28
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	60f8      	str	r0, [r7, #12]
 8011b0c:	60b9      	str	r1, [r7, #8]
 8011b0e:	4613      	mov	r3, r2
 8011b10:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011b12:	2300      	movs	r3, #0
 8011b14:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011b16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	371c      	adds	r7, #28
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr
	...

08011b28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b28:	b480      	push	{r7}
 8011b2a:	b083      	sub	sp, #12
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	4603      	mov	r3, r0
 8011b30:	6039      	str	r1, [r7, #0]
 8011b32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	2212      	movs	r2, #18
 8011b38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011b3a:	4b03      	ldr	r3, [pc, #12]	; (8011b48 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	370c      	adds	r7, #12
 8011b40:	46bd      	mov	sp, r7
 8011b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b46:	4770      	bx	lr
 8011b48:	200005cc 	.word	0x200005cc

08011b4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b4c:	b480      	push	{r7}
 8011b4e:	b083      	sub	sp, #12
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	4603      	mov	r3, r0
 8011b54:	6039      	str	r1, [r7, #0]
 8011b56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	2204      	movs	r2, #4
 8011b5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011b5e:	4b03      	ldr	r3, [pc, #12]	; (8011b6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	370c      	adds	r7, #12
 8011b64:	46bd      	mov	sp, r7
 8011b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6a:	4770      	bx	lr
 8011b6c:	200005e0 	.word	0x200005e0

08011b70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b082      	sub	sp, #8
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	4603      	mov	r3, r0
 8011b78:	6039      	str	r1, [r7, #0]
 8011b7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011b7c:	79fb      	ldrb	r3, [r7, #7]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d105      	bne.n	8011b8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011b82:	683a      	ldr	r2, [r7, #0]
 8011b84:	4907      	ldr	r1, [pc, #28]	; (8011ba4 <USBD_FS_ProductStrDescriptor+0x34>)
 8011b86:	4808      	ldr	r0, [pc, #32]	; (8011ba8 <USBD_FS_ProductStrDescriptor+0x38>)
 8011b88:	f7f9 f99c 	bl	800aec4 <USBD_GetString>
 8011b8c:	e004      	b.n	8011b98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011b8e:	683a      	ldr	r2, [r7, #0]
 8011b90:	4904      	ldr	r1, [pc, #16]	; (8011ba4 <USBD_FS_ProductStrDescriptor+0x34>)
 8011b92:	4805      	ldr	r0, [pc, #20]	; (8011ba8 <USBD_FS_ProductStrDescriptor+0x38>)
 8011b94:	f7f9 f996 	bl	800aec4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011b98:	4b02      	ldr	r3, [pc, #8]	; (8011ba4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	3708      	adds	r7, #8
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}
 8011ba2:	bf00      	nop
 8011ba4:	20006b44 	.word	0x20006b44
 8011ba8:	08012f1c 	.word	0x08012f1c

08011bac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	6039      	str	r1, [r7, #0]
 8011bb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011bb8:	683a      	ldr	r2, [r7, #0]
 8011bba:	4904      	ldr	r1, [pc, #16]	; (8011bcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011bbc:	4804      	ldr	r0, [pc, #16]	; (8011bd0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011bbe:	f7f9 f981 	bl	800aec4 <USBD_GetString>
  return USBD_StrDesc;
 8011bc2:	4b02      	ldr	r3, [pc, #8]	; (8011bcc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3708      	adds	r7, #8
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}
 8011bcc:	20006b44 	.word	0x20006b44
 8011bd0:	08012f34 	.word	0x08012f34

08011bd4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b082      	sub	sp, #8
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	4603      	mov	r3, r0
 8011bdc:	6039      	str	r1, [r7, #0]
 8011bde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	221a      	movs	r2, #26
 8011be4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011be6:	f000 f843 	bl	8011c70 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011bea:	4b02      	ldr	r3, [pc, #8]	; (8011bf4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3708      	adds	r7, #8
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}
 8011bf4:	200005e4 	.word	0x200005e4

08011bf8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b082      	sub	sp, #8
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	4603      	mov	r3, r0
 8011c00:	6039      	str	r1, [r7, #0]
 8011c02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011c04:	79fb      	ldrb	r3, [r7, #7]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d105      	bne.n	8011c16 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011c0a:	683a      	ldr	r2, [r7, #0]
 8011c0c:	4907      	ldr	r1, [pc, #28]	; (8011c2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8011c0e:	4808      	ldr	r0, [pc, #32]	; (8011c30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011c10:	f7f9 f958 	bl	800aec4 <USBD_GetString>
 8011c14:	e004      	b.n	8011c20 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011c16:	683a      	ldr	r2, [r7, #0]
 8011c18:	4904      	ldr	r1, [pc, #16]	; (8011c2c <USBD_FS_ConfigStrDescriptor+0x34>)
 8011c1a:	4805      	ldr	r0, [pc, #20]	; (8011c30 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011c1c:	f7f9 f952 	bl	800aec4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011c20:	4b02      	ldr	r3, [pc, #8]	; (8011c2c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011c22:	4618      	mov	r0, r3
 8011c24:	3708      	adds	r7, #8
 8011c26:	46bd      	mov	sp, r7
 8011c28:	bd80      	pop	{r7, pc}
 8011c2a:	bf00      	nop
 8011c2c:	20006b44 	.word	0x20006b44
 8011c30:	08012f48 	.word	0x08012f48

08011c34 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b082      	sub	sp, #8
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	6039      	str	r1, [r7, #0]
 8011c3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011c40:	79fb      	ldrb	r3, [r7, #7]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d105      	bne.n	8011c52 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011c46:	683a      	ldr	r2, [r7, #0]
 8011c48:	4907      	ldr	r1, [pc, #28]	; (8011c68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011c4a:	4808      	ldr	r0, [pc, #32]	; (8011c6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011c4c:	f7f9 f93a 	bl	800aec4 <USBD_GetString>
 8011c50:	e004      	b.n	8011c5c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011c52:	683a      	ldr	r2, [r7, #0]
 8011c54:	4904      	ldr	r1, [pc, #16]	; (8011c68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011c56:	4805      	ldr	r0, [pc, #20]	; (8011c6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011c58:	f7f9 f934 	bl	800aec4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011c5c:	4b02      	ldr	r3, [pc, #8]	; (8011c68 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	3708      	adds	r7, #8
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}
 8011c66:	bf00      	nop
 8011c68:	20006b44 	.word	0x20006b44
 8011c6c:	08012f54 	.word	0x08012f54

08011c70 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b084      	sub	sp, #16
 8011c74:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011c76:	4b0f      	ldr	r3, [pc, #60]	; (8011cb4 <Get_SerialNum+0x44>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011c7c:	4b0e      	ldr	r3, [pc, #56]	; (8011cb8 <Get_SerialNum+0x48>)
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011c82:	4b0e      	ldr	r3, [pc, #56]	; (8011cbc <Get_SerialNum+0x4c>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011c88:	68fa      	ldr	r2, [r7, #12]
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	4413      	add	r3, r2
 8011c8e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d009      	beq.n	8011caa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011c96:	2208      	movs	r2, #8
 8011c98:	4909      	ldr	r1, [pc, #36]	; (8011cc0 <Get_SerialNum+0x50>)
 8011c9a:	68f8      	ldr	r0, [r7, #12]
 8011c9c:	f000 f814 	bl	8011cc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011ca0:	2204      	movs	r2, #4
 8011ca2:	4908      	ldr	r1, [pc, #32]	; (8011cc4 <Get_SerialNum+0x54>)
 8011ca4:	68b8      	ldr	r0, [r7, #8]
 8011ca6:	f000 f80f 	bl	8011cc8 <IntToUnicode>
  }
}
 8011caa:	bf00      	nop
 8011cac:	3710      	adds	r7, #16
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd80      	pop	{r7, pc}
 8011cb2:	bf00      	nop
 8011cb4:	1fff7a10 	.word	0x1fff7a10
 8011cb8:	1fff7a14 	.word	0x1fff7a14
 8011cbc:	1fff7a18 	.word	0x1fff7a18
 8011cc0:	200005e6 	.word	0x200005e6
 8011cc4:	200005f6 	.word	0x200005f6

08011cc8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011cc8:	b480      	push	{r7}
 8011cca:	b087      	sub	sp, #28
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	60f8      	str	r0, [r7, #12]
 8011cd0:	60b9      	str	r1, [r7, #8]
 8011cd2:	4613      	mov	r3, r2
 8011cd4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011cda:	2300      	movs	r3, #0
 8011cdc:	75fb      	strb	r3, [r7, #23]
 8011cde:	e027      	b.n	8011d30 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	0f1b      	lsrs	r3, r3, #28
 8011ce4:	2b09      	cmp	r3, #9
 8011ce6:	d80b      	bhi.n	8011d00 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	0f1b      	lsrs	r3, r3, #28
 8011cec:	b2da      	uxtb	r2, r3
 8011cee:	7dfb      	ldrb	r3, [r7, #23]
 8011cf0:	005b      	lsls	r3, r3, #1
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	440b      	add	r3, r1
 8011cf8:	3230      	adds	r2, #48	; 0x30
 8011cfa:	b2d2      	uxtb	r2, r2
 8011cfc:	701a      	strb	r2, [r3, #0]
 8011cfe:	e00a      	b.n	8011d16 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	0f1b      	lsrs	r3, r3, #28
 8011d04:	b2da      	uxtb	r2, r3
 8011d06:	7dfb      	ldrb	r3, [r7, #23]
 8011d08:	005b      	lsls	r3, r3, #1
 8011d0a:	4619      	mov	r1, r3
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	440b      	add	r3, r1
 8011d10:	3237      	adds	r2, #55	; 0x37
 8011d12:	b2d2      	uxtb	r2, r2
 8011d14:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	011b      	lsls	r3, r3, #4
 8011d1a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011d1c:	7dfb      	ldrb	r3, [r7, #23]
 8011d1e:	005b      	lsls	r3, r3, #1
 8011d20:	3301      	adds	r3, #1
 8011d22:	68ba      	ldr	r2, [r7, #8]
 8011d24:	4413      	add	r3, r2
 8011d26:	2200      	movs	r2, #0
 8011d28:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011d2a:	7dfb      	ldrb	r3, [r7, #23]
 8011d2c:	3301      	adds	r3, #1
 8011d2e:	75fb      	strb	r3, [r7, #23]
 8011d30:	7dfa      	ldrb	r2, [r7, #23]
 8011d32:	79fb      	ldrb	r3, [r7, #7]
 8011d34:	429a      	cmp	r2, r3
 8011d36:	d3d3      	bcc.n	8011ce0 <IntToUnicode+0x18>
  }
}
 8011d38:	bf00      	nop
 8011d3a:	bf00      	nop
 8011d3c:	371c      	adds	r7, #28
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d44:	4770      	bx	lr
	...

08011d48 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b08a      	sub	sp, #40	; 0x28
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011d50:	f107 0314 	add.w	r3, r7, #20
 8011d54:	2200      	movs	r2, #0
 8011d56:	601a      	str	r2, [r3, #0]
 8011d58:	605a      	str	r2, [r3, #4]
 8011d5a:	609a      	str	r2, [r3, #8]
 8011d5c:	60da      	str	r2, [r3, #12]
 8011d5e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011d68:	d13a      	bne.n	8011de0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	613b      	str	r3, [r7, #16]
 8011d6e:	4b1e      	ldr	r3, [pc, #120]	; (8011de8 <HAL_PCD_MspInit+0xa0>)
 8011d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d72:	4a1d      	ldr	r2, [pc, #116]	; (8011de8 <HAL_PCD_MspInit+0xa0>)
 8011d74:	f043 0301 	orr.w	r3, r3, #1
 8011d78:	6313      	str	r3, [r2, #48]	; 0x30
 8011d7a:	4b1b      	ldr	r3, [pc, #108]	; (8011de8 <HAL_PCD_MspInit+0xa0>)
 8011d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d7e:	f003 0301 	and.w	r3, r3, #1
 8011d82:	613b      	str	r3, [r7, #16]
 8011d84:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011d86:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d8c:	2302      	movs	r3, #2
 8011d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d90:	2300      	movs	r3, #0
 8011d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011d94:	2303      	movs	r3, #3
 8011d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011d98:	230a      	movs	r3, #10
 8011d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d9c:	f107 0314 	add.w	r3, r7, #20
 8011da0:	4619      	mov	r1, r3
 8011da2:	4812      	ldr	r0, [pc, #72]	; (8011dec <HAL_PCD_MspInit+0xa4>)
 8011da4:	f7f0 ff3c 	bl	8002c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011da8:	4b0f      	ldr	r3, [pc, #60]	; (8011de8 <HAL_PCD_MspInit+0xa0>)
 8011daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011dac:	4a0e      	ldr	r2, [pc, #56]	; (8011de8 <HAL_PCD_MspInit+0xa0>)
 8011dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011db2:	6353      	str	r3, [r2, #52]	; 0x34
 8011db4:	2300      	movs	r3, #0
 8011db6:	60fb      	str	r3, [r7, #12]
 8011db8:	4b0b      	ldr	r3, [pc, #44]	; (8011de8 <HAL_PCD_MspInit+0xa0>)
 8011dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011dbc:	4a0a      	ldr	r2, [pc, #40]	; (8011de8 <HAL_PCD_MspInit+0xa0>)
 8011dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011dc2:	6453      	str	r3, [r2, #68]	; 0x44
 8011dc4:	4b08      	ldr	r3, [pc, #32]	; (8011de8 <HAL_PCD_MspInit+0xa0>)
 8011dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011dcc:	60fb      	str	r3, [r7, #12]
 8011dce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	2105      	movs	r1, #5
 8011dd4:	2043      	movs	r0, #67	; 0x43
 8011dd6:	f7f0 fef9 	bl	8002bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011dda:	2043      	movs	r0, #67	; 0x43
 8011ddc:	f7f0 ff12 	bl	8002c04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011de0:	bf00      	nop
 8011de2:	3728      	adds	r7, #40	; 0x28
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}
 8011de8:	40023800 	.word	0x40023800
 8011dec:	40020000 	.word	0x40020000

08011df0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b082      	sub	sp, #8
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011e04:	4619      	mov	r1, r3
 8011e06:	4610      	mov	r0, r2
 8011e08:	f7f7 fefd 	bl	8009c06 <USBD_LL_SetupStage>
}
 8011e0c:	bf00      	nop
 8011e0e:	3708      	adds	r7, #8
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}

08011e14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b082      	sub	sp, #8
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
 8011e1c:	460b      	mov	r3, r1
 8011e1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011e26:	78fa      	ldrb	r2, [r7, #3]
 8011e28:	6879      	ldr	r1, [r7, #4]
 8011e2a:	4613      	mov	r3, r2
 8011e2c:	00db      	lsls	r3, r3, #3
 8011e2e:	4413      	add	r3, r2
 8011e30:	009b      	lsls	r3, r3, #2
 8011e32:	440b      	add	r3, r1
 8011e34:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011e38:	681a      	ldr	r2, [r3, #0]
 8011e3a:	78fb      	ldrb	r3, [r7, #3]
 8011e3c:	4619      	mov	r1, r3
 8011e3e:	f7f7 ff37 	bl	8009cb0 <USBD_LL_DataOutStage>
}
 8011e42:	bf00      	nop
 8011e44:	3708      	adds	r7, #8
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}

08011e4a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e4a:	b580      	push	{r7, lr}
 8011e4c:	b082      	sub	sp, #8
 8011e4e:	af00      	add	r7, sp, #0
 8011e50:	6078      	str	r0, [r7, #4]
 8011e52:	460b      	mov	r3, r1
 8011e54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011e5c:	78fa      	ldrb	r2, [r7, #3]
 8011e5e:	6879      	ldr	r1, [r7, #4]
 8011e60:	4613      	mov	r3, r2
 8011e62:	00db      	lsls	r3, r3, #3
 8011e64:	4413      	add	r3, r2
 8011e66:	009b      	lsls	r3, r3, #2
 8011e68:	440b      	add	r3, r1
 8011e6a:	334c      	adds	r3, #76	; 0x4c
 8011e6c:	681a      	ldr	r2, [r3, #0]
 8011e6e:	78fb      	ldrb	r3, [r7, #3]
 8011e70:	4619      	mov	r1, r3
 8011e72:	f7f7 ffd0 	bl	8009e16 <USBD_LL_DataInStage>
}
 8011e76:	bf00      	nop
 8011e78:	3708      	adds	r7, #8
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}

08011e7e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e7e:	b580      	push	{r7, lr}
 8011e80:	b082      	sub	sp, #8
 8011e82:	af00      	add	r7, sp, #0
 8011e84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7f8 f904 	bl	800a09a <USBD_LL_SOF>
}
 8011e92:	bf00      	nop
 8011e94:	3708      	adds	r7, #8
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}

08011e9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e9a:	b580      	push	{r7, lr}
 8011e9c:	b084      	sub	sp, #16
 8011e9e:	af00      	add	r7, sp, #0
 8011ea0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011ea2:	2301      	movs	r3, #1
 8011ea4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	68db      	ldr	r3, [r3, #12]
 8011eaa:	2b02      	cmp	r3, #2
 8011eac:	d001      	beq.n	8011eb2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011eae:	f7f0 faf1 	bl	8002494 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011eb8:	7bfa      	ldrb	r2, [r7, #15]
 8011eba:	4611      	mov	r1, r2
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f7f8 f8ae 	bl	800a01e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f7f8 f856 	bl	8009f7a <USBD_LL_Reset>
}
 8011ece:	bf00      	nop
 8011ed0:	3710      	adds	r7, #16
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	bd80      	pop	{r7, pc}
	...

08011ed8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b082      	sub	sp, #8
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7f8 f8a9 	bl	800a03e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	687a      	ldr	r2, [r7, #4]
 8011ef8:	6812      	ldr	r2, [r2, #0]
 8011efa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011efe:	f043 0301 	orr.w	r3, r3, #1
 8011f02:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6a1b      	ldr	r3, [r3, #32]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d005      	beq.n	8011f18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011f0c:	4b04      	ldr	r3, [pc, #16]	; (8011f20 <HAL_PCD_SuspendCallback+0x48>)
 8011f0e:	691b      	ldr	r3, [r3, #16]
 8011f10:	4a03      	ldr	r2, [pc, #12]	; (8011f20 <HAL_PCD_SuspendCallback+0x48>)
 8011f12:	f043 0306 	orr.w	r3, r3, #6
 8011f16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011f18:	bf00      	nop
 8011f1a:	3708      	adds	r7, #8
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}
 8011f20:	e000ed00 	.word	0xe000ed00

08011f24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b082      	sub	sp, #8
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7f8 f899 	bl	800a06a <USBD_LL_Resume>
}
 8011f38:	bf00      	nop
 8011f3a:	3708      	adds	r7, #8
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}

08011f40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b082      	sub	sp, #8
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
 8011f48:	460b      	mov	r3, r1
 8011f4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011f52:	78fa      	ldrb	r2, [r7, #3]
 8011f54:	4611      	mov	r1, r2
 8011f56:	4618      	mov	r0, r3
 8011f58:	f7f8 f8f1 	bl	800a13e <USBD_LL_IsoOUTIncomplete>
}
 8011f5c:	bf00      	nop
 8011f5e:	3708      	adds	r7, #8
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}

08011f64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b082      	sub	sp, #8
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
 8011f6c:	460b      	mov	r3, r1
 8011f6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011f76:	78fa      	ldrb	r2, [r7, #3]
 8011f78:	4611      	mov	r1, r2
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f7f8 f8ad 	bl	800a0da <USBD_LL_IsoINIncomplete>
}
 8011f80:	bf00      	nop
 8011f82:	3708      	adds	r7, #8
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}

08011f88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b082      	sub	sp, #8
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011f96:	4618      	mov	r0, r3
 8011f98:	f7f8 f903 	bl	800a1a2 <USBD_LL_DevConnected>
}
 8011f9c:	bf00      	nop
 8011f9e:	3708      	adds	r7, #8
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}

08011fa4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b082      	sub	sp, #8
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f7f8 f900 	bl	800a1b8 <USBD_LL_DevDisconnected>
}
 8011fb8:	bf00      	nop
 8011fba:	3708      	adds	r7, #8
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}

08011fc0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b082      	sub	sp, #8
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d13c      	bne.n	801204a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011fd0:	4a20      	ldr	r2, [pc, #128]	; (8012054 <USBD_LL_Init+0x94>)
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	4a1e      	ldr	r2, [pc, #120]	; (8012054 <USBD_LL_Init+0x94>)
 8011fdc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011fe0:	4b1c      	ldr	r3, [pc, #112]	; (8012054 <USBD_LL_Init+0x94>)
 8011fe2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011fe6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011fe8:	4b1a      	ldr	r3, [pc, #104]	; (8012054 <USBD_LL_Init+0x94>)
 8011fea:	2204      	movs	r2, #4
 8011fec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011fee:	4b19      	ldr	r3, [pc, #100]	; (8012054 <USBD_LL_Init+0x94>)
 8011ff0:	2202      	movs	r2, #2
 8011ff2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011ff4:	4b17      	ldr	r3, [pc, #92]	; (8012054 <USBD_LL_Init+0x94>)
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011ffa:	4b16      	ldr	r3, [pc, #88]	; (8012054 <USBD_LL_Init+0x94>)
 8011ffc:	2202      	movs	r2, #2
 8011ffe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012000:	4b14      	ldr	r3, [pc, #80]	; (8012054 <USBD_LL_Init+0x94>)
 8012002:	2200      	movs	r2, #0
 8012004:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012006:	4b13      	ldr	r3, [pc, #76]	; (8012054 <USBD_LL_Init+0x94>)
 8012008:	2200      	movs	r2, #0
 801200a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801200c:	4b11      	ldr	r3, [pc, #68]	; (8012054 <USBD_LL_Init+0x94>)
 801200e:	2200      	movs	r2, #0
 8012010:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012012:	4b10      	ldr	r3, [pc, #64]	; (8012054 <USBD_LL_Init+0x94>)
 8012014:	2200      	movs	r2, #0
 8012016:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012018:	4b0e      	ldr	r3, [pc, #56]	; (8012054 <USBD_LL_Init+0x94>)
 801201a:	2200      	movs	r2, #0
 801201c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801201e:	480d      	ldr	r0, [pc, #52]	; (8012054 <USBD_LL_Init+0x94>)
 8012020:	f7f1 ff73 	bl	8003f0a <HAL_PCD_Init>
 8012024:	4603      	mov	r3, r0
 8012026:	2b00      	cmp	r3, #0
 8012028:	d001      	beq.n	801202e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801202a:	f7f0 fa33 	bl	8002494 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801202e:	2180      	movs	r1, #128	; 0x80
 8012030:	4808      	ldr	r0, [pc, #32]	; (8012054 <USBD_LL_Init+0x94>)
 8012032:	f7f3 f9ca 	bl	80053ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012036:	2240      	movs	r2, #64	; 0x40
 8012038:	2100      	movs	r1, #0
 801203a:	4806      	ldr	r0, [pc, #24]	; (8012054 <USBD_LL_Init+0x94>)
 801203c:	f7f3 f97e 	bl	800533c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012040:	2280      	movs	r2, #128	; 0x80
 8012042:	2101      	movs	r1, #1
 8012044:	4803      	ldr	r0, [pc, #12]	; (8012054 <USBD_LL_Init+0x94>)
 8012046:	f7f3 f979 	bl	800533c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801204a:	2300      	movs	r3, #0
}
 801204c:	4618      	mov	r0, r3
 801204e:	3708      	adds	r7, #8
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}
 8012054:	20006d44 	.word	0x20006d44

08012058 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b084      	sub	sp, #16
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012060:	2300      	movs	r3, #0
 8012062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012064:	2300      	movs	r3, #0
 8012066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801206e:	4618      	mov	r0, r3
 8012070:	f7f2 f868 	bl	8004144 <HAL_PCD_Start>
 8012074:	4603      	mov	r3, r0
 8012076:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012078:	7bfb      	ldrb	r3, [r7, #15]
 801207a:	4618      	mov	r0, r3
 801207c:	f000 f942 	bl	8012304 <USBD_Get_USB_Status>
 8012080:	4603      	mov	r3, r0
 8012082:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012084:	7bbb      	ldrb	r3, [r7, #14]
}
 8012086:	4618      	mov	r0, r3
 8012088:	3710      	adds	r7, #16
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}

0801208e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801208e:	b580      	push	{r7, lr}
 8012090:	b084      	sub	sp, #16
 8012092:	af00      	add	r7, sp, #0
 8012094:	6078      	str	r0, [r7, #4]
 8012096:	4608      	mov	r0, r1
 8012098:	4611      	mov	r1, r2
 801209a:	461a      	mov	r2, r3
 801209c:	4603      	mov	r3, r0
 801209e:	70fb      	strb	r3, [r7, #3]
 80120a0:	460b      	mov	r3, r1
 80120a2:	70bb      	strb	r3, [r7, #2]
 80120a4:	4613      	mov	r3, r2
 80120a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120a8:	2300      	movs	r3, #0
 80120aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120ac:	2300      	movs	r3, #0
 80120ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80120b6:	78bb      	ldrb	r3, [r7, #2]
 80120b8:	883a      	ldrh	r2, [r7, #0]
 80120ba:	78f9      	ldrb	r1, [r7, #3]
 80120bc:	f7f2 fd39 	bl	8004b32 <HAL_PCD_EP_Open>
 80120c0:	4603      	mov	r3, r0
 80120c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120c4:	7bfb      	ldrb	r3, [r7, #15]
 80120c6:	4618      	mov	r0, r3
 80120c8:	f000 f91c 	bl	8012304 <USBD_Get_USB_Status>
 80120cc:	4603      	mov	r3, r0
 80120ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80120d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3710      	adds	r7, #16
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}

080120da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80120da:	b580      	push	{r7, lr}
 80120dc:	b084      	sub	sp, #16
 80120de:	af00      	add	r7, sp, #0
 80120e0:	6078      	str	r0, [r7, #4]
 80120e2:	460b      	mov	r3, r1
 80120e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120e6:	2300      	movs	r3, #0
 80120e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120ea:	2300      	movs	r3, #0
 80120ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80120f4:	78fa      	ldrb	r2, [r7, #3]
 80120f6:	4611      	mov	r1, r2
 80120f8:	4618      	mov	r0, r3
 80120fa:	f7f2 fd82 	bl	8004c02 <HAL_PCD_EP_Close>
 80120fe:	4603      	mov	r3, r0
 8012100:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012102:	7bfb      	ldrb	r3, [r7, #15]
 8012104:	4618      	mov	r0, r3
 8012106:	f000 f8fd 	bl	8012304 <USBD_Get_USB_Status>
 801210a:	4603      	mov	r3, r0
 801210c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801210e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012110:	4618      	mov	r0, r3
 8012112:	3710      	adds	r7, #16
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}

08012118 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b084      	sub	sp, #16
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	460b      	mov	r3, r1
 8012122:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012124:	2300      	movs	r3, #0
 8012126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012128:	2300      	movs	r3, #0
 801212a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012132:	78fa      	ldrb	r2, [r7, #3]
 8012134:	4611      	mov	r1, r2
 8012136:	4618      	mov	r0, r3
 8012138:	f7f2 fe5a 	bl	8004df0 <HAL_PCD_EP_SetStall>
 801213c:	4603      	mov	r3, r0
 801213e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012140:	7bfb      	ldrb	r3, [r7, #15]
 8012142:	4618      	mov	r0, r3
 8012144:	f000 f8de 	bl	8012304 <USBD_Get_USB_Status>
 8012148:	4603      	mov	r3, r0
 801214a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801214c:	7bbb      	ldrb	r3, [r7, #14]
}
 801214e:	4618      	mov	r0, r3
 8012150:	3710      	adds	r7, #16
 8012152:	46bd      	mov	sp, r7
 8012154:	bd80      	pop	{r7, pc}

08012156 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012156:	b580      	push	{r7, lr}
 8012158:	b084      	sub	sp, #16
 801215a:	af00      	add	r7, sp, #0
 801215c:	6078      	str	r0, [r7, #4]
 801215e:	460b      	mov	r3, r1
 8012160:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012162:	2300      	movs	r3, #0
 8012164:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012166:	2300      	movs	r3, #0
 8012168:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012170:	78fa      	ldrb	r2, [r7, #3]
 8012172:	4611      	mov	r1, r2
 8012174:	4618      	mov	r0, r3
 8012176:	f7f2 fe9f 	bl	8004eb8 <HAL_PCD_EP_ClrStall>
 801217a:	4603      	mov	r3, r0
 801217c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801217e:	7bfb      	ldrb	r3, [r7, #15]
 8012180:	4618      	mov	r0, r3
 8012182:	f000 f8bf 	bl	8012304 <USBD_Get_USB_Status>
 8012186:	4603      	mov	r3, r0
 8012188:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801218a:	7bbb      	ldrb	r3, [r7, #14]
}
 801218c:	4618      	mov	r0, r3
 801218e:	3710      	adds	r7, #16
 8012190:	46bd      	mov	sp, r7
 8012192:	bd80      	pop	{r7, pc}

08012194 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012194:	b480      	push	{r7}
 8012196:	b085      	sub	sp, #20
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
 801219c:	460b      	mov	r3, r1
 801219e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80121a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80121a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	da0b      	bge.n	80121c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80121b0:	78fb      	ldrb	r3, [r7, #3]
 80121b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80121b6:	68f9      	ldr	r1, [r7, #12]
 80121b8:	4613      	mov	r3, r2
 80121ba:	00db      	lsls	r3, r3, #3
 80121bc:	4413      	add	r3, r2
 80121be:	009b      	lsls	r3, r3, #2
 80121c0:	440b      	add	r3, r1
 80121c2:	333e      	adds	r3, #62	; 0x3e
 80121c4:	781b      	ldrb	r3, [r3, #0]
 80121c6:	e00b      	b.n	80121e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80121c8:	78fb      	ldrb	r3, [r7, #3]
 80121ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80121ce:	68f9      	ldr	r1, [r7, #12]
 80121d0:	4613      	mov	r3, r2
 80121d2:	00db      	lsls	r3, r3, #3
 80121d4:	4413      	add	r3, r2
 80121d6:	009b      	lsls	r3, r3, #2
 80121d8:	440b      	add	r3, r1
 80121da:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80121de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80121e0:	4618      	mov	r0, r3
 80121e2:	3714      	adds	r7, #20
 80121e4:	46bd      	mov	sp, r7
 80121e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ea:	4770      	bx	lr

080121ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b084      	sub	sp, #16
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
 80121f4:	460b      	mov	r3, r1
 80121f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121f8:	2300      	movs	r3, #0
 80121fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121fc:	2300      	movs	r3, #0
 80121fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012206:	78fa      	ldrb	r2, [r7, #3]
 8012208:	4611      	mov	r1, r2
 801220a:	4618      	mov	r0, r3
 801220c:	f7f2 fc6c 	bl	8004ae8 <HAL_PCD_SetAddress>
 8012210:	4603      	mov	r3, r0
 8012212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012214:	7bfb      	ldrb	r3, [r7, #15]
 8012216:	4618      	mov	r0, r3
 8012218:	f000 f874 	bl	8012304 <USBD_Get_USB_Status>
 801221c:	4603      	mov	r3, r0
 801221e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012220:	7bbb      	ldrb	r3, [r7, #14]
}
 8012222:	4618      	mov	r0, r3
 8012224:	3710      	adds	r7, #16
 8012226:	46bd      	mov	sp, r7
 8012228:	bd80      	pop	{r7, pc}

0801222a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801222a:	b580      	push	{r7, lr}
 801222c:	b086      	sub	sp, #24
 801222e:	af00      	add	r7, sp, #0
 8012230:	60f8      	str	r0, [r7, #12]
 8012232:	607a      	str	r2, [r7, #4]
 8012234:	603b      	str	r3, [r7, #0]
 8012236:	460b      	mov	r3, r1
 8012238:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801223a:	2300      	movs	r3, #0
 801223c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801223e:	2300      	movs	r3, #0
 8012240:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012248:	7af9      	ldrb	r1, [r7, #11]
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	687a      	ldr	r2, [r7, #4]
 801224e:	f7f2 fd85 	bl	8004d5c <HAL_PCD_EP_Transmit>
 8012252:	4603      	mov	r3, r0
 8012254:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012256:	7dfb      	ldrb	r3, [r7, #23]
 8012258:	4618      	mov	r0, r3
 801225a:	f000 f853 	bl	8012304 <USBD_Get_USB_Status>
 801225e:	4603      	mov	r3, r0
 8012260:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012262:	7dbb      	ldrb	r3, [r7, #22]
}
 8012264:	4618      	mov	r0, r3
 8012266:	3718      	adds	r7, #24
 8012268:	46bd      	mov	sp, r7
 801226a:	bd80      	pop	{r7, pc}

0801226c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b086      	sub	sp, #24
 8012270:	af00      	add	r7, sp, #0
 8012272:	60f8      	str	r0, [r7, #12]
 8012274:	607a      	str	r2, [r7, #4]
 8012276:	603b      	str	r3, [r7, #0]
 8012278:	460b      	mov	r3, r1
 801227a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801227c:	2300      	movs	r3, #0
 801227e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012280:	2300      	movs	r3, #0
 8012282:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801228a:	7af9      	ldrb	r1, [r7, #11]
 801228c:	683b      	ldr	r3, [r7, #0]
 801228e:	687a      	ldr	r2, [r7, #4]
 8012290:	f7f2 fd01 	bl	8004c96 <HAL_PCD_EP_Receive>
 8012294:	4603      	mov	r3, r0
 8012296:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012298:	7dfb      	ldrb	r3, [r7, #23]
 801229a:	4618      	mov	r0, r3
 801229c:	f000 f832 	bl	8012304 <USBD_Get_USB_Status>
 80122a0:	4603      	mov	r3, r0
 80122a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80122a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80122a6:	4618      	mov	r0, r3
 80122a8:	3718      	adds	r7, #24
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}

080122ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122ae:	b580      	push	{r7, lr}
 80122b0:	b082      	sub	sp, #8
 80122b2:	af00      	add	r7, sp, #0
 80122b4:	6078      	str	r0, [r7, #4]
 80122b6:	460b      	mov	r3, r1
 80122b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80122c0:	78fa      	ldrb	r2, [r7, #3]
 80122c2:	4611      	mov	r1, r2
 80122c4:	4618      	mov	r0, r3
 80122c6:	f7f2 fd31 	bl	8004d2c <HAL_PCD_EP_GetRxCount>
 80122ca:	4603      	mov	r3, r0
}
 80122cc:	4618      	mov	r0, r3
 80122ce:	3708      	adds	r7, #8
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}

080122d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80122d4:	b480      	push	{r7}
 80122d6:	b083      	sub	sp, #12
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80122dc:	4b03      	ldr	r3, [pc, #12]	; (80122ec <USBD_static_malloc+0x18>)
}
 80122de:	4618      	mov	r0, r3
 80122e0:	370c      	adds	r7, #12
 80122e2:	46bd      	mov	sp, r7
 80122e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e8:	4770      	bx	lr
 80122ea:	bf00      	nop
 80122ec:	20007250 	.word	0x20007250

080122f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80122f0:	b480      	push	{r7}
 80122f2:	b083      	sub	sp, #12
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]

}
 80122f8:	bf00      	nop
 80122fa:	370c      	adds	r7, #12
 80122fc:	46bd      	mov	sp, r7
 80122fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012302:	4770      	bx	lr

08012304 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012304:	b480      	push	{r7}
 8012306:	b085      	sub	sp, #20
 8012308:	af00      	add	r7, sp, #0
 801230a:	4603      	mov	r3, r0
 801230c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801230e:	2300      	movs	r3, #0
 8012310:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012312:	79fb      	ldrb	r3, [r7, #7]
 8012314:	2b03      	cmp	r3, #3
 8012316:	d817      	bhi.n	8012348 <USBD_Get_USB_Status+0x44>
 8012318:	a201      	add	r2, pc, #4	; (adr r2, 8012320 <USBD_Get_USB_Status+0x1c>)
 801231a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801231e:	bf00      	nop
 8012320:	08012331 	.word	0x08012331
 8012324:	08012337 	.word	0x08012337
 8012328:	0801233d 	.word	0x0801233d
 801232c:	08012343 	.word	0x08012343
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012330:	2300      	movs	r3, #0
 8012332:	73fb      	strb	r3, [r7, #15]
    break;
 8012334:	e00b      	b.n	801234e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012336:	2303      	movs	r3, #3
 8012338:	73fb      	strb	r3, [r7, #15]
    break;
 801233a:	e008      	b.n	801234e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801233c:	2301      	movs	r3, #1
 801233e:	73fb      	strb	r3, [r7, #15]
    break;
 8012340:	e005      	b.n	801234e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012342:	2303      	movs	r3, #3
 8012344:	73fb      	strb	r3, [r7, #15]
    break;
 8012346:	e002      	b.n	801234e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012348:	2303      	movs	r3, #3
 801234a:	73fb      	strb	r3, [r7, #15]
    break;
 801234c:	bf00      	nop
  }
  return usb_status;
 801234e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012350:	4618      	mov	r0, r3
 8012352:	3714      	adds	r7, #20
 8012354:	46bd      	mov	sp, r7
 8012356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235a:	4770      	bx	lr

0801235c <__errno>:
 801235c:	4b01      	ldr	r3, [pc, #4]	; (8012364 <__errno+0x8>)
 801235e:	6818      	ldr	r0, [r3, #0]
 8012360:	4770      	bx	lr
 8012362:	bf00      	nop
 8012364:	20000600 	.word	0x20000600

08012368 <__libc_init_array>:
 8012368:	b570      	push	{r4, r5, r6, lr}
 801236a:	4d0d      	ldr	r5, [pc, #52]	; (80123a0 <__libc_init_array+0x38>)
 801236c:	4c0d      	ldr	r4, [pc, #52]	; (80123a4 <__libc_init_array+0x3c>)
 801236e:	1b64      	subs	r4, r4, r5
 8012370:	10a4      	asrs	r4, r4, #2
 8012372:	2600      	movs	r6, #0
 8012374:	42a6      	cmp	r6, r4
 8012376:	d109      	bne.n	801238c <__libc_init_array+0x24>
 8012378:	4d0b      	ldr	r5, [pc, #44]	; (80123a8 <__libc_init_array+0x40>)
 801237a:	4c0c      	ldr	r4, [pc, #48]	; (80123ac <__libc_init_array+0x44>)
 801237c:	f000 fcb2 	bl	8012ce4 <_init>
 8012380:	1b64      	subs	r4, r4, r5
 8012382:	10a4      	asrs	r4, r4, #2
 8012384:	2600      	movs	r6, #0
 8012386:	42a6      	cmp	r6, r4
 8012388:	d105      	bne.n	8012396 <__libc_init_array+0x2e>
 801238a:	bd70      	pop	{r4, r5, r6, pc}
 801238c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012390:	4798      	blx	r3
 8012392:	3601      	adds	r6, #1
 8012394:	e7ee      	b.n	8012374 <__libc_init_array+0xc>
 8012396:	f855 3b04 	ldr.w	r3, [r5], #4
 801239a:	4798      	blx	r3
 801239c:	3601      	adds	r6, #1
 801239e:	e7f2      	b.n	8012386 <__libc_init_array+0x1e>
 80123a0:	08013398 	.word	0x08013398
 80123a4:	08013398 	.word	0x08013398
 80123a8:	08013398 	.word	0x08013398
 80123ac:	0801339c 	.word	0x0801339c

080123b0 <malloc>:
 80123b0:	4b02      	ldr	r3, [pc, #8]	; (80123bc <malloc+0xc>)
 80123b2:	4601      	mov	r1, r0
 80123b4:	6818      	ldr	r0, [r3, #0]
 80123b6:	f000 b88d 	b.w	80124d4 <_malloc_r>
 80123ba:	bf00      	nop
 80123bc:	20000600 	.word	0x20000600

080123c0 <free>:
 80123c0:	4b02      	ldr	r3, [pc, #8]	; (80123cc <free+0xc>)
 80123c2:	4601      	mov	r1, r0
 80123c4:	6818      	ldr	r0, [r3, #0]
 80123c6:	f000 b819 	b.w	80123fc <_free_r>
 80123ca:	bf00      	nop
 80123cc:	20000600 	.word	0x20000600

080123d0 <memcpy>:
 80123d0:	440a      	add	r2, r1
 80123d2:	4291      	cmp	r1, r2
 80123d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80123d8:	d100      	bne.n	80123dc <memcpy+0xc>
 80123da:	4770      	bx	lr
 80123dc:	b510      	push	{r4, lr}
 80123de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80123e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80123e6:	4291      	cmp	r1, r2
 80123e8:	d1f9      	bne.n	80123de <memcpy+0xe>
 80123ea:	bd10      	pop	{r4, pc}

080123ec <memset>:
 80123ec:	4402      	add	r2, r0
 80123ee:	4603      	mov	r3, r0
 80123f0:	4293      	cmp	r3, r2
 80123f2:	d100      	bne.n	80123f6 <memset+0xa>
 80123f4:	4770      	bx	lr
 80123f6:	f803 1b01 	strb.w	r1, [r3], #1
 80123fa:	e7f9      	b.n	80123f0 <memset+0x4>

080123fc <_free_r>:
 80123fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80123fe:	2900      	cmp	r1, #0
 8012400:	d044      	beq.n	801248c <_free_r+0x90>
 8012402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012406:	9001      	str	r0, [sp, #4]
 8012408:	2b00      	cmp	r3, #0
 801240a:	f1a1 0404 	sub.w	r4, r1, #4
 801240e:	bfb8      	it	lt
 8012410:	18e4      	addlt	r4, r4, r3
 8012412:	f000 f917 	bl	8012644 <__malloc_lock>
 8012416:	4a1e      	ldr	r2, [pc, #120]	; (8012490 <_free_r+0x94>)
 8012418:	9801      	ldr	r0, [sp, #4]
 801241a:	6813      	ldr	r3, [r2, #0]
 801241c:	b933      	cbnz	r3, 801242c <_free_r+0x30>
 801241e:	6063      	str	r3, [r4, #4]
 8012420:	6014      	str	r4, [r2, #0]
 8012422:	b003      	add	sp, #12
 8012424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012428:	f000 b912 	b.w	8012650 <__malloc_unlock>
 801242c:	42a3      	cmp	r3, r4
 801242e:	d908      	bls.n	8012442 <_free_r+0x46>
 8012430:	6825      	ldr	r5, [r4, #0]
 8012432:	1961      	adds	r1, r4, r5
 8012434:	428b      	cmp	r3, r1
 8012436:	bf01      	itttt	eq
 8012438:	6819      	ldreq	r1, [r3, #0]
 801243a:	685b      	ldreq	r3, [r3, #4]
 801243c:	1949      	addeq	r1, r1, r5
 801243e:	6021      	streq	r1, [r4, #0]
 8012440:	e7ed      	b.n	801241e <_free_r+0x22>
 8012442:	461a      	mov	r2, r3
 8012444:	685b      	ldr	r3, [r3, #4]
 8012446:	b10b      	cbz	r3, 801244c <_free_r+0x50>
 8012448:	42a3      	cmp	r3, r4
 801244a:	d9fa      	bls.n	8012442 <_free_r+0x46>
 801244c:	6811      	ldr	r1, [r2, #0]
 801244e:	1855      	adds	r5, r2, r1
 8012450:	42a5      	cmp	r5, r4
 8012452:	d10b      	bne.n	801246c <_free_r+0x70>
 8012454:	6824      	ldr	r4, [r4, #0]
 8012456:	4421      	add	r1, r4
 8012458:	1854      	adds	r4, r2, r1
 801245a:	42a3      	cmp	r3, r4
 801245c:	6011      	str	r1, [r2, #0]
 801245e:	d1e0      	bne.n	8012422 <_free_r+0x26>
 8012460:	681c      	ldr	r4, [r3, #0]
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	6053      	str	r3, [r2, #4]
 8012466:	4421      	add	r1, r4
 8012468:	6011      	str	r1, [r2, #0]
 801246a:	e7da      	b.n	8012422 <_free_r+0x26>
 801246c:	d902      	bls.n	8012474 <_free_r+0x78>
 801246e:	230c      	movs	r3, #12
 8012470:	6003      	str	r3, [r0, #0]
 8012472:	e7d6      	b.n	8012422 <_free_r+0x26>
 8012474:	6825      	ldr	r5, [r4, #0]
 8012476:	1961      	adds	r1, r4, r5
 8012478:	428b      	cmp	r3, r1
 801247a:	bf04      	itt	eq
 801247c:	6819      	ldreq	r1, [r3, #0]
 801247e:	685b      	ldreq	r3, [r3, #4]
 8012480:	6063      	str	r3, [r4, #4]
 8012482:	bf04      	itt	eq
 8012484:	1949      	addeq	r1, r1, r5
 8012486:	6021      	streq	r1, [r4, #0]
 8012488:	6054      	str	r4, [r2, #4]
 801248a:	e7ca      	b.n	8012422 <_free_r+0x26>
 801248c:	b003      	add	sp, #12
 801248e:	bd30      	pop	{r4, r5, pc}
 8012490:	20007470 	.word	0x20007470

08012494 <sbrk_aligned>:
 8012494:	b570      	push	{r4, r5, r6, lr}
 8012496:	4e0e      	ldr	r6, [pc, #56]	; (80124d0 <sbrk_aligned+0x3c>)
 8012498:	460c      	mov	r4, r1
 801249a:	6831      	ldr	r1, [r6, #0]
 801249c:	4605      	mov	r5, r0
 801249e:	b911      	cbnz	r1, 80124a6 <sbrk_aligned+0x12>
 80124a0:	f000 f88c 	bl	80125bc <_sbrk_r>
 80124a4:	6030      	str	r0, [r6, #0]
 80124a6:	4621      	mov	r1, r4
 80124a8:	4628      	mov	r0, r5
 80124aa:	f000 f887 	bl	80125bc <_sbrk_r>
 80124ae:	1c43      	adds	r3, r0, #1
 80124b0:	d00a      	beq.n	80124c8 <sbrk_aligned+0x34>
 80124b2:	1cc4      	adds	r4, r0, #3
 80124b4:	f024 0403 	bic.w	r4, r4, #3
 80124b8:	42a0      	cmp	r0, r4
 80124ba:	d007      	beq.n	80124cc <sbrk_aligned+0x38>
 80124bc:	1a21      	subs	r1, r4, r0
 80124be:	4628      	mov	r0, r5
 80124c0:	f000 f87c 	bl	80125bc <_sbrk_r>
 80124c4:	3001      	adds	r0, #1
 80124c6:	d101      	bne.n	80124cc <sbrk_aligned+0x38>
 80124c8:	f04f 34ff 	mov.w	r4, #4294967295
 80124cc:	4620      	mov	r0, r4
 80124ce:	bd70      	pop	{r4, r5, r6, pc}
 80124d0:	20007474 	.word	0x20007474

080124d4 <_malloc_r>:
 80124d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124d8:	1ccd      	adds	r5, r1, #3
 80124da:	f025 0503 	bic.w	r5, r5, #3
 80124de:	3508      	adds	r5, #8
 80124e0:	2d0c      	cmp	r5, #12
 80124e2:	bf38      	it	cc
 80124e4:	250c      	movcc	r5, #12
 80124e6:	2d00      	cmp	r5, #0
 80124e8:	4607      	mov	r7, r0
 80124ea:	db01      	blt.n	80124f0 <_malloc_r+0x1c>
 80124ec:	42a9      	cmp	r1, r5
 80124ee:	d905      	bls.n	80124fc <_malloc_r+0x28>
 80124f0:	230c      	movs	r3, #12
 80124f2:	603b      	str	r3, [r7, #0]
 80124f4:	2600      	movs	r6, #0
 80124f6:	4630      	mov	r0, r6
 80124f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124fc:	4e2e      	ldr	r6, [pc, #184]	; (80125b8 <_malloc_r+0xe4>)
 80124fe:	f000 f8a1 	bl	8012644 <__malloc_lock>
 8012502:	6833      	ldr	r3, [r6, #0]
 8012504:	461c      	mov	r4, r3
 8012506:	bb34      	cbnz	r4, 8012556 <_malloc_r+0x82>
 8012508:	4629      	mov	r1, r5
 801250a:	4638      	mov	r0, r7
 801250c:	f7ff ffc2 	bl	8012494 <sbrk_aligned>
 8012510:	1c43      	adds	r3, r0, #1
 8012512:	4604      	mov	r4, r0
 8012514:	d14d      	bne.n	80125b2 <_malloc_r+0xde>
 8012516:	6834      	ldr	r4, [r6, #0]
 8012518:	4626      	mov	r6, r4
 801251a:	2e00      	cmp	r6, #0
 801251c:	d140      	bne.n	80125a0 <_malloc_r+0xcc>
 801251e:	6823      	ldr	r3, [r4, #0]
 8012520:	4631      	mov	r1, r6
 8012522:	4638      	mov	r0, r7
 8012524:	eb04 0803 	add.w	r8, r4, r3
 8012528:	f000 f848 	bl	80125bc <_sbrk_r>
 801252c:	4580      	cmp	r8, r0
 801252e:	d13a      	bne.n	80125a6 <_malloc_r+0xd2>
 8012530:	6821      	ldr	r1, [r4, #0]
 8012532:	3503      	adds	r5, #3
 8012534:	1a6d      	subs	r5, r5, r1
 8012536:	f025 0503 	bic.w	r5, r5, #3
 801253a:	3508      	adds	r5, #8
 801253c:	2d0c      	cmp	r5, #12
 801253e:	bf38      	it	cc
 8012540:	250c      	movcc	r5, #12
 8012542:	4629      	mov	r1, r5
 8012544:	4638      	mov	r0, r7
 8012546:	f7ff ffa5 	bl	8012494 <sbrk_aligned>
 801254a:	3001      	adds	r0, #1
 801254c:	d02b      	beq.n	80125a6 <_malloc_r+0xd2>
 801254e:	6823      	ldr	r3, [r4, #0]
 8012550:	442b      	add	r3, r5
 8012552:	6023      	str	r3, [r4, #0]
 8012554:	e00e      	b.n	8012574 <_malloc_r+0xa0>
 8012556:	6822      	ldr	r2, [r4, #0]
 8012558:	1b52      	subs	r2, r2, r5
 801255a:	d41e      	bmi.n	801259a <_malloc_r+0xc6>
 801255c:	2a0b      	cmp	r2, #11
 801255e:	d916      	bls.n	801258e <_malloc_r+0xba>
 8012560:	1961      	adds	r1, r4, r5
 8012562:	42a3      	cmp	r3, r4
 8012564:	6025      	str	r5, [r4, #0]
 8012566:	bf18      	it	ne
 8012568:	6059      	strne	r1, [r3, #4]
 801256a:	6863      	ldr	r3, [r4, #4]
 801256c:	bf08      	it	eq
 801256e:	6031      	streq	r1, [r6, #0]
 8012570:	5162      	str	r2, [r4, r5]
 8012572:	604b      	str	r3, [r1, #4]
 8012574:	4638      	mov	r0, r7
 8012576:	f104 060b 	add.w	r6, r4, #11
 801257a:	f000 f869 	bl	8012650 <__malloc_unlock>
 801257e:	f026 0607 	bic.w	r6, r6, #7
 8012582:	1d23      	adds	r3, r4, #4
 8012584:	1af2      	subs	r2, r6, r3
 8012586:	d0b6      	beq.n	80124f6 <_malloc_r+0x22>
 8012588:	1b9b      	subs	r3, r3, r6
 801258a:	50a3      	str	r3, [r4, r2]
 801258c:	e7b3      	b.n	80124f6 <_malloc_r+0x22>
 801258e:	6862      	ldr	r2, [r4, #4]
 8012590:	42a3      	cmp	r3, r4
 8012592:	bf0c      	ite	eq
 8012594:	6032      	streq	r2, [r6, #0]
 8012596:	605a      	strne	r2, [r3, #4]
 8012598:	e7ec      	b.n	8012574 <_malloc_r+0xa0>
 801259a:	4623      	mov	r3, r4
 801259c:	6864      	ldr	r4, [r4, #4]
 801259e:	e7b2      	b.n	8012506 <_malloc_r+0x32>
 80125a0:	4634      	mov	r4, r6
 80125a2:	6876      	ldr	r6, [r6, #4]
 80125a4:	e7b9      	b.n	801251a <_malloc_r+0x46>
 80125a6:	230c      	movs	r3, #12
 80125a8:	603b      	str	r3, [r7, #0]
 80125aa:	4638      	mov	r0, r7
 80125ac:	f000 f850 	bl	8012650 <__malloc_unlock>
 80125b0:	e7a1      	b.n	80124f6 <_malloc_r+0x22>
 80125b2:	6025      	str	r5, [r4, #0]
 80125b4:	e7de      	b.n	8012574 <_malloc_r+0xa0>
 80125b6:	bf00      	nop
 80125b8:	20007470 	.word	0x20007470

080125bc <_sbrk_r>:
 80125bc:	b538      	push	{r3, r4, r5, lr}
 80125be:	4d06      	ldr	r5, [pc, #24]	; (80125d8 <_sbrk_r+0x1c>)
 80125c0:	2300      	movs	r3, #0
 80125c2:	4604      	mov	r4, r0
 80125c4:	4608      	mov	r0, r1
 80125c6:	602b      	str	r3, [r5, #0]
 80125c8:	f7f0 f970 	bl	80028ac <_sbrk>
 80125cc:	1c43      	adds	r3, r0, #1
 80125ce:	d102      	bne.n	80125d6 <_sbrk_r+0x1a>
 80125d0:	682b      	ldr	r3, [r5, #0]
 80125d2:	b103      	cbz	r3, 80125d6 <_sbrk_r+0x1a>
 80125d4:	6023      	str	r3, [r4, #0]
 80125d6:	bd38      	pop	{r3, r4, r5, pc}
 80125d8:	20007478 	.word	0x20007478

080125dc <siprintf>:
 80125dc:	b40e      	push	{r1, r2, r3}
 80125de:	b500      	push	{lr}
 80125e0:	b09c      	sub	sp, #112	; 0x70
 80125e2:	ab1d      	add	r3, sp, #116	; 0x74
 80125e4:	9002      	str	r0, [sp, #8]
 80125e6:	9006      	str	r0, [sp, #24]
 80125e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80125ec:	4809      	ldr	r0, [pc, #36]	; (8012614 <siprintf+0x38>)
 80125ee:	9107      	str	r1, [sp, #28]
 80125f0:	9104      	str	r1, [sp, #16]
 80125f2:	4909      	ldr	r1, [pc, #36]	; (8012618 <siprintf+0x3c>)
 80125f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80125f8:	9105      	str	r1, [sp, #20]
 80125fa:	6800      	ldr	r0, [r0, #0]
 80125fc:	9301      	str	r3, [sp, #4]
 80125fe:	a902      	add	r1, sp, #8
 8012600:	f000 f888 	bl	8012714 <_svfiprintf_r>
 8012604:	9b02      	ldr	r3, [sp, #8]
 8012606:	2200      	movs	r2, #0
 8012608:	701a      	strb	r2, [r3, #0]
 801260a:	b01c      	add	sp, #112	; 0x70
 801260c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012610:	b003      	add	sp, #12
 8012612:	4770      	bx	lr
 8012614:	20000600 	.word	0x20000600
 8012618:	ffff0208 	.word	0xffff0208

0801261c <strncpy>:
 801261c:	b510      	push	{r4, lr}
 801261e:	3901      	subs	r1, #1
 8012620:	4603      	mov	r3, r0
 8012622:	b132      	cbz	r2, 8012632 <strncpy+0x16>
 8012624:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012628:	f803 4b01 	strb.w	r4, [r3], #1
 801262c:	3a01      	subs	r2, #1
 801262e:	2c00      	cmp	r4, #0
 8012630:	d1f7      	bne.n	8012622 <strncpy+0x6>
 8012632:	441a      	add	r2, r3
 8012634:	2100      	movs	r1, #0
 8012636:	4293      	cmp	r3, r2
 8012638:	d100      	bne.n	801263c <strncpy+0x20>
 801263a:	bd10      	pop	{r4, pc}
 801263c:	f803 1b01 	strb.w	r1, [r3], #1
 8012640:	e7f9      	b.n	8012636 <strncpy+0x1a>
	...

08012644 <__malloc_lock>:
 8012644:	4801      	ldr	r0, [pc, #4]	; (801264c <__malloc_lock+0x8>)
 8012646:	f000 baf9 	b.w	8012c3c <__retarget_lock_acquire_recursive>
 801264a:	bf00      	nop
 801264c:	2000747c 	.word	0x2000747c

08012650 <__malloc_unlock>:
 8012650:	4801      	ldr	r0, [pc, #4]	; (8012658 <__malloc_unlock+0x8>)
 8012652:	f000 baf4 	b.w	8012c3e <__retarget_lock_release_recursive>
 8012656:	bf00      	nop
 8012658:	2000747c 	.word	0x2000747c

0801265c <__ssputs_r>:
 801265c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012660:	688e      	ldr	r6, [r1, #8]
 8012662:	429e      	cmp	r6, r3
 8012664:	4682      	mov	sl, r0
 8012666:	460c      	mov	r4, r1
 8012668:	4690      	mov	r8, r2
 801266a:	461f      	mov	r7, r3
 801266c:	d838      	bhi.n	80126e0 <__ssputs_r+0x84>
 801266e:	898a      	ldrh	r2, [r1, #12]
 8012670:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012674:	d032      	beq.n	80126dc <__ssputs_r+0x80>
 8012676:	6825      	ldr	r5, [r4, #0]
 8012678:	6909      	ldr	r1, [r1, #16]
 801267a:	eba5 0901 	sub.w	r9, r5, r1
 801267e:	6965      	ldr	r5, [r4, #20]
 8012680:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012684:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012688:	3301      	adds	r3, #1
 801268a:	444b      	add	r3, r9
 801268c:	106d      	asrs	r5, r5, #1
 801268e:	429d      	cmp	r5, r3
 8012690:	bf38      	it	cc
 8012692:	461d      	movcc	r5, r3
 8012694:	0553      	lsls	r3, r2, #21
 8012696:	d531      	bpl.n	80126fc <__ssputs_r+0xa0>
 8012698:	4629      	mov	r1, r5
 801269a:	f7ff ff1b 	bl	80124d4 <_malloc_r>
 801269e:	4606      	mov	r6, r0
 80126a0:	b950      	cbnz	r0, 80126b8 <__ssputs_r+0x5c>
 80126a2:	230c      	movs	r3, #12
 80126a4:	f8ca 3000 	str.w	r3, [sl]
 80126a8:	89a3      	ldrh	r3, [r4, #12]
 80126aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126ae:	81a3      	strh	r3, [r4, #12]
 80126b0:	f04f 30ff 	mov.w	r0, #4294967295
 80126b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126b8:	6921      	ldr	r1, [r4, #16]
 80126ba:	464a      	mov	r2, r9
 80126bc:	f7ff fe88 	bl	80123d0 <memcpy>
 80126c0:	89a3      	ldrh	r3, [r4, #12]
 80126c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80126c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126ca:	81a3      	strh	r3, [r4, #12]
 80126cc:	6126      	str	r6, [r4, #16]
 80126ce:	6165      	str	r5, [r4, #20]
 80126d0:	444e      	add	r6, r9
 80126d2:	eba5 0509 	sub.w	r5, r5, r9
 80126d6:	6026      	str	r6, [r4, #0]
 80126d8:	60a5      	str	r5, [r4, #8]
 80126da:	463e      	mov	r6, r7
 80126dc:	42be      	cmp	r6, r7
 80126de:	d900      	bls.n	80126e2 <__ssputs_r+0x86>
 80126e0:	463e      	mov	r6, r7
 80126e2:	6820      	ldr	r0, [r4, #0]
 80126e4:	4632      	mov	r2, r6
 80126e6:	4641      	mov	r1, r8
 80126e8:	f000 faaa 	bl	8012c40 <memmove>
 80126ec:	68a3      	ldr	r3, [r4, #8]
 80126ee:	1b9b      	subs	r3, r3, r6
 80126f0:	60a3      	str	r3, [r4, #8]
 80126f2:	6823      	ldr	r3, [r4, #0]
 80126f4:	4433      	add	r3, r6
 80126f6:	6023      	str	r3, [r4, #0]
 80126f8:	2000      	movs	r0, #0
 80126fa:	e7db      	b.n	80126b4 <__ssputs_r+0x58>
 80126fc:	462a      	mov	r2, r5
 80126fe:	f000 fab9 	bl	8012c74 <_realloc_r>
 8012702:	4606      	mov	r6, r0
 8012704:	2800      	cmp	r0, #0
 8012706:	d1e1      	bne.n	80126cc <__ssputs_r+0x70>
 8012708:	6921      	ldr	r1, [r4, #16]
 801270a:	4650      	mov	r0, sl
 801270c:	f7ff fe76 	bl	80123fc <_free_r>
 8012710:	e7c7      	b.n	80126a2 <__ssputs_r+0x46>
	...

08012714 <_svfiprintf_r>:
 8012714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012718:	4698      	mov	r8, r3
 801271a:	898b      	ldrh	r3, [r1, #12]
 801271c:	061b      	lsls	r3, r3, #24
 801271e:	b09d      	sub	sp, #116	; 0x74
 8012720:	4607      	mov	r7, r0
 8012722:	460d      	mov	r5, r1
 8012724:	4614      	mov	r4, r2
 8012726:	d50e      	bpl.n	8012746 <_svfiprintf_r+0x32>
 8012728:	690b      	ldr	r3, [r1, #16]
 801272a:	b963      	cbnz	r3, 8012746 <_svfiprintf_r+0x32>
 801272c:	2140      	movs	r1, #64	; 0x40
 801272e:	f7ff fed1 	bl	80124d4 <_malloc_r>
 8012732:	6028      	str	r0, [r5, #0]
 8012734:	6128      	str	r0, [r5, #16]
 8012736:	b920      	cbnz	r0, 8012742 <_svfiprintf_r+0x2e>
 8012738:	230c      	movs	r3, #12
 801273a:	603b      	str	r3, [r7, #0]
 801273c:	f04f 30ff 	mov.w	r0, #4294967295
 8012740:	e0d1      	b.n	80128e6 <_svfiprintf_r+0x1d2>
 8012742:	2340      	movs	r3, #64	; 0x40
 8012744:	616b      	str	r3, [r5, #20]
 8012746:	2300      	movs	r3, #0
 8012748:	9309      	str	r3, [sp, #36]	; 0x24
 801274a:	2320      	movs	r3, #32
 801274c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012750:	f8cd 800c 	str.w	r8, [sp, #12]
 8012754:	2330      	movs	r3, #48	; 0x30
 8012756:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012900 <_svfiprintf_r+0x1ec>
 801275a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801275e:	f04f 0901 	mov.w	r9, #1
 8012762:	4623      	mov	r3, r4
 8012764:	469a      	mov	sl, r3
 8012766:	f813 2b01 	ldrb.w	r2, [r3], #1
 801276a:	b10a      	cbz	r2, 8012770 <_svfiprintf_r+0x5c>
 801276c:	2a25      	cmp	r2, #37	; 0x25
 801276e:	d1f9      	bne.n	8012764 <_svfiprintf_r+0x50>
 8012770:	ebba 0b04 	subs.w	fp, sl, r4
 8012774:	d00b      	beq.n	801278e <_svfiprintf_r+0x7a>
 8012776:	465b      	mov	r3, fp
 8012778:	4622      	mov	r2, r4
 801277a:	4629      	mov	r1, r5
 801277c:	4638      	mov	r0, r7
 801277e:	f7ff ff6d 	bl	801265c <__ssputs_r>
 8012782:	3001      	adds	r0, #1
 8012784:	f000 80aa 	beq.w	80128dc <_svfiprintf_r+0x1c8>
 8012788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801278a:	445a      	add	r2, fp
 801278c:	9209      	str	r2, [sp, #36]	; 0x24
 801278e:	f89a 3000 	ldrb.w	r3, [sl]
 8012792:	2b00      	cmp	r3, #0
 8012794:	f000 80a2 	beq.w	80128dc <_svfiprintf_r+0x1c8>
 8012798:	2300      	movs	r3, #0
 801279a:	f04f 32ff 	mov.w	r2, #4294967295
 801279e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80127a2:	f10a 0a01 	add.w	sl, sl, #1
 80127a6:	9304      	str	r3, [sp, #16]
 80127a8:	9307      	str	r3, [sp, #28]
 80127aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80127ae:	931a      	str	r3, [sp, #104]	; 0x68
 80127b0:	4654      	mov	r4, sl
 80127b2:	2205      	movs	r2, #5
 80127b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127b8:	4851      	ldr	r0, [pc, #324]	; (8012900 <_svfiprintf_r+0x1ec>)
 80127ba:	f7ed fd19 	bl	80001f0 <memchr>
 80127be:	9a04      	ldr	r2, [sp, #16]
 80127c0:	b9d8      	cbnz	r0, 80127fa <_svfiprintf_r+0xe6>
 80127c2:	06d0      	lsls	r0, r2, #27
 80127c4:	bf44      	itt	mi
 80127c6:	2320      	movmi	r3, #32
 80127c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80127cc:	0711      	lsls	r1, r2, #28
 80127ce:	bf44      	itt	mi
 80127d0:	232b      	movmi	r3, #43	; 0x2b
 80127d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80127d6:	f89a 3000 	ldrb.w	r3, [sl]
 80127da:	2b2a      	cmp	r3, #42	; 0x2a
 80127dc:	d015      	beq.n	801280a <_svfiprintf_r+0xf6>
 80127de:	9a07      	ldr	r2, [sp, #28]
 80127e0:	4654      	mov	r4, sl
 80127e2:	2000      	movs	r0, #0
 80127e4:	f04f 0c0a 	mov.w	ip, #10
 80127e8:	4621      	mov	r1, r4
 80127ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127ee:	3b30      	subs	r3, #48	; 0x30
 80127f0:	2b09      	cmp	r3, #9
 80127f2:	d94e      	bls.n	8012892 <_svfiprintf_r+0x17e>
 80127f4:	b1b0      	cbz	r0, 8012824 <_svfiprintf_r+0x110>
 80127f6:	9207      	str	r2, [sp, #28]
 80127f8:	e014      	b.n	8012824 <_svfiprintf_r+0x110>
 80127fa:	eba0 0308 	sub.w	r3, r0, r8
 80127fe:	fa09 f303 	lsl.w	r3, r9, r3
 8012802:	4313      	orrs	r3, r2
 8012804:	9304      	str	r3, [sp, #16]
 8012806:	46a2      	mov	sl, r4
 8012808:	e7d2      	b.n	80127b0 <_svfiprintf_r+0x9c>
 801280a:	9b03      	ldr	r3, [sp, #12]
 801280c:	1d19      	adds	r1, r3, #4
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	9103      	str	r1, [sp, #12]
 8012812:	2b00      	cmp	r3, #0
 8012814:	bfbb      	ittet	lt
 8012816:	425b      	neglt	r3, r3
 8012818:	f042 0202 	orrlt.w	r2, r2, #2
 801281c:	9307      	strge	r3, [sp, #28]
 801281e:	9307      	strlt	r3, [sp, #28]
 8012820:	bfb8      	it	lt
 8012822:	9204      	strlt	r2, [sp, #16]
 8012824:	7823      	ldrb	r3, [r4, #0]
 8012826:	2b2e      	cmp	r3, #46	; 0x2e
 8012828:	d10c      	bne.n	8012844 <_svfiprintf_r+0x130>
 801282a:	7863      	ldrb	r3, [r4, #1]
 801282c:	2b2a      	cmp	r3, #42	; 0x2a
 801282e:	d135      	bne.n	801289c <_svfiprintf_r+0x188>
 8012830:	9b03      	ldr	r3, [sp, #12]
 8012832:	1d1a      	adds	r2, r3, #4
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	9203      	str	r2, [sp, #12]
 8012838:	2b00      	cmp	r3, #0
 801283a:	bfb8      	it	lt
 801283c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012840:	3402      	adds	r4, #2
 8012842:	9305      	str	r3, [sp, #20]
 8012844:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012910 <_svfiprintf_r+0x1fc>
 8012848:	7821      	ldrb	r1, [r4, #0]
 801284a:	2203      	movs	r2, #3
 801284c:	4650      	mov	r0, sl
 801284e:	f7ed fccf 	bl	80001f0 <memchr>
 8012852:	b140      	cbz	r0, 8012866 <_svfiprintf_r+0x152>
 8012854:	2340      	movs	r3, #64	; 0x40
 8012856:	eba0 000a 	sub.w	r0, r0, sl
 801285a:	fa03 f000 	lsl.w	r0, r3, r0
 801285e:	9b04      	ldr	r3, [sp, #16]
 8012860:	4303      	orrs	r3, r0
 8012862:	3401      	adds	r4, #1
 8012864:	9304      	str	r3, [sp, #16]
 8012866:	f814 1b01 	ldrb.w	r1, [r4], #1
 801286a:	4826      	ldr	r0, [pc, #152]	; (8012904 <_svfiprintf_r+0x1f0>)
 801286c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012870:	2206      	movs	r2, #6
 8012872:	f7ed fcbd 	bl	80001f0 <memchr>
 8012876:	2800      	cmp	r0, #0
 8012878:	d038      	beq.n	80128ec <_svfiprintf_r+0x1d8>
 801287a:	4b23      	ldr	r3, [pc, #140]	; (8012908 <_svfiprintf_r+0x1f4>)
 801287c:	bb1b      	cbnz	r3, 80128c6 <_svfiprintf_r+0x1b2>
 801287e:	9b03      	ldr	r3, [sp, #12]
 8012880:	3307      	adds	r3, #7
 8012882:	f023 0307 	bic.w	r3, r3, #7
 8012886:	3308      	adds	r3, #8
 8012888:	9303      	str	r3, [sp, #12]
 801288a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801288c:	4433      	add	r3, r6
 801288e:	9309      	str	r3, [sp, #36]	; 0x24
 8012890:	e767      	b.n	8012762 <_svfiprintf_r+0x4e>
 8012892:	fb0c 3202 	mla	r2, ip, r2, r3
 8012896:	460c      	mov	r4, r1
 8012898:	2001      	movs	r0, #1
 801289a:	e7a5      	b.n	80127e8 <_svfiprintf_r+0xd4>
 801289c:	2300      	movs	r3, #0
 801289e:	3401      	adds	r4, #1
 80128a0:	9305      	str	r3, [sp, #20]
 80128a2:	4619      	mov	r1, r3
 80128a4:	f04f 0c0a 	mov.w	ip, #10
 80128a8:	4620      	mov	r0, r4
 80128aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128ae:	3a30      	subs	r2, #48	; 0x30
 80128b0:	2a09      	cmp	r2, #9
 80128b2:	d903      	bls.n	80128bc <_svfiprintf_r+0x1a8>
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d0c5      	beq.n	8012844 <_svfiprintf_r+0x130>
 80128b8:	9105      	str	r1, [sp, #20]
 80128ba:	e7c3      	b.n	8012844 <_svfiprintf_r+0x130>
 80128bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80128c0:	4604      	mov	r4, r0
 80128c2:	2301      	movs	r3, #1
 80128c4:	e7f0      	b.n	80128a8 <_svfiprintf_r+0x194>
 80128c6:	ab03      	add	r3, sp, #12
 80128c8:	9300      	str	r3, [sp, #0]
 80128ca:	462a      	mov	r2, r5
 80128cc:	4b0f      	ldr	r3, [pc, #60]	; (801290c <_svfiprintf_r+0x1f8>)
 80128ce:	a904      	add	r1, sp, #16
 80128d0:	4638      	mov	r0, r7
 80128d2:	f3af 8000 	nop.w
 80128d6:	1c42      	adds	r2, r0, #1
 80128d8:	4606      	mov	r6, r0
 80128da:	d1d6      	bne.n	801288a <_svfiprintf_r+0x176>
 80128dc:	89ab      	ldrh	r3, [r5, #12]
 80128de:	065b      	lsls	r3, r3, #25
 80128e0:	f53f af2c 	bmi.w	801273c <_svfiprintf_r+0x28>
 80128e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80128e6:	b01d      	add	sp, #116	; 0x74
 80128e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128ec:	ab03      	add	r3, sp, #12
 80128ee:	9300      	str	r3, [sp, #0]
 80128f0:	462a      	mov	r2, r5
 80128f2:	4b06      	ldr	r3, [pc, #24]	; (801290c <_svfiprintf_r+0x1f8>)
 80128f4:	a904      	add	r1, sp, #16
 80128f6:	4638      	mov	r0, r7
 80128f8:	f000 f87a 	bl	80129f0 <_printf_i>
 80128fc:	e7eb      	b.n	80128d6 <_svfiprintf_r+0x1c2>
 80128fe:	bf00      	nop
 8012900:	0801335a 	.word	0x0801335a
 8012904:	08013364 	.word	0x08013364
 8012908:	00000000 	.word	0x00000000
 801290c:	0801265d 	.word	0x0801265d
 8012910:	08013360 	.word	0x08013360

08012914 <_printf_common>:
 8012914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012918:	4616      	mov	r6, r2
 801291a:	4699      	mov	r9, r3
 801291c:	688a      	ldr	r2, [r1, #8]
 801291e:	690b      	ldr	r3, [r1, #16]
 8012920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012924:	4293      	cmp	r3, r2
 8012926:	bfb8      	it	lt
 8012928:	4613      	movlt	r3, r2
 801292a:	6033      	str	r3, [r6, #0]
 801292c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012930:	4607      	mov	r7, r0
 8012932:	460c      	mov	r4, r1
 8012934:	b10a      	cbz	r2, 801293a <_printf_common+0x26>
 8012936:	3301      	adds	r3, #1
 8012938:	6033      	str	r3, [r6, #0]
 801293a:	6823      	ldr	r3, [r4, #0]
 801293c:	0699      	lsls	r1, r3, #26
 801293e:	bf42      	ittt	mi
 8012940:	6833      	ldrmi	r3, [r6, #0]
 8012942:	3302      	addmi	r3, #2
 8012944:	6033      	strmi	r3, [r6, #0]
 8012946:	6825      	ldr	r5, [r4, #0]
 8012948:	f015 0506 	ands.w	r5, r5, #6
 801294c:	d106      	bne.n	801295c <_printf_common+0x48>
 801294e:	f104 0a19 	add.w	sl, r4, #25
 8012952:	68e3      	ldr	r3, [r4, #12]
 8012954:	6832      	ldr	r2, [r6, #0]
 8012956:	1a9b      	subs	r3, r3, r2
 8012958:	42ab      	cmp	r3, r5
 801295a:	dc26      	bgt.n	80129aa <_printf_common+0x96>
 801295c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012960:	1e13      	subs	r3, r2, #0
 8012962:	6822      	ldr	r2, [r4, #0]
 8012964:	bf18      	it	ne
 8012966:	2301      	movne	r3, #1
 8012968:	0692      	lsls	r2, r2, #26
 801296a:	d42b      	bmi.n	80129c4 <_printf_common+0xb0>
 801296c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012970:	4649      	mov	r1, r9
 8012972:	4638      	mov	r0, r7
 8012974:	47c0      	blx	r8
 8012976:	3001      	adds	r0, #1
 8012978:	d01e      	beq.n	80129b8 <_printf_common+0xa4>
 801297a:	6823      	ldr	r3, [r4, #0]
 801297c:	68e5      	ldr	r5, [r4, #12]
 801297e:	6832      	ldr	r2, [r6, #0]
 8012980:	f003 0306 	and.w	r3, r3, #6
 8012984:	2b04      	cmp	r3, #4
 8012986:	bf08      	it	eq
 8012988:	1aad      	subeq	r5, r5, r2
 801298a:	68a3      	ldr	r3, [r4, #8]
 801298c:	6922      	ldr	r2, [r4, #16]
 801298e:	bf0c      	ite	eq
 8012990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012994:	2500      	movne	r5, #0
 8012996:	4293      	cmp	r3, r2
 8012998:	bfc4      	itt	gt
 801299a:	1a9b      	subgt	r3, r3, r2
 801299c:	18ed      	addgt	r5, r5, r3
 801299e:	2600      	movs	r6, #0
 80129a0:	341a      	adds	r4, #26
 80129a2:	42b5      	cmp	r5, r6
 80129a4:	d11a      	bne.n	80129dc <_printf_common+0xc8>
 80129a6:	2000      	movs	r0, #0
 80129a8:	e008      	b.n	80129bc <_printf_common+0xa8>
 80129aa:	2301      	movs	r3, #1
 80129ac:	4652      	mov	r2, sl
 80129ae:	4649      	mov	r1, r9
 80129b0:	4638      	mov	r0, r7
 80129b2:	47c0      	blx	r8
 80129b4:	3001      	adds	r0, #1
 80129b6:	d103      	bne.n	80129c0 <_printf_common+0xac>
 80129b8:	f04f 30ff 	mov.w	r0, #4294967295
 80129bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129c0:	3501      	adds	r5, #1
 80129c2:	e7c6      	b.n	8012952 <_printf_common+0x3e>
 80129c4:	18e1      	adds	r1, r4, r3
 80129c6:	1c5a      	adds	r2, r3, #1
 80129c8:	2030      	movs	r0, #48	; 0x30
 80129ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80129ce:	4422      	add	r2, r4
 80129d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80129d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80129d8:	3302      	adds	r3, #2
 80129da:	e7c7      	b.n	801296c <_printf_common+0x58>
 80129dc:	2301      	movs	r3, #1
 80129de:	4622      	mov	r2, r4
 80129e0:	4649      	mov	r1, r9
 80129e2:	4638      	mov	r0, r7
 80129e4:	47c0      	blx	r8
 80129e6:	3001      	adds	r0, #1
 80129e8:	d0e6      	beq.n	80129b8 <_printf_common+0xa4>
 80129ea:	3601      	adds	r6, #1
 80129ec:	e7d9      	b.n	80129a2 <_printf_common+0x8e>
	...

080129f0 <_printf_i>:
 80129f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80129f4:	7e0f      	ldrb	r7, [r1, #24]
 80129f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80129f8:	2f78      	cmp	r7, #120	; 0x78
 80129fa:	4691      	mov	r9, r2
 80129fc:	4680      	mov	r8, r0
 80129fe:	460c      	mov	r4, r1
 8012a00:	469a      	mov	sl, r3
 8012a02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012a06:	d807      	bhi.n	8012a18 <_printf_i+0x28>
 8012a08:	2f62      	cmp	r7, #98	; 0x62
 8012a0a:	d80a      	bhi.n	8012a22 <_printf_i+0x32>
 8012a0c:	2f00      	cmp	r7, #0
 8012a0e:	f000 80d8 	beq.w	8012bc2 <_printf_i+0x1d2>
 8012a12:	2f58      	cmp	r7, #88	; 0x58
 8012a14:	f000 80a3 	beq.w	8012b5e <_printf_i+0x16e>
 8012a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012a20:	e03a      	b.n	8012a98 <_printf_i+0xa8>
 8012a22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012a26:	2b15      	cmp	r3, #21
 8012a28:	d8f6      	bhi.n	8012a18 <_printf_i+0x28>
 8012a2a:	a101      	add	r1, pc, #4	; (adr r1, 8012a30 <_printf_i+0x40>)
 8012a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012a30:	08012a89 	.word	0x08012a89
 8012a34:	08012a9d 	.word	0x08012a9d
 8012a38:	08012a19 	.word	0x08012a19
 8012a3c:	08012a19 	.word	0x08012a19
 8012a40:	08012a19 	.word	0x08012a19
 8012a44:	08012a19 	.word	0x08012a19
 8012a48:	08012a9d 	.word	0x08012a9d
 8012a4c:	08012a19 	.word	0x08012a19
 8012a50:	08012a19 	.word	0x08012a19
 8012a54:	08012a19 	.word	0x08012a19
 8012a58:	08012a19 	.word	0x08012a19
 8012a5c:	08012ba9 	.word	0x08012ba9
 8012a60:	08012acd 	.word	0x08012acd
 8012a64:	08012b8b 	.word	0x08012b8b
 8012a68:	08012a19 	.word	0x08012a19
 8012a6c:	08012a19 	.word	0x08012a19
 8012a70:	08012bcb 	.word	0x08012bcb
 8012a74:	08012a19 	.word	0x08012a19
 8012a78:	08012acd 	.word	0x08012acd
 8012a7c:	08012a19 	.word	0x08012a19
 8012a80:	08012a19 	.word	0x08012a19
 8012a84:	08012b93 	.word	0x08012b93
 8012a88:	682b      	ldr	r3, [r5, #0]
 8012a8a:	1d1a      	adds	r2, r3, #4
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	602a      	str	r2, [r5, #0]
 8012a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012a98:	2301      	movs	r3, #1
 8012a9a:	e0a3      	b.n	8012be4 <_printf_i+0x1f4>
 8012a9c:	6820      	ldr	r0, [r4, #0]
 8012a9e:	6829      	ldr	r1, [r5, #0]
 8012aa0:	0606      	lsls	r6, r0, #24
 8012aa2:	f101 0304 	add.w	r3, r1, #4
 8012aa6:	d50a      	bpl.n	8012abe <_printf_i+0xce>
 8012aa8:	680e      	ldr	r6, [r1, #0]
 8012aaa:	602b      	str	r3, [r5, #0]
 8012aac:	2e00      	cmp	r6, #0
 8012aae:	da03      	bge.n	8012ab8 <_printf_i+0xc8>
 8012ab0:	232d      	movs	r3, #45	; 0x2d
 8012ab2:	4276      	negs	r6, r6
 8012ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ab8:	485e      	ldr	r0, [pc, #376]	; (8012c34 <_printf_i+0x244>)
 8012aba:	230a      	movs	r3, #10
 8012abc:	e019      	b.n	8012af2 <_printf_i+0x102>
 8012abe:	680e      	ldr	r6, [r1, #0]
 8012ac0:	602b      	str	r3, [r5, #0]
 8012ac2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012ac6:	bf18      	it	ne
 8012ac8:	b236      	sxthne	r6, r6
 8012aca:	e7ef      	b.n	8012aac <_printf_i+0xbc>
 8012acc:	682b      	ldr	r3, [r5, #0]
 8012ace:	6820      	ldr	r0, [r4, #0]
 8012ad0:	1d19      	adds	r1, r3, #4
 8012ad2:	6029      	str	r1, [r5, #0]
 8012ad4:	0601      	lsls	r1, r0, #24
 8012ad6:	d501      	bpl.n	8012adc <_printf_i+0xec>
 8012ad8:	681e      	ldr	r6, [r3, #0]
 8012ada:	e002      	b.n	8012ae2 <_printf_i+0xf2>
 8012adc:	0646      	lsls	r6, r0, #25
 8012ade:	d5fb      	bpl.n	8012ad8 <_printf_i+0xe8>
 8012ae0:	881e      	ldrh	r6, [r3, #0]
 8012ae2:	4854      	ldr	r0, [pc, #336]	; (8012c34 <_printf_i+0x244>)
 8012ae4:	2f6f      	cmp	r7, #111	; 0x6f
 8012ae6:	bf0c      	ite	eq
 8012ae8:	2308      	moveq	r3, #8
 8012aea:	230a      	movne	r3, #10
 8012aec:	2100      	movs	r1, #0
 8012aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012af2:	6865      	ldr	r5, [r4, #4]
 8012af4:	60a5      	str	r5, [r4, #8]
 8012af6:	2d00      	cmp	r5, #0
 8012af8:	bfa2      	ittt	ge
 8012afa:	6821      	ldrge	r1, [r4, #0]
 8012afc:	f021 0104 	bicge.w	r1, r1, #4
 8012b00:	6021      	strge	r1, [r4, #0]
 8012b02:	b90e      	cbnz	r6, 8012b08 <_printf_i+0x118>
 8012b04:	2d00      	cmp	r5, #0
 8012b06:	d04d      	beq.n	8012ba4 <_printf_i+0x1b4>
 8012b08:	4615      	mov	r5, r2
 8012b0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8012b0e:	fb03 6711 	mls	r7, r3, r1, r6
 8012b12:	5dc7      	ldrb	r7, [r0, r7]
 8012b14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012b18:	4637      	mov	r7, r6
 8012b1a:	42bb      	cmp	r3, r7
 8012b1c:	460e      	mov	r6, r1
 8012b1e:	d9f4      	bls.n	8012b0a <_printf_i+0x11a>
 8012b20:	2b08      	cmp	r3, #8
 8012b22:	d10b      	bne.n	8012b3c <_printf_i+0x14c>
 8012b24:	6823      	ldr	r3, [r4, #0]
 8012b26:	07de      	lsls	r6, r3, #31
 8012b28:	d508      	bpl.n	8012b3c <_printf_i+0x14c>
 8012b2a:	6923      	ldr	r3, [r4, #16]
 8012b2c:	6861      	ldr	r1, [r4, #4]
 8012b2e:	4299      	cmp	r1, r3
 8012b30:	bfde      	ittt	le
 8012b32:	2330      	movle	r3, #48	; 0x30
 8012b34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012b38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012b3c:	1b52      	subs	r2, r2, r5
 8012b3e:	6122      	str	r2, [r4, #16]
 8012b40:	f8cd a000 	str.w	sl, [sp]
 8012b44:	464b      	mov	r3, r9
 8012b46:	aa03      	add	r2, sp, #12
 8012b48:	4621      	mov	r1, r4
 8012b4a:	4640      	mov	r0, r8
 8012b4c:	f7ff fee2 	bl	8012914 <_printf_common>
 8012b50:	3001      	adds	r0, #1
 8012b52:	d14c      	bne.n	8012bee <_printf_i+0x1fe>
 8012b54:	f04f 30ff 	mov.w	r0, #4294967295
 8012b58:	b004      	add	sp, #16
 8012b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b5e:	4835      	ldr	r0, [pc, #212]	; (8012c34 <_printf_i+0x244>)
 8012b60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012b64:	6829      	ldr	r1, [r5, #0]
 8012b66:	6823      	ldr	r3, [r4, #0]
 8012b68:	f851 6b04 	ldr.w	r6, [r1], #4
 8012b6c:	6029      	str	r1, [r5, #0]
 8012b6e:	061d      	lsls	r5, r3, #24
 8012b70:	d514      	bpl.n	8012b9c <_printf_i+0x1ac>
 8012b72:	07df      	lsls	r7, r3, #31
 8012b74:	bf44      	itt	mi
 8012b76:	f043 0320 	orrmi.w	r3, r3, #32
 8012b7a:	6023      	strmi	r3, [r4, #0]
 8012b7c:	b91e      	cbnz	r6, 8012b86 <_printf_i+0x196>
 8012b7e:	6823      	ldr	r3, [r4, #0]
 8012b80:	f023 0320 	bic.w	r3, r3, #32
 8012b84:	6023      	str	r3, [r4, #0]
 8012b86:	2310      	movs	r3, #16
 8012b88:	e7b0      	b.n	8012aec <_printf_i+0xfc>
 8012b8a:	6823      	ldr	r3, [r4, #0]
 8012b8c:	f043 0320 	orr.w	r3, r3, #32
 8012b90:	6023      	str	r3, [r4, #0]
 8012b92:	2378      	movs	r3, #120	; 0x78
 8012b94:	4828      	ldr	r0, [pc, #160]	; (8012c38 <_printf_i+0x248>)
 8012b96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012b9a:	e7e3      	b.n	8012b64 <_printf_i+0x174>
 8012b9c:	0659      	lsls	r1, r3, #25
 8012b9e:	bf48      	it	mi
 8012ba0:	b2b6      	uxthmi	r6, r6
 8012ba2:	e7e6      	b.n	8012b72 <_printf_i+0x182>
 8012ba4:	4615      	mov	r5, r2
 8012ba6:	e7bb      	b.n	8012b20 <_printf_i+0x130>
 8012ba8:	682b      	ldr	r3, [r5, #0]
 8012baa:	6826      	ldr	r6, [r4, #0]
 8012bac:	6961      	ldr	r1, [r4, #20]
 8012bae:	1d18      	adds	r0, r3, #4
 8012bb0:	6028      	str	r0, [r5, #0]
 8012bb2:	0635      	lsls	r5, r6, #24
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	d501      	bpl.n	8012bbc <_printf_i+0x1cc>
 8012bb8:	6019      	str	r1, [r3, #0]
 8012bba:	e002      	b.n	8012bc2 <_printf_i+0x1d2>
 8012bbc:	0670      	lsls	r0, r6, #25
 8012bbe:	d5fb      	bpl.n	8012bb8 <_printf_i+0x1c8>
 8012bc0:	8019      	strh	r1, [r3, #0]
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	6123      	str	r3, [r4, #16]
 8012bc6:	4615      	mov	r5, r2
 8012bc8:	e7ba      	b.n	8012b40 <_printf_i+0x150>
 8012bca:	682b      	ldr	r3, [r5, #0]
 8012bcc:	1d1a      	adds	r2, r3, #4
 8012bce:	602a      	str	r2, [r5, #0]
 8012bd0:	681d      	ldr	r5, [r3, #0]
 8012bd2:	6862      	ldr	r2, [r4, #4]
 8012bd4:	2100      	movs	r1, #0
 8012bd6:	4628      	mov	r0, r5
 8012bd8:	f7ed fb0a 	bl	80001f0 <memchr>
 8012bdc:	b108      	cbz	r0, 8012be2 <_printf_i+0x1f2>
 8012bde:	1b40      	subs	r0, r0, r5
 8012be0:	6060      	str	r0, [r4, #4]
 8012be2:	6863      	ldr	r3, [r4, #4]
 8012be4:	6123      	str	r3, [r4, #16]
 8012be6:	2300      	movs	r3, #0
 8012be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012bec:	e7a8      	b.n	8012b40 <_printf_i+0x150>
 8012bee:	6923      	ldr	r3, [r4, #16]
 8012bf0:	462a      	mov	r2, r5
 8012bf2:	4649      	mov	r1, r9
 8012bf4:	4640      	mov	r0, r8
 8012bf6:	47d0      	blx	sl
 8012bf8:	3001      	adds	r0, #1
 8012bfa:	d0ab      	beq.n	8012b54 <_printf_i+0x164>
 8012bfc:	6823      	ldr	r3, [r4, #0]
 8012bfe:	079b      	lsls	r3, r3, #30
 8012c00:	d413      	bmi.n	8012c2a <_printf_i+0x23a>
 8012c02:	68e0      	ldr	r0, [r4, #12]
 8012c04:	9b03      	ldr	r3, [sp, #12]
 8012c06:	4298      	cmp	r0, r3
 8012c08:	bfb8      	it	lt
 8012c0a:	4618      	movlt	r0, r3
 8012c0c:	e7a4      	b.n	8012b58 <_printf_i+0x168>
 8012c0e:	2301      	movs	r3, #1
 8012c10:	4632      	mov	r2, r6
 8012c12:	4649      	mov	r1, r9
 8012c14:	4640      	mov	r0, r8
 8012c16:	47d0      	blx	sl
 8012c18:	3001      	adds	r0, #1
 8012c1a:	d09b      	beq.n	8012b54 <_printf_i+0x164>
 8012c1c:	3501      	adds	r5, #1
 8012c1e:	68e3      	ldr	r3, [r4, #12]
 8012c20:	9903      	ldr	r1, [sp, #12]
 8012c22:	1a5b      	subs	r3, r3, r1
 8012c24:	42ab      	cmp	r3, r5
 8012c26:	dcf2      	bgt.n	8012c0e <_printf_i+0x21e>
 8012c28:	e7eb      	b.n	8012c02 <_printf_i+0x212>
 8012c2a:	2500      	movs	r5, #0
 8012c2c:	f104 0619 	add.w	r6, r4, #25
 8012c30:	e7f5      	b.n	8012c1e <_printf_i+0x22e>
 8012c32:	bf00      	nop
 8012c34:	0801336b 	.word	0x0801336b
 8012c38:	0801337c 	.word	0x0801337c

08012c3c <__retarget_lock_acquire_recursive>:
 8012c3c:	4770      	bx	lr

08012c3e <__retarget_lock_release_recursive>:
 8012c3e:	4770      	bx	lr

08012c40 <memmove>:
 8012c40:	4288      	cmp	r0, r1
 8012c42:	b510      	push	{r4, lr}
 8012c44:	eb01 0402 	add.w	r4, r1, r2
 8012c48:	d902      	bls.n	8012c50 <memmove+0x10>
 8012c4a:	4284      	cmp	r4, r0
 8012c4c:	4623      	mov	r3, r4
 8012c4e:	d807      	bhi.n	8012c60 <memmove+0x20>
 8012c50:	1e43      	subs	r3, r0, #1
 8012c52:	42a1      	cmp	r1, r4
 8012c54:	d008      	beq.n	8012c68 <memmove+0x28>
 8012c56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012c5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012c5e:	e7f8      	b.n	8012c52 <memmove+0x12>
 8012c60:	4402      	add	r2, r0
 8012c62:	4601      	mov	r1, r0
 8012c64:	428a      	cmp	r2, r1
 8012c66:	d100      	bne.n	8012c6a <memmove+0x2a>
 8012c68:	bd10      	pop	{r4, pc}
 8012c6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012c6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012c72:	e7f7      	b.n	8012c64 <memmove+0x24>

08012c74 <_realloc_r>:
 8012c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c78:	4680      	mov	r8, r0
 8012c7a:	4614      	mov	r4, r2
 8012c7c:	460e      	mov	r6, r1
 8012c7e:	b921      	cbnz	r1, 8012c8a <_realloc_r+0x16>
 8012c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c84:	4611      	mov	r1, r2
 8012c86:	f7ff bc25 	b.w	80124d4 <_malloc_r>
 8012c8a:	b92a      	cbnz	r2, 8012c98 <_realloc_r+0x24>
 8012c8c:	f7ff fbb6 	bl	80123fc <_free_r>
 8012c90:	4625      	mov	r5, r4
 8012c92:	4628      	mov	r0, r5
 8012c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c98:	f000 f81b 	bl	8012cd2 <_malloc_usable_size_r>
 8012c9c:	4284      	cmp	r4, r0
 8012c9e:	4607      	mov	r7, r0
 8012ca0:	d802      	bhi.n	8012ca8 <_realloc_r+0x34>
 8012ca2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012ca6:	d812      	bhi.n	8012cce <_realloc_r+0x5a>
 8012ca8:	4621      	mov	r1, r4
 8012caa:	4640      	mov	r0, r8
 8012cac:	f7ff fc12 	bl	80124d4 <_malloc_r>
 8012cb0:	4605      	mov	r5, r0
 8012cb2:	2800      	cmp	r0, #0
 8012cb4:	d0ed      	beq.n	8012c92 <_realloc_r+0x1e>
 8012cb6:	42bc      	cmp	r4, r7
 8012cb8:	4622      	mov	r2, r4
 8012cba:	4631      	mov	r1, r6
 8012cbc:	bf28      	it	cs
 8012cbe:	463a      	movcs	r2, r7
 8012cc0:	f7ff fb86 	bl	80123d0 <memcpy>
 8012cc4:	4631      	mov	r1, r6
 8012cc6:	4640      	mov	r0, r8
 8012cc8:	f7ff fb98 	bl	80123fc <_free_r>
 8012ccc:	e7e1      	b.n	8012c92 <_realloc_r+0x1e>
 8012cce:	4635      	mov	r5, r6
 8012cd0:	e7df      	b.n	8012c92 <_realloc_r+0x1e>

08012cd2 <_malloc_usable_size_r>:
 8012cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012cd6:	1f18      	subs	r0, r3, #4
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	bfbc      	itt	lt
 8012cdc:	580b      	ldrlt	r3, [r1, r0]
 8012cde:	18c0      	addlt	r0, r0, r3
 8012ce0:	4770      	bx	lr
	...

08012ce4 <_init>:
 8012ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ce6:	bf00      	nop
 8012ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cea:	bc08      	pop	{r3}
 8012cec:	469e      	mov	lr, r3
 8012cee:	4770      	bx	lr

08012cf0 <_fini>:
 8012cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cf2:	bf00      	nop
 8012cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cf6:	bc08      	pop	{r3}
 8012cf8:	469e      	mov	lr, r3
 8012cfa:	4770      	bx	lr
