
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012668  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013b8  08012808  08012808  00022808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013bc0  08013bc0  0003073c  2**0
                  CONTENTS
  4 .ARM          00000008  08013bc0  08013bc0  00023bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013bc8  08013bc8  0003073c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013bc8  08013bc8  00023bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013bcc  08013bcc  00023bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000073c  20000000  08013bd0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009f00  2000073c  0801430c  0003073c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a63c  0801430c  0003a63c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003073c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aa05  00000000  00000000  0003076c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000605c  00000000  00000000  0005b171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002368  00000000  00000000  000611d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020f8  00000000  00000000  00063538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec55  00000000  00000000  00065630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a0b3  00000000  00000000  00084285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a13c0  00000000  00000000  000ae338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014f6f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a0b8  00000000  00000000  0014f748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000073c 	.word	0x2000073c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080127f0 	.word	0x080127f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000740 	.word	0x20000740
 80001dc:	080127f0 	.word	0x080127f0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295
 80008d0:	f000 b974 	b.w	8000bbc <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008f0:	9d08      	ldr	r5, [sp, #32]
 80008f2:	4604      	mov	r4, r0
 80008f4:	468e      	mov	lr, r1
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d14d      	bne.n	8000996 <__udivmoddi4+0xaa>
 80008fa:	428a      	cmp	r2, r1
 80008fc:	4694      	mov	ip, r2
 80008fe:	d969      	bls.n	80009d4 <__udivmoddi4+0xe8>
 8000900:	fab2 f282 	clz	r2, r2
 8000904:	b152      	cbz	r2, 800091c <__udivmoddi4+0x30>
 8000906:	fa01 f302 	lsl.w	r3, r1, r2
 800090a:	f1c2 0120 	rsb	r1, r2, #32
 800090e:	fa20 f101 	lsr.w	r1, r0, r1
 8000912:	fa0c fc02 	lsl.w	ip, ip, r2
 8000916:	ea41 0e03 	orr.w	lr, r1, r3
 800091a:	4094      	lsls	r4, r2
 800091c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000920:	0c21      	lsrs	r1, r4, #16
 8000922:	fbbe f6f8 	udiv	r6, lr, r8
 8000926:	fa1f f78c 	uxth.w	r7, ip
 800092a:	fb08 e316 	mls	r3, r8, r6, lr
 800092e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000932:	fb06 f107 	mul.w	r1, r6, r7
 8000936:	4299      	cmp	r1, r3
 8000938:	d90a      	bls.n	8000950 <__udivmoddi4+0x64>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000942:	f080 811f 	bcs.w	8000b84 <__udivmoddi4+0x298>
 8000946:	4299      	cmp	r1, r3
 8000948:	f240 811c 	bls.w	8000b84 <__udivmoddi4+0x298>
 800094c:	3e02      	subs	r6, #2
 800094e:	4463      	add	r3, ip
 8000950:	1a5b      	subs	r3, r3, r1
 8000952:	b2a4      	uxth	r4, r4
 8000954:	fbb3 f0f8 	udiv	r0, r3, r8
 8000958:	fb08 3310 	mls	r3, r8, r0, r3
 800095c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000960:	fb00 f707 	mul.w	r7, r0, r7
 8000964:	42a7      	cmp	r7, r4
 8000966:	d90a      	bls.n	800097e <__udivmoddi4+0x92>
 8000968:	eb1c 0404 	adds.w	r4, ip, r4
 800096c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000970:	f080 810a 	bcs.w	8000b88 <__udivmoddi4+0x29c>
 8000974:	42a7      	cmp	r7, r4
 8000976:	f240 8107 	bls.w	8000b88 <__udivmoddi4+0x29c>
 800097a:	4464      	add	r4, ip
 800097c:	3802      	subs	r0, #2
 800097e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000982:	1be4      	subs	r4, r4, r7
 8000984:	2600      	movs	r6, #0
 8000986:	b11d      	cbz	r5, 8000990 <__udivmoddi4+0xa4>
 8000988:	40d4      	lsrs	r4, r2
 800098a:	2300      	movs	r3, #0
 800098c:	e9c5 4300 	strd	r4, r3, [r5]
 8000990:	4631      	mov	r1, r6
 8000992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000996:	428b      	cmp	r3, r1
 8000998:	d909      	bls.n	80009ae <__udivmoddi4+0xc2>
 800099a:	2d00      	cmp	r5, #0
 800099c:	f000 80ef 	beq.w	8000b7e <__udivmoddi4+0x292>
 80009a0:	2600      	movs	r6, #0
 80009a2:	e9c5 0100 	strd	r0, r1, [r5]
 80009a6:	4630      	mov	r0, r6
 80009a8:	4631      	mov	r1, r6
 80009aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ae:	fab3 f683 	clz	r6, r3
 80009b2:	2e00      	cmp	r6, #0
 80009b4:	d14a      	bne.n	8000a4c <__udivmoddi4+0x160>
 80009b6:	428b      	cmp	r3, r1
 80009b8:	d302      	bcc.n	80009c0 <__udivmoddi4+0xd4>
 80009ba:	4282      	cmp	r2, r0
 80009bc:	f200 80f9 	bhi.w	8000bb2 <__udivmoddi4+0x2c6>
 80009c0:	1a84      	subs	r4, r0, r2
 80009c2:	eb61 0303 	sbc.w	r3, r1, r3
 80009c6:	2001      	movs	r0, #1
 80009c8:	469e      	mov	lr, r3
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	d0e0      	beq.n	8000990 <__udivmoddi4+0xa4>
 80009ce:	e9c5 4e00 	strd	r4, lr, [r5]
 80009d2:	e7dd      	b.n	8000990 <__udivmoddi4+0xa4>
 80009d4:	b902      	cbnz	r2, 80009d8 <__udivmoddi4+0xec>
 80009d6:	deff      	udf	#255	; 0xff
 80009d8:	fab2 f282 	clz	r2, r2
 80009dc:	2a00      	cmp	r2, #0
 80009de:	f040 8092 	bne.w	8000b06 <__udivmoddi4+0x21a>
 80009e2:	eba1 010c 	sub.w	r1, r1, ip
 80009e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ea:	fa1f fe8c 	uxth.w	lr, ip
 80009ee:	2601      	movs	r6, #1
 80009f0:	0c20      	lsrs	r0, r4, #16
 80009f2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009f6:	fb07 1113 	mls	r1, r7, r3, r1
 80009fa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009fe:	fb0e f003 	mul.w	r0, lr, r3
 8000a02:	4288      	cmp	r0, r1
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0x12c>
 8000a06:	eb1c 0101 	adds.w	r1, ip, r1
 8000a0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a0e:	d202      	bcs.n	8000a16 <__udivmoddi4+0x12a>
 8000a10:	4288      	cmp	r0, r1
 8000a12:	f200 80cb 	bhi.w	8000bac <__udivmoddi4+0x2c0>
 8000a16:	4643      	mov	r3, r8
 8000a18:	1a09      	subs	r1, r1, r0
 8000a1a:	b2a4      	uxth	r4, r4
 8000a1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a20:	fb07 1110 	mls	r1, r7, r0, r1
 8000a24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a28:	fb0e fe00 	mul.w	lr, lr, r0
 8000a2c:	45a6      	cmp	lr, r4
 8000a2e:	d908      	bls.n	8000a42 <__udivmoddi4+0x156>
 8000a30:	eb1c 0404 	adds.w	r4, ip, r4
 8000a34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a38:	d202      	bcs.n	8000a40 <__udivmoddi4+0x154>
 8000a3a:	45a6      	cmp	lr, r4
 8000a3c:	f200 80bb 	bhi.w	8000bb6 <__udivmoddi4+0x2ca>
 8000a40:	4608      	mov	r0, r1
 8000a42:	eba4 040e 	sub.w	r4, r4, lr
 8000a46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a4a:	e79c      	b.n	8000986 <__udivmoddi4+0x9a>
 8000a4c:	f1c6 0720 	rsb	r7, r6, #32
 8000a50:	40b3      	lsls	r3, r6
 8000a52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a62:	431c      	orrs	r4, r3
 8000a64:	40f9      	lsrs	r1, r7
 8000a66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a72:	0c20      	lsrs	r0, r4, #16
 8000a74:	fa1f fe8c 	uxth.w	lr, ip
 8000a78:	fb09 1118 	mls	r1, r9, r8, r1
 8000a7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a80:	fb08 f00e 	mul.w	r0, r8, lr
 8000a84:	4288      	cmp	r0, r1
 8000a86:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8a:	d90b      	bls.n	8000aa4 <__udivmoddi4+0x1b8>
 8000a8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a94:	f080 8088 	bcs.w	8000ba8 <__udivmoddi4+0x2bc>
 8000a98:	4288      	cmp	r0, r1
 8000a9a:	f240 8085 	bls.w	8000ba8 <__udivmoddi4+0x2bc>
 8000a9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000aa2:	4461      	add	r1, ip
 8000aa4:	1a09      	subs	r1, r1, r0
 8000aa6:	b2a4      	uxth	r4, r4
 8000aa8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000aac:	fb09 1110 	mls	r1, r9, r0, r1
 8000ab0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ab4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ab8:	458e      	cmp	lr, r1
 8000aba:	d908      	bls.n	8000ace <__udivmoddi4+0x1e2>
 8000abc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ac4:	d26c      	bcs.n	8000ba0 <__udivmoddi4+0x2b4>
 8000ac6:	458e      	cmp	lr, r1
 8000ac8:	d96a      	bls.n	8000ba0 <__udivmoddi4+0x2b4>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4461      	add	r1, ip
 8000ace:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ad2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ad6:	eba1 010e 	sub.w	r1, r1, lr
 8000ada:	42a1      	cmp	r1, r4
 8000adc:	46c8      	mov	r8, r9
 8000ade:	46a6      	mov	lr, r4
 8000ae0:	d356      	bcc.n	8000b90 <__udivmoddi4+0x2a4>
 8000ae2:	d053      	beq.n	8000b8c <__udivmoddi4+0x2a0>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x212>
 8000ae6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aea:	eb61 010e 	sbc.w	r1, r1, lr
 8000aee:	fa01 f707 	lsl.w	r7, r1, r7
 8000af2:	fa22 f306 	lsr.w	r3, r2, r6
 8000af6:	40f1      	lsrs	r1, r6
 8000af8:	431f      	orrs	r7, r3
 8000afa:	e9c5 7100 	strd	r7, r1, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	40d8      	lsrs	r0, r3
 8000b0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b10:	fa21 f303 	lsr.w	r3, r1, r3
 8000b14:	4091      	lsls	r1, r2
 8000b16:	4301      	orrs	r1, r0
 8000b18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1c:	fa1f fe8c 	uxth.w	lr, ip
 8000b20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b24:	fb07 3610 	mls	r6, r7, r0, r3
 8000b28:	0c0b      	lsrs	r3, r1, #16
 8000b2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b32:	429e      	cmp	r6, r3
 8000b34:	fa04 f402 	lsl.w	r4, r4, r2
 8000b38:	d908      	bls.n	8000b4c <__udivmoddi4+0x260>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b42:	d22f      	bcs.n	8000ba4 <__udivmoddi4+0x2b8>
 8000b44:	429e      	cmp	r6, r3
 8000b46:	d92d      	bls.n	8000ba4 <__udivmoddi4+0x2b8>
 8000b48:	3802      	subs	r0, #2
 8000b4a:	4463      	add	r3, ip
 8000b4c:	1b9b      	subs	r3, r3, r6
 8000b4e:	b289      	uxth	r1, r1
 8000b50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b54:	fb07 3316 	mls	r3, r7, r6, r3
 8000b58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b60:	428b      	cmp	r3, r1
 8000b62:	d908      	bls.n	8000b76 <__udivmoddi4+0x28a>
 8000b64:	eb1c 0101 	adds.w	r1, ip, r1
 8000b68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b6c:	d216      	bcs.n	8000b9c <__udivmoddi4+0x2b0>
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d914      	bls.n	8000b9c <__udivmoddi4+0x2b0>
 8000b72:	3e02      	subs	r6, #2
 8000b74:	4461      	add	r1, ip
 8000b76:	1ac9      	subs	r1, r1, r3
 8000b78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b7c:	e738      	b.n	80009f0 <__udivmoddi4+0x104>
 8000b7e:	462e      	mov	r6, r5
 8000b80:	4628      	mov	r0, r5
 8000b82:	e705      	b.n	8000990 <__udivmoddi4+0xa4>
 8000b84:	4606      	mov	r6, r0
 8000b86:	e6e3      	b.n	8000950 <__udivmoddi4+0x64>
 8000b88:	4618      	mov	r0, r3
 8000b8a:	e6f8      	b.n	800097e <__udivmoddi4+0x92>
 8000b8c:	454b      	cmp	r3, r9
 8000b8e:	d2a9      	bcs.n	8000ae4 <__udivmoddi4+0x1f8>
 8000b90:	ebb9 0802 	subs.w	r8, r9, r2
 8000b94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b98:	3801      	subs	r0, #1
 8000b9a:	e7a3      	b.n	8000ae4 <__udivmoddi4+0x1f8>
 8000b9c:	4646      	mov	r6, r8
 8000b9e:	e7ea      	b.n	8000b76 <__udivmoddi4+0x28a>
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	e794      	b.n	8000ace <__udivmoddi4+0x1e2>
 8000ba4:	4640      	mov	r0, r8
 8000ba6:	e7d1      	b.n	8000b4c <__udivmoddi4+0x260>
 8000ba8:	46d0      	mov	r8, sl
 8000baa:	e77b      	b.n	8000aa4 <__udivmoddi4+0x1b8>
 8000bac:	3b02      	subs	r3, #2
 8000bae:	4461      	add	r1, ip
 8000bb0:	e732      	b.n	8000a18 <__udivmoddi4+0x12c>
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	e709      	b.n	80009ca <__udivmoddi4+0xde>
 8000bb6:	4464      	add	r4, ip
 8000bb8:	3802      	subs	r0, #2
 8000bba:	e742      	b.n	8000a42 <__udivmoddi4+0x156>

08000bbc <__aeabi_idiv0>:
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af04      	add	r7, sp, #16
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	460a      	mov	r2, r1
 8000bca:	71fb      	strb	r3, [r7, #7]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 8000bd0:	79bb      	ldrb	r3, [r7, #6]
 8000bd2:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	2364      	movs	r3, #100	; 0x64
 8000bda:	9302      	str	r3, [sp, #8]
 8000bdc:	2301      	movs	r3, #1
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	f107 030f 	add.w	r3, r7, #15
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2301      	movs	r3, #1
 8000be8:	2150      	movs	r1, #80	; 0x50
 8000bea:	4806      	ldr	r0, [pc, #24]	; (8000c04 <MFRC_REGW+0x44>)
 8000bec:	f004 ff3a 	bl	8005a64 <HAL_I2C_Mem_Write>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 8000bf6:	23bb      	movs	r3, #187	; 0xbb
 8000bf8:	e000      	b.n	8000bfc <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 8000bfa:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000758 	.word	0x20000758

08000c08 <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af04      	add	r7, sp, #16
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	2364      	movs	r3, #100	; 0x64
 8000c1a:	9302      	str	r3, [sp, #8]
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2301      	movs	r3, #1
 8000c26:	2150      	movs	r1, #80	; 0x50
 8000c28:	4806      	ldr	r0, [pc, #24]	; (8000c44 <MFRC_REGR+0x3c>)
 8000c2a:	f005 f815 	bl	8005c58 <HAL_I2C_Mem_Read>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000c34:	23bb      	movs	r3, #187	; 0xbb
 8000c36:	e000      	b.n	8000c3a <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 8000c38:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000758 	.word	0x20000758

08000c48 <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af04      	add	r7, sp, #16
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	e018      	b.n	8000c8c <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	4413      	add	r3, r2
 8000c60:	2264      	movs	r2, #100	; 0x64
 8000c62:	9202      	str	r2, [sp, #8]
 8000c64:	2201      	movs	r2, #1
 8000c66:	9201      	str	r2, [sp, #4]
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	2209      	movs	r2, #9
 8000c6e:	2150      	movs	r1, #80	; 0x50
 8000c70:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <MFRC_FIFOW+0x58>)
 8000c72:	f004 fef7 	bl	8005a64 <HAL_I2C_Mem_Write>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000c7c:	23bb      	movs	r3, #187	; 0xbb
 8000c7e:	e00a      	b.n	8000c96 <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000c80:	2001      	movs	r0, #1
 8000c82:	f004 fad7 	bl	8005234 <HAL_Delay>
	for(int i=0;i<size;i++){
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	78fb      	ldrb	r3, [r7, #3]
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	dbe2      	blt.n	8000c5a <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000c94:	23cc      	movs	r3, #204	; 0xcc
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000758 	.word	0x20000758

08000ca4 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af04      	add	r7, sp, #16
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	e018      	b.n	8000ce8 <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	4413      	add	r3, r2
 8000cbc:	2264      	movs	r2, #100	; 0x64
 8000cbe:	9202      	str	r2, [sp, #8]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	9201      	str	r2, [sp, #4]
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	2209      	movs	r2, #9
 8000cca:	2150      	movs	r1, #80	; 0x50
 8000ccc:	480b      	ldr	r0, [pc, #44]	; (8000cfc <MFRC_FIFOR+0x58>)
 8000cce:	f004 ffc3 	bl	8005c58 <HAL_I2C_Mem_Read>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 8000cd8:	23bb      	movs	r3, #187	; 0xbb
 8000cda:	e00a      	b.n	8000cf2 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f004 faa9 	bl	8005234 <HAL_Delay>
	for(int i=0;i<size;i++){
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	dbe2      	blt.n	8000cb6 <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 8000cf0:	23cc      	movs	r3, #204	; 0xcc
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000758 	.word	0x20000758

08000d00 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	4619      	mov	r1, r3
 8000d0a:	2014      	movs	r0, #20
 8000d0c:	f7ff ff7c 	bl	8000c08 <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	d007      	beq.n	8000d2a <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f043 0303 	orr.w	r3, r3, #3
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4619      	mov	r1, r3
 8000d24:	2014      	movs	r0, #20
 8000d26:	f7ff ff4b 	bl	8000bc0 <MFRC_REGW>
	}
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b084      	sub	sp, #16
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	460a      	mov	r2, r1
 8000d3c:	71fb      	strb	r3, [r7, #7]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000d42:	f107 020f 	add.w	r2, r7, #15
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff5c 	bl	8000c08 <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000d50:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	b25a      	sxtb	r2, r3
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	b25b      	sxtb	r3, r3
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	b25b      	sxtb	r3, r3
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	4611      	mov	r1, r2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff2a 	bl	8000bc0 <MFRC_REGW>
}
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 8000d78:	2103      	movs	r1, #3
 8000d7a:	2014      	movs	r0, #20
 8000d7c:	f7ff ffd9 	bl	8000d32 <ClearBitMask>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000d92:	2100      	movs	r1, #0
 8000d94:	2001      	movs	r0, #1
 8000d96:	f7ff ff13 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	2005      	movs	r0, #5
 8000d9e:	f7ff ff0f 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	200a      	movs	r0, #10
 8000da6:	f7ff ff0b 	bl	8000bc0 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 8000daa:	7afb      	ldrb	r3, [r7, #11]
 8000dac:	4619      	mov	r1, r3
 8000dae:	68f8      	ldr	r0, [r7, #12]
 8000db0:	f7ff ff4a 	bl	8000c48 <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000db4:	2103      	movs	r1, #3
 8000db6:	2001      	movs	r0, #1
 8000db8:	f7ff ff02 	bl	8000bc0 <MFRC_REGW>
	HAL_Delay(100);
 8000dbc:	2064      	movs	r0, #100	; 0x64
 8000dbe:	f004 fa39 	bl	8005234 <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000dc2:	f107 0317 	add.w	r3, r7, #23
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	2005      	movs	r0, #5
 8000dca:	f7ff ff1d 	bl	8000c08 <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 8000dce:	7dfb      	ldrb	r3, [r7, #23]
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 8000dd8:	23ee      	movs	r3, #238	; 0xee
 8000dda:	e00e      	b.n	8000dfa <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2001      	movs	r0, #1
 8000de0:	f7ff feee 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	2022      	movs	r0, #34	; 0x22
 8000de8:	f7ff ff0e 	bl	8000c08 <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3301      	adds	r3, #1
 8000df0:	4619      	mov	r1, r3
 8000df2:	2021      	movs	r0, #33	; 0x21
 8000df4:	f7ff ff08 	bl	8000c08 <MFRC_REGR>
	return(PCD_OK);
 8000df8:	23cc      	movs	r3, #204	; 0xcc

}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2120      	movs	r1, #32
 8000e0c:	4815      	ldr	r0, [pc, #84]	; (8000e64 <MFRC_INIT+0x60>)
 8000e0e:	f004 fcb3 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2120      	movs	r1, #32
 8000e16:	4813      	ldr	r0, [pc, #76]	; (8000e64 <MFRC_INIT+0x60>)
 8000e18:	f004 fcae 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f004 fa09 	bl	8005234 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2120      	movs	r1, #32
 8000e26:	480f      	ldr	r0, [pc, #60]	; (8000e64 <MFRC_INIT+0x60>)
 8000e28:	f004 fca6 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000e2c:	2032      	movs	r0, #50	; 0x32
 8000e2e:	f004 fa01 	bl	8005234 <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000e32:	2100      	movs	r1, #0
 8000e34:	2012      	movs	r0, #18
 8000e36:	f7ff fec3 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2013      	movs	r0, #19
 8000e3e:	f7ff febf 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000e42:	2126      	movs	r1, #38	; 0x26
 8000e44:	2024      	movs	r0, #36	; 0x24
 8000e46:	f7ff febb 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 8000e4a:	2140      	movs	r1, #64	; 0x40
 8000e4c:	2015      	movs	r0, #21
 8000e4e:	f7ff feb7 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000e52:	213d      	movs	r1, #61	; 0x3d
 8000e54:	2011      	movs	r0, #17
 8000e56:	f7ff feb3 	bl	8000bc0 <MFRC_REGW>
	MFRC_ANTON();
 8000e5a:	f7ff ff51 	bl	8000d00 <MFRC_ANTON>
	return(PCD_OK);
 8000e5e:	23cc      	movs	r3, #204	; 0xcc



}
 8000e60:	4618      	mov	r0, r3
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40020400 	.word	0x40020400

08000e68 <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	461a      	mov	r2, r3
 8000e74:	460b      	mov	r3, r1
 8000e76:	72fb      	strb	r3, [r7, #11]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000e84:	2100      	movs	r1, #0
 8000e86:	2001      	movs	r0, #1
 8000e88:	f7ff fe9a 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000e8c:	217f      	movs	r1, #127	; 0x7f
 8000e8e:	2004      	movs	r0, #4
 8000e90:	f7ff fe96 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	200a      	movs	r0, #10
 8000e98:	f7ff fe92 	bl	8000bc0 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000e9c:	7afb      	ldrb	r3, [r7, #11]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	f7ff fed1 	bl	8000c48 <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 8000ea6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	200d      	movs	r0, #13
 8000eae:	f7ff fe87 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000eb2:	210c      	movs	r1, #12
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f7ff fe83 	bl	8000bc0 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 8000eba:	f107 0316 	add.w	r3, r7, #22
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	200d      	movs	r0, #13
 8000ec2:	f7ff fea1 	bl	8000c08 <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 8000ec6:	7dbb      	ldrb	r3, [r7, #22]
 8000ec8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	4619      	mov	r1, r3
 8000ed0:	200d      	movs	r0, #13
 8000ed2:	f7ff fe75 	bl	8000bc0 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 8000ed6:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f004 f9ab 	bl	8005234 <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 8000ede:	7abb      	ldrb	r3, [r7, #10]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff fede 	bl	8000ca4 <MFRC_FIFOR>


	return(PCD_OK);
 8000ee8:	23cc      	movs	r3, #204	; 0xcc
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <MFRC_WUPA>:
 * Function to issue the WUPA command to PICC (We use this to go from HALT to READY state check ISO standard)
 *
 * @param reponse: PICC reponse to WUPA (Expect 0x44, 0x00 for ULTRALIGHT
 * */

PCD_StatusTypeDef MFRC_WUPA(uint8_t* response){
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af02      	add	r7, sp, #8
 8000ef8:	6078      	str	r0, [r7, #4]
	uint8_t WUPA=0x52;
 8000efa:	2352      	movs	r3, #82	; 0x52
 8000efc:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	200e      	movs	r0, #14
 8000f02:	f7ff ff16 	bl	8000d32 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&WUPA,1, response, 2, 7)!=PCD_OK){//WUPA is a 7-bit command
 8000f06:	f107 000f 	add.w	r0, r7, #15
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2302      	movs	r3, #2
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	2101      	movs	r1, #1
 8000f14:	f7ff ffa8 	bl	8000e68 <MFRC_TRANSCEIVE>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2bcc      	cmp	r3, #204	; 0xcc
 8000f1c:	d001      	beq.n	8000f22 <MFRC_WUPA+0x30>
		return(PCD_COMM_ERR);
 8000f1e:	23aa      	movs	r3, #170	; 0xaa
 8000f20:	e000      	b.n	8000f24 <MFRC_WUPA+0x32>
	}

	else{
		return(PCD_OK);
 8000f22:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <MFRC_HALTA>:

/*
 * Function to issue HALTA command to PICC (Change from READY to HALT state) Send WUPA and select sequence to re-select PICC
 * */

PCD_StatusTypeDef MFRC_HALTA(void){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af02      	add	r7, sp, #8
	uint8_t transaction[4]={ULTRA_HALTA,0x00};
 8000f32:	2350      	movs	r3, #80	; 0x50
 8000f34:	60fb      	str	r3, [r7, #12]
	uint8_t CRC_val[2];
	uint8_t ack;

	if(CALC_CRC(transaction, 2, CRC_val)!=PCD_OK){
 8000f36:	f107 0208 	add.w	r2, r7, #8
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	2102      	movs	r1, #2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff1f 	bl	8000d84 <CALC_CRC>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2bcc      	cmp	r3, #204	; 0xcc
 8000f4a:	d001      	beq.n	8000f50 <MFRC_HALTA+0x24>
		return(CRC_ERR);
 8000f4c:	23ee      	movs	r3, #238	; 0xee
 8000f4e:	e013      	b.n	8000f78 <MFRC_HALTA+0x4c>
	}
	memcpy(transaction+2,CRC_val,2);
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	3302      	adds	r3, #2
 8000f56:	893a      	ldrh	r2, [r7, #8]
 8000f58:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, &ack, 1, 0)!=PCD_OK){
 8000f5a:	1dfa      	adds	r2, r7, #7
 8000f5c:	f107 000c 	add.w	r0, r7, #12
 8000f60:	2300      	movs	r3, #0
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2301      	movs	r3, #1
 8000f66:	2104      	movs	r1, #4
 8000f68:	f7ff ff7e 	bl	8000e68 <MFRC_TRANSCEIVE>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2bcc      	cmp	r3, #204	; 0xcc
 8000f70:	d001      	beq.n	8000f76 <MFRC_HALTA+0x4a>
		return(PCD_COMM_ERR);
 8000f72:	23aa      	movs	r3, #170	; 0xaa
 8000f74:	e000      	b.n	8000f78 <MFRC_HALTA+0x4c>
	}

	else{
		return(PCD_OK);
 8000f76:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000f88:	f242 0393 	movw	r3, #8339	; 0x2093
 8000f8c:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	200e      	movs	r0, #14
 8000f92:	f7ff fece 	bl	8000d32 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000f96:	f107 000c 	add.w	r0, r7, #12
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	2102      	movs	r1, #2
 8000fa4:	f7ff ff60 	bl	8000e68 <MFRC_TRANSCEIVE>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2bcc      	cmp	r3, #204	; 0xcc
 8000fac:	d001      	beq.n	8000fb2 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 8000fae:	23aa      	movs	r3, #170	; 0xaa
 8000fb0:	e000      	b.n	8000fb4 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 8000fb2:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 8000fc6:	f247 0393 	movw	r3, #28819	; 0x7093
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	3302      	adds	r3, #2
 8000fdc:	2205      	movs	r2, #5
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f010 f88b 	bl	80110fc <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000fe6:	f107 0208 	add.w	r2, r7, #8
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2107      	movs	r1, #7
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fec7 	bl	8000d84 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	3307      	adds	r3, #7
 8000ffc:	893a      	ldrh	r2, [r7, #8]
 8000ffe:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8001000:	f107 000c 	add.w	r0, r7, #12
 8001004:	2300      	movs	r3, #0
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2303      	movs	r3, #3
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	2109      	movs	r1, #9
 800100e:	f7ff ff2b 	bl	8000e68 <MFRC_TRANSCEIVE>
 8001012:	4603      	mov	r3, r0
 8001014:	2bcc      	cmp	r3, #204	; 0xcc
 8001016:	d001      	beq.n	800101c <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8001018:	23aa      	movs	r3, #170	; 0xaa
 800101a:	e000      	b.n	800101e <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 800101c:	23cc      	movs	r3, #204	; 0xcc
	}

}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af02      	add	r7, sp, #8
 800102c:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 800102e:	f242 0395 	movw	r3, #8341	; 0x2095
 8001032:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	200e      	movs	r0, #14
 8001038:	f7ff fe7b 	bl	8000d32 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 800103c:	f107 000c 	add.w	r0, r7, #12
 8001040:	2300      	movs	r3, #0
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2305      	movs	r3, #5
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	2102      	movs	r1, #2
 800104a:	f7ff ff0d 	bl	8000e68 <MFRC_TRANSCEIVE>
 800104e:	4603      	mov	r3, r0
 8001050:	2bcc      	cmp	r3, #204	; 0xcc
 8001052:	d001      	beq.n	8001058 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 8001054:	23aa      	movs	r3, #170	; 0xaa
 8001056:	e000      	b.n	800105a <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 8001058:	23cc      	movs	r3, #204	; 0xcc
	}
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 8001062:	b580      	push	{r7, lr}
 8001064:	b088      	sub	sp, #32
 8001066:	af02      	add	r7, sp, #8
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 800106c:	f247 0395 	movw	r3, #28821	; 0x7095
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	3302      	adds	r3, #2
 8001082:	2205      	movs	r2, #5
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4618      	mov	r0, r3
 8001088:	f010 f838 	bl	80110fc <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 800108c:	f107 0208 	add.w	r2, r7, #8
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2107      	movs	r1, #7
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fe74 	bl	8000d84 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	3307      	adds	r3, #7
 80010a2:	893a      	ldrh	r2, [r7, #8]
 80010a4:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 80010a6:	f107 000c 	add.w	r0, r7, #12
 80010aa:	2300      	movs	r3, #0
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2303      	movs	r3, #3
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	2109      	movs	r1, #9
 80010b4:	f7ff fed8 	bl	8000e68 <MFRC_TRANSCEIVE>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2bcc      	cmp	r3, #204	; 0xcc
 80010bc:	d001      	beq.n	80010c2 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 80010be:	23aa      	movs	r3, #170	; 0xaa
 80010c0:	e000      	b.n	80010c4 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 80010c2:	23cc      	movs	r3, #204	; 0xcc
	}

}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];
	  uint8_t ATQA[2];

	  if (PICC_CHECK() != PCD_OK) {
 80010d2:	f000 f839 	bl	8001148 <PICC_CHECK>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2bcc      	cmp	r3, #204	; 0xcc
 80010da:	d001      	beq.n	80010e0 <PICC_Select+0x14>
		  return PCD_COMM_ERR;
 80010dc:	23aa      	movs	r3, #170	; 0xaa
 80010de:	e02f      	b.n	8001140 <PICC_Select+0x74>
	  }
	  MFRC_WUPA(ATQA);
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff05 	bl	8000ef2 <MFRC_WUPA>
	  MFRC_ANTICOL1(ANTICOL1);
 80010e8:	f107 0318 	add.w	r3, r7, #24
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff47 	bl	8000f80 <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 80010f2:	7e3b      	ldrb	r3, [r7, #24]
 80010f4:	2b88      	cmp	r3, #136	; 0x88
 80010f6:	d001      	beq.n	80010fc <PICC_Select+0x30>
		  return(PCD_COMM_ERR);
 80010f8:	23aa      	movs	r3, #170	; 0xaa
 80010fa:	e021      	b.n	8001140 <PICC_Select+0x74>
	  }
	  HAL_Delay(10);
 80010fc:	200a      	movs	r0, #10
 80010fe:	f004 f899 	bl	8005234 <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 8001102:	f107 0214 	add.w	r2, r7, #20
 8001106:	f107 0318 	add.w	r3, r7, #24
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff55 	bl	8000fbc <MFRC_SEL1>
	  HAL_Delay(10);
 8001112:	200a      	movs	r0, #10
 8001114:	f004 f88e 	bl	8005234 <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff82 	bl	8001026 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8001122:	200a      	movs	r0, #10
 8001124:	f004 f886 	bl	8005234 <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8001128:	f107 0208 	add.w	r2, r7, #8
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff95 	bl	8001062 <MFRC_SEL2>
	  HAL_Delay(10);
 8001138:	200a      	movs	r0, #10
 800113a:	f004 f87b 	bl	8005234 <HAL_Delay>
	  return(PCD_OK);
 800113e:	23cc      	movs	r3, #204	; 0xcc
}
 8001140:	4618      	mov	r0, r3
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_WUPA(ATQA)!=PCD_OK){
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fece 	bl	8000ef2 <MFRC_WUPA>
 8001156:	4603      	mov	r3, r0
 8001158:	2bcc      	cmp	r3, #204	; 0xcc
 800115a:	d001      	beq.n	8001160 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 800115c:	23aa      	movs	r3, #170	; 0xaa
 800115e:	e00a      	b.n	8001176 <PICC_CHECK+0x2e>
	}

	else{
		if((ATQA[0]!=ULTRA_ATQA0) || (ATQA[1] != ULTRA_ATQA1)){
 8001160:	793b      	ldrb	r3, [r7, #4]
 8001162:	2b44      	cmp	r3, #68	; 0x44
 8001164:	d102      	bne.n	800116c <PICC_CHECK+0x24>
 8001166:	797b      	ldrb	r3, [r7, #5]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <PICC_CHECK+0x28>
			return(PCD_COMM_ERR);
 800116c:	23aa      	movs	r3, #170	; 0xaa
 800116e:	e002      	b.n	8001176 <PICC_CHECK+0x2e>
		}
		else{
			MFRC_HALTA();
 8001170:	f7ff fedc 	bl	8000f2c <MFRC_HALTA>
			return(PCD_OK);
 8001174:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af02      	add	r7, sp, #8
 8001184:	4603      	mov	r3, r0
 8001186:	6039      	str	r1, [r7, #0]
 8001188:	71fb      	strb	r3, [r7, #7]

	uint8_t transaction[4]={ULTRA_READ,addr};
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	2330      	movs	r3, #48	; 0x30
 8001190:	733b      	strb	r3, [r7, #12]
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	737b      	strb	r3, [r7, #13]
	uint8_t CRC_val[2];

	CALC_CRC(transaction, 2, CRC_val);
 8001196:	f107 0208 	add.w	r2, r7, #8
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	2102      	movs	r1, #2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fdef 	bl	8000d84 <CALC_CRC>

	memcpy(transaction+2,CRC_val,2);
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	3302      	adds	r3, #2
 80011ac:	893a      	ldrh	r2, [r7, #8]
 80011ae:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, data, UL_READSIZE, 0)!=PCD_OK){
 80011b0:	f107 000c 	add.w	r0, r7, #12
 80011b4:	2300      	movs	r3, #0
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2310      	movs	r3, #16
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	2104      	movs	r1, #4
 80011be:	f7ff fe53 	bl	8000e68 <MFRC_TRANSCEIVE>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2bcc      	cmp	r3, #204	; 0xcc
 80011c6:	d001      	beq.n	80011cc <UL_READ+0x4e>
		return(PCD_COMM_ERR);
 80011c8:	23aa      	movs	r3, #170	; 0xaa
 80011ca:	e000      	b.n	80011ce <UL_READ+0x50>
	}

	else{
		return(PCD_OK);
 80011cc:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <UL_WRITE>:
 *
 * @param data: Array of 4 bytes to write
 *
 * */

PCD_StatusTypeDef UL_WRITE(uint8_t addr,uint8_t* data){
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b088      	sub	sp, #32
 80011da:	af02      	add	r7, sp, #8
 80011dc:	4603      	mov	r3, r0
 80011de:	6039      	str	r1, [r7, #0]
 80011e0:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[8]={ULTRA_WRITE,addr};
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	23a2      	movs	r3, #162	; 0xa2
 80011ee:	743b      	strb	r3, [r7, #16]
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	747b      	strb	r3, [r7, #17]
	uint8_t ack;
	uint8_t CRC_val[2];

	//Safety check to see if we're trying to write to any of the first four pages which contain sensitive data (uid, OTP etc)
	if (addr <= 3) {
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d801      	bhi.n	80011fe <UL_WRITE+0x28>
		return PCD_PROTECTED_ERR;
 80011fa:	2302      	movs	r3, #2
 80011fc:	e022      	b.n	8001244 <UL_WRITE+0x6e>
	}

	memcpy(transaction+2,data,4);
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	3302      	adds	r3, #2
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	6812      	ldr	r2, [r2, #0]
 8001208:	601a      	str	r2, [r3, #0]

	CALC_CRC(transaction, 6, CRC_val);
 800120a:	f107 020c 	add.w	r2, r7, #12
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	2106      	movs	r1, #6
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fdb5 	bl	8000d84 <CALC_CRC>

	memcpy(transaction+6,CRC_val,2);
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	3306      	adds	r3, #6
 8001220:	89ba      	ldrh	r2, [r7, #12]
 8001222:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 8, &ack, 1, 0)!=PCD_OK){
 8001224:	f107 020f 	add.w	r2, r7, #15
 8001228:	f107 0010 	add.w	r0, r7, #16
 800122c:	2300      	movs	r3, #0
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2301      	movs	r3, #1
 8001232:	2108      	movs	r1, #8
 8001234:	f7ff fe18 	bl	8000e68 <MFRC_TRANSCEIVE>
 8001238:	4603      	mov	r3, r0
 800123a:	2bcc      	cmp	r3, #204	; 0xcc
 800123c:	d001      	beq.n	8001242 <UL_WRITE+0x6c>
		return(PCD_COMM_ERR);
 800123e:	23aa      	movs	r3, #170	; 0xaa
 8001240:	e000      	b.n	8001244 <UL_WRITE+0x6e>
	}

	else{
		return(PCD_OK);
 8001242:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <UL_getuid>:
 * Read the 7 byte uid of MIFARE Ultralight card
 *
 * @param uid - Array to store uid
 * @return PCD_OK if uid was successfully read
 * */
PCD_StatusTypeDef UL_getuid(uint8_t* uid) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	uint8_t read[UL_READSIZE];

	if (UL_READ(0x00, read) != PCD_OK) {
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	4619      	mov	r1, r3
 800125a:	2000      	movs	r0, #0
 800125c:	f7ff ff8f 	bl	800117e <UL_READ>
 8001260:	4603      	mov	r3, r0
 8001262:	2bcc      	cmp	r3, #204	; 0xcc
 8001264:	d001      	beq.n	800126a <UL_getuid+0x1e>
		return PCD_COMM_ERR;
 8001266:	23aa      	movs	r3, #170	; 0xaa
 8001268:	e00e      	b.n	8001288 <UL_getuid+0x3c>
	}

	memcpy(uid, read, UL_UIDPART1);
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	2203      	movs	r2, #3
 8001270:	4619      	mov	r1, r3
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f00f ff42 	bl	80110fc <memcpy>
	memcpy(uid + UL_UIDPART1, read + UL_UIDPART2, UL_UIDPART2);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	1cda      	adds	r2, r3, #3
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	3304      	adds	r3, #4
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6013      	str	r3, [r2, #0]
	return PCD_OK;
 8001286:	23cc      	movs	r3, #204	; 0xcc
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <UL_getalldata>:
 * Get all 64 bytes of user data from card
 *
 * @param data - Array to store data
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_getalldata(uint8_t* data) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	e010      	b.n	80012c0 <UL_getalldata+0x30>
		if (UL_READ(i, data) != PCD_OK) {
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff6a 	bl	800117e <UL_READ>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2bcc      	cmp	r3, #204	; 0xcc
 80012ae:	d001      	beq.n	80012b4 <UL_getalldata+0x24>
			return PCD_COMM_ERR;
 80012b0:	23aa      	movs	r3, #170	; 0xaa
 80012b2:	e009      	b.n	80012c8 <UL_getalldata+0x38>
		}
		data += UL_READSIZE; //increment pointer
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3310      	adds	r3, #16
 80012b8:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3304      	adds	r3, #4
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b0e      	cmp	r3, #14
 80012c4:	ddeb      	ble.n	800129e <UL_getalldata+0xe>
	}

	return PCD_OK;
 80012c6:	23cc      	movs	r3, #204	; 0xcc
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <UL_readcard>:
 * !!Name of card is set by user after being read!!
 *
 * @param result - Card to store data into
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_readcard(Card* result) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

	result->type = "MIFARE Ultralight";
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a14      	ldr	r2, [pc, #80]	; (800132c <UL_readcard+0x5c>)
 80012dc:	60da      	str	r2, [r3, #12]
	result->uidsize = UL_UIDSIZE;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2207      	movs	r2, #7
 80012e2:	711a      	strb	r2, [r3, #4]
	result->contents_size = UL_MEMSIZE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2240      	movs	r2, #64	; 0x40
 80012e8:	831a      	strh	r2, [r3, #24]
	result->read_protected = 0;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	741a      	strb	r2, [r3, #16]

	if (PICC_Select() != PCD_OK) { //Select PICC if available
 80012f0:	f7ff feec 	bl	80010cc <PICC_Select>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2bcc      	cmp	r3, #204	; 0xcc
 80012f8:	d001      	beq.n	80012fe <UL_readcard+0x2e>
		return PCD_NO_PICC;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e012      	b.n	8001324 <UL_readcard+0x54>
	}
	if ((UL_getuid(result->uid) != PCD_OK) || (UL_getalldata(result->contents) !=  PCD_OK)) {
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ffa2 	bl	800124c <UL_getuid>
 8001308:	4603      	mov	r3, r0
 800130a:	2bcc      	cmp	r3, #204	; 0xcc
 800130c:	d107      	bne.n	800131e <UL_readcard+0x4e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ffbc 	bl	8001290 <UL_getalldata>
 8001318:	4603      	mov	r3, r0
 800131a:	2bcc      	cmp	r3, #204	; 0xcc
 800131c:	d001      	beq.n	8001322 <UL_readcard+0x52>
		return PCD_COMM_ERR;
 800131e:	23aa      	movs	r3, #170	; 0xaa
 8001320:	e000      	b.n	8001324 <UL_readcard+0x54>
	}
	return PCD_OK;
 8001322:	23cc      	movs	r3, #204	; 0xcc
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	08012818 	.word	0x08012818

08001330 <UL_writecard>:
/**
 * Write a card object to a physical card
 * @param towrite - Card instance to write
 * @return PCD_OK if card was successfully written to and verified.
 * */
PCD_StatusTypeDef UL_writecard(Card* towrite) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	uint8_t* data_to_write = malloc(UL_DATASIZE * sizeof(uint8_t));
 8001338:	2030      	movs	r0, #48	; 0x30
 800133a:	f00f fecf 	bl	80110dc <malloc>
 800133e:	4603      	mov	r3, r0
 8001340:	60bb      	str	r3, [r7, #8]
	memcpy(data_to_write, towrite->contents + (UL_MEMSIZE - UL_DATASIZE), UL_DATASIZE);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	3310      	adds	r3, #16
 8001348:	2230      	movs	r2, #48	; 0x30
 800134a:	4619      	mov	r1, r3
 800134c:	68b8      	ldr	r0, [r7, #8]
 800134e:	f00f fed5 	bl	80110fc <memcpy>

	if (PICC_Select() != PCD_OK) {
 8001352:	f7ff febb 	bl	80010cc <PICC_Select>
 8001356:	4603      	mov	r3, r0
 8001358:	2bcc      	cmp	r3, #204	; 0xcc
 800135a:	d004      	beq.n	8001366 <UL_writecard+0x36>
		free(data_to_write);
 800135c:	68b8      	ldr	r0, [r7, #8]
 800135e:	f00f fec5 	bl	80110ec <free>
		return PCD_NO_PICC;
 8001362:	2301      	movs	r3, #1
 8001364:	e020      	b.n	80013a8 <UL_writecard+0x78>
	}

	for (int addr = UL_DATASTART; addr <= UL_DATAEND; addr++) {
 8001366:	2304      	movs	r3, #4
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	e016      	b.n	800139a <UL_writecard+0x6a>
		if (UL_WRITE(addr, data_to_write + (UL_PAGESIZE * (addr - UL_DATASTART))) != PCD_OK) {
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3b04      	subs	r3, #4
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4619      	mov	r1, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	440b      	add	r3, r1
 800137c:	4619      	mov	r1, r3
 800137e:	4610      	mov	r0, r2
 8001380:	f7ff ff29 	bl	80011d6 <UL_WRITE>
 8001384:	4603      	mov	r3, r0
 8001386:	2bcc      	cmp	r3, #204	; 0xcc
 8001388:	d004      	beq.n	8001394 <UL_writecard+0x64>
			free(data_to_write);
 800138a:	68b8      	ldr	r0, [r7, #8]
 800138c:	f00f feae 	bl	80110ec <free>
			return PCD_COMM_ERR;
 8001390:	23aa      	movs	r3, #170	; 0xaa
 8001392:	e009      	b.n	80013a8 <UL_writecard+0x78>
	for (int addr = UL_DATASTART; addr <= UL_DATAEND; addr++) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3301      	adds	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2b0f      	cmp	r3, #15
 800139e:	dde5      	ble.n	800136c <UL_writecard+0x3c>
		}
	}
	free(data_to_write);
 80013a0:	68b8      	ldr	r0, [r7, #8]
 80013a2:	f00f fea3 	bl	80110ec <free>
	return PCD_OK;
 80013a6:	23cc      	movs	r3, #204	; 0xcc
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <uid_tostring>:
 *
 * @param uid - Uid
 * @param size - Size of uid
 * @return pointer to string of uid
 * */
char* uid_tostring(uint8_t* uid, uint8_t size) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
	char* result = malloc((2 * size * sizeof(char)) + 1); //multiply by 2 since 1 byte is two hex digits
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	3301      	adds	r3, #1
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00f fe8a 	bl	80110dc <malloc>
 80013c8:	4603      	mov	r3, r0
 80013ca:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < size; i++) {
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	e023      	b.n	800141a <uid_tostring+0x6a>
		if (uid[i] <= 0x0F) { //Only one hex character
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b0f      	cmp	r3, #15
 80013dc:	d80d      	bhi.n	80013fa <uid_tostring+0x4a>
			sprintf(result + (2 * i), "0%X", uid[i]);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	461a      	mov	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	1898      	adds	r0, r3, r2
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4912      	ldr	r1, [pc, #72]	; (800143c <uid_tostring+0x8c>)
 80013f4:	f010 f902 	bl	80115fc <siprintf>
 80013f8:	e00c      	b.n	8001414 <uid_tostring+0x64>
		} else {
			sprintf(result + (2 * i), "%X", uid[i]);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	461a      	mov	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	1898      	adds	r0, r3, r2
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	490c      	ldr	r1, [pc, #48]	; (8001440 <uid_tostring+0x90>)
 8001410:	f010 f8f4 	bl	80115fc <siprintf>
	for (int i = 0; i < size; i++) {
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	3301      	adds	r3, #1
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	429a      	cmp	r2, r3
 8001420:	dbd7      	blt.n	80013d2 <uid_tostring+0x22>
		}
	}
	result[2 * size] = '\0'; //Add null
 8001422:	78fb      	ldrb	r3, [r7, #3]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	461a      	mov	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4413      	add	r3, r2
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
	return result;
 8001430:	68bb      	ldr	r3, [r7, #8]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	0801282c 	.word	0x0801282c
 8001440:	08012830 	.word	0x08012830

08001444 <UL_verify>:
/**
 * Verify that a phyiscal card's contents matches what was intended to be written
 * @param check - Card to check phyiscal card data against
 * @return PCD_OK if contents is correct
 * */
PCD_StatusTypeDef UL_verify(Card* check) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	Card* read = malloc(sizeof(Card));
 800144c:	201c      	movs	r0, #28
 800144e:	f00f fe45 	bl	80110dc <malloc>
 8001452:	4603      	mov	r3, r0
 8001454:	60bb      	str	r3, [r7, #8]
	read->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 8001456:	2040      	movs	r0, #64	; 0x40
 8001458:	f00f fe40 	bl	80110dc <malloc>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	615a      	str	r2, [r3, #20]
	read->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8001464:	2007      	movs	r0, #7
 8001466:	f00f fe39 	bl	80110dc <malloc>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	601a      	str	r2, [r3, #0]

	if (UL_readcard(read) != PCD_OK) {
 8001472:	68b8      	ldr	r0, [r7, #8]
 8001474:	f7ff ff2c 	bl	80012d0 <UL_readcard>
 8001478:	4603      	mov	r3, r0
 800147a:	2bcc      	cmp	r3, #204	; 0xcc
 800147c:	d001      	beq.n	8001482 <UL_verify+0x3e>
		return PCD_COMM_ERR;
 800147e:	23aa      	movs	r3, #170	; 0xaa
 8001480:	e031      	b.n	80014e6 <UL_verify+0xa2>
	}

	for (int byte = 0; byte < UL_MEMSIZE; byte++) {
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	e01d      	b.n	80014c4 <UL_verify+0x80>
		if (read->contents[byte] != check->contents[byte]) {
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	695a      	ldr	r2, [r3, #20]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	781a      	ldrb	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6959      	ldr	r1, [r3, #20]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	440b      	add	r3, r1
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d00e      	beq.n	80014be <UL_verify+0x7a>
			free(read->contents);
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f00f fe21 	bl	80110ec <free>
			free(read->uid);
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f00f fe1c 	bl	80110ec <free>
			free(read);
 80014b4:	68b8      	ldr	r0, [r7, #8]
 80014b6:	f00f fe19 	bl	80110ec <free>
			return PCD_VERIFY_ERR;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e013      	b.n	80014e6 <UL_verify+0xa2>
	for (int byte = 0; byte < UL_MEMSIZE; byte++) {
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3301      	adds	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b3f      	cmp	r3, #63	; 0x3f
 80014c8:	ddde      	ble.n	8001488 <UL_verify+0x44>
		}
	}
	free(read->contents);
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f00f fe0c 	bl	80110ec <free>
	free(read->uid);
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f00f fe07 	bl	80110ec <free>
	free(read);
 80014de:	68b8      	ldr	r0, [r7, #8]
 80014e0:	f00f fe04 	bl	80110ec <free>
	return PCD_OK;
 80014e4:	23cc      	movs	r3, #204	; 0xcc
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <dump_card_serial>:
 * Print relevant info of card to terminal over USB
 * @param card - Card to print details of
 * @param pagesize - Number of bytes in each page of memory for given card
 * @return PCD_OK if card details were successfully printed
 * */
PCD_StatusTypeDef dump_card_serial (Card* card, uint8_t pagesize) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	70fb      	strb	r3, [r7, #3]
	char* uid = uid_tostring(card->uid, card->uidsize);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	791b      	ldrb	r3, [r3, #4]
 8001504:	4619      	mov	r1, r3
 8001506:	4610      	mov	r0, r2
 8001508:	f7ff ff52 	bl	80013b0 <uid_tostring>
 800150c:	60b8      	str	r0, [r7, #8]

	printf("Type: %s\r\n", card->type);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	4619      	mov	r1, r3
 8001514:	4837      	ldr	r0, [pc, #220]	; (80015f4 <dump_card_serial+0x104>)
 8001516:	f00f fefd 	bl	8011314 <iprintf>
	printf("UID: %s\r\n", uid);
 800151a:	68b9      	ldr	r1, [r7, #8]
 800151c:	4836      	ldr	r0, [pc, #216]	; (80015f8 <dump_card_serial+0x108>)
 800151e:	f00f fef9 	bl	8011314 <iprintf>
	printf("Page    Byte\r\n");
 8001522:	4836      	ldr	r0, [pc, #216]	; (80015fc <dump_card_serial+0x10c>)
 8001524:	f00f ff7c 	bl	8011420 <puts>
	free(uid);
 8001528:	68b8      	ldr	r0, [r7, #8]
 800152a:	f00f fddf 	bl	80110ec <free>

	printf("     "); //filler
 800152e:	4834      	ldr	r0, [pc, #208]	; (8001600 <dump_card_serial+0x110>)
 8001530:	f00f fef0 	bl	8011314 <iprintf>
	for (int i = 0; i < pagesize; i++) {
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	e006      	b.n	8001548 <dump_card_serial+0x58>
		printf("%i  ", i);
 800153a:	6979      	ldr	r1, [r7, #20]
 800153c:	4831      	ldr	r0, [pc, #196]	; (8001604 <dump_card_serial+0x114>)
 800153e:	f00f fee9 	bl	8011314 <iprintf>
	for (int i = 0; i < pagesize; i++) {
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	429a      	cmp	r2, r3
 800154e:	dbf4      	blt.n	800153a <dump_card_serial+0x4a>
	}
	printf("\r\n");
 8001550:	482d      	ldr	r0, [pc, #180]	; (8001608 <dump_card_serial+0x118>)
 8001552:	f00f ff65 	bl	8011420 <puts>

	for (int i = 0; i < card->contents_size/pagesize; i++) {
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	e03c      	b.n	80015d6 <dump_card_serial+0xe6>
		printf("%i    ", i);
 800155c:	6939      	ldr	r1, [r7, #16]
 800155e:	482b      	ldr	r0, [pc, #172]	; (800160c <dump_card_serial+0x11c>)
 8001560:	f00f fed8 	bl	8011314 <iprintf>
		for (int j = 0; j < pagesize; j++) {
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	e02b      	b.n	80015c2 <dump_card_serial+0xd2>
			if (card->contents[(i * pagesize) + j] <= 0xF) {
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	78fa      	ldrb	r2, [r7, #3]
 8001570:	6939      	ldr	r1, [r7, #16]
 8001572:	fb02 f101 	mul.w	r1, r2, r1
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	440a      	add	r2, r1
 800157a:	4413      	add	r3, r2
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b0f      	cmp	r3, #15
 8001580:	d80e      	bhi.n	80015a0 <dump_card_serial+0xb0>
				printf("0%X ", card->contents[(i * pagesize) + j]);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	78fa      	ldrb	r2, [r7, #3]
 8001588:	6939      	ldr	r1, [r7, #16]
 800158a:	fb02 f101 	mul.w	r1, r2, r1
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	440a      	add	r2, r1
 8001592:	4413      	add	r3, r2
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	4619      	mov	r1, r3
 8001598:	481d      	ldr	r0, [pc, #116]	; (8001610 <dump_card_serial+0x120>)
 800159a:	f00f febb 	bl	8011314 <iprintf>
 800159e:	e00d      	b.n	80015bc <dump_card_serial+0xcc>
			} else {
				printf("%X ", card->contents[(i * pagesize) + j]);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	78fa      	ldrb	r2, [r7, #3]
 80015a6:	6939      	ldr	r1, [r7, #16]
 80015a8:	fb02 f101 	mul.w	r1, r2, r1
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	440a      	add	r2, r1
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	4817      	ldr	r0, [pc, #92]	; (8001614 <dump_card_serial+0x124>)
 80015b8:	f00f feac 	bl	8011314 <iprintf>
		for (int j = 0; j < pagesize; j++) {
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3301      	adds	r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	78fb      	ldrb	r3, [r7, #3]
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	dbcf      	blt.n	800156a <dump_card_serial+0x7a>
			}

		}
		printf("\r\n");
 80015ca:	480f      	ldr	r0, [pc, #60]	; (8001608 <dump_card_serial+0x118>)
 80015cc:	f00f ff28 	bl	8011420 <puts>
	for (int i = 0; i < card->contents_size/pagesize; i++) {
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	3301      	adds	r3, #1
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	8b1b      	ldrh	r3, [r3, #24]
 80015da:	461a      	mov	r2, r3
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	fb92 f3f3 	sdiv	r3, r2, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbb9      	blt.n	800155c <dump_card_serial+0x6c>
	}
	return PCD_OK;
 80015e8:	23cc      	movs	r3, #204	; 0xcc
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	08012834 	.word	0x08012834
 80015f8:	08012840 	.word	0x08012840
 80015fc:	0801284c 	.word	0x0801284c
 8001600:	0801285c 	.word	0x0801285c
 8001604:	08012864 	.word	0x08012864
 8001608:	0801286c 	.word	0x0801286c
 800160c:	08012870 	.word	0x08012870
 8001610:	08012878 	.word	0x08012878
 8001614:	08012880 	.word	0x08012880

08001618 <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 8001618:	b580      	push	{r7, lr}
 800161a:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 800161e:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 8001620:	463b      	mov	r3, r7
 8001622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f00f fd75 	bl	8011118 <memset>
	OLED_FLUSH(zeros);
 800162e:	463b      	mov	r3, r7
 8001630:	4618      	mov	r0, r3
 8001632:	f000 f87b 	bl	800172c <OLED_FLUSH>

}
 8001636:	bf00      	nop
 8001638:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2110      	movs	r1, #16
 8001652:	4815      	ldr	r0, [pc, #84]	; (80016a8 <OLED_cmd+0x68>)
 8001654:	f004 f890 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2102      	movs	r1, #2
 800165c:	4813      	ldr	r0, [pc, #76]	; (80016ac <OLED_cmd+0x6c>)
 800165e:	f004 f88b 	bl	8005778 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 8001662:	f107 010f 	add.w	r1, r7, #15
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	2201      	movs	r2, #1
 800166c:	4810      	ldr	r0, [pc, #64]	; (80016b0 <OLED_cmd+0x70>)
 800166e:	f007 f82e 	bl	80086ce <HAL_SPI_Transmit>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d009      	beq.n	800168c <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8001678:	2201      	movs	r2, #1
 800167a:	2110      	movs	r1, #16
 800167c:	480a      	ldr	r0, [pc, #40]	; (80016a8 <OLED_cmd+0x68>)
 800167e:	f004 f87b 	bl	8005778 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001682:	2001      	movs	r0, #1
 8001684:	f003 fdd6 	bl	8005234 <HAL_Delay>
		return(HAL_ERROR);
 8001688:	2301      	movs	r3, #1
 800168a:	e008      	b.n	800169e <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 800168c:	2201      	movs	r2, #1
 800168e:	2110      	movs	r1, #16
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <OLED_cmd+0x68>)
 8001692:	f004 f871 	bl	8005778 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001696:	2001      	movs	r0, #1
 8001698:	f003 fdcc 	bl	8005234 <HAL_Delay>
		return(HAL_OK);
 800169c:	2300      	movs	r3, #0
	}

}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020400 	.word	0x40020400
 80016b0:	200007ac 	.word	0x200007ac

080016b4 <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2110      	movs	r1, #16
 80016c4:	4816      	ldr	r0, [pc, #88]	; (8001720 <OLED_data+0x6c>)
 80016c6:	f004 f857 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 80016ca:	2201      	movs	r2, #1
 80016cc:	2102      	movs	r1, #2
 80016ce:	4815      	ldr	r0, [pc, #84]	; (8001724 <OLED_data+0x70>)
 80016d0:	f004 f852 	bl	8005778 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	f04f 33ff 	mov.w	r3, #4294967295
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	4812      	ldr	r0, [pc, #72]	; (8001728 <OLED_data+0x74>)
 80016e0:	f006 fff5 	bl	80086ce <HAL_SPI_Transmit>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00b      	beq.n	8001702 <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2102      	movs	r1, #2
 80016ee:	480d      	ldr	r0, [pc, #52]	; (8001724 <OLED_data+0x70>)
 80016f0:	f004 f842 	bl	8005778 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 80016f4:	2201      	movs	r2, #1
 80016f6:	2110      	movs	r1, #16
 80016f8:	4809      	ldr	r0, [pc, #36]	; (8001720 <OLED_data+0x6c>)
 80016fa:	f004 f83d 	bl	8005778 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 80016fe:	2301      	movs	r3, #1
 8001700:	e00a      	b.n	8001718 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2102      	movs	r1, #2
 8001706:	4807      	ldr	r0, [pc, #28]	; (8001724 <OLED_data+0x70>)
 8001708:	f004 f836 	bl	8005778 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 800170c:	2201      	movs	r2, #1
 800170e:	2110      	movs	r1, #16
 8001710:	4803      	ldr	r0, [pc, #12]	; (8001720 <OLED_data+0x6c>)
 8001712:	f004 f831 	bl	8005778 <HAL_GPIO_WritePin>
		return(HAL_OK);
 8001716:	2300      	movs	r3, #0
	}



}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40020000 	.word	0x40020000
 8001724:	40020400 	.word	0x40020400
 8001728:	200007ac 	.word	0x200007ac

0800172c <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	e023      	b.n	8001782 <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	3b50      	subs	r3, #80	; 0x50
 8001740:	b2db      	uxtb	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff7c 	bl	8001640 <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8001748:	2002      	movs	r0, #2
 800174a:	f7ff ff79 	bl	8001640 <OLED_cmd>
		OLED_cmd(UPPER_COL);
 800174e:	2010      	movs	r0, #16
 8001750:	f7ff ff76 	bl	8001640 <OLED_cmd>
		for(int i=0;i<128;i++){
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	e00d      	b.n	8001776 <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	01da      	lsls	r2, r3, #7
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	4413      	add	r3, r2
 8001762:	461a      	mov	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4413      	add	r3, r2
 8001768:	2101      	movs	r1, #1
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ffa2 	bl	80016b4 <OLED_data>
		for(int i=0;i<128;i++){
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	3301      	adds	r3, #1
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2b7f      	cmp	r3, #127	; 0x7f
 800177a:	ddee      	ble.n	800175a <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	3301      	adds	r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2b07      	cmp	r3, #7
 8001786:	ddd8      	ble.n	800173a <OLED_FLUSH+0xe>
		}


	}
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 8001794:	b5b0      	push	{r4, r5, r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 800179a:	2201      	movs	r2, #1
 800179c:	2110      	movs	r1, #16
 800179e:	482f      	ldr	r0, [pc, #188]	; (800185c <OLED_INIT+0xc8>)
 80017a0:	f003 ffea 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 80017a4:	2201      	movs	r2, #1
 80017a6:	2108      	movs	r1, #8
 80017a8:	482c      	ldr	r0, [pc, #176]	; (800185c <OLED_INIT+0xc8>)
 80017aa:	f003 ffe5 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2102      	movs	r1, #2
 80017b2:	482b      	ldr	r0, [pc, #172]	; (8001860 <OLED_INIT+0xcc>)
 80017b4:	f003 ffe0 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80017b8:	2064      	movs	r0, #100	; 0x64
 80017ba:	f003 fd3b 	bl	8005234 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2108      	movs	r1, #8
 80017c2:	4826      	ldr	r0, [pc, #152]	; (800185c <OLED_INIT+0xc8>)
 80017c4:	f003 ffd8 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80017c8:	2064      	movs	r0, #100	; 0x64
 80017ca:	f003 fd33 	bl	8005234 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 80017ce:	2201      	movs	r2, #1
 80017d0:	2108      	movs	r1, #8
 80017d2:	4822      	ldr	r0, [pc, #136]	; (800185c <OLED_INIT+0xc8>)
 80017d4:	f003 ffd0 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80017d8:	2064      	movs	r0, #100	; 0x64
 80017da:	f003 fd2b 	bl	8005234 <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 80017de:	4b21      	ldr	r3, [pc, #132]	; (8001864 <OLED_INIT+0xd0>)
 80017e0:	463c      	mov	r4, r7
 80017e2:	461d      	mov	r5, r3
 80017e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017ec:	c403      	stmia	r4!, {r0, r1}
 80017ee:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i = 0; i < 25; i++){
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
 80017f4:	e00c      	b.n	8001810 <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 80017f6:	463a      	mov	r2, r7
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	4413      	add	r3, r2
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff1e 	bl	8001640 <OLED_cmd>
		HAL_Delay(1);
 8001804:	2001      	movs	r0, #1
 8001806:	f003 fd15 	bl	8005234 <HAL_Delay>
	for(int i = 0; i < 25; i++){
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3301      	adds	r3, #1
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	2b18      	cmp	r3, #24
 8001814:	ddef      	ble.n	80017f6 <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 8001816:	20a7      	movs	r0, #167	; 0xa7
 8001818:	f7ff ff12 	bl	8001640 <OLED_cmd>
	OLED_FLUSH(HVE);
 800181c:	4812      	ldr	r0, [pc, #72]	; (8001868 <OLED_INIT+0xd4>)
 800181e:	f7ff ff85 	bl	800172c <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 8001822:	20af      	movs	r0, #175	; 0xaf
 8001824:	f7ff ff0c 	bl	8001640 <OLED_cmd>
	HAL_Delay(1000);
 8001828:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800182c:	f003 fd02 	bl	8005234 <HAL_Delay>
	OLED_cmd(DISP_OFF);
 8001830:	20ae      	movs	r0, #174	; 0xae
 8001832:	f7ff ff05 	bl	8001640 <OLED_cmd>
	HAL_Delay(10);
 8001836:	200a      	movs	r0, #10
 8001838:	f003 fcfc 	bl	8005234 <HAL_Delay>
	OLED_cmd(DISP_NORM);
 800183c:	20a6      	movs	r0, #166	; 0xa6
 800183e:	f7ff feff 	bl	8001640 <OLED_cmd>
	HAL_Delay(10);
 8001842:	200a      	movs	r0, #10
 8001844:	f003 fcf6 	bl	8005234 <HAL_Delay>
	OLED_cmd(DISP_ON);
 8001848:	20af      	movs	r0, #175	; 0xaf
 800184a:	f7ff fef9 	bl	8001640 <OLED_cmd>
	OLED_Clear();
 800184e:	f7ff fee3 	bl	8001618 <OLED_Clear>
	return HAL_OK;
 8001852:	2300      	movs	r3, #0

}
 8001854:	4618      	mov	r0, r3
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bdb0      	pop	{r4, r5, r7, pc}
 800185c:	40020000 	.word	0x40020000
 8001860:	40020400 	.word	0x40020400
 8001864:	08012884 	.word	0x08012884
 8001868:	20000000 	.word	0x20000000

0800186c <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	6039      	str	r1, [r7, #0]
 8001876:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[OLED_CHARSIZE];

	for(int i=0;i<=OLED_CHARSIZE;i++){
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	e015      	b.n	80018aa <OLED_InvChar+0x3e>
			temp[i]=~(ASCII[(uint8_t)character-ASCII_START][i]);
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	f1a3 0220 	sub.w	r2, r3, #32
 8001884:	4911      	ldr	r1, [pc, #68]	; (80018cc <OLED_InvChar+0x60>)
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	18ca      	adds	r2, r1, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	4413      	add	r3, r2
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	43db      	mvns	r3, r3
 8001896:	b2d9      	uxtb	r1, r3
 8001898:	f107 020c 	add.w	r2, r7, #12
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	4413      	add	r3, r2
 80018a0:	460a      	mov	r2, r1
 80018a2:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<=OLED_CHARSIZE;i++){
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	3301      	adds	r3, #1
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	dde6      	ble.n	800187e <OLED_InvChar+0x12>
	}
	memcpy(result,temp,OLED_CHARSIZE);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	6010      	str	r0, [r2, #0]
 80018bc:	791b      	ldrb	r3, [r3, #4]
 80018be:	7113      	strb	r3, [r2, #4]
}
 80018c0:	bf00      	nop
 80018c2:	371c      	adds	r7, #28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	08013430 	.word	0x08013430

080018d0 <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4604      	mov	r4, r0
 80018d8:	4608      	mov	r0, r1
 80018da:	4611      	mov	r1, r2
 80018dc:	461a      	mov	r2, r3
 80018de:	4623      	mov	r3, r4
 80018e0:	71fb      	strb	r3, [r7, #7]
 80018e2:	4603      	mov	r3, r0
 80018e4:	71bb      	strb	r3, [r7, #6]
 80018e6:	460b      	mov	r3, r1
 80018e8:	717b      	strb	r3, [r7, #5]
 80018ea:	4613      	mov	r3, r2
 80018ec:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	3b50      	subs	r3, #80	; 0x50
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fea3 	bl	8001640 <OLED_cmd>
	OLED_cmd(col&0x0F);
 80018fa:	79bb      	ldrb	r3, [r7, #6]
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	b2db      	uxtb	r3, r3
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fe9c 	bl	8001640 <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 8001908:	79bb      	ldrb	r3, [r7, #6]
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f043 0310 	orr.w	r3, r3, #16
 8001912:	b2db      	uxtb	r3, r3
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fe93 	bl	8001640 <OLED_cmd>
	uint8_t data[6];

	if(invert==NORMAL){
 800191a:	793b      	ldrb	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d110      	bne.n	8001942 <OLED_drawChar+0x72>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 8001920:	797b      	ldrb	r3, [r7, #5]
 8001922:	f1a3 0220 	sub.w	r2, r3, #32
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	4a0f      	ldr	r2, [pc, #60]	; (800196c <OLED_drawChar+0x9c>)
 800192e:	1899      	adds	r1, r3, r2
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	2205      	movs	r2, #5
 8001936:	4618      	mov	r0, r3
 8001938:	f00f fbe0 	bl	80110fc <memcpy>
		data[5]=0x00;
 800193c:	2300      	movs	r3, #0
 800193e:	737b      	strb	r3, [r7, #13]
 8001940:	e009      	b.n	8001956 <OLED_drawChar+0x86>
	}
	else{
		data[0]=0xFF;
 8001942:	23ff      	movs	r3, #255	; 0xff
 8001944:	723b      	strb	r3, [r7, #8]
		OLED_InvChar(character,data + 1);
 8001946:	f107 0308 	add.w	r3, r7, #8
 800194a:	3301      	adds	r3, #1
 800194c:	797a      	ldrb	r2, [r7, #5]
 800194e:	4619      	mov	r1, r3
 8001950:	4610      	mov	r0, r2
 8001952:	f7ff ff8b 	bl	800186c <OLED_InvChar>

	}

	OLED_data(data, 6);
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	2106      	movs	r1, #6
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fea9 	bl	80016b4 <OLED_data>

	}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop
 800196c:	08013430 	.word	0x08013430

08001970 <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	603a      	str	r2, [r7, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
 800197e:	460b      	mov	r3, r1
 8001980:	71bb      	strb	r3, [r7, #6]
 8001982:	4613      	mov	r3, r2
 8001984:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e014      	b.n	80019b6 <OLED_Printlin+0x46>
		OLED_drawChar(page, col+(i*6), string[i],invert);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	461a      	mov	r2, r3
 8001992:	0052      	lsls	r2, r2, #1
 8001994:	4413      	add	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	b2da      	uxtb	r2, r3
 800199a:	79bb      	ldrb	r3, [r7, #6]
 800199c:	4413      	add	r3, r2
 800199e:	b2d9      	uxtb	r1, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	4413      	add	r3, r2
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	797b      	ldrb	r3, [r7, #5]
 80019aa:	79f8      	ldrb	r0, [r7, #7]
 80019ac:	f7ff ff90 	bl	80018d0 <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3301      	adds	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	6838      	ldr	r0, [r7, #0]
 80019b8:	f7fe fc1c 	bl	80001f4 <strlen>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d8e3      	bhi.n	800198c <OLED_Printlin+0x1c>
	}
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	6039      	str	r1, [r7, #0]
 80019d8:	71fb      	strb	r3, [r7, #7]
 80019da:	4613      	mov	r3, r2
 80019dc:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 80019de:	6838      	ldr	r0, [r7, #0]
 80019e0:	f7fe fc08 	bl	80001f4 <strlen>
 80019e4:	4603      	mov	r3, r0
 80019e6:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	0fda      	lsrs	r2, r3, #31
 80019ec:	4413      	add	r3, r2
 80019ee:	105b      	asrs	r3, r3, #1
 80019f0:	425b      	negs	r3, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	3340      	adds	r3, #64	; 0x40
 80019fe:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	b2d9      	uxtb	r1, r3
 8001a04:	79bb      	ldrb	r3, [r7, #6]
 8001a06:	79f8      	ldrb	r0, [r7, #7]
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	f7ff ffb1 	bl	8001970 <OLED_Printlin>
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b094      	sub	sp, #80	; 0x50
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 8001a1e:	2320      	movs	r3, #32
 8001a20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 8001a34:	2300      	movs	r3, #0
 8001a36:	643b      	str	r3, [r7, #64]	; 0x40
 8001a38:	e018      	b.n	8001a6c <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 8001a3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a3e:	4413      	add	r3, r2
 8001a40:	461a      	mov	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b20      	cmp	r3, #32
 8001a4a:	d10b      	bne.n	8001a64 <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 8001a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a4e:	b2d9      	uxtb	r1, r3
 8001a50:	f107 020c 	add.w	r2, r7, #12
 8001a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a56:	4413      	add	r3, r2
 8001a58:	460a      	mov	r2, r1
 8001a5a:	701a      	strb	r2, [r3, #0]
	                i++;
 8001a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a5e:	3301      	adds	r3, #1
 8001a60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a62:	e000      	b.n	8001a66 <OLED_Print+0x50>
	            }
	            else{
	                continue;
 8001a64:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 8001a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a68:	3301      	adds	r3, #1
 8001a6a:	643b      	str	r3, [r7, #64]	; 0x40
 8001a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a6e:	2b15      	cmp	r3, #21
 8001a70:	dde3      	ble.n	8001a3a <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 8001a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d102      	bne.n	8001a84 <OLED_Print+0x6e>
	            last_ind++;
 8001a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a80:	3301      	adds	r3, #1
 8001a82:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 8001a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fbb2 	bl	80001f4 <strlen>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b15      	cmp	r3, #21
 8001a94:	d828      	bhi.n	8001ae8 <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 8001a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fba9 	bl	80001f4 <strlen>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	18d1      	adds	r1, r2, r3
 8001aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001aae:	f107 0320 	add.w	r3, r7, #32
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f00f fdca 	bl	801164c <strncpy>
	            memset(thisline+linend,fill,21-linend);
 8001ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aba:	f107 0220 	add.w	r2, r7, #32
 8001abe:	18d0      	adds	r0, r2, r3
 8001ac0:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac6:	f1c3 0315 	rsb	r3, r3, #21
 8001aca:	461a      	mov	r2, r3
 8001acc:	f00f fb24 	bl	8011118 <memset>
	            thisline[21]=' ';
 8001ad0:	2320      	movs	r3, #32
 8001ad2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 8001ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad8:	b2d8      	uxtb	r0, r3
 8001ada:	f107 0220 	add.w	r2, r7, #32
 8001ade:	2300      	movs	r3, #0
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	f7ff ff45 	bl	8001970 <OLED_Printlin>




	    }
}
 8001ae6:	e05e      	b.n	8001ba6 <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 8001ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aea:	3314      	adds	r3, #20
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	4413      	add	r3, r2
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b20      	cmp	r3, #32
 8001af4:	d03a      	beq.n	8001b6c <OLED_Print+0x156>
 8001af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001af8:	3315      	adds	r3, #21
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b20      	cmp	r3, #32
 8001b02:	d033      	beq.n	8001b6c <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 8001b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	18d1      	adds	r1, r2, r3
 8001b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	3350      	adds	r3, #80	; 0x50
 8001b10:	443b      	add	r3, r7
 8001b12:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001b16:	461a      	mov	r2, r3
 8001b18:	f107 0320 	add.w	r3, r7, #32
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f00f fd95 	bl	801164c <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 8001b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b24:	3b01      	subs	r3, #1
 8001b26:	3350      	adds	r3, #80	; 0x50
 8001b28:	443b      	add	r3, r7
 8001b2a:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f107 0320 	add.w	r3, r7, #32
 8001b34:	1898      	adds	r0, r3, r2
 8001b36:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	3350      	adds	r3, #80	; 0x50
 8001b40:	443b      	add	r3, r7
 8001b42:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001b46:	f1c3 0315 	rsb	r3, r3, #21
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f00f fae4 	bl	8011118 <memset>
	            thisline[21]=' ';
 8001b50:	2320      	movs	r3, #32
 8001b52:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 8001b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	3350      	adds	r3, #80	; 0x50
 8001b5c:	443b      	add	r3, r7
 8001b5e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001b62:	461a      	mov	r2, r3
 8001b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b66:	4413      	add	r3, r2
 8001b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b6a:	e00e      	b.n	8001b8a <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 8001b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	18d1      	adds	r1, r2, r3
 8001b72:	f107 0320 	add.w	r3, r7, #32
 8001b76:	2215      	movs	r2, #21
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f00f fd67 	bl	801164c <strncpy>
	            thisline[21]=' ';
 8001b7e:	2320      	movs	r3, #32
 8001b80:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 8001b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b86:	3315      	adds	r3, #21
 8001b88:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 8001b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b90:	b2d8      	uxtb	r0, r3
 8001b92:	f107 0220 	add.w	r2, r7, #32
 8001b96:	2300      	movs	r3, #0
 8001b98:	2102      	movs	r1, #2
 8001b9a:	f7ff fee9 	bl	8001970 <OLED_Printlin>
	        line++;
 8001b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001ba4:	e746      	b.n	8001a34 <OLED_Print+0x1e>
}
 8001ba6:	3750      	adds	r7, #80	; 0x50
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 8001bb8:	f7ff fd2e 	bl	8001618 <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	78fa      	ldrb	r2, [r7, #3]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f7ff ff01 	bl	80019ce <OLED_PrintCent>

	for(int i = 0; i < screen->datsize - 1; i++) {
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	e01a      	b.n	8001c08 <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	7818      	ldrb	r0, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	3301      	adds	r3, #1
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	7859      	ldrb	r1, [r3, #1]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	f7ff feb7 	bl	8001970 <OLED_Printlin>
	for(int i = 0; i < screen->datsize - 1; i++) {
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	3301      	adds	r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	dbde      	blt.n	8001bd2 <OLED_SCREEN+0x26>
	}
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	460b      	mov	r3, r1
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	7afb      	ldrb	r3, [r7, #11]
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fadb 	bl	80001f4 <strlen>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	617b      	str	r3, [r7, #20]
	int start_col=screen->dataloc[dataindx][1]+((len)*6);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	7afb      	ldrb	r3, [r7, #11]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	785b      	ldrb	r3, [r3, #1]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	440b      	add	r3, r1
 8001c5c:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	7afb      	ldrb	r3, [r7, #11]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4413      	add	r3, r2
 8001c68:	7818      	ldrb	r0, [r3, #0]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	b2d9      	uxtb	r1, r3
 8001c6e:	2300      	movs	r3, #0
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	f7ff fe7d 	bl	8001970 <OLED_Printlin>
}
 8001c76:	bf00      	nop
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 8001c8e:	4a35      	ldr	r2, [pc, #212]	; (8001d64 <OLED_SELECT+0xe4>)
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	4611      	mov	r1, r2
 8001c98:	8019      	strh	r1, [r3, #0]
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	0c12      	lsrs	r2, r2, #16
 8001c9e:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol,index;
	char* rest;

	if(selopt == 0){
 8001ca0:	7afb      	ldrb	r3, [r7, #11]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d105      	bne.n	8001cb2 <OLED_SELECT+0x32>
	    index = screen->selsize - 1;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	3b01      	subs	r3, #1
 8001cae:	77fb      	strb	r3, [r7, #31]
 8001cb0:	e002      	b.n	8001cb8 <OLED_SELECT+0x38>
	} else {
		index = selopt - 1;
 8001cb2:	7afb      	ldrb	r3, [r7, #11]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	77fb      	strb	r3, [r7, #31]
	}

	prevpage=screen->seldata[index][0];
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	7ffb      	ldrb	r3, [r7, #31]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	75fb      	strb	r3, [r7, #23]
	prevcol=screen->seldata[index][1];
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	7ffb      	ldrb	r3, [r7, #31]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	785b      	ldrb	r3, [r3, #1]
 8001cd2:	75bb      	strb	r3, [r7, #22]
	thispage=screen->seldata[selopt][0];
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	7afb      	ldrb	r3, [r7, #11]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	757b      	strb	r3, [r7, #21]
	thiscol=screen->seldata[selopt][1];
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	691a      	ldr	r2, [r3, #16]
 8001ce6:	7afb      	ldrb	r3, [r7, #11]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	785b      	ldrb	r3, [r3, #1]
 8001cee:	753b      	strb	r3, [r7, #20]

	if(restore == OLED_RESTORE){
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d122      	bne.n	8001d3c <OLED_SELECT+0xbc>
	    if (selopt == 0) {
 8001cf6:	7afb      	ldrb	r3, [r7, #11]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d110      	bne.n	8001d1e <OLED_SELECT+0x9e>
	    	rest=(char*)screen->data[find_restore_string(screen, screen->selsize - 1)]; //Here we may be wrapping around so we must restore the last select option
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	689c      	ldr	r4, [r3, #8]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f919 	bl	8001f44 <find_restore_string>
 8001d12:	4603      	mov	r3, r0
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4423      	add	r3, r4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	e010      	b.n	8001d40 <OLED_SELECT+0xc0>
	    } else {
	    	rest=(char*)screen->data[find_restore_string(screen, selopt - 1)];
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	689c      	ldr	r4, [r3, #8]
 8001d22:	7afb      	ldrb	r3, [r7, #11]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	4619      	mov	r1, r3
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f90a 	bl	8001f44 <find_restore_string>
 8001d30:	4603      	mov	r3, r0
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4423      	add	r3, r4
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	e001      	b.n	8001d40 <OLED_SELECT+0xc0>
	    }
	} else {
	    rest = "  ";
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <OLED_SELECT+0xe8>)
 8001d3e:	61bb      	str	r3, [r7, #24]
	}

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 8001d40:	7db9      	ldrb	r1, [r7, #22]
 8001d42:	7df8      	ldrb	r0, [r7, #23]
 8001d44:	2300      	movs	r3, #0
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	f7ff fe12 	bl	8001970 <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 8001d4c:	f107 0210 	add.w	r2, r7, #16
 8001d50:	7d39      	ldrb	r1, [r7, #20]
 8001d52:	7d78      	ldrb	r0, [r7, #21]
 8001d54:	2300      	movs	r3, #0
 8001d56:	f7ff fe0b 	bl	8001970 <OLED_Printlin>

}
 8001d5a:	bf00      	nop
 8001d5c:	3724      	adds	r7, #36	; 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd90      	pop	{r4, r7, pc}
 8001d62:	bf00      	nop
 8001d64:	080128a4 	.word	0x080128a4
 8001d68:	080128a0 	.word	0x080128a0

08001d6c <OLED_select_inv>:
/**
 * Select option by inverting the character which is selected
 * @param screen - Screen currently displayed
 * @param selopt - Selected select option
 * */
void OLED_select_inv(const Screen* screen, uint8_t selopt) {
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	70fb      	strb	r3, [r7, #3]
	uint8_t index, prevpage, prevcol, thispage, thiscol;
	char* restore;

	if(selopt == 0){
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d105      	bne.n	8001d8a <OLED_select_inv+0x1e>
		index = screen->selsize - 1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	75fb      	strb	r3, [r7, #23]
 8001d88:	e002      	b.n	8001d90 <OLED_select_inv+0x24>
	} else {
		index = selopt - 1;
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	75fb      	strb	r3, [r7, #23]
	}

	prevpage=screen->seldata[index][0];
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	7dfb      	ldrb	r3, [r7, #23]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	73fb      	strb	r3, [r7, #15]
	prevcol=screen->seldata[index][1];
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	785b      	ldrb	r3, [r3, #1]
 8001daa:	73bb      	strb	r3, [r7, #14]
	thispage=screen->seldata[selopt][0];
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	737b      	strb	r3, [r7, #13]
	thiscol=screen->seldata[selopt][1];
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	785b      	ldrb	r3, [r3, #1]
 8001dc6:	733b      	strb	r3, [r7, #12]

	if (selopt == 0) {
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d110      	bne.n	8001df0 <OLED_select_inv+0x84>
		restore=(char*)screen->data[find_restore_string(screen, screen->selsize - 1)]; //Here we may be wrapping around so we must restore the last select option
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689c      	ldr	r4, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4619      	mov	r1, r3
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f8b0 	bl	8001f44 <find_restore_string>
 8001de4:	4603      	mov	r3, r0
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4423      	add	r3, r4
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	e00d      	b.n	8001e0c <OLED_select_inv+0xa0>
	} else {
		restore=(char*)screen->data[find_restore_string(screen, selopt - 1)];
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689c      	ldr	r4, [r3, #8]
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f8a1 	bl	8001f44 <find_restore_string>
 8001e02:	4603      	mov	r3, r0
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4423      	add	r3, r4
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	613b      	str	r3, [r7, #16]
	}

	OLED_Printlin(prevpage, prevcol, restore, NORMAL);
 8001e0c:	7bb9      	ldrb	r1, [r7, #14]
 8001e0e:	7bf8      	ldrb	r0, [r7, #15]
 8001e10:	2300      	movs	r3, #0
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	f7ff fdac 	bl	8001970 <OLED_Printlin>
	OLED_Printlin(thispage, thiscol, screen->data[find_restore_string(screen, selopt)], INVERT);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689c      	ldr	r4, [r3, #8]
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f88f 	bl	8001f44 <find_restore_string>
 8001e26:	4603      	mov	r3, r0
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4423      	add	r3, r4
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	7b39      	ldrb	r1, [r7, #12]
 8001e30:	7b78      	ldrb	r0, [r7, #13]
 8001e32:	2301      	movs	r3, #1
 8001e34:	f7ff fd9c 	bl	8001970 <OLED_Printlin>
}
 8001e38:	bf00      	nop
 8001e3a:	371c      	adds	r7, #28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd90      	pop	{r4, r7, pc}

08001e40 <OLED_display_files>:
 * Display filenames to OLED display (used in show files task)
 *
 * @param page - Page of files to display (page count is increased as user scrolls through files)
 * @return HAL_OK if files were successfully displayed
 * */
HAL_StatusTypeDef OLED_display_files(const Screen* screen, uint8_t page) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	70fb      	strb	r3, [r7, #3]
	if (get_number_files_section(FILES_PERSCREEN * page, FILES_PERSCREEN) == 0) {
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	0052      	lsls	r2, r2, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	2103      	movs	r1, #3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f002 fbc9 	bl	80045f2 <get_number_files_section>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <OLED_display_files+0x2a>
		return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e066      	b.n	8001f38 <OLED_display_files+0xf8>
	}
	uint32_t file_count = get_number_files_section(FILES_PERSCREEN * page, FILES_PERSCREEN);
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	0052      	lsls	r2, r2, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	2103      	movs	r1, #3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f002 fbba 	bl	80045f2 <get_number_files_section>
 8001e7e:	61f8      	str	r0, [r7, #28]

	char** file_names = malloc(file_count * sizeof(char*));
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f00f f929 	bl	80110dc <malloc>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	61bb      	str	r3, [r7, #24]
	char used[5];
	char free[5];
	uint32_t file_index = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t location_index = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]

	get_free_size_str(free);
 8001e96:	f107 0308 	add.w	r3, r7, #8
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f002 fda0 	bl	80049e0 <get_free_size_str>
	get_used_size_str(used);
 8001ea0:	f107 0310 	add.w	r3, r7, #16
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f002 fd89 	bl	80049bc <get_used_size_str>

	OLED_SCRNREF(&SCRN_ShowFiles, 4, free);
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	461a      	mov	r2, r3
 8001eb0:	2104      	movs	r1, #4
 8001eb2:	4823      	ldr	r0, [pc, #140]	; (8001f40 <OLED_display_files+0x100>)
 8001eb4:	f7ff feb3 	bl	8001c1e <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_ShowFiles, 5, used);
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	2105      	movs	r1, #5
 8001ec0:	481f      	ldr	r0, [pc, #124]	; (8001f40 <OLED_display_files+0x100>)
 8001ec2:	f7ff feac 	bl	8001c1e <OLED_SCRNREF>

	if (get_files_section(file_names, FILES_PERSCREEN * page, FILES_PERSCREEN) != RFS_OK) {
 8001ec6:	78fb      	ldrb	r3, [r7, #3]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	461a      	mov	r2, r3
 8001ecc:	0052      	lsls	r2, r2, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	69b8      	ldr	r0, [r7, #24]
 8001ed8:	f002 fbb9 	bl	800464e <get_files_section>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d021      	beq.n	8001f26 <OLED_display_files+0xe6>
		free_filenames(file_names, file_count);
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	69b8      	ldr	r0, [r7, #24]
 8001ee8:	f002 fc9c 	bl	8004824 <free_filenames>
		return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e023      	b.n	8001f38 <OLED_display_files+0xf8>
	}

	while(location_index < FILES_PERSCREEN) {
		if (entry_present(location_index) == RFS_OK) {
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f002 fc17 	bl	8004728 <entry_present>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10f      	bne.n	8001f20 <OLED_display_files+0xe0>
			OLED_SCRNREF(&SCRN_ShowFiles, location_index + 1, file_names[file_index]);
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	3301      	adds	r3, #1
 8001f06:	b2d9      	uxtb	r1, r3
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4413      	add	r3, r2
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	480a      	ldr	r0, [pc, #40]	; (8001f40 <OLED_display_files+0x100>)
 8001f16:	f7ff fe82 	bl	8001c1e <OLED_SCRNREF>
			file_index++;
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
		}
		location_index++;
 8001f20:	6a3b      	ldr	r3, [r7, #32]
 8001f22:	3301      	adds	r3, #1
 8001f24:	623b      	str	r3, [r7, #32]
	while(location_index < FILES_PERSCREEN) {
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d9e1      	bls.n	8001ef0 <OLED_display_files+0xb0>
	}

	free_filenames(file_names, file_count);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	69b8      	ldr	r0, [r7, #24]
 8001f32:	f002 fc77 	bl	8004824 <free_filenames>
	return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3728      	adds	r7, #40	; 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	08013994 	.word	0x08013994

08001f44 <find_restore_string>:
 *
 * @param screen - Screen to update
 * @param prev_sel_opt - Previous selected option
 * @return index of string in screen->data to be used as replacement
 * */
uint8_t find_restore_string(const Screen* screen, uint8_t prev_sel_opt) {
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	70fb      	strb	r3, [r7, #3]
	uint8_t index_of_string;

	for (int i = 1; i < screen->datsize; i++) {
 8001f50:	2301      	movs	r3, #1
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	e021      	b.n	8001f9a <find_restore_string+0x56>
		if((screen->dataloc[i][0] == screen->seldata[prev_sel_opt][0]) && (screen->dataloc[i][1] == screen->seldata[prev_sel_opt][1])) {
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4413      	add	r3, r2
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6919      	ldr	r1, [r3, #16]
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	440b      	add	r3, r1
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d110      	bne.n	8001f94 <find_restore_string+0x50>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	785a      	ldrb	r2, [r3, #1]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6919      	ldr	r1, [r3, #16]
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	440b      	add	r3, r1
 8001f88:	785b      	ldrb	r3, [r3, #1]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d102      	bne.n	8001f94 <find_restore_string+0x50>
			index_of_string = i;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	73fb      	strb	r3, [r7, #15]
			break;
 8001f92:	e007      	b.n	8001fa4 <find_restore_string+0x60>
	for (int i = 1; i < screen->datsize; i++) {
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	3301      	adds	r3, #1
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	dbd8      	blt.n	8001f56 <find_restore_string+0x12>
		}
	}

	return index_of_string;
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <oled_show_file>:

/**
 * Show the file data of given file entry number
 * @param entry - Entry to show data of
 * */
void oled_show_file(uint16_t entry) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f002 fbb1 	bl	8004728 <entry_present>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d12d      	bne.n	8002028 <oled_show_file+0x74>
		return; //No card entry present
	}

	work = read_card_entry(entry);
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f002 f997 	bl	8004302 <read_card_entry>
 8001fd4:	60f8      	str	r0, [r7, #12]

	OLED_SCREEN(&SCRN_FileData, NORMAL);
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4815      	ldr	r0, [pc, #84]	; (8002030 <oled_show_file+0x7c>)
 8001fda:	f7ff fde7 	bl	8001bac <OLED_SCREEN>
	OLED_SCRNREF(&SCRN_FileData, 0, work->name);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4812      	ldr	r0, [pc, #72]	; (8002030 <oled_show_file+0x7c>)
 8001fe8:	f7ff fe19 	bl	8001c1e <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_TYPE_LOC, work->type);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	480e      	ldr	r0, [pc, #56]	; (8002030 <oled_show_file+0x7c>)
 8001ff6:	f7ff fe12 	bl	8001c1e <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_UID_LOC, uid_tostring(work->uid, work->uidsize));
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	791b      	ldrb	r3, [r3, #4]
 8002002:	4619      	mov	r1, r3
 8002004:	4610      	mov	r0, r2
 8002006:	f7ff f9d3 	bl	80013b0 <uid_tostring>
 800200a:	4603      	mov	r3, r0
 800200c:	461a      	mov	r2, r3
 800200e:	2102      	movs	r1, #2
 8002010:	4807      	ldr	r0, [pc, #28]	; (8002030 <oled_show_file+0x7c>)
 8002012:	f7ff fe04 	bl	8001c1e <OLED_SCRNREF>
	OLED_SELECT(&SCRN_FileData, 0, OLED_NORESTORE);
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	4805      	ldr	r0, [pc, #20]	; (8002030 <oled_show_file+0x7c>)
 800201c:	f7ff fe30 	bl	8001c80 <OLED_SELECT>

	free(work);
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f00f f863 	bl	80110ec <free>
 8002026:	e000      	b.n	800202a <oled_show_file+0x76>
		return; //No card entry present
 8002028:	bf00      	nop
}
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	080139a8 	.word	0x080139a8

08002034 <oled_move_selection>:
 * Move selection arrow for given screen
 * @param screen - Screen to be modified
 * @param arrow_index - Pointer to variable which keeps track of arrow index
 * @param restore - Option to restore previous text or not
 * */
void oled_move_selection(const Screen* screen, uint8_t* arrow_index, uint8_t restore) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	4613      	mov	r3, r2
 8002040:	71fb      	strb	r3, [r7, #7]
	uint8_t max_index = screen->selsize;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	75fb      	strb	r3, [r7, #23]

	if (*arrow_index >= max_index - 1) {
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	7dfb      	ldrb	r3, [r7, #23]
 8002050:	3b01      	subs	r3, #1
 8002052:	429a      	cmp	r2, r3
 8002054:	db03      	blt.n	800205e <oled_move_selection+0x2a>
		*arrow_index = 0;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
 800205c:	e005      	b.n	800206a <oled_move_selection+0x36>
	} else {
		*arrow_index += 1;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	b2da      	uxtb	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	701a      	strb	r2, [r3, #0]

	}
	OLED_SELECT(screen, *arrow_index, restore);
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	79fa      	ldrb	r2, [r7, #7]
 8002070:	4619      	mov	r1, r3
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f7ff fe04 	bl	8001c80 <OLED_SELECT>
}
 8002078:	bf00      	nop
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <oled_move_selection_inv>:
/**
 * Select by inverting the text on the screen
 * @param screen - Screen to modify
 * @param select_index - Pointer to variable that keeps track of selection index
 * */
void oled_move_selection_inv(const Screen* screen, uint8_t* select_index) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
	uint8_t max_index = screen->selsize;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	73fb      	strb	r3, [r7, #15]

	if (*select_index >= max_index - 1) {
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	3b01      	subs	r3, #1
 800209a:	429a      	cmp	r2, r3
 800209c:	db03      	blt.n	80020a6 <oled_move_selection_inv+0x26>
		*select_index = 0;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
 80020a4:	e005      	b.n	80020b2 <oled_move_selection_inv+0x32>
	} else {
		*select_index += 1;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	3301      	adds	r3, #1
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	701a      	strb	r2, [r3, #0]
	}

	OLED_select_inv(screen, *select_index);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	4619      	mov	r1, r3
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff fe57 	bl	8001d6c <OLED_select_inv>
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <oled_keyboard_insertChar>:
 * Update string displayed displayed in keyboard task as it's being written
 * @param char_index - Index of selected character on keyboard
 * @param curr_name - Pointer to pointer that stores the current name which has been created by the user.
 * 					  This name will grow as the user continues to write characters
 * */
void oled_keyboard_insertChar (uint8_t char_index, char** curr_name) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
	uint8_t length;

	if (*curr_name == NULL) {
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <oled_keyboard_insertChar+0x1a>
		length = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	73fb      	strb	r3, [r7, #15]
 80020e0:	e006      	b.n	80020f0 <oled_keyboard_insertChar+0x28>
	} else {
		length = strlen(*curr_name);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe f884 	bl	80001f4 <strlen>
 80020ec:	4603      	mov	r3, r0
 80020ee:	73fb      	strb	r3, [r7, #15]
	}

	*curr_name = realloc(*curr_name, (length + 2) * sizeof(char)); //Increment by 2 since we want to store a new character as well as null
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	3302      	adds	r3, #2
 80020f8:	4619      	mov	r1, r3
 80020fa:	4610      	mov	r0, r2
 80020fc:	f00f f998 	bl	8011430 <realloc>
 8002100:	4602      	mov	r2, r0
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	601a      	str	r2, [r3, #0]
	(*curr_name)[length] = KEYBOARD_LUT[char_index];
 8002106:	79fa      	ldrb	r2, [r7, #7]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	6819      	ldr	r1, [r3, #0]
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	440b      	add	r3, r1
 8002110:	490a      	ldr	r1, [pc, #40]	; (800213c <oled_keyboard_insertChar+0x74>)
 8002112:	5c8a      	ldrb	r2, [r1, r2]
 8002114:	701a      	strb	r2, [r3, #0]
	(*curr_name)[length + 1] = '\0';
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	3301      	adds	r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
	OLED_SCRNREF(&SCRN_Keyboard, 0, *curr_name);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	2100      	movs	r1, #0
 800212c:	4804      	ldr	r0, [pc, #16]	; (8002140 <oled_keyboard_insertChar+0x78>)
 800212e:	f7ff fd76 	bl	8001c1e <OLED_SCRNREF>
}
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	08013414 	.word	0x08013414
 8002140:	080139d0 	.word	0x080139d0

08002144 <oled_keyboard_removeChar>:

/**
 * Remove character from user inputted string
 * @param curr_name - Current state of user string
 * */
void oled_keyboard_removeChar (char** curr_name) {
 8002144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002148:	b087      	sub	sp, #28
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	466b      	mov	r3, sp
 8002150:	461e      	mov	r6, r3
	uint8_t length;

	if (*curr_name == NULL) {
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <oled_keyboard_removeChar+0x1a>
 800215a:	46b5      	mov	sp, r6
 800215c:	e055      	b.n	800220a <oled_keyboard_removeChar+0xc6>
		return; //No name, don't do anything
	}

	length = strlen(*curr_name);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe f846 	bl	80001f4 <strlen>
 8002168:	4603      	mov	r3, r0
 800216a:	75fb      	strb	r3, [r7, #23]

	*curr_name = realloc(*curr_name, length * sizeof(char));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	7dfa      	ldrb	r2, [r7, #23]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f00f f95b 	bl	8011430 <realloc>
 800217a:	4602      	mov	r2, r0
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	601a      	str	r2, [r3, #0]
	(*curr_name)[length - 1] = '\0';
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	7dfb      	ldrb	r3, [r7, #23]
 8002186:	3b01      	subs	r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]

	char clear[length + 1];
 800218e:	7dfb      	ldrb	r3, [r7, #23]
 8002190:	1c59      	adds	r1, r3, #1
 8002192:	1e4b      	subs	r3, r1, #1
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	460a      	mov	r2, r1
 8002198:	2300      	movs	r3, #0
 800219a:	4690      	mov	r8, r2
 800219c:	4699      	mov	r9, r3
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021b2:	460a      	mov	r2, r1
 80021b4:	2300      	movs	r3, #0
 80021b6:	4614      	mov	r4, r2
 80021b8:	461d      	mov	r5, r3
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	00eb      	lsls	r3, r5, #3
 80021c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021c8:	00e2      	lsls	r2, r4, #3
 80021ca:	460b      	mov	r3, r1
 80021cc:	3307      	adds	r3, #7
 80021ce:	08db      	lsrs	r3, r3, #3
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	ebad 0d03 	sub.w	sp, sp, r3
 80021d6:	466b      	mov	r3, sp
 80021d8:	3300      	adds	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
	memset(clear, ' ', length);
 80021dc:	7dfb      	ldrb	r3, [r7, #23]
 80021de:	461a      	mov	r2, r3
 80021e0:	2120      	movs	r1, #32
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f00e ff98 	bl	8011118 <memset>
	clear[length] = '\0';
 80021e8:	7dfb      	ldrb	r3, [r7, #23]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	2100      	movs	r1, #0
 80021ee:	54d1      	strb	r1, [r2, r3]

	OLED_SCRNREF(&SCRN_Keyboard, 0 ,clear);
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	2100      	movs	r1, #0
 80021f4:	4807      	ldr	r0, [pc, #28]	; (8002214 <oled_keyboard_removeChar+0xd0>)
 80021f6:	f7ff fd12 	bl	8001c1e <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_Keyboard, 0, *curr_name);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	2100      	movs	r1, #0
 8002202:	4804      	ldr	r0, [pc, #16]	; (8002214 <oled_keyboard_removeChar+0xd0>)
 8002204:	f7ff fd0b 	bl	8001c1e <OLED_SCRNREF>
 8002208:	46b5      	mov	sp, r6
}
 800220a:	371c      	adds	r7, #28
 800220c:	46bd      	mov	sp, r7
 800220e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002212:	bf00      	nop
 8002214:	080139d0 	.word	0x080139d0

08002218 <oled_set_contrast>:

/**
 * Set the constrast of oled display
 * @param value - 8 bit value to set contrast to
 * */
void oled_set_contrast (uint8_t value) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
	OLED_cmd(CNTRST_SET);
 8002222:	2081      	movs	r0, #129	; 0x81
 8002224:	f7ff fa0c 	bl	8001640 <OLED_cmd>
	HAL_Delay(1);
 8002228:	2001      	movs	r0, #1
 800222a:	f003 f803 	bl	8005234 <HAL_Delay>
	OLED_cmd(value);
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fa05 	bl	8001640 <OLED_cmd>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <oled_show_stats>:

/**
 * Display the statistics for stats task (total writes and reads)
 * */
void oled_show_stats(void) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
	char* reads = get_total_reads_str();
 8002246:	f002 fc81 	bl	8004b4c <get_total_reads_str>
 800224a:	6078      	str	r0, [r7, #4]
	char* writes = get_total_writes_str();
 800224c:	f002 fc66 	bl	8004b1c <get_total_writes_str>
 8002250:	6038      	str	r0, [r7, #0]

	OLED_SCRNREF(&SCRN_Stats, 1, writes);
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	2101      	movs	r1, #1
 8002256:	4809      	ldr	r0, [pc, #36]	; (800227c <oled_show_stats+0x3c>)
 8002258:	f7ff fce1 	bl	8001c1e <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_Stats, 2, reads);
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	2102      	movs	r1, #2
 8002260:	4806      	ldr	r0, [pc, #24]	; (800227c <oled_show_stats+0x3c>)
 8002262:	f7ff fcdc 	bl	8001c1e <OLED_SCRNREF>

	free(reads);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f00e ff40 	bl	80110ec <free>
	free(writes);
 800226c:	6838      	ldr	r0, [r7, #0]
 800226e:	f00e ff3d 	bl	80110ec <free>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	080139f8 	.word	0x080139f8

08002280 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af02      	add	r7, sp, #8
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT, addr, DUMMY};
 800228a:	230f      	movs	r3, #15
 800228c:	733b      	strb	r3, [r7, #12]
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	737b      	strb	r3, [r7, #13]
 8002292:	2300      	movs	r3, #0
 8002294:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002296:	2200      	movs	r2, #0
 8002298:	f44f 7180 	mov.w	r1, #256	; 0x100
 800229c:	480d      	ldr	r0, [pc, #52]	; (80022d4 <STAT_READ+0x54>)
 800229e:	f003 fa6b 	bl	8005778 <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 80022a2:	bf00      	nop
 80022a4:	f107 0208 	add.w	r2, r7, #8
 80022a8:	f107 010c 	add.w	r1, r7, #12
 80022ac:	2364      	movs	r3, #100	; 0x64
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	2303      	movs	r3, #3
 80022b2:	4809      	ldr	r0, [pc, #36]	; (80022d8 <STAT_READ+0x58>)
 80022b4:	f006 fb47 	bl	8008946 <HAL_SPI_TransmitReceive>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f2      	bne.n	80022a4 <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022c4:	4803      	ldr	r0, [pc, #12]	; (80022d4 <STAT_READ+0x54>)
 80022c6:	f003 fa57 	bl	8005778 <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 80022ca:	7abb      	ldrb	r3, [r7, #10]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40020000 	.word	0x40020000
 80022d8:	20000804 	.word	0x20000804

080022dc <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	460a      	mov	r2, r1
 80022e6:	71fb      	strb	r3, [r7, #7]
 80022e8:	4613      	mov	r3, r2
 80022ea:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 80022ec:	231f      	movs	r3, #31
 80022ee:	733b      	strb	r3, [r7, #12]
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	737b      	strb	r3, [r7, #13]
 80022f4:	79bb      	ldrb	r3, [r7, #6]
 80022f6:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80022f8:	2200      	movs	r2, #0
 80022fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022fe:	480a      	ldr	r0, [pc, #40]	; (8002328 <STAT_WRITE+0x4c>)
 8002300:	f003 fa3a 	bl	8005778 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 8002304:	f107 010c 	add.w	r1, r7, #12
 8002308:	2364      	movs	r3, #100	; 0x64
 800230a:	2203      	movs	r2, #3
 800230c:	4807      	ldr	r0, [pc, #28]	; (800232c <STAT_WRITE+0x50>)
 800230e:	f006 f9de 	bl	80086ce <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002312:	2201      	movs	r2, #1
 8002314:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002318:	4803      	ldr	r0, [pc, #12]	; (8002328 <STAT_WRITE+0x4c>)
 800231a:	f003 fa2d 	bl	8005778 <HAL_GPIO_WritePin>

	return(HAL_OK);
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40020000 	.word	0x40020000
 800232c:	20000804 	.word	0x20000804

08002330 <WRIT_EN>:
 * 		Bad block manage
 *
 * The Write Enable bit in status register 3 will be reset to 0 after any of these instructions
 * */

void WRIT_EN(void){
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
	uint8_t write_en=W_EN;
 8002336:	2306      	movs	r3, #6
 8002338:	71fb      	strb	r3, [r7, #7]
	WRITE_DIS();
 800233a:	f000 f825 	bl	8002388 <WRITE_DIS>

	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 800233e:	e011      	b.n	8002364 <WRIT_EN+0x34>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002340:	2200      	movs	r2, #0
 8002342:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002346:	480e      	ldr	r0, [pc, #56]	; (8002380 <WRIT_EN+0x50>)
 8002348:	f003 fa16 	bl	8005778 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &write_en, 1, 100);
 800234c:	1df9      	adds	r1, r7, #7
 800234e:	2364      	movs	r3, #100	; 0x64
 8002350:	2201      	movs	r2, #1
 8002352:	480c      	ldr	r0, [pc, #48]	; (8002384 <WRIT_EN+0x54>)
 8002354:	f006 f9bb 	bl	80086ce <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002358:	2201      	movs	r2, #1
 800235a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800235e:	4808      	ldr	r0, [pc, #32]	; (8002380 <WRIT_EN+0x50>)
 8002360:	f003 fa0a 	bl	8005778 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 8002364:	20c0      	movs	r0, #192	; 0xc0
 8002366:	f7ff ff8b 	bl	8002280 <STAT_READ>
 800236a:	4603      	mov	r3, r0
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b02      	cmp	r3, #2
 8002372:	d1e5      	bne.n	8002340 <WRIT_EN+0x10>
	}


}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40020000 	.word	0x40020000
 8002384:	20000804 	.word	0x20000804

08002388 <WRITE_DIS>:

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 800238e:	2304      	movs	r3, #4
 8002390:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 8002392:	e011      	b.n	80023b8 <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002394:	2200      	movs	r2, #0
 8002396:	f44f 7180 	mov.w	r1, #256	; 0x100
 800239a:	480e      	ldr	r0, [pc, #56]	; (80023d4 <WRITE_DIS+0x4c>)
 800239c:	f003 f9ec 	bl	8005778 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 80023a0:	1df9      	adds	r1, r7, #7
 80023a2:	2364      	movs	r3, #100	; 0x64
 80023a4:	2201      	movs	r2, #1
 80023a6:	480c      	ldr	r0, [pc, #48]	; (80023d8 <WRITE_DIS+0x50>)
 80023a8:	f006 f991 	bl	80086ce <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80023ac:	2201      	movs	r2, #1
 80023ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023b2:	4808      	ldr	r0, [pc, #32]	; (80023d4 <WRITE_DIS+0x4c>)
 80023b4:	f003 f9e0 	bl	8005778 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 80023b8:	20c0      	movs	r0, #192	; 0xc0
 80023ba:	f7ff ff61 	bl	8002280 <STAT_READ>
 80023be:	4603      	mov	r3, r0
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d0e5      	beq.n	8002394 <WRITE_DIS+0xc>
		}
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40020000 	.word	0x40020000
 80023d8:	20000804 	.word	0x20000804

080023dc <block_erase>:
/**
 * Erase a 128kB (64 pages) block to 0xFF
 *
 * @param block_num - Block number to erase
 * */
void block_erase(uint16_t block_num) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	80fb      	strh	r3, [r7, #6]
	uint16_t page_addr = block_num * BLOCK_PAGECOUNT;
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	019b      	lsls	r3, r3, #6
 80023ea:	81fb      	strh	r3, [r7, #14]
	uint8_t transaction [] = {BLOCK_ERS, DUMMY, page_addr>>8, page_addr};
 80023ec:	23d8      	movs	r3, #216	; 0xd8
 80023ee:	723b      	strb	r3, [r7, #8]
 80023f0:	2300      	movs	r3, #0
 80023f2:	727b      	strb	r3, [r7, #9]
 80023f4:	89fb      	ldrh	r3, [r7, #14]
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	72bb      	strb	r3, [r7, #10]
 80023fe:	89fb      	ldrh	r3, [r7, #14]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	72fb      	strb	r3, [r7, #11]
	WRIT_EN();
 8002404:	f7ff ff94 	bl	8002330 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002408:	2200      	movs	r2, #0
 800240a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800240e:	480f      	ldr	r0, [pc, #60]	; (800244c <block_erase+0x70>)
 8002410:	f003 f9b2 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, transaction, sizeof(transaction)/sizeof(transaction[0]), 100);
 8002414:	f107 0108 	add.w	r1, r7, #8
 8002418:	2364      	movs	r3, #100	; 0x64
 800241a:	2204      	movs	r2, #4
 800241c:	480c      	ldr	r0, [pc, #48]	; (8002450 <block_erase+0x74>)
 800241e:	f006 f956 	bl	80086ce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002422:	2201      	movs	r2, #1
 8002424:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002428:	4808      	ldr	r0, [pc, #32]	; (800244c <block_erase+0x70>)
 800242a:	f003 f9a5 	bl	8005778 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 800242e:	bf00      	nop
 8002430:	20c0      	movs	r0, #192	; 0xc0
 8002432:	f7ff ff25 	bl	8002280 <STAT_READ>
 8002436:	4603      	mov	r3, r0
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b01      	cmp	r3, #1
 800243e:	d0f7      	beq.n	8002430 <block_erase+0x54>
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40020000 	.word	0x40020000
 8002450:	20000804 	.word	0x20000804

08002454 <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002458:	2201      	movs	r2, #1
 800245a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800245e:	480a      	ldr	r0, [pc, #40]	; (8002488 <MEM_INIT+0x34>)
 8002460:	f003 f98a 	bl	8005778 <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 8002464:	2100      	movs	r1, #0
 8002466:	20a0      	movs	r0, #160	; 0xa0
 8002468:	f7ff ff38 	bl	80022dc <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 800246c:	20a0      	movs	r0, #160	; 0xa0
 800246e:	f7ff ff07 	bl	8002280 <STAT_READ>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MEM_INIT+0x28>
		return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e002      	b.n	8002482 <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 800247c:	f7ff ff84 	bl	8002388 <WRITE_DIS>
	return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40020000 	.word	0x40020000

0800248c <MEM_WRITE>:
 * @param data: data to write
 *
 * @param bytes: Number of bytes to write to page
 * */

HAL_StatusTypeDef MEM_WRITE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60ba      	str	r2, [r7, #8]
 8002494:	607b      	str	r3, [r7, #4]
 8002496:	4603      	mov	r3, r0
 8002498:	81fb      	strh	r3, [r7, #14]
 800249a:	460b      	mov	r3, r1
 800249c:	81bb      	strh	r3, [r7, #12]
	uint8_t* setup = malloc((bytes+3)*sizeof(uint8_t)); //Extra 3 bytes for write opcode and column address
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3303      	adds	r3, #3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f00e fe1a 	bl	80110dc <malloc>
 80024a8:	4603      	mov	r3, r0
 80024aa:	617b      	str	r3, [r7, #20]
	uint8_t execute[]={WRIT_EXE, DUMMY, page_addr>>8, page_addr};
 80024ac:	2310      	movs	r3, #16
 80024ae:	743b      	strb	r3, [r7, #16]
 80024b0:	2300      	movs	r3, #0
 80024b2:	747b      	strb	r3, [r7, #17]
 80024b4:	89fb      	ldrh	r3, [r7, #14]
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	74bb      	strb	r3, [r7, #18]
 80024be:	89fb      	ldrh	r3, [r7, #14]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	74fb      	strb	r3, [r7, #19]

	setup[0] = WRIT_LOAD;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	2202      	movs	r2, #2
 80024c8:	701a      	strb	r2, [r3, #0]
	setup[1] = col_addr>>8;
 80024ca:	89bb      	ldrh	r3, [r7, #12]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	3301      	adds	r3, #1
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	701a      	strb	r2, [r3, #0]
	setup[2] = col_addr;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	3302      	adds	r3, #2
 80024dc:	89ba      	ldrh	r2, [r7, #12]
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	701a      	strb	r2, [r3, #0]
	memcpy(&setup[3], data, bytes);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3303      	adds	r3, #3
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f00e fe06 	bl	80110fc <memcpy>

	WRIT_EN();
 80024f0:	f7ff ff1e 	bl	8002330 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80024f4:	2200      	movs	r2, #0
 80024f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024fa:	482d      	ldr	r0, [pc, #180]	; (80025b0 <MEM_WRITE+0x124>)
 80024fc:	f003 f93c 	bl	8005778 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, setup, bytes+3, 100)!=HAL_OK){ //load data to internal buffer
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	b29b      	uxth	r3, r3
 8002504:	3303      	adds	r3, #3
 8002506:	b29a      	uxth	r2, r3
 8002508:	2364      	movs	r3, #100	; 0x64
 800250a:	6979      	ldr	r1, [r7, #20]
 800250c:	4829      	ldr	r0, [pc, #164]	; (80025b4 <MEM_WRITE+0x128>)
 800250e:	f006 f8de 	bl	80086ce <HAL_SPI_Transmit>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <MEM_WRITE+0xa2>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002518:	2201      	movs	r2, #1
 800251a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800251e:	4824      	ldr	r0, [pc, #144]	; (80025b0 <MEM_WRITE+0x124>)
 8002520:	f003 f92a 	bl	8005778 <HAL_GPIO_WritePin>
		free(setup);
 8002524:	6978      	ldr	r0, [r7, #20]
 8002526:	f00e fde1 	bl	80110ec <free>
		return(HAL_ERROR);
 800252a:	2301      	movs	r3, #1
 800252c:	e03c      	b.n	80025a8 <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800252e:	2201      	movs	r2, #1
 8002530:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002534:	481e      	ldr	r0, [pc, #120]	; (80025b0 <MEM_WRITE+0x124>)
 8002536:	f003 f91f 	bl	8005778 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until busy bit is cleared
 800253a:	bf00      	nop
 800253c:	20c0      	movs	r0, #192	; 0xc0
 800253e:	f7ff fe9f 	bl	8002280 <STAT_READ>
 8002542:	4603      	mov	r3, r0
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d0f7      	beq.n	800253c <MEM_WRITE+0xb0>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800254c:	2200      	movs	r2, #0
 800254e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002552:	4817      	ldr	r0, [pc, #92]	; (80025b0 <MEM_WRITE+0x124>)
 8002554:	f003 f910 	bl	8005778 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, execute, 4, 100)!=HAL_OK){ //Send command to dump internal buffer data to memory array
 8002558:	f107 0110 	add.w	r1, r7, #16
 800255c:	2364      	movs	r3, #100	; 0x64
 800255e:	2204      	movs	r2, #4
 8002560:	4814      	ldr	r0, [pc, #80]	; (80025b4 <MEM_WRITE+0x128>)
 8002562:	f006 f8b4 	bl	80086ce <HAL_SPI_Transmit>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <MEM_WRITE+0xf6>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800256c:	2201      	movs	r2, #1
 800256e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002572:	480f      	ldr	r0, [pc, #60]	; (80025b0 <MEM_WRITE+0x124>)
 8002574:	f003 f900 	bl	8005778 <HAL_GPIO_WritePin>
		free(setup);
 8002578:	6978      	ldr	r0, [r7, #20]
 800257a:	f00e fdb7 	bl	80110ec <free>
		return(HAL_ERROR);
 800257e:	2301      	movs	r3, #1
 8002580:	e012      	b.n	80025a8 <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002582:	2201      	movs	r2, #1
 8002584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002588:	4809      	ldr	r0, [pc, #36]	; (80025b0 <MEM_WRITE+0x124>)
 800258a:	f003 f8f5 	bl	8005778 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 800258e:	bf00      	nop
 8002590:	20c0      	movs	r0, #192	; 0xc0
 8002592:	f7ff fe75 	bl	8002280 <STAT_READ>
 8002596:	4603      	mov	r3, r0
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b01      	cmp	r3, #1
 800259e:	d0f7      	beq.n	8002590 <MEM_WRITE+0x104>
	free(setup);
 80025a0:	6978      	ldr	r0, [r7, #20]
 80025a2:	f00e fda3 	bl	80110ec <free>
	return(HAL_OK);
 80025a6:	2300      	movs	r3, #0

}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40020000 	.word	0x40020000
 80025b4:	20000804 	.word	0x20000804

080025b8 <MEM_READPAGE>:
 * @param bytes: Number of bytes to read from data buffer
 *
 * !!Note data must first be shifted from memory array into internal data buffer and then can be read!!
 * */

HAL_StatusTypeDef MEM_READPAGE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){ //Read one 2KiB page. Data will be put into internal buffer which can then be read. Wait at least tDR or until busy bit is clear
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08c      	sub	sp, #48	; 0x30
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60ba      	str	r2, [r7, #8]
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	4603      	mov	r3, r0
 80025c4:	81fb      	strh	r3, [r7, #14]
 80025c6:	460b      	mov	r3, r1
 80025c8:	81bb      	strh	r3, [r7, #12]
	uint8_t transaction[]={READ_PAGE, DUMMY, page_addr >> 8, page_addr};
 80025ca:	2313      	movs	r3, #19
 80025cc:	753b      	strb	r3, [r7, #20]
 80025ce:	2300      	movs	r3, #0
 80025d0:	757b      	strb	r3, [r7, #21]
 80025d2:	89fb      	ldrh	r3, [r7, #14]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	75bb      	strb	r3, [r7, #22]
 80025dc:	89fb      	ldrh	r3, [r7, #14]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	75fb      	strb	r3, [r7, #23]
	uint8_t transaction_size = sizeof(transaction)/sizeof(transaction[0]);
 80025e2:	2304      	movs	r3, #4
 80025e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t* read_command = malloc(bytes+transaction_size); //Must allocate here since array may be too big for FreeRTOS task stack
 80025e8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4413      	add	r3, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f00e fd73 	bl	80110dc <malloc>
 80025f6:	4603      	mov	r3, r0
 80025f8:	61fb      	str	r3, [r7, #28]
	uint8_t* rec_data = malloc(bytes+transaction_size);
 80025fa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f00e fd6a 	bl	80110dc <malloc>
 8002608:	4603      	mov	r3, r0
 800260a:	61bb      	str	r3, [r7, #24]

	memset(read_command, 0, bytes+transaction_size);
 800260c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4413      	add	r3, r2
 8002614:	461a      	mov	r2, r3
 8002616:	2100      	movs	r1, #0
 8002618:	69f8      	ldr	r0, [r7, #28]
 800261a:	f00e fd7d 	bl	8011118 <memset>
	read_command[0]=READ_BUF;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	2203      	movs	r2, #3
 8002622:	701a      	strb	r2, [r3, #0]
	read_command[1]= col_addr>>8;
 8002624:	89bb      	ldrh	r3, [r7, #12]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	b29a      	uxth	r2, r3
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3301      	adds	r3, #1
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	701a      	strb	r2, [r3, #0]
	read_command[2] = col_addr;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3302      	adds	r3, #2
 8002636:	89ba      	ldrh	r2, [r7, #12]
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	701a      	strb	r2, [r3, #0]
	read_command[3] = DUMMY;
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	3303      	adds	r3, #3
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002644:	2200      	movs	r2, #0
 8002646:	f44f 7180 	mov.w	r1, #256	; 0x100
 800264a:	4842      	ldr	r0, [pc, #264]	; (8002754 <MEM_READPAGE+0x19c>)
 800264c:	f003 f894 	bl	8005778 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, transaction, 4, 100)!=HAL_OK){ //load data to internal buffer
 8002650:	f107 0114 	add.w	r1, r7, #20
 8002654:	2364      	movs	r3, #100	; 0x64
 8002656:	2204      	movs	r2, #4
 8002658:	483f      	ldr	r0, [pc, #252]	; (8002758 <MEM_READPAGE+0x1a0>)
 800265a:	f006 f838 	bl	80086ce <HAL_SPI_Transmit>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00d      	beq.n	8002680 <MEM_READPAGE+0xc8>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002664:	2201      	movs	r2, #1
 8002666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800266a:	483a      	ldr	r0, [pc, #232]	; (8002754 <MEM_READPAGE+0x19c>)
 800266c:	f003 f884 	bl	8005778 <HAL_GPIO_WritePin>
		free(read_command);
 8002670:	69f8      	ldr	r0, [r7, #28]
 8002672:	f00e fd3b 	bl	80110ec <free>
		free(rec_data);
 8002676:	69b8      	ldr	r0, [r7, #24]
 8002678:	f00e fd38 	bl	80110ec <free>
		return(HAL_ERROR);
 800267c:	2301      	movs	r3, #1
 800267e:	e064      	b.n	800274a <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002680:	2201      	movs	r2, #1
 8002682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002686:	4833      	ldr	r0, [pc, #204]	; (8002754 <MEM_READPAGE+0x19c>)
 8002688:	f003 f876 	bl	8005778 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until BUSY bit is cleared
 800268c:	bf00      	nop
 800268e:	20c0      	movs	r0, #192	; 0xc0
 8002690:	f7ff fdf6 	bl	8002280 <STAT_READ>
 8002694:	4603      	mov	r3, r0
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b01      	cmp	r3, #1
 800269c:	d0f7      	beq.n	800268e <MEM_READPAGE+0xd6>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800269e:	2200      	movs	r2, #0
 80026a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026a4:	482b      	ldr	r0, [pc, #172]	; (8002754 <MEM_READPAGE+0x19c>)
 80026a6:	f003 f867 	bl	8005778 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, read_command, rec_data, bytes+transaction_size, 100)!=HAL_OK){ //Send command to flush buffer to memory array
 80026aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	4413      	add	r3, r2
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2264      	movs	r2, #100	; 0x64
 80026ba:	9200      	str	r2, [sp, #0]
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	69f9      	ldr	r1, [r7, #28]
 80026c0:	4825      	ldr	r0, [pc, #148]	; (8002758 <MEM_READPAGE+0x1a0>)
 80026c2:	f006 f940 	bl	8008946 <HAL_SPI_TransmitReceive>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00d      	beq.n	80026e8 <MEM_READPAGE+0x130>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80026cc:	2201      	movs	r2, #1
 80026ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026d2:	4820      	ldr	r0, [pc, #128]	; (8002754 <MEM_READPAGE+0x19c>)
 80026d4:	f003 f850 	bl	8005778 <HAL_GPIO_WritePin>
		free(read_command);
 80026d8:	69f8      	ldr	r0, [r7, #28]
 80026da:	f00e fd07 	bl	80110ec <free>
		free(rec_data);
 80026de:	69b8      	ldr	r0, [r7, #24]
 80026e0:	f00e fd04 	bl	80110ec <free>
		return(HAL_ERROR);
 80026e4:	2301      	movs	r3, #1
 80026e6:	e030      	b.n	800274a <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80026e8:	2201      	movs	r2, #1
 80026ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026ee:	4819      	ldr	r0, [pc, #100]	; (8002754 <MEM_READPAGE+0x19c>)
 80026f0:	f003 f842 	bl	8005778 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 80026f4:	bf00      	nop
 80026f6:	20c0      	movs	r0, #192	; 0xc0
 80026f8:	f7ff fdc2 	bl	8002280 <STAT_READ>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b01      	cmp	r3, #1
 8002704:	d0f7      	beq.n	80026f6 <MEM_READPAGE+0x13e>

	if (bytes == 1) {
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d104      	bne.n	8002716 <MEM_READPAGE+0x15e>
		*data = rec_data[4];
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	791a      	ldrb	r2, [r3, #4]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	701a      	strb	r2, [r3, #0]
 8002714:	e012      	b.n	800273c <MEM_READPAGE+0x184>
	} else {
		for(int i = 0; i < bytes; i++){
 8002716:	2300      	movs	r3, #0
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
 800271a:	e00b      	b.n	8002734 <MEM_READPAGE+0x17c>
				data[i] = rec_data[i+4]; //+4 as first four elements of rec_data are meaningless
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	3304      	adds	r3, #4
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	441a      	add	r2, r3
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	68b9      	ldr	r1, [r7, #8]
 8002728:	440b      	add	r3, r1
 800272a:	7812      	ldrb	r2, [r2, #0]
 800272c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < bytes; i++){
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	3301      	adds	r3, #1
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	429a      	cmp	r2, r3
 800273a:	d8ef      	bhi.n	800271c <MEM_READPAGE+0x164>
		}
	}
	free(read_command);
 800273c:	69f8      	ldr	r0, [r7, #28]
 800273e:	f00e fcd5 	bl	80110ec <free>
	free(rec_data);
 8002742:	69b8      	ldr	r0, [r7, #24]
 8002744:	f00e fcd2 	bl	80110ec <free>
	return(HAL_OK);
 8002748:	2300      	movs	r3, #0

}
 800274a:	4618      	mov	r0, r3
 800274c:	3728      	adds	r7, #40	; 0x28
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40020000 	.word	0x40020000
 8002758:	20000804 	.word	0x20000804

0800275c <mem_find_free_block>:
/**
 * Find the next free/empty block
 *
 * @return address of free block or -1 if no blocks available
 * */
int mem_find_free_block(void) {
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]
 8002766:	e016      	b.n	8002796 <mem_find_free_block+0x3a>
		uint8_t first_byte;
		if (MEM_READPAGE(i * BLOCK_PAGECOUNT, 0x0000, &first_byte, 1) != HAL_OK) {
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	b29b      	uxth	r3, r3
 800276c:	019b      	lsls	r3, r3, #6
 800276e:	b298      	uxth	r0, r3
 8002770:	1cfa      	adds	r2, r7, #3
 8002772:	2301      	movs	r3, #1
 8002774:	2100      	movs	r1, #0
 8002776:	f7ff ff1f 	bl	80025b8 <MEM_READPAGE>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <mem_find_free_block+0x2a>
			return -1;
 8002780:	f04f 33ff 	mov.w	r3, #4294967295
 8002784:	e00d      	b.n	80027a2 <mem_find_free_block+0x46>
		}

		if (first_byte == 0xFF) {
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	2bff      	cmp	r3, #255	; 0xff
 800278a:	d101      	bne.n	8002790 <mem_find_free_block+0x34>
			return i;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	e008      	b.n	80027a2 <mem_find_free_block+0x46>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3301      	adds	r3, #1
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279c:	dbe4      	blt.n	8002768 <mem_find_free_block+0xc>
		}
	}
	return -1;
 800279e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_GPIO_EXTI_Callback>:

/****************************************Button Interrupt Handler**************************************
 * Interrupt is triggered on falling (button pressed) and rising (button released) edges. On release the
 * value of timer 3 is checked to see if the time elapsed makes the press a short or long press
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	80fb      	strh	r3, [r7, #6]
	uint16_t tim_val = __HAL_TIM_GET_COUNTER(&htim3);
 80027b6:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <HAL_GPIO_EXTI_Callback+0x78>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	81fb      	strh	r3, [r7, #14]
	uint8_t button_state = NO_PRESS;
 80027be:	2300      	movs	r3, #0
 80027c0:	737b      	strb	r3, [r7, #13]

	if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1) && (tim_val > 0)) {
 80027c2:	2102      	movs	r1, #2
 80027c4:	4818      	ldr	r0, [pc, #96]	; (8002828 <HAL_GPIO_EXTI_Callback+0x7c>)
 80027c6:	f002 ffbf 	bl	8005748 <HAL_GPIO_ReadPin>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d11b      	bne.n	8002808 <HAL_GPIO_EXTI_Callback+0x5c>
 80027d0:	89fb      	ldrh	r3, [r7, #14]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d018      	beq.n	8002808 <HAL_GPIO_EXTI_Callback+0x5c>
		HAL_TIM_Base_Stop(&htim3);
 80027d6:	4813      	ldr	r0, [pc, #76]	; (8002824 <HAL_GPIO_EXTI_Callback+0x78>)
 80027d8:	f006 fbcc 	bl	8008f74 <HAL_TIM_Base_Stop>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <HAL_GPIO_EXTI_Callback+0x78>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2200      	movs	r2, #0
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24

		if (tim_val > LONG_PRESS_THRESH) {
 80027e4:	89fb      	ldrh	r3, [r7, #14]
 80027e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027ea:	d902      	bls.n	80027f2 <HAL_GPIO_EXTI_Callback+0x46>
			button_state = LONG_PRESS;
 80027ec:	2301      	movs	r3, #1
 80027ee:	737b      	strb	r3, [r7, #13]
 80027f0:	e001      	b.n	80027f6 <HAL_GPIO_EXTI_Callback+0x4a>
		} else {
			button_state = SHORT_PRESS;
 80027f2:	2302      	movs	r3, #2
 80027f4:	737b      	strb	r3, [r7, #13]
		}
		xQueueSendFromISR(UserInputHandle, &button_state, 0);
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <HAL_GPIO_EXTI_Callback+0x80>)
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	f107 010d 	add.w	r1, r7, #13
 80027fe:	2300      	movs	r3, #0
 8002800:	2200      	movs	r2, #0
 8002802:	f00b fca1 	bl	800e148 <xQueueGenericSendFromISR>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
		HAL_TIM_Base_Start(&htim3);
	}
}
 8002806:	e009      	b.n	800281c <HAL_GPIO_EXTI_Callback+0x70>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
 8002808:	2102      	movs	r1, #2
 800280a:	4807      	ldr	r0, [pc, #28]	; (8002828 <HAL_GPIO_EXTI_Callback+0x7c>)
 800280c:	f002 ff9c 	bl	8005748 <HAL_GPIO_ReadPin>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d102      	bne.n	800281c <HAL_GPIO_EXTI_Callback+0x70>
		HAL_TIM_Base_Start(&htim3);
 8002816:	4803      	ldr	r0, [pc, #12]	; (8002824 <HAL_GPIO_EXTI_Callback+0x78>)
 8002818:	f006 fb52 	bl	8008ec0 <HAL_TIM_Base_Start>
}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	200008a4 	.word	0x200008a4
 8002828:	40020000 	.word	0x40020000
 800282c:	20000920 	.word	0x20000920

08002830 <cmd_ls>:

/**
 * List all files currently stored on device
 * @return CMD_OK if command was successfully executed
 * */
CMD_StatusTypeDef cmd_ls () {
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
	uint32_t file_count = get_number_files_all();
 8002836:	f001 ff00 	bl	800463a <get_number_files_all>
 800283a:	60b8      	str	r0, [r7, #8]
	char** file_names = malloc(file_count * sizeof(char*));
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4618      	mov	r0, r3
 8002842:	f00e fc4b 	bl	80110dc <malloc>
 8002846:	4603      	mov	r3, r0
 8002848:	607b      	str	r3, [r7, #4]
	if (get_all_files(file_names) != RFS_OK) {
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f001 ff5d 	bl	800470a <get_all_files>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <cmd_ls+0x2a>
		return CMD_LS_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e018      	b.n	800288c <cmd_ls+0x5c>
	}

	for (int i = 0; i < file_count; i++) {
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	e00b      	b.n	8002878 <cmd_ls+0x48>
		printf("\n\r%s.rfid", file_names[i]);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	4413      	add	r3, r2
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4619      	mov	r1, r3
 800286c:	4809      	ldr	r0, [pc, #36]	; (8002894 <cmd_ls+0x64>)
 800286e:	f00e fd51 	bl	8011314 <iprintf>
	for (int i = 0; i < file_count; i++) {
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3301      	adds	r3, #1
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	429a      	cmp	r2, r3
 800287e:	d8ef      	bhi.n	8002860 <cmd_ls+0x30>
	}
	free_filenames(file_names, file_count);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4619      	mov	r1, r3
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f001 ffcd 	bl	8004824 <free_filenames>
	return CMD_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	08012a54 	.word	0x08012a54

08002898 <cmd_rm>:
/**
 * Remove a file
 * @param arg - File name to remove
 * @return CMD_OK if file was successfully removed
 * */
CMD_StatusTypeDef cmd_rm(char* arg) {
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	char** file_name_split = cmd_split(arg, '.'); //Split into name and extension
 80028a0:	212e      	movs	r1, #46	; 0x2e
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fac7 	bl	8002e36 <cmd_split>
 80028a8:	60f8      	str	r0, [r7, #12]

	if ((strcmp(file_name_split[1], "rfid") != 0)) {
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	3304      	adds	r3, #4
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4915      	ldr	r1, [pc, #84]	; (8002908 <cmd_rm+0x70>)
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd fc94 	bl	80001e0 <strcmp>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <cmd_rm+0x3a>
		printf("\n\rfile not found: %s", arg);
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4812      	ldr	r0, [pc, #72]	; (800290c <cmd_rm+0x74>)
 80028c2:	f00e fd27 	bl	8011314 <iprintf>
		free_tokens(file_name_split, 2);
 80028c6:	2102      	movs	r1, #2
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 fb65 	bl	8002f98 <free_tokens>
		return CMD_RM_ERROR;
 80028ce:	2302      	movs	r3, #2
 80028d0:	e016      	b.n	8002900 <cmd_rm+0x68>
	}
	if (remove_card_byname(file_name_split[0]) != RFS_OK) {
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f001 ffcf 	bl	800487a <remove_card_byname>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <cmd_rm+0x5e>
		printf("\n\rfile not found: %s", arg);
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4809      	ldr	r0, [pc, #36]	; (800290c <cmd_rm+0x74>)
 80028e6:	f00e fd15 	bl	8011314 <iprintf>
		free_tokens(file_name_split, 2);
 80028ea:	2102      	movs	r1, #2
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fb53 	bl	8002f98 <free_tokens>
		return CMD_RM_ERROR;
 80028f2:	2302      	movs	r3, #2
 80028f4:	e004      	b.n	8002900 <cmd_rm+0x68>
	}
	free_tokens(file_name_split, 2);
 80028f6:	2102      	movs	r1, #2
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fb4d 	bl	8002f98 <free_tokens>
	return CMD_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	08012a60 	.word	0x08012a60
 800290c:	08012a68 	.word	0x08012a68

08002910 <cmd_pg>:
/**
 * Upload/program a file into the device
 * @param tokens - Arguments from user
 * @return CMD_OK if file was successfully uploaded
 * */
CMD_StatusTypeDef cmd_pg(char** args, uint8_t size) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b08c      	sub	sp, #48	; 0x30
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	70fb      	strb	r3, [r7, #3]
	Card to_program;
	char* name;

	if (strcmp(args[1], "--help") == 0) {
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	494b      	ldr	r1, [pc, #300]	; (8002a50 <cmd_pg+0x140>)
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd fc5b 	bl	80001e0 <strcmp>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d103      	bne.n	8002938 <cmd_pg+0x28>
		pg_show_help();
 8002930:	f000 fb50 	bl	8002fd4 <pg_show_help>
		return CMD_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	e087      	b.n	8002a48 <cmd_pg+0x138>
	}

	for (int i = 1; i < size; i++) {
 8002938:	2301      	movs	r3, #1
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
 800293c:	e073      	b.n	8002a26 <cmd_pg+0x116>

		if (strcmp(args[i], "-name") == 0) {
 800293e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4942      	ldr	r1, [pc, #264]	; (8002a54 <cmd_pg+0x144>)
 800294a:	4618      	mov	r0, r3
 800294c:	f7fd fc48 	bl	80001e0 <strcmp>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <cmd_pg+0x54>
			name = args[i + 1];
 8002956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002958:	3301      	adds	r3, #1
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	4413      	add	r3, r2
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		if (strcmp(args[i], "-uid") == 0) {
 8002964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4413      	add	r3, r2
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	493a      	ldr	r1, [pc, #232]	; (8002a58 <cmd_pg+0x148>)
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fc35 	bl	80001e0 <strcmp>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d118      	bne.n	80029ae <cmd_pg+0x9e>
			pg_parse_str(&to_program.uid, args[i + 1]);
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	3301      	adds	r3, #1
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	f107 030c 	add.w	r3, r7, #12
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fb4c 	bl	800302c <pg_parse_str>
			to_program.uidsize = get_token_count(args[i + 1], ',');
 8002994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002996:	3301      	adds	r3, #1
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fa89 	bl	8002eba <get_token_count>
 80029a8:	4603      	mov	r3, r0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	743b      	strb	r3, [r7, #16]
		}

		if (strcmp(args[i], "-mem") == 0) {
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	4413      	add	r3, r2
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4928      	ldr	r1, [pc, #160]	; (8002a5c <cmd_pg+0x14c>)
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fd fc10 	bl	80001e0 <strcmp>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d119      	bne.n	80029fa <cmd_pg+0xea>
			pg_parse_str(&to_program.contents, args[i + 1]);
 80029c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c8:	3301      	adds	r3, #1
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4413      	add	r3, r2
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	f107 030c 	add.w	r3, r7, #12
 80029d6:	3314      	adds	r3, #20
 80029d8:	4611      	mov	r1, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fb26 	bl	800302c <pg_parse_str>
			to_program.contents_size = get_token_count(args[i + 1], ',');
 80029e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e2:	3301      	adds	r3, #1
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fa63 	bl	8002eba <get_token_count>
 80029f4:	4603      	mov	r3, r0
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		}

		if (strcmp(args[i], "-type") == 0) {
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4916      	ldr	r1, [pc, #88]	; (8002a60 <cmd_pg+0x150>)
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fd fbea 	bl	80001e0 <strcmp>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <cmd_pg+0x110>
			to_program.type = args[i + 1];
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	3301      	adds	r3, #1
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	61bb      	str	r3, [r7, #24]
	for (int i = 1; i < size; i++) {
 8002a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a22:	3301      	adds	r3, #1
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	db87      	blt.n	800293e <cmd_pg+0x2e>
		}

	}
	to_program.read_protected = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	773b      	strb	r3, [r7, #28]
	enter_card(&to_program, mem_find_free_block(), name);
 8002a32:	f7ff fe93 	bl	800275c <mem_find_free_block>
 8002a36:	4603      	mov	r3, r0
 8002a38:	b299      	uxth	r1, r3
 8002a3a:	f107 030c 	add.w	r3, r7, #12
 8002a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a40:	4618      	mov	r0, r3
 8002a42:	f001 fba6 	bl	8004192 <enter_card>
	return CMD_OK;
 8002a46:	2300      	movs	r3, #0

}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3730      	adds	r7, #48	; 0x30
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	08012a80 	.word	0x08012a80
 8002a54:	08012a88 	.word	0x08012a88
 8002a58:	08012a90 	.word	0x08012a90
 8002a5c:	08012a98 	.word	0x08012a98
 8002a60:	08012aa0 	.word	0x08012aa0

08002a64 <cmd_cat>:
/**
 * Print contents of file (cat)
 * @param file - File name input from user
 * @return CMD_OK if file was successfully printed to terminal
 * */
CMD_StatusTypeDef cmd_cat(char* file) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
	char** file_no_ext = cmd_split(file, '.');
 8002a6c:	212e      	movs	r1, #46	; 0x2e
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f9e1 	bl	8002e36 <cmd_split>
 8002a74:	6178      	str	r0, [r7, #20]
	int block_num = get_file_entry(file_no_ext[0]);
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f001 fe9e 	bl	80047bc <get_file_entry>
 8002a80:	6138      	str	r0, [r7, #16]
	Card* toprint = read_card_entry(block_num);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 fc3b 	bl	8004302 <read_card_entry>
 8002a8c:	60f8      	str	r0, [r7, #12]

	if (toprint == NULL) {
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <cmd_cat+0x3c>
		free_tokens(file_no_ext, 2);
 8002a94:	2102      	movs	r1, #2
 8002a96:	6978      	ldr	r0, [r7, #20]
 8002a98:	f000 fa7e 	bl	8002f98 <free_tokens>
		return CMD_CAT_ERROR;
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	e00e      	b.n	8002abe <cmd_cat+0x5a>
	}

	printf("\n\r"); //setup new line
 8002aa0:	4809      	ldr	r0, [pc, #36]	; (8002ac8 <cmd_cat+0x64>)
 8002aa2:	f00e fc37 	bl	8011314 <iprintf>
	dump_card_serial(toprint, UL_PAGESIZE);
 8002aa6:	2104      	movs	r1, #4
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f7fe fd21 	bl	80014f0 <dump_card_serial>
	free_tokens(file_no_ext, 2);
 8002aae:	2102      	movs	r1, #2
 8002ab0:	6978      	ldr	r0, [r7, #20]
 8002ab2:	f000 fa71 	bl	8002f98 <free_tokens>
	free_card(toprint);
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f001 fd7c 	bl	80045b4 <free_card>
	return CMD_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	08012aa8 	.word	0x08012aa8

08002acc <cmd_mod>:
 * Modify command (Modify contents of exist file)
 * @param args - Arguments passed by user
 * @param size - Number of arguments
 * @return CMD_OK if file was successfully modified
 * */
CMD_StatusTypeDef cmd_mod(char** args, uint32_t size) {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
	int page_to_modify = -1;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	61fb      	str	r3, [r7, #28]
	uint8_t* data = NULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
	char* new_name = NULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61bb      	str	r3, [r7, #24]


	if (strcmp(args[1], "--help") == 0) {
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	494c      	ldr	r1, [pc, #304]	; (8002c1c <cmd_mod+0x150>)
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fb77 	bl	80001e0 <strcmp>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d103      	bne.n	8002b00 <cmd_mod+0x34>
		mod_show_help();
 8002af8:	f000 fa84 	bl	8003004 <mod_show_help>
		return CMD_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e088      	b.n	8002c12 <cmd_mod+0x146>
	}

	char** file_and_ext = cmd_split(args[1], '.');
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	212e      	movs	r1, #46	; 0x2e
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 f994 	bl	8002e36 <cmd_split>
 8002b0e:	6138      	str	r0, [r7, #16]

	for (int i = 1; i < size; i++) {
 8002b10:	2301      	movs	r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	e04c      	b.n	8002bb0 <cmd_mod+0xe4>

		if(strcmp(args[i], "-page") == 0) {
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	493f      	ldr	r1, [pc, #252]	; (8002c20 <cmd_mod+0x154>)
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd fb5c 	bl	80001e0 <strcmp>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d109      	bne.n	8002b42 <cmd_mod+0x76>
			page_to_modify = atoi(args[i + 1]);
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	3301      	adds	r3, #1
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	4413      	add	r3, r2
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f00e fa98 	bl	8011070 <atoi>
 8002b40:	61f8      	str	r0, [r7, #28]
		}

		if (strcmp(args[i], "-data") == 0) {
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4935      	ldr	r1, [pc, #212]	; (8002c24 <cmd_mod+0x158>)
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd fb46 	bl	80001e0 <strcmp>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10b      	bne.n	8002b72 <cmd_mod+0xa6>
			pg_parse_str(&data, args[i + 1]);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	f107 030c 	add.w	r3, r7, #12
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fa5d 	bl	800302c <pg_parse_str>
		}

		if (strcmp(args[i], "-name") == 0) {
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	4413      	add	r3, r2
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	492a      	ldr	r1, [pc, #168]	; (8002c28 <cmd_mod+0x15c>)
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd fb2e 	bl	80001e0 <strcmp>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10f      	bne.n	8002baa <cmd_mod+0xde>
			str_toupper(args[i + 1]);
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	4413      	add	r3, r2
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 f84c 	bl	8002c34 <str_toupper>
			new_name = args[i + 1];
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	61bb      	str	r3, [r7, #24]
	for (int i = 1; i < size; i++) {
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	3301      	adds	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d8ae      	bhi.n	8002b16 <cmd_mod+0x4a>
		}
	}

	if ((data != NULL) && (page_to_modify == -1)) {
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00c      	beq.n	8002bd8 <cmd_mod+0x10c>
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc4:	d108      	bne.n	8002bd8 <cmd_mod+0x10c>
		printf("\n\rplease specify the page you wish to modify");
 8002bc6:	4819      	ldr	r0, [pc, #100]	; (8002c2c <cmd_mod+0x160>)
 8002bc8:	f00e fba4 	bl	8011314 <iprintf>
		free_filenames(file_and_ext, 2);
 8002bcc:	2102      	movs	r1, #2
 8002bce:	6938      	ldr	r0, [r7, #16]
 8002bd0:	f001 fe28 	bl	8004824 <free_filenames>
		return CMD_MOD_ERROR;
 8002bd4:	2305      	movs	r3, #5
 8002bd6:	e01c      	b.n	8002c12 <cmd_mod+0x146>
	}

	if ((data == NULL) && (page_to_modify != -1)) {
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10c      	bne.n	8002bf8 <cmd_mod+0x12c>
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d008      	beq.n	8002bf8 <cmd_mod+0x12c>
		printf("\n\rplease specify the data you wish to input");
 8002be6:	4812      	ldr	r0, [pc, #72]	; (8002c30 <cmd_mod+0x164>)
 8002be8:	f00e fb94 	bl	8011314 <iprintf>
		free_filenames(file_and_ext, 2);
 8002bec:	2102      	movs	r1, #2
 8002bee:	6938      	ldr	r0, [r7, #16]
 8002bf0:	f001 fe18 	bl	8004824 <free_filenames>
		return CMD_MOD_ERROR;
 8002bf4:	2305      	movs	r3, #5
 8002bf6:	e00c      	b.n	8002c12 <cmd_mod+0x146>
	}

	if(modify_card(file_and_ext[0], page_to_modify, data, new_name) != RFS_OK) { //args[1] will be file name
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	69f9      	ldr	r1, [r7, #28]
 8002c02:	f001 fe71 	bl	80048e8 <modify_card>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <cmd_mod+0x144>
		return CMD_MOD_ERROR;
 8002c0c:	2305      	movs	r3, #5
 8002c0e:	e000      	b.n	8002c12 <cmd_mod+0x146>
	}
	return CMD_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3720      	adds	r7, #32
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	08012a80 	.word	0x08012a80
 8002c20:	08012aac 	.word	0x08012aac
 8002c24:	08012ab4 	.word	0x08012ab4
 8002c28:	08012a88 	.word	0x08012a88
 8002c2c:	08012abc 	.word	0x08012abc
 8002c30:	08012aec 	.word	0x08012aec

08002c34 <str_toupper>:

/**
 * Convert string to upper case
 * @param str - String to convert
 * */
void str_toupper(char* str) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(str); i++) {
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	e019      	b.n	8002c76 <str_toupper+0x42>
		str[i] = toupper(str[i]);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4413      	add	r3, r2
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	72fb      	strb	r3, [r7, #11]
 8002c4c:	7afb      	ldrb	r3, [r7, #11]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	4a0f      	ldr	r2, [pc, #60]	; (8002c90 <str_toupper+0x5c>)
 8002c52:	4413      	add	r3, r2
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d102      	bne.n	8002c64 <str_toupper+0x30>
 8002c5e:	7afb      	ldrb	r3, [r7, #11]
 8002c60:	3b20      	subs	r3, #32
 8002c62:	e000      	b.n	8002c66 <str_toupper+0x32>
 8002c64:	7afb      	ldrb	r3, [r7, #11]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	440a      	add	r2, r1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < strlen(str); i++) {
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3301      	adds	r3, #1
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fd fabc 	bl	80001f4 <strlen>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d8de      	bhi.n	8002c42 <str_toupper+0xe>
	}
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	08013a24 	.word	0x08013a24

08002c94 <cmd_parse>:
/**
 * Parse a string representation of command
 * @param cmd - String representation of command e.g. ls
 * @return CMD_OK if command was successfully parsed and executed
 * */
CMD_StatusTypeDef cmd_parse(char* cmd) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	char** tokens = cmd_split(cmd, ' ');
 8002c9c:	2120      	movs	r1, #32
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f8c9 	bl	8002e36 <cmd_split>
 8002ca4:	60f8      	str	r0, [r7, #12]
	uint32_t count = get_token_count(cmd, ' ');
 8002ca6:	2120      	movs	r1, #32
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f906 	bl	8002eba <get_token_count>
 8002cae:	60b8      	str	r0, [r7, #8]

	if (strcmp(tokens[0], "ls") == 0) {
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4934      	ldr	r1, [pc, #208]	; (8002d88 <cmd_parse+0xf4>)
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fa92 	bl	80001e0 <strcmp>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d102      	bne.n	8002cc8 <cmd_parse+0x34>

		cmd_ls();
 8002cc2:	f7ff fdb5 	bl	8002830 <cmd_ls>
 8002cc6:	e051      	b.n	8002d6c <cmd_parse+0xd8>

	} else if (strcmp(tokens[0], "clear") == 0) {
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	492f      	ldr	r1, [pc, #188]	; (8002d8c <cmd_parse+0xf8>)
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fd fa86 	bl	80001e0 <strcmp>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <cmd_parse+0x54>

		clear_terminal();
 8002cda:	f002 fa25 	bl	8005128 <clear_terminal>
		move_terminal_cursor(0, 0);
 8002cde:	2100      	movs	r1, #0
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f002 fa11 	bl	8005108 <move_terminal_cursor>
 8002ce6:	e041      	b.n	8002d6c <cmd_parse+0xd8>

	} else if (strcmp(tokens[0], "rm") == 0) {
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4928      	ldr	r1, [pc, #160]	; (8002d90 <cmd_parse+0xfc>)
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fa76 	bl	80001e0 <strcmp>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <cmd_parse+0x74>

		cmd_rm(tokens[1]);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fdc9 	bl	8002898 <cmd_rm>
 8002d06:	e031      	b.n	8002d6c <cmd_parse+0xd8>

	} else if (strcmp(tokens[0], "pg") == 0) {
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4921      	ldr	r1, [pc, #132]	; (8002d94 <cmd_parse+0x100>)
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd fa66 	bl	80001e0 <strcmp>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <cmd_parse+0x94>

		cmd_pg(tokens, count);
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	4619      	mov	r1, r3
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f7ff fdf5 	bl	8002910 <cmd_pg>
 8002d26:	e021      	b.n	8002d6c <cmd_parse+0xd8>

	} else if (strcmp(tokens[0], "cat") == 0) {
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	491a      	ldr	r1, [pc, #104]	; (8002d98 <cmd_parse+0x104>)
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fa56 	bl	80001e0 <strcmp>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <cmd_parse+0xb4>

		cmd_cat(tokens[1]);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fe8f 	bl	8002a64 <cmd_cat>
 8002d46:	e011      	b.n	8002d6c <cmd_parse+0xd8>

	} else if (strcmp(tokens[0], "mod") == 0) {
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4913      	ldr	r1, [pc, #76]	; (8002d9c <cmd_parse+0x108>)
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fa46 	bl	80001e0 <strcmp>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d104      	bne.n	8002d64 <cmd_parse+0xd0>

		cmd_mod(tokens, count);
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f7ff feb5 	bl	8002acc <cmd_mod>
 8002d62:	e003      	b.n	8002d6c <cmd_parse+0xd8>

	} else {
		printf("\n\rcommand not found: %s", cmd);
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	480e      	ldr	r0, [pc, #56]	; (8002da0 <cmd_parse+0x10c>)
 8002d68:	f00e fad4 	bl	8011314 <iprintf>
	}

	free_tokens(tokens, get_token_count(cmd, ' '));
 8002d6c:	2120      	movs	r1, #32
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f8a3 	bl	8002eba <get_token_count>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4619      	mov	r1, r3
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f90d 	bl	8002f98 <free_tokens>
	return CMD_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	08012b18 	.word	0x08012b18
 8002d8c:	08012b1c 	.word	0x08012b1c
 8002d90:	08012b24 	.word	0x08012b24
 8002d94:	08012b28 	.word	0x08012b28
 8002d98:	08012b2c 	.word	0x08012b2c
 8002d9c:	08012b30 	.word	0x08012b30
 8002da0:	08012b34 	.word	0x08012b34

08002da4 <cmd_build>:
/**
 * Build a string from user input characters
 * @param currnet - Current state of string
 * @param input - User input character to be concatenated
 * */
void cmd_build(char** current, char input) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	70fb      	strb	r3, [r7, #3]
	uint8_t length;

	if (*current == NULL) {
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <cmd_build+0x1a>
		length = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	73fb      	strb	r3, [r7, #15]
 8002dbc:	e006      	b.n	8002dcc <cmd_build+0x28>
	} else {
		length = strlen(*current);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd fa16 	bl	80001f4 <strlen>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	73fb      	strb	r3, [r7, #15]
	}

	if ((((uint8_t) input == 0x7F)) && (length > 0)) { //Backspace
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	2b7f      	cmp	r3, #127	; 0x7f
 8002dd0:	d114      	bne.n	8002dfc <cmd_build+0x58>
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d011      	beq.n	8002dfc <cmd_build+0x58>
		*current = realloc(*current, length);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	7bfa      	ldrb	r2, [r7, #15]
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f00e fb25 	bl	8011430 <realloc>
 8002de6:	4602      	mov	r2, r0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	601a      	str	r2, [r3, #0]
		(*current)[length - 1] = '\0';
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	e018      	b.n	8002e2e <cmd_build+0x8a>
	} else {
		*current = realloc(*current, length + 2);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	3302      	adds	r3, #2
 8002e04:	4619      	mov	r1, r3
 8002e06:	4610      	mov	r0, r2
 8002e08:	f00e fb12 	bl	8011430 <realloc>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	601a      	str	r2, [r3, #0]
		(*current)[length] = input;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	4413      	add	r3, r2
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	701a      	strb	r2, [r3, #0]
		(*current)[length + 1] = '\0';
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	3301      	adds	r3, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
	}

}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <cmd_split>:
 * Split a command into tokens
 * @param cmd - Command to split
 * @param split - Character to split on
 * @return pointer to tokens
 * */
char** cmd_split(char* cmd, char split) {
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b086      	sub	sp, #24
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	70fb      	strb	r3, [r7, #3]
	uint32_t token_count = get_token_count(cmd, split);
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	4619      	mov	r1, r3
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f837 	bl	8002eba <get_token_count>
 8002e4c:	60f8      	str	r0, [r7, #12]
	uint32_t string_index = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]

	char** tokens = calloc(token_count, sizeof(char*));
 8002e52:	2104      	movs	r1, #4
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f00e f90f 	bl	8011078 <calloc>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < token_count; i++) {
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	e021      	b.n	8002ea8 <cmd_split+0x72>
		while ((cmd[string_index] != split) && (string_index < strlen(cmd))) {
			cmd_build(&(tokens[i]), cmd[string_index]);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	18d0      	adds	r0, r2, r3
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	4413      	add	r3, r2
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	4619      	mov	r1, r3
 8002e76:	f7ff ff95 	bl	8002da4 <cmd_build>
			string_index++;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	617b      	str	r3, [r7, #20]
		while ((cmd[string_index] != split) && (string_index < strlen(cmd))) {
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	4413      	add	r3, r2
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d006      	beq.n	8002e9c <cmd_split+0x66>
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fd f9b0 	bl	80001f4 <strlen>
 8002e94:	4602      	mov	r2, r0
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d3e3      	bcc.n	8002e64 <cmd_split+0x2e>
		}
		string_index++;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < token_count; i++) {
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d8e7      	bhi.n	8002e80 <cmd_split+0x4a>
	}

	return tokens;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <get_token_count>:
 * Get number of tokens in given command
 * @param cmd - Command
 * @param split - Character to split on
 * @return number of tokens within command
 * */
uint32_t get_token_count(char* cmd, char split) {
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	70fb      	strb	r3, [r7, #3]
	uint32_t count = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
	char* cmd_stripped = cmd_strip(cmd);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f821 	bl	8002f12 <cmd_strip>
 8002ed0:	60f8      	str	r0, [r7, #12]


	for(int i = 0; i <= strlen(cmd); i++) {
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	e00c      	b.n	8002ef2 <get_token_count+0x38>
		if (cmd_stripped[i] == split) {
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4413      	add	r3, r2
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d102      	bne.n	8002eec <get_token_count+0x32>
			count++;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	617b      	str	r3, [r7, #20]
	for(int i = 0; i <= strlen(cmd); i++) {
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fd f97e 	bl	80001f4 <strlen>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d2eb      	bcs.n	8002ed8 <get_token_count+0x1e>
		}
	}
	free(cmd_stripped);
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f00e f8f3 	bl	80110ec <free>
	return count + 1;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	3301      	adds	r3, #1
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <cmd_strip>:
/**
 * Strip command of leading and trailing whitespace
 * @param cmd - Command
 * @return stripped command
 * */
char* cmd_strip(char* cmd) {
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b086      	sub	sp, #24
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
	uint32_t start_index = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
	uint32_t end_index = strlen(cmd);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fd f968 	bl	80001f4 <strlen>
 8002f24:	6138      	str	r0, [r7, #16]

	while (cmd[start_index] == ' ') {
 8002f26:	e002      	b.n	8002f2e <cmd_strip+0x1c>
		start_index++;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
	while (cmd[start_index] == ' ') {
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	4413      	add	r3, r2
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	d0f6      	beq.n	8002f28 <cmd_strip+0x16>
	}

	while (cmd[end_index] == ' ') {
 8002f3a:	e002      	b.n	8002f42 <cmd_strip+0x30>
		end_index--;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	613b      	str	r3, [r7, #16]
	while (cmd[end_index] == ' ') {
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	d0f6      	beq.n	8002f3c <cmd_strip+0x2a>
	}

	char* result = malloc((end_index - start_index + 1) * sizeof(char));
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	3301      	adds	r3, #1
 8002f56:	4618      	mov	r0, r3
 8002f58:	f00e f8c0 	bl	80110dc <malloc>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	60bb      	str	r3, [r7, #8]

	for (int i = start_index; i < end_index; i++) {
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	e00a      	b.n	8002f7c <cmd_strip+0x6a>
		result[i] = cmd[i];
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	441a      	add	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	440b      	add	r3, r1
 8002f72:	7812      	ldrb	r2, [r2, #0]
 8002f74:	701a      	strb	r2, [r3, #0]
	for (int i = start_index; i < end_index; i++) {
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d8f0      	bhi.n	8002f66 <cmd_strip+0x54>
	}

	result[end_index] = '\0';
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4413      	add	r3, r2
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]
	return result;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <free_tokens>:
/**
 * Free token array
 * @param tokens - Tokens
 * @param size - Number of tokens
 * */
void free_tokens(char** tokens, uint32_t size) {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++) {
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	e00a      	b.n	8002fbe <free_tokens+0x26>
		free(tokens[i]);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f00e f89a 	bl	80110ec <free>
	for (int i = 0; i < size; i++) {
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d8f0      	bhi.n	8002fa8 <free_tokens+0x10>
	}
	free(tokens);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f00e f890 	bl	80110ec <free>
}
 8002fcc:	bf00      	nop
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <pg_show_help>:

/**
 * Show help options for pg command (Shown using pg --help)
 * */
void pg_show_help() {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
	printf("\n\r-name - Specifies file name");
 8002fd8:	4806      	ldr	r0, [pc, #24]	; (8002ff4 <pg_show_help+0x20>)
 8002fda:	f00e f99b 	bl	8011314 <iprintf>
	printf("\n\r-type - Specifies card IC type");
 8002fde:	4806      	ldr	r0, [pc, #24]	; (8002ff8 <pg_show_help+0x24>)
 8002fe0:	f00e f998 	bl	8011314 <iprintf>
	printf("\n\r-mem - Specifies contents of card (comma separated, hexadecimal)");
 8002fe4:	4805      	ldr	r0, [pc, #20]	; (8002ffc <pg_show_help+0x28>)
 8002fe6:	f00e f995 	bl	8011314 <iprintf>
	printf("\n\r-uid - Specifies card UID (comma separated, hexadecimal)");
 8002fea:	4805      	ldr	r0, [pc, #20]	; (8003000 <pg_show_help+0x2c>)
 8002fec:	f00e f992 	bl	8011314 <iprintf>
}
 8002ff0:	bf00      	nop
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	08012b4c 	.word	0x08012b4c
 8002ff8:	08012b6c 	.word	0x08012b6c
 8002ffc:	08012b90 	.word	0x08012b90
 8003000:	08012bd4 	.word	0x08012bd4

08003004 <mod_show_help>:

/**
 * Show help options for mod command (Shown using mod --help)
 * */
void mod_show_help() {
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
	printf("\n\r-page - Specifies page number to modify (Decimal)");
 8003008:	4805      	ldr	r0, [pc, #20]	; (8003020 <mod_show_help+0x1c>)
 800300a:	f00e f983 	bl	8011314 <iprintf>
	printf("\n\r-data - Speicifes data to place in page (Comma separated, hexadecimal)");
 800300e:	4805      	ldr	r0, [pc, #20]	; (8003024 <mod_show_help+0x20>)
 8003010:	f00e f980 	bl	8011314 <iprintf>
	printf("\n\r-name - Specifies a new name for file (optional)");
 8003014:	4804      	ldr	r0, [pc, #16]	; (8003028 <mod_show_help+0x24>)
 8003016:	f00e f97d 	bl	8011314 <iprintf>
}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	08012c10 	.word	0x08012c10
 8003024:	08012c44 	.word	0x08012c44
 8003028:	08012c90 	.word	0x08012c90

0800302c <pg_parse_str>:
 * Parse a comma separated string of hex values to byte array
 * @param dest - Destination array
 * @param data_str - String input of data
 * @return CMD_OK if data was successfully parsed
 * */
CMD_StatusTypeDef pg_parse_str(uint8_t** dest, char* data_str) {
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
	char** nums = cmd_split(data_str, ',');
 8003036:	212c      	movs	r1, #44	; 0x2c
 8003038:	6838      	ldr	r0, [r7, #0]
 800303a:	f7ff fefc 	bl	8002e36 <cmd_split>
 800303e:	6138      	str	r0, [r7, #16]
	uint32_t count = get_token_count(data_str, ',');
 8003040:	212c      	movs	r1, #44	; 0x2c
 8003042:	6838      	ldr	r0, [r7, #0]
 8003044:	f7ff ff39 	bl	8002eba <get_token_count>
 8003048:	60f8      	str	r0, [r7, #12]
	*dest = malloc(count * sizeof(uint8_t));
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f00e f846 	bl	80110dc <malloc>
 8003050:	4603      	mov	r3, r0
 8003052:	461a      	mov	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < count; i++) {
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	e013      	b.n	8003086 <pg_parse_str+0x5a>
		(*dest)[i] = strtol(nums[i], NULL, 16);
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4413      	add	r3, r2
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2210      	movs	r2, #16
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f00e fb83 	bl	8011778 <strtol>
 8003072:	4601      	mov	r1, r0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	4413      	add	r3, r2
 800307c:	b2ca      	uxtb	r2, r1
 800307e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < count; i++) {
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	3301      	adds	r3, #1
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	429a      	cmp	r2, r3
 800308c:	d8e7      	bhi.n	800305e <pg_parse_str+0x32>
	}

	return CMD_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <BUZZ>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void BUZZ(void){
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800309c:	2108      	movs	r1, #8
 800309e:	4806      	ldr	r0, [pc, #24]	; (80030b8 <BUZZ+0x20>)
 80030a0:	f006 f84c 	bl	800913c <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 80030a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030a8:	f002 f8c4 	bl	8005234 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80030ac:	2108      	movs	r1, #8
 80030ae:	4802      	ldr	r0, [pc, #8]	; (80030b8 <BUZZ+0x20>)
 80030b0:	f006 f8f4 	bl	800929c <HAL_TIM_PWM_Stop>
}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	2000085c 	.word	0x2000085c

080030bc <write_card>:

void write_card(Card* towrite) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	OLED_Clear();
 80030c4:	f7fe faa8 	bl	8001618 <OLED_Clear>
	MFRC_ANTON();
 80030c8:	f7fd fe1a 	bl	8000d00 <MFRC_ANTON>
	OLED_PrintCent(2, "Writing...", NORMAL);
 80030cc:	2200      	movs	r2, #0
 80030ce:	4926      	ldr	r1, [pc, #152]	; (8003168 <write_card+0xac>)
 80030d0:	2002      	movs	r0, #2
 80030d2:	f7fe fc7c 	bl	80019ce <OLED_PrintCent>
	if (UL_writecard(towrite) == PCD_NO_PICC) {
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fe f92a 	bl	8001330 <UL_writecard>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d118      	bne.n	8003114 <write_card+0x58>
		OLED_PrintCent(4, "ERROR: Couldn't find", NORMAL);
 80030e2:	2200      	movs	r2, #0
 80030e4:	4921      	ldr	r1, [pc, #132]	; (800316c <write_card+0xb0>)
 80030e6:	2004      	movs	r0, #4
 80030e8:	f7fe fc71 	bl	80019ce <OLED_PrintCent>
		OLED_PrintCent(6, "Card", NORMAL);
 80030ec:	2200      	movs	r2, #0
 80030ee:	4920      	ldr	r1, [pc, #128]	; (8003170 <write_card+0xb4>)
 80030f0:	2006      	movs	r0, #6
 80030f2:	f7fe fc6c 	bl	80019ce <OLED_PrintCent>
		MFRC_ANTOFF();
 80030f6:	f7fd fe3d 	bl	8000d74 <MFRC_ANTOFF>
		osDelay(2000);
 80030fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80030fe:	f00a fc70 	bl	800d9e2 <osDelay>
		vTaskResume(HomeHandle);
 8003102:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <write_card+0xb8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f00b fd86 	bl	800ec18 <vTaskResume>
		vTaskSuspend(NULL);
 800310c:	2000      	movs	r0, #0
 800310e:	f00b fcdb 	bl	800eac8 <vTaskSuspend>
		MFRC_ANTOFF();
		osDelay(1000);
		vTaskResume(HomeHandle);
		vTaskSuspend(NULL);
	}
}
 8003112:	e025      	b.n	8003160 <write_card+0xa4>
		MFRC_HALTA(); //Deselect card
 8003114:	f7fd ff0a 	bl	8000f2c <MFRC_HALTA>
		OLED_PrintCent(4,"Verifying...", NORMAL);
 8003118:	2200      	movs	r2, #0
 800311a:	4917      	ldr	r1, [pc, #92]	; (8003178 <write_card+0xbc>)
 800311c:	2004      	movs	r0, #4
 800311e:	f7fe fc56 	bl	80019ce <OLED_PrintCent>
		if (UL_verify(towrite) == PCD_OK) {
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fe f98e 	bl	8001444 <UL_verify>
 8003128:	4603      	mov	r3, r0
 800312a:	2bcc      	cmp	r3, #204	; 0xcc
 800312c:	d105      	bne.n	800313a <write_card+0x7e>
			OLED_PrintCent(6, "Write verified :)", NORMAL);
 800312e:	2200      	movs	r2, #0
 8003130:	4912      	ldr	r1, [pc, #72]	; (800317c <write_card+0xc0>)
 8003132:	2006      	movs	r0, #6
 8003134:	f7fe fc4b 	bl	80019ce <OLED_PrintCent>
 8003138:	e004      	b.n	8003144 <write_card+0x88>
			OLED_PrintCent(6, "COULDN'T VERIFY", NORMAL);
 800313a:	2200      	movs	r2, #0
 800313c:	4910      	ldr	r1, [pc, #64]	; (8003180 <write_card+0xc4>)
 800313e:	2006      	movs	r0, #6
 8003140:	f7fe fc45 	bl	80019ce <OLED_PrintCent>
		MFRC_ANTOFF();
 8003144:	f7fd fe16 	bl	8000d74 <MFRC_ANTOFF>
		osDelay(1000);
 8003148:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800314c:	f00a fc49 	bl	800d9e2 <osDelay>
		vTaskResume(HomeHandle);
 8003150:	4b08      	ldr	r3, [pc, #32]	; (8003174 <write_card+0xb8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f00b fd5f 	bl	800ec18 <vTaskResume>
		vTaskSuspend(NULL);
 800315a:	2000      	movs	r0, #0
 800315c:	f00b fcb4 	bl	800eac8 <vTaskSuspend>
}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	08012f38 	.word	0x08012f38
 800316c:	08012f44 	.word	0x08012f44
 8003170:	08012f5c 	.word	0x08012f5c
 8003174:	200008f8 	.word	0x200008f8
 8003178:	08012f64 	.word	0x08012f64
 800317c:	08012f74 	.word	0x08012f74
 8003180:	08012f88 	.word	0x08012f88

08003184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003188:	f002 f812 	bl	80051b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800318c:	f000 f8f6 	bl	800337c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003190:	f000 fabe 	bl	8003710 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003194:	f000 f95c 	bl	8003450 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003198:	f000 f988 	bl	80034ac <MX_SPI1_Init>
  MX_SPI2_Init();
 800319c:	f000 f9be 	bl	800351c <MX_SPI2_Init>
  MX_TIM2_Init();
 80031a0:	f000 f9f2 	bl	8003588 <MX_TIM2_Init>
  MX_TIM3_Init();
 80031a4:	f000 fa66 	bl	8003674 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80031a8:	f00a fb3e 	bl	800d828 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(Card*), &UidtoFound_attributes);
 80031ac:	4a45      	ldr	r2, [pc, #276]	; (80032c4 <main+0x140>)
 80031ae:	2104      	movs	r1, #4
 80031b0:	2001      	movs	r0, #1
 80031b2:	f00a fc31 	bl	800da18 <osMessageQueueNew>
 80031b6:	4603      	mov	r3, r0
 80031b8:	4a43      	ldr	r2, [pc, #268]	; (80032c8 <main+0x144>)
 80031ba:	6013      	str	r3, [r2, #0]

  /* creation of UserInput */
  UserInputHandle = osMessageQueueNew (1, sizeof(uint8_t), &UserInput_attributes);
 80031bc:	4a43      	ldr	r2, [pc, #268]	; (80032cc <main+0x148>)
 80031be:	2101      	movs	r1, #1
 80031c0:	2001      	movs	r0, #1
 80031c2:	f00a fc29 	bl	800da18 <osMessageQueueNew>
 80031c6:	4603      	mov	r3, r0
 80031c8:	4a41      	ldr	r2, [pc, #260]	; (80032d0 <main+0x14c>)
 80031ca:	6013      	str	r3, [r2, #0]

  /* creation of FileEntry */
  FileEntryHandle = osMessageQueueNew (1, sizeof(uint16_t), &FileEntry_attributes);
 80031cc:	4a41      	ldr	r2, [pc, #260]	; (80032d4 <main+0x150>)
 80031ce:	2102      	movs	r1, #2
 80031d0:	2001      	movs	r0, #1
 80031d2:	f00a fc21 	bl	800da18 <osMessageQueueNew>
 80031d6:	4603      	mov	r3, r0
 80031d8:	4a3f      	ldr	r2, [pc, #252]	; (80032d8 <main+0x154>)
 80031da:	6013      	str	r3, [r2, #0]

  /* creation of KeyboardOut */
  KeyboardOutHandle = osMessageQueueNew (1, sizeof(char*), &KeyboardOut_attributes);
 80031dc:	4a3f      	ldr	r2, [pc, #252]	; (80032dc <main+0x158>)
 80031de:	2104      	movs	r1, #4
 80031e0:	2001      	movs	r0, #1
 80031e2:	f00a fc19 	bl	800da18 <osMessageQueueNew>
 80031e6:	4603      	mov	r3, r0
 80031e8:	4a3d      	ldr	r2, [pc, #244]	; (80032e0 <main+0x15c>)
 80031ea:	6013      	str	r3, [r2, #0]

  /* creation of USBInput */
  USBInputHandle = osMessageQueueNew (1, sizeof(char), &USBInput_attributes);
 80031ec:	4a3d      	ldr	r2, [pc, #244]	; (80032e4 <main+0x160>)
 80031ee:	2101      	movs	r1, #1
 80031f0:	2001      	movs	r0, #1
 80031f2:	f00a fc11 	bl	800da18 <osMessageQueueNew>
 80031f6:	4603      	mov	r3, r0
 80031f8:	4a3b      	ldr	r2, [pc, #236]	; (80032e8 <main+0x164>)
 80031fa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 80031fc:	4a3b      	ldr	r2, [pc, #236]	; (80032ec <main+0x168>)
 80031fe:	2100      	movs	r1, #0
 8003200:	483b      	ldr	r0, [pc, #236]	; (80032f0 <main+0x16c>)
 8003202:	f00a fb5b 	bl	800d8bc <osThreadNew>
 8003206:	4603      	mov	r3, r0
 8003208:	4a3a      	ldr	r2, [pc, #232]	; (80032f4 <main+0x170>)
 800320a:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 800320c:	4a3a      	ldr	r2, [pc, #232]	; (80032f8 <main+0x174>)
 800320e:	2100      	movs	r1, #0
 8003210:	483a      	ldr	r0, [pc, #232]	; (80032fc <main+0x178>)
 8003212:	f00a fb53 	bl	800d8bc <osThreadNew>
 8003216:	4603      	mov	r3, r0
 8003218:	4a39      	ldr	r2, [pc, #228]	; (8003300 <main+0x17c>)
 800321a:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 800321c:	4a39      	ldr	r2, [pc, #228]	; (8003304 <main+0x180>)
 800321e:	2100      	movs	r1, #0
 8003220:	4839      	ldr	r0, [pc, #228]	; (8003308 <main+0x184>)
 8003222:	f00a fb4b 	bl	800d8bc <osThreadNew>
 8003226:	4603      	mov	r3, r0
 8003228:	4a38      	ldr	r2, [pc, #224]	; (800330c <main+0x188>)
 800322a:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 800322c:	4a38      	ldr	r2, [pc, #224]	; (8003310 <main+0x18c>)
 800322e:	2100      	movs	r1, #0
 8003230:	4838      	ldr	r0, [pc, #224]	; (8003314 <main+0x190>)
 8003232:	f00a fb43 	bl	800d8bc <osThreadNew>
 8003236:	4603      	mov	r3, r0
 8003238:	4a37      	ldr	r2, [pc, #220]	; (8003318 <main+0x194>)
 800323a:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 800323c:	4a37      	ldr	r2, [pc, #220]	; (800331c <main+0x198>)
 800323e:	2100      	movs	r1, #0
 8003240:	4837      	ldr	r0, [pc, #220]	; (8003320 <main+0x19c>)
 8003242:	f00a fb3b 	bl	800d8bc <osThreadNew>
 8003246:	4603      	mov	r3, r0
 8003248:	4a36      	ldr	r2, [pc, #216]	; (8003324 <main+0x1a0>)
 800324a:	6013      	str	r3, [r2, #0]

  /* creation of ShowFiles */
  ShowFilesHandle = osThreadNew(StartShowFiles, NULL, &ShowFiles_attributes);
 800324c:	4a36      	ldr	r2, [pc, #216]	; (8003328 <main+0x1a4>)
 800324e:	2100      	movs	r1, #0
 8003250:	4836      	ldr	r0, [pc, #216]	; (800332c <main+0x1a8>)
 8003252:	f00a fb33 	bl	800d8bc <osThreadNew>
 8003256:	4603      	mov	r3, r0
 8003258:	4a35      	ldr	r2, [pc, #212]	; (8003330 <main+0x1ac>)
 800325a:	6013      	str	r3, [r2, #0]

  /* creation of ShowFileData */
  ShowFileDataHandle = osThreadNew(StartShowFileData, NULL, &ShowFileData_attributes);
 800325c:	4a35      	ldr	r2, [pc, #212]	; (8003334 <main+0x1b0>)
 800325e:	2100      	movs	r1, #0
 8003260:	4835      	ldr	r0, [pc, #212]	; (8003338 <main+0x1b4>)
 8003262:	f00a fb2b 	bl	800d8bc <osThreadNew>
 8003266:	4603      	mov	r3, r0
 8003268:	4a34      	ldr	r2, [pc, #208]	; (800333c <main+0x1b8>)
 800326a:	6013      	str	r3, [r2, #0]

  /* creation of Clone */
  CloneHandle = osThreadNew(StartClone, NULL, &Clone_attributes);
 800326c:	4a34      	ldr	r2, [pc, #208]	; (8003340 <main+0x1bc>)
 800326e:	2100      	movs	r1, #0
 8003270:	4834      	ldr	r0, [pc, #208]	; (8003344 <main+0x1c0>)
 8003272:	f00a fb23 	bl	800d8bc <osThreadNew>
 8003276:	4603      	mov	r3, r0
 8003278:	4a33      	ldr	r2, [pc, #204]	; (8003348 <main+0x1c4>)
 800327a:	6013      	str	r3, [r2, #0]

  /* creation of Keyboard */
  KeyboardHandle = osThreadNew(StartKeyboard, NULL, &Keyboard_attributes);
 800327c:	4a33      	ldr	r2, [pc, #204]	; (800334c <main+0x1c8>)
 800327e:	2100      	movs	r1, #0
 8003280:	4833      	ldr	r0, [pc, #204]	; (8003350 <main+0x1cc>)
 8003282:	f00a fb1b 	bl	800d8bc <osThreadNew>
 8003286:	4603      	mov	r3, r0
 8003288:	4a32      	ldr	r2, [pc, #200]	; (8003354 <main+0x1d0>)
 800328a:	6013      	str	r3, [r2, #0]

  /* creation of DisplaySettings */
  DisplaySettingsHandle = osThreadNew(StartDisplaySettings, NULL, &DisplaySettings_attributes);
 800328c:	4a32      	ldr	r2, [pc, #200]	; (8003358 <main+0x1d4>)
 800328e:	2100      	movs	r1, #0
 8003290:	4832      	ldr	r0, [pc, #200]	; (800335c <main+0x1d8>)
 8003292:	f00a fb13 	bl	800d8bc <osThreadNew>
 8003296:	4603      	mov	r3, r0
 8003298:	4a31      	ldr	r2, [pc, #196]	; (8003360 <main+0x1dc>)
 800329a:	6013      	str	r3, [r2, #0]

  /* creation of Stats */
  StatsHandle = osThreadNew(StartStats, NULL, &Stats_attributes);
 800329c:	4a31      	ldr	r2, [pc, #196]	; (8003364 <main+0x1e0>)
 800329e:	2100      	movs	r1, #0
 80032a0:	4831      	ldr	r0, [pc, #196]	; (8003368 <main+0x1e4>)
 80032a2:	f00a fb0b 	bl	800d8bc <osThreadNew>
 80032a6:	4603      	mov	r3, r0
 80032a8:	4a30      	ldr	r2, [pc, #192]	; (800336c <main+0x1e8>)
 80032aa:	6013      	str	r3, [r2, #0]

  /* creation of USBListen */
  USBListenHandle = osThreadNew(StartUSBListen, NULL, &USBListen_attributes);
 80032ac:	4a30      	ldr	r2, [pc, #192]	; (8003370 <main+0x1ec>)
 80032ae:	2100      	movs	r1, #0
 80032b0:	4830      	ldr	r0, [pc, #192]	; (8003374 <main+0x1f0>)
 80032b2:	f00a fb03 	bl	800d8bc <osThreadNew>
 80032b6:	4603      	mov	r3, r0
 80032b8:	4a2f      	ldr	r2, [pc, #188]	; (8003378 <main+0x1f4>)
 80032ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80032bc:	f00a fad8 	bl	800d870 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80032c0:	e7fe      	b.n	80032c0 <main+0x13c>
 80032c2:	bf00      	nop
 80032c4:	080137c0 	.word	0x080137c0
 80032c8:	2000091c 	.word	0x2000091c
 80032cc:	080137d8 	.word	0x080137d8
 80032d0:	20000920 	.word	0x20000920
 80032d4:	080137f0 	.word	0x080137f0
 80032d8:	20000924 	.word	0x20000924
 80032dc:	08013808 	.word	0x08013808
 80032e0:	20000928 	.word	0x20000928
 80032e4:	08013820 	.word	0x08013820
 80032e8:	2000092c 	.word	0x2000092c
 80032ec:	08013610 	.word	0x08013610
 80032f0:	08003831 	.word	0x08003831
 80032f4:	200008ec 	.word	0x200008ec
 80032f8:	08013634 	.word	0x08013634
 80032fc:	08003941 	.word	0x08003941
 8003300:	200008f0 	.word	0x200008f0
 8003304:	08013658 	.word	0x08013658
 8003308:	080039dd 	.word	0x080039dd
 800330c:	200008f4 	.word	0x200008f4
 8003310:	0801367c 	.word	0x0801367c
 8003314:	08003a81 	.word	0x08003a81
 8003318:	200008f8 	.word	0x200008f8
 800331c:	080136a0 	.word	0x080136a0
 8003320:	08003b7d 	.word	0x08003b7d
 8003324:	200008fc 	.word	0x200008fc
 8003328:	080136c4 	.word	0x080136c4
 800332c:	08003ca5 	.word	0x08003ca5
 8003330:	20000900 	.word	0x20000900
 8003334:	080136e8 	.word	0x080136e8
 8003338:	08003d7d 	.word	0x08003d7d
 800333c:	20000904 	.word	0x20000904
 8003340:	0801370c 	.word	0x0801370c
 8003344:	08003e21 	.word	0x08003e21
 8003348:	20000908 	.word	0x20000908
 800334c:	08013730 	.word	0x08013730
 8003350:	08003ec9 	.word	0x08003ec9
 8003354:	2000090c 	.word	0x2000090c
 8003358:	08013754 	.word	0x08013754
 800335c:	08003f89 	.word	0x08003f89
 8003360:	20000910 	.word	0x20000910
 8003364:	08013778 	.word	0x08013778
 8003368:	08004051 	.word	0x08004051
 800336c:	20000914 	.word	0x20000914
 8003370:	0801379c 	.word	0x0801379c
 8003374:	080040c5 	.word	0x080040c5
 8003378:	20000918 	.word	0x20000918

0800337c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b094      	sub	sp, #80	; 0x50
 8003380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003382:	f107 0320 	add.w	r3, r7, #32
 8003386:	2230      	movs	r2, #48	; 0x30
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f00d fec4 	bl	8011118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003390:	f107 030c 	add.w	r3, r7, #12
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033a0:	2300      	movs	r3, #0
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	4b28      	ldr	r3, [pc, #160]	; (8003448 <SystemClock_Config+0xcc>)
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	4a27      	ldr	r2, [pc, #156]	; (8003448 <SystemClock_Config+0xcc>)
 80033aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ae:	6413      	str	r3, [r2, #64]	; 0x40
 80033b0:	4b25      	ldr	r3, [pc, #148]	; (8003448 <SystemClock_Config+0xcc>)
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80033bc:	2300      	movs	r3, #0
 80033be:	607b      	str	r3, [r7, #4]
 80033c0:	4b22      	ldr	r3, [pc, #136]	; (800344c <SystemClock_Config+0xd0>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80033c8:	4a20      	ldr	r2, [pc, #128]	; (800344c <SystemClock_Config+0xd0>)
 80033ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b1e      	ldr	r3, [pc, #120]	; (800344c <SystemClock_Config+0xd0>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033dc:	2301      	movs	r3, #1
 80033de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033e6:	2302      	movs	r3, #2
 80033e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80033f0:	2308      	movs	r3, #8
 80033f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80033f4:	23a8      	movs	r3, #168	; 0xa8
 80033f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80033f8:	2304      	movs	r3, #4
 80033fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80033fc:	2307      	movs	r3, #7
 80033fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003400:	f107 0320 	add.w	r3, r7, #32
 8003404:	4618      	mov	r0, r3
 8003406:	f004 fc25 	bl	8007c54 <HAL_RCC_OscConfig>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003410:	f000 feba 	bl	8004188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003414:	230f      	movs	r3, #15
 8003416:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003418:	2302      	movs	r3, #2
 800341a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003424:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800342a:	f107 030c 	add.w	r3, r7, #12
 800342e:	2102      	movs	r1, #2
 8003430:	4618      	mov	r0, r3
 8003432:	f004 fe87 	bl	8008144 <HAL_RCC_ClockConfig>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800343c:	f000 fea4 	bl	8004188 <Error_Handler>
  }
}
 8003440:	bf00      	nop
 8003442:	3750      	adds	r7, #80	; 0x50
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40023800 	.word	0x40023800
 800344c:	40007000 	.word	0x40007000

08003450 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003454:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <MX_I2C1_Init+0x50>)
 8003456:	4a13      	ldr	r2, [pc, #76]	; (80034a4 <MX_I2C1_Init+0x54>)
 8003458:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800345a:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <MX_I2C1_Init+0x50>)
 800345c:	4a12      	ldr	r2, [pc, #72]	; (80034a8 <MX_I2C1_Init+0x58>)
 800345e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003460:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <MX_I2C1_Init+0x50>)
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003466:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <MX_I2C1_Init+0x50>)
 8003468:	2200      	movs	r2, #0
 800346a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800346c:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <MX_I2C1_Init+0x50>)
 800346e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003472:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003474:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <MX_I2C1_Init+0x50>)
 8003476:	2200      	movs	r2, #0
 8003478:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800347a:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <MX_I2C1_Init+0x50>)
 800347c:	2200      	movs	r2, #0
 800347e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003480:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <MX_I2C1_Init+0x50>)
 8003482:	2200      	movs	r2, #0
 8003484:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003486:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <MX_I2C1_Init+0x50>)
 8003488:	2200      	movs	r2, #0
 800348a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800348c:	4804      	ldr	r0, [pc, #16]	; (80034a0 <MX_I2C1_Init+0x50>)
 800348e:	f002 f9a5 	bl	80057dc <HAL_I2C_Init>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003498:	f000 fe76 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800349c:	bf00      	nop
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000758 	.word	0x20000758
 80034a4:	40005400 	.word	0x40005400
 80034a8:	000186a0 	.word	0x000186a0

080034ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80034b0:	4b18      	ldr	r3, [pc, #96]	; (8003514 <MX_SPI1_Init+0x68>)
 80034b2:	4a19      	ldr	r2, [pc, #100]	; (8003518 <MX_SPI1_Init+0x6c>)
 80034b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80034b6:	4b17      	ldr	r3, [pc, #92]	; (8003514 <MX_SPI1_Init+0x68>)
 80034b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80034be:	4b15      	ldr	r3, [pc, #84]	; (8003514 <MX_SPI1_Init+0x68>)
 80034c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80034c4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80034c6:	4b13      	ldr	r3, [pc, #76]	; (8003514 <MX_SPI1_Init+0x68>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <MX_SPI1_Init+0x68>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <MX_SPI1_Init+0x68>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <MX_SPI1_Init+0x68>)
 80034da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80034e0:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <MX_SPI1_Init+0x68>)
 80034e2:	2218      	movs	r2, #24
 80034e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <MX_SPI1_Init+0x68>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80034ec:	4b09      	ldr	r3, [pc, #36]	; (8003514 <MX_SPI1_Init+0x68>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034f2:	4b08      	ldr	r3, [pc, #32]	; (8003514 <MX_SPI1_Init+0x68>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80034f8:	4b06      	ldr	r3, [pc, #24]	; (8003514 <MX_SPI1_Init+0x68>)
 80034fa:	220a      	movs	r2, #10
 80034fc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80034fe:	4805      	ldr	r0, [pc, #20]	; (8003514 <MX_SPI1_Init+0x68>)
 8003500:	f005 f85c 	bl	80085bc <HAL_SPI_Init>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800350a:	f000 fe3d 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	200007ac 	.word	0x200007ac
 8003518:	40013000 	.word	0x40013000

0800351c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003520:	4b17      	ldr	r3, [pc, #92]	; (8003580 <MX_SPI2_Init+0x64>)
 8003522:	4a18      	ldr	r2, [pc, #96]	; (8003584 <MX_SPI2_Init+0x68>)
 8003524:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003526:	4b16      	ldr	r3, [pc, #88]	; (8003580 <MX_SPI2_Init+0x64>)
 8003528:	f44f 7282 	mov.w	r2, #260	; 0x104
 800352c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800352e:	4b14      	ldr	r3, [pc, #80]	; (8003580 <MX_SPI2_Init+0x64>)
 8003530:	2200      	movs	r2, #0
 8003532:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003534:	4b12      	ldr	r3, [pc, #72]	; (8003580 <MX_SPI2_Init+0x64>)
 8003536:	2200      	movs	r2, #0
 8003538:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800353a:	4b11      	ldr	r3, [pc, #68]	; (8003580 <MX_SPI2_Init+0x64>)
 800353c:	2200      	movs	r2, #0
 800353e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <MX_SPI2_Init+0x64>)
 8003542:	2200      	movs	r2, #0
 8003544:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003546:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <MX_SPI2_Init+0x64>)
 8003548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800354c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800354e:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <MX_SPI2_Init+0x64>)
 8003550:	2200      	movs	r2, #0
 8003552:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003554:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <MX_SPI2_Init+0x64>)
 8003556:	2200      	movs	r2, #0
 8003558:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800355a:	4b09      	ldr	r3, [pc, #36]	; (8003580 <MX_SPI2_Init+0x64>)
 800355c:	2200      	movs	r2, #0
 800355e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003560:	4b07      	ldr	r3, [pc, #28]	; (8003580 <MX_SPI2_Init+0x64>)
 8003562:	2200      	movs	r2, #0
 8003564:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003566:	4b06      	ldr	r3, [pc, #24]	; (8003580 <MX_SPI2_Init+0x64>)
 8003568:	220a      	movs	r2, #10
 800356a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800356c:	4804      	ldr	r0, [pc, #16]	; (8003580 <MX_SPI2_Init+0x64>)
 800356e:	f005 f825 	bl	80085bc <HAL_SPI_Init>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003578:	f000 fe06 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800357c:	bf00      	nop
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000804 	.word	0x20000804
 8003584:	40003800 	.word	0x40003800

08003588 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08e      	sub	sp, #56	; 0x38
 800358c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800358e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	605a      	str	r2, [r3, #4]
 8003598:	609a      	str	r2, [r3, #8]
 800359a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800359c:	f107 0320 	add.w	r3, r7, #32
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035a6:	1d3b      	adds	r3, r7, #4
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	611a      	str	r2, [r3, #16]
 80035b4:	615a      	str	r2, [r3, #20]
 80035b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80035b8:	4b2d      	ldr	r3, [pc, #180]	; (8003670 <MX_TIM2_Init+0xe8>)
 80035ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 80035c0:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <MX_TIM2_Init+0xe8>)
 80035c2:	f240 12a3 	movw	r2, #419	; 0x1a3
 80035c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035c8:	4b29      	ldr	r3, [pc, #164]	; (8003670 <MX_TIM2_Init+0xe8>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 80035ce:	4b28      	ldr	r3, [pc, #160]	; (8003670 <MX_TIM2_Init+0xe8>)
 80035d0:	2231      	movs	r2, #49	; 0x31
 80035d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035d4:	4b26      	ldr	r3, [pc, #152]	; (8003670 <MX_TIM2_Init+0xe8>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035da:	4b25      	ldr	r3, [pc, #148]	; (8003670 <MX_TIM2_Init+0xe8>)
 80035dc:	2200      	movs	r2, #0
 80035de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80035e0:	4823      	ldr	r0, [pc, #140]	; (8003670 <MX_TIM2_Init+0xe8>)
 80035e2:	f005 fc1d 	bl	8008e20 <HAL_TIM_Base_Init>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80035ec:	f000 fdcc 	bl	8004188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80035f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035fa:	4619      	mov	r1, r3
 80035fc:	481c      	ldr	r0, [pc, #112]	; (8003670 <MX_TIM2_Init+0xe8>)
 80035fe:	f006 f87b 	bl	80096f8 <HAL_TIM_ConfigClockSource>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003608:	f000 fdbe 	bl	8004188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800360c:	4818      	ldr	r0, [pc, #96]	; (8003670 <MX_TIM2_Init+0xe8>)
 800360e:	f005 fd3b 	bl	8009088 <HAL_TIM_PWM_Init>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003618:	f000 fdb6 	bl	8004188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800361c:	2300      	movs	r3, #0
 800361e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003620:	2300      	movs	r3, #0
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003624:	f107 0320 	add.w	r3, r7, #32
 8003628:	4619      	mov	r1, r3
 800362a:	4811      	ldr	r0, [pc, #68]	; (8003670 <MX_TIM2_Init+0xe8>)
 800362c:	f006 fc20 	bl	8009e70 <HAL_TIMEx_MasterConfigSynchronization>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003636:	f000 fda7 	bl	8004188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800363a:	2360      	movs	r3, #96	; 0x60
 800363c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 800363e:	2318      	movs	r3, #24
 8003640:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800364a:	1d3b      	adds	r3, r7, #4
 800364c:	2208      	movs	r2, #8
 800364e:	4619      	mov	r1, r3
 8003650:	4807      	ldr	r0, [pc, #28]	; (8003670 <MX_TIM2_Init+0xe8>)
 8003652:	f005 ff8f 	bl	8009574 <HAL_TIM_PWM_ConfigChannel>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800365c:	f000 fd94 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003660:	4803      	ldr	r0, [pc, #12]	; (8003670 <MX_TIM2_Init+0xe8>)
 8003662:	f001 fbb3 	bl	8004dcc <HAL_TIM_MspPostInit>

}
 8003666:	bf00      	nop
 8003668:	3738      	adds	r7, #56	; 0x38
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	2000085c 	.word	0x2000085c

08003674 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800367a:	f107 0308 	add.w	r3, r7, #8
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003688:	463b      	mov	r3, r7
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003690:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <MX_TIM3_Init+0x94>)
 8003692:	4a1e      	ldr	r2, [pc, #120]	; (800370c <MX_TIM3_Init+0x98>)
 8003694:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 8003696:	4b1c      	ldr	r3, [pc, #112]	; (8003708 <MX_TIM3_Init+0x94>)
 8003698:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800369c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800369e:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <MX_TIM3_Init+0x94>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 80036a4:	4b18      	ldr	r3, [pc, #96]	; (8003708 <MX_TIM3_Init+0x94>)
 80036a6:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80036aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036ac:	4b16      	ldr	r3, [pc, #88]	; (8003708 <MX_TIM3_Init+0x94>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036b2:	4b15      	ldr	r3, [pc, #84]	; (8003708 <MX_TIM3_Init+0x94>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80036b8:	4813      	ldr	r0, [pc, #76]	; (8003708 <MX_TIM3_Init+0x94>)
 80036ba:	f005 fbb1 	bl	8008e20 <HAL_TIM_Base_Init>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80036c4:	f000 fd60 	bl	8004188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80036ce:	f107 0308 	add.w	r3, r7, #8
 80036d2:	4619      	mov	r1, r3
 80036d4:	480c      	ldr	r0, [pc, #48]	; (8003708 <MX_TIM3_Init+0x94>)
 80036d6:	f006 f80f 	bl	80096f8 <HAL_TIM_ConfigClockSource>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80036e0:	f000 fd52 	bl	8004188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036e4:	2300      	movs	r3, #0
 80036e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80036ec:	463b      	mov	r3, r7
 80036ee:	4619      	mov	r1, r3
 80036f0:	4805      	ldr	r0, [pc, #20]	; (8003708 <MX_TIM3_Init+0x94>)
 80036f2:	f006 fbbd 	bl	8009e70 <HAL_TIMEx_MasterConfigSynchronization>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80036fc:	f000 fd44 	bl	8004188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003700:	bf00      	nop
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	200008a4 	.word	0x200008a4
 800370c:	40000400 	.word	0x40000400

08003710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003716:	f107 030c 	add.w	r3, r7, #12
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	605a      	str	r2, [r3, #4]
 8003720:	609a      	str	r2, [r3, #8]
 8003722:	60da      	str	r2, [r3, #12]
 8003724:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	4b34      	ldr	r3, [pc, #208]	; (80037fc <MX_GPIO_Init+0xec>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	4a33      	ldr	r2, [pc, #204]	; (80037fc <MX_GPIO_Init+0xec>)
 8003730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003734:	6313      	str	r3, [r2, #48]	; 0x30
 8003736:	4b31      	ldr	r3, [pc, #196]	; (80037fc <MX_GPIO_Init+0xec>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	607b      	str	r3, [r7, #4]
 8003746:	4b2d      	ldr	r3, [pc, #180]	; (80037fc <MX_GPIO_Init+0xec>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	4a2c      	ldr	r2, [pc, #176]	; (80037fc <MX_GPIO_Init+0xec>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	6313      	str	r3, [r2, #48]	; 0x30
 8003752:	4b2a      	ldr	r3, [pc, #168]	; (80037fc <MX_GPIO_Init+0xec>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	607b      	str	r3, [r7, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	603b      	str	r3, [r7, #0]
 8003762:	4b26      	ldr	r3, [pc, #152]	; (80037fc <MX_GPIO_Init+0xec>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	4a25      	ldr	r2, [pc, #148]	; (80037fc <MX_GPIO_Init+0xec>)
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	6313      	str	r3, [r2, #48]	; 0x30
 800376e:	4b23      	ldr	r3, [pc, #140]	; (80037fc <MX_GPIO_Init+0xec>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 800377a:	2200      	movs	r2, #0
 800377c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8003780:	481f      	ldr	r0, [pc, #124]	; (8003800 <MX_GPIO_Init+0xf0>)
 8003782:	f001 fff9 	bl	8005778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 8003786:	2200      	movs	r2, #0
 8003788:	2122      	movs	r1, #34	; 0x22
 800378a:	481e      	ldr	r0, [pc, #120]	; (8003804 <MX_GPIO_Init+0xf4>)
 800378c:	f001 fff4 	bl	8005778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8003790:	2302      	movs	r3, #2
 8003792:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003794:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800379e:	f107 030c 	add.w	r3, r7, #12
 80037a2:	4619      	mov	r1, r3
 80037a4:	4816      	ldr	r0, [pc, #88]	; (8003800 <MX_GPIO_Init+0xf0>)
 80037a6:	f001 fe4b 	bl	8005440 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 80037aa:	f44f 738c 	mov.w	r3, #280	; 0x118
 80037ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037b0:	2301      	movs	r3, #1
 80037b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037bc:	f107 030c 	add.w	r3, r7, #12
 80037c0:	4619      	mov	r1, r3
 80037c2:	480f      	ldr	r0, [pc, #60]	; (8003800 <MX_GPIO_Init+0xf0>)
 80037c4:	f001 fe3c 	bl	8005440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 80037c8:	2322      	movs	r3, #34	; 0x22
 80037ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037cc:	2301      	movs	r3, #1
 80037ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d8:	f107 030c 	add.w	r3, r7, #12
 80037dc:	4619      	mov	r1, r3
 80037de:	4809      	ldr	r0, [pc, #36]	; (8003804 <MX_GPIO_Init+0xf4>)
 80037e0:	f001 fe2e 	bl	8005440 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80037e4:	2200      	movs	r2, #0
 80037e6:	2105      	movs	r1, #5
 80037e8:	2007      	movs	r0, #7
 80037ea:	f001 fdff 	bl	80053ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80037ee:	2007      	movs	r0, #7
 80037f0:	f001 fe18 	bl	8005424 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80037f4:	bf00      	nop
 80037f6:	3720      	adds	r7, #32
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40023800 	.word	0x40023800
 8003800:	40020000 	.word	0x40020000
 8003804:	40020400 	.word	0x40020400

08003808 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
	HAL_Delay(1); //Need delay here
 8003814:	2001      	movs	r0, #1
 8003816:	f001 fd0d 	bl	8005234 <HAL_Delay>
    CDC_Transmit_FS((uint8_t*) ptr, len);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	b29b      	uxth	r3, r3
 800381e:	4619      	mov	r1, r3
 8003820:	68b8      	ldr	r0, [r7, #8]
 8003822:	f00c ffd3 	bl	80107cc <CDC_Transmit_FS>
    return len;
 8003826:	687b      	ldr	r3, [r7, #4]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003838:	f00c fef8 	bl	801062c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(ReadCardHandle);
 800383c:	4b32      	ldr	r3, [pc, #200]	; (8003908 <Start_Init+0xd8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f00b f941 	bl	800eac8 <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 8003846:	4b31      	ldr	r3, [pc, #196]	; (800390c <Start_Init+0xdc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f00b f93c 	bl	800eac8 <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 8003850:	4b2f      	ldr	r3, [pc, #188]	; (8003910 <Start_Init+0xe0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4618      	mov	r0, r3
 8003856:	f00b f937 	bl	800eac8 <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 800385a:	4b2e      	ldr	r3, [pc, #184]	; (8003914 <Start_Init+0xe4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f00b f932 	bl	800eac8 <vTaskSuspend>
    vTaskSuspend(ShowFilesHandle);
 8003864:	4b2c      	ldr	r3, [pc, #176]	; (8003918 <Start_Init+0xe8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f00b f92d 	bl	800eac8 <vTaskSuspend>
    vTaskSuspend(ShowFileDataHandle);
 800386e:	4b2b      	ldr	r3, [pc, #172]	; (800391c <Start_Init+0xec>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f00b f928 	bl	800eac8 <vTaskSuspend>
    vTaskSuspend(CloneHandle);
 8003878:	4b29      	ldr	r3, [pc, #164]	; (8003920 <Start_Init+0xf0>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f00b f923 	bl	800eac8 <vTaskSuspend>
    vTaskSuspend(KeyboardHandle);
 8003882:	4b28      	ldr	r3, [pc, #160]	; (8003924 <Start_Init+0xf4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f00b f91e 	bl	800eac8 <vTaskSuspend>
    vTaskSuspend(DisplaySettingsHandle);
 800388c:	4b26      	ldr	r3, [pc, #152]	; (8003928 <Start_Init+0xf8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f00b f919 	bl	800eac8 <vTaskSuspend>
    vTaskSuspend(StatsHandle);
 8003896:	4b25      	ldr	r3, [pc, #148]	; (800392c <Start_Init+0xfc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f00b f914 	bl	800eac8 <vTaskSuspend>

    setbuf(stdout, NULL);
 80038a0:	4b23      	ldr	r3, [pc, #140]	; (8003930 <Start_Init+0x100>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2100      	movs	r1, #0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f00d fdd9 	bl	8011460 <setbuf>

    MFRC_INIT();
 80038ae:	f7fd faa9 	bl	8000e04 <MFRC_INIT>
    MFRC_ANTOFF();
 80038b2:	f7fd fa5f 	bl	8000d74 <MFRC_ANTOFF>
    OLED_INIT();
 80038b6:	f7fd ff6d 	bl	8001794 <OLED_INIT>
    OLED_Print(TC);
 80038ba:	481e      	ldr	r0, [pc, #120]	; (8003934 <Start_Init+0x104>)
 80038bc:	f7fe f8ab 	bl	8001a16 <OLED_Print>
    MEM_INIT();
 80038c0:	f7fe fdc8 	bl	8002454 <MEM_INIT>

    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) != 0) {
 80038c4:	e002      	b.n	80038cc <Start_Init+0x9c>
    	osDelay(1);
 80038c6:	2001      	movs	r0, #1
 80038c8:	f00a f88b 	bl	800d9e2 <osDelay>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) != 0) {
 80038cc:	2102      	movs	r1, #2
 80038ce:	481a      	ldr	r0, [pc, #104]	; (8003938 <Start_Init+0x108>)
 80038d0:	f001 ff3a 	bl	8005748 <HAL_GPIO_ReadPin>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f5      	bne.n	80038c6 <Start_Init+0x96>
    }
    osDelay(10);
 80038da:	200a      	movs	r0, #10
 80038dc:	f00a f881 	bl	800d9e2 <osDelay>
    uint8_t clear = NO_PRESS;
 80038e0:	2300      	movs	r3, #0
 80038e2:	73fb      	strb	r3, [r7, #15]
    xQueueSend(UserInputHandle, &clear, 0);
 80038e4:	4b15      	ldr	r3, [pc, #84]	; (800393c <Start_Init+0x10c>)
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	f107 010f 	add.w	r1, r7, #15
 80038ec:	2300      	movs	r3, #0
 80038ee:	2200      	movs	r2, #0
 80038f0:	f00a fb2c 	bl	800df4c <xQueueGenericSend>
    vTaskResume(HomeHandle);
 80038f4:	4b06      	ldr	r3, [pc, #24]	; (8003910 <Start_Init+0xe0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f00b f98d 	bl	800ec18 <vTaskResume>
    vTaskSuspend(NULL);
 80038fe:	2000      	movs	r0, #0
 8003900:	f00b f8e2 	bl	800eac8 <vTaskSuspend>
  {
 8003904:	e79a      	b.n	800383c <Start_Init+0xc>
 8003906:	bf00      	nop
 8003908:	200008f0 	.word	0x200008f0
 800390c:	200008f4 	.word	0x200008f4
 8003910:	200008f8 	.word	0x200008f8
 8003914:	200008fc 	.word	0x200008fc
 8003918:	20000900 	.word	0x20000900
 800391c:	20000904 	.word	0x20000904
 8003920:	20000908 	.word	0x20000908
 8003924:	2000090c 	.word	0x2000090c
 8003928:	20000910 	.word	0x20000910
 800392c:	20000914 	.word	0x20000914
 8003930:	200006d8 	.word	0x200006d8
 8003934:	20000400 	.word	0x20000400
 8003938:	40020000 	.word	0x40020000
 800393c:	20000920 	.word	0x20000920

08003940 <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 8003948:	201c      	movs	r0, #28
 800394a:	f00d fbc7 	bl	80110dc <malloc>
 800394e:	4603      	mov	r3, r0
 8003950:	60bb      	str	r3, [r7, #8]
	read_card->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 8003952:	68bc      	ldr	r4, [r7, #8]
 8003954:	2040      	movs	r0, #64	; 0x40
 8003956:	f00d fbc1 	bl	80110dc <malloc>
 800395a:	4603      	mov	r3, r0
 800395c:	6163      	str	r3, [r4, #20]
	read_card->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 800395e:	68bc      	ldr	r4, [r7, #8]
 8003960:	2007      	movs	r0, #7
 8003962:	f00d fbbb 	bl	80110dc <malloc>
 8003966:	4603      	mov	r3, r0
 8003968:	6023      	str	r3, [r4, #0]
	int ranonce = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	MFRC_ANTON();
 800396e:	f7fd f9c7 	bl	8000d00 <MFRC_ANTON>
	if (ranonce == 0){
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d106      	bne.n	8003986 <StartReadCard+0x46>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 8003978:	2100      	movs	r1, #0
 800397a:	4815      	ldr	r0, [pc, #84]	; (80039d0 <StartReadCard+0x90>)
 800397c:	f7fe f916 	bl	8001bac <OLED_SCREEN>
		ranonce++;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	3301      	adds	r3, #1
 8003984:	60fb      	str	r3, [r7, #12]
	}
	if(UL_readcard(read_card) == PCD_OK){
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	4618      	mov	r0, r3
 800398a:	f7fd fca1 	bl	80012d0 <UL_readcard>
 800398e:	4603      	mov	r3, r0
 8003990:	2bcc      	cmp	r3, #204	; 0xcc
 8003992:	d1ec      	bne.n	800396e <StartReadCard+0x2e>
			dump_card_serial(read_card, 4);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2104      	movs	r1, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f7fd fda9 	bl	80014f0 <dump_card_serial>
			BUZZ();
 800399e:	f7ff fb7b 	bl	8003098 <BUZZ>
			MFRC_ANTOFF();
 80039a2:	f7fd f9e7 	bl	8000d74 <MFRC_ANTOFF>
			inc_read_count();
 80039a6:	f001 f859 	bl	8004a5c <inc_read_count>
			xQueueSend(UidtoFoundHandle,&read_card,0);
 80039aa:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <StartReadCard+0x94>)
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	f107 0108 	add.w	r1, r7, #8
 80039b2:	2300      	movs	r3, #0
 80039b4:	2200      	movs	r2, #0
 80039b6:	f00a fac9 	bl	800df4c <xQueueGenericSend>
			vTaskResume(CardFoundHandle);
 80039ba:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <StartReadCard+0x98>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f00b f92a 	bl	800ec18 <vTaskResume>
			ranonce = 0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
			vTaskSuspend(NULL);
 80039c8:	2000      	movs	r0, #0
 80039ca:	f00b f87d 	bl	800eac8 <vTaskSuspend>
	MFRC_ANTON();
 80039ce:	e7ce      	b.n	800396e <StartReadCard+0x2e>
 80039d0:	08013958 	.word	0x08013958
 80039d4:	2000091c 	.word	0x2000091c
 80039d8:	200008fc 	.word	0x200008fc

080039dc <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
	uint8_t file_select_count = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	75fb      	strb	r3, [r7, #23]
	int ranonce = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61fb      	str	r3, [r7, #28]
	Button_StateTypeDef button_state;
	Card* towrite = NULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <StartWriteCard+0x28>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 80039f6:	2100      	movs	r1, #0
 80039f8:	481f      	ldr	r0, [pc, #124]	; (8003a78 <StartWriteCard+0x9c>)
 80039fa:	f7fe f8d7 	bl	8001bac <OLED_SCREEN>
	  	ranonce++;
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3301      	adds	r3, #1
 8003a02:	61fb      	str	r3, [r7, #28]

	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003a04:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <StartWriteCard+0xa0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f107 010f 	add.w	r1, r7, #15
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f00a fc36 	bl	800e280 <xQueueReceive>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d1ea      	bne.n	80039f0 <StartWriteCard+0x14>
		  if (button_state == SHORT_PRESS) {
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d11c      	bne.n	8003a5a <StartWriteCard+0x7e>
			  if (entry_present(file_select_count) == RFS_OK) {
 8003a20:	7dfb      	ldrb	r3, [r7, #23]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fe7f 	bl	8004728 <entry_present>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1df      	bne.n	80039f0 <StartWriteCard+0x14>
				  towrite = read_card_entry(file_select_count);
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 fc64 	bl	8004302 <read_card_entry>
 8003a3a:	61b8      	str	r0, [r7, #24]
				  char* file_name = get_file_name(file_select_count);
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fe8e 	bl	8004762 <get_file_name>
 8003a46:	6138      	str	r0, [r7, #16]
				  OLED_SCRNREF(&SCRN_WriteCard, WRITE_SRC_LOC, file_name);
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	2102      	movs	r1, #2
 8003a4c:	480a      	ldr	r0, [pc, #40]	; (8003a78 <StartWriteCard+0x9c>)
 8003a4e:	f7fe f8e6 	bl	8001c1e <OLED_SCRNREF>
				  free(file_name);
 8003a52:	6938      	ldr	r0, [r7, #16]
 8003a54:	f00d fb4a 	bl	80110ec <free>
 8003a58:	e7ca      	b.n	80039f0 <StartWriteCard+0x14>
			  }

		  } else if ((button_state == LONG_PRESS) && (towrite != NULL)) {
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d1c7      	bne.n	80039f0 <StartWriteCard+0x14>
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0c4      	beq.n	80039f0 <StartWriteCard+0x14>
			  	ranonce= 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
			  	inc_write_count();
 8003a6a:	f000 ffcb 	bl	8004a04 <inc_write_count>
			  	write_card(towrite);
 8003a6e:	69b8      	ldr	r0, [r7, #24]
 8003a70:	f7ff fb24 	bl	80030bc <write_card>
	  if (ranonce == 0){
 8003a74:	e7bc      	b.n	80039f0 <StartWriteCard+0x14>
 8003a76:	bf00      	nop
 8003a78:	08013980 	.word	0x08013980
 8003a7c:	20000920 	.word	0x20000920

08003a80 <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint8_t select_index = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0) {
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10c      	bne.n	8003ab0 <StartHome+0x30>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 8003a96:	2100      	movs	r1, #0
 8003a98:	4830      	ldr	r0, [pc, #192]	; (8003b5c <StartHome+0xdc>)
 8003a9a:	f7fe f887 	bl	8001bac <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, select_index, OLED_RESTORE);
 8003a9e:	7afb      	ldrb	r3, [r7, #11]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	482d      	ldr	r0, [pc, #180]	; (8003b5c <StartHome+0xdc>)
 8003aa6:	f7fe f8eb 	bl	8001c80 <OLED_SELECT>
		  ranonce++;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3301      	adds	r3, #1
 8003aae:	60fb      	str	r3, [r7, #12]
	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003ab0:	4b2b      	ldr	r3, [pc, #172]	; (8003b60 <StartHome+0xe0>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f107 010a 	add.w	r1, r7, #10
 8003ab8:	2200      	movs	r2, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f00a fbe0 	bl	800e280 <xQueueReceive>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d1e4      	bne.n	8003a90 <StartHome+0x10>
		  if (button_state == SHORT_PRESS) {
 8003ac6:	7abb      	ldrb	r3, [r7, #10]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d107      	bne.n	8003adc <StartHome+0x5c>
			  oled_move_selection(&SCRN_Home, &select_index, OLED_RESTORE);
 8003acc:	f107 030b 	add.w	r3, r7, #11
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4821      	ldr	r0, [pc, #132]	; (8003b5c <StartHome+0xdc>)
 8003ad6:	f7fe faad 	bl	8002034 <oled_move_selection>
 8003ada:	e7d9      	b.n	8003a90 <StartHome+0x10>
		  } else if (button_state == LONG_PRESS) {
 8003adc:	7abb      	ldrb	r3, [r7, #10]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d1d6      	bne.n	8003a90 <StartHome+0x10>
			  switch(select_index) {
 8003ae2:	7afb      	ldrb	r3, [r7, #11]
 8003ae4:	2b05      	cmp	r3, #5
 8003ae6:	d833      	bhi.n	8003b50 <StartHome+0xd0>
 8003ae8:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <StartHome+0x70>)
 8003aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aee:	bf00      	nop
 8003af0:	08003b09 	.word	0x08003b09
 8003af4:	08003b15 	.word	0x08003b15
 8003af8:	08003b21 	.word	0x08003b21
 8003afc:	08003b2d 	.word	0x08003b2d
 8003b00:	08003b39 	.word	0x08003b39
 8003b04:	08003b45 	.word	0x08003b45
			  	  case 0:
			  		  vTaskResume(ReadCardHandle);
 8003b08:	4b16      	ldr	r3, [pc, #88]	; (8003b64 <StartHome+0xe4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f00b f883 	bl	800ec18 <vTaskResume>
			  		  break;
 8003b12:	e01d      	b.n	8003b50 <StartHome+0xd0>
			  	  case 1:
			  		  vTaskResume(WriteCardHandle);
 8003b14:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <StartHome+0xe8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f00b f87d 	bl	800ec18 <vTaskResume>
			  		  break;
 8003b1e:	e017      	b.n	8003b50 <StartHome+0xd0>
			  	  case 2:
			  		  vTaskResume(ShowFilesHandle);
 8003b20:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <StartHome+0xec>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f00b f877 	bl	800ec18 <vTaskResume>
			  		  break;
 8003b2a:	e011      	b.n	8003b50 <StartHome+0xd0>
			  	  case 3:
			  		  vTaskResume(CloneHandle);
 8003b2c:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <StartHome+0xf0>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f00b f871 	bl	800ec18 <vTaskResume>
			  		  break;
 8003b36:	e00b      	b.n	8003b50 <StartHome+0xd0>
			  	  case 4:
			  		  vTaskResume(DisplaySettingsHandle);
 8003b38:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <StartHome+0xf4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f00b f86b 	bl	800ec18 <vTaskResume>
			  		  break;
 8003b42:	e005      	b.n	8003b50 <StartHome+0xd0>
			  	  case 5:
			  		  vTaskResume(StatsHandle);
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <StartHome+0xf8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f00b f865 	bl	800ec18 <vTaskResume>
			  		  break;
 8003b4e:	bf00      	nop
			  }
			  ranonce = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]
			  vTaskSuspend(NULL);
 8003b54:	2000      	movs	r0, #0
 8003b56:	f00a ffb7 	bl	800eac8 <vTaskSuspend>
	  if (ranonce == 0) {
 8003b5a:	e799      	b.n	8003a90 <StartHome+0x10>
 8003b5c:	08013944 	.word	0x08013944
 8003b60:	20000920 	.word	0x20000920
 8003b64:	200008f0 	.word	0x200008f0
 8003b68:	200008f4 	.word	0x200008f4
 8003b6c:	20000900 	.word	0x20000900
 8003b70:	20000908 	.word	0x20000908
 8003b74:	20000910 	.word	0x20000910
 8003b78:	20000914 	.word	0x20000914

08003b7c <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 8003b7c:	b590      	push	{r4, r7, lr}
 8003b7e:	b089      	sub	sp, #36	; 0x24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	uint8_t select_index = 0;
 8003b84:	2300      	movs	r3, #0
 8003b86:	75fb      	strb	r3, [r7, #23]
	int ranonce = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
	Button_StateTypeDef button_state;
	Card* read_card;
	char* card_name = NULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	if (ranonce == 0) {
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d130      	bne.n	8003bf8 <CardFoundStart+0x7c>
		while(xQueueReceive(UidtoFoundHandle, &read_card, 0) != pdTRUE);
 8003b96:	bf00      	nop
 8003b98:	4b3c      	ldr	r3, [pc, #240]	; (8003c8c <CardFoundStart+0x110>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f107 0110 	add.w	r1, r7, #16
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f00a fb6c 	bl	800e280 <xQueueReceive>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d1f4      	bne.n	8003b98 <CardFoundStart+0x1c>
		char* uid_str = uid_tostring(read_card->uid, read_card->uidsize);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	791b      	ldrb	r3, [r3, #4]
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4610      	mov	r0, r2
 8003bba:	f7fd fbf9 	bl	80013b0 <uid_tostring>
 8003bbe:	61b8      	str	r0, [r7, #24]
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4833      	ldr	r0, [pc, #204]	; (8003c90 <CardFoundStart+0x114>)
 8003bc4:	f7fd fff2 	bl	8001bac <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_UID_LOC, uid_str);
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	2101      	movs	r1, #1
 8003bcc:	4830      	ldr	r0, [pc, #192]	; (8003c90 <CardFoundStart+0x114>)
 8003bce:	f7fe f826 	bl	8001c1e <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_CARDTYPE_LOC, read_card->type);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	2102      	movs	r1, #2
 8003bda:	482d      	ldr	r0, [pc, #180]	; (8003c90 <CardFoundStart+0x114>)
 8003bdc:	f7fe f81f 	bl	8001c1e <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, select_index, OLED_NORESTORE);
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	2200      	movs	r2, #0
 8003be4:	4619      	mov	r1, r3
 8003be6:	482a      	ldr	r0, [pc, #168]	; (8003c90 <CardFoundStart+0x114>)
 8003be8:	f7fe f84a 	bl	8001c80 <OLED_SELECT>
		ranonce++;
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	61fb      	str	r3, [r7, #28]
		free(uid_str);
 8003bf2:	69b8      	ldr	r0, [r7, #24]
 8003bf4:	f00d fa7a 	bl	80110ec <free>
	}

 	if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003bf8:	4b26      	ldr	r3, [pc, #152]	; (8003c94 <CardFoundStart+0x118>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f107 0116 	add.w	r1, r7, #22
 8003c00:	2200      	movs	r2, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f00a fb3c 	bl	800e280 <xQueueReceive>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d1c0      	bne.n	8003b90 <CardFoundStart+0x14>
 		if (button_state == SHORT_PRESS) {
 8003c0e:	7dbb      	ldrb	r3, [r7, #22]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d107      	bne.n	8003c24 <CardFoundStart+0xa8>
 			oled_move_selection(&SCRN_CardFound, &select_index, OLED_NORESTORE);
 8003c14:	f107 0317 	add.w	r3, r7, #23
 8003c18:	2200      	movs	r2, #0
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	481c      	ldr	r0, [pc, #112]	; (8003c90 <CardFoundStart+0x114>)
 8003c1e:	f7fe fa09 	bl	8002034 <oled_move_selection>
 8003c22:	e7b5      	b.n	8003b90 <CardFoundStart+0x14>
 		} else if (button_state == LONG_PRESS) {
 8003c24:	7dbb      	ldrb	r3, [r7, #22]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d1b2      	bne.n	8003b90 <CardFoundStart+0x14>
 			if (select_index == 0) {
 8003c2a:	7dfb      	ldrb	r3, [r7, #23]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d121      	bne.n	8003c74 <CardFoundStart+0xf8>

 				vTaskResume(KeyboardHandle);
 8003c30:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <CardFoundStart+0x11c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f00a ffef 	bl	800ec18 <vTaskResume>

 				while(xQueueReceive(KeyboardOutHandle, &card_name, 0) != pdTRUE) {
 8003c3a:	e002      	b.n	8003c42 <CardFoundStart+0xc6>
 					osDelay(1); //wait until keyboard is finished
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	f009 fed0 	bl	800d9e2 <osDelay>
 				while(xQueueReceive(KeyboardOutHandle, &card_name, 0) != pdTRUE) {
 8003c42:	4b16      	ldr	r3, [pc, #88]	; (8003c9c <CardFoundStart+0x120>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f107 010c 	add.w	r1, r7, #12
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f00a fb17 	bl	800e280 <xQueueReceive>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d1f1      	bne.n	8003c3c <CardFoundStart+0xc0>
 				}
 				enter_card(read_card, mem_find_free_block(), card_name);
 8003c58:	693c      	ldr	r4, [r7, #16]
 8003c5a:	f7fe fd7f 	bl	800275c <mem_find_free_block>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4619      	mov	r1, r3
 8003c66:	4620      	mov	r0, r4
 8003c68:	f000 fa93 	bl	8004192 <enter_card>
 				free(card_name);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f00d fa3c 	bl	80110ec <free>
 			}
 			vTaskResume(HomeHandle);
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <CardFoundStart+0x124>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f00a ffcd 	bl	800ec18 <vTaskResume>
 			ranonce = 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
 			vTaskSuspend(NULL);
 8003c82:	2000      	movs	r0, #0
 8003c84:	f00a ff20 	bl	800eac8 <vTaskSuspend>
	if (ranonce == 0) {
 8003c88:	e782      	b.n	8003b90 <CardFoundStart+0x14>
 8003c8a:	bf00      	nop
 8003c8c:	2000091c 	.word	0x2000091c
 8003c90:	0801396c 	.word	0x0801396c
 8003c94:	20000920 	.word	0x20000920
 8003c98:	2000090c 	.word	0x2000090c
 8003c9c:	20000928 	.word	0x20000928
 8003ca0:	200008f8 	.word	0x200008f8

08003ca4 <StartShowFiles>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFiles */
void StartShowFiles(void *argument)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFiles */
	uint8_t select_index = 0;
 8003cac:	2300      	movs	r3, #0
 8003cae:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
	/* Infinite loop */
  for(;;)
  {

	  if (ranonce == 0) {
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d110      	bne.n	8003cdc <StartShowFiles+0x38>
		  OLED_SCREEN(&SCRN_ShowFiles, NORMAL);
 8003cba:	2100      	movs	r1, #0
 8003cbc:	482a      	ldr	r0, [pc, #168]	; (8003d68 <StartShowFiles+0xc4>)
 8003cbe:	f7fd ff75 	bl	8001bac <OLED_SCREEN>
		  OLED_SELECT(&SCRN_ShowFiles, select_index, OLED_RESTORE);
 8003cc2:	7afb      	ldrb	r3, [r7, #11]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4827      	ldr	r0, [pc, #156]	; (8003d68 <StartShowFiles+0xc4>)
 8003cca:	f7fd ffd9 	bl	8001c80 <OLED_SELECT>
		  OLED_display_files(&SCRN_ShowFiles, 0);
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4825      	ldr	r0, [pc, #148]	; (8003d68 <StartShowFiles+0xc4>)
 8003cd2:	f7fe f8b5 	bl	8001e40 <OLED_display_files>
		  ranonce++;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	60fb      	str	r3, [r7, #12]
	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003cdc:	4b23      	ldr	r3, [pc, #140]	; (8003d6c <StartShowFiles+0xc8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f107 010a 	add.w	r1, r7, #10
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f00a faca 	bl	800e280 <xQueueReceive>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d1e0      	bne.n	8003cb4 <StartShowFiles+0x10>
		  if (button_state == SHORT_PRESS) {
 8003cf2:	7abb      	ldrb	r3, [r7, #10]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d107      	bne.n	8003d08 <StartShowFiles+0x64>

			  oled_move_selection(&SCRN_ShowFiles, &select_index, OLED_RESTORE);
 8003cf8:	f107 030b 	add.w	r3, r7, #11
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4819      	ldr	r0, [pc, #100]	; (8003d68 <StartShowFiles+0xc4>)
 8003d02:	f7fe f997 	bl	8002034 <oled_move_selection>
 8003d06:	e7d5      	b.n	8003cb4 <StartShowFiles+0x10>

		  } else if (button_state == LONG_PRESS) {
 8003d08:	7abb      	ldrb	r3, [r7, #10]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d1d2      	bne.n	8003cb4 <StartShowFiles+0x10>

			  if (select_index == SHOWFILES_EXIT_LOC) {
 8003d0e:	7afb      	ldrb	r3, [r7, #11]
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d10a      	bne.n	8003d2a <StartShowFiles+0x86>
				  vTaskResume(HomeHandle);
 8003d14:	4b16      	ldr	r3, [pc, #88]	; (8003d70 <StartShowFiles+0xcc>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f00a ff7d 	bl	800ec18 <vTaskResume>
				  ranonce = 0;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
				  vTaskSuspend(NULL);
 8003d22:	2000      	movs	r0, #0
 8003d24:	f00a fed0 	bl	800eac8 <vTaskSuspend>
 8003d28:	e7c4      	b.n	8003cb4 <StartShowFiles+0x10>

			  } else if ((entry_present(select_index) == RFS_OK)) {
 8003d2a:	7afb      	ldrb	r3, [r7, #11]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fcfa 	bl	8004728 <entry_present>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1bc      	bne.n	8003cb4 <StartShowFiles+0x10>
				  uint16_t entry = select_index;
 8003d3a:	7afb      	ldrb	r3, [r7, #11]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	813b      	strh	r3, [r7, #8]
				  xQueueSend(FileEntryHandle, &entry, 0);
 8003d40:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <StartShowFiles+0xd0>)
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	f107 0108 	add.w	r1, r7, #8
 8003d48:	2300      	movs	r3, #0
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f00a f8fe 	bl	800df4c <xQueueGenericSend>
				  vTaskResume(ShowFileDataHandle);
 8003d50:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <StartShowFiles+0xd4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f00a ff5f 	bl	800ec18 <vTaskResume>
				  ranonce = 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
				  vTaskSuspend(NULL);
 8003d5e:	2000      	movs	r0, #0
 8003d60:	f00a feb2 	bl	800eac8 <vTaskSuspend>
	  if (ranonce == 0) {
 8003d64:	e7a6      	b.n	8003cb4 <StartShowFiles+0x10>
 8003d66:	bf00      	nop
 8003d68:	08013994 	.word	0x08013994
 8003d6c:	20000920 	.word	0x20000920
 8003d70:	200008f8 	.word	0x200008f8
 8003d74:	20000924 	.word	0x20000924
 8003d78:	20000904 	.word	0x20000904

08003d7c <StartShowFileData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFileData */
void StartShowFileData(void *argument)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFileData */
	uint8_t select_index = 0;
 8003d84:	2300      	movs	r3, #0
 8003d86:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
	uint16_t entry_to_show;
  /* Infinite loop */
  for(;;)
  {

    if (ranonce == 0) {
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d112      	bne.n	8003db8 <StartShowFileData+0x3c>
    	while(xQueueReceive(FileEntryHandle, &entry_to_show, 0) != pdTRUE);
 8003d92:	bf00      	nop
 8003d94:	4b1e      	ldr	r3, [pc, #120]	; (8003e10 <StartShowFileData+0x94>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f107 0108 	add.w	r1, r7, #8
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f00a fa6e 	bl	800e280 <xQueueReceive>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d1f4      	bne.n	8003d94 <StartShowFileData+0x18>
    	oled_show_file(entry_to_show);
 8003daa:	893b      	ldrh	r3, [r7, #8]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fe f901 	bl	8001fb4 <oled_show_file>
    	ranonce++;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3301      	adds	r3, #1
 8003db6:	60fb      	str	r3, [r7, #12]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003db8:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <StartShowFileData+0x98>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f107 010a 	add.w	r1, r7, #10
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f00a fa5c 	bl	800e280 <xQueueReceive>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d1de      	bne.n	8003d8c <StartShowFileData+0x10>
    	if (button_state == SHORT_PRESS) {
 8003dce:	7abb      	ldrb	r3, [r7, #10]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d107      	bne.n	8003de4 <StartShowFileData+0x68>
    		oled_move_selection(&SCRN_FileData, &select_index, OLED_NORESTORE);
 8003dd4:	f107 030b 	add.w	r3, r7, #11
 8003dd8:	2200      	movs	r2, #0
 8003dda:	4619      	mov	r1, r3
 8003ddc:	480e      	ldr	r0, [pc, #56]	; (8003e18 <StartShowFileData+0x9c>)
 8003dde:	f7fe f929 	bl	8002034 <oled_move_selection>
 8003de2:	e7d3      	b.n	8003d8c <StartShowFileData+0x10>
    	} else if (button_state == LONG_PRESS) {
 8003de4:	7abb      	ldrb	r3, [r7, #10]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d1d0      	bne.n	8003d8c <StartShowFileData+0x10>
    		if (select_index == SHOWFILE_DELETE_LOC) {
 8003dea:	7afb      	ldrb	r3, [r7, #11]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d103      	bne.n	8003df8 <StartShowFileData+0x7c>
    			remove_card(entry_to_show);
 8003df0:	893b      	ldrh	r3, [r7, #8]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fd34 	bl	8004860 <remove_card>
    		}
    		vTaskResume(ShowFilesHandle);
 8003df8:	4b08      	ldr	r3, [pc, #32]	; (8003e1c <StartShowFileData+0xa0>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f00a ff0b 	bl	800ec18 <vTaskResume>
    		ranonce = 0;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
    		vTaskSuspend(NULL);
 8003e06:	2000      	movs	r0, #0
 8003e08:	f00a fe5e 	bl	800eac8 <vTaskSuspend>
    if (ranonce == 0) {
 8003e0c:	e7be      	b.n	8003d8c <StartShowFileData+0x10>
 8003e0e:	bf00      	nop
 8003e10:	20000924 	.word	0x20000924
 8003e14:	20000920 	.word	0x20000920
 8003e18:	080139a8 	.word	0x080139a8
 8003e1c:	20000900 	.word	0x20000900

08003e20 <StartClone>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClone */
void StartClone(void *argument)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartClone */
	int ranonce = 0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 8003e2c:	201c      	movs	r0, #28
 8003e2e:	f00d f955 	bl	80110dc <malloc>
 8003e32:	4603      	mov	r3, r0
 8003e34:	60bb      	str	r3, [r7, #8]
	read_card->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 8003e36:	2040      	movs	r0, #64	; 0x40
 8003e38:	f00d f950 	bl	80110dc <malloc>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	461a      	mov	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	615a      	str	r2, [r3, #20]
	read_card->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8003e44:	2007      	movs	r0, #7
 8003e46:	f00d f949 	bl	80110dc <malloc>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	MFRC_ANTON();
 8003e52:	f7fc ff55 	bl	8000d00 <MFRC_ANTON>
    if (ranonce == 0) {
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d106      	bne.n	8003e6a <StartClone+0x4a>
    	OLED_SCREEN(&SCRN_Clone, NORMAL);
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4817      	ldr	r0, [pc, #92]	; (8003ebc <StartClone+0x9c>)
 8003e60:	f7fd fea4 	bl	8001bac <OLED_SCREEN>
    	ranonce++;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	3301      	adds	r3, #1
 8003e68:	60fb      	str	r3, [r7, #12]
    }

    if (UL_readcard(read_card) == PCD_OK) {
 8003e6a:	68b8      	ldr	r0, [r7, #8]
 8003e6c:	f7fd fa30 	bl	80012d0 <UL_readcard>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2bcc      	cmp	r3, #204	; 0xcc
 8003e74:	d1ed      	bne.n	8003e52 <StartClone+0x32>
    	MFRC_HALTA(); //De-select card
 8003e76:	f7fd f859 	bl	8000f2c <MFRC_HALTA>
    	BUZZ();
 8003e7a:	f7ff f90d 	bl	8003098 <BUZZ>
    	OLED_Clear();
 8003e7e:	f7fd fbcb 	bl	8001618 <OLED_Clear>
    	OLED_PrintCent(2, "PLACE CARD YOU WISH", NORMAL);
 8003e82:	2200      	movs	r2, #0
 8003e84:	490e      	ldr	r1, [pc, #56]	; (8003ec0 <StartClone+0xa0>)
 8003e86:	2002      	movs	r0, #2
 8003e88:	f7fd fda1 	bl	80019ce <OLED_PrintCent>
    	OLED_PrintCent(4, "TO COPY TO", NORMAL);
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	490d      	ldr	r1, [pc, #52]	; (8003ec4 <StartClone+0xa4>)
 8003e90:	2004      	movs	r0, #4
 8003e92:	f7fd fd9c 	bl	80019ce <OLED_PrintCent>
    	while(PICC_CHECK() == PCD_OK); //Hang until read card is removed
 8003e96:	bf00      	nop
 8003e98:	f7fd f956 	bl	8001148 <PICC_CHECK>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2bcc      	cmp	r3, #204	; 0xcc
 8003ea0:	d0fa      	beq.n	8003e98 <StartClone+0x78>
    	while(PICC_CHECK() != PCD_OK); //Hang until new card is placed
 8003ea2:	bf00      	nop
 8003ea4:	f7fd f950 	bl	8001148 <PICC_CHECK>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2bcc      	cmp	r3, #204	; 0xcc
 8003eac:	d1fa      	bne.n	8003ea4 <StartClone+0x84>
    	ranonce = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]
    	write_card(read_card);
 8003eb2:	68b8      	ldr	r0, [r7, #8]
 8003eb4:	f7ff f902 	bl	80030bc <write_card>
	MFRC_ANTON();
 8003eb8:	e7cb      	b.n	8003e52 <StartClone+0x32>
 8003eba:	bf00      	nop
 8003ebc:	080139bc 	.word	0x080139bc
 8003ec0:	08012f98 	.word	0x08012f98
 8003ec4:	08012fac 	.word	0x08012fac

08003ec8 <StartKeyboard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKeyboard */
void StartKeyboard(void *argument)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKeyboard */
	uint8_t select_index = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	74fb      	strb	r3, [r7, #19]
	int ranonce = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	617b      	str	r3, [r7, #20]
	Button_StateTypeDef button_state;
	char* input = NULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    if (ranonce == 0) {
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10d      	bne.n	8003efe <StartKeyboard+0x36>
    	OLED_Clear();
 8003ee2:	f7fd fb99 	bl	8001618 <OLED_Clear>
    	OLED_SCREEN(&SCRN_Keyboard, NORMAL);
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4824      	ldr	r0, [pc, #144]	; (8003f7c <StartKeyboard+0xb4>)
 8003eea:	f7fd fe5f 	bl	8001bac <OLED_SCREEN>
    	OLED_select_inv(&SCRN_Keyboard, select_index);
 8003eee:	7cfb      	ldrb	r3, [r7, #19]
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4822      	ldr	r0, [pc, #136]	; (8003f7c <StartKeyboard+0xb4>)
 8003ef4:	f7fd ff3a 	bl	8001d6c <OLED_select_inv>
    	ranonce++;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	3301      	adds	r3, #1
 8003efc:	617b      	str	r3, [r7, #20]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003efe:	4b20      	ldr	r3, [pc, #128]	; (8003f80 <StartKeyboard+0xb8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f107 0112 	add.w	r1, r7, #18
 8003f06:	2200      	movs	r2, #0
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f00a f9b9 	bl	800e280 <xQueueReceive>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d1e3      	bne.n	8003edc <StartKeyboard+0x14>
    	if (button_state == SHORT_PRESS) {
 8003f14:	7cbb      	ldrb	r3, [r7, #18]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d106      	bne.n	8003f28 <StartKeyboard+0x60>
    		oled_move_selection_inv(&SCRN_Keyboard, &select_index);
 8003f1a:	f107 0313 	add.w	r3, r7, #19
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4816      	ldr	r0, [pc, #88]	; (8003f7c <StartKeyboard+0xb4>)
 8003f22:	f7fe f8ad 	bl	8002080 <oled_move_selection_inv>
 8003f26:	e7d9      	b.n	8003edc <StartKeyboard+0x14>
    	} else if (button_state == LONG_PRESS) {
 8003f28:	7cbb      	ldrb	r3, [r7, #18]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d1d6      	bne.n	8003edc <StartKeyboard+0x14>
    		if ((select_index <= 25) && (select_index >= 0)) {
 8003f2e:	7cfb      	ldrb	r3, [r7, #19]
 8003f30:	2b19      	cmp	r3, #25
 8003f32:	d807      	bhi.n	8003f44 <StartKeyboard+0x7c>
    			oled_keyboard_insertChar(select_index, &input);
 8003f34:	7cfb      	ldrb	r3, [r7, #19]
 8003f36:	f107 020c 	add.w	r2, r7, #12
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fe f8c3 	bl	80020c8 <oled_keyboard_insertChar>
 8003f42:	e7cb      	b.n	8003edc <StartKeyboard+0x14>
    		} else if (select_index == 26) {
 8003f44:	7cfb      	ldrb	r3, [r7, #19]
 8003f46:	2b1a      	cmp	r3, #26
 8003f48:	d105      	bne.n	8003f56 <StartKeyboard+0x8e>
    			oled_keyboard_removeChar(&input);
 8003f4a:	f107 030c 	add.w	r3, r7, #12
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe f8f8 	bl	8002144 <oled_keyboard_removeChar>
 8003f54:	e7c2      	b.n	8003edc <StartKeyboard+0x14>
    		} else if (select_index == 27) {
 8003f56:	7cfb      	ldrb	r3, [r7, #19]
 8003f58:	2b1b      	cmp	r3, #27
 8003f5a:	d1bf      	bne.n	8003edc <StartKeyboard+0x14>
    			xQueueSend(KeyboardOutHandle, &input, 0); //Send the name user has inputted to queue for other tasks to use
 8003f5c:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <StartKeyboard+0xbc>)
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	f107 010c 	add.w	r1, r7, #12
 8003f64:	2300      	movs	r3, #0
 8003f66:	2200      	movs	r2, #0
 8003f68:	f009 fff0 	bl	800df4c <xQueueGenericSend>
    			ranonce = 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
    			input = NULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	60fb      	str	r3, [r7, #12]
    			vTaskSuspend(NULL); //exit task
 8003f74:	2000      	movs	r0, #0
 8003f76:	f00a fda7 	bl	800eac8 <vTaskSuspend>
    if (ranonce == 0) {
 8003f7a:	e7af      	b.n	8003edc <StartKeyboard+0x14>
 8003f7c:	080139d0 	.word	0x080139d0
 8003f80:	20000920 	.word	0x20000920
 8003f84:	20000928 	.word	0x20000928

08003f88 <StartDisplaySettings>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplaySettings */
void StartDisplaySettings(void *argument)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplaySettings */
	uint8_t select_index = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	727b      	strb	r3, [r7, #9]
	int ranonce = 0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
	uint16_t current_contrast = 0xFF; //max contrast by default
 8003f98:	23ff      	movs	r3, #255	; 0xff
 8003f9a:	817b      	strh	r3, [r7, #10]
  /* Infinite loop */
  for(;;)
  {
    if (ranonce == 0) {
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10b      	bne.n	8003fba <StartDisplaySettings+0x32>
    	OLED_SCREEN(&SCRN_Display, NORMAL);
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4827      	ldr	r0, [pc, #156]	; (8004044 <StartDisplaySettings+0xbc>)
 8003fa6:	f7fd fe01 	bl	8001bac <OLED_SCREEN>
    	OLED_select_inv(&SCRN_Display, select_index);
 8003faa:	7a7b      	ldrb	r3, [r7, #9]
 8003fac:	4619      	mov	r1, r3
 8003fae:	4825      	ldr	r0, [pc, #148]	; (8004044 <StartDisplaySettings+0xbc>)
 8003fb0:	f7fd fedc 	bl	8001d6c <OLED_select_inv>
    	ranonce++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003fba:	4b23      	ldr	r3, [pc, #140]	; (8004048 <StartDisplaySettings+0xc0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f107 0108 	add.w	r1, r7, #8
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f00a f95b 	bl	800e280 <xQueueReceive>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d1e5      	bne.n	8003f9c <StartDisplaySettings+0x14>
    	if (button_state == SHORT_PRESS) {
 8003fd0:	7a3b      	ldrb	r3, [r7, #8]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d106      	bne.n	8003fe4 <StartDisplaySettings+0x5c>
    		oled_move_selection_inv(&SCRN_Display, &select_index);
 8003fd6:	f107 0309 	add.w	r3, r7, #9
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4819      	ldr	r0, [pc, #100]	; (8004044 <StartDisplaySettings+0xbc>)
 8003fde:	f7fe f84f 	bl	8002080 <oled_move_selection_inv>
 8003fe2:	e7db      	b.n	8003f9c <StartDisplaySettings+0x14>
    	} else if (button_state == LONG_PRESS) {
 8003fe4:	7a3b      	ldrb	r3, [r7, #8]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d1d8      	bne.n	8003f9c <StartDisplaySettings+0x14>
    		if (select_index == 0) {
 8003fea:	7a7b      	ldrb	r3, [r7, #9]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10b      	bne.n	8004008 <StartDisplaySettings+0x80>

    			if (current_contrast + CONTRAST_STEPSIZE <= 0xFF) {
 8003ff0:	897b      	ldrh	r3, [r7, #10]
 8003ff2:	2bcd      	cmp	r3, #205	; 0xcd
 8003ff4:	d802      	bhi.n	8003ffc <StartDisplaySettings+0x74>
    				current_contrast += CONTRAST_STEPSIZE;
 8003ff6:	897b      	ldrh	r3, [r7, #10]
 8003ff8:	3332      	adds	r3, #50	; 0x32
 8003ffa:	817b      	strh	r3, [r7, #10]
    			}
    			oled_set_contrast(current_contrast);
 8003ffc:	897b      	ldrh	r3, [r7, #10]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	4618      	mov	r0, r3
 8004002:	f7fe f909 	bl	8002218 <oled_set_contrast>
 8004006:	e7c9      	b.n	8003f9c <StartDisplaySettings+0x14>

    		} else if (select_index == 1) {
 8004008:	7a7b      	ldrb	r3, [r7, #9]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d10b      	bne.n	8004026 <StartDisplaySettings+0x9e>

    			if (current_contrast >= CONTRAST_STEPSIZE) {
 800400e:	897b      	ldrh	r3, [r7, #10]
 8004010:	2b31      	cmp	r3, #49	; 0x31
 8004012:	d902      	bls.n	800401a <StartDisplaySettings+0x92>
    				current_contrast -= CONTRAST_STEPSIZE;
 8004014:	897b      	ldrh	r3, [r7, #10]
 8004016:	3b32      	subs	r3, #50	; 0x32
 8004018:	817b      	strh	r3, [r7, #10]
    			}
    			oled_set_contrast(current_contrast);
 800401a:	897b      	ldrh	r3, [r7, #10]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	4618      	mov	r0, r3
 8004020:	f7fe f8fa 	bl	8002218 <oled_set_contrast>
 8004024:	e7ba      	b.n	8003f9c <StartDisplaySettings+0x14>

    		} else if (select_index == 2) {
 8004026:	7a7b      	ldrb	r3, [r7, #9]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d1b7      	bne.n	8003f9c <StartDisplaySettings+0x14>
    			vTaskResume(HomeHandle);
 800402c:	4b07      	ldr	r3, [pc, #28]	; (800404c <StartDisplaySettings+0xc4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f00a fdf1 	bl	800ec18 <vTaskResume>
    			ranonce = 0;
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]
    			vTaskSuspend(NULL);
 800403a:	2000      	movs	r0, #0
 800403c:	f00a fd44 	bl	800eac8 <vTaskSuspend>
    if (ranonce == 0) {
 8004040:	e7ac      	b.n	8003f9c <StartDisplaySettings+0x14>
 8004042:	bf00      	nop
 8004044:	080139e4 	.word	0x080139e4
 8004048:	20000920 	.word	0x20000920
 800404c:	200008f8 	.word	0x200008f8

08004050 <StartStats>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStats */
void StartStats(void *argument)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStats */
	uint8_t select_index = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
  /* Infinite loop */
  for(;;)
  {
    if (ranonce == 0) {
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10e      	bne.n	8004084 <StartStats+0x34>
    	OLED_SCREEN(&SCRN_Stats, NORMAL);
 8004066:	2100      	movs	r1, #0
 8004068:	4813      	ldr	r0, [pc, #76]	; (80040b8 <StartStats+0x68>)
 800406a:	f7fd fd9f 	bl	8001bac <OLED_SCREEN>
    	OLED_SELECT(&SCRN_Stats, select_index, OLED_NORESTORE);
 800406e:	7afb      	ldrb	r3, [r7, #11]
 8004070:	2200      	movs	r2, #0
 8004072:	4619      	mov	r1, r3
 8004074:	4810      	ldr	r0, [pc, #64]	; (80040b8 <StartStats+0x68>)
 8004076:	f7fd fe03 	bl	8001c80 <OLED_SELECT>
    	oled_show_stats();
 800407a:	f7fe f8e1 	bl	8002240 <oled_show_stats>
    	ranonce++;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3301      	adds	r3, #1
 8004082:	60fb      	str	r3, [r7, #12]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8004084:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <StartStats+0x6c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f107 010a 	add.w	r1, r7, #10
 800408c:	2200      	movs	r2, #0
 800408e:	4618      	mov	r0, r3
 8004090:	f00a f8f6 	bl	800e280 <xQueueReceive>
 8004094:	4603      	mov	r3, r0
 8004096:	2b01      	cmp	r3, #1
 8004098:	d1e2      	bne.n	8004060 <StartStats+0x10>
    	if (button_state == LONG_PRESS) {
 800409a:	7abb      	ldrb	r3, [r7, #10]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d1df      	bne.n	8004060 <StartStats+0x10>
    		vTaskResume(HomeHandle);
 80040a0:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <StartStats+0x70>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f00a fdb7 	bl	800ec18 <vTaskResume>
    		ranonce = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
    		vTaskSuspend(NULL);
 80040ae:	2000      	movs	r0, #0
 80040b0:	f00a fd0a 	bl	800eac8 <vTaskSuspend>
    if (ranonce == 0) {
 80040b4:	e7d4      	b.n	8004060 <StartStats+0x10>
 80040b6:	bf00      	nop
 80040b8:	080139f8 	.word	0x080139f8
 80040bc:	20000920 	.word	0x20000920
 80040c0:	200008f8 	.word	0x200008f8

080040c4 <StartUSBListen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUSBListen */
void StartUSBListen(void *argument)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUSBListen */
	char* command = NULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	613b      	str	r3, [r7, #16]
	char input;
	uint8_t initialised = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	75fb      	strb	r3, [r7, #23]
  /* Infinite loop */
  for(;;)
  {
	  if (xQueueReceive(USBInputHandle, &input, 0) == pdTRUE) {
 80040d4:	4b21      	ldr	r3, [pc, #132]	; (800415c <StartUSBListen+0x98>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f107 010f 	add.w	r1, r7, #15
 80040dc:	2200      	movs	r2, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	f00a f8ce 	bl	800e280 <xQueueReceive>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d133      	bne.n	8004152 <StartUSBListen+0x8e>
		  if (((uint8_t)input == 0x0D) && initialised) {
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	2b0d      	cmp	r3, #13
 80040ee:	d112      	bne.n	8004116 <StartUSBListen+0x52>
 80040f0:	7dfb      	ldrb	r3, [r7, #23]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00f      	beq.n	8004116 <StartUSBListen+0x52>
		  		cmd_parse(command);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe fdcb 	bl	8002c94 <cmd_parse>
		  		command = NULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	613b      	str	r3, [r7, #16]
		  		set_colour(FG_BRIGHTGREEN);
 8004102:	205c      	movs	r0, #92	; 0x5c
 8004104:	f001 f81a 	bl	800513c <set_colour>
		  		printf("\n\ruser@ruthless/ ");
 8004108:	4815      	ldr	r0, [pc, #84]	; (8004160 <StartUSBListen+0x9c>)
 800410a:	f00d f903 	bl	8011314 <iprintf>
		  		set_colour(FG_WHITE);
 800410e:	2025      	movs	r0, #37	; 0x25
 8004110:	f001 f814 	bl	800513c <set_colour>
 8004114:	e009      	b.n	800412a <StartUSBListen+0x66>
		  } else if (initialised){
 8004116:	7dfb      	ldrb	r3, [r7, #23]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d006      	beq.n	800412a <StartUSBListen+0x66>
		  		cmd_build(&command, input);
 800411c:	7bfa      	ldrb	r2, [r7, #15]
 800411e:	f107 0310 	add.w	r3, r7, #16
 8004122:	4611      	mov	r1, r2
 8004124:	4618      	mov	r0, r3
 8004126:	f7fe fe3d 	bl	8002da4 <cmd_build>
		  }

		  if ((input == 'i') && (initialised == 0)) {
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	2b69      	cmp	r3, #105	; 0x69
 800412e:	d110      	bne.n	8004152 <StartUSBListen+0x8e>
 8004130:	7dfb      	ldrb	r3, [r7, #23]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10d      	bne.n	8004152 <StartUSBListen+0x8e>
			  initialised++;
 8004136:	7dfb      	ldrb	r3, [r7, #23]
 8004138:	3301      	adds	r3, #1
 800413a:	75fb      	strb	r3, [r7, #23]
			  terminal_init();
 800413c:	f000 ffc6 	bl	80050cc <terminal_init>
			  set_colour(FG_BRIGHTGREEN);
 8004140:	205c      	movs	r0, #92	; 0x5c
 8004142:	f000 fffb 	bl	800513c <set_colour>
			  printf("\n\ruser@ruthless/ ");
 8004146:	4806      	ldr	r0, [pc, #24]	; (8004160 <StartUSBListen+0x9c>)
 8004148:	f00d f8e4 	bl	8011314 <iprintf>
			  set_colour(FG_WHITE);
 800414c:	2025      	movs	r0, #37	; 0x25
 800414e:	f000 fff5 	bl	800513c <set_colour>
		  }

	  }
	  osDelay(1);
 8004152:	2001      	movs	r0, #1
 8004154:	f009 fc45 	bl	800d9e2 <osDelay>
	  if (xQueueReceive(USBInputHandle, &input, 0) == pdTRUE) {
 8004158:	e7bc      	b.n	80040d4 <StartUSBListen+0x10>
 800415a:	bf00      	nop
 800415c:	2000092c 	.word	0x2000092c
 8004160:	08012fb8 	.word	0x08012fb8

08004164 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a04      	ldr	r2, [pc, #16]	; (8004184 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d101      	bne.n	800417a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004176:	f001 f83d 	bl	80051f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40000c00 	.word	0x40000c00

08004188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800418c:	b672      	cpsid	i
}
 800418e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004190:	e7fe      	b.n	8004190 <Error_Handler+0x8>

08004192 <enter_card>:
 *
 * @param card - Card to store
 * @param entry - Entry (Block number) to store card
 * @return RFS_OK if card was successfully stored
 * */
RFS_StatusTypeDef enter_card(Card* card, uint16_t entry, char* name) {
 8004192:	b5b0      	push	{r4, r5, r7, lr}
 8004194:	b086      	sub	sp, #24
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	460b      	mov	r3, r1
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	817b      	strh	r3, [r7, #10]
	uint16_t block_startaddr = entry * BLOCK_PAGECOUNT;
 80041a0:	897b      	ldrh	r3, [r7, #10]
 80041a2:	019b      	lsls	r3, r3, #6
 80041a4:	82fb      	strh	r3, [r7, #22]
	block_erase(entry); //Erase entire block ready for new data
 80041a6:	897b      	ldrh	r3, [r7, #10]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fe f917 	bl	80023dc <block_erase>
	enter_metadata(card, entry);
 80041ae:	897b      	ldrh	r3, [r7, #10]
 80041b0:	4619      	mov	r1, r3
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f842 	bl	800423c <enter_metadata>
	card->name = name;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	609a      	str	r2, [r3, #8]

	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000, (uint8_t*)card->name, strlen(card->name)) != HAL_OK) {
 80041be:	8afb      	ldrh	r3, [r7, #22]
 80041c0:	3301      	adds	r3, #1
 80041c2:	b29c      	uxth	r4, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	689d      	ldr	r5, [r3, #8]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fc f811 	bl	80001f4 <strlen>
 80041d2:	4603      	mov	r3, r0
 80041d4:	462a      	mov	r2, r5
 80041d6:	2100      	movs	r1, #0
 80041d8:	4620      	mov	r0, r4
 80041da:	f7fe f957 	bl	800248c <MEM_WRITE>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <enter_card+0x56>
		return RFS_WRITE_ERROR;
 80041e4:	2304      	movs	r3, #4
 80041e6:	e025      	b.n	8004234 <enter_card+0xa2>
	}
	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000 + strlen(card->name),card->uid ,card->uidsize) != HAL_OK) {
 80041e8:	8afb      	ldrh	r3, [r7, #22]
 80041ea:	3301      	adds	r3, #1
 80041ec:	b29c      	uxth	r4, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fb fffe 	bl	80001f4 <strlen>
 80041f8:	4603      	mov	r3, r0
 80041fa:	b299      	uxth	r1, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	791b      	ldrb	r3, [r3, #4]
 8004204:	4620      	mov	r0, r4
 8004206:	f7fe f941 	bl	800248c <MEM_WRITE>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <enter_card+0x82>
		return RFS_WRITE_ERROR;
 8004210:	2304      	movs	r3, #4
 8004212:	e00f      	b.n	8004234 <enter_card+0xa2>
	}
	if (MEM_WRITE(block_startaddr + DATAPAGE_OFFSET, 0x0000, card->contents, card->contents_size) != HAL_OK) {
 8004214:	8afb      	ldrh	r3, [r7, #22]
 8004216:	3302      	adds	r3, #2
 8004218:	b298      	uxth	r0, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	695a      	ldr	r2, [r3, #20]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8b1b      	ldrh	r3, [r3, #24]
 8004222:	2100      	movs	r1, #0
 8004224:	f7fe f932 	bl	800248c <MEM_WRITE>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <enter_card+0xa0>
		return RFS_WRITE_ERROR;
 800422e:	2304      	movs	r3, #4
 8004230:	e000      	b.n	8004234 <enter_card+0xa2>
	}

	return RFS_OK;
 8004232:	2300      	movs	r3, #0

}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bdb0      	pop	{r4, r5, r7, pc}

0800423c <enter_metadata>:
 * Write the card metadata into a block
 *
 * @param card - Card to write
 * @param block_num - Block number
 * */
RFS_StatusTypeDef enter_metadata(Card* card, uint16_t block_num) {
 800423c:	b590      	push	{r4, r7, lr}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	807b      	strh	r3, [r7, #2]
	uint8_t card_size = card->contents_size; //Card contents is uint8_t
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8b1b      	ldrh	r3, [r3, #24]
 800424c:	73fb      	strb	r3, [r7, #15]
	uint8_t read_protected = card->read_protected;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	7c1b      	ldrb	r3, [r3, #16]
 8004252:	73bb      	strb	r3, [r7, #14]
	uint8_t uid_size = card->uidsize;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	791b      	ldrb	r3, [r3, #4]
 8004258:	737b      	strb	r3, [r7, #13]
	uint8_t metasize = sizeof(card_size) + sizeof(uid_size) + sizeof(read_protected) + strlen(card->type);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fb ffc8 	bl	80001f4 <strlen>
 8004264:	4603      	mov	r3, r0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	3303      	adds	r3, #3
 800426a:	733b      	strb	r3, [r7, #12]
	uint8_t* metadata = malloc(metasize);
 800426c:	7b3b      	ldrb	r3, [r7, #12]
 800426e:	4618      	mov	r0, r3
 8004270:	f00c ff34 	bl	80110dc <malloc>
 8004274:	4603      	mov	r3, r0
 8004276:	60bb      	str	r3, [r7, #8]

	memcpy(metadata, (uint8_t*) card->type, strlen(card->type));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68dc      	ldr	r4, [r3, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4618      	mov	r0, r3
 8004282:	f7fb ffb7 	bl	80001f4 <strlen>
 8004286:	4603      	mov	r3, r0
 8004288:	461a      	mov	r2, r3
 800428a:	4621      	mov	r1, r4
 800428c:	68b8      	ldr	r0, [r7, #8]
 800428e:	f00c ff35 	bl	80110fc <memcpy>
	metadata[strlen(card->type) + 0] = card_size;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fb ffac 	bl	80001f4 <strlen>
 800429c:	4602      	mov	r2, r0
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	4413      	add	r3, r2
 80042a2:	7bfa      	ldrb	r2, [r7, #15]
 80042a4:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 1] = uid_size;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fb ffa2 	bl	80001f4 <strlen>
 80042b0:	4603      	mov	r3, r0
 80042b2:	3301      	adds	r3, #1
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	4413      	add	r3, r2
 80042b8:	7b7a      	ldrb	r2, [r7, #13]
 80042ba:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 2] = read_protected;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fb ff97 	bl	80001f4 <strlen>
 80042c6:	4603      	mov	r3, r0
 80042c8:	3302      	adds	r3, #2
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	4413      	add	r3, r2
 80042ce:	7bba      	ldrb	r2, [r7, #14]
 80042d0:	701a      	strb	r2, [r3, #0]

	if (MEM_WRITE(block_num * BLOCK_PAGECOUNT, 0x0000, metadata, metasize) != HAL_OK) {
 80042d2:	887b      	ldrh	r3, [r7, #2]
 80042d4:	019b      	lsls	r3, r3, #6
 80042d6:	b298      	uxth	r0, r3
 80042d8:	7b3b      	ldrb	r3, [r7, #12]
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	2100      	movs	r1, #0
 80042de:	f7fe f8d5 	bl	800248c <MEM_WRITE>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d004      	beq.n	80042f2 <enter_metadata+0xb6>
		free(metadata);
 80042e8:	68b8      	ldr	r0, [r7, #8]
 80042ea:	f00c feff 	bl	80110ec <free>
		return RFS_WRITE_ERROR;
 80042ee:	2304      	movs	r3, #4
 80042f0:	e003      	b.n	80042fa <enter_metadata+0xbe>
	}
	free(metadata);
 80042f2:	68b8      	ldr	r0, [r7, #8]
 80042f4:	f00c fefa 	bl	80110ec <free>
	return RFS_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd90      	pop	{r4, r7, pc}

08004302 <read_card_entry>:
 * Get card from entry number
 *
 * @param entry - Entry number of card
 * @return a new Card instance with read data
 * */
Card* read_card_entry(uint16_t entry) {
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	4603      	mov	r3, r0
 800430a:	80fb      	strh	r3, [r7, #6]
	Card* result = malloc(sizeof(Card));
 800430c:	201c      	movs	r0, #28
 800430e:	f00c fee5 	bl	80110dc <malloc>
 8004312:	4603      	mov	r3, r0
 8004314:	60fb      	str	r3, [r7, #12]

	if (read_metadata(result, entry) != RFS_OK) {
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	4619      	mov	r1, r3
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f81e 	bl	800435c <read_metadata>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <read_card_entry+0x28>
		return NULL;
 8004326:	2300      	movs	r3, #0
 8004328:	e014      	b.n	8004354 <read_card_entry+0x52>
	}

	if (read_nameuid(result, entry) != RFS_OK) {
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	4619      	mov	r1, r3
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f881 	bl	8004436 <read_nameuid>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <read_card_entry+0x3c>
		return NULL;
 800433a:	2300      	movs	r3, #0
 800433c:	e00a      	b.n	8004354 <read_card_entry+0x52>
	}

	if(read_cardcontents(result, entry) != RFS_OK) {
 800433e:	88fb      	ldrh	r3, [r7, #6]
 8004340:	4619      	mov	r1, r3
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f8e2 	bl	800450c <read_cardcontents>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <read_card_entry+0x50>
		return NULL;
 800434e:	2300      	movs	r3, #0
 8004350:	e000      	b.n	8004354 <read_card_entry+0x52>
	}

	return result;
 8004352:	68fb      	ldr	r3, [r7, #12]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <read_metadata>:
 *
 * @param result - Card to store data to
 * @param entry - entry to read from
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_metadata(Card* result, uint16_t entry) {
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	807b      	strh	r3, [r7, #2]
	uint16_t metadata_size = get_datasize(entry, METAPAGE_OFFSET);
 8004368:	887b      	ldrh	r3, [r7, #2]
 800436a:	2100      	movs	r1, #0
 800436c:	4618      	mov	r0, r3
 800436e:	f000 f8f5 	bl	800455c <get_datasize>
 8004372:	4603      	mov	r3, r0
 8004374:	82fb      	strh	r3, [r7, #22]
	uint8_t* metadata = malloc(metadata_size * sizeof(uint8_t));
 8004376:	8afb      	ldrh	r3, [r7, #22]
 8004378:	4618      	mov	r0, r3
 800437a:	f00c feaf 	bl	80110dc <malloc>
 800437e:	4603      	mov	r3, r0
 8004380:	613b      	str	r3, [r7, #16]
	char* type = malloc(((metadata_size - 3) + 1) * sizeof(char)); //+1 for null
 8004382:	8afb      	ldrh	r3, [r7, #22]
 8004384:	3b02      	subs	r3, #2
 8004386:	4618      	mov	r0, r3
 8004388:	f00c fea8 	bl	80110dc <malloc>
 800438c:	4603      	mov	r3, r0
 800438e:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, metadata, metadata_size) != HAL_OK) {
 8004390:	887b      	ldrh	r3, [r7, #2]
 8004392:	019b      	lsls	r3, r3, #6
 8004394:	b298      	uxth	r0, r3
 8004396:	8afb      	ldrh	r3, [r7, #22]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	2100      	movs	r1, #0
 800439c:	f7fe f90c 	bl	80025b8 <MEM_READPAGE>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d004      	beq.n	80043b0 <read_metadata+0x54>
		free(metadata);
 80043a6:	6938      	ldr	r0, [r7, #16]
 80043a8:	f00c fea0 	bl	80110ec <free>
		return RFS_READ_ERROR;
 80043ac:	2305      	movs	r3, #5
 80043ae:	e03e      	b.n	800442e <read_metadata+0xd2>
	}

	if ((uint8_t)type[0] == 0xFF) { //Simple check to see if we read an empty entry
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2bff      	cmp	r3, #255	; 0xff
 80043b6:	d104      	bne.n	80043c2 <read_metadata+0x66>
		free(metadata);
 80043b8:	6938      	ldr	r0, [r7, #16]
 80043ba:	f00c fe97 	bl	80110ec <free>
		return RFS_NO_CARD;
 80043be:	2301      	movs	r3, #1
 80043c0:	e035      	b.n	800442e <read_metadata+0xd2>
	}

	memcpy(type, metadata, metadata_size - 3);
 80043c2:	8afb      	ldrh	r3, [r7, #22]
 80043c4:	3b03      	subs	r3, #3
 80043c6:	461a      	mov	r2, r3
 80043c8:	6939      	ldr	r1, [r7, #16]
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f00c fe96 	bl	80110fc <memcpy>
	type[metadata_size - 3] = '\0';
 80043d0:	8afb      	ldrh	r3, [r7, #22]
 80043d2:	3b03      	subs	r3, #3
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4413      	add	r3, r2
 80043d8:	2200      	movs	r2, #0
 80043da:	701a      	strb	r2, [r3, #0]
	result->type = type;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	60da      	str	r2, [r3, #12]
	result->contents_size = metadata[metadata_size - 3];
 80043e2:	8afb      	ldrh	r3, [r7, #22]
 80043e4:	3b03      	subs	r3, #3
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4413      	add	r3, r2
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	831a      	strh	r2, [r3, #24]
	result->uidsize = metadata[metadata_size - 2];
 80043f2:	8afb      	ldrh	r3, [r7, #22]
 80043f4:	3b02      	subs	r3, #2
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4413      	add	r3, r2
 80043fa:	781a      	ldrb	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	711a      	strb	r2, [r3, #4]
	if (metadata[metadata_size - 1] == READ_PROTECTED) { //Card is read protected
 8004400:	8afb      	ldrh	r3, [r7, #22]
 8004402:	3b01      	subs	r3, #1
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4413      	add	r3, r2
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d104      	bne.n	8004418 <read_metadata+0xbc>
		free(metadata);
 800440e:	6938      	ldr	r0, [r7, #16]
 8004410:	f00c fe6c 	bl	80110ec <free>
		return RFS_CARD_PROTECTED;
 8004414:	2303      	movs	r3, #3
 8004416:	e00a      	b.n	800442e <read_metadata+0xd2>
	}
	result->read_protected = metadata[metadata_size - 1];
 8004418:	8afb      	ldrh	r3, [r7, #22]
 800441a:	3b01      	subs	r3, #1
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4413      	add	r3, r2
 8004420:	781a      	ldrb	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	741a      	strb	r2, [r3, #16]
	free(metadata);
 8004426:	6938      	ldr	r0, [r7, #16]
 8004428:	f00c fe60 	bl	80110ec <free>

	return RFS_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <read_nameuid>:
 * Read the name and uid of card entry. Note that metadata must be read before name and uid can be read
 * @param result - Result to store data to
 * @param entry - Entry to read from
 * @return RFS_OK if name and uid was successfully read
 * */
RFS_StatusTypeDef read_nameuid(Card* result, uint16_t entry) {
 8004436:	b580      	push	{r7, lr}
 8004438:	b086      	sub	sp, #24
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	460b      	mov	r3, r1
 8004440:	807b      	strh	r3, [r7, #2]
	uint16_t datasize = get_datasize(entry, NAMEPAGE_OFFSET);
 8004442:	887b      	ldrh	r3, [r7, #2]
 8004444:	2101      	movs	r1, #1
 8004446:	4618      	mov	r0, r3
 8004448:	f000 f888 	bl	800455c <get_datasize>
 800444c:	4603      	mov	r3, r0
 800444e:	82fb      	strh	r3, [r7, #22]
	uint8_t* raw_data = malloc(datasize*sizeof(uint8_t));
 8004450:	8afb      	ldrh	r3, [r7, #22]
 8004452:	4618      	mov	r0, r3
 8004454:	f00c fe42 	bl	80110dc <malloc>
 8004458:	4603      	mov	r3, r0
 800445a:	613b      	str	r3, [r7, #16]
	char* name = malloc((datasize - result->uidsize + 1) * sizeof(char)); //+1 for null
 800445c:	8afb      	ldrh	r3, [r7, #22]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	7912      	ldrb	r2, [r2, #4]
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	3301      	adds	r3, #1
 8004466:	4618      	mov	r0, r3
 8004468:	f00c fe38 	bl	80110dc <malloc>
 800446c:	4603      	mov	r3, r0
 800446e:	60fb      	str	r3, [r7, #12]
	uint8_t* uid = malloc((result->uidsize) * sizeof(uint8_t));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	791b      	ldrb	r3, [r3, #4]
 8004474:	4618      	mov	r0, r3
 8004476:	f00c fe31 	bl	80110dc <malloc>
 800447a:	4603      	mov	r3, r0
 800447c:	60bb      	str	r3, [r7, #8]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + NAMEPAGE_OFFSET, 0x0000, raw_data, datasize) != HAL_OK) {
 800447e:	887b      	ldrh	r3, [r7, #2]
 8004480:	019b      	lsls	r3, r3, #6
 8004482:	b29b      	uxth	r3, r3
 8004484:	3301      	adds	r3, #1
 8004486:	b298      	uxth	r0, r3
 8004488:	8afb      	ldrh	r3, [r7, #22]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	2100      	movs	r1, #0
 800448e:	f7fe f893 	bl	80025b8 <MEM_READPAGE>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d004      	beq.n	80044a2 <read_nameuid+0x6c>
		free(raw_data);
 8004498:	6938      	ldr	r0, [r7, #16]
 800449a:	f00c fe27 	bl	80110ec <free>
		return RFS_READ_ERROR;
 800449e:	2305      	movs	r3, #5
 80044a0:	e030      	b.n	8004504 <read_nameuid+0xce>
	}

	if ((uint8_t)name[0] == 0xFF) { //Simple check to see if we read an empty entry
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2bff      	cmp	r3, #255	; 0xff
 80044a8:	d104      	bne.n	80044b4 <read_nameuid+0x7e>
		free(raw_data);
 80044aa:	6938      	ldr	r0, [r7, #16]
 80044ac:	f00c fe1e 	bl	80110ec <free>
		return RFS_NO_CARD;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e027      	b.n	8004504 <read_nameuid+0xce>
	}

	memcpy(name, raw_data, datasize - result->uidsize);
 80044b4:	8afb      	ldrh	r3, [r7, #22]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	7912      	ldrb	r2, [r2, #4]
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	461a      	mov	r2, r3
 80044be:	6939      	ldr	r1, [r7, #16]
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f00c fe1b 	bl	80110fc <memcpy>
	name[datasize - result->uidsize] = '\0';
 80044c6:	8afb      	ldrh	r3, [r7, #22]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	7912      	ldrb	r2, [r2, #4]
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	461a      	mov	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	2200      	movs	r2, #0
 80044d6:	701a      	strb	r2, [r3, #0]
	result->name = name;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	609a      	str	r2, [r3, #8]

	memcpy(uid, raw_data + strlen(name), result->uidsize);
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f7fb fe88 	bl	80001f4 <strlen>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1899      	adds	r1, r3, r2
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	791b      	ldrb	r3, [r3, #4]
 80044ee:	461a      	mov	r2, r3
 80044f0:	68b8      	ldr	r0, [r7, #8]
 80044f2:	f00c fe03 	bl	80110fc <memcpy>
	result->uid = uid;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	601a      	str	r2, [r3, #0]
	free(raw_data);
 80044fc:	6938      	ldr	r0, [r7, #16]
 80044fe:	f00c fdf5 	bl	80110ec <free>

	return RFS_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3718      	adds	r7, #24
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <read_cardcontents>:
/**
 * Read the contents of a card entry
 * @param entry - Entry to read contents of
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_cardcontents(Card* result, uint16_t entry) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	807b      	strh	r3, [r7, #2]
	uint8_t* contents = malloc(result->contents_size * sizeof(uint8_t));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8b1b      	ldrh	r3, [r3, #24]
 800451c:	4618      	mov	r0, r3
 800451e:	f00c fddd 	bl	80110dc <malloc>
 8004522:	4603      	mov	r3, r0
 8004524:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + DATAPAGE_OFFSET, 0x0000, contents, result->contents_size) != HAL_OK) {
 8004526:	887b      	ldrh	r3, [r7, #2]
 8004528:	019b      	lsls	r3, r3, #6
 800452a:	b29b      	uxth	r3, r3
 800452c:	3302      	adds	r3, #2
 800452e:	b298      	uxth	r0, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	8b1b      	ldrh	r3, [r3, #24]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	2100      	movs	r1, #0
 8004538:	f7fe f83e 	bl	80025b8 <MEM_READPAGE>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d004      	beq.n	800454c <read_cardcontents+0x40>
		free(contents);
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f00c fdd2 	bl	80110ec <free>
		return RFS_READ_ERROR;
 8004548:	2305      	movs	r3, #5
 800454a:	e003      	b.n	8004554 <read_cardcontents+0x48>
	}

	result->contents = contents;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	615a      	str	r2, [r3, #20]
	return RFS_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <get_datasize>:
 * Get the size of a chunk of data from specific block and page
 * @param entry - Entry to read from
 * @param page - Page to begin reading from
 * @return size of data in bytes
 * */
uint16_t get_datasize(uint16_t entry, uint8_t page) {
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	460a      	mov	r2, r1
 8004566:	80fb      	strh	r3, [r7, #6]
 8004568:	4613      	mov	r3, r2
 800456a:	717b      	strb	r3, [r7, #5]
	uint16_t size = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	81fb      	strh	r3, [r7, #14]
	uint8_t byte_read = 0x00;
 8004570:	2300      	movs	r3, #0
 8004572:	737b      	strb	r3, [r7, #13]

	while(byte_read != 0xFF) {
 8004574:	e014      	b.n	80045a0 <get_datasize+0x44>
		if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + page, size, &byte_read, 1) != HAL_OK) {
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	019b      	lsls	r3, r3, #6
 800457a:	b29a      	uxth	r2, r3
 800457c:	797b      	ldrb	r3, [r7, #5]
 800457e:	b29b      	uxth	r3, r3
 8004580:	4413      	add	r3, r2
 8004582:	b298      	uxth	r0, r3
 8004584:	f107 020d 	add.w	r2, r7, #13
 8004588:	89f9      	ldrh	r1, [r7, #14]
 800458a:	2301      	movs	r3, #1
 800458c:	f7fe f814 	bl	80025b8 <MEM_READPAGE>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <get_datasize+0x3e>
			return 0; //Error occured whilst reading
 8004596:	2300      	movs	r3, #0
 8004598:	e008      	b.n	80045ac <get_datasize+0x50>
		}
		size++;
 800459a:	89fb      	ldrh	r3, [r7, #14]
 800459c:	3301      	adds	r3, #1
 800459e:	81fb      	strh	r3, [r7, #14]
	while(byte_read != 0xFF) {
 80045a0:	7b7b      	ldrb	r3, [r7, #13]
 80045a2:	2bff      	cmp	r3, #255	; 0xff
 80045a4:	d1e7      	bne.n	8004576 <get_datasize+0x1a>
	}

	return size - 1; //Last iteration will add 1 to true size so -1
 80045a6:	89fb      	ldrh	r3, [r7, #14]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29b      	uxth	r3, r3
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <free_card>:

/**
 * Free a card instance
 * @param card - Card to free
 * */
void free_card(Card* card) {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
	free(card->contents);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f00c fd93 	bl	80110ec <free>
	free(card->name);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f00c fd8e 	bl	80110ec <free>
	free(card->type);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f00c fd89 	bl	80110ec <free>
	free(card->uid);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f00c fd84 	bl	80110ec <free>
	free(card);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f00c fd81 	bl	80110ec <free>
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <get_number_files_section>:
 * Get number of files in given section of memory
 * @param start - Start block
 * @param count - Number of block to check ahead of start
 * @return number of files present in section
 * */
uint32_t get_number_files_section (uint16_t start, uint32_t count) {
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	4603      	mov	r3, r0
 80045fa:	6039      	str	r1, [r7, #0]
 80045fc:	80fb      	strh	r3, [r7, #6]
	int file_count = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]

	for (int i = start; i < start + count; i++) {
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	e00d      	b.n	8004624 <get_number_files_section+0x32>
		if (entry_present(i) == RFS_OK) {
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	b29b      	uxth	r3, r3
 800460c:	4618      	mov	r0, r3
 800460e:	f000 f88b 	bl	8004728 <entry_present>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d102      	bne.n	800461e <get_number_files_section+0x2c>
			file_count++;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3301      	adds	r3, #1
 800461c:	60fb      	str	r3, [r7, #12]
	for (int i = start; i < start + count; i++) {
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	3301      	adds	r3, #1
 8004622:	60bb      	str	r3, [r7, #8]
 8004624:	88fa      	ldrh	r2, [r7, #6]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	441a      	add	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	429a      	cmp	r2, r3
 800462e:	d8eb      	bhi.n	8004608 <get_number_files_section+0x16>
		}
	}

	return file_count;
 8004630:	68fb      	ldr	r3, [r7, #12]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <get_number_files_all>:

/**
 * Get number of files currently stored
 * @return number of files stored
 * */
uint32_t get_number_files_all(void) {
 800463a:	b580      	push	{r7, lr}
 800463c:	af00      	add	r7, sp, #0
	return get_number_files_section(0, BLOCK_COUNT - 2); //-2 since last two blocks are for read and write count stats
 800463e:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8004642:	2000      	movs	r0, #0
 8004644:	f7ff ffd5 	bl	80045f2 <get_number_files_section>
 8004648:	4603      	mov	r3, r0
}
 800464a:	4618      	mov	r0, r3
 800464c:	bd80      	pop	{r7, pc}

0800464e <get_files_section>:
 * @param start - Start block number
 * @param count - Number of files to read
 * @param result - Array to store file names
 * @return RFS_OK if files were successfully read
 * */
RFS_StatusTypeDef get_files_section (char** result, uint16_t start, uint32_t count) {
 800464e:	b5b0      	push	{r4, r5, r7, lr}
 8004650:	b088      	sub	sp, #32
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	460b      	mov	r3, r1
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	817b      	strh	r3, [r7, #10]
	Card* work;
	uint32_t file_index = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	61bb      	str	r3, [r7, #24]

	for (int i = start; i < start + count; i++) {
 8004660:	897b      	ldrh	r3, [r7, #10]
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	e043      	b.n	80046ee <get_files_section+0xa0>
		if (entry_present(i) == RFS_OK) {
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	b29b      	uxth	r3, r3
 800466a:	4618      	mov	r0, r3
 800466c:	f000 f85c 	bl	8004728 <entry_present>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d138      	bne.n	80046e8 <get_files_section+0x9a>
			work = read_card_entry(i);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	b29b      	uxth	r3, r3
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff fe41 	bl	8004302 <read_card_entry>
 8004680:	61f8      	str	r0, [r7, #28]
			result[file_index] = malloc(strlen(work->name) + 1);
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	4618      	mov	r0, r3
 8004688:	f7fb fdb4 	bl	80001f4 <strlen>
 800468c:	4603      	mov	r3, r0
 800468e:	1c59      	adds	r1, r3, #1
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	18d4      	adds	r4, r2, r3
 8004698:	4608      	mov	r0, r1
 800469a:	f00c fd1f 	bl	80110dc <malloc>
 800469e:	4603      	mov	r3, r0
 80046a0:	6023      	str	r3, [r4, #0]
			memcpy(result[file_index], work->name, strlen(work->name));
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4413      	add	r3, r2
 80046aa:	681c      	ldr	r4, [r3, #0]
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	689d      	ldr	r5, [r3, #8]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fb fd9d 	bl	80001f4 <strlen>
 80046ba:	4603      	mov	r3, r0
 80046bc:	461a      	mov	r2, r3
 80046be:	4629      	mov	r1, r5
 80046c0:	4620      	mov	r0, r4
 80046c2:	f00c fd1b 	bl	80110fc <memcpy>
			result[file_index][strlen(work->name)] = '\0';
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4413      	add	r3, r2
 80046ce:	681c      	ldr	r4, [r3, #0]
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fb fd8d 	bl	80001f4 <strlen>
 80046da:	4603      	mov	r3, r0
 80046dc:	4423      	add	r3, r4
 80046de:	2200      	movs	r2, #0
 80046e0:	701a      	strb	r2, [r3, #0]
			file_index++;
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	3301      	adds	r3, #1
 80046e6:	61bb      	str	r3, [r7, #24]
	for (int i = start; i < start + count; i++) {
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	3301      	adds	r3, #1
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	897a      	ldrh	r2, [r7, #10]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	441a      	add	r2, r3
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d8b5      	bhi.n	8004666 <get_files_section+0x18>
		}
	}

	free_card(work);
 80046fa:	69f8      	ldr	r0, [r7, #28]
 80046fc:	f7ff ff5a 	bl	80045b4 <free_card>
	return RFS_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3720      	adds	r7, #32
 8004706:	46bd      	mov	sp, r7
 8004708:	bdb0      	pop	{r4, r5, r7, pc}

0800470a <get_all_files>:
 * Get the names of all currently stored cards
 *
 * @param result - Array to store file names
 * @return RFS_OK if all file names were read correctly
 * */
RFS_StatusTypeDef get_all_files(char** result) {
 800470a:	b580      	push	{r7, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
	return get_files_section(result, 0, BLOCK_COUNT - 2); //-2 since last two blocks are for read and write count stats
 8004712:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8004716:	2100      	movs	r1, #0
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff ff98 	bl	800464e <get_files_section>
 800471e:	4603      	mov	r3, r0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <entry_present>:
 * Check if entry is present
 *
 * @param entry - Entry to check
 * @return RFS_OK if entry is present
 * */
RFS_StatusTypeDef entry_present(uint16_t entry) {
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	80fb      	strh	r3, [r7, #6]
	uint8_t byte_read;

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, &byte_read, 1) != HAL_OK) {
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	019b      	lsls	r3, r3, #6
 8004736:	b298      	uxth	r0, r3
 8004738:	f107 020f 	add.w	r2, r7, #15
 800473c:	2301      	movs	r3, #1
 800473e:	2100      	movs	r1, #0
 8004740:	f7fd ff3a 	bl	80025b8 <MEM_READPAGE>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <entry_present+0x26>
		return RFS_READ_ERROR;
 800474a:	2305      	movs	r3, #5
 800474c:	e005      	b.n	800475a <entry_present+0x32>
	}

	if (byte_read == 0xFF) {
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	2bff      	cmp	r3, #255	; 0xff
 8004752:	d101      	bne.n	8004758 <entry_present+0x30>
		return RFS_NO_CARD;
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <entry_present+0x32>
	}

	return RFS_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <get_file_name>:
/**
 * Get the file name of a given entry
 * @param entry - Entry to get name of
 * @return pointer to name
 * */
char* get_file_name(uint16_t entry) {
 8004762:	b580      	push	{r7, lr}
 8004764:	b084      	sub	sp, #16
 8004766:	af00      	add	r7, sp, #0
 8004768:	4603      	mov	r3, r0
 800476a:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff ffda 	bl	8004728 <entry_present>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <get_file_name+0x1c>
		return NULL;
 800477a:	2300      	movs	r3, #0
 800477c:	e01a      	b.n	80047b4 <get_file_name+0x52>
	}

	work = read_card_entry(entry);
 800477e:	88fb      	ldrh	r3, [r7, #6]
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff fdbe 	bl	8004302 <read_card_entry>
 8004786:	60f8      	str	r0, [r7, #12]

	char* name = malloc((strlen(work->name) + 1) * sizeof(char));
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	4618      	mov	r0, r3
 800478e:	f7fb fd31 	bl	80001f4 <strlen>
 8004792:	4603      	mov	r3, r0
 8004794:	3301      	adds	r3, #1
 8004796:	4618      	mov	r0, r3
 8004798:	f00c fca0 	bl	80110dc <malloc>
 800479c:	4603      	mov	r3, r0
 800479e:	60bb      	str	r3, [r7, #8]
	strcpy(name, work->name);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	4619      	mov	r1, r3
 80047a6:	68b8      	ldr	r0, [r7, #8]
 80047a8:	f00c ff48 	bl	801163c <strcpy>
	free_card(work);
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f7ff ff01 	bl	80045b4 <free_card>

	return name;
 80047b2:	68bb      	ldr	r3, [r7, #8]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <get_file_entry>:
/**
 * Get entry number of file with given name
 * @param name - File name to look for
 * @return Entry number (-1 if file doesn't exist)
 * */
int get_file_entry(char* name) {
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
	Card* work;

	for (int i = 0; i < BLOCK_COUNT - 2; i++) {
 80047c4:	2300      	movs	r3, #0
 80047c6:	60bb      	str	r3, [r7, #8]
 80047c8:	e01e      	b.n	8004808 <get_file_entry+0x4c>
		if (entry_present(i) == RFS_OK) {
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff ffaa 	bl	8004728 <entry_present>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d113      	bne.n	8004802 <get_file_entry+0x46>
			work = read_card_entry(i);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fd8f 	bl	8004302 <read_card_entry>
 80047e4:	60f8      	str	r0, [r7, #12]
			if (strcmp(work->name, name) == 0) {
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fb fcf7 	bl	80001e0 <strcmp>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d104      	bne.n	8004802 <get_file_entry+0x46>
				free_card(work);
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f7ff fedb 	bl	80045b4 <free_card>
				return i;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	e00c      	b.n	800481c <get_file_entry+0x60>
	for (int i = 0; i < BLOCK_COUNT - 2; i++) {
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	3301      	adds	r3, #1
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f240 32fd 	movw	r2, #1021	; 0x3fd
 800480e:	4293      	cmp	r3, r2
 8004810:	dddb      	ble.n	80047ca <get_file_entry+0xe>
			}
		}
	}
	free_card(work);
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f7ff fece 	bl	80045b4 <free_card>
	return -1; //shouldn't get here
 8004818:	f04f 33ff 	mov.w	r3, #4294967295
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <free_filenames>:
/**
 * Free list of file names
 * @param file_names - File names
 * @param size -  Number of file names
 * */
void free_filenames(char** file_names, int size) {
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++) {
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	e00a      	b.n	800484a <free_filenames+0x26>
		free(file_names[i]);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	4413      	add	r3, r2
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f00c fc54 	bl	80110ec <free>
	for (int i = 0; i < size; i++) {
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3301      	adds	r3, #1
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	dbf0      	blt.n	8004834 <free_filenames+0x10>
	}
	free(file_names);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f00c fc4a 	bl	80110ec <free>
}
 8004858:	bf00      	nop
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <remove_card>:

/**
 * Remove card from file system
 * @param entry - Entry to remove
 * */
void remove_card(uint16_t entry) {
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	80fb      	strh	r3, [r7, #6]
	block_erase(entry);
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	4618      	mov	r0, r3
 800486e:	f7fd fdb5 	bl	80023dc <block_erase>
}
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <remove_card_byname>:
/**
 * Remove card by name
 * @param name - Name of card
 * @return RFS_OK if card was successfully removed
 * */
RFS_StatusTypeDef remove_card_byname(char* name) {
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
	Card* work;

	for (int block = 0; block < BLOCK_COUNT; block++) {
 8004882:	2300      	movs	r3, #0
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	e026      	b.n	80048d6 <remove_card_byname+0x5c>
		if (entry_present(block) == RFS_OK) {
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	b29b      	uxth	r3, r3
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff ff4b 	bl	8004728 <entry_present>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d118      	bne.n	80048ca <remove_card_byname+0x50>
			work = read_card_entry(block);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	b29b      	uxth	r3, r3
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff fd30 	bl	8004302 <read_card_entry>
 80048a2:	60f8      	str	r0, [r7, #12]
			if (strcmp(name, work->name) == 0) {
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fb fc98 	bl	80001e0 <strcmp>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d109      	bne.n	80048ca <remove_card_byname+0x50>
				remove_card(block);
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff ffd0 	bl	8004860 <remove_card>
				free_card(work);
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f7ff fe77 	bl	80045b4 <free_card>
				return RFS_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	e00a      	b.n	80048e0 <remove_card_byname+0x66>
			}
		}
		free_card(work);
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f7ff fe72 	bl	80045b4 <free_card>
	for (int block = 0; block < BLOCK_COUNT; block++) {
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	3301      	adds	r3, #1
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048dc:	dbd4      	blt.n	8004888 <remove_card_byname+0xe>
	}

	return RFS_NO_CARD;
 80048de:	2301      	movs	r3, #1
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <modify_card>:
 * @param page - Card page number to modify
 * @param data - New data for page
 * @param name - New name for file (Optional)
 * @return RFS_OK if file was successfully modified
 * */
RFS_StatusTypeDef modify_card(char* file_to_mod, int page, uint8_t* data, char* new_name) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
	int entry = get_file_entry(file_to_mod);
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f7ff ff60 	bl	80047bc <get_file_entry>
 80048fc:	6178      	str	r0, [r7, #20]

	if (entry == -1) {
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	d101      	bne.n	800490a <modify_card+0x22>
		return RFS_READ_ERROR;
 8004906:	2305      	movs	r3, #5
 8004908:	e028      	b.n	800495c <modify_card+0x74>
	}
	Card* old = read_card_entry(entry);
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	b29b      	uxth	r3, r3
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff fcf7 	bl	8004302 <read_card_entry>
 8004914:	6138      	str	r0, [r7, #16]

	if ((page != -1) && (data != NULL)) {
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d00a      	beq.n	8004934 <modify_card+0x4c>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d007      	beq.n	8004934 <modify_card+0x4c>
		memcpy(old->contents + (UL_PAGESIZE * page), data, UL_PAGESIZE);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	0092      	lsls	r2, r2, #2
 800492c:	4413      	add	r3, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6812      	ldr	r2, [r2, #0]
 8004932:	601a      	str	r2, [r3, #0]
	}

	if (new_name != NULL) {
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <modify_card+0x62>
		enter_card(old, entry, new_name);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	b29b      	uxth	r3, r3
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	4619      	mov	r1, r3
 8004942:	6938      	ldr	r0, [r7, #16]
 8004944:	f7ff fc25 	bl	8004192 <enter_card>
 8004948:	e007      	b.n	800495a <modify_card+0x72>
	} else {
		enter_card(old, entry, old->name);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	b299      	uxth	r1, r3
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	461a      	mov	r2, r3
 8004954:	6938      	ldr	r0, [r7, #16]
 8004956:	f7ff fc1c 	bl	8004192 <enter_card>
	}

	//free_card(old);
	return RFS_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	0000      	movs	r0, r0
	...

08004968 <get_used_size>:

/**
 * Calculate the used size of memory in MiB
 * @return size of memory used in MiB
 * */
uint32_t get_used_size(void) {
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
	int file_count = get_number_files_all();
 800496e:	f7ff fe64 	bl	800463a <get_number_files_all>
 8004972:	4603      	mov	r3, r0
 8004974:	607b      	str	r3, [r7, #4]

	return (BLOCK_SIZE * file_count);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fb ff16 	bl	80007a8 <__aeabi_i2d>
 800497c:	a308      	add	r3, pc, #32	; (adr r3, 80049a0 <get_used_size+0x38>)
 800497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004982:	f7fb fc95 	bl	80002b0 <__aeabi_dmul>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4610      	mov	r0, r2
 800498c:	4619      	mov	r1, r3
 800498e:	f7fb ff75 	bl	800087c <__aeabi_d2uiz>
 8004992:	4603      	mov	r3, r0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	f3af 8000 	nop.w
 80049a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80049a4:	3fb0624d 	.word	0x3fb0624d

080049a8 <get_free_size>:

/**
 * Get size of memory that is free
 * @return size of memory that is free in MiB
 * */
uint32_t get_free_size(void) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
	return MEM_SIZE - get_used_size();
 80049ac:	f7ff ffdc 	bl	8004968 <get_used_size>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <get_used_size_str>:

/**
 * Get used size as a string (Useful for printing to OLED)
 * @param result - Pointer to string to write to
 * */
void get_used_size_str(char* result) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
	uint32_t used = get_used_size();
 80049c4:	f7ff ffd0 	bl	8004968 <get_used_size>
 80049c8:	60f8      	str	r0, [r7, #12]
	sprintf(result, "%i", used);
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4903      	ldr	r1, [pc, #12]	; (80049dc <get_used_size_str+0x20>)
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f00c fe14 	bl	80115fc <siprintf>
}
 80049d4:	bf00      	nop
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	08013004 	.word	0x08013004

080049e0 <get_free_size_str>:

/**
 * Get free size as a string
 * @param result - Pointer to string to write to
 * */
void get_free_size_str(char* result) {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
	uint32_t free = get_free_size();
 80049e8:	f7ff ffde 	bl	80049a8 <get_free_size>
 80049ec:	60f8      	str	r0, [r7, #12]
	sprintf(result, "%i", free);
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4903      	ldr	r1, [pc, #12]	; (8004a00 <get_free_size_str+0x20>)
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f00c fe02 	bl	80115fc <siprintf>
}
 80049f8:	bf00      	nop
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	08013004 	.word	0x08013004

08004a04 <inc_write_count>:

/**
 * Increment the total write count by 1
 * @return RFS_OK if value was successfully incremented
 * */
RFS_StatusTypeDef inc_write_count(void) {
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
	uint32_t new_total = get_total_writes() + 1;
 8004a0a:	f000 f853 	bl	8004ab4 <get_total_writes>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	3301      	adds	r3, #1
 8004a12:	607b      	str	r3, [r7, #4]
	uint8_t new_writes[sizeof(uint32_t)] = {new_total, new_total >> 8, new_total >> 16, new_total >> 24};
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	703b      	strb	r3, [r7, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	0a1b      	lsrs	r3, r3, #8
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	707b      	strb	r3, [r7, #1]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	0c1b      	lsrs	r3, r3, #16
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	70bb      	strb	r3, [r7, #2]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	0e1b      	lsrs	r3, r3, #24
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	70fb      	strb	r3, [r7, #3]

	block_erase(WRITE_NUM_BLOCK);
 8004a32:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8004a36:	f7fd fcd1 	bl	80023dc <block_erase>
	if (MEM_WRITE(BLOCK_PAGECOUNT * WRITE_NUM_BLOCK, 0x0000, new_writes, sizeof(uint32_t)) != HAL_OK) {
 8004a3a:	463a      	mov	r2, r7
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	2100      	movs	r1, #0
 8004a40:	f64f 7080 	movw	r0, #65408	; 0xff80
 8004a44:	f7fd fd22 	bl	800248c <MEM_WRITE>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <inc_write_count+0x4e>
		return RFS_WRITE_ERROR;
 8004a4e:	2304      	movs	r3, #4
 8004a50:	e000      	b.n	8004a54 <inc_write_count+0x50>
	}

	return RFS_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <inc_read_count>:

/**
 * Increment the total read count by 1
 * @return RFS_OK if value was successfully incremented
 * */
RFS_StatusTypeDef inc_read_count(void) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
	uint32_t new_total = get_total_reads() + 1;
 8004a62:	f000 f841 	bl	8004ae8 <get_total_reads>
 8004a66:	4603      	mov	r3, r0
 8004a68:	3301      	adds	r3, #1
 8004a6a:	607b      	str	r3, [r7, #4]
	uint8_t new_writes[sizeof(uint32_t)] = {new_total, new_total >> 8, new_total >> 16, new_total >> 24};
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	703b      	strb	r3, [r7, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	0a1b      	lsrs	r3, r3, #8
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	707b      	strb	r3, [r7, #1]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	70bb      	strb	r3, [r7, #2]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	0e1b      	lsrs	r3, r3, #24
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	70fb      	strb	r3, [r7, #3]

	block_erase(READ_NUM_BLOCK);
 8004a8a:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8004a8e:	f7fd fca5 	bl	80023dc <block_erase>
	if (MEM_WRITE(BLOCK_PAGECOUNT * READ_NUM_BLOCK, 0x0000, new_writes, sizeof(uint32_t)) != HAL_OK) {
 8004a92:	463a      	mov	r2, r7
 8004a94:	2304      	movs	r3, #4
 8004a96:	2100      	movs	r1, #0
 8004a98:	f64f 70c0 	movw	r0, #65472	; 0xffc0
 8004a9c:	f7fd fcf6 	bl	800248c <MEM_WRITE>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <inc_read_count+0x4e>
		return RFS_WRITE_ERROR;
 8004aa6:	2304      	movs	r3, #4
 8004aa8:	e000      	b.n	8004aac <inc_read_count+0x50>
	}

	return RFS_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <get_total_writes>:

/**
 * Get total number of writes made to FS (Used in stats task)
 * @return Total number of writes made to mem (Stored at block number WRITE_NUM_BLOCK)
 * */
uint32_t get_total_writes(void) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
	uint8_t writes[sizeof(uint32_t)];

	MEM_READPAGE(BLOCK_PAGECOUNT * WRITE_NUM_BLOCK, 0x0000, writes, sizeof(uint32_t));
 8004aba:	463a      	mov	r2, r7
 8004abc:	2304      	movs	r3, #4
 8004abe:	2100      	movs	r1, #0
 8004ac0:	f64f 7080 	movw	r0, #65408	; 0xff80
 8004ac4:	f7fd fd78 	bl	80025b8 <MEM_READPAGE>

	uint32_t writes_u32 = writes[3] << 24 | writes[2] << 16 | writes[1] << 8 | writes[0];
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	061a      	lsls	r2, r3, #24
 8004acc:	78bb      	ldrb	r3, [r7, #2]
 8004ace:	041b      	lsls	r3, r3, #16
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	787b      	ldrb	r3, [r7, #1]
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	783a      	ldrb	r2, [r7, #0]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	607b      	str	r3, [r7, #4]
	return writes_u32;
 8004ade:	687b      	ldr	r3, [r7, #4]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <get_total_reads>:

/**
 * Get total number of reads made of phyiscaly cards (Used in stats task)
 * @return Total number of reads(Stored at block number READ_NUM_BLOCK)
 * */
uint32_t get_total_reads(void) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
	uint8_t reads[sizeof(uint32_t)];

	MEM_READPAGE(BLOCK_PAGECOUNT * READ_NUM_BLOCK, 0x0000, reads, sizeof(uint32_t));
 8004aee:	463a      	mov	r2, r7
 8004af0:	2304      	movs	r3, #4
 8004af2:	2100      	movs	r1, #0
 8004af4:	f64f 70c0 	movw	r0, #65472	; 0xffc0
 8004af8:	f7fd fd5e 	bl	80025b8 <MEM_READPAGE>

	uint32_t reads_u32 = reads[3] << 24 | reads[2] << 16 | reads[1] << 8 | reads[0];
 8004afc:	78fb      	ldrb	r3, [r7, #3]
 8004afe:	061a      	lsls	r2, r3, #24
 8004b00:	78bb      	ldrb	r3, [r7, #2]
 8004b02:	041b      	lsls	r3, r3, #16
 8004b04:	431a      	orrs	r2, r3
 8004b06:	787b      	ldrb	r3, [r7, #1]
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	783a      	ldrb	r2, [r7, #0]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	607b      	str	r3, [r7, #4]
	return reads_u32;
 8004b12:	687b      	ldr	r3, [r7, #4]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <get_total_writes_str>:

/**
 * Get total writes as a string
 * @return String of total writes
 * */
char* get_total_writes_str(void) {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
	char* result = malloc(sizeof(uint32_t) * sizeof(char));
 8004b22:	2004      	movs	r0, #4
 8004b24:	f00c fada 	bl	80110dc <malloc>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	607b      	str	r3, [r7, #4]

	sprintf(result, "%i", get_total_writes());
 8004b2c:	f7ff ffc2 	bl	8004ab4 <get_total_writes>
 8004b30:	4603      	mov	r3, r0
 8004b32:	461a      	mov	r2, r3
 8004b34:	4904      	ldr	r1, [pc, #16]	; (8004b48 <get_total_writes_str+0x2c>)
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f00c fd60 	bl	80115fc <siprintf>
	return(result);
 8004b3c:	687b      	ldr	r3, [r7, #4]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	08013004 	.word	0x08013004

08004b4c <get_total_reads_str>:

/**
 * Get total reads as a string
 * @return String of total reads
 * */
char* get_total_reads_str(void) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
	char* result = malloc(sizeof(uint32_t) * sizeof(char));
 8004b52:	2004      	movs	r0, #4
 8004b54:	f00c fac2 	bl	80110dc <malloc>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	607b      	str	r3, [r7, #4]

	sprintf(result, "%i", get_total_reads());
 8004b5c:	f7ff ffc4 	bl	8004ae8 <get_total_reads>
 8004b60:	4603      	mov	r3, r0
 8004b62:	461a      	mov	r2, r3
 8004b64:	4904      	ldr	r1, [pc, #16]	; (8004b78 <get_total_reads_str+0x2c>)
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f00c fd48 	bl	80115fc <siprintf>
	return(result);
 8004b6c:	687b      	ldr	r3, [r7, #4]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	08013004 	.word	0x08013004

08004b7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b82:	2300      	movs	r3, #0
 8004b84:	607b      	str	r3, [r7, #4]
 8004b86:	4b12      	ldr	r3, [pc, #72]	; (8004bd0 <HAL_MspInit+0x54>)
 8004b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8a:	4a11      	ldr	r2, [pc, #68]	; (8004bd0 <HAL_MspInit+0x54>)
 8004b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b90:	6453      	str	r3, [r2, #68]	; 0x44
 8004b92:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <HAL_MspInit+0x54>)
 8004b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b9a:	607b      	str	r3, [r7, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_MspInit+0x54>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	4a0a      	ldr	r2, [pc, #40]	; (8004bd0 <HAL_MspInit+0x54>)
 8004ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bac:	6413      	str	r3, [r2, #64]	; 0x40
 8004bae:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <HAL_MspInit+0x54>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004bba:	2200      	movs	r2, #0
 8004bbc:	210f      	movs	r1, #15
 8004bbe:	f06f 0001 	mvn.w	r0, #1
 8004bc2:	f000 fc13 	bl	80053ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004bc6:	bf00      	nop
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40023800 	.word	0x40023800

08004bd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08a      	sub	sp, #40	; 0x28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bdc:	f107 0314 	add.w	r3, r7, #20
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	605a      	str	r2, [r3, #4]
 8004be6:	609a      	str	r2, [r3, #8]
 8004be8:	60da      	str	r2, [r3, #12]
 8004bea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a19      	ldr	r2, [pc, #100]	; (8004c58 <HAL_I2C_MspInit+0x84>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d12b      	bne.n	8004c4e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	4b18      	ldr	r3, [pc, #96]	; (8004c5c <HAL_I2C_MspInit+0x88>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	4a17      	ldr	r2, [pc, #92]	; (8004c5c <HAL_I2C_MspInit+0x88>)
 8004c00:	f043 0302 	orr.w	r3, r3, #2
 8004c04:	6313      	str	r3, [r2, #48]	; 0x30
 8004c06:	4b15      	ldr	r3, [pc, #84]	; (8004c5c <HAL_I2C_MspInit+0x88>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	613b      	str	r3, [r7, #16]
 8004c10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c12:	23c0      	movs	r3, #192	; 0xc0
 8004c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c16:	2312      	movs	r3, #18
 8004c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004c22:	2304      	movs	r3, #4
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c26:	f107 0314 	add.w	r3, r7, #20
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	480c      	ldr	r0, [pc, #48]	; (8004c60 <HAL_I2C_MspInit+0x8c>)
 8004c2e:	f000 fc07 	bl	8005440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <HAL_I2C_MspInit+0x88>)
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	4a08      	ldr	r2, [pc, #32]	; (8004c5c <HAL_I2C_MspInit+0x88>)
 8004c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c40:	6413      	str	r3, [r2, #64]	; 0x40
 8004c42:	4b06      	ldr	r3, [pc, #24]	; (8004c5c <HAL_I2C_MspInit+0x88>)
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004c4e:	bf00      	nop
 8004c50:	3728      	adds	r7, #40	; 0x28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40005400 	.word	0x40005400
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	40020400 	.word	0x40020400

08004c64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08c      	sub	sp, #48	; 0x30
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c6c:	f107 031c 	add.w	r3, r7, #28
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	609a      	str	r2, [r3, #8]
 8004c78:	60da      	str	r2, [r3, #12]
 8004c7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a32      	ldr	r2, [pc, #200]	; (8004d4c <HAL_SPI_MspInit+0xe8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d12c      	bne.n	8004ce0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	4b31      	ldr	r3, [pc, #196]	; (8004d50 <HAL_SPI_MspInit+0xec>)
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8e:	4a30      	ldr	r2, [pc, #192]	; (8004d50 <HAL_SPI_MspInit+0xec>)
 8004c90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c94:	6453      	str	r3, [r2, #68]	; 0x44
 8004c96:	4b2e      	ldr	r3, [pc, #184]	; (8004d50 <HAL_SPI_MspInit+0xec>)
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c9e:	61bb      	str	r3, [r7, #24]
 8004ca0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	4b2a      	ldr	r3, [pc, #168]	; (8004d50 <HAL_SPI_MspInit+0xec>)
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	4a29      	ldr	r2, [pc, #164]	; (8004d50 <HAL_SPI_MspInit+0xec>)
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cb2:	4b27      	ldr	r3, [pc, #156]	; (8004d50 <HAL_SPI_MspInit+0xec>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004cbe:	23a0      	movs	r3, #160	; 0xa0
 8004cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004cce:	2305      	movs	r3, #5
 8004cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd2:	f107 031c 	add.w	r3, r7, #28
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	481e      	ldr	r0, [pc, #120]	; (8004d54 <HAL_SPI_MspInit+0xf0>)
 8004cda:	f000 fbb1 	bl	8005440 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004cde:	e031      	b.n	8004d44 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a1c      	ldr	r2, [pc, #112]	; (8004d58 <HAL_SPI_MspInit+0xf4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d12c      	bne.n	8004d44 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	4b18      	ldr	r3, [pc, #96]	; (8004d50 <HAL_SPI_MspInit+0xec>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	4a17      	ldr	r2, [pc, #92]	; (8004d50 <HAL_SPI_MspInit+0xec>)
 8004cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cfa:	4b15      	ldr	r3, [pc, #84]	; (8004d50 <HAL_SPI_MspInit+0xec>)
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	4b11      	ldr	r3, [pc, #68]	; (8004d50 <HAL_SPI_MspInit+0xec>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	4a10      	ldr	r2, [pc, #64]	; (8004d50 <HAL_SPI_MspInit+0xec>)
 8004d10:	f043 0302 	orr.w	r3, r3, #2
 8004d14:	6313      	str	r3, [r2, #48]	; 0x30
 8004d16:	4b0e      	ldr	r3, [pc, #56]	; (8004d50 <HAL_SPI_MspInit+0xec>)
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8004d22:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8004d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d30:	2303      	movs	r3, #3
 8004d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d34:	2305      	movs	r3, #5
 8004d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d38:	f107 031c 	add.w	r3, r7, #28
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4807      	ldr	r0, [pc, #28]	; (8004d5c <HAL_SPI_MspInit+0xf8>)
 8004d40:	f000 fb7e 	bl	8005440 <HAL_GPIO_Init>
}
 8004d44:	bf00      	nop
 8004d46:	3730      	adds	r7, #48	; 0x30
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40013000 	.word	0x40013000
 8004d50:	40023800 	.word	0x40023800
 8004d54:	40020000 	.word	0x40020000
 8004d58:	40003800 	.word	0x40003800
 8004d5c:	40020400 	.word	0x40020400

08004d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d70:	d10e      	bne.n	8004d90 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <HAL_TIM_Base_MspInit+0x64>)
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	4a12      	ldr	r2, [pc, #72]	; (8004dc4 <HAL_TIM_Base_MspInit+0x64>)
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	6413      	str	r3, [r2, #64]	; 0x40
 8004d82:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <HAL_TIM_Base_MspInit+0x64>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004d8e:	e012      	b.n	8004db6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a0c      	ldr	r2, [pc, #48]	; (8004dc8 <HAL_TIM_Base_MspInit+0x68>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d10d      	bne.n	8004db6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60bb      	str	r3, [r7, #8]
 8004d9e:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <HAL_TIM_Base_MspInit+0x64>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	4a08      	ldr	r2, [pc, #32]	; (8004dc4 <HAL_TIM_Base_MspInit+0x64>)
 8004da4:	f043 0302 	orr.w	r3, r3, #2
 8004da8:	6413      	str	r3, [r2, #64]	; 0x40
 8004daa:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <HAL_TIM_Base_MspInit+0x64>)
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	60bb      	str	r3, [r7, #8]
 8004db4:	68bb      	ldr	r3, [r7, #8]
}
 8004db6:	bf00      	nop
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	40000400 	.word	0x40000400

08004dcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dd4:	f107 030c 	add.w	r3, r7, #12
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	605a      	str	r2, [r3, #4]
 8004dde:	609a      	str	r2, [r3, #8]
 8004de0:	60da      	str	r2, [r3, #12]
 8004de2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dec:	d11d      	bne.n	8004e2a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dee:	2300      	movs	r3, #0
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <HAL_TIM_MspPostInit+0x68>)
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	4a0f      	ldr	r2, [pc, #60]	; (8004e34 <HAL_TIM_MspPostInit+0x68>)
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <HAL_TIM_MspPostInit+0x68>)
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	60bb      	str	r3, [r7, #8]
 8004e08:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004e0a:	2304      	movs	r3, #4
 8004e0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e0e:	2302      	movs	r3, #2
 8004e10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e16:	2300      	movs	r3, #0
 8004e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e1e:	f107 030c 	add.w	r3, r7, #12
 8004e22:	4619      	mov	r1, r3
 8004e24:	4804      	ldr	r0, [pc, #16]	; (8004e38 <HAL_TIM_MspPostInit+0x6c>)
 8004e26:	f000 fb0b 	bl	8005440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004e2a:	bf00      	nop
 8004e2c:	3720      	adds	r7, #32
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40023800 	.word	0x40023800
 8004e38:	40020000 	.word	0x40020000

08004e3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08e      	sub	sp, #56	; 0x38
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	4b33      	ldr	r3, [pc, #204]	; (8004f20 <HAL_InitTick+0xe4>)
 8004e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e54:	4a32      	ldr	r2, [pc, #200]	; (8004f20 <HAL_InitTick+0xe4>)
 8004e56:	f043 0308 	orr.w	r3, r3, #8
 8004e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8004e5c:	4b30      	ldr	r3, [pc, #192]	; (8004f20 <HAL_InitTick+0xe4>)
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004e68:	f107 0210 	add.w	r2, r7, #16
 8004e6c:	f107 0314 	add.w	r3, r7, #20
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f003 fb70 	bl	8008558 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d103      	bne.n	8004e8a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004e82:	f003 fb55 	bl	8008530 <HAL_RCC_GetPCLK1Freq>
 8004e86:	6378      	str	r0, [r7, #52]	; 0x34
 8004e88:	e004      	b.n	8004e94 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004e8a:	f003 fb51 	bl	8008530 <HAL_RCC_GetPCLK1Freq>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e96:	4a23      	ldr	r2, [pc, #140]	; (8004f24 <HAL_InitTick+0xe8>)
 8004e98:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9c:	0c9b      	lsrs	r3, r3, #18
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8004ea2:	4b21      	ldr	r3, [pc, #132]	; (8004f28 <HAL_InitTick+0xec>)
 8004ea4:	4a21      	ldr	r2, [pc, #132]	; (8004f2c <HAL_InitTick+0xf0>)
 8004ea6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8004ea8:	4b1f      	ldr	r3, [pc, #124]	; (8004f28 <HAL_InitTick+0xec>)
 8004eaa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004eae:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8004eb0:	4a1d      	ldr	r2, [pc, #116]	; (8004f28 <HAL_InitTick+0xec>)
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8004eb6:	4b1c      	ldr	r3, [pc, #112]	; (8004f28 <HAL_InitTick+0xec>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ebc:	4b1a      	ldr	r3, [pc, #104]	; (8004f28 <HAL_InitTick+0xec>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ec2:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <HAL_InitTick+0xec>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8004ec8:	4817      	ldr	r0, [pc, #92]	; (8004f28 <HAL_InitTick+0xec>)
 8004eca:	f003 ffa9 	bl	8008e20 <HAL_TIM_Base_Init>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004ed4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d11b      	bne.n	8004f14 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8004edc:	4812      	ldr	r0, [pc, #72]	; (8004f28 <HAL_InitTick+0xec>)
 8004ede:	f004 f871 	bl	8008fc4 <HAL_TIM_Base_Start_IT>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004ee8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d111      	bne.n	8004f14 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004ef0:	2032      	movs	r0, #50	; 0x32
 8004ef2:	f000 fa97 	bl	8005424 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b0f      	cmp	r3, #15
 8004efa:	d808      	bhi.n	8004f0e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8004efc:	2200      	movs	r2, #0
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	2032      	movs	r0, #50	; 0x32
 8004f02:	f000 fa73 	bl	80053ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f06:	4a0a      	ldr	r2, [pc, #40]	; (8004f30 <HAL_InitTick+0xf4>)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	e002      	b.n	8004f14 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004f14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3738      	adds	r7, #56	; 0x38
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40023800 	.word	0x40023800
 8004f24:	431bde83 	.word	0x431bde83
 8004f28:	20000930 	.word	0x20000930
 8004f2c:	40000c00 	.word	0x40000c00
 8004f30:	200005dc 	.word	0x200005dc

08004f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f38:	e7fe      	b.n	8004f38 <NMI_Handler+0x4>

08004f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f3e:	e7fe      	b.n	8004f3e <HardFault_Handler+0x4>

08004f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f44:	e7fe      	b.n	8004f44 <MemManage_Handler+0x4>

08004f46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f46:	b480      	push	{r7}
 8004f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f4a:	e7fe      	b.n	8004f4a <BusFault_Handler+0x4>

08004f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f50:	e7fe      	b.n	8004f50 <UsageFault_Handler+0x4>

08004f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f52:	b480      	push	{r7}
 8004f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f56:	bf00      	nop
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8004f64:	2002      	movs	r0, #2
 8004f66:	f000 fc21 	bl	80057ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004f6a:	bf00      	nop
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004f74:	4802      	ldr	r0, [pc, #8]	; (8004f80 <TIM5_IRQHandler+0x10>)
 8004f76:	f004 f9f5 	bl	8009364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004f7a:	bf00      	nop
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000930 	.word	0x20000930

08004f84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004f88:	4802      	ldr	r0, [pc, #8]	; (8004f94 <OTG_FS_IRQHandler+0x10>)
 8004f8a:	f001 fd36 	bl	80069fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004f8e:	bf00      	nop
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20009f00 	.word	0x20009f00

08004f98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	e00a      	b.n	8004fc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004faa:	f3af 8000 	nop.w
 8004fae:	4601      	mov	r1, r0
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	60ba      	str	r2, [r7, #8]
 8004fb6:	b2ca      	uxtb	r2, r1
 8004fb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	dbf0      	blt.n	8004faa <_read+0x12>
  }

  return len;
 8004fc8:	687b      	ldr	r3, [r7, #4]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004fda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ffa:	605a      	str	r2, [r3, #4]
  return 0;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <_isatty>:

int _isatty(int file)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005012:	2301      	movs	r3, #1
}
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005044:	4a14      	ldr	r2, [pc, #80]	; (8005098 <_sbrk+0x5c>)
 8005046:	4b15      	ldr	r3, [pc, #84]	; (800509c <_sbrk+0x60>)
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005050:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <_sbrk+0x64>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d102      	bne.n	800505e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005058:	4b11      	ldr	r3, [pc, #68]	; (80050a0 <_sbrk+0x64>)
 800505a:	4a12      	ldr	r2, [pc, #72]	; (80050a4 <_sbrk+0x68>)
 800505c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800505e:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <_sbrk+0x64>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4413      	add	r3, r2
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	429a      	cmp	r2, r3
 800506a:	d207      	bcs.n	800507c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800506c:	f00c f80c 	bl	8011088 <__errno>
 8005070:	4603      	mov	r3, r0
 8005072:	220c      	movs	r2, #12
 8005074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005076:	f04f 33ff 	mov.w	r3, #4294967295
 800507a:	e009      	b.n	8005090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800507c:	4b08      	ldr	r3, [pc, #32]	; (80050a0 <_sbrk+0x64>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005082:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <_sbrk+0x64>)
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4413      	add	r3, r2
 800508a:	4a05      	ldr	r2, [pc, #20]	; (80050a0 <_sbrk+0x64>)
 800508c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800508e:	68fb      	ldr	r3, [r7, #12]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20010000 	.word	0x20010000
 800509c:	00000400 	.word	0x00000400
 80050a0:	20000978 	.word	0x20000978
 80050a4:	2000a640 	.word	0x2000a640

080050a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050ac:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <SystemInit+0x20>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b2:	4a05      	ldr	r2, [pc, #20]	; (80050c8 <SystemInit+0x20>)
 80050b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050bc:	bf00      	nop
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	e000ed00 	.word	0xe000ed00

080050cc <terminal_init>:


/**
 * Initialise terminal with ASCII art
 * */
void terminal_init(void) {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++) {
 80050d2:	2300      	movs	r3, #0
 80050d4:	607b      	str	r3, [r7, #4]
 80050d6:	e00a      	b.n	80050ee <terminal_init+0x22>
		printf("%s\r\n",RR_TERMINALART[i]);
 80050d8:	4a09      	ldr	r2, [pc, #36]	; (8005100 <terminal_init+0x34>)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e0:	4619      	mov	r1, r3
 80050e2:	4808      	ldr	r0, [pc, #32]	; (8005104 <terminal_init+0x38>)
 80050e4:	f00c f916 	bl	8011314 <iprintf>
	for (int i = 0; i < 6; i++) {
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3301      	adds	r3, #1
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b05      	cmp	r3, #5
 80050f2:	ddf1      	ble.n	80050d8 <terminal_init+0xc>
	}
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	200005c4 	.word	0x200005c4
 8005104:	0801338c 	.word	0x0801338c

08005108 <move_terminal_cursor>:
/**
 * Move terminal cursor
 * @param x - X location to move to
 * @param y - Y locationto move to
 * */
void move_terminal_cursor(int x, int y) {
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
	printf("\x1b[%d;%dH", x, y);
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	4803      	ldr	r0, [pc, #12]	; (8005124 <move_terminal_cursor+0x1c>)
 8005118:	f00c f8fc 	bl	8011314 <iprintf>
}
 800511c:	bf00      	nop
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	08013394 	.word	0x08013394

08005128 <clear_terminal>:

/**
 * Clear entire terminal
 * */
void clear_terminal(void) {
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
	printf("\x1b[2J");
 800512c:	4802      	ldr	r0, [pc, #8]	; (8005138 <clear_terminal+0x10>)
 800512e:	f00c f8f1 	bl	8011314 <iprintf>
}
 8005132:	bf00      	nop
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	080133a0 	.word	0x080133a0

0800513c <set_colour>:

/**
 * Set terminal colour (text or background)
 * @param colour - Colour to set to (See terminal.h)
 * */
void set_colour (TerminalColour colour) {
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	71fb      	strb	r3, [r7, #7]
	printf("\x1b[%dm", colour);
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	4619      	mov	r1, r3
 800514a:	4803      	ldr	r0, [pc, #12]	; (8005158 <set_colour+0x1c>)
 800514c:	f00c f8e2 	bl	8011314 <iprintf>
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	080133ac 	.word	0x080133ac

0800515c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800515c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005194 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005160:	480d      	ldr	r0, [pc, #52]	; (8005198 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005162:	490e      	ldr	r1, [pc, #56]	; (800519c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005164:	4a0e      	ldr	r2, [pc, #56]	; (80051a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005168:	e002      	b.n	8005170 <LoopCopyDataInit>

0800516a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800516a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800516c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800516e:	3304      	adds	r3, #4

08005170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005174:	d3f9      	bcc.n	800516a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005176:	4a0b      	ldr	r2, [pc, #44]	; (80051a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005178:	4c0b      	ldr	r4, [pc, #44]	; (80051a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800517a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800517c:	e001      	b.n	8005182 <LoopFillZerobss>

0800517e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800517e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005180:	3204      	adds	r2, #4

08005182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005184:	d3fb      	bcc.n	800517e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005186:	f7ff ff8f 	bl	80050a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800518a:	f00b ff83 	bl	8011094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800518e:	f7fd fff9 	bl	8003184 <main>
  bx  lr    
 8005192:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005194:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8005198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800519c:	2000073c 	.word	0x2000073c
  ldr r2, =_sidata
 80051a0:	08013bd0 	.word	0x08013bd0
  ldr r2, =_sbss
 80051a4:	2000073c 	.word	0x2000073c
  ldr r4, =_ebss
 80051a8:	2000a63c 	.word	0x2000a63c

080051ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80051ac:	e7fe      	b.n	80051ac <ADC_IRQHandler>
	...

080051b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80051b4:	4b0e      	ldr	r3, [pc, #56]	; (80051f0 <HAL_Init+0x40>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a0d      	ldr	r2, [pc, #52]	; (80051f0 <HAL_Init+0x40>)
 80051ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80051c0:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <HAL_Init+0x40>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a0a      	ldr	r2, [pc, #40]	; (80051f0 <HAL_Init+0x40>)
 80051c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051cc:	4b08      	ldr	r3, [pc, #32]	; (80051f0 <HAL_Init+0x40>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a07      	ldr	r2, [pc, #28]	; (80051f0 <HAL_Init+0x40>)
 80051d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051d8:	2003      	movs	r0, #3
 80051da:	f000 f8fc 	bl	80053d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80051de:	200f      	movs	r0, #15
 80051e0:	f7ff fe2c 	bl	8004e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051e4:	f7ff fcca 	bl	8004b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40023c00 	.word	0x40023c00

080051f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051f8:	4b06      	ldr	r3, [pc, #24]	; (8005214 <HAL_IncTick+0x20>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	461a      	mov	r2, r3
 80051fe:	4b06      	ldr	r3, [pc, #24]	; (8005218 <HAL_IncTick+0x24>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4413      	add	r3, r2
 8005204:	4a04      	ldr	r2, [pc, #16]	; (8005218 <HAL_IncTick+0x24>)
 8005206:	6013      	str	r3, [r2, #0]
}
 8005208:	bf00      	nop
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	200005e0 	.word	0x200005e0
 8005218:	2000097c 	.word	0x2000097c

0800521c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
  return uwTick;
 8005220:	4b03      	ldr	r3, [pc, #12]	; (8005230 <HAL_GetTick+0x14>)
 8005222:	681b      	ldr	r3, [r3, #0]
}
 8005224:	4618      	mov	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	2000097c 	.word	0x2000097c

08005234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800523c:	f7ff ffee 	bl	800521c <HAL_GetTick>
 8005240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524c:	d005      	beq.n	800525a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800524e:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <HAL_Delay+0x44>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4413      	add	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800525a:	bf00      	nop
 800525c:	f7ff ffde 	bl	800521c <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	429a      	cmp	r2, r3
 800526a:	d8f7      	bhi.n	800525c <HAL_Delay+0x28>
  {
  }
}
 800526c:	bf00      	nop
 800526e:	bf00      	nop
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	200005e0 	.word	0x200005e0

0800527c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800528c:	4b0c      	ldr	r3, [pc, #48]	; (80052c0 <__NVIC_SetPriorityGrouping+0x44>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005298:	4013      	ands	r3, r2
 800529a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052ae:	4a04      	ldr	r2, [pc, #16]	; (80052c0 <__NVIC_SetPriorityGrouping+0x44>)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	60d3      	str	r3, [r2, #12]
}
 80052b4:	bf00      	nop
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	e000ed00 	.word	0xe000ed00

080052c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052c8:	4b04      	ldr	r3, [pc, #16]	; (80052dc <__NVIC_GetPriorityGrouping+0x18>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	0a1b      	lsrs	r3, r3, #8
 80052ce:	f003 0307 	and.w	r3, r3, #7
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	e000ed00 	.word	0xe000ed00

080052e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	4603      	mov	r3, r0
 80052e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	db0b      	blt.n	800530a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052f2:	79fb      	ldrb	r3, [r7, #7]
 80052f4:	f003 021f 	and.w	r2, r3, #31
 80052f8:	4907      	ldr	r1, [pc, #28]	; (8005318 <__NVIC_EnableIRQ+0x38>)
 80052fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052fe:	095b      	lsrs	r3, r3, #5
 8005300:	2001      	movs	r0, #1
 8005302:	fa00 f202 	lsl.w	r2, r0, r2
 8005306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	e000e100 	.word	0xe000e100

0800531c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	4603      	mov	r3, r0
 8005324:	6039      	str	r1, [r7, #0]
 8005326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800532c:	2b00      	cmp	r3, #0
 800532e:	db0a      	blt.n	8005346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	b2da      	uxtb	r2, r3
 8005334:	490c      	ldr	r1, [pc, #48]	; (8005368 <__NVIC_SetPriority+0x4c>)
 8005336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800533a:	0112      	lsls	r2, r2, #4
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	440b      	add	r3, r1
 8005340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005344:	e00a      	b.n	800535c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	b2da      	uxtb	r2, r3
 800534a:	4908      	ldr	r1, [pc, #32]	; (800536c <__NVIC_SetPriority+0x50>)
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	3b04      	subs	r3, #4
 8005354:	0112      	lsls	r2, r2, #4
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	440b      	add	r3, r1
 800535a:	761a      	strb	r2, [r3, #24]
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	e000e100 	.word	0xe000e100
 800536c:	e000ed00 	.word	0xe000ed00

08005370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005370:	b480      	push	{r7}
 8005372:	b089      	sub	sp, #36	; 0x24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f1c3 0307 	rsb	r3, r3, #7
 800538a:	2b04      	cmp	r3, #4
 800538c:	bf28      	it	cs
 800538e:	2304      	movcs	r3, #4
 8005390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	3304      	adds	r3, #4
 8005396:	2b06      	cmp	r3, #6
 8005398:	d902      	bls.n	80053a0 <NVIC_EncodePriority+0x30>
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	3b03      	subs	r3, #3
 800539e:	e000      	b.n	80053a2 <NVIC_EncodePriority+0x32>
 80053a0:	2300      	movs	r3, #0
 80053a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053a4:	f04f 32ff 	mov.w	r2, #4294967295
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	fa02 f303 	lsl.w	r3, r2, r3
 80053ae:	43da      	mvns	r2, r3
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	401a      	ands	r2, r3
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053b8:	f04f 31ff 	mov.w	r1, #4294967295
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	fa01 f303 	lsl.w	r3, r1, r3
 80053c2:	43d9      	mvns	r1, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053c8:	4313      	orrs	r3, r2
         );
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3724      	adds	r7, #36	; 0x24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff ff4c 	bl	800527c <__NVIC_SetPriorityGrouping>
}
 80053e4:	bf00      	nop
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	4603      	mov	r3, r0
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053fe:	f7ff ff61 	bl	80052c4 <__NVIC_GetPriorityGrouping>
 8005402:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	6978      	ldr	r0, [r7, #20]
 800540a:	f7ff ffb1 	bl	8005370 <NVIC_EncodePriority>
 800540e:	4602      	mov	r2, r0
 8005410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005414:	4611      	mov	r1, r2
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff ff80 	bl	800531c <__NVIC_SetPriority>
}
 800541c:	bf00      	nop
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800542e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff ff54 	bl	80052e0 <__NVIC_EnableIRQ>
}
 8005438:	bf00      	nop
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005440:	b480      	push	{r7}
 8005442:	b089      	sub	sp, #36	; 0x24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800544e:	2300      	movs	r3, #0
 8005450:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005452:	2300      	movs	r3, #0
 8005454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
 800545a:	e159      	b.n	8005710 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800545c:	2201      	movs	r2, #1
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4013      	ands	r3, r2
 800546e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	429a      	cmp	r2, r3
 8005476:	f040 8148 	bne.w	800570a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	2b01      	cmp	r3, #1
 8005484:	d005      	beq.n	8005492 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800548e:	2b02      	cmp	r3, #2
 8005490:	d130      	bne.n	80054f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	2203      	movs	r2, #3
 800549e:	fa02 f303 	lsl.w	r3, r2, r3
 80054a2:	43db      	mvns	r3, r3
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	4013      	ands	r3, r2
 80054a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054c8:	2201      	movs	r2, #1
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	43db      	mvns	r3, r3
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	4013      	ands	r3, r2
 80054d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	091b      	lsrs	r3, r3, #4
 80054de:	f003 0201 	and.w	r2, r3, #1
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	fa02 f303 	lsl.w	r3, r2, r3
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d017      	beq.n	8005530 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	2203      	movs	r2, #3
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	43db      	mvns	r3, r3
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	4013      	ands	r3, r2
 8005516:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	4313      	orrs	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f003 0303 	and.w	r3, r3, #3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d123      	bne.n	8005584 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	08da      	lsrs	r2, r3, #3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3208      	adds	r2, #8
 8005544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005548:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	220f      	movs	r2, #15
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	43db      	mvns	r3, r3
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	4013      	ands	r3, r2
 800555e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	fa02 f303 	lsl.w	r3, r2, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	4313      	orrs	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	08da      	lsrs	r2, r3, #3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3208      	adds	r2, #8
 800557e:	69b9      	ldr	r1, [r7, #24]
 8005580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	2203      	movs	r2, #3
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	43db      	mvns	r3, r3
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	4013      	ands	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f003 0203 	and.w	r2, r3, #3
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 80a2 	beq.w	800570a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	4b57      	ldr	r3, [pc, #348]	; (8005728 <HAL_GPIO_Init+0x2e8>)
 80055cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ce:	4a56      	ldr	r2, [pc, #344]	; (8005728 <HAL_GPIO_Init+0x2e8>)
 80055d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055d4:	6453      	str	r3, [r2, #68]	; 0x44
 80055d6:	4b54      	ldr	r3, [pc, #336]	; (8005728 <HAL_GPIO_Init+0x2e8>)
 80055d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055e2:	4a52      	ldr	r2, [pc, #328]	; (800572c <HAL_GPIO_Init+0x2ec>)
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	089b      	lsrs	r3, r3, #2
 80055e8:	3302      	adds	r3, #2
 80055ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	220f      	movs	r2, #15
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	43db      	mvns	r3, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	4013      	ands	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a49      	ldr	r2, [pc, #292]	; (8005730 <HAL_GPIO_Init+0x2f0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d019      	beq.n	8005642 <HAL_GPIO_Init+0x202>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a48      	ldr	r2, [pc, #288]	; (8005734 <HAL_GPIO_Init+0x2f4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d013      	beq.n	800563e <HAL_GPIO_Init+0x1fe>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a47      	ldr	r2, [pc, #284]	; (8005738 <HAL_GPIO_Init+0x2f8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00d      	beq.n	800563a <HAL_GPIO_Init+0x1fa>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a46      	ldr	r2, [pc, #280]	; (800573c <HAL_GPIO_Init+0x2fc>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d007      	beq.n	8005636 <HAL_GPIO_Init+0x1f6>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a45      	ldr	r2, [pc, #276]	; (8005740 <HAL_GPIO_Init+0x300>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d101      	bne.n	8005632 <HAL_GPIO_Init+0x1f2>
 800562e:	2304      	movs	r3, #4
 8005630:	e008      	b.n	8005644 <HAL_GPIO_Init+0x204>
 8005632:	2307      	movs	r3, #7
 8005634:	e006      	b.n	8005644 <HAL_GPIO_Init+0x204>
 8005636:	2303      	movs	r3, #3
 8005638:	e004      	b.n	8005644 <HAL_GPIO_Init+0x204>
 800563a:	2302      	movs	r3, #2
 800563c:	e002      	b.n	8005644 <HAL_GPIO_Init+0x204>
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <HAL_GPIO_Init+0x204>
 8005642:	2300      	movs	r3, #0
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	f002 0203 	and.w	r2, r2, #3
 800564a:	0092      	lsls	r2, r2, #2
 800564c:	4093      	lsls	r3, r2
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	4313      	orrs	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005654:	4935      	ldr	r1, [pc, #212]	; (800572c <HAL_GPIO_Init+0x2ec>)
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	089b      	lsrs	r3, r3, #2
 800565a:	3302      	adds	r3, #2
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005662:	4b38      	ldr	r3, [pc, #224]	; (8005744 <HAL_GPIO_Init+0x304>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	43db      	mvns	r3, r3
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	4013      	ands	r3, r2
 8005670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005686:	4a2f      	ldr	r2, [pc, #188]	; (8005744 <HAL_GPIO_Init+0x304>)
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800568c:	4b2d      	ldr	r3, [pc, #180]	; (8005744 <HAL_GPIO_Init+0x304>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	43db      	mvns	r3, r3
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	4013      	ands	r3, r2
 800569a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056b0:	4a24      	ldr	r2, [pc, #144]	; (8005744 <HAL_GPIO_Init+0x304>)
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056b6:	4b23      	ldr	r3, [pc, #140]	; (8005744 <HAL_GPIO_Init+0x304>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	43db      	mvns	r3, r3
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	4013      	ands	r3, r2
 80056c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056da:	4a1a      	ldr	r2, [pc, #104]	; (8005744 <HAL_GPIO_Init+0x304>)
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056e0:	4b18      	ldr	r3, [pc, #96]	; (8005744 <HAL_GPIO_Init+0x304>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	43db      	mvns	r3, r3
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	4013      	ands	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	4313      	orrs	r3, r2
 8005702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005704:	4a0f      	ldr	r2, [pc, #60]	; (8005744 <HAL_GPIO_Init+0x304>)
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	3301      	adds	r3, #1
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	2b0f      	cmp	r3, #15
 8005714:	f67f aea2 	bls.w	800545c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005718:	bf00      	nop
 800571a:	bf00      	nop
 800571c:	3724      	adds	r7, #36	; 0x24
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40023800 	.word	0x40023800
 800572c:	40013800 	.word	0x40013800
 8005730:	40020000 	.word	0x40020000
 8005734:	40020400 	.word	0x40020400
 8005738:	40020800 	.word	0x40020800
 800573c:	40020c00 	.word	0x40020c00
 8005740:	40021000 	.word	0x40021000
 8005744:	40013c00 	.word	0x40013c00

08005748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	887b      	ldrh	r3, [r7, #2]
 800575a:	4013      	ands	r3, r2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
 8005764:	e001      	b.n	800576a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005766:	2300      	movs	r3, #0
 8005768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800576a:	7bfb      	ldrb	r3, [r7, #15]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	807b      	strh	r3, [r7, #2]
 8005784:	4613      	mov	r3, r2
 8005786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005788:	787b      	ldrb	r3, [r7, #1]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800578e:	887a      	ldrh	r2, [r7, #2]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005794:	e003      	b.n	800579e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005796:	887b      	ldrh	r3, [r7, #2]
 8005798:	041a      	lsls	r2, r3, #16
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	619a      	str	r2, [r3, #24]
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
	...

080057ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80057b6:	4b08      	ldr	r3, [pc, #32]	; (80057d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057b8:	695a      	ldr	r2, [r3, #20]
 80057ba:	88fb      	ldrh	r3, [r7, #6]
 80057bc:	4013      	ands	r3, r2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d006      	beq.n	80057d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057c2:	4a05      	ldr	r2, [pc, #20]	; (80057d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057c4:	88fb      	ldrh	r3, [r7, #6]
 80057c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057c8:	88fb      	ldrh	r3, [r7, #6]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fc ffee 	bl	80027ac <HAL_GPIO_EXTI_Callback>
  }
}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	40013c00 	.word	0x40013c00

080057dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e12b      	b.n	8005a46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff f9e6 	bl	8004bd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2224      	movs	r2, #36	; 0x24
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0201 	bic.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800582e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800583e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005840:	f002 fe76 	bl	8008530 <HAL_RCC_GetPCLK1Freq>
 8005844:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	4a81      	ldr	r2, [pc, #516]	; (8005a50 <HAL_I2C_Init+0x274>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d807      	bhi.n	8005860 <HAL_I2C_Init+0x84>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4a80      	ldr	r2, [pc, #512]	; (8005a54 <HAL_I2C_Init+0x278>)
 8005854:	4293      	cmp	r3, r2
 8005856:	bf94      	ite	ls
 8005858:	2301      	movls	r3, #1
 800585a:	2300      	movhi	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	e006      	b.n	800586e <HAL_I2C_Init+0x92>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4a7d      	ldr	r2, [pc, #500]	; (8005a58 <HAL_I2C_Init+0x27c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	bf94      	ite	ls
 8005868:	2301      	movls	r3, #1
 800586a:	2300      	movhi	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e0e7      	b.n	8005a46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4a78      	ldr	r2, [pc, #480]	; (8005a5c <HAL_I2C_Init+0x280>)
 800587a:	fba2 2303 	umull	r2, r3, r2, r3
 800587e:	0c9b      	lsrs	r3, r3, #18
 8005880:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	430a      	orrs	r2, r1
 8005894:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	4a6a      	ldr	r2, [pc, #424]	; (8005a50 <HAL_I2C_Init+0x274>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d802      	bhi.n	80058b0 <HAL_I2C_Init+0xd4>
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	3301      	adds	r3, #1
 80058ae:	e009      	b.n	80058c4 <HAL_I2C_Init+0xe8>
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058b6:	fb02 f303 	mul.w	r3, r2, r3
 80058ba:	4a69      	ldr	r2, [pc, #420]	; (8005a60 <HAL_I2C_Init+0x284>)
 80058bc:	fba2 2303 	umull	r2, r3, r2, r3
 80058c0:	099b      	lsrs	r3, r3, #6
 80058c2:	3301      	adds	r3, #1
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6812      	ldr	r2, [r2, #0]
 80058c8:	430b      	orrs	r3, r1
 80058ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	495c      	ldr	r1, [pc, #368]	; (8005a50 <HAL_I2C_Init+0x274>)
 80058e0:	428b      	cmp	r3, r1
 80058e2:	d819      	bhi.n	8005918 <HAL_I2C_Init+0x13c>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	1e59      	subs	r1, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80058f2:	1c59      	adds	r1, r3, #1
 80058f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80058f8:	400b      	ands	r3, r1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <HAL_I2C_Init+0x138>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1e59      	subs	r1, r3, #1
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	fbb1 f3f3 	udiv	r3, r1, r3
 800590c:	3301      	adds	r3, #1
 800590e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005912:	e051      	b.n	80059b8 <HAL_I2C_Init+0x1dc>
 8005914:	2304      	movs	r3, #4
 8005916:	e04f      	b.n	80059b8 <HAL_I2C_Init+0x1dc>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d111      	bne.n	8005944 <HAL_I2C_Init+0x168>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	1e58      	subs	r0, r3, #1
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6859      	ldr	r1, [r3, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	440b      	add	r3, r1
 800592e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005932:	3301      	adds	r3, #1
 8005934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005938:	2b00      	cmp	r3, #0
 800593a:	bf0c      	ite	eq
 800593c:	2301      	moveq	r3, #1
 800593e:	2300      	movne	r3, #0
 8005940:	b2db      	uxtb	r3, r3
 8005942:	e012      	b.n	800596a <HAL_I2C_Init+0x18e>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	1e58      	subs	r0, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6859      	ldr	r1, [r3, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	440b      	add	r3, r1
 8005952:	0099      	lsls	r1, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	fbb0 f3f3 	udiv	r3, r0, r3
 800595a:	3301      	adds	r3, #1
 800595c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005960:	2b00      	cmp	r3, #0
 8005962:	bf0c      	ite	eq
 8005964:	2301      	moveq	r3, #1
 8005966:	2300      	movne	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <HAL_I2C_Init+0x196>
 800596e:	2301      	movs	r3, #1
 8005970:	e022      	b.n	80059b8 <HAL_I2C_Init+0x1dc>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10e      	bne.n	8005998 <HAL_I2C_Init+0x1bc>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	1e58      	subs	r0, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6859      	ldr	r1, [r3, #4]
 8005982:	460b      	mov	r3, r1
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	440b      	add	r3, r1
 8005988:	fbb0 f3f3 	udiv	r3, r0, r3
 800598c:	3301      	adds	r3, #1
 800598e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005996:	e00f      	b.n	80059b8 <HAL_I2C_Init+0x1dc>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	1e58      	subs	r0, r3, #1
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6859      	ldr	r1, [r3, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	0099      	lsls	r1, r3, #2
 80059a8:	440b      	add	r3, r1
 80059aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ae:	3301      	adds	r3, #1
 80059b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	6809      	ldr	r1, [r1, #0]
 80059bc:	4313      	orrs	r3, r2
 80059be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69da      	ldr	r2, [r3, #28]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6911      	ldr	r1, [r2, #16]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	68d2      	ldr	r2, [r2, #12]
 80059f2:	4311      	orrs	r1, r2
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6812      	ldr	r2, [r2, #0]
 80059f8:	430b      	orrs	r3, r1
 80059fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695a      	ldr	r2, [r3, #20]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0201 	orr.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	000186a0 	.word	0x000186a0
 8005a54:	001e847f 	.word	0x001e847f
 8005a58:	003d08ff 	.word	0x003d08ff
 8005a5c:	431bde83 	.word	0x431bde83
 8005a60:	10624dd3 	.word	0x10624dd3

08005a64 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	4611      	mov	r1, r2
 8005a70:	461a      	mov	r2, r3
 8005a72:	4603      	mov	r3, r0
 8005a74:	817b      	strh	r3, [r7, #10]
 8005a76:	460b      	mov	r3, r1
 8005a78:	813b      	strh	r3, [r7, #8]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a7e:	f7ff fbcd 	bl	800521c <HAL_GetTick>
 8005a82:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b20      	cmp	r3, #32
 8005a8e:	f040 80d9 	bne.w	8005c44 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	2319      	movs	r3, #25
 8005a98:	2201      	movs	r2, #1
 8005a9a:	496d      	ldr	r1, [pc, #436]	; (8005c50 <HAL_I2C_Mem_Write+0x1ec>)
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 fc7f 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e0cc      	b.n	8005c46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d101      	bne.n	8005aba <HAL_I2C_Mem_Write+0x56>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e0c5      	b.n	8005c46 <HAL_I2C_Mem_Write+0x1e2>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d007      	beq.n	8005ae0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2221      	movs	r2, #33	; 0x21
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2240      	movs	r2, #64	; 0x40
 8005afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a3a      	ldr	r2, [r7, #32]
 8005b0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4a4d      	ldr	r2, [pc, #308]	; (8005c54 <HAL_I2C_Mem_Write+0x1f0>)
 8005b20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b22:	88f8      	ldrh	r0, [r7, #6]
 8005b24:	893a      	ldrh	r2, [r7, #8]
 8005b26:	8979      	ldrh	r1, [r7, #10]
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	9301      	str	r3, [sp, #4]
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	4603      	mov	r3, r0
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 fab6 	bl	80060a4 <I2C_RequestMemoryWrite>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d052      	beq.n	8005be4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e081      	b.n	8005c46 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 fd00 	bl	800654c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00d      	beq.n	8005b6e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d107      	bne.n	8005b6a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e06b      	b.n	8005c46 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	781a      	ldrb	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	3b01      	subs	r3, #1
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d11b      	bne.n	8005be4 <HAL_I2C_Mem_Write+0x180>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d017      	beq.n	8005be4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	781a      	ldrb	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1aa      	bne.n	8005b42 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 fcec 	bl	80065ce <I2C_WaitOnBTFFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00d      	beq.n	8005c18 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d107      	bne.n	8005c14 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e016      	b.n	8005c46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e000      	b.n	8005c46 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005c44:	2302      	movs	r3, #2
  }
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	00100002 	.word	0x00100002
 8005c54:	ffff0000 	.word	0xffff0000

08005c58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08c      	sub	sp, #48	; 0x30
 8005c5c:	af02      	add	r7, sp, #8
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	4608      	mov	r0, r1
 8005c62:	4611      	mov	r1, r2
 8005c64:	461a      	mov	r2, r3
 8005c66:	4603      	mov	r3, r0
 8005c68:	817b      	strh	r3, [r7, #10]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	813b      	strh	r3, [r7, #8]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c72:	f7ff fad3 	bl	800521c <HAL_GetTick>
 8005c76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b20      	cmp	r3, #32
 8005c82:	f040 8208 	bne.w	8006096 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	2319      	movs	r3, #25
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	497b      	ldr	r1, [pc, #492]	; (8005e7c <HAL_I2C_Mem_Read+0x224>)
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 fb85 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e1fb      	b.n	8006098 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d101      	bne.n	8005cae <HAL_I2C_Mem_Read+0x56>
 8005caa:	2302      	movs	r3, #2
 8005cac:	e1f4      	b.n	8006098 <HAL_I2C_Mem_Read+0x440>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d007      	beq.n	8005cd4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ce2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2222      	movs	r2, #34	; 0x22
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2240      	movs	r2, #64	; 0x40
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005d04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4a5b      	ldr	r2, [pc, #364]	; (8005e80 <HAL_I2C_Mem_Read+0x228>)
 8005d14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d16:	88f8      	ldrh	r0, [r7, #6]
 8005d18:	893a      	ldrh	r2, [r7, #8]
 8005d1a:	8979      	ldrh	r1, [r7, #10]
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	9301      	str	r3, [sp, #4]
 8005d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	4603      	mov	r3, r0
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 fa52 	bl	80061d0 <I2C_RequestMemoryRead>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e1b0      	b.n	8006098 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d113      	bne.n	8005d66 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d3e:	2300      	movs	r3, #0
 8005d40:	623b      	str	r3, [r7, #32]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	623b      	str	r3, [r7, #32]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	623b      	str	r3, [r7, #32]
 8005d52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	e184      	b.n	8006070 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d11b      	bne.n	8005da6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	61fb      	str	r3, [r7, #28]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	61fb      	str	r3, [r7, #28]
 8005d92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	e164      	b.n	8006070 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d11b      	bne.n	8005de6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dbc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dce:	2300      	movs	r3, #0
 8005dd0:	61bb      	str	r3, [r7, #24]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	e144      	b.n	8006070 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005de6:	2300      	movs	r3, #0
 8005de8:	617b      	str	r3, [r7, #20]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	617b      	str	r3, [r7, #20]
 8005dfa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005dfc:	e138      	b.n	8006070 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	f200 80f1 	bhi.w	8005fea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d123      	bne.n	8005e58 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 fc1b 	bl	8006650 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e139      	b.n	8006098 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691a      	ldr	r2, [r3, #16]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e40:	3b01      	subs	r3, #1
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e56:	e10b      	b.n	8006070 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d14e      	bne.n	8005efe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	2200      	movs	r2, #0
 8005e68:	4906      	ldr	r1, [pc, #24]	; (8005e84 <HAL_I2C_Mem_Read+0x22c>)
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 fa98 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d008      	beq.n	8005e88 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e10e      	b.n	8006098 <HAL_I2C_Mem_Read+0x440>
 8005e7a:	bf00      	nop
 8005e7c:	00100002 	.word	0x00100002
 8005e80:	ffff0000 	.word	0xffff0000
 8005e84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691a      	ldr	r2, [r3, #16]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	691a      	ldr	r2, [r3, #16]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	1c5a      	adds	r2, r3, #1
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005efc:	e0b8      	b.n	8006070 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f04:	2200      	movs	r2, #0
 8005f06:	4966      	ldr	r1, [pc, #408]	; (80060a0 <HAL_I2C_Mem_Read+0x448>)
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 fa49 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e0bf      	b.n	8006098 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	691a      	ldr	r2, [r3, #16]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f60:	2200      	movs	r2, #0
 8005f62:	494f      	ldr	r1, [pc, #316]	; (80060a0 <HAL_I2C_Mem_Read+0x448>)
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 fa1b 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e091      	b.n	8006098 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	691a      	ldr	r2, [r3, #16]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691a      	ldr	r2, [r3, #16]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	b2d2      	uxtb	r2, r2
 8005fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fe8:	e042      	b.n	8006070 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 fb2e 	bl	8006650 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e04c      	b.n	8006098 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800601a:	3b01      	subs	r3, #1
 800601c:	b29a      	uxth	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006026:	b29b      	uxth	r3, r3
 8006028:	3b01      	subs	r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b04      	cmp	r3, #4
 800603c:	d118      	bne.n	8006070 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	691a      	ldr	r2, [r3, #16]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	b2d2      	uxtb	r2, r2
 800604a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605a:	3b01      	subs	r3, #1
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006074:	2b00      	cmp	r3, #0
 8006076:	f47f aec2 	bne.w	8005dfe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	e000      	b.n	8006098 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006096:	2302      	movs	r3, #2
  }
}
 8006098:	4618      	mov	r0, r3
 800609a:	3728      	adds	r7, #40	; 0x28
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	00010004 	.word	0x00010004

080060a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af02      	add	r7, sp, #8
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	4608      	mov	r0, r1
 80060ae:	4611      	mov	r1, r2
 80060b0:	461a      	mov	r2, r3
 80060b2:	4603      	mov	r3, r0
 80060b4:	817b      	strh	r3, [r7, #10]
 80060b6:	460b      	mov	r3, r1
 80060b8:	813b      	strh	r3, [r7, #8]
 80060ba:	4613      	mov	r3, r2
 80060bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 f960 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00d      	beq.n	8006102 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060f4:	d103      	bne.n	80060fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e05f      	b.n	80061c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006102:	897b      	ldrh	r3, [r7, #10]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	461a      	mov	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006110:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	6a3a      	ldr	r2, [r7, #32]
 8006116:	492d      	ldr	r1, [pc, #180]	; (80061cc <I2C_RequestMemoryWrite+0x128>)
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 f998 	bl	800644e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e04c      	b.n	80061c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006128:	2300      	movs	r3, #0
 800612a:	617b      	str	r3, [r7, #20]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800613e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006140:	6a39      	ldr	r1, [r7, #32]
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 fa02 	bl	800654c <I2C_WaitOnTXEFlagUntilTimeout>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00d      	beq.n	800616a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	2b04      	cmp	r3, #4
 8006154:	d107      	bne.n	8006166 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006164:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e02b      	b.n	80061c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800616a:	88fb      	ldrh	r3, [r7, #6]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d105      	bne.n	800617c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006170:	893b      	ldrh	r3, [r7, #8]
 8006172:	b2da      	uxtb	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	611a      	str	r2, [r3, #16]
 800617a:	e021      	b.n	80061c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800617c:	893b      	ldrh	r3, [r7, #8]
 800617e:	0a1b      	lsrs	r3, r3, #8
 8006180:	b29b      	uxth	r3, r3
 8006182:	b2da      	uxtb	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800618a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800618c:	6a39      	ldr	r1, [r7, #32]
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 f9dc 	bl	800654c <I2C_WaitOnTXEFlagUntilTimeout>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00d      	beq.n	80061b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d107      	bne.n	80061b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e005      	b.n	80061c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061b6:	893b      	ldrh	r3, [r7, #8]
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	00010002 	.word	0x00010002

080061d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	4608      	mov	r0, r1
 80061da:	4611      	mov	r1, r2
 80061dc:	461a      	mov	r2, r3
 80061de:	4603      	mov	r3, r0
 80061e0:	817b      	strh	r3, [r7, #10]
 80061e2:	460b      	mov	r3, r1
 80061e4:	813b      	strh	r3, [r7, #8]
 80061e6:	4613      	mov	r3, r2
 80061e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006208:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	2200      	movs	r2, #0
 8006212:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 f8c2 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00d      	beq.n	800623e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006230:	d103      	bne.n	800623a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006238:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e0aa      	b.n	8006394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800623e:	897b      	ldrh	r3, [r7, #10]
 8006240:	b2db      	uxtb	r3, r3
 8006242:	461a      	mov	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800624c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	6a3a      	ldr	r2, [r7, #32]
 8006252:	4952      	ldr	r1, [pc, #328]	; (800639c <I2C_RequestMemoryRead+0x1cc>)
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 f8fa 	bl	800644e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e097      	b.n	8006394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006264:	2300      	movs	r3, #0
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800627a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627c:	6a39      	ldr	r1, [r7, #32]
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 f964 	bl	800654c <I2C_WaitOnTXEFlagUntilTimeout>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00d      	beq.n	80062a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	2b04      	cmp	r3, #4
 8006290:	d107      	bne.n	80062a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e076      	b.n	8006394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062a6:	88fb      	ldrh	r3, [r7, #6]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d105      	bne.n	80062b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062ac:	893b      	ldrh	r3, [r7, #8]
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	611a      	str	r2, [r3, #16]
 80062b6:	e021      	b.n	80062fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80062b8:	893b      	ldrh	r3, [r7, #8]
 80062ba:	0a1b      	lsrs	r3, r3, #8
 80062bc:	b29b      	uxth	r3, r3
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c8:	6a39      	ldr	r1, [r7, #32]
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 f93e 	bl	800654c <I2C_WaitOnTXEFlagUntilTimeout>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00d      	beq.n	80062f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d107      	bne.n	80062ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e050      	b.n	8006394 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062f2:	893b      	ldrh	r3, [r7, #8]
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fe:	6a39      	ldr	r1, [r7, #32]
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 f923 	bl	800654c <I2C_WaitOnTXEFlagUntilTimeout>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00d      	beq.n	8006328 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006310:	2b04      	cmp	r3, #4
 8006312:	d107      	bne.n	8006324 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006322:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e035      	b.n	8006394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006336:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	2200      	movs	r2, #0
 8006340:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 f82b 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00d      	beq.n	800636c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800635e:	d103      	bne.n	8006368 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006366:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e013      	b.n	8006394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800636c:	897b      	ldrh	r3, [r7, #10]
 800636e:	b2db      	uxtb	r3, r3
 8006370:	f043 0301 	orr.w	r3, r3, #1
 8006374:	b2da      	uxtb	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	6a3a      	ldr	r2, [r7, #32]
 8006380:	4906      	ldr	r1, [pc, #24]	; (800639c <I2C_RequestMemoryRead+0x1cc>)
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f863 	bl	800644e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e000      	b.n	8006394 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3718      	adds	r7, #24
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	00010002 	.word	0x00010002

080063a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	4613      	mov	r3, r2
 80063ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063b0:	e025      	b.n	80063fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b8:	d021      	beq.n	80063fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ba:	f7fe ff2f 	bl	800521c <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d302      	bcc.n	80063d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d116      	bne.n	80063fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2220      	movs	r2, #32
 80063da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	f043 0220 	orr.w	r2, r3, #32
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e023      	b.n	8006446 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	0c1b      	lsrs	r3, r3, #16
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b01      	cmp	r3, #1
 8006406:	d10d      	bne.n	8006424 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	43da      	mvns	r2, r3
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4013      	ands	r3, r2
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	bf0c      	ite	eq
 800641a:	2301      	moveq	r3, #1
 800641c:	2300      	movne	r3, #0
 800641e:	b2db      	uxtb	r3, r3
 8006420:	461a      	mov	r2, r3
 8006422:	e00c      	b.n	800643e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	43da      	mvns	r2, r3
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	4013      	ands	r3, r2
 8006430:	b29b      	uxth	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	bf0c      	ite	eq
 8006436:	2301      	moveq	r3, #1
 8006438:	2300      	movne	r3, #0
 800643a:	b2db      	uxtb	r3, r3
 800643c:	461a      	mov	r2, r3
 800643e:	79fb      	ldrb	r3, [r7, #7]
 8006440:	429a      	cmp	r2, r3
 8006442:	d0b6      	beq.n	80063b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	60f8      	str	r0, [r7, #12]
 8006456:	60b9      	str	r1, [r7, #8]
 8006458:	607a      	str	r2, [r7, #4]
 800645a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800645c:	e051      	b.n	8006502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800646c:	d123      	bne.n	80064b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800647c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006486:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2220      	movs	r2, #32
 8006492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	f043 0204 	orr.w	r2, r3, #4
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e046      	b.n	8006544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064bc:	d021      	beq.n	8006502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064be:	f7fe fead 	bl	800521c <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d302      	bcc.n	80064d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d116      	bne.n	8006502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2220      	movs	r2, #32
 80064de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	f043 0220 	orr.w	r2, r3, #32
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e020      	b.n	8006544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	0c1b      	lsrs	r3, r3, #16
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b01      	cmp	r3, #1
 800650a:	d10c      	bne.n	8006526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	43da      	mvns	r2, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4013      	ands	r3, r2
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	bf14      	ite	ne
 800651e:	2301      	movne	r3, #1
 8006520:	2300      	moveq	r3, #0
 8006522:	b2db      	uxtb	r3, r3
 8006524:	e00b      	b.n	800653e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	43da      	mvns	r2, r3
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	4013      	ands	r3, r2
 8006532:	b29b      	uxth	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	bf14      	ite	ne
 8006538:	2301      	movne	r3, #1
 800653a:	2300      	moveq	r3, #0
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d18d      	bne.n	800645e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006558:	e02d      	b.n	80065b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 f8ce 	bl	80066fc <I2C_IsAcknowledgeFailed>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e02d      	b.n	80065c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006570:	d021      	beq.n	80065b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006572:	f7fe fe53 	bl	800521c <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	429a      	cmp	r2, r3
 8006580:	d302      	bcc.n	8006588 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d116      	bne.n	80065b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2220      	movs	r2, #32
 8006592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	f043 0220 	orr.w	r2, r3, #32
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e007      	b.n	80065c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c0:	2b80      	cmp	r3, #128	; 0x80
 80065c2:	d1ca      	bne.n	800655a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065da:	e02d      	b.n	8006638 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 f88d 	bl	80066fc <I2C_IsAcknowledgeFailed>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e02d      	b.n	8006648 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f2:	d021      	beq.n	8006638 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065f4:	f7fe fe12 	bl	800521c <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	429a      	cmp	r2, r3
 8006602:	d302      	bcc.n	800660a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d116      	bne.n	8006638 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006624:	f043 0220 	orr.w	r2, r3, #32
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e007      	b.n	8006648 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	f003 0304 	and.w	r3, r3, #4
 8006642:	2b04      	cmp	r3, #4
 8006644:	d1ca      	bne.n	80065dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800665c:	e042      	b.n	80066e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	f003 0310 	and.w	r3, r3, #16
 8006668:	2b10      	cmp	r3, #16
 800666a:	d119      	bne.n	80066a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f06f 0210 	mvn.w	r2, #16
 8006674:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e029      	b.n	80066f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a0:	f7fe fdbc 	bl	800521c <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d302      	bcc.n	80066b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d116      	bne.n	80066e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2220      	movs	r2, #32
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	f043 0220 	orr.w	r2, r3, #32
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e007      	b.n	80066f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ee:	2b40      	cmp	r3, #64	; 0x40
 80066f0:	d1b5      	bne.n	800665e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800670e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006712:	d11b      	bne.n	800674c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800671c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2220      	movs	r2, #32
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	f043 0204 	orr.w	r2, r3, #4
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e000      	b.n	800674e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800675a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800675c:	b08f      	sub	sp, #60	; 0x3c
 800675e:	af0a      	add	r7, sp, #40	; 0x28
 8006760:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e10f      	b.n	800698c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d106      	bne.n	800678c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f00a f968 	bl	8010a5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2203      	movs	r2, #3
 8006790:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800679c:	2b00      	cmp	r3, #0
 800679e:	d102      	bne.n	80067a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f003 fcf7 	bl	800a19e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	603b      	str	r3, [r7, #0]
 80067b6:	687e      	ldr	r6, [r7, #4]
 80067b8:	466d      	mov	r5, sp
 80067ba:	f106 0410 	add.w	r4, r6, #16
 80067be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80067ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80067ce:	1d33      	adds	r3, r6, #4
 80067d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067d2:	6838      	ldr	r0, [r7, #0]
 80067d4:	f003 fbce 	bl	8009f74 <USB_CoreInit>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d005      	beq.n	80067ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2202      	movs	r2, #2
 80067e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e0d0      	b.n	800698c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2100      	movs	r1, #0
 80067f0:	4618      	mov	r0, r3
 80067f2:	f003 fce5 	bl	800a1c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067f6:	2300      	movs	r3, #0
 80067f8:	73fb      	strb	r3, [r7, #15]
 80067fa:	e04a      	b.n	8006892 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80067fc:	7bfa      	ldrb	r2, [r7, #15]
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	4613      	mov	r3, r2
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	4413      	add	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	440b      	add	r3, r1
 800680a:	333d      	adds	r3, #61	; 0x3d
 800680c:	2201      	movs	r2, #1
 800680e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006810:	7bfa      	ldrb	r2, [r7, #15]
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	4613      	mov	r3, r2
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	4413      	add	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	440b      	add	r3, r1
 800681e:	333c      	adds	r3, #60	; 0x3c
 8006820:	7bfa      	ldrb	r2, [r7, #15]
 8006822:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006824:	7bfa      	ldrb	r2, [r7, #15]
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	b298      	uxth	r0, r3
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	4613      	mov	r3, r2
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	440b      	add	r3, r1
 8006836:	3344      	adds	r3, #68	; 0x44
 8006838:	4602      	mov	r2, r0
 800683a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800683c:	7bfa      	ldrb	r2, [r7, #15]
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	4613      	mov	r3, r2
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	3340      	adds	r3, #64	; 0x40
 800684c:	2200      	movs	r2, #0
 800684e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006850:	7bfa      	ldrb	r2, [r7, #15]
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	4613      	mov	r3, r2
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	3348      	adds	r3, #72	; 0x48
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006864:	7bfa      	ldrb	r2, [r7, #15]
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	4613      	mov	r3, r2
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	334c      	adds	r3, #76	; 0x4c
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006878:	7bfa      	ldrb	r2, [r7, #15]
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	4613      	mov	r3, r2
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	4413      	add	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	440b      	add	r3, r1
 8006886:	3354      	adds	r3, #84	; 0x54
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	3301      	adds	r3, #1
 8006890:	73fb      	strb	r3, [r7, #15]
 8006892:	7bfa      	ldrb	r2, [r7, #15]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	429a      	cmp	r2, r3
 800689a:	d3af      	bcc.n	80067fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800689c:	2300      	movs	r3, #0
 800689e:	73fb      	strb	r3, [r7, #15]
 80068a0:	e044      	b.n	800692c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80068a2:	7bfa      	ldrb	r2, [r7, #15]
 80068a4:	6879      	ldr	r1, [r7, #4]
 80068a6:	4613      	mov	r3, r2
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	4413      	add	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	440b      	add	r3, r1
 80068b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80068b4:	2200      	movs	r2, #0
 80068b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80068b8:	7bfa      	ldrb	r2, [r7, #15]
 80068ba:	6879      	ldr	r1, [r7, #4]
 80068bc:	4613      	mov	r3, r2
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	440b      	add	r3, r1
 80068c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80068ca:	7bfa      	ldrb	r2, [r7, #15]
 80068cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80068ce:	7bfa      	ldrb	r2, [r7, #15]
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	4613      	mov	r3, r2
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	440b      	add	r3, r1
 80068dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80068e0:	2200      	movs	r2, #0
 80068e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80068e4:	7bfa      	ldrb	r2, [r7, #15]
 80068e6:	6879      	ldr	r1, [r7, #4]
 80068e8:	4613      	mov	r3, r2
 80068ea:	00db      	lsls	r3, r3, #3
 80068ec:	4413      	add	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	440b      	add	r3, r1
 80068f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80068f6:	2200      	movs	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80068fa:	7bfa      	ldrb	r2, [r7, #15]
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	4613      	mov	r3, r2
 8006900:	00db      	lsls	r3, r3, #3
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	440b      	add	r3, r1
 8006908:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006910:	7bfa      	ldrb	r2, [r7, #15]
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	4613      	mov	r3, r2
 8006916:	00db      	lsls	r3, r3, #3
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006926:	7bfb      	ldrb	r3, [r7, #15]
 8006928:	3301      	adds	r3, #1
 800692a:	73fb      	strb	r3, [r7, #15]
 800692c:	7bfa      	ldrb	r2, [r7, #15]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	429a      	cmp	r2, r3
 8006934:	d3b5      	bcc.n	80068a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	603b      	str	r3, [r7, #0]
 800693c:	687e      	ldr	r6, [r7, #4]
 800693e:	466d      	mov	r5, sp
 8006940:	f106 0410 	add.w	r4, r6, #16
 8006944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800694a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800694c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006950:	e885 0003 	stmia.w	r5, {r0, r1}
 8006954:	1d33      	adds	r3, r6, #4
 8006956:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006958:	6838      	ldr	r0, [r7, #0]
 800695a:	f003 fc7d 	bl	800a258 <USB_DevInit>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d005      	beq.n	8006970 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e00d      	b.n	800698c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f004 fdcc 	bl	800b522 <USB_DevDisconnect>

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006994 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d101      	bne.n	80069b0 <HAL_PCD_Start+0x1c>
 80069ac:	2302      	movs	r3, #2
 80069ae:	e020      	b.n	80069f2 <HAL_PCD_Start+0x5e>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d109      	bne.n	80069d4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d005      	beq.n	80069d4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4618      	mov	r0, r3
 80069da:	f003 fbcf 	bl	800a17c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f004 fd7c 	bl	800b4e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80069fa:	b590      	push	{r4, r7, lr}
 80069fc:	b08d      	sub	sp, #52	; 0x34
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f004 fe3a 	bl	800b68a <USB_GetMode>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f040 848a 	bne.w	8007332 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f004 fd9e 	bl	800b564 <USB_ReadInterrupts>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 8480 	beq.w	8007330 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	0a1b      	lsrs	r3, r3, #8
 8006a3a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f004 fd8b 	bl	800b564 <USB_ReadInterrupts>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d107      	bne.n	8006a68 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	695a      	ldr	r2, [r3, #20]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f002 0202 	and.w	r2, r2, #2
 8006a66:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f004 fd79 	bl	800b564 <USB_ReadInterrupts>
 8006a72:	4603      	mov	r3, r0
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	2b10      	cmp	r3, #16
 8006a7a:	d161      	bne.n	8006b40 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699a      	ldr	r2, [r3, #24]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0210 	bic.w	r2, r2, #16
 8006a8a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	f003 020f 	and.w	r2, r3, #15
 8006a98:	4613      	mov	r3, r2
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	4413      	add	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	0c5b      	lsrs	r3, r3, #17
 8006ab0:	f003 030f 	and.w	r3, r3, #15
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d124      	bne.n	8006b02 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006abe:	4013      	ands	r3, r2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d035      	beq.n	8006b30 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	091b      	lsrs	r3, r3, #4
 8006acc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006ace:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	6a38      	ldr	r0, [r7, #32]
 8006ad8:	f004 fbb0 	bl	800b23c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	691a      	ldr	r2, [r3, #16]
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	091b      	lsrs	r3, r3, #4
 8006ae4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ae8:	441a      	add	r2, r3
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	6a1a      	ldr	r2, [r3, #32]
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	091b      	lsrs	r3, r3, #4
 8006af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006afa:	441a      	add	r2, r3
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	621a      	str	r2, [r3, #32]
 8006b00:	e016      	b.n	8006b30 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	0c5b      	lsrs	r3, r3, #17
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	2b06      	cmp	r3, #6
 8006b0c:	d110      	bne.n	8006b30 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b14:	2208      	movs	r2, #8
 8006b16:	4619      	mov	r1, r3
 8006b18:	6a38      	ldr	r0, [r7, #32]
 8006b1a:	f004 fb8f 	bl	800b23c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	6a1a      	ldr	r2, [r3, #32]
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	091b      	lsrs	r3, r3, #4
 8006b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b2a:	441a      	add	r2, r3
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699a      	ldr	r2, [r3, #24]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0210 	orr.w	r2, r2, #16
 8006b3e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f004 fd0d 	bl	800b564 <USB_ReadInterrupts>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b54:	f040 80a7 	bne.w	8006ca6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f004 fd12 	bl	800b58a <USB_ReadDevAllOutEpInterrupt>
 8006b66:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006b68:	e099      	b.n	8006c9e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 808e 	beq.w	8006c92 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b7c:	b2d2      	uxtb	r2, r2
 8006b7e:	4611      	mov	r1, r2
 8006b80:	4618      	mov	r0, r3
 8006b82:	f004 fd36 	bl	800b5f2 <USB_ReadDevOutEPInterrupt>
 8006b86:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00c      	beq.n	8006bac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006ba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fec2 	bl	8007930 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f003 0308 	and.w	r3, r3, #8
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00c      	beq.n	8006bd0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	2308      	movs	r3, #8
 8006bc6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006bc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 ff98 	bl	8007b00 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f003 0310 	and.w	r3, r3, #16
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d008      	beq.n	8006bec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be6:	461a      	mov	r2, r3
 8006be8:	2310      	movs	r3, #16
 8006bea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f003 0302 	and.w	r3, r3, #2
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d030      	beq.n	8006c58 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bfe:	2b80      	cmp	r3, #128	; 0x80
 8006c00:	d109      	bne.n	8006c16 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	69fa      	ldr	r2, [r7, #28]
 8006c0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c14:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c18:	4613      	mov	r3, r2
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	4413      	add	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	4413      	add	r3, r2
 8006c28:	3304      	adds	r3, #4
 8006c2a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	78db      	ldrb	r3, [r3, #3]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d108      	bne.n	8006c46 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	2200      	movs	r2, #0
 8006c38:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f00a f807 	bl	8010c54 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c52:	461a      	mov	r2, r3
 8006c54:	2302      	movs	r3, #2
 8006c56:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f003 0320 	and.w	r3, r3, #32
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d008      	beq.n	8006c74 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c6e:	461a      	mov	r2, r3
 8006c70:	2320      	movs	r3, #32
 8006c72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d009      	beq.n	8006c92 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c90:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	3301      	adds	r3, #1
 8006c96:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9a:	085b      	lsrs	r3, r3, #1
 8006c9c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f47f af62 	bne.w	8006b6a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f004 fc5a 	bl	800b564 <USB_ReadInterrupts>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cba:	f040 80db 	bne.w	8006e74 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f004 fc7b 	bl	800b5be <USB_ReadDevAllInEpInterrupt>
 8006cc8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006cce:	e0cd      	b.n	8006e6c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 80c2 	beq.w	8006e60 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f004 fca1 	bl	800b62e <USB_ReadDevInEPInterrupt>
 8006cec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d057      	beq.n	8006da8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	f003 030f 	and.w	r3, r3, #15
 8006cfe:	2201      	movs	r2, #1
 8006d00:	fa02 f303 	lsl.w	r3, r2, r3
 8006d04:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	43db      	mvns	r3, r3
 8006d12:	69f9      	ldr	r1, [r7, #28]
 8006d14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d18:	4013      	ands	r3, r2
 8006d1a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d28:	461a      	mov	r2, r3
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d132      	bne.n	8006d9c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006d36:	6879      	ldr	r1, [r7, #4]
 8006d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	00db      	lsls	r3, r3, #3
 8006d3e:	4413      	add	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	440b      	add	r3, r1
 8006d44:	334c      	adds	r3, #76	; 0x4c
 8006d46:	6819      	ldr	r1, [r3, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	4413      	add	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4403      	add	r3, r0
 8006d56:	3348      	adds	r3, #72	; 0x48
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4419      	add	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d60:	4613      	mov	r3, r2
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	4413      	add	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4403      	add	r3, r0
 8006d6a:	334c      	adds	r3, #76	; 0x4c
 8006d6c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d113      	bne.n	8006d9c <HAL_PCD_IRQHandler+0x3a2>
 8006d74:	6879      	ldr	r1, [r7, #4]
 8006d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d78:	4613      	mov	r3, r2
 8006d7a:	00db      	lsls	r3, r3, #3
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	440b      	add	r3, r1
 8006d82:	3354      	adds	r3, #84	; 0x54
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d108      	bne.n	8006d9c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6818      	ldr	r0, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006d94:	461a      	mov	r2, r3
 8006d96:	2101      	movs	r1, #1
 8006d98:	f004 fca8 	bl	800b6ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f009 fedb 	bl	8010b5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f003 0308 	and.w	r3, r3, #8
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d008      	beq.n	8006dc4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	2308      	movs	r3, #8
 8006dc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f003 0310 	and.w	r3, r3, #16
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d008      	beq.n	8006de0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dda:	461a      	mov	r2, r3
 8006ddc:	2310      	movs	r3, #16
 8006dde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d008      	beq.n	8006dfc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df6:	461a      	mov	r2, r3
 8006df8:	2340      	movs	r3, #64	; 0x40
 8006dfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d023      	beq.n	8006e4e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006e06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e08:	6a38      	ldr	r0, [r7, #32]
 8006e0a:	f003 fb89 	bl	800a520 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e10:	4613      	mov	r3, r2
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	3338      	adds	r3, #56	; 0x38
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	3304      	adds	r3, #4
 8006e20:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	78db      	ldrb	r3, [r3, #3]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d108      	bne.n	8006e3c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f009 ff1e 	bl	8010c78 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e48:	461a      	mov	r2, r3
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fcdb 	bl	8007816 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	3301      	adds	r3, #1
 8006e64:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e68:	085b      	lsrs	r3, r3, #1
 8006e6a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f47f af2e 	bne.w	8006cd0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f004 fb73 	bl	800b564 <USB_ReadInterrupts>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e88:	d122      	bne.n	8006ed0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	69fa      	ldr	r2, [r7, #28]
 8006e94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e98:	f023 0301 	bic.w	r3, r3, #1
 8006e9c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d108      	bne.n	8006eba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fec2 	bl	8007c3c <HAL_PCDEx_LPM_Callback>
 8006eb8:	e002      	b.n	8006ec0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f009 febc 	bl	8010c38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	695a      	ldr	r2, [r3, #20]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006ece:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f004 fb45 	bl	800b564 <USB_ReadInterrupts>
 8006eda:	4603      	mov	r3, r0
 8006edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ee4:	d112      	bne.n	8006f0c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d102      	bne.n	8006efc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f009 fe78 	bl	8010bec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	695a      	ldr	r2, [r3, #20]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006f0a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f004 fb27 	bl	800b564 <USB_ReadInterrupts>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f20:	f040 80b7 	bne.w	8007092 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f32:	f023 0301 	bic.w	r3, r3, #1
 8006f36:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2110      	movs	r1, #16
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f003 faee 	bl	800a520 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f44:	2300      	movs	r3, #0
 8006f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f48:	e046      	b.n	8006fd8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f56:	461a      	mov	r2, r3
 8006f58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f5c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f6e:	0151      	lsls	r1, r2, #5
 8006f70:	69fa      	ldr	r2, [r7, #28]
 8006f72:	440a      	add	r2, r1
 8006f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f90:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa2:	0151      	lsls	r1, r2, #5
 8006fa4:	69fa      	ldr	r2, [r7, #28]
 8006fa6:	440a      	add	r2, r1
 8006fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fb0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fc2:	0151      	lsls	r1, r2, #5
 8006fc4:	69fa      	ldr	r2, [r7, #28]
 8006fc6:	440a      	add	r2, r1
 8006fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fd0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d3b3      	bcc.n	8006f4a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	69fa      	ldr	r2, [r7, #28]
 8006fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ff0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006ff4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d016      	beq.n	800702c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007008:	69fa      	ldr	r2, [r7, #28]
 800700a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800700e:	f043 030b 	orr.w	r3, r3, #11
 8007012:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701e:	69fa      	ldr	r2, [r7, #28]
 8007020:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007024:	f043 030b 	orr.w	r3, r3, #11
 8007028:	6453      	str	r3, [r2, #68]	; 0x44
 800702a:	e015      	b.n	8007058 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	69fa      	ldr	r2, [r7, #28]
 8007036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800703a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800703e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007042:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	69fa      	ldr	r2, [r7, #28]
 800704e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007052:	f043 030b 	orr.w	r3, r3, #11
 8007056:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	69fa      	ldr	r2, [r7, #28]
 8007062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007066:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800706a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6818      	ldr	r0, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800707c:	461a      	mov	r2, r3
 800707e:	f004 fb35 	bl	800b6ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695a      	ldr	r2, [r3, #20]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007090:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4618      	mov	r0, r3
 8007098:	f004 fa64 	bl	800b564 <USB_ReadInterrupts>
 800709c:	4603      	mov	r3, r0
 800709e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070a6:	d124      	bne.n	80070f2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f004 fafa 	bl	800b6a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f003 faaf 	bl	800a61a <USB_GetDevSpeed>
 80070bc:	4603      	mov	r3, r0
 80070be:	461a      	mov	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681c      	ldr	r4, [r3, #0]
 80070c8:	f001 fa26 	bl	8008518 <HAL_RCC_GetHCLKFreq>
 80070cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	461a      	mov	r2, r3
 80070d6:	4620      	mov	r0, r4
 80070d8:	f002 ffae 	bl	800a038 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f009 fd66 	bl	8010bae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	695a      	ldr	r2, [r3, #20]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80070f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f004 fa34 	bl	800b564 <USB_ReadInterrupts>
 80070fc:	4603      	mov	r3, r0
 80070fe:	f003 0308 	and.w	r3, r3, #8
 8007102:	2b08      	cmp	r3, #8
 8007104:	d10a      	bne.n	800711c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f009 fd43 	bl	8010b92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	695a      	ldr	r2, [r3, #20]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f002 0208 	and.w	r2, r2, #8
 800711a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4618      	mov	r0, r3
 8007122:	f004 fa1f 	bl	800b564 <USB_ReadInterrupts>
 8007126:	4603      	mov	r3, r0
 8007128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712c:	2b80      	cmp	r3, #128	; 0x80
 800712e:	d122      	bne.n	8007176 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800713c:	2301      	movs	r3, #1
 800713e:	627b      	str	r3, [r7, #36]	; 0x24
 8007140:	e014      	b.n	800716c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007142:	6879      	ldr	r1, [r7, #4]
 8007144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007146:	4613      	mov	r3, r2
 8007148:	00db      	lsls	r3, r3, #3
 800714a:	4413      	add	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	440b      	add	r3, r1
 8007150:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d105      	bne.n	8007166 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	b2db      	uxtb	r3, r3
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fb27 	bl	80077b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	3301      	adds	r3, #1
 800716a:	627b      	str	r3, [r7, #36]	; 0x24
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007172:	429a      	cmp	r2, r3
 8007174:	d3e5      	bcc.n	8007142 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4618      	mov	r0, r3
 800717c:	f004 f9f2 	bl	800b564 <USB_ReadInterrupts>
 8007180:	4603      	mov	r3, r0
 8007182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800718a:	d13b      	bne.n	8007204 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800718c:	2301      	movs	r3, #1
 800718e:	627b      	str	r3, [r7, #36]	; 0x24
 8007190:	e02b      	b.n	80071ea <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	4413      	add	r3, r2
 800719a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a6:	4613      	mov	r3, r2
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	4413      	add	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	440b      	add	r3, r1
 80071b0:	3340      	adds	r3, #64	; 0x40
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d115      	bne.n	80071e4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80071b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	da12      	bge.n	80071e4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80071be:	6879      	ldr	r1, [r7, #4]
 80071c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c2:	4613      	mov	r3, r2
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	4413      	add	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	440b      	add	r3, r1
 80071cc:	333f      	adds	r3, #63	; 0x3f
 80071ce:	2201      	movs	r2, #1
 80071d0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80071d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fae8 	bl	80077b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	3301      	adds	r3, #1
 80071e8:	627b      	str	r3, [r7, #36]	; 0x24
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d3ce      	bcc.n	8007192 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695a      	ldr	r2, [r3, #20]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007202:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4618      	mov	r0, r3
 800720a:	f004 f9ab 	bl	800b564 <USB_ReadInterrupts>
 800720e:	4603      	mov	r3, r0
 8007210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007214:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007218:	d155      	bne.n	80072c6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800721a:	2301      	movs	r3, #1
 800721c:	627b      	str	r3, [r7, #36]	; 0x24
 800721e:	e045      	b.n	80072ac <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007230:	6879      	ldr	r1, [r7, #4]
 8007232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007234:	4613      	mov	r3, r2
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	4413      	add	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	440b      	add	r3, r1
 800723e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d12e      	bne.n	80072a6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007248:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800724a:	2b00      	cmp	r3, #0
 800724c:	da2b      	bge.n	80072a6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800725a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800725e:	429a      	cmp	r2, r3
 8007260:	d121      	bne.n	80072a6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007266:	4613      	mov	r3, r2
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	440b      	add	r3, r1
 8007270:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007274:	2201      	movs	r2, #1
 8007276:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10a      	bne.n	80072a6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	69fa      	ldr	r2, [r7, #28]
 800729a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800729e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072a2:	6053      	str	r3, [r2, #4]
            break;
 80072a4:	e007      	b.n	80072b6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	3301      	adds	r3, #1
 80072aa:	627b      	str	r3, [r7, #36]	; 0x24
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d3b4      	bcc.n	8007220 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	695a      	ldr	r2, [r3, #20]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80072c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f004 f94a 	bl	800b564 <USB_ReadInterrupts>
 80072d0:	4603      	mov	r3, r0
 80072d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80072d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072da:	d10a      	bne.n	80072f2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f009 fcdd 	bl	8010c9c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	695a      	ldr	r2, [r3, #20]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80072f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f004 f934 	bl	800b564 <USB_ReadInterrupts>
 80072fc:	4603      	mov	r3, r0
 80072fe:	f003 0304 	and.w	r3, r3, #4
 8007302:	2b04      	cmp	r3, #4
 8007304:	d115      	bne.n	8007332 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b00      	cmp	r3, #0
 8007316:	d002      	beq.n	800731e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f009 fccd 	bl	8010cb8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6859      	ldr	r1, [r3, #4]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	430a      	orrs	r2, r1
 800732c:	605a      	str	r2, [r3, #4]
 800732e:	e000      	b.n	8007332 <HAL_PCD_IRQHandler+0x938>
      return;
 8007330:	bf00      	nop
    }
  }
}
 8007332:	3734      	adds	r7, #52	; 0x34
 8007334:	46bd      	mov	sp, r7
 8007336:	bd90      	pop	{r4, r7, pc}

08007338 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	460b      	mov	r3, r1
 8007342:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800734a:	2b01      	cmp	r3, #1
 800734c:	d101      	bne.n	8007352 <HAL_PCD_SetAddress+0x1a>
 800734e:	2302      	movs	r3, #2
 8007350:	e013      	b.n	800737a <HAL_PCD_SetAddress+0x42>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	78fa      	ldrb	r2, [r7, #3]
 800735e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	78fa      	ldrb	r2, [r7, #3]
 8007368:	4611      	mov	r1, r2
 800736a:	4618      	mov	r0, r3
 800736c:	f004 f892 	bl	800b494 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b084      	sub	sp, #16
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	4608      	mov	r0, r1
 800738c:	4611      	mov	r1, r2
 800738e:	461a      	mov	r2, r3
 8007390:	4603      	mov	r3, r0
 8007392:	70fb      	strb	r3, [r7, #3]
 8007394:	460b      	mov	r3, r1
 8007396:	803b      	strh	r3, [r7, #0]
 8007398:	4613      	mov	r3, r2
 800739a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80073a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	da0f      	bge.n	80073c8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073a8:	78fb      	ldrb	r3, [r7, #3]
 80073aa:	f003 020f 	and.w	r2, r3, #15
 80073ae:	4613      	mov	r3, r2
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	4413      	add	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	3338      	adds	r3, #56	; 0x38
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	4413      	add	r3, r2
 80073bc:	3304      	adds	r3, #4
 80073be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2201      	movs	r2, #1
 80073c4:	705a      	strb	r2, [r3, #1]
 80073c6:	e00f      	b.n	80073e8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073c8:	78fb      	ldrb	r3, [r7, #3]
 80073ca:	f003 020f 	and.w	r2, r3, #15
 80073ce:	4613      	mov	r3, r2
 80073d0:	00db      	lsls	r3, r3, #3
 80073d2:	4413      	add	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	4413      	add	r3, r2
 80073de:	3304      	adds	r3, #4
 80073e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80073e8:	78fb      	ldrb	r3, [r7, #3]
 80073ea:	f003 030f 	and.w	r3, r3, #15
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80073f4:	883a      	ldrh	r2, [r7, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	78ba      	ldrb	r2, [r7, #2]
 80073fe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	785b      	ldrb	r3, [r3, #1]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d004      	beq.n	8007412 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	b29a      	uxth	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007412:	78bb      	ldrb	r3, [r7, #2]
 8007414:	2b02      	cmp	r3, #2
 8007416:	d102      	bne.n	800741e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007424:	2b01      	cmp	r3, #1
 8007426:	d101      	bne.n	800742c <HAL_PCD_EP_Open+0xaa>
 8007428:	2302      	movs	r3, #2
 800742a:	e00e      	b.n	800744a <HAL_PCD_EP_Open+0xc8>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68f9      	ldr	r1, [r7, #12]
 800743a:	4618      	mov	r0, r3
 800743c:	f003 f912 	bl	800a664 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007448:	7afb      	ldrb	r3, [r7, #11]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b084      	sub	sp, #16
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	460b      	mov	r3, r1
 800745c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800745e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007462:	2b00      	cmp	r3, #0
 8007464:	da0f      	bge.n	8007486 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007466:	78fb      	ldrb	r3, [r7, #3]
 8007468:	f003 020f 	and.w	r2, r3, #15
 800746c:	4613      	mov	r3, r2
 800746e:	00db      	lsls	r3, r3, #3
 8007470:	4413      	add	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	3338      	adds	r3, #56	; 0x38
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	4413      	add	r3, r2
 800747a:	3304      	adds	r3, #4
 800747c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2201      	movs	r2, #1
 8007482:	705a      	strb	r2, [r3, #1]
 8007484:	e00f      	b.n	80074a6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	f003 020f 	and.w	r2, r3, #15
 800748c:	4613      	mov	r3, r2
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	4413      	add	r3, r2
 800749c:	3304      	adds	r3, #4
 800749e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80074a6:	78fb      	ldrb	r3, [r7, #3]
 80074a8:	f003 030f 	and.w	r3, r3, #15
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d101      	bne.n	80074c0 <HAL_PCD_EP_Close+0x6e>
 80074bc:	2302      	movs	r3, #2
 80074be:	e00e      	b.n	80074de <HAL_PCD_EP_Close+0x8c>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68f9      	ldr	r1, [r7, #12]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f003 f950 	bl	800a774 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b086      	sub	sp, #24
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	603b      	str	r3, [r7, #0]
 80074f2:	460b      	mov	r3, r1
 80074f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074f6:	7afb      	ldrb	r3, [r7, #11]
 80074f8:	f003 020f 	and.w	r2, r3, #15
 80074fc:	4613      	mov	r3, r2
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	4413      	add	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	4413      	add	r3, r2
 800750c:	3304      	adds	r3, #4
 800750e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2200      	movs	r2, #0
 8007520:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	2200      	movs	r2, #0
 8007526:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007528:	7afb      	ldrb	r3, [r7, #11]
 800752a:	f003 030f 	and.w	r3, r3, #15
 800752e:	b2da      	uxtb	r2, r3
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d102      	bne.n	8007542 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007542:	7afb      	ldrb	r3, [r7, #11]
 8007544:	f003 030f 	and.w	r3, r3, #15
 8007548:	2b00      	cmp	r3, #0
 800754a:	d109      	bne.n	8007560 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6818      	ldr	r0, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	b2db      	uxtb	r3, r3
 8007556:	461a      	mov	r2, r3
 8007558:	6979      	ldr	r1, [r7, #20]
 800755a:	f003 fc2f 	bl	800adbc <USB_EP0StartXfer>
 800755e:	e008      	b.n	8007572 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6818      	ldr	r0, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	b2db      	uxtb	r3, r3
 800756a:	461a      	mov	r2, r3
 800756c:	6979      	ldr	r1, [r7, #20]
 800756e:	f003 f9dd 	bl	800a92c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	f003 020f 	and.w	r2, r3, #15
 800758e:	6879      	ldr	r1, [r7, #4]
 8007590:	4613      	mov	r3, r2
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	4413      	add	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	440b      	add	r3, r1
 800759a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800759e:	681b      	ldr	r3, [r3, #0]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	607a      	str	r2, [r7, #4]
 80075b6:	603b      	str	r3, [r7, #0]
 80075b8:	460b      	mov	r3, r1
 80075ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075bc:	7afb      	ldrb	r3, [r7, #11]
 80075be:	f003 020f 	and.w	r2, r3, #15
 80075c2:	4613      	mov	r3, r2
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	4413      	add	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	3338      	adds	r3, #56	; 0x38
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	4413      	add	r3, r2
 80075d0:	3304      	adds	r3, #4
 80075d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	2200      	movs	r2, #0
 80075e4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2201      	movs	r2, #1
 80075ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80075ec:	7afb      	ldrb	r3, [r7, #11]
 80075ee:	f003 030f 	and.w	r3, r3, #15
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d102      	bne.n	8007606 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007606:	7afb      	ldrb	r3, [r7, #11]
 8007608:	f003 030f 	and.w	r3, r3, #15
 800760c:	2b00      	cmp	r3, #0
 800760e:	d109      	bne.n	8007624 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6818      	ldr	r0, [r3, #0]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	461a      	mov	r2, r3
 800761c:	6979      	ldr	r1, [r7, #20]
 800761e:	f003 fbcd 	bl	800adbc <USB_EP0StartXfer>
 8007622:	e008      	b.n	8007636 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6818      	ldr	r0, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	461a      	mov	r2, r3
 8007630:	6979      	ldr	r1, [r7, #20]
 8007632:	f003 f97b 	bl	800a92c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800764c:	78fb      	ldrb	r3, [r7, #3]
 800764e:	f003 020f 	and.w	r2, r3, #15
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	429a      	cmp	r2, r3
 8007658:	d901      	bls.n	800765e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e050      	b.n	8007700 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800765e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007662:	2b00      	cmp	r3, #0
 8007664:	da0f      	bge.n	8007686 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007666:	78fb      	ldrb	r3, [r7, #3]
 8007668:	f003 020f 	and.w	r2, r3, #15
 800766c:	4613      	mov	r3, r2
 800766e:	00db      	lsls	r3, r3, #3
 8007670:	4413      	add	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	3338      	adds	r3, #56	; 0x38
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	4413      	add	r3, r2
 800767a:	3304      	adds	r3, #4
 800767c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2201      	movs	r2, #1
 8007682:	705a      	strb	r2, [r3, #1]
 8007684:	e00d      	b.n	80076a2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007686:	78fa      	ldrb	r2, [r7, #3]
 8007688:	4613      	mov	r3, r2
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	4413      	add	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	4413      	add	r3, r2
 8007698:	3304      	adds	r3, #4
 800769a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80076a8:	78fb      	ldrb	r3, [r7, #3]
 80076aa:	f003 030f 	and.w	r3, r3, #15
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d101      	bne.n	80076c2 <HAL_PCD_EP_SetStall+0x82>
 80076be:	2302      	movs	r3, #2
 80076c0:	e01e      	b.n	8007700 <HAL_PCD_EP_SetStall+0xc0>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68f9      	ldr	r1, [r7, #12]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f003 fe0b 	bl	800b2ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80076d6:	78fb      	ldrb	r3, [r7, #3]
 80076d8:	f003 030f 	and.w	r3, r3, #15
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10a      	bne.n	80076f6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6818      	ldr	r0, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	b2d9      	uxtb	r1, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80076f0:	461a      	mov	r2, r3
 80076f2:	f003 fffb 	bl	800b6ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007714:	78fb      	ldrb	r3, [r7, #3]
 8007716:	f003 020f 	and.w	r2, r3, #15
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	429a      	cmp	r2, r3
 8007720:	d901      	bls.n	8007726 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e042      	b.n	80077ac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007726:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800772a:	2b00      	cmp	r3, #0
 800772c:	da0f      	bge.n	800774e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800772e:	78fb      	ldrb	r3, [r7, #3]
 8007730:	f003 020f 	and.w	r2, r3, #15
 8007734:	4613      	mov	r3, r2
 8007736:	00db      	lsls	r3, r3, #3
 8007738:	4413      	add	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	3338      	adds	r3, #56	; 0x38
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	4413      	add	r3, r2
 8007742:	3304      	adds	r3, #4
 8007744:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2201      	movs	r2, #1
 800774a:	705a      	strb	r2, [r3, #1]
 800774c:	e00f      	b.n	800776e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800774e:	78fb      	ldrb	r3, [r7, #3]
 8007750:	f003 020f 	and.w	r2, r3, #15
 8007754:	4613      	mov	r3, r2
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	4413      	add	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	4413      	add	r3, r2
 8007764:	3304      	adds	r3, #4
 8007766:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007774:	78fb      	ldrb	r3, [r7, #3]
 8007776:	f003 030f 	and.w	r3, r3, #15
 800777a:	b2da      	uxtb	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007786:	2b01      	cmp	r3, #1
 8007788:	d101      	bne.n	800778e <HAL_PCD_EP_ClrStall+0x86>
 800778a:	2302      	movs	r3, #2
 800778c:	e00e      	b.n	80077ac <HAL_PCD_EP_ClrStall+0xa4>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68f9      	ldr	r1, [r7, #12]
 800779c:	4618      	mov	r0, r3
 800779e:	f003 fe13 	bl	800b3c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80077c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	da0c      	bge.n	80077e2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	f003 020f 	and.w	r2, r3, #15
 80077ce:	4613      	mov	r3, r2
 80077d0:	00db      	lsls	r3, r3, #3
 80077d2:	4413      	add	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	3338      	adds	r3, #56	; 0x38
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	4413      	add	r3, r2
 80077dc:	3304      	adds	r3, #4
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	e00c      	b.n	80077fc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077e2:	78fb      	ldrb	r3, [r7, #3]
 80077e4:	f003 020f 	and.w	r2, r3, #15
 80077e8:	4613      	mov	r3, r2
 80077ea:	00db      	lsls	r3, r3, #3
 80077ec:	4413      	add	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	4413      	add	r3, r2
 80077f8:	3304      	adds	r3, #4
 80077fa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68f9      	ldr	r1, [r7, #12]
 8007802:	4618      	mov	r0, r3
 8007804:	f003 fc32 	bl	800b06c <USB_EPStopXfer>
 8007808:	4603      	mov	r3, r0
 800780a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800780c:	7afb      	ldrb	r3, [r7, #11]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b08a      	sub	sp, #40	; 0x28
 800781a:	af02      	add	r7, sp, #8
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	4613      	mov	r3, r2
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	4413      	add	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	3338      	adds	r3, #56	; 0x38
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	4413      	add	r3, r2
 800783a:	3304      	adds	r3, #4
 800783c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6a1a      	ldr	r2, [r3, #32]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	429a      	cmp	r2, r3
 8007848:	d901      	bls.n	800784e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e06c      	b.n	8007928 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	699a      	ldr	r2, [r3, #24]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	69fa      	ldr	r2, [r7, #28]
 8007860:	429a      	cmp	r2, r3
 8007862:	d902      	bls.n	800786a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	3303      	adds	r3, #3
 800786e:	089b      	lsrs	r3, r3, #2
 8007870:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007872:	e02b      	b.n	80078cc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	699a      	ldr	r2, [r3, #24]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	69fa      	ldr	r2, [r7, #28]
 8007886:	429a      	cmp	r2, r3
 8007888:	d902      	bls.n	8007890 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	3303      	adds	r3, #3
 8007894:	089b      	lsrs	r3, r3, #2
 8007896:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6919      	ldr	r1, [r3, #16]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	4603      	mov	r3, r0
 80078ae:	6978      	ldr	r0, [r7, #20]
 80078b0:	f003 fc86 	bl	800b1c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	691a      	ldr	r2, [r3, #16]
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	441a      	add	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6a1a      	ldr	r2, [r3, #32]
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	441a      	add	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	b29b      	uxth	r3, r3
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d809      	bhi.n	80078f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6a1a      	ldr	r2, [r3, #32]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d203      	bcs.n	80078f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1be      	bne.n	8007874 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	699a      	ldr	r2, [r3, #24]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d811      	bhi.n	8007926 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	f003 030f 	and.w	r3, r3, #15
 8007908:	2201      	movs	r2, #1
 800790a:	fa02 f303 	lsl.w	r3, r2, r3
 800790e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	43db      	mvns	r3, r3
 800791c:	6939      	ldr	r1, [r7, #16]
 800791e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007922:	4013      	ands	r3, r2
 8007924:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3720      	adds	r7, #32
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	333c      	adds	r3, #60	; 0x3c
 8007948:	3304      	adds	r3, #4
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	015a      	lsls	r2, r3, #5
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	4413      	add	r3, r2
 8007956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d17b      	bne.n	8007a5e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	f003 0308 	and.w	r3, r3, #8
 800796c:	2b00      	cmp	r3, #0
 800796e:	d015      	beq.n	800799c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	4a61      	ldr	r2, [pc, #388]	; (8007af8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007974:	4293      	cmp	r3, r2
 8007976:	f240 80b9 	bls.w	8007aec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 80b3 	beq.w	8007aec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	4413      	add	r3, r2
 800798e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007992:	461a      	mov	r2, r3
 8007994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007998:	6093      	str	r3, [r2, #8]
 800799a:	e0a7      	b.n	8007aec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f003 0320 	and.w	r3, r3, #32
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d009      	beq.n	80079ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b2:	461a      	mov	r2, r3
 80079b4:	2320      	movs	r3, #32
 80079b6:	6093      	str	r3, [r2, #8]
 80079b8:	e098      	b.n	8007aec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f040 8093 	bne.w	8007aec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	4a4b      	ldr	r2, [pc, #300]	; (8007af8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d90f      	bls.n	80079ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00a      	beq.n	80079ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e4:	461a      	mov	r2, r3
 80079e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ea:	6093      	str	r3, [r2, #8]
 80079ec:	e07e      	b.n	8007aec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	4613      	mov	r3, r2
 80079f2:	00db      	lsls	r3, r3, #3
 80079f4:	4413      	add	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	4413      	add	r3, r2
 8007a00:	3304      	adds	r3, #4
 8007a02:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	69da      	ldr	r2, [r3, #28]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	0159      	lsls	r1, r3, #5
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	440b      	add	r3, r1
 8007a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a1a:	1ad2      	subs	r2, r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d114      	bne.n	8007a50 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d109      	bne.n	8007a42 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007a38:	461a      	mov	r2, r3
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	f003 fe56 	bl	800b6ec <USB_EP0_OutStart>
 8007a40:	e006      	b.n	8007a50 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	691a      	ldr	r2, [r3, #16]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	441a      	add	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f009 f866 	bl	8010b28 <HAL_PCD_DataOutStageCallback>
 8007a5c:	e046      	b.n	8007aec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	4a26      	ldr	r2, [pc, #152]	; (8007afc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d124      	bne.n	8007ab0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00a      	beq.n	8007a86 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	015a      	lsls	r2, r3, #5
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a82:	6093      	str	r3, [r2, #8]
 8007a84:	e032      	b.n	8007aec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f003 0320 	and.w	r3, r3, #32
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d008      	beq.n	8007aa2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	2320      	movs	r3, #32
 8007aa0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f009 f83d 	bl	8010b28 <HAL_PCD_DataOutStageCallback>
 8007aae:	e01d      	b.n	8007aec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d114      	bne.n	8007ae0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007ab6:	6879      	ldr	r1, [r7, #4]
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	4613      	mov	r3, r2
 8007abc:	00db      	lsls	r3, r3, #3
 8007abe:	4413      	add	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	440b      	add	r3, r1
 8007ac4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d108      	bne.n	8007ae0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6818      	ldr	r0, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007ad8:	461a      	mov	r2, r3
 8007ada:	2100      	movs	r1, #0
 8007adc:	f003 fe06 	bl	800b6ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f009 f81e 	bl	8010b28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3720      	adds	r7, #32
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	4f54300a 	.word	0x4f54300a
 8007afc:	4f54310a 	.word	0x4f54310a

08007b00 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	333c      	adds	r3, #60	; 0x3c
 8007b18:	3304      	adds	r3, #4
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	015a      	lsls	r2, r3, #5
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	4a15      	ldr	r2, [pc, #84]	; (8007b88 <PCD_EP_OutSetupPacket_int+0x88>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d90e      	bls.n	8007b54 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d009      	beq.n	8007b54 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b52:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f008 ffd5 	bl	8010b04 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	4a0a      	ldr	r2, [pc, #40]	; (8007b88 <PCD_EP_OutSetupPacket_int+0x88>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d90c      	bls.n	8007b7c <PCD_EP_OutSetupPacket_int+0x7c>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d108      	bne.n	8007b7c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6818      	ldr	r0, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007b74:	461a      	mov	r2, r3
 8007b76:	2101      	movs	r1, #1
 8007b78:	f003 fdb8 	bl	800b6ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	4f54300a 	.word	0x4f54300a

08007b8c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	460b      	mov	r3, r1
 8007b96:	70fb      	strb	r3, [r7, #3]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007ba4:	78fb      	ldrb	r3, [r7, #3]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d107      	bne.n	8007bba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007baa:	883b      	ldrh	r3, [r7, #0]
 8007bac:	0419      	lsls	r1, r3, #16
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	629a      	str	r2, [r3, #40]	; 0x28
 8007bb8:	e028      	b.n	8007c0c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc0:	0c1b      	lsrs	r3, r3, #16
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007bc8:	2300      	movs	r3, #0
 8007bca:	73fb      	strb	r3, [r7, #15]
 8007bcc:	e00d      	b.n	8007bea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	3340      	adds	r3, #64	; 0x40
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	0c1b      	lsrs	r3, r3, #16
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	4413      	add	r3, r2
 8007be2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
 8007be6:	3301      	adds	r3, #1
 8007be8:	73fb      	strb	r3, [r7, #15]
 8007bea:	7bfa      	ldrb	r2, [r7, #15]
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d3ec      	bcc.n	8007bce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007bf4:	883b      	ldrh	r3, [r7, #0]
 8007bf6:	0418      	lsls	r0, r3, #16
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6819      	ldr	r1, [r3, #0]
 8007bfc:	78fb      	ldrb	r3, [r7, #3]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	4302      	orrs	r2, r0
 8007c04:	3340      	adds	r3, #64	; 0x40
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	440b      	add	r3, r1
 8007c0a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	460b      	mov	r3, r1
 8007c24:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	887a      	ldrh	r2, [r7, #2]
 8007c2c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e267      	b.n	8008136 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d075      	beq.n	8007d5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c72:	4b88      	ldr	r3, [pc, #544]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f003 030c 	and.w	r3, r3, #12
 8007c7a:	2b04      	cmp	r3, #4
 8007c7c:	d00c      	beq.n	8007c98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c7e:	4b85      	ldr	r3, [pc, #532]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c86:	2b08      	cmp	r3, #8
 8007c88:	d112      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c8a:	4b82      	ldr	r3, [pc, #520]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c96:	d10b      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c98:	4b7e      	ldr	r3, [pc, #504]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d05b      	beq.n	8007d5c <HAL_RCC_OscConfig+0x108>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d157      	bne.n	8007d5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e242      	b.n	8008136 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cb8:	d106      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x74>
 8007cba:	4b76      	ldr	r3, [pc, #472]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a75      	ldr	r2, [pc, #468]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	e01d      	b.n	8007d04 <HAL_RCC_OscConfig+0xb0>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007cd0:	d10c      	bne.n	8007cec <HAL_RCC_OscConfig+0x98>
 8007cd2:	4b70      	ldr	r3, [pc, #448]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a6f      	ldr	r2, [pc, #444]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	4b6d      	ldr	r3, [pc, #436]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a6c      	ldr	r2, [pc, #432]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ce8:	6013      	str	r3, [r2, #0]
 8007cea:	e00b      	b.n	8007d04 <HAL_RCC_OscConfig+0xb0>
 8007cec:	4b69      	ldr	r3, [pc, #420]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a68      	ldr	r2, [pc, #416]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cf6:	6013      	str	r3, [r2, #0]
 8007cf8:	4b66      	ldr	r3, [pc, #408]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a65      	ldr	r2, [pc, #404]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d013      	beq.n	8007d34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d0c:	f7fd fa86 	bl	800521c <HAL_GetTick>
 8007d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d12:	e008      	b.n	8007d26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d14:	f7fd fa82 	bl	800521c <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	2b64      	cmp	r3, #100	; 0x64
 8007d20:	d901      	bls.n	8007d26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e207      	b.n	8008136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d26:	4b5b      	ldr	r3, [pc, #364]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d0f0      	beq.n	8007d14 <HAL_RCC_OscConfig+0xc0>
 8007d32:	e014      	b.n	8007d5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d34:	f7fd fa72 	bl	800521c <HAL_GetTick>
 8007d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d3a:	e008      	b.n	8007d4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d3c:	f7fd fa6e 	bl	800521c <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	2b64      	cmp	r3, #100	; 0x64
 8007d48:	d901      	bls.n	8007d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e1f3      	b.n	8008136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d4e:	4b51      	ldr	r3, [pc, #324]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1f0      	bne.n	8007d3c <HAL_RCC_OscConfig+0xe8>
 8007d5a:	e000      	b.n	8007d5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d063      	beq.n	8007e32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d6a:	4b4a      	ldr	r3, [pc, #296]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f003 030c 	and.w	r3, r3, #12
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00b      	beq.n	8007d8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d76:	4b47      	ldr	r3, [pc, #284]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d7e:	2b08      	cmp	r3, #8
 8007d80:	d11c      	bne.n	8007dbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d82:	4b44      	ldr	r3, [pc, #272]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d116      	bne.n	8007dbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d8e:	4b41      	ldr	r3, [pc, #260]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d005      	beq.n	8007da6 <HAL_RCC_OscConfig+0x152>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d001      	beq.n	8007da6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e1c7      	b.n	8008136 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007da6:	4b3b      	ldr	r3, [pc, #236]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	4937      	ldr	r1, [pc, #220]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dba:	e03a      	b.n	8007e32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d020      	beq.n	8007e06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007dc4:	4b34      	ldr	r3, [pc, #208]	; (8007e98 <HAL_RCC_OscConfig+0x244>)
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dca:	f7fd fa27 	bl	800521c <HAL_GetTick>
 8007dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dd0:	e008      	b.n	8007de4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dd2:	f7fd fa23 	bl	800521c <HAL_GetTick>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d901      	bls.n	8007de4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e1a8      	b.n	8008136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007de4:	4b2b      	ldr	r3, [pc, #172]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d0f0      	beq.n	8007dd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007df0:	4b28      	ldr	r3, [pc, #160]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	00db      	lsls	r3, r3, #3
 8007dfe:	4925      	ldr	r1, [pc, #148]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007e00:	4313      	orrs	r3, r2
 8007e02:	600b      	str	r3, [r1, #0]
 8007e04:	e015      	b.n	8007e32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e06:	4b24      	ldr	r3, [pc, #144]	; (8007e98 <HAL_RCC_OscConfig+0x244>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e0c:	f7fd fa06 	bl	800521c <HAL_GetTick>
 8007e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e12:	e008      	b.n	8007e26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e14:	f7fd fa02 	bl	800521c <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d901      	bls.n	8007e26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e187      	b.n	8008136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e26:	4b1b      	ldr	r3, [pc, #108]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0302 	and.w	r3, r3, #2
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1f0      	bne.n	8007e14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0308 	and.w	r3, r3, #8
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d036      	beq.n	8007eac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d016      	beq.n	8007e74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e46:	4b15      	ldr	r3, [pc, #84]	; (8007e9c <HAL_RCC_OscConfig+0x248>)
 8007e48:	2201      	movs	r2, #1
 8007e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e4c:	f7fd f9e6 	bl	800521c <HAL_GetTick>
 8007e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e52:	e008      	b.n	8007e66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e54:	f7fd f9e2 	bl	800521c <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d901      	bls.n	8007e66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e167      	b.n	8008136 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e66:	4b0b      	ldr	r3, [pc, #44]	; (8007e94 <HAL_RCC_OscConfig+0x240>)
 8007e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0f0      	beq.n	8007e54 <HAL_RCC_OscConfig+0x200>
 8007e72:	e01b      	b.n	8007eac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e74:	4b09      	ldr	r3, [pc, #36]	; (8007e9c <HAL_RCC_OscConfig+0x248>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e7a:	f7fd f9cf 	bl	800521c <HAL_GetTick>
 8007e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e80:	e00e      	b.n	8007ea0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e82:	f7fd f9cb 	bl	800521c <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d907      	bls.n	8007ea0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e150      	b.n	8008136 <HAL_RCC_OscConfig+0x4e2>
 8007e94:	40023800 	.word	0x40023800
 8007e98:	42470000 	.word	0x42470000
 8007e9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ea0:	4b88      	ldr	r3, [pc, #544]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ea4:	f003 0302 	and.w	r3, r3, #2
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1ea      	bne.n	8007e82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 0304 	and.w	r3, r3, #4
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 8097 	beq.w	8007fe8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ebe:	4b81      	ldr	r3, [pc, #516]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10f      	bne.n	8007eea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60bb      	str	r3, [r7, #8]
 8007ece:	4b7d      	ldr	r3, [pc, #500]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed2:	4a7c      	ldr	r2, [pc, #496]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8007eda:	4b7a      	ldr	r3, [pc, #488]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ee2:	60bb      	str	r3, [r7, #8]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eea:	4b77      	ldr	r3, [pc, #476]	; (80080c8 <HAL_RCC_OscConfig+0x474>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d118      	bne.n	8007f28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ef6:	4b74      	ldr	r3, [pc, #464]	; (80080c8 <HAL_RCC_OscConfig+0x474>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a73      	ldr	r2, [pc, #460]	; (80080c8 <HAL_RCC_OscConfig+0x474>)
 8007efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f02:	f7fd f98b 	bl	800521c <HAL_GetTick>
 8007f06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f08:	e008      	b.n	8007f1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f0a:	f7fd f987 	bl	800521c <HAL_GetTick>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d901      	bls.n	8007f1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e10c      	b.n	8008136 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f1c:	4b6a      	ldr	r3, [pc, #424]	; (80080c8 <HAL_RCC_OscConfig+0x474>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d0f0      	beq.n	8007f0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d106      	bne.n	8007f3e <HAL_RCC_OscConfig+0x2ea>
 8007f30:	4b64      	ldr	r3, [pc, #400]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f34:	4a63      	ldr	r2, [pc, #396]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007f36:	f043 0301 	orr.w	r3, r3, #1
 8007f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f3c:	e01c      	b.n	8007f78 <HAL_RCC_OscConfig+0x324>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	2b05      	cmp	r3, #5
 8007f44:	d10c      	bne.n	8007f60 <HAL_RCC_OscConfig+0x30c>
 8007f46:	4b5f      	ldr	r3, [pc, #380]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4a:	4a5e      	ldr	r2, [pc, #376]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007f4c:	f043 0304 	orr.w	r3, r3, #4
 8007f50:	6713      	str	r3, [r2, #112]	; 0x70
 8007f52:	4b5c      	ldr	r3, [pc, #368]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f56:	4a5b      	ldr	r2, [pc, #364]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007f58:	f043 0301 	orr.w	r3, r3, #1
 8007f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8007f5e:	e00b      	b.n	8007f78 <HAL_RCC_OscConfig+0x324>
 8007f60:	4b58      	ldr	r3, [pc, #352]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f64:	4a57      	ldr	r2, [pc, #348]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007f66:	f023 0301 	bic.w	r3, r3, #1
 8007f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f6c:	4b55      	ldr	r3, [pc, #340]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f70:	4a54      	ldr	r2, [pc, #336]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007f72:	f023 0304 	bic.w	r3, r3, #4
 8007f76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d015      	beq.n	8007fac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f80:	f7fd f94c 	bl	800521c <HAL_GetTick>
 8007f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f86:	e00a      	b.n	8007f9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f88:	f7fd f948 	bl	800521c <HAL_GetTick>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d901      	bls.n	8007f9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e0cb      	b.n	8008136 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f9e:	4b49      	ldr	r3, [pc, #292]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa2:	f003 0302 	and.w	r3, r3, #2
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0ee      	beq.n	8007f88 <HAL_RCC_OscConfig+0x334>
 8007faa:	e014      	b.n	8007fd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fac:	f7fd f936 	bl	800521c <HAL_GetTick>
 8007fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fb2:	e00a      	b.n	8007fca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fb4:	f7fd f932 	bl	800521c <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d901      	bls.n	8007fca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e0b5      	b.n	8008136 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fca:	4b3e      	ldr	r3, [pc, #248]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fce:	f003 0302 	and.w	r3, r3, #2
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1ee      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007fd6:	7dfb      	ldrb	r3, [r7, #23]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d105      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fdc:	4b39      	ldr	r3, [pc, #228]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe0:	4a38      	ldr	r2, [pc, #224]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fe6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 80a1 	beq.w	8008134 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ff2:	4b34      	ldr	r3, [pc, #208]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f003 030c 	and.w	r3, r3, #12
 8007ffa:	2b08      	cmp	r3, #8
 8007ffc:	d05c      	beq.n	80080b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	2b02      	cmp	r3, #2
 8008004:	d141      	bne.n	800808a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008006:	4b31      	ldr	r3, [pc, #196]	; (80080cc <HAL_RCC_OscConfig+0x478>)
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800800c:	f7fd f906 	bl	800521c <HAL_GetTick>
 8008010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008012:	e008      	b.n	8008026 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008014:	f7fd f902 	bl	800521c <HAL_GetTick>
 8008018:	4602      	mov	r2, r0
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	2b02      	cmp	r3, #2
 8008020:	d901      	bls.n	8008026 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e087      	b.n	8008136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008026:	4b27      	ldr	r3, [pc, #156]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1f0      	bne.n	8008014 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	69da      	ldr	r2, [r3, #28]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	431a      	orrs	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008040:	019b      	lsls	r3, r3, #6
 8008042:	431a      	orrs	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008048:	085b      	lsrs	r3, r3, #1
 800804a:	3b01      	subs	r3, #1
 800804c:	041b      	lsls	r3, r3, #16
 800804e:	431a      	orrs	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008054:	061b      	lsls	r3, r3, #24
 8008056:	491b      	ldr	r1, [pc, #108]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 8008058:	4313      	orrs	r3, r2
 800805a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800805c:	4b1b      	ldr	r3, [pc, #108]	; (80080cc <HAL_RCC_OscConfig+0x478>)
 800805e:	2201      	movs	r2, #1
 8008060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008062:	f7fd f8db 	bl	800521c <HAL_GetTick>
 8008066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008068:	e008      	b.n	800807c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800806a:	f7fd f8d7 	bl	800521c <HAL_GetTick>
 800806e:	4602      	mov	r2, r0
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	2b02      	cmp	r3, #2
 8008076:	d901      	bls.n	800807c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e05c      	b.n	8008136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800807c:	4b11      	ldr	r3, [pc, #68]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d0f0      	beq.n	800806a <HAL_RCC_OscConfig+0x416>
 8008088:	e054      	b.n	8008134 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800808a:	4b10      	ldr	r3, [pc, #64]	; (80080cc <HAL_RCC_OscConfig+0x478>)
 800808c:	2200      	movs	r2, #0
 800808e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008090:	f7fd f8c4 	bl	800521c <HAL_GetTick>
 8008094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008096:	e008      	b.n	80080aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008098:	f7fd f8c0 	bl	800521c <HAL_GetTick>
 800809c:	4602      	mov	r2, r0
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d901      	bls.n	80080aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e045      	b.n	8008136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080aa:	4b06      	ldr	r3, [pc, #24]	; (80080c4 <HAL_RCC_OscConfig+0x470>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1f0      	bne.n	8008098 <HAL_RCC_OscConfig+0x444>
 80080b6:	e03d      	b.n	8008134 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d107      	bne.n	80080d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e038      	b.n	8008136 <HAL_RCC_OscConfig+0x4e2>
 80080c4:	40023800 	.word	0x40023800
 80080c8:	40007000 	.word	0x40007000
 80080cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80080d0:	4b1b      	ldr	r3, [pc, #108]	; (8008140 <HAL_RCC_OscConfig+0x4ec>)
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d028      	beq.n	8008130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d121      	bne.n	8008130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d11a      	bne.n	8008130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008100:	4013      	ands	r3, r2
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008106:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008108:	4293      	cmp	r3, r2
 800810a:	d111      	bne.n	8008130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008116:	085b      	lsrs	r3, r3, #1
 8008118:	3b01      	subs	r3, #1
 800811a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800811c:	429a      	cmp	r2, r3
 800811e:	d107      	bne.n	8008130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800812c:	429a      	cmp	r2, r3
 800812e:	d001      	beq.n	8008134 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e000      	b.n	8008136 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	40023800 	.word	0x40023800

08008144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e0cc      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008158:	4b68      	ldr	r3, [pc, #416]	; (80082fc <HAL_RCC_ClockConfig+0x1b8>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0307 	and.w	r3, r3, #7
 8008160:	683a      	ldr	r2, [r7, #0]
 8008162:	429a      	cmp	r2, r3
 8008164:	d90c      	bls.n	8008180 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008166:	4b65      	ldr	r3, [pc, #404]	; (80082fc <HAL_RCC_ClockConfig+0x1b8>)
 8008168:	683a      	ldr	r2, [r7, #0]
 800816a:	b2d2      	uxtb	r2, r2
 800816c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800816e:	4b63      	ldr	r3, [pc, #396]	; (80082fc <HAL_RCC_ClockConfig+0x1b8>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0307 	and.w	r3, r3, #7
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	429a      	cmp	r2, r3
 800817a:	d001      	beq.n	8008180 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e0b8      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d020      	beq.n	80081ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0304 	and.w	r3, r3, #4
 8008194:	2b00      	cmp	r3, #0
 8008196:	d005      	beq.n	80081a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008198:	4b59      	ldr	r3, [pc, #356]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	4a58      	ldr	r2, [pc, #352]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 800819e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80081a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0308 	and.w	r3, r3, #8
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d005      	beq.n	80081bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081b0:	4b53      	ldr	r3, [pc, #332]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	4a52      	ldr	r2, [pc, #328]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 80081b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80081ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081bc:	4b50      	ldr	r3, [pc, #320]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	494d      	ldr	r1, [pc, #308]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d044      	beq.n	8008264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d107      	bne.n	80081f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081e2:	4b47      	ldr	r3, [pc, #284]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d119      	bne.n	8008222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e07f      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d003      	beq.n	8008202 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d107      	bne.n	8008212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008202:	4b3f      	ldr	r3, [pc, #252]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d109      	bne.n	8008222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e06f      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008212:	4b3b      	ldr	r3, [pc, #236]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0302 	and.w	r3, r3, #2
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e067      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008222:	4b37      	ldr	r3, [pc, #220]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f023 0203 	bic.w	r2, r3, #3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	4934      	ldr	r1, [pc, #208]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 8008230:	4313      	orrs	r3, r2
 8008232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008234:	f7fc fff2 	bl	800521c <HAL_GetTick>
 8008238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800823a:	e00a      	b.n	8008252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800823c:	f7fc ffee 	bl	800521c <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	f241 3288 	movw	r2, #5000	; 0x1388
 800824a:	4293      	cmp	r3, r2
 800824c:	d901      	bls.n	8008252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e04f      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008252:	4b2b      	ldr	r3, [pc, #172]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f003 020c 	and.w	r2, r3, #12
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	429a      	cmp	r2, r3
 8008262:	d1eb      	bne.n	800823c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008264:	4b25      	ldr	r3, [pc, #148]	; (80082fc <HAL_RCC_ClockConfig+0x1b8>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0307 	and.w	r3, r3, #7
 800826c:	683a      	ldr	r2, [r7, #0]
 800826e:	429a      	cmp	r2, r3
 8008270:	d20c      	bcs.n	800828c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008272:	4b22      	ldr	r3, [pc, #136]	; (80082fc <HAL_RCC_ClockConfig+0x1b8>)
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	b2d2      	uxtb	r2, r2
 8008278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800827a:	4b20      	ldr	r3, [pc, #128]	; (80082fc <HAL_RCC_ClockConfig+0x1b8>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0307 	and.w	r3, r3, #7
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	429a      	cmp	r2, r3
 8008286:	d001      	beq.n	800828c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e032      	b.n	80082f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0304 	and.w	r3, r3, #4
 8008294:	2b00      	cmp	r3, #0
 8008296:	d008      	beq.n	80082aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008298:	4b19      	ldr	r3, [pc, #100]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	4916      	ldr	r1, [pc, #88]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 0308 	and.w	r3, r3, #8
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d009      	beq.n	80082ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80082b6:	4b12      	ldr	r3, [pc, #72]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	00db      	lsls	r3, r3, #3
 80082c4:	490e      	ldr	r1, [pc, #56]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80082ca:	f000 f821 	bl	8008310 <HAL_RCC_GetSysClockFreq>
 80082ce:	4602      	mov	r2, r0
 80082d0:	4b0b      	ldr	r3, [pc, #44]	; (8008300 <HAL_RCC_ClockConfig+0x1bc>)
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	091b      	lsrs	r3, r3, #4
 80082d6:	f003 030f 	and.w	r3, r3, #15
 80082da:	490a      	ldr	r1, [pc, #40]	; (8008304 <HAL_RCC_ClockConfig+0x1c0>)
 80082dc:	5ccb      	ldrb	r3, [r1, r3]
 80082de:	fa22 f303 	lsr.w	r3, r2, r3
 80082e2:	4a09      	ldr	r2, [pc, #36]	; (8008308 <HAL_RCC_ClockConfig+0x1c4>)
 80082e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80082e6:	4b09      	ldr	r3, [pc, #36]	; (800830c <HAL_RCC_ClockConfig+0x1c8>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fc fda6 	bl	8004e3c <HAL_InitTick>

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	40023c00 	.word	0x40023c00
 8008300:	40023800 	.word	0x40023800
 8008304:	08013a0c 	.word	0x08013a0c
 8008308:	200005c0 	.word	0x200005c0
 800830c:	200005dc 	.word	0x200005dc

08008310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008314:	b094      	sub	sp, #80	; 0x50
 8008316:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008318:	2300      	movs	r3, #0
 800831a:	647b      	str	r3, [r7, #68]	; 0x44
 800831c:	2300      	movs	r3, #0
 800831e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008320:	2300      	movs	r3, #0
 8008322:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008324:	2300      	movs	r3, #0
 8008326:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008328:	4b79      	ldr	r3, [pc, #484]	; (8008510 <HAL_RCC_GetSysClockFreq+0x200>)
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f003 030c 	and.w	r3, r3, #12
 8008330:	2b08      	cmp	r3, #8
 8008332:	d00d      	beq.n	8008350 <HAL_RCC_GetSysClockFreq+0x40>
 8008334:	2b08      	cmp	r3, #8
 8008336:	f200 80e1 	bhi.w	80084fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <HAL_RCC_GetSysClockFreq+0x34>
 800833e:	2b04      	cmp	r3, #4
 8008340:	d003      	beq.n	800834a <HAL_RCC_GetSysClockFreq+0x3a>
 8008342:	e0db      	b.n	80084fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008344:	4b73      	ldr	r3, [pc, #460]	; (8008514 <HAL_RCC_GetSysClockFreq+0x204>)
 8008346:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008348:	e0db      	b.n	8008502 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800834a:	4b72      	ldr	r3, [pc, #456]	; (8008514 <HAL_RCC_GetSysClockFreq+0x204>)
 800834c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800834e:	e0d8      	b.n	8008502 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008350:	4b6f      	ldr	r3, [pc, #444]	; (8008510 <HAL_RCC_GetSysClockFreq+0x200>)
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008358:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800835a:	4b6d      	ldr	r3, [pc, #436]	; (8008510 <HAL_RCC_GetSysClockFreq+0x200>)
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008362:	2b00      	cmp	r3, #0
 8008364:	d063      	beq.n	800842e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008366:	4b6a      	ldr	r3, [pc, #424]	; (8008510 <HAL_RCC_GetSysClockFreq+0x200>)
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	099b      	lsrs	r3, r3, #6
 800836c:	2200      	movs	r2, #0
 800836e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008370:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008378:	633b      	str	r3, [r7, #48]	; 0x30
 800837a:	2300      	movs	r3, #0
 800837c:	637b      	str	r3, [r7, #52]	; 0x34
 800837e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008382:	4622      	mov	r2, r4
 8008384:	462b      	mov	r3, r5
 8008386:	f04f 0000 	mov.w	r0, #0
 800838a:	f04f 0100 	mov.w	r1, #0
 800838e:	0159      	lsls	r1, r3, #5
 8008390:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008394:	0150      	lsls	r0, r2, #5
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	4621      	mov	r1, r4
 800839c:	1a51      	subs	r1, r2, r1
 800839e:	6139      	str	r1, [r7, #16]
 80083a0:	4629      	mov	r1, r5
 80083a2:	eb63 0301 	sbc.w	r3, r3, r1
 80083a6:	617b      	str	r3, [r7, #20]
 80083a8:	f04f 0200 	mov.w	r2, #0
 80083ac:	f04f 0300 	mov.w	r3, #0
 80083b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083b4:	4659      	mov	r1, fp
 80083b6:	018b      	lsls	r3, r1, #6
 80083b8:	4651      	mov	r1, sl
 80083ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80083be:	4651      	mov	r1, sl
 80083c0:	018a      	lsls	r2, r1, #6
 80083c2:	4651      	mov	r1, sl
 80083c4:	ebb2 0801 	subs.w	r8, r2, r1
 80083c8:	4659      	mov	r1, fp
 80083ca:	eb63 0901 	sbc.w	r9, r3, r1
 80083ce:	f04f 0200 	mov.w	r2, #0
 80083d2:	f04f 0300 	mov.w	r3, #0
 80083d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083e2:	4690      	mov	r8, r2
 80083e4:	4699      	mov	r9, r3
 80083e6:	4623      	mov	r3, r4
 80083e8:	eb18 0303 	adds.w	r3, r8, r3
 80083ec:	60bb      	str	r3, [r7, #8]
 80083ee:	462b      	mov	r3, r5
 80083f0:	eb49 0303 	adc.w	r3, r9, r3
 80083f4:	60fb      	str	r3, [r7, #12]
 80083f6:	f04f 0200 	mov.w	r2, #0
 80083fa:	f04f 0300 	mov.w	r3, #0
 80083fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008402:	4629      	mov	r1, r5
 8008404:	028b      	lsls	r3, r1, #10
 8008406:	4621      	mov	r1, r4
 8008408:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800840c:	4621      	mov	r1, r4
 800840e:	028a      	lsls	r2, r1, #10
 8008410:	4610      	mov	r0, r2
 8008412:	4619      	mov	r1, r3
 8008414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008416:	2200      	movs	r2, #0
 8008418:	62bb      	str	r3, [r7, #40]	; 0x28
 800841a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800841c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008420:	f7f8 fa4c 	bl	80008bc <__aeabi_uldivmod>
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	4613      	mov	r3, r2
 800842a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800842c:	e058      	b.n	80084e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800842e:	4b38      	ldr	r3, [pc, #224]	; (8008510 <HAL_RCC_GetSysClockFreq+0x200>)
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	099b      	lsrs	r3, r3, #6
 8008434:	2200      	movs	r2, #0
 8008436:	4618      	mov	r0, r3
 8008438:	4611      	mov	r1, r2
 800843a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800843e:	623b      	str	r3, [r7, #32]
 8008440:	2300      	movs	r3, #0
 8008442:	627b      	str	r3, [r7, #36]	; 0x24
 8008444:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008448:	4642      	mov	r2, r8
 800844a:	464b      	mov	r3, r9
 800844c:	f04f 0000 	mov.w	r0, #0
 8008450:	f04f 0100 	mov.w	r1, #0
 8008454:	0159      	lsls	r1, r3, #5
 8008456:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800845a:	0150      	lsls	r0, r2, #5
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	4641      	mov	r1, r8
 8008462:	ebb2 0a01 	subs.w	sl, r2, r1
 8008466:	4649      	mov	r1, r9
 8008468:	eb63 0b01 	sbc.w	fp, r3, r1
 800846c:	f04f 0200 	mov.w	r2, #0
 8008470:	f04f 0300 	mov.w	r3, #0
 8008474:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008478:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800847c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008480:	ebb2 040a 	subs.w	r4, r2, sl
 8008484:	eb63 050b 	sbc.w	r5, r3, fp
 8008488:	f04f 0200 	mov.w	r2, #0
 800848c:	f04f 0300 	mov.w	r3, #0
 8008490:	00eb      	lsls	r3, r5, #3
 8008492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008496:	00e2      	lsls	r2, r4, #3
 8008498:	4614      	mov	r4, r2
 800849a:	461d      	mov	r5, r3
 800849c:	4643      	mov	r3, r8
 800849e:	18e3      	adds	r3, r4, r3
 80084a0:	603b      	str	r3, [r7, #0]
 80084a2:	464b      	mov	r3, r9
 80084a4:	eb45 0303 	adc.w	r3, r5, r3
 80084a8:	607b      	str	r3, [r7, #4]
 80084aa:	f04f 0200 	mov.w	r2, #0
 80084ae:	f04f 0300 	mov.w	r3, #0
 80084b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80084b6:	4629      	mov	r1, r5
 80084b8:	028b      	lsls	r3, r1, #10
 80084ba:	4621      	mov	r1, r4
 80084bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80084c0:	4621      	mov	r1, r4
 80084c2:	028a      	lsls	r2, r1, #10
 80084c4:	4610      	mov	r0, r2
 80084c6:	4619      	mov	r1, r3
 80084c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ca:	2200      	movs	r2, #0
 80084cc:	61bb      	str	r3, [r7, #24]
 80084ce:	61fa      	str	r2, [r7, #28]
 80084d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084d4:	f7f8 f9f2 	bl	80008bc <__aeabi_uldivmod>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4613      	mov	r3, r2
 80084de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80084e0:	4b0b      	ldr	r3, [pc, #44]	; (8008510 <HAL_RCC_GetSysClockFreq+0x200>)
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	0c1b      	lsrs	r3, r3, #16
 80084e6:	f003 0303 	and.w	r3, r3, #3
 80084ea:	3301      	adds	r3, #1
 80084ec:	005b      	lsls	r3, r3, #1
 80084ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80084f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80084fa:	e002      	b.n	8008502 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80084fc:	4b05      	ldr	r3, [pc, #20]	; (8008514 <HAL_RCC_GetSysClockFreq+0x204>)
 80084fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008504:	4618      	mov	r0, r3
 8008506:	3750      	adds	r7, #80	; 0x50
 8008508:	46bd      	mov	sp, r7
 800850a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800850e:	bf00      	nop
 8008510:	40023800 	.word	0x40023800
 8008514:	00f42400 	.word	0x00f42400

08008518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008518:	b480      	push	{r7}
 800851a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800851c:	4b03      	ldr	r3, [pc, #12]	; (800852c <HAL_RCC_GetHCLKFreq+0x14>)
 800851e:	681b      	ldr	r3, [r3, #0]
}
 8008520:	4618      	mov	r0, r3
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	200005c0 	.word	0x200005c0

08008530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008534:	f7ff fff0 	bl	8008518 <HAL_RCC_GetHCLKFreq>
 8008538:	4602      	mov	r2, r0
 800853a:	4b05      	ldr	r3, [pc, #20]	; (8008550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	0a9b      	lsrs	r3, r3, #10
 8008540:	f003 0307 	and.w	r3, r3, #7
 8008544:	4903      	ldr	r1, [pc, #12]	; (8008554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008546:	5ccb      	ldrb	r3, [r1, r3]
 8008548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800854c:	4618      	mov	r0, r3
 800854e:	bd80      	pop	{r7, pc}
 8008550:	40023800 	.word	0x40023800
 8008554:	08013a1c 	.word	0x08013a1c

08008558 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	220f      	movs	r2, #15
 8008566:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008568:	4b12      	ldr	r3, [pc, #72]	; (80085b4 <HAL_RCC_GetClockConfig+0x5c>)
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f003 0203 	and.w	r2, r3, #3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008574:	4b0f      	ldr	r3, [pc, #60]	; (80085b4 <HAL_RCC_GetClockConfig+0x5c>)
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008580:	4b0c      	ldr	r3, [pc, #48]	; (80085b4 <HAL_RCC_GetClockConfig+0x5c>)
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800858c:	4b09      	ldr	r3, [pc, #36]	; (80085b4 <HAL_RCC_GetClockConfig+0x5c>)
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	08db      	lsrs	r3, r3, #3
 8008592:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800859a:	4b07      	ldr	r3, [pc, #28]	; (80085b8 <HAL_RCC_GetClockConfig+0x60>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0207 	and.w	r2, r3, #7
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	601a      	str	r2, [r3, #0]
}
 80085a6:	bf00      	nop
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	40023800 	.word	0x40023800
 80085b8:	40023c00 	.word	0x40023c00

080085bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d101      	bne.n	80085ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e07b      	b.n	80086c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d108      	bne.n	80085e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085de:	d009      	beq.n	80085f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	61da      	str	r2, [r3, #28]
 80085e6:	e005      	b.n	80085f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b00      	cmp	r3, #0
 8008604:	d106      	bne.n	8008614 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7fc fb28 	bl	8004c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2202      	movs	r2, #2
 8008618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800862a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800863c:	431a      	orrs	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008646:	431a      	orrs	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	f003 0302 	and.w	r3, r3, #2
 8008650:	431a      	orrs	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	431a      	orrs	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008664:	431a      	orrs	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800866e:	431a      	orrs	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a1b      	ldr	r3, [r3, #32]
 8008674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008678:	ea42 0103 	orr.w	r1, r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008680:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	430a      	orrs	r2, r1
 800868a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	0c1b      	lsrs	r3, r3, #16
 8008692:	f003 0104 	and.w	r1, r3, #4
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869a:	f003 0210 	and.w	r2, r3, #16
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	430a      	orrs	r2, r1
 80086a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	69da      	ldr	r2, [r3, #28]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b088      	sub	sp, #32
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	60f8      	str	r0, [r7, #12]
 80086d6:	60b9      	str	r1, [r7, #8]
 80086d8:	603b      	str	r3, [r7, #0]
 80086da:	4613      	mov	r3, r2
 80086dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d101      	bne.n	80086f0 <HAL_SPI_Transmit+0x22>
 80086ec:	2302      	movs	r3, #2
 80086ee:	e126      	b.n	800893e <HAL_SPI_Transmit+0x270>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086f8:	f7fc fd90 	bl	800521c <HAL_GetTick>
 80086fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80086fe:	88fb      	ldrh	r3, [r7, #6]
 8008700:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b01      	cmp	r3, #1
 800870c:	d002      	beq.n	8008714 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800870e:	2302      	movs	r3, #2
 8008710:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008712:	e10b      	b.n	800892c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d002      	beq.n	8008720 <HAL_SPI_Transmit+0x52>
 800871a:	88fb      	ldrh	r3, [r7, #6]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d102      	bne.n	8008726 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008724:	e102      	b.n	800892c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2203      	movs	r2, #3
 800872a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	88fa      	ldrh	r2, [r7, #6]
 800873e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	88fa      	ldrh	r2, [r7, #6]
 8008744:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800876c:	d10f      	bne.n	800878e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800877c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800878c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008798:	2b40      	cmp	r3, #64	; 0x40
 800879a:	d007      	beq.n	80087ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087b4:	d14b      	bne.n	800884e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <HAL_SPI_Transmit+0xf6>
 80087be:	8afb      	ldrh	r3, [r7, #22]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d13e      	bne.n	8008842 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c8:	881a      	ldrh	r2, [r3, #0]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d4:	1c9a      	adds	r2, r3, #2
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087de:	b29b      	uxth	r3, r3
 80087e0:	3b01      	subs	r3, #1
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80087e8:	e02b      	b.n	8008842 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d112      	bne.n	800881e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fc:	881a      	ldrh	r2, [r3, #0]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008808:	1c9a      	adds	r2, r3, #2
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008812:	b29b      	uxth	r3, r3
 8008814:	3b01      	subs	r3, #1
 8008816:	b29a      	uxth	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	86da      	strh	r2, [r3, #54]	; 0x36
 800881c:	e011      	b.n	8008842 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800881e:	f7fc fcfd 	bl	800521c <HAL_GetTick>
 8008822:	4602      	mov	r2, r0
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	429a      	cmp	r2, r3
 800882c:	d803      	bhi.n	8008836 <HAL_SPI_Transmit+0x168>
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008834:	d102      	bne.n	800883c <HAL_SPI_Transmit+0x16e>
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d102      	bne.n	8008842 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008840:	e074      	b.n	800892c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008846:	b29b      	uxth	r3, r3
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1ce      	bne.n	80087ea <HAL_SPI_Transmit+0x11c>
 800884c:	e04c      	b.n	80088e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d002      	beq.n	800885c <HAL_SPI_Transmit+0x18e>
 8008856:	8afb      	ldrh	r3, [r7, #22]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d140      	bne.n	80088de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	330c      	adds	r3, #12
 8008866:	7812      	ldrb	r2, [r2, #0]
 8008868:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886e:	1c5a      	adds	r2, r3, #1
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008878:	b29b      	uxth	r3, r3
 800887a:	3b01      	subs	r3, #1
 800887c:	b29a      	uxth	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008882:	e02c      	b.n	80088de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f003 0302 	and.w	r3, r3, #2
 800888e:	2b02      	cmp	r3, #2
 8008890:	d113      	bne.n	80088ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	330c      	adds	r3, #12
 800889c:	7812      	ldrb	r2, [r2, #0]
 800889e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a4:	1c5a      	adds	r2, r3, #1
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	3b01      	subs	r3, #1
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80088b8:	e011      	b.n	80088de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088ba:	f7fc fcaf 	bl	800521c <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	683a      	ldr	r2, [r7, #0]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d803      	bhi.n	80088d2 <HAL_SPI_Transmit+0x204>
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d0:	d102      	bne.n	80088d8 <HAL_SPI_Transmit+0x20a>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d102      	bne.n	80088de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80088dc:	e026      	b.n	800892c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1cd      	bne.n	8008884 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088e8:	69ba      	ldr	r2, [r7, #24]
 80088ea:	6839      	ldr	r1, [r7, #0]
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f000 fa55 	bl	8008d9c <SPI_EndRxTxTransaction>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2220      	movs	r2, #32
 80088fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10a      	bne.n	800891c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008906:	2300      	movs	r3, #0
 8008908:	613b      	str	r3, [r7, #16]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	613b      	str	r3, [r7, #16]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	613b      	str	r3, [r7, #16]
 800891a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008920:	2b00      	cmp	r3, #0
 8008922:	d002      	beq.n	800892a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	77fb      	strb	r3, [r7, #31]
 8008928:	e000      	b.n	800892c <HAL_SPI_Transmit+0x25e>
  }

error:
 800892a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800893c:	7ffb      	ldrb	r3, [r7, #31]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3720      	adds	r7, #32
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b08c      	sub	sp, #48	; 0x30
 800894a:	af00      	add	r7, sp, #0
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	60b9      	str	r1, [r7, #8]
 8008950:	607a      	str	r2, [r7, #4]
 8008952:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008954:	2301      	movs	r3, #1
 8008956:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008964:	2b01      	cmp	r3, #1
 8008966:	d101      	bne.n	800896c <HAL_SPI_TransmitReceive+0x26>
 8008968:	2302      	movs	r3, #2
 800896a:	e18a      	b.n	8008c82 <HAL_SPI_TransmitReceive+0x33c>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008974:	f7fc fc52 	bl	800521c <HAL_GetTick>
 8008978:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800898a:	887b      	ldrh	r3, [r7, #2]
 800898c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800898e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008992:	2b01      	cmp	r3, #1
 8008994:	d00f      	beq.n	80089b6 <HAL_SPI_TransmitReceive+0x70>
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800899c:	d107      	bne.n	80089ae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d103      	bne.n	80089ae <HAL_SPI_TransmitReceive+0x68>
 80089a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089aa:	2b04      	cmp	r3, #4
 80089ac:	d003      	beq.n	80089b6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80089ae:	2302      	movs	r3, #2
 80089b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80089b4:	e15b      	b.n	8008c6e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d005      	beq.n	80089c8 <HAL_SPI_TransmitReceive+0x82>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d002      	beq.n	80089c8 <HAL_SPI_TransmitReceive+0x82>
 80089c2:	887b      	ldrh	r3, [r7, #2]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d103      	bne.n	80089d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80089ce:	e14e      	b.n	8008c6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b04      	cmp	r3, #4
 80089da:	d003      	beq.n	80089e4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2205      	movs	r2, #5
 80089e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	887a      	ldrh	r2, [r7, #2]
 80089f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	887a      	ldrh	r2, [r7, #2]
 80089fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	887a      	ldrh	r2, [r7, #2]
 8008a06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	887a      	ldrh	r2, [r7, #2]
 8008a0c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a24:	2b40      	cmp	r3, #64	; 0x40
 8008a26:	d007      	beq.n	8008a38 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a40:	d178      	bne.n	8008b34 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <HAL_SPI_TransmitReceive+0x10a>
 8008a4a:	8b7b      	ldrh	r3, [r7, #26]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d166      	bne.n	8008b1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a54:	881a      	ldrh	r2, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a60:	1c9a      	adds	r2, r3, #2
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a74:	e053      	b.n	8008b1e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f003 0302 	and.w	r3, r3, #2
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d11b      	bne.n	8008abc <HAL_SPI_TransmitReceive+0x176>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d016      	beq.n	8008abc <HAL_SPI_TransmitReceive+0x176>
 8008a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d113      	bne.n	8008abc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a98:	881a      	ldrh	r2, [r3, #0]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa4:	1c9a      	adds	r2, r3, #2
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f003 0301 	and.w	r3, r3, #1
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d119      	bne.n	8008afe <HAL_SPI_TransmitReceive+0x1b8>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d014      	beq.n	8008afe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68da      	ldr	r2, [r3, #12]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ade:	b292      	uxth	r2, r2
 8008ae0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae6:	1c9a      	adds	r2, r3, #2
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	3b01      	subs	r3, #1
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008afa:	2301      	movs	r3, #1
 8008afc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008afe:	f7fc fb8d 	bl	800521c <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d807      	bhi.n	8008b1e <HAL_SPI_TransmitReceive+0x1d8>
 8008b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b14:	d003      	beq.n	8008b1e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008b1c:	e0a7      	b.n	8008c6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1a6      	bne.n	8008a76 <HAL_SPI_TransmitReceive+0x130>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1a1      	bne.n	8008a76 <HAL_SPI_TransmitReceive+0x130>
 8008b32:	e07c      	b.n	8008c2e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d002      	beq.n	8008b42 <HAL_SPI_TransmitReceive+0x1fc>
 8008b3c:	8b7b      	ldrh	r3, [r7, #26]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d16b      	bne.n	8008c1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	330c      	adds	r3, #12
 8008b4c:	7812      	ldrb	r2, [r2, #0]
 8008b4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b54:	1c5a      	adds	r2, r3, #1
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	3b01      	subs	r3, #1
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b68:	e057      	b.n	8008c1a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f003 0302 	and.w	r3, r3, #2
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d11c      	bne.n	8008bb2 <HAL_SPI_TransmitReceive+0x26c>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d017      	beq.n	8008bb2 <HAL_SPI_TransmitReceive+0x26c>
 8008b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d114      	bne.n	8008bb2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	330c      	adds	r3, #12
 8008b92:	7812      	ldrb	r2, [r2, #0]
 8008b94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9a:	1c5a      	adds	r2, r3, #1
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d119      	bne.n	8008bf4 <HAL_SPI_TransmitReceive+0x2ae>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d014      	beq.n	8008bf4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68da      	ldr	r2, [r3, #12]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd4:	b2d2      	uxtb	r2, r2
 8008bd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bdc:	1c5a      	adds	r2, r3, #1
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	3b01      	subs	r3, #1
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008bf4:	f7fc fb12 	bl	800521c <HAL_GetTick>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d803      	bhi.n	8008c0c <HAL_SPI_TransmitReceive+0x2c6>
 8008c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c0a:	d102      	bne.n	8008c12 <HAL_SPI_TransmitReceive+0x2cc>
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d103      	bne.n	8008c1a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008c18:	e029      	b.n	8008c6e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1a2      	bne.n	8008b6a <HAL_SPI_TransmitReceive+0x224>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d19d      	bne.n	8008b6a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f000 f8b2 	bl	8008d9c <SPI_EndRxTxTransaction>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d006      	beq.n	8008c4c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2220      	movs	r2, #32
 8008c48:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008c4a:	e010      	b.n	8008c6e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d10b      	bne.n	8008c6c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c54:	2300      	movs	r3, #0
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	617b      	str	r3, [r7, #20]
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	e000      	b.n	8008c6e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008c6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008c7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3730      	adds	r7, #48	; 0x30
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
	...

08008c8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b088      	sub	sp, #32
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	603b      	str	r3, [r7, #0]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008c9c:	f7fc fabe 	bl	800521c <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	1a9b      	subs	r3, r3, r2
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	4413      	add	r3, r2
 8008caa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008cac:	f7fc fab6 	bl	800521c <HAL_GetTick>
 8008cb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008cb2:	4b39      	ldr	r3, [pc, #228]	; (8008d98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	015b      	lsls	r3, r3, #5
 8008cb8:	0d1b      	lsrs	r3, r3, #20
 8008cba:	69fa      	ldr	r2, [r7, #28]
 8008cbc:	fb02 f303 	mul.w	r3, r2, r3
 8008cc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008cc2:	e054      	b.n	8008d6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cca:	d050      	beq.n	8008d6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ccc:	f7fc faa6 	bl	800521c <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	69fa      	ldr	r2, [r7, #28]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d902      	bls.n	8008ce2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d13d      	bne.n	8008d5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	685a      	ldr	r2, [r3, #4]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008cf0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cfa:	d111      	bne.n	8008d20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d04:	d004      	beq.n	8008d10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d0e:	d107      	bne.n	8008d20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d28:	d10f      	bne.n	8008d4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d38:	601a      	str	r2, [r3, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e017      	b.n	8008d8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008d64:	2300      	movs	r3, #0
 8008d66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	689a      	ldr	r2, [r3, #8]
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	4013      	ands	r3, r2
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	bf0c      	ite	eq
 8008d7e:	2301      	moveq	r3, #1
 8008d80:	2300      	movne	r3, #0
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	461a      	mov	r2, r3
 8008d86:	79fb      	ldrb	r3, [r7, #7]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d19b      	bne.n	8008cc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3720      	adds	r7, #32
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	200005c0 	.word	0x200005c0

08008d9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b088      	sub	sp, #32
 8008da0:	af02      	add	r7, sp, #8
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008da8:	4b1b      	ldr	r3, [pc, #108]	; (8008e18 <SPI_EndRxTxTransaction+0x7c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a1b      	ldr	r2, [pc, #108]	; (8008e1c <SPI_EndRxTxTransaction+0x80>)
 8008dae:	fba2 2303 	umull	r2, r3, r2, r3
 8008db2:	0d5b      	lsrs	r3, r3, #21
 8008db4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008db8:	fb02 f303 	mul.w	r3, r2, r3
 8008dbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dc6:	d112      	bne.n	8008dee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	2180      	movs	r1, #128	; 0x80
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f7ff ff5a 	bl	8008c8c <SPI_WaitFlagStateUntilTimeout>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d016      	beq.n	8008e0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de2:	f043 0220 	orr.w	r2, r3, #32
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e00f      	b.n	8008e0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00a      	beq.n	8008e0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	3b01      	subs	r3, #1
 8008df8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e04:	2b80      	cmp	r3, #128	; 0x80
 8008e06:	d0f2      	beq.n	8008dee <SPI_EndRxTxTransaction+0x52>
 8008e08:	e000      	b.n	8008e0c <SPI_EndRxTxTransaction+0x70>
        break;
 8008e0a:	bf00      	nop
  }

  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3718      	adds	r7, #24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	200005c0 	.word	0x200005c0
 8008e1c:	165e9f81 	.word	0x165e9f81

08008e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e041      	b.n	8008eb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d106      	bne.n	8008e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7fb ff8a 	bl	8004d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	4610      	mov	r0, r2
 8008e60:	f000 fd3a 	bl	80098d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
	...

08008ec0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d001      	beq.n	8008ed8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e03c      	b.n	8008f52 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2202      	movs	r2, #2
 8008edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a1e      	ldr	r2, [pc, #120]	; (8008f60 <HAL_TIM_Base_Start+0xa0>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d018      	beq.n	8008f1c <HAL_TIM_Base_Start+0x5c>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef2:	d013      	beq.n	8008f1c <HAL_TIM_Base_Start+0x5c>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a1a      	ldr	r2, [pc, #104]	; (8008f64 <HAL_TIM_Base_Start+0xa4>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d00e      	beq.n	8008f1c <HAL_TIM_Base_Start+0x5c>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a19      	ldr	r2, [pc, #100]	; (8008f68 <HAL_TIM_Base_Start+0xa8>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d009      	beq.n	8008f1c <HAL_TIM_Base_Start+0x5c>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a17      	ldr	r2, [pc, #92]	; (8008f6c <HAL_TIM_Base_Start+0xac>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d004      	beq.n	8008f1c <HAL_TIM_Base_Start+0x5c>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a16      	ldr	r2, [pc, #88]	; (8008f70 <HAL_TIM_Base_Start+0xb0>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d111      	bne.n	8008f40 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	f003 0307 	and.w	r3, r3, #7
 8008f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2b06      	cmp	r3, #6
 8008f2c:	d010      	beq.n	8008f50 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f042 0201 	orr.w	r2, r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f3e:	e007      	b.n	8008f50 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f042 0201 	orr.w	r2, r2, #1
 8008f4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3714      	adds	r7, #20
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	40010000 	.word	0x40010000
 8008f64:	40000400 	.word	0x40000400
 8008f68:	40000800 	.word	0x40000800
 8008f6c:	40000c00 	.word	0x40000c00
 8008f70:	40014000 	.word	0x40014000

08008f74 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6a1a      	ldr	r2, [r3, #32]
 8008f82:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f86:	4013      	ands	r3, r2
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10f      	bne.n	8008fac <HAL_TIM_Base_Stop+0x38>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6a1a      	ldr	r2, [r3, #32]
 8008f92:	f240 4344 	movw	r3, #1092	; 0x444
 8008f96:	4013      	ands	r3, r2
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d107      	bne.n	8008fac <HAL_TIM_Base_Stop+0x38>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f022 0201 	bic.w	r2, r2, #1
 8008faa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
	...

08008fc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d001      	beq.n	8008fdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e044      	b.n	8009066 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2202      	movs	r2, #2
 8008fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68da      	ldr	r2, [r3, #12]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f042 0201 	orr.w	r2, r2, #1
 8008ff2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a1e      	ldr	r2, [pc, #120]	; (8009074 <HAL_TIM_Base_Start_IT+0xb0>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d018      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x6c>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009006:	d013      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x6c>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a1a      	ldr	r2, [pc, #104]	; (8009078 <HAL_TIM_Base_Start_IT+0xb4>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d00e      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x6c>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a19      	ldr	r2, [pc, #100]	; (800907c <HAL_TIM_Base_Start_IT+0xb8>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d009      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x6c>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a17      	ldr	r2, [pc, #92]	; (8009080 <HAL_TIM_Base_Start_IT+0xbc>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d004      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x6c>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a16      	ldr	r2, [pc, #88]	; (8009084 <HAL_TIM_Base_Start_IT+0xc0>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d111      	bne.n	8009054 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	f003 0307 	and.w	r3, r3, #7
 800903a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2b06      	cmp	r3, #6
 8009040:	d010      	beq.n	8009064 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f042 0201 	orr.w	r2, r2, #1
 8009050:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009052:	e007      	b.n	8009064 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f042 0201 	orr.w	r2, r2, #1
 8009062:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	40010000 	.word	0x40010000
 8009078:	40000400 	.word	0x40000400
 800907c:	40000800 	.word	0x40000800
 8009080:	40000c00 	.word	0x40000c00
 8009084:	40014000 	.word	0x40014000

08009088 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d101      	bne.n	800909a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e041      	b.n	800911e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d106      	bne.n	80090b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f839 	bl	8009126 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2202      	movs	r2, #2
 80090b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3304      	adds	r3, #4
 80090c4:	4619      	mov	r1, r3
 80090c6:	4610      	mov	r0, r2
 80090c8:	f000 fc06 	bl	80098d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009126:	b480      	push	{r7}
 8009128:	b083      	sub	sp, #12
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800912e:	bf00      	nop
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
	...

0800913c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d109      	bne.n	8009160 <HAL_TIM_PWM_Start+0x24>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b01      	cmp	r3, #1
 8009156:	bf14      	ite	ne
 8009158:	2301      	movne	r3, #1
 800915a:	2300      	moveq	r3, #0
 800915c:	b2db      	uxtb	r3, r3
 800915e:	e022      	b.n	80091a6 <HAL_TIM_PWM_Start+0x6a>
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	2b04      	cmp	r3, #4
 8009164:	d109      	bne.n	800917a <HAL_TIM_PWM_Start+0x3e>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b01      	cmp	r3, #1
 8009170:	bf14      	ite	ne
 8009172:	2301      	movne	r3, #1
 8009174:	2300      	moveq	r3, #0
 8009176:	b2db      	uxtb	r3, r3
 8009178:	e015      	b.n	80091a6 <HAL_TIM_PWM_Start+0x6a>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	2b08      	cmp	r3, #8
 800917e:	d109      	bne.n	8009194 <HAL_TIM_PWM_Start+0x58>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009186:	b2db      	uxtb	r3, r3
 8009188:	2b01      	cmp	r3, #1
 800918a:	bf14      	ite	ne
 800918c:	2301      	movne	r3, #1
 800918e:	2300      	moveq	r3, #0
 8009190:	b2db      	uxtb	r3, r3
 8009192:	e008      	b.n	80091a6 <HAL_TIM_PWM_Start+0x6a>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b01      	cmp	r3, #1
 800919e:	bf14      	ite	ne
 80091a0:	2301      	movne	r3, #1
 80091a2:	2300      	moveq	r3, #0
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e068      	b.n	8009280 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d104      	bne.n	80091be <HAL_TIM_PWM_Start+0x82>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2202      	movs	r2, #2
 80091b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091bc:	e013      	b.n	80091e6 <HAL_TIM_PWM_Start+0xaa>
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	2b04      	cmp	r3, #4
 80091c2:	d104      	bne.n	80091ce <HAL_TIM_PWM_Start+0x92>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2202      	movs	r2, #2
 80091c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091cc:	e00b      	b.n	80091e6 <HAL_TIM_PWM_Start+0xaa>
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	2b08      	cmp	r3, #8
 80091d2:	d104      	bne.n	80091de <HAL_TIM_PWM_Start+0xa2>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2202      	movs	r2, #2
 80091d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091dc:	e003      	b.n	80091e6 <HAL_TIM_PWM_Start+0xaa>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2202      	movs	r2, #2
 80091e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2201      	movs	r2, #1
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 fe18 	bl	8009e24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a23      	ldr	r2, [pc, #140]	; (8009288 <HAL_TIM_PWM_Start+0x14c>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d107      	bne.n	800920e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800920c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a1d      	ldr	r2, [pc, #116]	; (8009288 <HAL_TIM_PWM_Start+0x14c>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d018      	beq.n	800924a <HAL_TIM_PWM_Start+0x10e>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009220:	d013      	beq.n	800924a <HAL_TIM_PWM_Start+0x10e>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a19      	ldr	r2, [pc, #100]	; (800928c <HAL_TIM_PWM_Start+0x150>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d00e      	beq.n	800924a <HAL_TIM_PWM_Start+0x10e>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a17      	ldr	r2, [pc, #92]	; (8009290 <HAL_TIM_PWM_Start+0x154>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d009      	beq.n	800924a <HAL_TIM_PWM_Start+0x10e>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a16      	ldr	r2, [pc, #88]	; (8009294 <HAL_TIM_PWM_Start+0x158>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d004      	beq.n	800924a <HAL_TIM_PWM_Start+0x10e>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a14      	ldr	r2, [pc, #80]	; (8009298 <HAL_TIM_PWM_Start+0x15c>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d111      	bne.n	800926e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f003 0307 	and.w	r3, r3, #7
 8009254:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2b06      	cmp	r3, #6
 800925a:	d010      	beq.n	800927e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f042 0201 	orr.w	r2, r2, #1
 800926a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800926c:	e007      	b.n	800927e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f042 0201 	orr.w	r2, r2, #1
 800927c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	40010000 	.word	0x40010000
 800928c:	40000400 	.word	0x40000400
 8009290:	40000800 	.word	0x40000800
 8009294:	40000c00 	.word	0x40000c00
 8009298:	40014000 	.word	0x40014000

0800929c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2200      	movs	r2, #0
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f000 fdb8 	bl	8009e24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a29      	ldr	r2, [pc, #164]	; (8009360 <HAL_TIM_PWM_Stop+0xc4>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d117      	bne.n	80092ee <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	6a1a      	ldr	r2, [r3, #32]
 80092c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80092c8:	4013      	ands	r3, r2
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10f      	bne.n	80092ee <HAL_TIM_PWM_Stop+0x52>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	6a1a      	ldr	r2, [r3, #32]
 80092d4:	f240 4344 	movw	r3, #1092	; 0x444
 80092d8:	4013      	ands	r3, r2
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d107      	bne.n	80092ee <HAL_TIM_PWM_Stop+0x52>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	6a1a      	ldr	r2, [r3, #32]
 80092f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80092f8:	4013      	ands	r3, r2
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d10f      	bne.n	800931e <HAL_TIM_PWM_Stop+0x82>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	6a1a      	ldr	r2, [r3, #32]
 8009304:	f240 4344 	movw	r3, #1092	; 0x444
 8009308:	4013      	ands	r3, r2
 800930a:	2b00      	cmp	r3, #0
 800930c:	d107      	bne.n	800931e <HAL_TIM_PWM_Stop+0x82>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f022 0201 	bic.w	r2, r2, #1
 800931c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d104      	bne.n	800932e <HAL_TIM_PWM_Stop+0x92>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800932c:	e013      	b.n	8009356 <HAL_TIM_PWM_Stop+0xba>
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	2b04      	cmp	r3, #4
 8009332:	d104      	bne.n	800933e <HAL_TIM_PWM_Stop+0xa2>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800933c:	e00b      	b.n	8009356 <HAL_TIM_PWM_Stop+0xba>
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	2b08      	cmp	r3, #8
 8009342:	d104      	bne.n	800934e <HAL_TIM_PWM_Stop+0xb2>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800934c:	e003      	b.n	8009356 <HAL_TIM_PWM_Stop+0xba>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	40010000 	.word	0x40010000

08009364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	f003 0302 	and.w	r3, r3, #2
 8009376:	2b02      	cmp	r3, #2
 8009378:	d122      	bne.n	80093c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	f003 0302 	and.w	r3, r3, #2
 8009384:	2b02      	cmp	r3, #2
 8009386:	d11b      	bne.n	80093c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f06f 0202 	mvn.w	r2, #2
 8009390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	f003 0303 	and.w	r3, r3, #3
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d003      	beq.n	80093ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fa77 	bl	800989a <HAL_TIM_IC_CaptureCallback>
 80093ac:	e005      	b.n	80093ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fa69 	bl	8009886 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fa7a 	bl	80098ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	f003 0304 	and.w	r3, r3, #4
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	d122      	bne.n	8009414 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b04      	cmp	r3, #4
 80093da:	d11b      	bne.n	8009414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f06f 0204 	mvn.w	r2, #4
 80093e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2202      	movs	r2, #2
 80093ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d003      	beq.n	8009402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fa4d 	bl	800989a <HAL_TIM_IC_CaptureCallback>
 8009400:	e005      	b.n	800940e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fa3f 	bl	8009886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fa50 	bl	80098ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	f003 0308 	and.w	r3, r3, #8
 800941e:	2b08      	cmp	r3, #8
 8009420:	d122      	bne.n	8009468 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	f003 0308 	and.w	r3, r3, #8
 800942c:	2b08      	cmp	r3, #8
 800942e:	d11b      	bne.n	8009468 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f06f 0208 	mvn.w	r2, #8
 8009438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2204      	movs	r2, #4
 800943e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	69db      	ldr	r3, [r3, #28]
 8009446:	f003 0303 	and.w	r3, r3, #3
 800944a:	2b00      	cmp	r3, #0
 800944c:	d003      	beq.n	8009456 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fa23 	bl	800989a <HAL_TIM_IC_CaptureCallback>
 8009454:	e005      	b.n	8009462 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fa15 	bl	8009886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fa26 	bl	80098ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	f003 0310 	and.w	r3, r3, #16
 8009472:	2b10      	cmp	r3, #16
 8009474:	d122      	bne.n	80094bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	f003 0310 	and.w	r3, r3, #16
 8009480:	2b10      	cmp	r3, #16
 8009482:	d11b      	bne.n	80094bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f06f 0210 	mvn.w	r2, #16
 800948c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2208      	movs	r2, #8
 8009492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	69db      	ldr	r3, [r3, #28]
 800949a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d003      	beq.n	80094aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f9f9 	bl	800989a <HAL_TIM_IC_CaptureCallback>
 80094a8:	e005      	b.n	80094b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f9eb 	bl	8009886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f9fc 	bl	80098ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d10e      	bne.n	80094e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	f003 0301 	and.w	r3, r3, #1
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d107      	bne.n	80094e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f06f 0201 	mvn.w	r2, #1
 80094e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7fa fe3e 	bl	8004164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094f2:	2b80      	cmp	r3, #128	; 0x80
 80094f4:	d10e      	bne.n	8009514 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009500:	2b80      	cmp	r3, #128	; 0x80
 8009502:	d107      	bne.n	8009514 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800950c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fd26 	bl	8009f60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800951e:	2b40      	cmp	r3, #64	; 0x40
 8009520:	d10e      	bne.n	8009540 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800952c:	2b40      	cmp	r3, #64	; 0x40
 800952e:	d107      	bne.n	8009540 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f9c1 	bl	80098c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	f003 0320 	and.w	r3, r3, #32
 800954a:	2b20      	cmp	r3, #32
 800954c:	d10e      	bne.n	800956c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	f003 0320 	and.w	r3, r3, #32
 8009558:	2b20      	cmp	r3, #32
 800955a:	d107      	bne.n	800956c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f06f 0220 	mvn.w	r2, #32
 8009564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fcf0 	bl	8009f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800956c:	bf00      	nop
 800956e:	3708      	adds	r7, #8
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800958a:	2b01      	cmp	r3, #1
 800958c:	d101      	bne.n	8009592 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800958e:	2302      	movs	r3, #2
 8009590:	e0ae      	b.n	80096f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b0c      	cmp	r3, #12
 800959e:	f200 809f 	bhi.w	80096e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80095a2:	a201      	add	r2, pc, #4	; (adr r2, 80095a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80095a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a8:	080095dd 	.word	0x080095dd
 80095ac:	080096e1 	.word	0x080096e1
 80095b0:	080096e1 	.word	0x080096e1
 80095b4:	080096e1 	.word	0x080096e1
 80095b8:	0800961d 	.word	0x0800961d
 80095bc:	080096e1 	.word	0x080096e1
 80095c0:	080096e1 	.word	0x080096e1
 80095c4:	080096e1 	.word	0x080096e1
 80095c8:	0800965f 	.word	0x0800965f
 80095cc:	080096e1 	.word	0x080096e1
 80095d0:	080096e1 	.word	0x080096e1
 80095d4:	080096e1 	.word	0x080096e1
 80095d8:	0800969f 	.word	0x0800969f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68b9      	ldr	r1, [r7, #8]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 f9f8 	bl	80099d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	699a      	ldr	r2, [r3, #24]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f042 0208 	orr.w	r2, r2, #8
 80095f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	699a      	ldr	r2, [r3, #24]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f022 0204 	bic.w	r2, r2, #4
 8009606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6999      	ldr	r1, [r3, #24]
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	691a      	ldr	r2, [r3, #16]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	430a      	orrs	r2, r1
 8009618:	619a      	str	r2, [r3, #24]
      break;
 800961a:	e064      	b.n	80096e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68b9      	ldr	r1, [r7, #8]
 8009622:	4618      	mov	r0, r3
 8009624:	f000 fa3e 	bl	8009aa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	699a      	ldr	r2, [r3, #24]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	699a      	ldr	r2, [r3, #24]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6999      	ldr	r1, [r3, #24]
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	021a      	lsls	r2, r3, #8
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	430a      	orrs	r2, r1
 800965a:	619a      	str	r2, [r3, #24]
      break;
 800965c:	e043      	b.n	80096e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68b9      	ldr	r1, [r7, #8]
 8009664:	4618      	mov	r0, r3
 8009666:	f000 fa89 	bl	8009b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	69da      	ldr	r2, [r3, #28]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f042 0208 	orr.w	r2, r2, #8
 8009678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	69da      	ldr	r2, [r3, #28]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f022 0204 	bic.w	r2, r2, #4
 8009688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	69d9      	ldr	r1, [r3, #28]
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	691a      	ldr	r2, [r3, #16]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	430a      	orrs	r2, r1
 800969a:	61da      	str	r2, [r3, #28]
      break;
 800969c:	e023      	b.n	80096e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68b9      	ldr	r1, [r7, #8]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f000 fad3 	bl	8009c50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	69da      	ldr	r2, [r3, #28]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	69da      	ldr	r2, [r3, #28]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	69d9      	ldr	r1, [r3, #28]
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	021a      	lsls	r2, r3, #8
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	430a      	orrs	r2, r1
 80096dc:	61da      	str	r2, [r3, #28]
      break;
 80096de:	e002      	b.n	80096e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	75fb      	strb	r3, [r7, #23]
      break;
 80096e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3718      	adds	r7, #24
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800970c:	2b01      	cmp	r3, #1
 800970e:	d101      	bne.n	8009714 <HAL_TIM_ConfigClockSource+0x1c>
 8009710:	2302      	movs	r3, #2
 8009712:	e0b4      	b.n	800987e <HAL_TIM_ConfigClockSource+0x186>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2202      	movs	r2, #2
 8009720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800973a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68ba      	ldr	r2, [r7, #8]
 8009742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800974c:	d03e      	beq.n	80097cc <HAL_TIM_ConfigClockSource+0xd4>
 800974e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009752:	f200 8087 	bhi.w	8009864 <HAL_TIM_ConfigClockSource+0x16c>
 8009756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800975a:	f000 8086 	beq.w	800986a <HAL_TIM_ConfigClockSource+0x172>
 800975e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009762:	d87f      	bhi.n	8009864 <HAL_TIM_ConfigClockSource+0x16c>
 8009764:	2b70      	cmp	r3, #112	; 0x70
 8009766:	d01a      	beq.n	800979e <HAL_TIM_ConfigClockSource+0xa6>
 8009768:	2b70      	cmp	r3, #112	; 0x70
 800976a:	d87b      	bhi.n	8009864 <HAL_TIM_ConfigClockSource+0x16c>
 800976c:	2b60      	cmp	r3, #96	; 0x60
 800976e:	d050      	beq.n	8009812 <HAL_TIM_ConfigClockSource+0x11a>
 8009770:	2b60      	cmp	r3, #96	; 0x60
 8009772:	d877      	bhi.n	8009864 <HAL_TIM_ConfigClockSource+0x16c>
 8009774:	2b50      	cmp	r3, #80	; 0x50
 8009776:	d03c      	beq.n	80097f2 <HAL_TIM_ConfigClockSource+0xfa>
 8009778:	2b50      	cmp	r3, #80	; 0x50
 800977a:	d873      	bhi.n	8009864 <HAL_TIM_ConfigClockSource+0x16c>
 800977c:	2b40      	cmp	r3, #64	; 0x40
 800977e:	d058      	beq.n	8009832 <HAL_TIM_ConfigClockSource+0x13a>
 8009780:	2b40      	cmp	r3, #64	; 0x40
 8009782:	d86f      	bhi.n	8009864 <HAL_TIM_ConfigClockSource+0x16c>
 8009784:	2b30      	cmp	r3, #48	; 0x30
 8009786:	d064      	beq.n	8009852 <HAL_TIM_ConfigClockSource+0x15a>
 8009788:	2b30      	cmp	r3, #48	; 0x30
 800978a:	d86b      	bhi.n	8009864 <HAL_TIM_ConfigClockSource+0x16c>
 800978c:	2b20      	cmp	r3, #32
 800978e:	d060      	beq.n	8009852 <HAL_TIM_ConfigClockSource+0x15a>
 8009790:	2b20      	cmp	r3, #32
 8009792:	d867      	bhi.n	8009864 <HAL_TIM_ConfigClockSource+0x16c>
 8009794:	2b00      	cmp	r3, #0
 8009796:	d05c      	beq.n	8009852 <HAL_TIM_ConfigClockSource+0x15a>
 8009798:	2b10      	cmp	r3, #16
 800979a:	d05a      	beq.n	8009852 <HAL_TIM_ConfigClockSource+0x15a>
 800979c:	e062      	b.n	8009864 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6818      	ldr	r0, [r3, #0]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	6899      	ldr	r1, [r3, #8]
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	685a      	ldr	r2, [r3, #4]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	f000 fb19 	bl	8009de4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80097c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	609a      	str	r2, [r3, #8]
      break;
 80097ca:	e04f      	b.n	800986c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6818      	ldr	r0, [r3, #0]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	6899      	ldr	r1, [r3, #8]
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	685a      	ldr	r2, [r3, #4]
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	f000 fb02 	bl	8009de4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	689a      	ldr	r2, [r3, #8]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097ee:	609a      	str	r2, [r3, #8]
      break;
 80097f0:	e03c      	b.n	800986c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6818      	ldr	r0, [r3, #0]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	6859      	ldr	r1, [r3, #4]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	461a      	mov	r2, r3
 8009800:	f000 fa76 	bl	8009cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2150      	movs	r1, #80	; 0x50
 800980a:	4618      	mov	r0, r3
 800980c:	f000 facf 	bl	8009dae <TIM_ITRx_SetConfig>
      break;
 8009810:	e02c      	b.n	800986c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6818      	ldr	r0, [r3, #0]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	6859      	ldr	r1, [r3, #4]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	461a      	mov	r2, r3
 8009820:	f000 fa95 	bl	8009d4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2160      	movs	r1, #96	; 0x60
 800982a:	4618      	mov	r0, r3
 800982c:	f000 fabf 	bl	8009dae <TIM_ITRx_SetConfig>
      break;
 8009830:	e01c      	b.n	800986c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6818      	ldr	r0, [r3, #0]
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	6859      	ldr	r1, [r3, #4]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	461a      	mov	r2, r3
 8009840:	f000 fa56 	bl	8009cf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2140      	movs	r1, #64	; 0x40
 800984a:	4618      	mov	r0, r3
 800984c:	f000 faaf 	bl	8009dae <TIM_ITRx_SetConfig>
      break;
 8009850:	e00c      	b.n	800986c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4619      	mov	r1, r3
 800985c:	4610      	mov	r0, r2
 800985e:	f000 faa6 	bl	8009dae <TIM_ITRx_SetConfig>
      break;
 8009862:	e003      	b.n	800986c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	73fb      	strb	r3, [r7, #15]
      break;
 8009868:	e000      	b.n	800986c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800986a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800987c:	7bfb      	ldrb	r3, [r7, #15]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009886:	b480      	push	{r7}
 8009888:	b083      	sub	sp, #12
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800988e:	bf00      	nop
 8009890:	370c      	adds	r7, #12
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr

0800989a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800989a:	b480      	push	{r7}
 800989c:	b083      	sub	sp, #12
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098a2:	bf00      	nop
 80098a4:	370c      	adds	r7, #12
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b083      	sub	sp, #12
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098b6:	bf00      	nop
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr

080098c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098c2:	b480      	push	{r7}
 80098c4:	b083      	sub	sp, #12
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098ca:	bf00      	nop
 80098cc:	370c      	adds	r7, #12
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
	...

080098d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a34      	ldr	r2, [pc, #208]	; (80099bc <TIM_Base_SetConfig+0xe4>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d00f      	beq.n	8009910 <TIM_Base_SetConfig+0x38>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098f6:	d00b      	beq.n	8009910 <TIM_Base_SetConfig+0x38>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a31      	ldr	r2, [pc, #196]	; (80099c0 <TIM_Base_SetConfig+0xe8>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d007      	beq.n	8009910 <TIM_Base_SetConfig+0x38>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a30      	ldr	r2, [pc, #192]	; (80099c4 <TIM_Base_SetConfig+0xec>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d003      	beq.n	8009910 <TIM_Base_SetConfig+0x38>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a2f      	ldr	r2, [pc, #188]	; (80099c8 <TIM_Base_SetConfig+0xf0>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d108      	bne.n	8009922 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	4313      	orrs	r3, r2
 8009920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a25      	ldr	r2, [pc, #148]	; (80099bc <TIM_Base_SetConfig+0xe4>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d01b      	beq.n	8009962 <TIM_Base_SetConfig+0x8a>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009930:	d017      	beq.n	8009962 <TIM_Base_SetConfig+0x8a>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a22      	ldr	r2, [pc, #136]	; (80099c0 <TIM_Base_SetConfig+0xe8>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d013      	beq.n	8009962 <TIM_Base_SetConfig+0x8a>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a21      	ldr	r2, [pc, #132]	; (80099c4 <TIM_Base_SetConfig+0xec>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d00f      	beq.n	8009962 <TIM_Base_SetConfig+0x8a>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a20      	ldr	r2, [pc, #128]	; (80099c8 <TIM_Base_SetConfig+0xf0>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d00b      	beq.n	8009962 <TIM_Base_SetConfig+0x8a>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a1f      	ldr	r2, [pc, #124]	; (80099cc <TIM_Base_SetConfig+0xf4>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d007      	beq.n	8009962 <TIM_Base_SetConfig+0x8a>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a1e      	ldr	r2, [pc, #120]	; (80099d0 <TIM_Base_SetConfig+0xf8>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d003      	beq.n	8009962 <TIM_Base_SetConfig+0x8a>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a1d      	ldr	r2, [pc, #116]	; (80099d4 <TIM_Base_SetConfig+0xfc>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d108      	bne.n	8009974 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	4313      	orrs	r3, r2
 8009972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	4313      	orrs	r3, r2
 8009980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	689a      	ldr	r2, [r3, #8]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a08      	ldr	r2, [pc, #32]	; (80099bc <TIM_Base_SetConfig+0xe4>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d103      	bne.n	80099a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	691a      	ldr	r2, [r3, #16]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	615a      	str	r2, [r3, #20]
}
 80099ae:	bf00      	nop
 80099b0:	3714      	adds	r7, #20
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop
 80099bc:	40010000 	.word	0x40010000
 80099c0:	40000400 	.word	0x40000400
 80099c4:	40000800 	.word	0x40000800
 80099c8:	40000c00 	.word	0x40000c00
 80099cc:	40014000 	.word	0x40014000
 80099d0:	40014400 	.word	0x40014400
 80099d4:	40014800 	.word	0x40014800

080099d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099d8:	b480      	push	{r7}
 80099da:	b087      	sub	sp, #28
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a1b      	ldr	r3, [r3, #32]
 80099e6:	f023 0201 	bic.w	r2, r3, #1
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f023 0303 	bic.w	r3, r3, #3
 8009a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f023 0302 	bic.w	r3, r3, #2
 8009a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a1c      	ldr	r2, [pc, #112]	; (8009aa0 <TIM_OC1_SetConfig+0xc8>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d10c      	bne.n	8009a4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	f023 0308 	bic.w	r3, r3, #8
 8009a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f023 0304 	bic.w	r3, r3, #4
 8009a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a13      	ldr	r2, [pc, #76]	; (8009aa0 <TIM_OC1_SetConfig+0xc8>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d111      	bne.n	8009a7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	695b      	ldr	r3, [r3, #20]
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	693a      	ldr	r2, [r7, #16]
 8009a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	685a      	ldr	r2, [r3, #4]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	697a      	ldr	r2, [r7, #20]
 8009a92:	621a      	str	r2, [r3, #32]
}
 8009a94:	bf00      	nop
 8009a96:	371c      	adds	r7, #28
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	40010000 	.word	0x40010000

08009aa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b087      	sub	sp, #28
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	f023 0210 	bic.w	r2, r3, #16
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	021b      	lsls	r3, r3, #8
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	f023 0320 	bic.w	r3, r3, #32
 8009aee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	011b      	lsls	r3, r3, #4
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a1e      	ldr	r2, [pc, #120]	; (8009b78 <TIM_OC2_SetConfig+0xd4>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d10d      	bne.n	8009b20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	011b      	lsls	r3, r3, #4
 8009b12:	697a      	ldr	r2, [r7, #20]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4a15      	ldr	r2, [pc, #84]	; (8009b78 <TIM_OC2_SetConfig+0xd4>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d113      	bne.n	8009b50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	685a      	ldr	r2, [r3, #4]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	621a      	str	r2, [r3, #32]
}
 8009b6a:	bf00      	nop
 8009b6c:	371c      	adds	r7, #28
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	40010000 	.word	0x40010000

08009b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b087      	sub	sp, #28
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a1b      	ldr	r3, [r3, #32]
 8009b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	69db      	ldr	r3, [r3, #28]
 8009ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f023 0303 	bic.w	r3, r3, #3
 8009bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	021b      	lsls	r3, r3, #8
 8009bcc:	697a      	ldr	r2, [r7, #20]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a1d      	ldr	r2, [pc, #116]	; (8009c4c <TIM_OC3_SetConfig+0xd0>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d10d      	bne.n	8009bf6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	021b      	lsls	r3, r3, #8
 8009be8:	697a      	ldr	r2, [r7, #20]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a14      	ldr	r2, [pc, #80]	; (8009c4c <TIM_OC3_SetConfig+0xd0>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d113      	bne.n	8009c26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	695b      	ldr	r3, [r3, #20]
 8009c12:	011b      	lsls	r3, r3, #4
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	011b      	lsls	r3, r3, #4
 8009c20:	693a      	ldr	r2, [r7, #16]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	693a      	ldr	r2, [r7, #16]
 8009c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	685a      	ldr	r2, [r3, #4]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	621a      	str	r2, [r3, #32]
}
 8009c40:	bf00      	nop
 8009c42:	371c      	adds	r7, #28
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	40010000 	.word	0x40010000

08009c50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b087      	sub	sp, #28
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a1b      	ldr	r3, [r3, #32]
 8009c5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a1b      	ldr	r3, [r3, #32]
 8009c6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	69db      	ldr	r3, [r3, #28]
 8009c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	021b      	lsls	r3, r3, #8
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	031b      	lsls	r3, r3, #12
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a10      	ldr	r2, [pc, #64]	; (8009cec <TIM_OC4_SetConfig+0x9c>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d109      	bne.n	8009cc4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	019b      	lsls	r3, r3, #6
 8009cbe:	697a      	ldr	r2, [r7, #20]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	697a      	ldr	r2, [r7, #20]
 8009cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	685a      	ldr	r2, [r3, #4]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	693a      	ldr	r2, [r7, #16]
 8009cdc:	621a      	str	r2, [r3, #32]
}
 8009cde:	bf00      	nop
 8009ce0:	371c      	adds	r7, #28
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	40010000 	.word	0x40010000

08009cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b087      	sub	sp, #28
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6a1b      	ldr	r3, [r3, #32]
 8009d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6a1b      	ldr	r3, [r3, #32]
 8009d06:	f023 0201 	bic.w	r2, r3, #1
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	699b      	ldr	r3, [r3, #24]
 8009d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	011b      	lsls	r3, r3, #4
 8009d20:	693a      	ldr	r2, [r7, #16]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	f023 030a 	bic.w	r3, r3, #10
 8009d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d2e:	697a      	ldr	r2, [r7, #20]
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	621a      	str	r2, [r3, #32]
}
 8009d42:	bf00      	nop
 8009d44:	371c      	adds	r7, #28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b087      	sub	sp, #28
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	60f8      	str	r0, [r7, #12]
 8009d56:	60b9      	str	r1, [r7, #8]
 8009d58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6a1b      	ldr	r3, [r3, #32]
 8009d5e:	f023 0210 	bic.w	r2, r3, #16
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	699b      	ldr	r3, [r3, #24]
 8009d6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6a1b      	ldr	r3, [r3, #32]
 8009d70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	031b      	lsls	r3, r3, #12
 8009d7e:	697a      	ldr	r2, [r7, #20]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	011b      	lsls	r3, r3, #4
 8009d90:	693a      	ldr	r2, [r7, #16]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	697a      	ldr	r2, [r7, #20]
 8009d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	621a      	str	r2, [r3, #32]
}
 8009da2:	bf00      	nop
 8009da4:	371c      	adds	r7, #28
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b085      	sub	sp, #20
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	f043 0307 	orr.w	r3, r3, #7
 8009dd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	609a      	str	r2, [r3, #8]
}
 8009dd8:	bf00      	nop
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b087      	sub	sp, #28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
 8009df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009dfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	021a      	lsls	r2, r3, #8
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	431a      	orrs	r2, r3
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	697a      	ldr	r2, [r7, #20]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	697a      	ldr	r2, [r7, #20]
 8009e16:	609a      	str	r2, [r3, #8]
}
 8009e18:	bf00      	nop
 8009e1a:	371c      	adds	r7, #28
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b087      	sub	sp, #28
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	f003 031f 	and.w	r3, r3, #31
 8009e36:	2201      	movs	r2, #1
 8009e38:	fa02 f303 	lsl.w	r3, r2, r3
 8009e3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6a1a      	ldr	r2, [r3, #32]
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	43db      	mvns	r3, r3
 8009e46:	401a      	ands	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6a1a      	ldr	r2, [r3, #32]
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	f003 031f 	and.w	r3, r3, #31
 8009e56:	6879      	ldr	r1, [r7, #4]
 8009e58:	fa01 f303 	lsl.w	r3, r1, r3
 8009e5c:	431a      	orrs	r2, r3
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	621a      	str	r2, [r3, #32]
}
 8009e62:	bf00      	nop
 8009e64:	371c      	adds	r7, #28
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
	...

08009e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d101      	bne.n	8009e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e84:	2302      	movs	r3, #2
 8009e86:	e050      	b.n	8009f2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2202      	movs	r2, #2
 8009e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a1c      	ldr	r2, [pc, #112]	; (8009f38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d018      	beq.n	8009efe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ed4:	d013      	beq.n	8009efe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a18      	ldr	r2, [pc, #96]	; (8009f3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d00e      	beq.n	8009efe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a16      	ldr	r2, [pc, #88]	; (8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d009      	beq.n	8009efe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a15      	ldr	r2, [pc, #84]	; (8009f44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d004      	beq.n	8009efe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a13      	ldr	r2, [pc, #76]	; (8009f48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d10c      	bne.n	8009f18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3714      	adds	r7, #20
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	40010000 	.word	0x40010000
 8009f3c:	40000400 	.word	0x40000400
 8009f40:	40000800 	.word	0x40000800
 8009f44:	40000c00 	.word	0x40000c00
 8009f48:	40014000 	.word	0x40014000

08009f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f54:	bf00      	nop
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f68:	bf00      	nop
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f74:	b084      	sub	sp, #16
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b084      	sub	sp, #16
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	f107 001c 	add.w	r0, r7, #28
 8009f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d122      	bne.n	8009fd2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d105      	bne.n	8009fc6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f001 fbee 	bl	800b7a8 <USB_CoreReset>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73fb      	strb	r3, [r7, #15]
 8009fd0:	e01a      	b.n	800a008 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f001 fbe2 	bl	800b7a8 <USB_CoreReset>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d106      	bne.n	8009ffc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	639a      	str	r2, [r3, #56]	; 0x38
 8009ffa:	e005      	b.n	800a008 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a000:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d10b      	bne.n	800a026 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	f043 0206 	orr.w	r2, r3, #6
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	f043 0220 	orr.w	r2, r3, #32
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a026:	7bfb      	ldrb	r3, [r7, #15]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a032:	b004      	add	sp, #16
 800a034:	4770      	bx	lr
	...

0800a038 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a038:	b480      	push	{r7}
 800a03a:	b087      	sub	sp, #28
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	4613      	mov	r3, r2
 800a044:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a046:	79fb      	ldrb	r3, [r7, #7]
 800a048:	2b02      	cmp	r3, #2
 800a04a:	d165      	bne.n	800a118 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	4a41      	ldr	r2, [pc, #260]	; (800a154 <USB_SetTurnaroundTime+0x11c>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d906      	bls.n	800a062 <USB_SetTurnaroundTime+0x2a>
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	4a40      	ldr	r2, [pc, #256]	; (800a158 <USB_SetTurnaroundTime+0x120>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d202      	bcs.n	800a062 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a05c:	230f      	movs	r3, #15
 800a05e:	617b      	str	r3, [r7, #20]
 800a060:	e062      	b.n	800a128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	4a3c      	ldr	r2, [pc, #240]	; (800a158 <USB_SetTurnaroundTime+0x120>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d306      	bcc.n	800a078 <USB_SetTurnaroundTime+0x40>
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	4a3b      	ldr	r2, [pc, #236]	; (800a15c <USB_SetTurnaroundTime+0x124>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d202      	bcs.n	800a078 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a072:	230e      	movs	r3, #14
 800a074:	617b      	str	r3, [r7, #20]
 800a076:	e057      	b.n	800a128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	4a38      	ldr	r2, [pc, #224]	; (800a15c <USB_SetTurnaroundTime+0x124>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d306      	bcc.n	800a08e <USB_SetTurnaroundTime+0x56>
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	4a37      	ldr	r2, [pc, #220]	; (800a160 <USB_SetTurnaroundTime+0x128>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d202      	bcs.n	800a08e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a088:	230d      	movs	r3, #13
 800a08a:	617b      	str	r3, [r7, #20]
 800a08c:	e04c      	b.n	800a128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	4a33      	ldr	r2, [pc, #204]	; (800a160 <USB_SetTurnaroundTime+0x128>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d306      	bcc.n	800a0a4 <USB_SetTurnaroundTime+0x6c>
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	4a32      	ldr	r2, [pc, #200]	; (800a164 <USB_SetTurnaroundTime+0x12c>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d802      	bhi.n	800a0a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a09e:	230c      	movs	r3, #12
 800a0a0:	617b      	str	r3, [r7, #20]
 800a0a2:	e041      	b.n	800a128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	4a2f      	ldr	r2, [pc, #188]	; (800a164 <USB_SetTurnaroundTime+0x12c>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d906      	bls.n	800a0ba <USB_SetTurnaroundTime+0x82>
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	4a2e      	ldr	r2, [pc, #184]	; (800a168 <USB_SetTurnaroundTime+0x130>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d802      	bhi.n	800a0ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a0b4:	230b      	movs	r3, #11
 800a0b6:	617b      	str	r3, [r7, #20]
 800a0b8:	e036      	b.n	800a128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	4a2a      	ldr	r2, [pc, #168]	; (800a168 <USB_SetTurnaroundTime+0x130>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d906      	bls.n	800a0d0 <USB_SetTurnaroundTime+0x98>
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	4a29      	ldr	r2, [pc, #164]	; (800a16c <USB_SetTurnaroundTime+0x134>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d802      	bhi.n	800a0d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a0ca:	230a      	movs	r3, #10
 800a0cc:	617b      	str	r3, [r7, #20]
 800a0ce:	e02b      	b.n	800a128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	4a26      	ldr	r2, [pc, #152]	; (800a16c <USB_SetTurnaroundTime+0x134>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d906      	bls.n	800a0e6 <USB_SetTurnaroundTime+0xae>
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	4a25      	ldr	r2, [pc, #148]	; (800a170 <USB_SetTurnaroundTime+0x138>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d202      	bcs.n	800a0e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a0e0:	2309      	movs	r3, #9
 800a0e2:	617b      	str	r3, [r7, #20]
 800a0e4:	e020      	b.n	800a128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	4a21      	ldr	r2, [pc, #132]	; (800a170 <USB_SetTurnaroundTime+0x138>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d306      	bcc.n	800a0fc <USB_SetTurnaroundTime+0xc4>
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	4a20      	ldr	r2, [pc, #128]	; (800a174 <USB_SetTurnaroundTime+0x13c>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d802      	bhi.n	800a0fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a0f6:	2308      	movs	r3, #8
 800a0f8:	617b      	str	r3, [r7, #20]
 800a0fa:	e015      	b.n	800a128 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	4a1d      	ldr	r2, [pc, #116]	; (800a174 <USB_SetTurnaroundTime+0x13c>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d906      	bls.n	800a112 <USB_SetTurnaroundTime+0xda>
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	4a1c      	ldr	r2, [pc, #112]	; (800a178 <USB_SetTurnaroundTime+0x140>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d202      	bcs.n	800a112 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a10c:	2307      	movs	r3, #7
 800a10e:	617b      	str	r3, [r7, #20]
 800a110:	e00a      	b.n	800a128 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a112:	2306      	movs	r3, #6
 800a114:	617b      	str	r3, [r7, #20]
 800a116:	e007      	b.n	800a128 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a118:	79fb      	ldrb	r3, [r7, #7]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d102      	bne.n	800a124 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a11e:	2309      	movs	r3, #9
 800a120:	617b      	str	r3, [r7, #20]
 800a122:	e001      	b.n	800a128 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a124:	2309      	movs	r3, #9
 800a126:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	68da      	ldr	r2, [r3, #12]
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	029b      	lsls	r3, r3, #10
 800a13c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a140:	431a      	orrs	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	371c      	adds	r7, #28
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr
 800a154:	00d8acbf 	.word	0x00d8acbf
 800a158:	00e4e1c0 	.word	0x00e4e1c0
 800a15c:	00f42400 	.word	0x00f42400
 800a160:	01067380 	.word	0x01067380
 800a164:	011a499f 	.word	0x011a499f
 800a168:	01312cff 	.word	0x01312cff
 800a16c:	014ca43f 	.word	0x014ca43f
 800a170:	016e3600 	.word	0x016e3600
 800a174:	01a6ab1f 	.word	0x01a6ab1f
 800a178:	01e84800 	.word	0x01e84800

0800a17c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	f043 0201 	orr.w	r2, r3, #1
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a19e:	b480      	push	{r7}
 800a1a0:	b083      	sub	sp, #12
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	f023 0201 	bic.w	r2, r3, #1
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a1dc:	78fb      	ldrb	r3, [r7, #3]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d115      	bne.n	800a20e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a1ee:	2001      	movs	r0, #1
 800a1f0:	f7fb f820 	bl	8005234 <HAL_Delay>
      ms++;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f001 fa45 	bl	800b68a <USB_GetMode>
 800a200:	4603      	mov	r3, r0
 800a202:	2b01      	cmp	r3, #1
 800a204:	d01e      	beq.n	800a244 <USB_SetCurrentMode+0x84>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2b31      	cmp	r3, #49	; 0x31
 800a20a:	d9f0      	bls.n	800a1ee <USB_SetCurrentMode+0x2e>
 800a20c:	e01a      	b.n	800a244 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a20e:	78fb      	ldrb	r3, [r7, #3]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d115      	bne.n	800a240 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a220:	2001      	movs	r0, #1
 800a222:	f7fb f807 	bl	8005234 <HAL_Delay>
      ms++;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	3301      	adds	r3, #1
 800a22a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f001 fa2c 	bl	800b68a <USB_GetMode>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d005      	beq.n	800a244 <USB_SetCurrentMode+0x84>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2b31      	cmp	r3, #49	; 0x31
 800a23c:	d9f0      	bls.n	800a220 <USB_SetCurrentMode+0x60>
 800a23e:	e001      	b.n	800a244 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	e005      	b.n	800a250 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2b32      	cmp	r3, #50	; 0x32
 800a248:	d101      	bne.n	800a24e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e000      	b.n	800a250 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a258:	b084      	sub	sp, #16
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b086      	sub	sp, #24
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a272:	2300      	movs	r3, #0
 800a274:	613b      	str	r3, [r7, #16]
 800a276:	e009      	b.n	800a28c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	3340      	adds	r3, #64	; 0x40
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	4413      	add	r3, r2
 800a282:	2200      	movs	r2, #0
 800a284:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	3301      	adds	r3, #1
 800a28a:	613b      	str	r3, [r7, #16]
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	2b0e      	cmp	r3, #14
 800a290:	d9f2      	bls.n	800a278 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a294:	2b00      	cmp	r3, #0
 800a296:	d11c      	bne.n	800a2d2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2a6:	f043 0302 	orr.w	r3, r3, #2
 800a2aa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2bc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	639a      	str	r2, [r3, #56]	; 0x38
 800a2d0:	e00b      	b.n	800a2ea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a304:	461a      	mov	r2, r3
 800a306:	680b      	ldr	r3, [r1, #0]
 800a308:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d10c      	bne.n	800a32a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a312:	2b00      	cmp	r3, #0
 800a314:	d104      	bne.n	800a320 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a316:	2100      	movs	r1, #0
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 f965 	bl	800a5e8 <USB_SetDevSpeed>
 800a31e:	e008      	b.n	800a332 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a320:	2101      	movs	r1, #1
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f960 	bl	800a5e8 <USB_SetDevSpeed>
 800a328:	e003      	b.n	800a332 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a32a:	2103      	movs	r1, #3
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f95b 	bl	800a5e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a332:	2110      	movs	r1, #16
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 f8f3 	bl	800a520 <USB_FlushTxFifo>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d001      	beq.n	800a344 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f91f 	bl	800a588 <USB_FlushRxFifo>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d001      	beq.n	800a354 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a35a:	461a      	mov	r2, r3
 800a35c:	2300      	movs	r3, #0
 800a35e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a366:	461a      	mov	r2, r3
 800a368:	2300      	movs	r3, #0
 800a36a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a372:	461a      	mov	r2, r3
 800a374:	2300      	movs	r3, #0
 800a376:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a378:	2300      	movs	r3, #0
 800a37a:	613b      	str	r3, [r7, #16]
 800a37c:	e043      	b.n	800a406 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	015a      	lsls	r2, r3, #5
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	4413      	add	r3, r2
 800a386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a394:	d118      	bne.n	800a3c8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10a      	bne.n	800a3b2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	015a      	lsls	r2, r3, #5
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a3ae:	6013      	str	r3, [r2, #0]
 800a3b0:	e013      	b.n	800a3da <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	015a      	lsls	r2, r3, #5
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3be:	461a      	mov	r2, r3
 800a3c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a3c4:	6013      	str	r3, [r2, #0]
 800a3c6:	e008      	b.n	800a3da <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	015a      	lsls	r2, r3, #5
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	015a      	lsls	r2, r3, #5
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a3fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	3301      	adds	r3, #1
 800a404:	613b      	str	r3, [r7, #16]
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	693a      	ldr	r2, [r7, #16]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d3b7      	bcc.n	800a37e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a40e:	2300      	movs	r3, #0
 800a410:	613b      	str	r3, [r7, #16]
 800a412:	e043      	b.n	800a49c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	015a      	lsls	r2, r3, #5
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	4413      	add	r3, r2
 800a41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a42a:	d118      	bne.n	800a45e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10a      	bne.n	800a448 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	015a      	lsls	r2, r3, #5
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	4413      	add	r3, r2
 800a43a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a43e:	461a      	mov	r2, r3
 800a440:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a444:	6013      	str	r3, [r2, #0]
 800a446:	e013      	b.n	800a470 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	015a      	lsls	r2, r3, #5
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	4413      	add	r3, r2
 800a450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a454:	461a      	mov	r2, r3
 800a456:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a45a:	6013      	str	r3, [r2, #0]
 800a45c:	e008      	b.n	800a470 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	015a      	lsls	r2, r3, #5
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	4413      	add	r3, r2
 800a466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a46a:	461a      	mov	r2, r3
 800a46c:	2300      	movs	r3, #0
 800a46e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	015a      	lsls	r2, r3, #5
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	4413      	add	r3, r2
 800a478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a47c:	461a      	mov	r2, r3
 800a47e:	2300      	movs	r3, #0
 800a480:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	015a      	lsls	r2, r3, #5
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	4413      	add	r3, r2
 800a48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a48e:	461a      	mov	r2, r3
 800a490:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a494:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	3301      	adds	r3, #1
 800a49a:	613b      	str	r3, [r7, #16]
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	693a      	ldr	r2, [r7, #16]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d3b7      	bcc.n	800a414 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a4c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d105      	bne.n	800a4d8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	f043 0210 	orr.w	r2, r3, #16
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	699a      	ldr	r2, [r3, #24]
 800a4dc:	4b0f      	ldr	r3, [pc, #60]	; (800a51c <USB_DevInit+0x2c4>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d005      	beq.n	800a4f6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	699b      	ldr	r3, [r3, #24]
 800a4ee:	f043 0208 	orr.w	r2, r3, #8
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a4f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d107      	bne.n	800a50c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	699b      	ldr	r3, [r3, #24]
 800a500:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a504:	f043 0304 	orr.w	r3, r3, #4
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a50c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3718      	adds	r7, #24
 800a512:	46bd      	mov	sp, r7
 800a514:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a518:	b004      	add	sp, #16
 800a51a:	4770      	bx	lr
 800a51c:	803c3800 	.word	0x803c3800

0800a520 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a52a:	2300      	movs	r3, #0
 800a52c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	3301      	adds	r3, #1
 800a532:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	4a13      	ldr	r2, [pc, #76]	; (800a584 <USB_FlushTxFifo+0x64>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d901      	bls.n	800a540 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e01b      	b.n	800a578 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	2b00      	cmp	r3, #0
 800a546:	daf2      	bge.n	800a52e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a548:	2300      	movs	r3, #0
 800a54a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	019b      	lsls	r3, r3, #6
 800a550:	f043 0220 	orr.w	r2, r3, #32
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	3301      	adds	r3, #1
 800a55c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	4a08      	ldr	r2, [pc, #32]	; (800a584 <USB_FlushTxFifo+0x64>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d901      	bls.n	800a56a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a566:	2303      	movs	r3, #3
 800a568:	e006      	b.n	800a578 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	f003 0320 	and.w	r3, r3, #32
 800a572:	2b20      	cmp	r3, #32
 800a574:	d0f0      	beq.n	800a558 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3714      	adds	r7, #20
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr
 800a584:	00030d40 	.word	0x00030d40

0800a588 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a590:	2300      	movs	r3, #0
 800a592:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	3301      	adds	r3, #1
 800a598:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	4a11      	ldr	r2, [pc, #68]	; (800a5e4 <USB_FlushRxFifo+0x5c>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d901      	bls.n	800a5a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e018      	b.n	800a5d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	daf2      	bge.n	800a594 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2210      	movs	r2, #16
 800a5b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	4a08      	ldr	r2, [pc, #32]	; (800a5e4 <USB_FlushRxFifo+0x5c>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d901      	bls.n	800a5ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a5c6:	2303      	movs	r3, #3
 800a5c8:	e006      	b.n	800a5d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	f003 0310 	and.w	r3, r3, #16
 800a5d2:	2b10      	cmp	r3, #16
 800a5d4:	d0f0      	beq.n	800a5b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3714      	adds	r7, #20
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr
 800a5e4:	00030d40 	.word	0x00030d40

0800a5e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b085      	sub	sp, #20
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	78fb      	ldrb	r3, [r7, #3]
 800a602:	68f9      	ldr	r1, [r7, #12]
 800a604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a608:	4313      	orrs	r3, r2
 800a60a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3714      	adds	r7, #20
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b087      	sub	sp, #28
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	f003 0306 	and.w	r3, r3, #6
 800a632:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d102      	bne.n	800a640 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a63a:	2300      	movs	r3, #0
 800a63c:	75fb      	strb	r3, [r7, #23]
 800a63e:	e00a      	b.n	800a656 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2b02      	cmp	r3, #2
 800a644:	d002      	beq.n	800a64c <USB_GetDevSpeed+0x32>
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2b06      	cmp	r3, #6
 800a64a:	d102      	bne.n	800a652 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a64c:	2302      	movs	r3, #2
 800a64e:	75fb      	strb	r3, [r7, #23]
 800a650:	e001      	b.n	800a656 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a652:	230f      	movs	r3, #15
 800a654:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a656:	7dfb      	ldrb	r3, [r7, #23]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	371c      	adds	r7, #28
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	785b      	ldrb	r3, [r3, #1]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d13a      	bne.n	800a6f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a686:	69da      	ldr	r2, [r3, #28]
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	f003 030f 	and.w	r3, r3, #15
 800a690:	2101      	movs	r1, #1
 800a692:	fa01 f303 	lsl.w	r3, r1, r3
 800a696:	b29b      	uxth	r3, r3
 800a698:	68f9      	ldr	r1, [r7, #12]
 800a69a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	015a      	lsls	r2, r3, #5
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d155      	bne.n	800a764 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	015a      	lsls	r2, r3, #5
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	4413      	add	r3, r2
 800a6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	791b      	ldrb	r3, [r3, #4]
 800a6d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a6d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	059b      	lsls	r3, r3, #22
 800a6da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	0151      	lsls	r1, r2, #5
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	440a      	add	r2, r1
 800a6e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6f2:	6013      	str	r3, [r2, #0]
 800a6f4:	e036      	b.n	800a764 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6fc:	69da      	ldr	r2, [r3, #28]
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	f003 030f 	and.w	r3, r3, #15
 800a706:	2101      	movs	r1, #1
 800a708:	fa01 f303 	lsl.w	r3, r1, r3
 800a70c:	041b      	lsls	r3, r3, #16
 800a70e:	68f9      	ldr	r1, [r7, #12]
 800a710:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a714:	4313      	orrs	r3, r2
 800a716:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	015a      	lsls	r2, r3, #5
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	4413      	add	r3, r2
 800a720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d11a      	bne.n	800a764 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	015a      	lsls	r2, r3, #5
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	4413      	add	r3, r2
 800a736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	791b      	ldrb	r3, [r3, #4]
 800a748:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a74a:	430b      	orrs	r3, r1
 800a74c:	4313      	orrs	r3, r2
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	0151      	lsls	r1, r2, #5
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	440a      	add	r2, r1
 800a756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a75a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a75e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a762:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3714      	adds	r7, #20
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
	...

0800a774 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	785b      	ldrb	r3, [r3, #1]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d161      	bne.n	800a854 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7a6:	d11f      	bne.n	800a7e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	015a      	lsls	r2, r3, #5
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68ba      	ldr	r2, [r7, #8]
 800a7b8:	0151      	lsls	r1, r2, #5
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	440a      	add	r2, r1
 800a7be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a7c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	015a      	lsls	r2, r3, #5
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	0151      	lsls	r1, r2, #5
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	440a      	add	r2, r1
 800a7de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	f003 030f 	and.w	r3, r3, #15
 800a7f8:	2101      	movs	r1, #1
 800a7fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	43db      	mvns	r3, r3
 800a802:	68f9      	ldr	r1, [r7, #12]
 800a804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a808:	4013      	ands	r3, r2
 800a80a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a812:	69da      	ldr	r2, [r3, #28]
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	f003 030f 	and.w	r3, r3, #15
 800a81c:	2101      	movs	r1, #1
 800a81e:	fa01 f303 	lsl.w	r3, r1, r3
 800a822:	b29b      	uxth	r3, r3
 800a824:	43db      	mvns	r3, r3
 800a826:	68f9      	ldr	r1, [r7, #12]
 800a828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a82c:	4013      	ands	r3, r2
 800a82e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	015a      	lsls	r2, r3, #5
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	4413      	add	r3, r2
 800a838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	0159      	lsls	r1, r3, #5
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	440b      	add	r3, r1
 800a846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a84a:	4619      	mov	r1, r3
 800a84c:	4b35      	ldr	r3, [pc, #212]	; (800a924 <USB_DeactivateEndpoint+0x1b0>)
 800a84e:	4013      	ands	r3, r2
 800a850:	600b      	str	r3, [r1, #0]
 800a852:	e060      	b.n	800a916 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	015a      	lsls	r2, r3, #5
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	4413      	add	r3, r2
 800a85c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a866:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a86a:	d11f      	bne.n	800a8ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	015a      	lsls	r2, r3, #5
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	4413      	add	r3, r2
 800a874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68ba      	ldr	r2, [r7, #8]
 800a87c:	0151      	lsls	r1, r2, #5
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	440a      	add	r2, r1
 800a882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a886:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a88a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	015a      	lsls	r2, r3, #5
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	4413      	add	r3, r2
 800a894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	0151      	lsls	r1, r2, #5
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	440a      	add	r2, r1
 800a8a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a8aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	f003 030f 	and.w	r3, r3, #15
 800a8bc:	2101      	movs	r1, #1
 800a8be:	fa01 f303 	lsl.w	r3, r1, r3
 800a8c2:	041b      	lsls	r3, r3, #16
 800a8c4:	43db      	mvns	r3, r3
 800a8c6:	68f9      	ldr	r1, [r7, #12]
 800a8c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8d6:	69da      	ldr	r2, [r3, #28]
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	f003 030f 	and.w	r3, r3, #15
 800a8e0:	2101      	movs	r1, #1
 800a8e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a8e6:	041b      	lsls	r3, r3, #16
 800a8e8:	43db      	mvns	r3, r3
 800a8ea:	68f9      	ldr	r1, [r7, #12]
 800a8ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	015a      	lsls	r2, r3, #5
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	0159      	lsls	r1, r3, #5
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	440b      	add	r3, r1
 800a90a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a90e:	4619      	mov	r1, r3
 800a910:	4b05      	ldr	r3, [pc, #20]	; (800a928 <USB_DeactivateEndpoint+0x1b4>)
 800a912:	4013      	ands	r3, r2
 800a914:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr
 800a924:	ec337800 	.word	0xec337800
 800a928:	eff37800 	.word	0xeff37800

0800a92c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b08a      	sub	sp, #40	; 0x28
 800a930:	af02      	add	r7, sp, #8
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	4613      	mov	r3, r2
 800a938:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	785b      	ldrb	r3, [r3, #1]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	f040 815c 	bne.w	800ac06 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	699b      	ldr	r3, [r3, #24]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d132      	bne.n	800a9bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	015a      	lsls	r2, r3, #5
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	4413      	add	r3, r2
 800a95e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	69ba      	ldr	r2, [r7, #24]
 800a966:	0151      	lsls	r1, r2, #5
 800a968:	69fa      	ldr	r2, [r7, #28]
 800a96a:	440a      	add	r2, r1
 800a96c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a970:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a974:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a978:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	015a      	lsls	r2, r3, #5
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	4413      	add	r3, r2
 800a982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	69ba      	ldr	r2, [r7, #24]
 800a98a:	0151      	lsls	r1, r2, #5
 800a98c:	69fa      	ldr	r2, [r7, #28]
 800a98e:	440a      	add	r2, r1
 800a990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a994:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a998:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	015a      	lsls	r2, r3, #5
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	69ba      	ldr	r2, [r7, #24]
 800a9aa:	0151      	lsls	r1, r2, #5
 800a9ac:	69fa      	ldr	r2, [r7, #28]
 800a9ae:	440a      	add	r2, r1
 800a9b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9b4:	0cdb      	lsrs	r3, r3, #19
 800a9b6:	04db      	lsls	r3, r3, #19
 800a9b8:	6113      	str	r3, [r2, #16]
 800a9ba:	e074      	b.n	800aaa6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	015a      	lsls	r2, r3, #5
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	69ba      	ldr	r2, [r7, #24]
 800a9cc:	0151      	lsls	r1, r2, #5
 800a9ce:	69fa      	ldr	r2, [r7, #28]
 800a9d0:	440a      	add	r2, r1
 800a9d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9d6:	0cdb      	lsrs	r3, r3, #19
 800a9d8:	04db      	lsls	r3, r3, #19
 800a9da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	015a      	lsls	r2, r3, #5
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9e8:	691b      	ldr	r3, [r3, #16]
 800a9ea:	69ba      	ldr	r2, [r7, #24]
 800a9ec:	0151      	lsls	r1, r2, #5
 800a9ee:	69fa      	ldr	r2, [r7, #28]
 800a9f0:	440a      	add	r2, r1
 800a9f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a9fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a9fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	015a      	lsls	r2, r3, #5
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	4413      	add	r3, r2
 800aa08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa0c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	6999      	ldr	r1, [r3, #24]
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	440b      	add	r3, r1
 800aa18:	1e59      	subs	r1, r3, #1
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa22:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800aa24:	4b9d      	ldr	r3, [pc, #628]	; (800ac9c <USB_EPStartXfer+0x370>)
 800aa26:	400b      	ands	r3, r1
 800aa28:	69b9      	ldr	r1, [r7, #24]
 800aa2a:	0148      	lsls	r0, r1, #5
 800aa2c:	69f9      	ldr	r1, [r7, #28]
 800aa2e:	4401      	add	r1, r0
 800aa30:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aa34:	4313      	orrs	r3, r2
 800aa36:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	015a      	lsls	r2, r3, #5
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	4413      	add	r3, r2
 800aa40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa44:	691a      	ldr	r2, [r3, #16]
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	699b      	ldr	r3, [r3, #24]
 800aa4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa4e:	69b9      	ldr	r1, [r7, #24]
 800aa50:	0148      	lsls	r0, r1, #5
 800aa52:	69f9      	ldr	r1, [r7, #28]
 800aa54:	4401      	add	r1, r0
 800aa56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	791b      	ldrb	r3, [r3, #4]
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d11f      	bne.n	800aaa6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	015a      	lsls	r2, r3, #5
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	69ba      	ldr	r2, [r7, #24]
 800aa76:	0151      	lsls	r1, r2, #5
 800aa78:	69fa      	ldr	r2, [r7, #28]
 800aa7a:	440a      	add	r2, r1
 800aa7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa80:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800aa84:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	015a      	lsls	r2, r3, #5
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	69ba      	ldr	r2, [r7, #24]
 800aa96:	0151      	lsls	r1, r2, #5
 800aa98:	69fa      	ldr	r2, [r7, #28]
 800aa9a:	440a      	add	r2, r1
 800aa9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aaa4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800aaa6:	79fb      	ldrb	r3, [r7, #7]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d14b      	bne.n	800ab44 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	695b      	ldr	r3, [r3, #20]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d009      	beq.n	800aac8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	015a      	lsls	r2, r3, #5
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	4413      	add	r3, r2
 800aabc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac0:	461a      	mov	r2, r3
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	695b      	ldr	r3, [r3, #20]
 800aac6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	791b      	ldrb	r3, [r3, #4]
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d128      	bne.n	800ab22 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d110      	bne.n	800ab02 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	015a      	lsls	r2, r3, #5
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	4413      	add	r3, r2
 800aae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	69ba      	ldr	r2, [r7, #24]
 800aaf0:	0151      	lsls	r1, r2, #5
 800aaf2:	69fa      	ldr	r2, [r7, #28]
 800aaf4:	440a      	add	r2, r1
 800aaf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aafa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aafe:	6013      	str	r3, [r2, #0]
 800ab00:	e00f      	b.n	800ab22 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	015a      	lsls	r2, r3, #5
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	4413      	add	r3, r2
 800ab0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	69ba      	ldr	r2, [r7, #24]
 800ab12:	0151      	lsls	r1, r2, #5
 800ab14:	69fa      	ldr	r2, [r7, #28]
 800ab16:	440a      	add	r2, r1
 800ab18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab20:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	015a      	lsls	r2, r3, #5
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	4413      	add	r3, r2
 800ab2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	69ba      	ldr	r2, [r7, #24]
 800ab32:	0151      	lsls	r1, r2, #5
 800ab34:	69fa      	ldr	r2, [r7, #28]
 800ab36:	440a      	add	r2, r1
 800ab38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab40:	6013      	str	r3, [r2, #0]
 800ab42:	e133      	b.n	800adac <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	015a      	lsls	r2, r3, #5
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	69ba      	ldr	r2, [r7, #24]
 800ab54:	0151      	lsls	r1, r2, #5
 800ab56:	69fa      	ldr	r2, [r7, #28]
 800ab58:	440a      	add	r2, r1
 800ab5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab62:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	791b      	ldrb	r3, [r3, #4]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d015      	beq.n	800ab98 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	699b      	ldr	r3, [r3, #24]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f000 811b 	beq.w	800adac <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ab76:	69fb      	ldr	r3, [r7, #28]
 800ab78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	f003 030f 	and.w	r3, r3, #15
 800ab86:	2101      	movs	r1, #1
 800ab88:	fa01 f303 	lsl.w	r3, r1, r3
 800ab8c:	69f9      	ldr	r1, [r7, #28]
 800ab8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab92:	4313      	orrs	r3, r2
 800ab94:	634b      	str	r3, [r1, #52]	; 0x34
 800ab96:	e109      	b.n	800adac <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d110      	bne.n	800abca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	015a      	lsls	r2, r3, #5
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	4413      	add	r3, r2
 800abb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	69ba      	ldr	r2, [r7, #24]
 800abb8:	0151      	lsls	r1, r2, #5
 800abba:	69fa      	ldr	r2, [r7, #28]
 800abbc:	440a      	add	r2, r1
 800abbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800abc6:	6013      	str	r3, [r2, #0]
 800abc8:	e00f      	b.n	800abea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	015a      	lsls	r2, r3, #5
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	4413      	add	r3, r2
 800abd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	69ba      	ldr	r2, [r7, #24]
 800abda:	0151      	lsls	r1, r2, #5
 800abdc:	69fa      	ldr	r2, [r7, #28]
 800abde:	440a      	add	r2, r1
 800abe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abe8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	6919      	ldr	r1, [r3, #16]
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	781a      	ldrb	r2, [r3, #0]
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	699b      	ldr	r3, [r3, #24]
 800abf6:	b298      	uxth	r0, r3
 800abf8:	79fb      	ldrb	r3, [r7, #7]
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	4603      	mov	r3, r0
 800abfe:	68f8      	ldr	r0, [r7, #12]
 800ac00:	f000 fade 	bl	800b1c0 <USB_WritePacket>
 800ac04:	e0d2      	b.n	800adac <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	015a      	lsls	r2, r3, #5
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	69ba      	ldr	r2, [r7, #24]
 800ac16:	0151      	lsls	r1, r2, #5
 800ac18:	69fa      	ldr	r2, [r7, #28]
 800ac1a:	440a      	add	r2, r1
 800ac1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac20:	0cdb      	lsrs	r3, r3, #19
 800ac22:	04db      	lsls	r3, r3, #19
 800ac24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	015a      	lsls	r2, r3, #5
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	69ba      	ldr	r2, [r7, #24]
 800ac36:	0151      	lsls	r1, r2, #5
 800ac38:	69fa      	ldr	r2, [r7, #28]
 800ac3a:	440a      	add	r2, r1
 800ac3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ac44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ac48:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	699b      	ldr	r3, [r3, #24]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d126      	bne.n	800aca0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	015a      	lsls	r2, r3, #5
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	4413      	add	r3, r2
 800ac5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac5e:	691a      	ldr	r2, [r3, #16]
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac68:	69b9      	ldr	r1, [r7, #24]
 800ac6a:	0148      	lsls	r0, r1, #5
 800ac6c:	69f9      	ldr	r1, [r7, #28]
 800ac6e:	4401      	add	r1, r0
 800ac70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ac74:	4313      	orrs	r3, r2
 800ac76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	015a      	lsls	r2, r3, #5
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	4413      	add	r3, r2
 800ac80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	69ba      	ldr	r2, [r7, #24]
 800ac88:	0151      	lsls	r1, r2, #5
 800ac8a:	69fa      	ldr	r2, [r7, #28]
 800ac8c:	440a      	add	r2, r1
 800ac8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac96:	6113      	str	r3, [r2, #16]
 800ac98:	e03a      	b.n	800ad10 <USB_EPStartXfer+0x3e4>
 800ac9a:	bf00      	nop
 800ac9c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	699a      	ldr	r2, [r3, #24]
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	4413      	add	r3, r2
 800acaa:	1e5a      	subs	r2, r3, #1
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800acb4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	8afa      	ldrh	r2, [r7, #22]
 800acbc:	fb03 f202 	mul.w	r2, r3, r2
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	4413      	add	r3, r2
 800accc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acd0:	691a      	ldr	r2, [r3, #16]
 800acd2:	8afb      	ldrh	r3, [r7, #22]
 800acd4:	04d9      	lsls	r1, r3, #19
 800acd6:	4b38      	ldr	r3, [pc, #224]	; (800adb8 <USB_EPStartXfer+0x48c>)
 800acd8:	400b      	ands	r3, r1
 800acda:	69b9      	ldr	r1, [r7, #24]
 800acdc:	0148      	lsls	r0, r1, #5
 800acde:	69f9      	ldr	r1, [r7, #28]
 800ace0:	4401      	add	r1, r0
 800ace2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ace6:	4313      	orrs	r3, r2
 800ace8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	015a      	lsls	r2, r3, #5
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	4413      	add	r3, r2
 800acf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acf6:	691a      	ldr	r2, [r3, #16]
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	69db      	ldr	r3, [r3, #28]
 800acfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad00:	69b9      	ldr	r1, [r7, #24]
 800ad02:	0148      	lsls	r0, r1, #5
 800ad04:	69f9      	ldr	r1, [r7, #28]
 800ad06:	4401      	add	r1, r0
 800ad08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ad10:	79fb      	ldrb	r3, [r7, #7]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d10d      	bne.n	800ad32 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d009      	beq.n	800ad32 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	6919      	ldr	r1, [r3, #16]
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	015a      	lsls	r2, r3, #5
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	4413      	add	r3, r2
 800ad2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad2e:	460a      	mov	r2, r1
 800ad30:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	791b      	ldrb	r3, [r3, #4]
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d128      	bne.n	800ad8c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d110      	bne.n	800ad6c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	015a      	lsls	r2, r3, #5
 800ad4e:	69fb      	ldr	r3, [r7, #28]
 800ad50:	4413      	add	r3, r2
 800ad52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	69ba      	ldr	r2, [r7, #24]
 800ad5a:	0151      	lsls	r1, r2, #5
 800ad5c:	69fa      	ldr	r2, [r7, #28]
 800ad5e:	440a      	add	r2, r1
 800ad60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad68:	6013      	str	r3, [r2, #0]
 800ad6a:	e00f      	b.n	800ad8c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	015a      	lsls	r2, r3, #5
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	4413      	add	r3, r2
 800ad74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	69ba      	ldr	r2, [r7, #24]
 800ad7c:	0151      	lsls	r1, r2, #5
 800ad7e:	69fa      	ldr	r2, [r7, #28]
 800ad80:	440a      	add	r2, r1
 800ad82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad8a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	015a      	lsls	r2, r3, #5
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	4413      	add	r3, r2
 800ad94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	69ba      	ldr	r2, [r7, #24]
 800ad9c:	0151      	lsls	r1, r2, #5
 800ad9e:	69fa      	ldr	r2, [r7, #28]
 800ada0:	440a      	add	r2, r1
 800ada2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ada6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800adaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3720      	adds	r7, #32
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	1ff80000 	.word	0x1ff80000

0800adbc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b087      	sub	sp, #28
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	4613      	mov	r3, r2
 800adc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	785b      	ldrb	r3, [r3, #1]
 800add8:	2b01      	cmp	r3, #1
 800adda:	f040 80ce 	bne.w	800af7a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	699b      	ldr	r3, [r3, #24]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d132      	bne.n	800ae4c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	015a      	lsls	r2, r3, #5
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	4413      	add	r3, r2
 800adee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf2:	691b      	ldr	r3, [r3, #16]
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	0151      	lsls	r1, r2, #5
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	440a      	add	r2, r1
 800adfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	015a      	lsls	r2, r3, #5
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	4413      	add	r3, r2
 800ae12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae16:	691b      	ldr	r3, [r3, #16]
 800ae18:	693a      	ldr	r2, [r7, #16]
 800ae1a:	0151      	lsls	r1, r2, #5
 800ae1c:	697a      	ldr	r2, [r7, #20]
 800ae1e:	440a      	add	r2, r1
 800ae20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	015a      	lsls	r2, r3, #5
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	4413      	add	r3, r2
 800ae32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	693a      	ldr	r2, [r7, #16]
 800ae3a:	0151      	lsls	r1, r2, #5
 800ae3c:	697a      	ldr	r2, [r7, #20]
 800ae3e:	440a      	add	r2, r1
 800ae40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae44:	0cdb      	lsrs	r3, r3, #19
 800ae46:	04db      	lsls	r3, r3, #19
 800ae48:	6113      	str	r3, [r2, #16]
 800ae4a:	e04e      	b.n	800aeea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	015a      	lsls	r2, r3, #5
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	4413      	add	r3, r2
 800ae54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae58:	691b      	ldr	r3, [r3, #16]
 800ae5a:	693a      	ldr	r2, [r7, #16]
 800ae5c:	0151      	lsls	r1, r2, #5
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	440a      	add	r2, r1
 800ae62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae66:	0cdb      	lsrs	r3, r3, #19
 800ae68:	04db      	lsls	r3, r3, #19
 800ae6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	015a      	lsls	r2, r3, #5
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	4413      	add	r3, r2
 800ae74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	693a      	ldr	r2, [r7, #16]
 800ae7c:	0151      	lsls	r1, r2, #5
 800ae7e:	697a      	ldr	r2, [r7, #20]
 800ae80:	440a      	add	r2, r1
 800ae82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae8e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	699a      	ldr	r2, [r3, #24]
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d903      	bls.n	800aea4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	68da      	ldr	r2, [r3, #12]
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	015a      	lsls	r2, r3, #5
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	4413      	add	r3, r2
 800aeac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeb0:	691b      	ldr	r3, [r3, #16]
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	0151      	lsls	r1, r2, #5
 800aeb6:	697a      	ldr	r2, [r7, #20]
 800aeb8:	440a      	add	r2, r1
 800aeba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aebe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aec2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	015a      	lsls	r2, r3, #5
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	4413      	add	r3, r2
 800aecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aed0:	691a      	ldr	r2, [r3, #16]
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	699b      	ldr	r3, [r3, #24]
 800aed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aeda:	6939      	ldr	r1, [r7, #16]
 800aedc:	0148      	lsls	r0, r1, #5
 800aede:	6979      	ldr	r1, [r7, #20]
 800aee0:	4401      	add	r1, r0
 800aee2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aee6:	4313      	orrs	r3, r2
 800aee8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aeea:	79fb      	ldrb	r3, [r7, #7]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d11e      	bne.n	800af2e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	695b      	ldr	r3, [r3, #20]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d009      	beq.n	800af0c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	015a      	lsls	r2, r3, #5
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	4413      	add	r3, r2
 800af00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af04:	461a      	mov	r2, r3
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	695b      	ldr	r3, [r3, #20]
 800af0a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	015a      	lsls	r2, r3, #5
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	4413      	add	r3, r2
 800af14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	693a      	ldr	r2, [r7, #16]
 800af1c:	0151      	lsls	r1, r2, #5
 800af1e:	697a      	ldr	r2, [r7, #20]
 800af20:	440a      	add	r2, r1
 800af22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af2a:	6013      	str	r3, [r2, #0]
 800af2c:	e097      	b.n	800b05e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	015a      	lsls	r2, r3, #5
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	4413      	add	r3, r2
 800af36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	693a      	ldr	r2, [r7, #16]
 800af3e:	0151      	lsls	r1, r2, #5
 800af40:	697a      	ldr	r2, [r7, #20]
 800af42:	440a      	add	r2, r1
 800af44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af4c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	699b      	ldr	r3, [r3, #24]
 800af52:	2b00      	cmp	r3, #0
 800af54:	f000 8083 	beq.w	800b05e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	f003 030f 	and.w	r3, r3, #15
 800af68:	2101      	movs	r1, #1
 800af6a:	fa01 f303 	lsl.w	r3, r1, r3
 800af6e:	6979      	ldr	r1, [r7, #20]
 800af70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af74:	4313      	orrs	r3, r2
 800af76:	634b      	str	r3, [r1, #52]	; 0x34
 800af78:	e071      	b.n	800b05e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	015a      	lsls	r2, r3, #5
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	4413      	add	r3, r2
 800af82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	693a      	ldr	r2, [r7, #16]
 800af8a:	0151      	lsls	r1, r2, #5
 800af8c:	697a      	ldr	r2, [r7, #20]
 800af8e:	440a      	add	r2, r1
 800af90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af94:	0cdb      	lsrs	r3, r3, #19
 800af96:	04db      	lsls	r3, r3, #19
 800af98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	015a      	lsls	r2, r3, #5
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	4413      	add	r3, r2
 800afa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afa6:	691b      	ldr	r3, [r3, #16]
 800afa8:	693a      	ldr	r2, [r7, #16]
 800afaa:	0151      	lsls	r1, r2, #5
 800afac:	697a      	ldr	r2, [r7, #20]
 800afae:	440a      	add	r2, r1
 800afb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800afb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800afbc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d003      	beq.n	800afce <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	68da      	ldr	r2, [r3, #12]
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	68da      	ldr	r2, [r3, #12]
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	015a      	lsls	r2, r3, #5
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	4413      	add	r3, r2
 800afde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	693a      	ldr	r2, [r7, #16]
 800afe6:	0151      	lsls	r1, r2, #5
 800afe8:	697a      	ldr	r2, [r7, #20]
 800afea:	440a      	add	r2, r1
 800afec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aff0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aff4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	015a      	lsls	r2, r3, #5
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	4413      	add	r3, r2
 800affe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b002:	691a      	ldr	r2, [r3, #16]
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	69db      	ldr	r3, [r3, #28]
 800b008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b00c:	6939      	ldr	r1, [r7, #16]
 800b00e:	0148      	lsls	r0, r1, #5
 800b010:	6979      	ldr	r1, [r7, #20]
 800b012:	4401      	add	r1, r0
 800b014:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b018:	4313      	orrs	r3, r2
 800b01a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b01c:	79fb      	ldrb	r3, [r7, #7]
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d10d      	bne.n	800b03e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d009      	beq.n	800b03e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	6919      	ldr	r1, [r3, #16]
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	015a      	lsls	r2, r3, #5
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	4413      	add	r3, r2
 800b036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b03a:	460a      	mov	r2, r1
 800b03c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	015a      	lsls	r2, r3, #5
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	4413      	add	r3, r2
 800b046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	693a      	ldr	r2, [r7, #16]
 800b04e:	0151      	lsls	r1, r2, #5
 800b050:	697a      	ldr	r2, [r7, #20]
 800b052:	440a      	add	r2, r1
 800b054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b058:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b05c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	371c      	adds	r7, #28
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b087      	sub	sp, #28
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b076:	2300      	movs	r3, #0
 800b078:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	785b      	ldrb	r3, [r3, #1]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d14a      	bne.n	800b120 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	015a      	lsls	r2, r3, #5
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	4413      	add	r3, r2
 800b094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b09e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b0a2:	f040 8086 	bne.w	800b1b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	015a      	lsls	r2, r3, #5
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	683a      	ldr	r2, [r7, #0]
 800b0b8:	7812      	ldrb	r2, [r2, #0]
 800b0ba:	0151      	lsls	r1, r2, #5
 800b0bc:	693a      	ldr	r2, [r7, #16]
 800b0be:	440a      	add	r2, r1
 800b0c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b0c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	015a      	lsls	r2, r3, #5
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	7812      	ldrb	r2, [r2, #0]
 800b0de:	0151      	lsls	r1, r2, #5
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	440a      	add	r2, r1
 800b0e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b0ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f242 7210 	movw	r2, #10000	; 0x2710
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d902      	bls.n	800b104 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	75fb      	strb	r3, [r7, #23]
          break;
 800b102:	e056      	b.n	800b1b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	015a      	lsls	r2, r3, #5
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	4413      	add	r3, r2
 800b10e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b11c:	d0e7      	beq.n	800b0ee <USB_EPStopXfer+0x82>
 800b11e:	e048      	b.n	800b1b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	015a      	lsls	r2, r3, #5
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	4413      	add	r3, r2
 800b12a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b134:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b138:	d13b      	bne.n	800b1b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	015a      	lsls	r2, r3, #5
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	4413      	add	r3, r2
 800b144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	683a      	ldr	r2, [r7, #0]
 800b14c:	7812      	ldrb	r2, [r2, #0]
 800b14e:	0151      	lsls	r1, r2, #5
 800b150:	693a      	ldr	r2, [r7, #16]
 800b152:	440a      	add	r2, r1
 800b154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b158:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b15c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	015a      	lsls	r2, r3, #5
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	4413      	add	r3, r2
 800b168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	7812      	ldrb	r2, [r2, #0]
 800b172:	0151      	lsls	r1, r2, #5
 800b174:	693a      	ldr	r2, [r7, #16]
 800b176:	440a      	add	r2, r1
 800b178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b17c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b180:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3301      	adds	r3, #1
 800b186:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f242 7210 	movw	r2, #10000	; 0x2710
 800b18e:	4293      	cmp	r3, r2
 800b190:	d902      	bls.n	800b198 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b192:	2301      	movs	r3, #1
 800b194:	75fb      	strb	r3, [r7, #23]
          break;
 800b196:	e00c      	b.n	800b1b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	015a      	lsls	r2, r3, #5
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1b0:	d0e7      	beq.n	800b182 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b1b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	371c      	adds	r7, #28
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b089      	sub	sp, #36	; 0x24
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	4611      	mov	r1, r2
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	71fb      	strb	r3, [r7, #7]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b1de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d123      	bne.n	800b22e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b1e6:	88bb      	ldrh	r3, [r7, #4]
 800b1e8:	3303      	adds	r3, #3
 800b1ea:	089b      	lsrs	r3, r3, #2
 800b1ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	61bb      	str	r3, [r7, #24]
 800b1f2:	e018      	b.n	800b226 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b1f4:	79fb      	ldrb	r3, [r7, #7]
 800b1f6:	031a      	lsls	r2, r3, #12
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b200:	461a      	mov	r2, r3
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	3301      	adds	r3, #1
 800b20c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	3301      	adds	r3, #1
 800b212:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	3301      	adds	r3, #1
 800b218:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	3301      	adds	r3, #1
 800b21e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	3301      	adds	r3, #1
 800b224:	61bb      	str	r3, [r7, #24]
 800b226:	69ba      	ldr	r2, [r7, #24]
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d3e2      	bcc.n	800b1f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3724      	adds	r7, #36	; 0x24
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b08b      	sub	sp, #44	; 0x2c
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	4613      	mov	r3, r2
 800b248:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b252:	88fb      	ldrh	r3, [r7, #6]
 800b254:	089b      	lsrs	r3, r3, #2
 800b256:	b29b      	uxth	r3, r3
 800b258:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b25a:	88fb      	ldrh	r3, [r7, #6]
 800b25c:	f003 0303 	and.w	r3, r3, #3
 800b260:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b262:	2300      	movs	r3, #0
 800b264:	623b      	str	r3, [r7, #32]
 800b266:	e014      	b.n	800b292 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b272:	601a      	str	r2, [r3, #0]
    pDest++;
 800b274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b276:	3301      	adds	r3, #1
 800b278:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27c:	3301      	adds	r3, #1
 800b27e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b282:	3301      	adds	r3, #1
 800b284:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b288:	3301      	adds	r3, #1
 800b28a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b28c:	6a3b      	ldr	r3, [r7, #32]
 800b28e:	3301      	adds	r3, #1
 800b290:	623b      	str	r3, [r7, #32]
 800b292:	6a3a      	ldr	r2, [r7, #32]
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	429a      	cmp	r2, r3
 800b298:	d3e6      	bcc.n	800b268 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b29a:	8bfb      	ldrh	r3, [r7, #30]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d01e      	beq.n	800b2de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	f107 0310 	add.w	r3, r7, #16
 800b2b0:	6812      	ldr	r2, [r2, #0]
 800b2b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b2b4:	693a      	ldr	r2, [r7, #16]
 800b2b6:	6a3b      	ldr	r3, [r7, #32]
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	00db      	lsls	r3, r3, #3
 800b2bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b2c0:	b2da      	uxtb	r2, r3
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c4:	701a      	strb	r2, [r3, #0]
      i++;
 800b2c6:	6a3b      	ldr	r3, [r7, #32]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	623b      	str	r3, [r7, #32]
      pDest++;
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b2d2:	8bfb      	ldrh	r3, [r7, #30]
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b2d8:	8bfb      	ldrh	r3, [r7, #30]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1ea      	bne.n	800b2b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	372c      	adds	r7, #44	; 0x2c
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	785b      	ldrb	r3, [r3, #1]
 800b304:	2b01      	cmp	r3, #1
 800b306:	d12c      	bne.n	800b362 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	015a      	lsls	r2, r3, #5
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	4413      	add	r3, r2
 800b310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	db12      	blt.n	800b340 <USB_EPSetStall+0x54>
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00f      	beq.n	800b340 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	015a      	lsls	r2, r3, #5
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	4413      	add	r3, r2
 800b328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	68ba      	ldr	r2, [r7, #8]
 800b330:	0151      	lsls	r1, r2, #5
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	440a      	add	r2, r1
 800b336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b33a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b33e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	015a      	lsls	r2, r3, #5
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	4413      	add	r3, r2
 800b348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	68ba      	ldr	r2, [r7, #8]
 800b350:	0151      	lsls	r1, r2, #5
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	440a      	add	r2, r1
 800b356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b35a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b35e:	6013      	str	r3, [r2, #0]
 800b360:	e02b      	b.n	800b3ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	015a      	lsls	r2, r3, #5
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	4413      	add	r3, r2
 800b36a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	db12      	blt.n	800b39a <USB_EPSetStall+0xae>
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d00f      	beq.n	800b39a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	015a      	lsls	r2, r3, #5
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	4413      	add	r3, r2
 800b382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	68ba      	ldr	r2, [r7, #8]
 800b38a:	0151      	lsls	r1, r2, #5
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	440a      	add	r2, r1
 800b390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b394:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b398:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	015a      	lsls	r2, r3, #5
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	68ba      	ldr	r2, [r7, #8]
 800b3aa:	0151      	lsls	r1, r2, #5
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	440a      	add	r2, r1
 800b3b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b3b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3714      	adds	r7, #20
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	785b      	ldrb	r3, [r3, #1]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d128      	bne.n	800b436 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	015a      	lsls	r2, r3, #5
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68ba      	ldr	r2, [r7, #8]
 800b3f4:	0151      	lsls	r1, r2, #5
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	440a      	add	r2, r1
 800b3fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b402:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	791b      	ldrb	r3, [r3, #4]
 800b408:	2b03      	cmp	r3, #3
 800b40a:	d003      	beq.n	800b414 <USB_EPClearStall+0x4c>
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	791b      	ldrb	r3, [r3, #4]
 800b410:	2b02      	cmp	r3, #2
 800b412:	d138      	bne.n	800b486 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	015a      	lsls	r2, r3, #5
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	4413      	add	r3, r2
 800b41c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	68ba      	ldr	r2, [r7, #8]
 800b424:	0151      	lsls	r1, r2, #5
 800b426:	68fa      	ldr	r2, [r7, #12]
 800b428:	440a      	add	r2, r1
 800b42a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b42e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b432:	6013      	str	r3, [r2, #0]
 800b434:	e027      	b.n	800b486 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	015a      	lsls	r2, r3, #5
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	4413      	add	r3, r2
 800b43e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	0151      	lsls	r1, r2, #5
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	440a      	add	r2, r1
 800b44c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b450:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b454:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	791b      	ldrb	r3, [r3, #4]
 800b45a:	2b03      	cmp	r3, #3
 800b45c:	d003      	beq.n	800b466 <USB_EPClearStall+0x9e>
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	791b      	ldrb	r3, [r3, #4]
 800b462:	2b02      	cmp	r3, #2
 800b464:	d10f      	bne.n	800b486 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	015a      	lsls	r2, r3, #5
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	4413      	add	r3, r2
 800b46e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	68ba      	ldr	r2, [r7, #8]
 800b476:	0151      	lsls	r1, r2, #5
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	440a      	add	r2, r1
 800b47c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b484:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	460b      	mov	r3, r1
 800b49e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b4b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	78fb      	ldrb	r3, [r7, #3]
 800b4c2:	011b      	lsls	r3, r3, #4
 800b4c4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b4c8:	68f9      	ldr	r1, [r7, #12]
 800b4ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b4fa:	f023 0303 	bic.w	r3, r3, #3
 800b4fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b50e:	f023 0302 	bic.w	r3, r3, #2
 800b512:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3714      	adds	r7, #20
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr

0800b522 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b522:	b480      	push	{r7}
 800b524:	b085      	sub	sp, #20
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b53c:	f023 0303 	bic.w	r3, r3, #3
 800b540:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b550:	f043 0302 	orr.w	r3, r3, #2
 800b554:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	695b      	ldr	r3, [r3, #20]
 800b570:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	699b      	ldr	r3, [r3, #24]
 800b576:	68fa      	ldr	r2, [r7, #12]
 800b578:	4013      	ands	r3, r2
 800b57a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b57c:	68fb      	ldr	r3, [r7, #12]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3714      	adds	r7, #20
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr

0800b58a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b58a:	b480      	push	{r7}
 800b58c:	b085      	sub	sp, #20
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b59c:	699b      	ldr	r3, [r3, #24]
 800b59e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5a6:	69db      	ldr	r3, [r3, #28]
 800b5a8:	68ba      	ldr	r2, [r7, #8]
 800b5aa:	4013      	ands	r3, r2
 800b5ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	0c1b      	lsrs	r3, r3, #16
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3714      	adds	r7, #20
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b5be:	b480      	push	{r7}
 800b5c0:	b085      	sub	sp, #20
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5d0:	699b      	ldr	r3, [r3, #24]
 800b5d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5da:	69db      	ldr	r3, [r3, #28]
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	4013      	ands	r3, r2
 800b5e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	b29b      	uxth	r3, r3
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3714      	adds	r7, #20
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr

0800b5f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b5f2:	b480      	push	{r7}
 800b5f4:	b085      	sub	sp, #20
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b602:	78fb      	ldrb	r3, [r7, #3]
 800b604:	015a      	lsls	r2, r3, #5
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	4413      	add	r3, r2
 800b60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b618:	695b      	ldr	r3, [r3, #20]
 800b61a:	68ba      	ldr	r2, [r7, #8]
 800b61c:	4013      	ands	r3, r2
 800b61e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b620:	68bb      	ldr	r3, [r7, #8]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3714      	adds	r7, #20
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr

0800b62e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b62e:	b480      	push	{r7}
 800b630:	b087      	sub	sp, #28
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
 800b636:	460b      	mov	r3, r1
 800b638:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b650:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b652:	78fb      	ldrb	r3, [r7, #3]
 800b654:	f003 030f 	and.w	r3, r3, #15
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	fa22 f303 	lsr.w	r3, r2, r3
 800b65e:	01db      	lsls	r3, r3, #7
 800b660:	b2db      	uxtb	r3, r3
 800b662:	693a      	ldr	r2, [r7, #16]
 800b664:	4313      	orrs	r3, r2
 800b666:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b668:	78fb      	ldrb	r3, [r7, #3]
 800b66a:	015a      	lsls	r2, r3, #5
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	4413      	add	r3, r2
 800b670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	693a      	ldr	r2, [r7, #16]
 800b678:	4013      	ands	r3, r2
 800b67a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b67c:	68bb      	ldr	r3, [r7, #8]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	371c      	adds	r7, #28
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr

0800b68a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b68a:	b480      	push	{r7}
 800b68c:	b083      	sub	sp, #12
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	f003 0301 	and.w	r3, r3, #1
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr

0800b6a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b6a6:	b480      	push	{r7}
 800b6a8:	b085      	sub	sp, #20
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b6c4:	f023 0307 	bic.w	r3, r3, #7
 800b6c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3714      	adds	r7, #20
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr

0800b6ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b087      	sub	sp, #28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	607a      	str	r2, [r7, #4]
 800b6f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	333c      	adds	r3, #60	; 0x3c
 800b702:	3304      	adds	r3, #4
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	4a26      	ldr	r2, [pc, #152]	; (800b7a4 <USB_EP0_OutStart+0xb8>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d90a      	bls.n	800b726 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b71c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b720:	d101      	bne.n	800b726 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b722:	2300      	movs	r3, #0
 800b724:	e037      	b.n	800b796 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b72c:	461a      	mov	r2, r3
 800b72e:	2300      	movs	r3, #0
 800b730:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b738:	691b      	ldr	r3, [r3, #16]
 800b73a:	697a      	ldr	r2, [r7, #20]
 800b73c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b740:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b744:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b74c:	691b      	ldr	r3, [r3, #16]
 800b74e:	697a      	ldr	r2, [r7, #20]
 800b750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b754:	f043 0318 	orr.w	r3, r3, #24
 800b758:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	697a      	ldr	r2, [r7, #20]
 800b764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b768:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b76c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b76e:	7afb      	ldrb	r3, [r7, #11]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d10f      	bne.n	800b794 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b77a:	461a      	mov	r2, r3
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	697a      	ldr	r2, [r7, #20]
 800b78a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b78e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b792:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b794:	2300      	movs	r3, #0
}
 800b796:	4618      	mov	r0, r3
 800b798:	371c      	adds	r7, #28
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	4f54300a 	.word	0x4f54300a

0800b7a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	4a13      	ldr	r2, [pc, #76]	; (800b80c <USB_CoreReset+0x64>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d901      	bls.n	800b7c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b7c2:	2303      	movs	r3, #3
 800b7c4:	e01b      	b.n	800b7fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	691b      	ldr	r3, [r3, #16]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	daf2      	bge.n	800b7b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	691b      	ldr	r3, [r3, #16]
 800b7d6:	f043 0201 	orr.w	r2, r3, #1
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	4a09      	ldr	r2, [pc, #36]	; (800b80c <USB_CoreReset+0x64>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d901      	bls.n	800b7f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b7ec:	2303      	movs	r3, #3
 800b7ee:	e006      	b.n	800b7fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	691b      	ldr	r3, [r3, #16]
 800b7f4:	f003 0301 	and.w	r3, r3, #1
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d0f0      	beq.n	800b7de <USB_CoreReset+0x36>

  return HAL_OK;
 800b7fc:	2300      	movs	r3, #0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3714      	adds	r7, #20
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr
 800b80a:	bf00      	nop
 800b80c:	00030d40 	.word	0x00030d40

0800b810 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	460b      	mov	r3, r1
 800b81a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b81c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b820:	f005 fbe2 	bl	8010fe8 <USBD_static_malloc>
 800b824:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d109      	bne.n	800b840 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	32b0      	adds	r2, #176	; 0xb0
 800b836:	2100      	movs	r1, #0
 800b838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b83c:	2302      	movs	r3, #2
 800b83e:	e0d4      	b.n	800b9ea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b840:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b844:	2100      	movs	r1, #0
 800b846:	68f8      	ldr	r0, [r7, #12]
 800b848:	f005 fc66 	bl	8011118 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	32b0      	adds	r2, #176	; 0xb0
 800b856:	68f9      	ldr	r1, [r7, #12]
 800b858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	32b0      	adds	r2, #176	; 0xb0
 800b866:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	7c1b      	ldrb	r3, [r3, #16]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d138      	bne.n	800b8ea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b878:	4b5e      	ldr	r3, [pc, #376]	; (800b9f4 <USBD_CDC_Init+0x1e4>)
 800b87a:	7819      	ldrb	r1, [r3, #0]
 800b87c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b880:	2202      	movs	r2, #2
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f005 fa8d 	bl	8010da2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b888:	4b5a      	ldr	r3, [pc, #360]	; (800b9f4 <USBD_CDC_Init+0x1e4>)
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	f003 020f 	and.w	r2, r3, #15
 800b890:	6879      	ldr	r1, [r7, #4]
 800b892:	4613      	mov	r3, r2
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	4413      	add	r3, r2
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	440b      	add	r3, r1
 800b89c:	3324      	adds	r3, #36	; 0x24
 800b89e:	2201      	movs	r2, #1
 800b8a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b8a2:	4b55      	ldr	r3, [pc, #340]	; (800b9f8 <USBD_CDC_Init+0x1e8>)
 800b8a4:	7819      	ldrb	r1, [r3, #0]
 800b8a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8aa:	2202      	movs	r2, #2
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f005 fa78 	bl	8010da2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b8b2:	4b51      	ldr	r3, [pc, #324]	; (800b9f8 <USBD_CDC_Init+0x1e8>)
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	f003 020f 	and.w	r2, r3, #15
 800b8ba:	6879      	ldr	r1, [r7, #4]
 800b8bc:	4613      	mov	r3, r2
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	4413      	add	r3, r2
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	440b      	add	r3, r1
 800b8c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b8ce:	4b4b      	ldr	r3, [pc, #300]	; (800b9fc <USBD_CDC_Init+0x1ec>)
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	f003 020f 	and.w	r2, r3, #15
 800b8d6:	6879      	ldr	r1, [r7, #4]
 800b8d8:	4613      	mov	r3, r2
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	4413      	add	r3, r2
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	440b      	add	r3, r1
 800b8e2:	3326      	adds	r3, #38	; 0x26
 800b8e4:	2210      	movs	r2, #16
 800b8e6:	801a      	strh	r2, [r3, #0]
 800b8e8:	e035      	b.n	800b956 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b8ea:	4b42      	ldr	r3, [pc, #264]	; (800b9f4 <USBD_CDC_Init+0x1e4>)
 800b8ec:	7819      	ldrb	r1, [r3, #0]
 800b8ee:	2340      	movs	r3, #64	; 0x40
 800b8f0:	2202      	movs	r2, #2
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f005 fa55 	bl	8010da2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b8f8:	4b3e      	ldr	r3, [pc, #248]	; (800b9f4 <USBD_CDC_Init+0x1e4>)
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	f003 020f 	and.w	r2, r3, #15
 800b900:	6879      	ldr	r1, [r7, #4]
 800b902:	4613      	mov	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4413      	add	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	440b      	add	r3, r1
 800b90c:	3324      	adds	r3, #36	; 0x24
 800b90e:	2201      	movs	r2, #1
 800b910:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b912:	4b39      	ldr	r3, [pc, #228]	; (800b9f8 <USBD_CDC_Init+0x1e8>)
 800b914:	7819      	ldrb	r1, [r3, #0]
 800b916:	2340      	movs	r3, #64	; 0x40
 800b918:	2202      	movs	r2, #2
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f005 fa41 	bl	8010da2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b920:	4b35      	ldr	r3, [pc, #212]	; (800b9f8 <USBD_CDC_Init+0x1e8>)
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	f003 020f 	and.w	r2, r3, #15
 800b928:	6879      	ldr	r1, [r7, #4]
 800b92a:	4613      	mov	r3, r2
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	4413      	add	r3, r2
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	440b      	add	r3, r1
 800b934:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b938:	2201      	movs	r2, #1
 800b93a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b93c:	4b2f      	ldr	r3, [pc, #188]	; (800b9fc <USBD_CDC_Init+0x1ec>)
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	f003 020f 	and.w	r2, r3, #15
 800b944:	6879      	ldr	r1, [r7, #4]
 800b946:	4613      	mov	r3, r2
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	4413      	add	r3, r2
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	440b      	add	r3, r1
 800b950:	3326      	adds	r3, #38	; 0x26
 800b952:	2210      	movs	r2, #16
 800b954:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b956:	4b29      	ldr	r3, [pc, #164]	; (800b9fc <USBD_CDC_Init+0x1ec>)
 800b958:	7819      	ldrb	r1, [r3, #0]
 800b95a:	2308      	movs	r3, #8
 800b95c:	2203      	movs	r2, #3
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f005 fa1f 	bl	8010da2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b964:	4b25      	ldr	r3, [pc, #148]	; (800b9fc <USBD_CDC_Init+0x1ec>)
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	f003 020f 	and.w	r2, r3, #15
 800b96c:	6879      	ldr	r1, [r7, #4]
 800b96e:	4613      	mov	r3, r2
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	4413      	add	r3, r2
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	440b      	add	r3, r1
 800b978:	3324      	adds	r3, #36	; 0x24
 800b97a:	2201      	movs	r2, #1
 800b97c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2200      	movs	r2, #0
 800b982:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	33b0      	adds	r3, #176	; 0xb0
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	4413      	add	r3, r2
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d101      	bne.n	800b9b8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	e018      	b.n	800b9ea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	7c1b      	ldrb	r3, [r3, #16]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10a      	bne.n	800b9d6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b9c0:	4b0d      	ldr	r3, [pc, #52]	; (800b9f8 <USBD_CDC_Init+0x1e8>)
 800b9c2:	7819      	ldrb	r1, [r3, #0]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f005 fad6 	bl	8010f80 <USBD_LL_PrepareReceive>
 800b9d4:	e008      	b.n	800b9e8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b9d6:	4b08      	ldr	r3, [pc, #32]	; (800b9f8 <USBD_CDC_Init+0x1e8>)
 800b9d8:	7819      	ldrb	r1, [r3, #0]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9e0:	2340      	movs	r3, #64	; 0x40
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f005 facc 	bl	8010f80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	2000066b 	.word	0x2000066b
 800b9f8:	2000066c 	.word	0x2000066c
 800b9fc:	2000066d 	.word	0x2000066d

0800ba00 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ba0c:	4b3a      	ldr	r3, [pc, #232]	; (800baf8 <USBD_CDC_DeInit+0xf8>)
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	4619      	mov	r1, r3
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f005 f9eb 	bl	8010dee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ba18:	4b37      	ldr	r3, [pc, #220]	; (800baf8 <USBD_CDC_DeInit+0xf8>)
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	f003 020f 	and.w	r2, r3, #15
 800ba20:	6879      	ldr	r1, [r7, #4]
 800ba22:	4613      	mov	r3, r2
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	4413      	add	r3, r2
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	440b      	add	r3, r1
 800ba2c:	3324      	adds	r3, #36	; 0x24
 800ba2e:	2200      	movs	r2, #0
 800ba30:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ba32:	4b32      	ldr	r3, [pc, #200]	; (800bafc <USBD_CDC_DeInit+0xfc>)
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	4619      	mov	r1, r3
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f005 f9d8 	bl	8010dee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ba3e:	4b2f      	ldr	r3, [pc, #188]	; (800bafc <USBD_CDC_DeInit+0xfc>)
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	f003 020f 	and.w	r2, r3, #15
 800ba46:	6879      	ldr	r1, [r7, #4]
 800ba48:	4613      	mov	r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	4413      	add	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	440b      	add	r3, r1
 800ba52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ba56:	2200      	movs	r2, #0
 800ba58:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ba5a:	4b29      	ldr	r3, [pc, #164]	; (800bb00 <USBD_CDC_DeInit+0x100>)
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	4619      	mov	r1, r3
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f005 f9c4 	bl	8010dee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ba66:	4b26      	ldr	r3, [pc, #152]	; (800bb00 <USBD_CDC_DeInit+0x100>)
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	f003 020f 	and.w	r2, r3, #15
 800ba6e:	6879      	ldr	r1, [r7, #4]
 800ba70:	4613      	mov	r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4413      	add	r3, r2
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	440b      	add	r3, r1
 800ba7a:	3324      	adds	r3, #36	; 0x24
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ba80:	4b1f      	ldr	r3, [pc, #124]	; (800bb00 <USBD_CDC_DeInit+0x100>)
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	f003 020f 	and.w	r2, r3, #15
 800ba88:	6879      	ldr	r1, [r7, #4]
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	4413      	add	r3, r2
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	440b      	add	r3, r1
 800ba94:	3326      	adds	r3, #38	; 0x26
 800ba96:	2200      	movs	r2, #0
 800ba98:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	32b0      	adds	r2, #176	; 0xb0
 800baa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d01f      	beq.n	800baec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	33b0      	adds	r3, #176	; 0xb0
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4413      	add	r3, r2
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	32b0      	adds	r2, #176	; 0xb0
 800baca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bace:	4618      	mov	r0, r3
 800bad0:	f005 fa98 	bl	8011004 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	32b0      	adds	r2, #176	; 0xb0
 800bade:	2100      	movs	r1, #0
 800bae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3708      	adds	r7, #8
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	2000066b 	.word	0x2000066b
 800bafc:	2000066c 	.word	0x2000066c
 800bb00:	2000066d 	.word	0x2000066d

0800bb04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b086      	sub	sp, #24
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	32b0      	adds	r2, #176	; 0xb0
 800bb18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb1c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bb22:	2300      	movs	r3, #0
 800bb24:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb26:	2300      	movs	r3, #0
 800bb28:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d101      	bne.n	800bb34 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bb30:	2303      	movs	r3, #3
 800bb32:	e0bf      	b.n	800bcb4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d050      	beq.n	800bbe2 <USBD_CDC_Setup+0xde>
 800bb40:	2b20      	cmp	r3, #32
 800bb42:	f040 80af 	bne.w	800bca4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	88db      	ldrh	r3, [r3, #6]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d03a      	beq.n	800bbc4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	b25b      	sxtb	r3, r3
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	da1b      	bge.n	800bb90 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	33b0      	adds	r3, #176	; 0xb0
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	4413      	add	r3, r2
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	683a      	ldr	r2, [r7, #0]
 800bb6c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bb6e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bb70:	683a      	ldr	r2, [r7, #0]
 800bb72:	88d2      	ldrh	r2, [r2, #6]
 800bb74:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	88db      	ldrh	r3, [r3, #6]
 800bb7a:	2b07      	cmp	r3, #7
 800bb7c:	bf28      	it	cs
 800bb7e:	2307      	movcs	r3, #7
 800bb80:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	89fa      	ldrh	r2, [r7, #14]
 800bb86:	4619      	mov	r1, r3
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f001 fd89 	bl	800d6a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bb8e:	e090      	b.n	800bcb2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	785a      	ldrb	r2, [r3, #1]
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	88db      	ldrh	r3, [r3, #6]
 800bb9e:	2b3f      	cmp	r3, #63	; 0x3f
 800bba0:	d803      	bhi.n	800bbaa <USBD_CDC_Setup+0xa6>
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	88db      	ldrh	r3, [r3, #6]
 800bba6:	b2da      	uxtb	r2, r3
 800bba8:	e000      	b.n	800bbac <USBD_CDC_Setup+0xa8>
 800bbaa:	2240      	movs	r2, #64	; 0x40
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bbb2:	6939      	ldr	r1, [r7, #16]
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bbba:	461a      	mov	r2, r3
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f001 fd9b 	bl	800d6f8 <USBD_CtlPrepareRx>
      break;
 800bbc2:	e076      	b.n	800bcb2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	33b0      	adds	r3, #176	; 0xb0
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	4413      	add	r3, r2
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	683a      	ldr	r2, [r7, #0]
 800bbd8:	7850      	ldrb	r0, [r2, #1]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	6839      	ldr	r1, [r7, #0]
 800bbde:	4798      	blx	r3
      break;
 800bbe0:	e067      	b.n	800bcb2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	785b      	ldrb	r3, [r3, #1]
 800bbe6:	2b0b      	cmp	r3, #11
 800bbe8:	d851      	bhi.n	800bc8e <USBD_CDC_Setup+0x18a>
 800bbea:	a201      	add	r2, pc, #4	; (adr r2, 800bbf0 <USBD_CDC_Setup+0xec>)
 800bbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf0:	0800bc21 	.word	0x0800bc21
 800bbf4:	0800bc9d 	.word	0x0800bc9d
 800bbf8:	0800bc8f 	.word	0x0800bc8f
 800bbfc:	0800bc8f 	.word	0x0800bc8f
 800bc00:	0800bc8f 	.word	0x0800bc8f
 800bc04:	0800bc8f 	.word	0x0800bc8f
 800bc08:	0800bc8f 	.word	0x0800bc8f
 800bc0c:	0800bc8f 	.word	0x0800bc8f
 800bc10:	0800bc8f 	.word	0x0800bc8f
 800bc14:	0800bc8f 	.word	0x0800bc8f
 800bc18:	0800bc4b 	.word	0x0800bc4b
 800bc1c:	0800bc75 	.word	0x0800bc75
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	2b03      	cmp	r3, #3
 800bc2a:	d107      	bne.n	800bc3c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bc2c:	f107 030a 	add.w	r3, r7, #10
 800bc30:	2202      	movs	r2, #2
 800bc32:	4619      	mov	r1, r3
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f001 fd33 	bl	800d6a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc3a:	e032      	b.n	800bca2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bc3c:	6839      	ldr	r1, [r7, #0]
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f001 fcbd 	bl	800d5be <USBD_CtlError>
            ret = USBD_FAIL;
 800bc44:	2303      	movs	r3, #3
 800bc46:	75fb      	strb	r3, [r7, #23]
          break;
 800bc48:	e02b      	b.n	800bca2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	2b03      	cmp	r3, #3
 800bc54:	d107      	bne.n	800bc66 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bc56:	f107 030d 	add.w	r3, r7, #13
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f001 fd1e 	bl	800d6a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc64:	e01d      	b.n	800bca2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bc66:	6839      	ldr	r1, [r7, #0]
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f001 fca8 	bl	800d5be <USBD_CtlError>
            ret = USBD_FAIL;
 800bc6e:	2303      	movs	r3, #3
 800bc70:	75fb      	strb	r3, [r7, #23]
          break;
 800bc72:	e016      	b.n	800bca2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	2b03      	cmp	r3, #3
 800bc7e:	d00f      	beq.n	800bca0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bc80:	6839      	ldr	r1, [r7, #0]
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f001 fc9b 	bl	800d5be <USBD_CtlError>
            ret = USBD_FAIL;
 800bc88:	2303      	movs	r3, #3
 800bc8a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bc8c:	e008      	b.n	800bca0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bc8e:	6839      	ldr	r1, [r7, #0]
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f001 fc94 	bl	800d5be <USBD_CtlError>
          ret = USBD_FAIL;
 800bc96:	2303      	movs	r3, #3
 800bc98:	75fb      	strb	r3, [r7, #23]
          break;
 800bc9a:	e002      	b.n	800bca2 <USBD_CDC_Setup+0x19e>
          break;
 800bc9c:	bf00      	nop
 800bc9e:	e008      	b.n	800bcb2 <USBD_CDC_Setup+0x1ae>
          break;
 800bca0:	bf00      	nop
      }
      break;
 800bca2:	e006      	b.n	800bcb2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bca4:	6839      	ldr	r1, [r7, #0]
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f001 fc89 	bl	800d5be <USBD_CtlError>
      ret = USBD_FAIL;
 800bcac:	2303      	movs	r3, #3
 800bcae:	75fb      	strb	r3, [r7, #23]
      break;
 800bcb0:	bf00      	nop
  }

  return (uint8_t)ret;
 800bcb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3718      	adds	r7, #24
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bcce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	32b0      	adds	r2, #176	; 0xb0
 800bcda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d101      	bne.n	800bce6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bce2:	2303      	movs	r3, #3
 800bce4:	e065      	b.n	800bdb2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	32b0      	adds	r2, #176	; 0xb0
 800bcf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bcf6:	78fb      	ldrb	r3, [r7, #3]
 800bcf8:	f003 020f 	and.w	r2, r3, #15
 800bcfc:	6879      	ldr	r1, [r7, #4]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4413      	add	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	440b      	add	r3, r1
 800bd08:	3318      	adds	r3, #24
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d02f      	beq.n	800bd70 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bd10:	78fb      	ldrb	r3, [r7, #3]
 800bd12:	f003 020f 	and.w	r2, r3, #15
 800bd16:	6879      	ldr	r1, [r7, #4]
 800bd18:	4613      	mov	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	4413      	add	r3, r2
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	440b      	add	r3, r1
 800bd22:	3318      	adds	r3, #24
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	78fb      	ldrb	r3, [r7, #3]
 800bd28:	f003 010f 	and.w	r1, r3, #15
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	460b      	mov	r3, r1
 800bd30:	00db      	lsls	r3, r3, #3
 800bd32:	440b      	add	r3, r1
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4403      	add	r3, r0
 800bd38:	3348      	adds	r3, #72	; 0x48
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	fbb2 f1f3 	udiv	r1, r2, r3
 800bd40:	fb01 f303 	mul.w	r3, r1, r3
 800bd44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d112      	bne.n	800bd70 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bd4a:	78fb      	ldrb	r3, [r7, #3]
 800bd4c:	f003 020f 	and.w	r2, r3, #15
 800bd50:	6879      	ldr	r1, [r7, #4]
 800bd52:	4613      	mov	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4413      	add	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	440b      	add	r3, r1
 800bd5c:	3318      	adds	r3, #24
 800bd5e:	2200      	movs	r2, #0
 800bd60:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bd62:	78f9      	ldrb	r1, [r7, #3]
 800bd64:	2300      	movs	r3, #0
 800bd66:	2200      	movs	r2, #0
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f005 f8e8 	bl	8010f3e <USBD_LL_Transmit>
 800bd6e:	e01f      	b.n	800bdb0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2200      	movs	r2, #0
 800bd74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	33b0      	adds	r3, #176	; 0xb0
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	4413      	add	r3, r2
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d010      	beq.n	800bdb0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	33b0      	adds	r3, #176	; 0xb0
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	4413      	add	r3, r2
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	691b      	ldr	r3, [r3, #16]
 800bda0:	68ba      	ldr	r2, [r7, #8]
 800bda2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bda6:	68ba      	ldr	r2, [r7, #8]
 800bda8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bdac:	78fa      	ldrb	r2, [r7, #3]
 800bdae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3710      	adds	r7, #16
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b084      	sub	sp, #16
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	32b0      	adds	r2, #176	; 0xb0
 800bdd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdd4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	32b0      	adds	r2, #176	; 0xb0
 800bde0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d101      	bne.n	800bdec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bde8:	2303      	movs	r3, #3
 800bdea:	e01a      	b.n	800be22 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bdec:	78fb      	ldrb	r3, [r7, #3]
 800bdee:	4619      	mov	r1, r3
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f005 f8e6 	bl	8010fc2 <USBD_LL_GetRxDataSize>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	33b0      	adds	r3, #176	; 0xb0
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	4413      	add	r3, r2
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800be16:	68fa      	ldr	r2, [r7, #12]
 800be18:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800be1c:	4611      	mov	r1, r2
 800be1e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3710      	adds	r7, #16
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b084      	sub	sp, #16
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	32b0      	adds	r2, #176	; 0xb0
 800be3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d101      	bne.n	800be4c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800be48:	2303      	movs	r3, #3
 800be4a:	e025      	b.n	800be98 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	33b0      	adds	r3, #176	; 0xb0
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4413      	add	r3, r2
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d01a      	beq.n	800be96 <USBD_CDC_EP0_RxReady+0x6c>
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800be66:	2bff      	cmp	r3, #255	; 0xff
 800be68:	d015      	beq.n	800be96 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	33b0      	adds	r3, #176	; 0xb0
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	4413      	add	r3, r2
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800be82:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800be8a:	b292      	uxth	r2, r2
 800be8c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	22ff      	movs	r2, #255	; 0xff
 800be92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b086      	sub	sp, #24
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bea8:	2182      	movs	r1, #130	; 0x82
 800beaa:	4818      	ldr	r0, [pc, #96]	; (800bf0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800beac:	f000 fd4f 	bl	800c94e <USBD_GetEpDesc>
 800beb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800beb2:	2101      	movs	r1, #1
 800beb4:	4815      	ldr	r0, [pc, #84]	; (800bf0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800beb6:	f000 fd4a 	bl	800c94e <USBD_GetEpDesc>
 800beba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bebc:	2181      	movs	r1, #129	; 0x81
 800bebe:	4813      	ldr	r0, [pc, #76]	; (800bf0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bec0:	f000 fd45 	bl	800c94e <USBD_GetEpDesc>
 800bec4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d002      	beq.n	800bed2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	2210      	movs	r2, #16
 800bed0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d006      	beq.n	800bee6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	2200      	movs	r2, #0
 800bedc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bee0:	711a      	strb	r2, [r3, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d006      	beq.n	800befa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bef4:	711a      	strb	r2, [r3, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2243      	movs	r2, #67	; 0x43
 800befe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bf00:	4b02      	ldr	r3, [pc, #8]	; (800bf0c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3718      	adds	r7, #24
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	20000628 	.word	0x20000628

0800bf10 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b086      	sub	sp, #24
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bf18:	2182      	movs	r1, #130	; 0x82
 800bf1a:	4818      	ldr	r0, [pc, #96]	; (800bf7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bf1c:	f000 fd17 	bl	800c94e <USBD_GetEpDesc>
 800bf20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bf22:	2101      	movs	r1, #1
 800bf24:	4815      	ldr	r0, [pc, #84]	; (800bf7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bf26:	f000 fd12 	bl	800c94e <USBD_GetEpDesc>
 800bf2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bf2c:	2181      	movs	r1, #129	; 0x81
 800bf2e:	4813      	ldr	r0, [pc, #76]	; (800bf7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bf30:	f000 fd0d 	bl	800c94e <USBD_GetEpDesc>
 800bf34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d002      	beq.n	800bf42 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	2210      	movs	r2, #16
 800bf40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d006      	beq.n	800bf56 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	711a      	strb	r2, [r3, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f042 0202 	orr.w	r2, r2, #2
 800bf54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d006      	beq.n	800bf6a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	711a      	strb	r2, [r3, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f042 0202 	orr.w	r2, r2, #2
 800bf68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2243      	movs	r2, #67	; 0x43
 800bf6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bf70:	4b02      	ldr	r3, [pc, #8]	; (800bf7c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3718      	adds	r7, #24
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	20000628 	.word	0x20000628

0800bf80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bf88:	2182      	movs	r1, #130	; 0x82
 800bf8a:	4818      	ldr	r0, [pc, #96]	; (800bfec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bf8c:	f000 fcdf 	bl	800c94e <USBD_GetEpDesc>
 800bf90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bf92:	2101      	movs	r1, #1
 800bf94:	4815      	ldr	r0, [pc, #84]	; (800bfec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bf96:	f000 fcda 	bl	800c94e <USBD_GetEpDesc>
 800bf9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bf9c:	2181      	movs	r1, #129	; 0x81
 800bf9e:	4813      	ldr	r0, [pc, #76]	; (800bfec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bfa0:	f000 fcd5 	bl	800c94e <USBD_GetEpDesc>
 800bfa4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d002      	beq.n	800bfb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	2210      	movs	r2, #16
 800bfb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d006      	beq.n	800bfc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfc0:	711a      	strb	r2, [r3, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d006      	beq.n	800bfda <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfd4:	711a      	strb	r2, [r3, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2243      	movs	r2, #67	; 0x43
 800bfde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bfe0:	4b02      	ldr	r3, [pc, #8]	; (800bfec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3718      	adds	r7, #24
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	20000628 	.word	0x20000628

0800bff0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b083      	sub	sp, #12
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	220a      	movs	r2, #10
 800bffc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bffe:	4b03      	ldr	r3, [pc, #12]	; (800c00c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c000:	4618      	mov	r0, r3
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr
 800c00c:	200005e4 	.word	0x200005e4

0800c010 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d101      	bne.n	800c024 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c020:	2303      	movs	r3, #3
 800c022:	e009      	b.n	800c038 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	33b0      	adds	r3, #176	; 0xb0
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	4413      	add	r3, r2
 800c032:	683a      	ldr	r2, [r7, #0]
 800c034:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c036:	2300      	movs	r3, #0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	370c      	adds	r7, #12
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c044:	b480      	push	{r7}
 800c046:	b087      	sub	sp, #28
 800c048:	af00      	add	r7, sp, #0
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	60b9      	str	r1, [r7, #8]
 800c04e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	32b0      	adds	r2, #176	; 0xb0
 800c05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c05e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d101      	bne.n	800c06a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c066:	2303      	movs	r3, #3
 800c068:	e008      	b.n	800c07c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c07a:	2300      	movs	r3, #0
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	371c      	adds	r7, #28
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr

0800c088 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	32b0      	adds	r2, #176	; 0xb0
 800c09c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d101      	bne.n	800c0ac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c0a8:	2303      	movs	r3, #3
 800c0aa:	e004      	b.n	800c0b6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	683a      	ldr	r2, [r7, #0]
 800c0b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c0b4:	2300      	movs	r3, #0
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3714      	adds	r7, #20
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr
	...

0800c0c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	32b0      	adds	r2, #176	; 0xb0
 800c0d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0da:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	32b0      	adds	r2, #176	; 0xb0
 800c0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d101      	bne.n	800c0f6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c0f2:	2303      	movs	r3, #3
 800c0f4:	e025      	b.n	800c142 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d11f      	bne.n	800c140 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	2201      	movs	r2, #1
 800c104:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c108:	4b10      	ldr	r3, [pc, #64]	; (800c14c <USBD_CDC_TransmitPacket+0x88>)
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	f003 020f 	and.w	r2, r3, #15
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	4613      	mov	r3, r2
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	4413      	add	r3, r2
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	4403      	add	r3, r0
 800c122:	3318      	adds	r3, #24
 800c124:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c126:	4b09      	ldr	r3, [pc, #36]	; (800c14c <USBD_CDC_TransmitPacket+0x88>)
 800c128:	7819      	ldrb	r1, [r3, #0]
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f004 ff01 	bl	8010f3e <USBD_LL_Transmit>

    ret = USBD_OK;
 800c13c:	2300      	movs	r3, #0
 800c13e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c140:	7bfb      	ldrb	r3, [r7, #15]
}
 800c142:	4618      	mov	r0, r3
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	2000066b 	.word	0x2000066b

0800c150 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	32b0      	adds	r2, #176	; 0xb0
 800c162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c166:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	32b0      	adds	r2, #176	; 0xb0
 800c172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d101      	bne.n	800c17e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c17a:	2303      	movs	r3, #3
 800c17c:	e018      	b.n	800c1b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	7c1b      	ldrb	r3, [r3, #16]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10a      	bne.n	800c19c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c186:	4b0c      	ldr	r3, [pc, #48]	; (800c1b8 <USBD_CDC_ReceivePacket+0x68>)
 800c188:	7819      	ldrb	r1, [r3, #0]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c190:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f004 fef3 	bl	8010f80 <USBD_LL_PrepareReceive>
 800c19a:	e008      	b.n	800c1ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c19c:	4b06      	ldr	r3, [pc, #24]	; (800c1b8 <USBD_CDC_ReceivePacket+0x68>)
 800c19e:	7819      	ldrb	r1, [r3, #0]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c1a6:	2340      	movs	r3, #64	; 0x40
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f004 fee9 	bl	8010f80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c1ae:	2300      	movs	r3, #0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3710      	adds	r7, #16
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	2000066c 	.word	0x2000066c

0800c1bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b086      	sub	sp, #24
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d101      	bne.n	800c1d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c1d0:	2303      	movs	r3, #3
 800c1d2:	e01f      	b.n	800c214 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d003      	beq.n	800c1fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	68ba      	ldr	r2, [r7, #8]
 800c1f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	79fa      	ldrb	r2, [r7, #7]
 800c206:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c208:	68f8      	ldr	r0, [r7, #12]
 800c20a:	f004 fd63 	bl	8010cd4 <USBD_LL_Init>
 800c20e:	4603      	mov	r3, r0
 800c210:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c212:	7dfb      	ldrb	r3, [r7, #23]
}
 800c214:	4618      	mov	r0, r3
 800c216:	3718      	adds	r7, #24
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c226:	2300      	movs	r3, #0
 800c228:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d101      	bne.n	800c234 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c230:	2303      	movs	r3, #3
 800c232:	e025      	b.n	800c280 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	32ae      	adds	r2, #174	; 0xae
 800c246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00f      	beq.n	800c270 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	32ae      	adds	r2, #174	; 0xae
 800c25a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c260:	f107 020e 	add.w	r2, r7, #14
 800c264:	4610      	mov	r0, r2
 800c266:	4798      	blx	r3
 800c268:	4602      	mov	r2, r0
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c276:	1c5a      	adds	r2, r3, #1
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	4618      	mov	r0, r3
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f004 fd6b 	bl	8010d6c <USBD_LL_Start>
 800c296:	4603      	mov	r3, r0
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3708      	adds	r7, #8
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b083      	sub	sp, #12
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c2a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	370c      	adds	r7, #12
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr

0800c2b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b084      	sub	sp, #16
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
 800c2be:	460b      	mov	r3, r1
 800c2c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d009      	beq.n	800c2e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	78fa      	ldrb	r2, [r7, #3]
 800c2da:	4611      	mov	r1, r2
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	4798      	blx	r3
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3710      	adds	r7, #16
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}

0800c2ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c2ee:	b580      	push	{r7, lr}
 800c2f0:	b084      	sub	sp, #16
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	78fa      	ldrb	r2, [r7, #3]
 800c308:	4611      	mov	r1, r2
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	4798      	blx	r3
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d001      	beq.n	800c318 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c314:	2303      	movs	r3, #3
 800c316:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c318:	7bfb      	ldrb	r3, [r7, #15]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c322:	b580      	push	{r7, lr}
 800c324:	b084      	sub	sp, #16
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
 800c32a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c332:	6839      	ldr	r1, [r7, #0]
 800c334:	4618      	mov	r0, r3
 800c336:	f001 f908 	bl	800d54a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2201      	movs	r2, #1
 800c33e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c348:	461a      	mov	r2, r3
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c356:	f003 031f 	and.w	r3, r3, #31
 800c35a:	2b02      	cmp	r3, #2
 800c35c:	d01a      	beq.n	800c394 <USBD_LL_SetupStage+0x72>
 800c35e:	2b02      	cmp	r3, #2
 800c360:	d822      	bhi.n	800c3a8 <USBD_LL_SetupStage+0x86>
 800c362:	2b00      	cmp	r3, #0
 800c364:	d002      	beq.n	800c36c <USBD_LL_SetupStage+0x4a>
 800c366:	2b01      	cmp	r3, #1
 800c368:	d00a      	beq.n	800c380 <USBD_LL_SetupStage+0x5e>
 800c36a:	e01d      	b.n	800c3a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c372:	4619      	mov	r1, r3
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 fb5f 	bl	800ca38 <USBD_StdDevReq>
 800c37a:	4603      	mov	r3, r0
 800c37c:	73fb      	strb	r3, [r7, #15]
      break;
 800c37e:	e020      	b.n	800c3c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c386:	4619      	mov	r1, r3
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 fbc7 	bl	800cb1c <USBD_StdItfReq>
 800c38e:	4603      	mov	r3, r0
 800c390:	73fb      	strb	r3, [r7, #15]
      break;
 800c392:	e016      	b.n	800c3c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c39a:	4619      	mov	r1, r3
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 fc29 	bl	800cbf4 <USBD_StdEPReq>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	73fb      	strb	r3, [r7, #15]
      break;
 800c3a6:	e00c      	b.n	800c3c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c3ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f004 fd38 	bl	8010e2c <USBD_LL_StallEP>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	73fb      	strb	r3, [r7, #15]
      break;
 800c3c0:	bf00      	nop
  }

  return ret;
 800c3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3710      	adds	r7, #16
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b086      	sub	sp, #24
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	607a      	str	r2, [r7, #4]
 800c3d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c3de:	7afb      	ldrb	r3, [r7, #11]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d16e      	bne.n	800c4c2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c3ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c3f2:	2b03      	cmp	r3, #3
 800c3f4:	f040 8098 	bne.w	800c528 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	689a      	ldr	r2, [r3, #8]
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	429a      	cmp	r2, r3
 800c402:	d913      	bls.n	800c42c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	689a      	ldr	r2, [r3, #8]
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	68db      	ldr	r3, [r3, #12]
 800c40c:	1ad2      	subs	r2, r2, r3
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	68da      	ldr	r2, [r3, #12]
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	4293      	cmp	r3, r2
 800c41c:	bf28      	it	cs
 800c41e:	4613      	movcs	r3, r2
 800c420:	461a      	mov	r2, r3
 800c422:	6879      	ldr	r1, [r7, #4]
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	f001 f984 	bl	800d732 <USBD_CtlContinueRx>
 800c42a:	e07d      	b.n	800c528 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c432:	f003 031f 	and.w	r3, r3, #31
 800c436:	2b02      	cmp	r3, #2
 800c438:	d014      	beq.n	800c464 <USBD_LL_DataOutStage+0x98>
 800c43a:	2b02      	cmp	r3, #2
 800c43c:	d81d      	bhi.n	800c47a <USBD_LL_DataOutStage+0xae>
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d002      	beq.n	800c448 <USBD_LL_DataOutStage+0x7c>
 800c442:	2b01      	cmp	r3, #1
 800c444:	d003      	beq.n	800c44e <USBD_LL_DataOutStage+0x82>
 800c446:	e018      	b.n	800c47a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c448:	2300      	movs	r3, #0
 800c44a:	75bb      	strb	r3, [r7, #22]
            break;
 800c44c:	e018      	b.n	800c480 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c454:	b2db      	uxtb	r3, r3
 800c456:	4619      	mov	r1, r3
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f000 fa5e 	bl	800c91a <USBD_CoreFindIF>
 800c45e:	4603      	mov	r3, r0
 800c460:	75bb      	strb	r3, [r7, #22]
            break;
 800c462:	e00d      	b.n	800c480 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	4619      	mov	r1, r3
 800c46e:	68f8      	ldr	r0, [r7, #12]
 800c470:	f000 fa60 	bl	800c934 <USBD_CoreFindEP>
 800c474:	4603      	mov	r3, r0
 800c476:	75bb      	strb	r3, [r7, #22]
            break;
 800c478:	e002      	b.n	800c480 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c47a:	2300      	movs	r3, #0
 800c47c:	75bb      	strb	r3, [r7, #22]
            break;
 800c47e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c480:	7dbb      	ldrb	r3, [r7, #22]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d119      	bne.n	800c4ba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	2b03      	cmp	r3, #3
 800c490:	d113      	bne.n	800c4ba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c492:	7dba      	ldrb	r2, [r7, #22]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	32ae      	adds	r2, #174	; 0xae
 800c498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c49c:	691b      	ldr	r3, [r3, #16]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d00b      	beq.n	800c4ba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c4a2:	7dba      	ldrb	r2, [r7, #22]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c4aa:	7dba      	ldrb	r2, [r7, #22]
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	32ae      	adds	r2, #174	; 0xae
 800c4b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	68f8      	ldr	r0, [r7, #12]
 800c4b8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f001 f94a 	bl	800d754 <USBD_CtlSendStatus>
 800c4c0:	e032      	b.n	800c528 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c4c2:	7afb      	ldrb	r3, [r7, #11]
 800c4c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f000 fa31 	bl	800c934 <USBD_CoreFindEP>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c4d6:	7dbb      	ldrb	r3, [r7, #22]
 800c4d8:	2bff      	cmp	r3, #255	; 0xff
 800c4da:	d025      	beq.n	800c528 <USBD_LL_DataOutStage+0x15c>
 800c4dc:	7dbb      	ldrb	r3, [r7, #22]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d122      	bne.n	800c528 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4e8:	b2db      	uxtb	r3, r3
 800c4ea:	2b03      	cmp	r3, #3
 800c4ec:	d117      	bne.n	800c51e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c4ee:	7dba      	ldrb	r2, [r7, #22]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	32ae      	adds	r2, #174	; 0xae
 800c4f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4f8:	699b      	ldr	r3, [r3, #24]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00f      	beq.n	800c51e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c4fe:	7dba      	ldrb	r2, [r7, #22]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c506:	7dba      	ldrb	r2, [r7, #22]
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	32ae      	adds	r2, #174	; 0xae
 800c50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c510:	699b      	ldr	r3, [r3, #24]
 800c512:	7afa      	ldrb	r2, [r7, #11]
 800c514:	4611      	mov	r1, r2
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	4798      	blx	r3
 800c51a:	4603      	mov	r3, r0
 800c51c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c51e:	7dfb      	ldrb	r3, [r7, #23]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d001      	beq.n	800c528 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c524:	7dfb      	ldrb	r3, [r7, #23]
 800c526:	e000      	b.n	800c52a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c528:	2300      	movs	r3, #0
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3718      	adds	r7, #24
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}

0800c532 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c532:	b580      	push	{r7, lr}
 800c534:	b086      	sub	sp, #24
 800c536:	af00      	add	r7, sp, #0
 800c538:	60f8      	str	r0, [r7, #12]
 800c53a:	460b      	mov	r3, r1
 800c53c:	607a      	str	r2, [r7, #4]
 800c53e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c540:	7afb      	ldrb	r3, [r7, #11]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d16f      	bne.n	800c626 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	3314      	adds	r3, #20
 800c54a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c552:	2b02      	cmp	r3, #2
 800c554:	d15a      	bne.n	800c60c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	689a      	ldr	r2, [r3, #8]
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	429a      	cmp	r2, r3
 800c560:	d914      	bls.n	800c58c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	689a      	ldr	r2, [r3, #8]
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	68db      	ldr	r3, [r3, #12]
 800c56a:	1ad2      	subs	r2, r2, r3
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	461a      	mov	r2, r3
 800c576:	6879      	ldr	r1, [r7, #4]
 800c578:	68f8      	ldr	r0, [r7, #12]
 800c57a:	f001 f8ac 	bl	800d6d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c57e:	2300      	movs	r3, #0
 800c580:	2200      	movs	r2, #0
 800c582:	2100      	movs	r1, #0
 800c584:	68f8      	ldr	r0, [r7, #12]
 800c586:	f004 fcfb 	bl	8010f80 <USBD_LL_PrepareReceive>
 800c58a:	e03f      	b.n	800c60c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	68da      	ldr	r2, [r3, #12]
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	429a      	cmp	r2, r3
 800c596:	d11c      	bne.n	800c5d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	685a      	ldr	r2, [r3, #4]
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d316      	bcc.n	800c5d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	685a      	ldr	r2, [r3, #4]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d20f      	bcs.n	800c5d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	2100      	movs	r1, #0
 800c5b6:	68f8      	ldr	r0, [r7, #12]
 800c5b8:	f001 f88d 	bl	800d6d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	f004 fcd8 	bl	8010f80 <USBD_LL_PrepareReceive>
 800c5d0:	e01c      	b.n	800c60c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	2b03      	cmp	r3, #3
 800c5dc:	d10f      	bne.n	800c5fe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5e4:	68db      	ldr	r3, [r3, #12]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d009      	beq.n	800c5fe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	68f8      	ldr	r0, [r7, #12]
 800c5fc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5fe:	2180      	movs	r1, #128	; 0x80
 800c600:	68f8      	ldr	r0, [r7, #12]
 800c602:	f004 fc13 	bl	8010e2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c606:	68f8      	ldr	r0, [r7, #12]
 800c608:	f001 f8b7 	bl	800d77a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c612:	2b00      	cmp	r3, #0
 800c614:	d03a      	beq.n	800c68c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f7ff fe42 	bl	800c2a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2200      	movs	r2, #0
 800c620:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c624:	e032      	b.n	800c68c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c626:	7afb      	ldrb	r3, [r7, #11]
 800c628:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	4619      	mov	r1, r3
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	f000 f97f 	bl	800c934 <USBD_CoreFindEP>
 800c636:	4603      	mov	r3, r0
 800c638:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c63a:	7dfb      	ldrb	r3, [r7, #23]
 800c63c:	2bff      	cmp	r3, #255	; 0xff
 800c63e:	d025      	beq.n	800c68c <USBD_LL_DataInStage+0x15a>
 800c640:	7dfb      	ldrb	r3, [r7, #23]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d122      	bne.n	800c68c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	2b03      	cmp	r3, #3
 800c650:	d11c      	bne.n	800c68c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c652:	7dfa      	ldrb	r2, [r7, #23]
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	32ae      	adds	r2, #174	; 0xae
 800c658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c65c:	695b      	ldr	r3, [r3, #20]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d014      	beq.n	800c68c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c662:	7dfa      	ldrb	r2, [r7, #23]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c66a:	7dfa      	ldrb	r2, [r7, #23]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	32ae      	adds	r2, #174	; 0xae
 800c670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c674:	695b      	ldr	r3, [r3, #20]
 800c676:	7afa      	ldrb	r2, [r7, #11]
 800c678:	4611      	mov	r1, r2
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	4798      	blx	r3
 800c67e:	4603      	mov	r3, r0
 800c680:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c682:	7dbb      	ldrb	r3, [r7, #22]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d001      	beq.n	800c68c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c688:	7dbb      	ldrb	r3, [r7, #22]
 800c68a:	e000      	b.n	800c68e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c68c:	2300      	movs	r3, #0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3718      	adds	r7, #24
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b084      	sub	sp, #16
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d014      	beq.n	800c6fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00e      	beq.n	800c6fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	6852      	ldr	r2, [r2, #4]
 800c6ea:	b2d2      	uxtb	r2, r2
 800c6ec:	4611      	mov	r1, r2
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	4798      	blx	r3
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d001      	beq.n	800c6fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c6f8:	2303      	movs	r3, #3
 800c6fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c6fc:	2340      	movs	r3, #64	; 0x40
 800c6fe:	2200      	movs	r2, #0
 800c700:	2100      	movs	r1, #0
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f004 fb4d 	bl	8010da2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2201      	movs	r2, #1
 800c70c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2240      	movs	r2, #64	; 0x40
 800c714:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c718:	2340      	movs	r3, #64	; 0x40
 800c71a:	2200      	movs	r2, #0
 800c71c:	2180      	movs	r1, #128	; 0x80
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f004 fb3f 	bl	8010da2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2201      	movs	r2, #1
 800c728:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2240      	movs	r2, #64	; 0x40
 800c72e:	621a      	str	r2, [r3, #32]

  return ret;
 800c730:	7bfb      	ldrb	r3, [r7, #15]
}
 800c732:	4618      	mov	r0, r3
 800c734:	3710      	adds	r7, #16
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}

0800c73a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c73a:	b480      	push	{r7}
 800c73c:	b083      	sub	sp, #12
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
 800c742:	460b      	mov	r3, r1
 800c744:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	78fa      	ldrb	r2, [r7, #3]
 800c74a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c74c:	2300      	movs	r3, #0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr

0800c75a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c75a:	b480      	push	{r7}
 800c75c:	b083      	sub	sp, #12
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c768:	b2da      	uxtb	r2, r3
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2204      	movs	r2, #4
 800c774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c778:	2300      	movs	r3, #0
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	370c      	adds	r7, #12
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr

0800c786 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c786:	b480      	push	{r7}
 800c788:	b083      	sub	sp, #12
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c794:	b2db      	uxtb	r3, r3
 800c796:	2b04      	cmp	r3, #4
 800c798:	d106      	bne.n	800c7a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c7a0:	b2da      	uxtb	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c7a8:	2300      	movs	r3, #0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	370c      	adds	r7, #12
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b082      	sub	sp, #8
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	2b03      	cmp	r3, #3
 800c7c8:	d110      	bne.n	800c7ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00b      	beq.n	800c7ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7da:	69db      	ldr	r3, [r3, #28]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d005      	beq.n	800c7ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7e6:	69db      	ldr	r3, [r3, #28]
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c7ec:	2300      	movs	r3, #0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3708      	adds	r7, #8
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b082      	sub	sp, #8
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
 800c7fe:	460b      	mov	r3, r1
 800c800:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	32ae      	adds	r2, #174	; 0xae
 800c80c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d101      	bne.n	800c818 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c814:	2303      	movs	r3, #3
 800c816:	e01c      	b.n	800c852 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	2b03      	cmp	r3, #3
 800c822:	d115      	bne.n	800c850 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	32ae      	adds	r2, #174	; 0xae
 800c82e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c832:	6a1b      	ldr	r3, [r3, #32]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00b      	beq.n	800c850 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	32ae      	adds	r2, #174	; 0xae
 800c842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c846:	6a1b      	ldr	r3, [r3, #32]
 800c848:	78fa      	ldrb	r2, [r7, #3]
 800c84a:	4611      	mov	r1, r2
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c850:	2300      	movs	r3, #0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b082      	sub	sp, #8
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
 800c862:	460b      	mov	r3, r1
 800c864:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	32ae      	adds	r2, #174	; 0xae
 800c870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d101      	bne.n	800c87c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c878:	2303      	movs	r3, #3
 800c87a:	e01c      	b.n	800c8b6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c882:	b2db      	uxtb	r3, r3
 800c884:	2b03      	cmp	r3, #3
 800c886:	d115      	bne.n	800c8b4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	32ae      	adds	r2, #174	; 0xae
 800c892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d00b      	beq.n	800c8b4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	32ae      	adds	r2, #174	; 0xae
 800c8a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ac:	78fa      	ldrb	r2, [r7, #3]
 800c8ae:	4611      	mov	r1, r2
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c8b4:	2300      	movs	r3, #0
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3708      	adds	r7, #8
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c8be:	b480      	push	{r7}
 800c8c0:	b083      	sub	sp, #12
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	370c      	adds	r7, #12
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d00e      	beq.n	800c910 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	6852      	ldr	r2, [r2, #4]
 800c8fe:	b2d2      	uxtb	r2, r2
 800c900:	4611      	mov	r1, r2
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	4798      	blx	r3
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d001      	beq.n	800c910 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c90c:	2303      	movs	r3, #3
 800c90e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c910:	7bfb      	ldrb	r3, [r7, #15]
}
 800c912:	4618      	mov	r0, r3
 800c914:	3710      	adds	r7, #16
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c91a:	b480      	push	{r7}
 800c91c:	b083      	sub	sp, #12
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
 800c922:	460b      	mov	r3, r1
 800c924:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c926:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c928:	4618      	mov	r0, r3
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c934:	b480      	push	{r7}
 800c936:	b083      	sub	sp, #12
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	460b      	mov	r3, r1
 800c93e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c940:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c942:	4618      	mov	r0, r3
 800c944:	370c      	adds	r7, #12
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr

0800c94e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b086      	sub	sp, #24
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
 800c956:	460b      	mov	r3, r1
 800c958:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c962:	2300      	movs	r3, #0
 800c964:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	885b      	ldrh	r3, [r3, #2]
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	b29b      	uxth	r3, r3
 800c972:	429a      	cmp	r2, r3
 800c974:	d920      	bls.n	800c9b8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c97e:	e013      	b.n	800c9a8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c980:	f107 030a 	add.w	r3, r7, #10
 800c984:	4619      	mov	r1, r3
 800c986:	6978      	ldr	r0, [r7, #20]
 800c988:	f000 f81b 	bl	800c9c2 <USBD_GetNextDesc>
 800c98c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	785b      	ldrb	r3, [r3, #1]
 800c992:	2b05      	cmp	r3, #5
 800c994:	d108      	bne.n	800c9a8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	789b      	ldrb	r3, [r3, #2]
 800c99e:	78fa      	ldrb	r2, [r7, #3]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d008      	beq.n	800c9b6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	885b      	ldrh	r3, [r3, #2]
 800c9ac:	b29a      	uxth	r2, r3
 800c9ae:	897b      	ldrh	r3, [r7, #10]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d8e5      	bhi.n	800c980 <USBD_GetEpDesc+0x32>
 800c9b4:	e000      	b.n	800c9b8 <USBD_GetEpDesc+0x6a>
          break;
 800c9b6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c9b8:	693b      	ldr	r3, [r7, #16]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3718      	adds	r7, #24
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c9c2:	b480      	push	{r7}
 800c9c4:	b085      	sub	sp, #20
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	881a      	ldrh	r2, [r3, #0]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	4413      	add	r3, r2
 800c9dc:	b29a      	uxth	r2, r3
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	4413      	add	r3, r2
 800c9ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3714      	adds	r7, #20
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b087      	sub	sp, #28
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	3301      	adds	r3, #1
 800ca12:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ca1a:	8a3b      	ldrh	r3, [r7, #16]
 800ca1c:	021b      	lsls	r3, r3, #8
 800ca1e:	b21a      	sxth	r2, r3
 800ca20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ca24:	4313      	orrs	r3, r2
 800ca26:	b21b      	sxth	r3, r3
 800ca28:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ca2a:	89fb      	ldrh	r3, [r7, #14]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	371c      	adds	r7, #28
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b084      	sub	sp, #16
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca42:	2300      	movs	r3, #0
 800ca44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca4e:	2b40      	cmp	r3, #64	; 0x40
 800ca50:	d005      	beq.n	800ca5e <USBD_StdDevReq+0x26>
 800ca52:	2b40      	cmp	r3, #64	; 0x40
 800ca54:	d857      	bhi.n	800cb06 <USBD_StdDevReq+0xce>
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d00f      	beq.n	800ca7a <USBD_StdDevReq+0x42>
 800ca5a:	2b20      	cmp	r3, #32
 800ca5c:	d153      	bne.n	800cb06 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	32ae      	adds	r2, #174	; 0xae
 800ca68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	6839      	ldr	r1, [r7, #0]
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	4798      	blx	r3
 800ca74:	4603      	mov	r3, r0
 800ca76:	73fb      	strb	r3, [r7, #15]
      break;
 800ca78:	e04a      	b.n	800cb10 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	785b      	ldrb	r3, [r3, #1]
 800ca7e:	2b09      	cmp	r3, #9
 800ca80:	d83b      	bhi.n	800cafa <USBD_StdDevReq+0xc2>
 800ca82:	a201      	add	r2, pc, #4	; (adr r2, 800ca88 <USBD_StdDevReq+0x50>)
 800ca84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca88:	0800cadd 	.word	0x0800cadd
 800ca8c:	0800caf1 	.word	0x0800caf1
 800ca90:	0800cafb 	.word	0x0800cafb
 800ca94:	0800cae7 	.word	0x0800cae7
 800ca98:	0800cafb 	.word	0x0800cafb
 800ca9c:	0800cabb 	.word	0x0800cabb
 800caa0:	0800cab1 	.word	0x0800cab1
 800caa4:	0800cafb 	.word	0x0800cafb
 800caa8:	0800cad3 	.word	0x0800cad3
 800caac:	0800cac5 	.word	0x0800cac5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cab0:	6839      	ldr	r1, [r7, #0]
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 fa3c 	bl	800cf30 <USBD_GetDescriptor>
          break;
 800cab8:	e024      	b.n	800cb04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800caba:	6839      	ldr	r1, [r7, #0]
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 fba1 	bl	800d204 <USBD_SetAddress>
          break;
 800cac2:	e01f      	b.n	800cb04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cac4:	6839      	ldr	r1, [r7, #0]
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 fbe0 	bl	800d28c <USBD_SetConfig>
 800cacc:	4603      	mov	r3, r0
 800cace:	73fb      	strb	r3, [r7, #15]
          break;
 800cad0:	e018      	b.n	800cb04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cad2:	6839      	ldr	r1, [r7, #0]
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 fc83 	bl	800d3e0 <USBD_GetConfig>
          break;
 800cada:	e013      	b.n	800cb04 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cadc:	6839      	ldr	r1, [r7, #0]
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 fcb4 	bl	800d44c <USBD_GetStatus>
          break;
 800cae4:	e00e      	b.n	800cb04 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cae6:	6839      	ldr	r1, [r7, #0]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 fce3 	bl	800d4b4 <USBD_SetFeature>
          break;
 800caee:	e009      	b.n	800cb04 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800caf0:	6839      	ldr	r1, [r7, #0]
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 fd07 	bl	800d506 <USBD_ClrFeature>
          break;
 800caf8:	e004      	b.n	800cb04 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cafa:	6839      	ldr	r1, [r7, #0]
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 fd5e 	bl	800d5be <USBD_CtlError>
          break;
 800cb02:	bf00      	nop
      }
      break;
 800cb04:	e004      	b.n	800cb10 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cb06:	6839      	ldr	r1, [r7, #0]
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 fd58 	bl	800d5be <USBD_CtlError>
      break;
 800cb0e:	bf00      	nop
  }

  return ret;
 800cb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop

0800cb1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb26:	2300      	movs	r3, #0
 800cb28:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb32:	2b40      	cmp	r3, #64	; 0x40
 800cb34:	d005      	beq.n	800cb42 <USBD_StdItfReq+0x26>
 800cb36:	2b40      	cmp	r3, #64	; 0x40
 800cb38:	d852      	bhi.n	800cbe0 <USBD_StdItfReq+0xc4>
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d001      	beq.n	800cb42 <USBD_StdItfReq+0x26>
 800cb3e:	2b20      	cmp	r3, #32
 800cb40:	d14e      	bne.n	800cbe0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	2b02      	cmp	r3, #2
 800cb4e:	d840      	bhi.n	800cbd2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	889b      	ldrh	r3, [r3, #4]
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d836      	bhi.n	800cbc8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	889b      	ldrh	r3, [r3, #4]
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	4619      	mov	r1, r3
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f7ff fed9 	bl	800c91a <USBD_CoreFindIF>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb6c:	7bbb      	ldrb	r3, [r7, #14]
 800cb6e:	2bff      	cmp	r3, #255	; 0xff
 800cb70:	d01d      	beq.n	800cbae <USBD_StdItfReq+0x92>
 800cb72:	7bbb      	ldrb	r3, [r7, #14]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d11a      	bne.n	800cbae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cb78:	7bba      	ldrb	r2, [r7, #14]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	32ae      	adds	r2, #174	; 0xae
 800cb7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb82:	689b      	ldr	r3, [r3, #8]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d00f      	beq.n	800cba8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cb88:	7bba      	ldrb	r2, [r7, #14]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cb90:	7bba      	ldrb	r2, [r7, #14]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	32ae      	adds	r2, #174	; 0xae
 800cb96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb9a:	689b      	ldr	r3, [r3, #8]
 800cb9c:	6839      	ldr	r1, [r7, #0]
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	4798      	blx	r3
 800cba2:	4603      	mov	r3, r0
 800cba4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cba6:	e004      	b.n	800cbb2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cba8:	2303      	movs	r3, #3
 800cbaa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cbac:	e001      	b.n	800cbb2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cbae:	2303      	movs	r3, #3
 800cbb0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	88db      	ldrh	r3, [r3, #6]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d110      	bne.n	800cbdc <USBD_StdItfReq+0xc0>
 800cbba:	7bfb      	ldrb	r3, [r7, #15]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d10d      	bne.n	800cbdc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f000 fdc7 	bl	800d754 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cbc6:	e009      	b.n	800cbdc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cbc8:	6839      	ldr	r1, [r7, #0]
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 fcf7 	bl	800d5be <USBD_CtlError>
          break;
 800cbd0:	e004      	b.n	800cbdc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cbd2:	6839      	ldr	r1, [r7, #0]
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f000 fcf2 	bl	800d5be <USBD_CtlError>
          break;
 800cbda:	e000      	b.n	800cbde <USBD_StdItfReq+0xc2>
          break;
 800cbdc:	bf00      	nop
      }
      break;
 800cbde:	e004      	b.n	800cbea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cbe0:	6839      	ldr	r1, [r7, #0]
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 fceb 	bl	800d5be <USBD_CtlError>
      break;
 800cbe8:	bf00      	nop
  }

  return ret;
 800cbea:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3710      	adds	r7, #16
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}

0800cbf4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	889b      	ldrh	r3, [r3, #4]
 800cc06:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cc10:	2b40      	cmp	r3, #64	; 0x40
 800cc12:	d007      	beq.n	800cc24 <USBD_StdEPReq+0x30>
 800cc14:	2b40      	cmp	r3, #64	; 0x40
 800cc16:	f200 817f 	bhi.w	800cf18 <USBD_StdEPReq+0x324>
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d02a      	beq.n	800cc74 <USBD_StdEPReq+0x80>
 800cc1e:	2b20      	cmp	r3, #32
 800cc20:	f040 817a 	bne.w	800cf18 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cc24:	7bbb      	ldrb	r3, [r7, #14]
 800cc26:	4619      	mov	r1, r3
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f7ff fe83 	bl	800c934 <USBD_CoreFindEP>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc32:	7b7b      	ldrb	r3, [r7, #13]
 800cc34:	2bff      	cmp	r3, #255	; 0xff
 800cc36:	f000 8174 	beq.w	800cf22 <USBD_StdEPReq+0x32e>
 800cc3a:	7b7b      	ldrb	r3, [r7, #13]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	f040 8170 	bne.w	800cf22 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cc42:	7b7a      	ldrb	r2, [r7, #13]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cc4a:	7b7a      	ldrb	r2, [r7, #13]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	32ae      	adds	r2, #174	; 0xae
 800cc50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc54:	689b      	ldr	r3, [r3, #8]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	f000 8163 	beq.w	800cf22 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cc5c:	7b7a      	ldrb	r2, [r7, #13]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	32ae      	adds	r2, #174	; 0xae
 800cc62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc66:	689b      	ldr	r3, [r3, #8]
 800cc68:	6839      	ldr	r1, [r7, #0]
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	4798      	blx	r3
 800cc6e:	4603      	mov	r3, r0
 800cc70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cc72:	e156      	b.n	800cf22 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	785b      	ldrb	r3, [r3, #1]
 800cc78:	2b03      	cmp	r3, #3
 800cc7a:	d008      	beq.n	800cc8e <USBD_StdEPReq+0x9a>
 800cc7c:	2b03      	cmp	r3, #3
 800cc7e:	f300 8145 	bgt.w	800cf0c <USBD_StdEPReq+0x318>
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f000 809b 	beq.w	800cdbe <USBD_StdEPReq+0x1ca>
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d03c      	beq.n	800cd06 <USBD_StdEPReq+0x112>
 800cc8c:	e13e      	b.n	800cf0c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	2b02      	cmp	r3, #2
 800cc98:	d002      	beq.n	800cca0 <USBD_StdEPReq+0xac>
 800cc9a:	2b03      	cmp	r3, #3
 800cc9c:	d016      	beq.n	800cccc <USBD_StdEPReq+0xd8>
 800cc9e:	e02c      	b.n	800ccfa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cca0:	7bbb      	ldrb	r3, [r7, #14]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d00d      	beq.n	800ccc2 <USBD_StdEPReq+0xce>
 800cca6:	7bbb      	ldrb	r3, [r7, #14]
 800cca8:	2b80      	cmp	r3, #128	; 0x80
 800ccaa:	d00a      	beq.n	800ccc2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ccac:	7bbb      	ldrb	r3, [r7, #14]
 800ccae:	4619      	mov	r1, r3
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f004 f8bb 	bl	8010e2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ccb6:	2180      	movs	r1, #128	; 0x80
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f004 f8b7 	bl	8010e2c <USBD_LL_StallEP>
 800ccbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ccc0:	e020      	b.n	800cd04 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ccc2:	6839      	ldr	r1, [r7, #0]
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 fc7a 	bl	800d5be <USBD_CtlError>
              break;
 800ccca:	e01b      	b.n	800cd04 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	885b      	ldrh	r3, [r3, #2]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d10e      	bne.n	800ccf2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ccd4:	7bbb      	ldrb	r3, [r7, #14]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00b      	beq.n	800ccf2 <USBD_StdEPReq+0xfe>
 800ccda:	7bbb      	ldrb	r3, [r7, #14]
 800ccdc:	2b80      	cmp	r3, #128	; 0x80
 800ccde:	d008      	beq.n	800ccf2 <USBD_StdEPReq+0xfe>
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	88db      	ldrh	r3, [r3, #6]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d104      	bne.n	800ccf2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cce8:	7bbb      	ldrb	r3, [r7, #14]
 800ccea:	4619      	mov	r1, r3
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f004 f89d 	bl	8010e2c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 fd2e 	bl	800d754 <USBD_CtlSendStatus>

              break;
 800ccf8:	e004      	b.n	800cd04 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ccfa:	6839      	ldr	r1, [r7, #0]
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 fc5e 	bl	800d5be <USBD_CtlError>
              break;
 800cd02:	bf00      	nop
          }
          break;
 800cd04:	e107      	b.n	800cf16 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd0c:	b2db      	uxtb	r3, r3
 800cd0e:	2b02      	cmp	r3, #2
 800cd10:	d002      	beq.n	800cd18 <USBD_StdEPReq+0x124>
 800cd12:	2b03      	cmp	r3, #3
 800cd14:	d016      	beq.n	800cd44 <USBD_StdEPReq+0x150>
 800cd16:	e04b      	b.n	800cdb0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd18:	7bbb      	ldrb	r3, [r7, #14]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d00d      	beq.n	800cd3a <USBD_StdEPReq+0x146>
 800cd1e:	7bbb      	ldrb	r3, [r7, #14]
 800cd20:	2b80      	cmp	r3, #128	; 0x80
 800cd22:	d00a      	beq.n	800cd3a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd24:	7bbb      	ldrb	r3, [r7, #14]
 800cd26:	4619      	mov	r1, r3
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f004 f87f 	bl	8010e2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd2e:	2180      	movs	r1, #128	; 0x80
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f004 f87b 	bl	8010e2c <USBD_LL_StallEP>
 800cd36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cd38:	e040      	b.n	800cdbc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cd3a:	6839      	ldr	r1, [r7, #0]
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 fc3e 	bl	800d5be <USBD_CtlError>
              break;
 800cd42:	e03b      	b.n	800cdbc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	885b      	ldrh	r3, [r3, #2]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d136      	bne.n	800cdba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cd4c:	7bbb      	ldrb	r3, [r7, #14]
 800cd4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d004      	beq.n	800cd60 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cd56:	7bbb      	ldrb	r3, [r7, #14]
 800cd58:	4619      	mov	r1, r3
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f004 f885 	bl	8010e6a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 fcf7 	bl	800d754 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cd66:	7bbb      	ldrb	r3, [r7, #14]
 800cd68:	4619      	mov	r1, r3
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f7ff fde2 	bl	800c934 <USBD_CoreFindEP>
 800cd70:	4603      	mov	r3, r0
 800cd72:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cd74:	7b7b      	ldrb	r3, [r7, #13]
 800cd76:	2bff      	cmp	r3, #255	; 0xff
 800cd78:	d01f      	beq.n	800cdba <USBD_StdEPReq+0x1c6>
 800cd7a:	7b7b      	ldrb	r3, [r7, #13]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d11c      	bne.n	800cdba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cd80:	7b7a      	ldrb	r2, [r7, #13]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cd88:	7b7a      	ldrb	r2, [r7, #13]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	32ae      	adds	r2, #174	; 0xae
 800cd8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd92:	689b      	ldr	r3, [r3, #8]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d010      	beq.n	800cdba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cd98:	7b7a      	ldrb	r2, [r7, #13]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	32ae      	adds	r2, #174	; 0xae
 800cd9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cda2:	689b      	ldr	r3, [r3, #8]
 800cda4:	6839      	ldr	r1, [r7, #0]
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	4798      	blx	r3
 800cdaa:	4603      	mov	r3, r0
 800cdac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cdae:	e004      	b.n	800cdba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cdb0:	6839      	ldr	r1, [r7, #0]
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f000 fc03 	bl	800d5be <USBD_CtlError>
              break;
 800cdb8:	e000      	b.n	800cdbc <USBD_StdEPReq+0x1c8>
              break;
 800cdba:	bf00      	nop
          }
          break;
 800cdbc:	e0ab      	b.n	800cf16 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdc4:	b2db      	uxtb	r3, r3
 800cdc6:	2b02      	cmp	r3, #2
 800cdc8:	d002      	beq.n	800cdd0 <USBD_StdEPReq+0x1dc>
 800cdca:	2b03      	cmp	r3, #3
 800cdcc:	d032      	beq.n	800ce34 <USBD_StdEPReq+0x240>
 800cdce:	e097      	b.n	800cf00 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cdd0:	7bbb      	ldrb	r3, [r7, #14]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d007      	beq.n	800cde6 <USBD_StdEPReq+0x1f2>
 800cdd6:	7bbb      	ldrb	r3, [r7, #14]
 800cdd8:	2b80      	cmp	r3, #128	; 0x80
 800cdda:	d004      	beq.n	800cde6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cddc:	6839      	ldr	r1, [r7, #0]
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 fbed 	bl	800d5be <USBD_CtlError>
                break;
 800cde4:	e091      	b.n	800cf0a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cde6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	da0b      	bge.n	800ce06 <USBD_StdEPReq+0x212>
 800cdee:	7bbb      	ldrb	r3, [r7, #14]
 800cdf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	4413      	add	r3, r2
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	3310      	adds	r3, #16
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	4413      	add	r3, r2
 800ce02:	3304      	adds	r3, #4
 800ce04:	e00b      	b.n	800ce1e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ce06:	7bbb      	ldrb	r3, [r7, #14]
 800ce08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	4413      	add	r3, r2
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	4413      	add	r3, r2
 800ce1c:	3304      	adds	r3, #4
 800ce1e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	2200      	movs	r2, #0
 800ce24:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	2202      	movs	r2, #2
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 fc37 	bl	800d6a0 <USBD_CtlSendData>
              break;
 800ce32:	e06a      	b.n	800cf0a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ce34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	da11      	bge.n	800ce60 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ce3c:	7bbb      	ldrb	r3, [r7, #14]
 800ce3e:	f003 020f 	and.w	r2, r3, #15
 800ce42:	6879      	ldr	r1, [r7, #4]
 800ce44:	4613      	mov	r3, r2
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	4413      	add	r3, r2
 800ce4a:	009b      	lsls	r3, r3, #2
 800ce4c:	440b      	add	r3, r1
 800ce4e:	3324      	adds	r3, #36	; 0x24
 800ce50:	881b      	ldrh	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d117      	bne.n	800ce86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ce56:	6839      	ldr	r1, [r7, #0]
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f000 fbb0 	bl	800d5be <USBD_CtlError>
                  break;
 800ce5e:	e054      	b.n	800cf0a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ce60:	7bbb      	ldrb	r3, [r7, #14]
 800ce62:	f003 020f 	and.w	r2, r3, #15
 800ce66:	6879      	ldr	r1, [r7, #4]
 800ce68:	4613      	mov	r3, r2
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	4413      	add	r3, r2
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	440b      	add	r3, r1
 800ce72:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ce76:	881b      	ldrh	r3, [r3, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d104      	bne.n	800ce86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ce7c:	6839      	ldr	r1, [r7, #0]
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 fb9d 	bl	800d5be <USBD_CtlError>
                  break;
 800ce84:	e041      	b.n	800cf0a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	da0b      	bge.n	800cea6 <USBD_StdEPReq+0x2b2>
 800ce8e:	7bbb      	ldrb	r3, [r7, #14]
 800ce90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce94:	4613      	mov	r3, r2
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	4413      	add	r3, r2
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	3310      	adds	r3, #16
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	4413      	add	r3, r2
 800cea2:	3304      	adds	r3, #4
 800cea4:	e00b      	b.n	800cebe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cea6:	7bbb      	ldrb	r3, [r7, #14]
 800cea8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ceac:	4613      	mov	r3, r2
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	4413      	add	r3, r2
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	4413      	add	r3, r2
 800cebc:	3304      	adds	r3, #4
 800cebe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cec0:	7bbb      	ldrb	r3, [r7, #14]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d002      	beq.n	800cecc <USBD_StdEPReq+0x2d8>
 800cec6:	7bbb      	ldrb	r3, [r7, #14]
 800cec8:	2b80      	cmp	r3, #128	; 0x80
 800ceca:	d103      	bne.n	800ced4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	2200      	movs	r2, #0
 800ced0:	601a      	str	r2, [r3, #0]
 800ced2:	e00e      	b.n	800cef2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ced4:	7bbb      	ldrb	r3, [r7, #14]
 800ced6:	4619      	mov	r1, r3
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f003 ffe5 	bl	8010ea8 <USBD_LL_IsStallEP>
 800cede:	4603      	mov	r3, r0
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d003      	beq.n	800ceec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	2201      	movs	r2, #1
 800cee8:	601a      	str	r2, [r3, #0]
 800ceea:	e002      	b.n	800cef2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	2200      	movs	r2, #0
 800cef0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	2202      	movs	r2, #2
 800cef6:	4619      	mov	r1, r3
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f000 fbd1 	bl	800d6a0 <USBD_CtlSendData>
              break;
 800cefe:	e004      	b.n	800cf0a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cf00:	6839      	ldr	r1, [r7, #0]
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f000 fb5b 	bl	800d5be <USBD_CtlError>
              break;
 800cf08:	bf00      	nop
          }
          break;
 800cf0a:	e004      	b.n	800cf16 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cf0c:	6839      	ldr	r1, [r7, #0]
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 fb55 	bl	800d5be <USBD_CtlError>
          break;
 800cf14:	bf00      	nop
      }
      break;
 800cf16:	e005      	b.n	800cf24 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cf18:	6839      	ldr	r1, [r7, #0]
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 fb4f 	bl	800d5be <USBD_CtlError>
      break;
 800cf20:	e000      	b.n	800cf24 <USBD_StdEPReq+0x330>
      break;
 800cf22:	bf00      	nop
  }

  return ret;
 800cf24:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3710      	adds	r7, #16
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
	...

0800cf30 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cf42:	2300      	movs	r3, #0
 800cf44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	885b      	ldrh	r3, [r3, #2]
 800cf4a:	0a1b      	lsrs	r3, r3, #8
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	3b01      	subs	r3, #1
 800cf50:	2b06      	cmp	r3, #6
 800cf52:	f200 8128 	bhi.w	800d1a6 <USBD_GetDescriptor+0x276>
 800cf56:	a201      	add	r2, pc, #4	; (adr r2, 800cf5c <USBD_GetDescriptor+0x2c>)
 800cf58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf5c:	0800cf79 	.word	0x0800cf79
 800cf60:	0800cf91 	.word	0x0800cf91
 800cf64:	0800cfd1 	.word	0x0800cfd1
 800cf68:	0800d1a7 	.word	0x0800d1a7
 800cf6c:	0800d1a7 	.word	0x0800d1a7
 800cf70:	0800d147 	.word	0x0800d147
 800cf74:	0800d173 	.word	0x0800d173
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	7c12      	ldrb	r2, [r2, #16]
 800cf84:	f107 0108 	add.w	r1, r7, #8
 800cf88:	4610      	mov	r0, r2
 800cf8a:	4798      	blx	r3
 800cf8c:	60f8      	str	r0, [r7, #12]
      break;
 800cf8e:	e112      	b.n	800d1b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	7c1b      	ldrb	r3, [r3, #16]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d10d      	bne.n	800cfb4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfa0:	f107 0208 	add.w	r2, r7, #8
 800cfa4:	4610      	mov	r0, r2
 800cfa6:	4798      	blx	r3
 800cfa8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	3301      	adds	r3, #1
 800cfae:	2202      	movs	r2, #2
 800cfb0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cfb2:	e100      	b.n	800d1b6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfbc:	f107 0208 	add.w	r2, r7, #8
 800cfc0:	4610      	mov	r0, r2
 800cfc2:	4798      	blx	r3
 800cfc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	3301      	adds	r3, #1
 800cfca:	2202      	movs	r2, #2
 800cfcc:	701a      	strb	r2, [r3, #0]
      break;
 800cfce:	e0f2      	b.n	800d1b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	885b      	ldrh	r3, [r3, #2]
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	2b05      	cmp	r3, #5
 800cfd8:	f200 80ac 	bhi.w	800d134 <USBD_GetDescriptor+0x204>
 800cfdc:	a201      	add	r2, pc, #4	; (adr r2, 800cfe4 <USBD_GetDescriptor+0xb4>)
 800cfde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfe2:	bf00      	nop
 800cfe4:	0800cffd 	.word	0x0800cffd
 800cfe8:	0800d031 	.word	0x0800d031
 800cfec:	0800d065 	.word	0x0800d065
 800cff0:	0800d099 	.word	0x0800d099
 800cff4:	0800d0cd 	.word	0x0800d0cd
 800cff8:	0800d101 	.word	0x0800d101
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d00b      	beq.n	800d020 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	687a      	ldr	r2, [r7, #4]
 800d012:	7c12      	ldrb	r2, [r2, #16]
 800d014:	f107 0108 	add.w	r1, r7, #8
 800d018:	4610      	mov	r0, r2
 800d01a:	4798      	blx	r3
 800d01c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d01e:	e091      	b.n	800d144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d020:	6839      	ldr	r1, [r7, #0]
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 facb 	bl	800d5be <USBD_CtlError>
            err++;
 800d028:	7afb      	ldrb	r3, [r7, #11]
 800d02a:	3301      	adds	r3, #1
 800d02c:	72fb      	strb	r3, [r7, #11]
          break;
 800d02e:	e089      	b.n	800d144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d00b      	beq.n	800d054 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	7c12      	ldrb	r2, [r2, #16]
 800d048:	f107 0108 	add.w	r1, r7, #8
 800d04c:	4610      	mov	r0, r2
 800d04e:	4798      	blx	r3
 800d050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d052:	e077      	b.n	800d144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d054:	6839      	ldr	r1, [r7, #0]
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 fab1 	bl	800d5be <USBD_CtlError>
            err++;
 800d05c:	7afb      	ldrb	r3, [r7, #11]
 800d05e:	3301      	adds	r3, #1
 800d060:	72fb      	strb	r3, [r7, #11]
          break;
 800d062:	e06f      	b.n	800d144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d00b      	beq.n	800d088 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	7c12      	ldrb	r2, [r2, #16]
 800d07c:	f107 0108 	add.w	r1, r7, #8
 800d080:	4610      	mov	r0, r2
 800d082:	4798      	blx	r3
 800d084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d086:	e05d      	b.n	800d144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d088:	6839      	ldr	r1, [r7, #0]
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 fa97 	bl	800d5be <USBD_CtlError>
            err++;
 800d090:	7afb      	ldrb	r3, [r7, #11]
 800d092:	3301      	adds	r3, #1
 800d094:	72fb      	strb	r3, [r7, #11]
          break;
 800d096:	e055      	b.n	800d144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d09e:	691b      	ldr	r3, [r3, #16]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d00b      	beq.n	800d0bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0aa:	691b      	ldr	r3, [r3, #16]
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	7c12      	ldrb	r2, [r2, #16]
 800d0b0:	f107 0108 	add.w	r1, r7, #8
 800d0b4:	4610      	mov	r0, r2
 800d0b6:	4798      	blx	r3
 800d0b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0ba:	e043      	b.n	800d144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d0bc:	6839      	ldr	r1, [r7, #0]
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 fa7d 	bl	800d5be <USBD_CtlError>
            err++;
 800d0c4:	7afb      	ldrb	r3, [r7, #11]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	72fb      	strb	r3, [r7, #11]
          break;
 800d0ca:	e03b      	b.n	800d144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0d2:	695b      	ldr	r3, [r3, #20]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d00b      	beq.n	800d0f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0de:	695b      	ldr	r3, [r3, #20]
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	7c12      	ldrb	r2, [r2, #16]
 800d0e4:	f107 0108 	add.w	r1, r7, #8
 800d0e8:	4610      	mov	r0, r2
 800d0ea:	4798      	blx	r3
 800d0ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0ee:	e029      	b.n	800d144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d0f0:	6839      	ldr	r1, [r7, #0]
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 fa63 	bl	800d5be <USBD_CtlError>
            err++;
 800d0f8:	7afb      	ldrb	r3, [r7, #11]
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	72fb      	strb	r3, [r7, #11]
          break;
 800d0fe:	e021      	b.n	800d144 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d106:	699b      	ldr	r3, [r3, #24]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d00b      	beq.n	800d124 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d112:	699b      	ldr	r3, [r3, #24]
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	7c12      	ldrb	r2, [r2, #16]
 800d118:	f107 0108 	add.w	r1, r7, #8
 800d11c:	4610      	mov	r0, r2
 800d11e:	4798      	blx	r3
 800d120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d122:	e00f      	b.n	800d144 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d124:	6839      	ldr	r1, [r7, #0]
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 fa49 	bl	800d5be <USBD_CtlError>
            err++;
 800d12c:	7afb      	ldrb	r3, [r7, #11]
 800d12e:	3301      	adds	r3, #1
 800d130:	72fb      	strb	r3, [r7, #11]
          break;
 800d132:	e007      	b.n	800d144 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d134:	6839      	ldr	r1, [r7, #0]
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f000 fa41 	bl	800d5be <USBD_CtlError>
          err++;
 800d13c:	7afb      	ldrb	r3, [r7, #11]
 800d13e:	3301      	adds	r3, #1
 800d140:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d142:	bf00      	nop
      }
      break;
 800d144:	e037      	b.n	800d1b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	7c1b      	ldrb	r3, [r3, #16]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d109      	bne.n	800d162 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d156:	f107 0208 	add.w	r2, r7, #8
 800d15a:	4610      	mov	r0, r2
 800d15c:	4798      	blx	r3
 800d15e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d160:	e029      	b.n	800d1b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d162:	6839      	ldr	r1, [r7, #0]
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 fa2a 	bl	800d5be <USBD_CtlError>
        err++;
 800d16a:	7afb      	ldrb	r3, [r7, #11]
 800d16c:	3301      	adds	r3, #1
 800d16e:	72fb      	strb	r3, [r7, #11]
      break;
 800d170:	e021      	b.n	800d1b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	7c1b      	ldrb	r3, [r3, #16]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d10d      	bne.n	800d196 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d182:	f107 0208 	add.w	r2, r7, #8
 800d186:	4610      	mov	r0, r2
 800d188:	4798      	blx	r3
 800d18a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	3301      	adds	r3, #1
 800d190:	2207      	movs	r2, #7
 800d192:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d194:	e00f      	b.n	800d1b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d196:	6839      	ldr	r1, [r7, #0]
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f000 fa10 	bl	800d5be <USBD_CtlError>
        err++;
 800d19e:	7afb      	ldrb	r3, [r7, #11]
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	72fb      	strb	r3, [r7, #11]
      break;
 800d1a4:	e007      	b.n	800d1b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d1a6:	6839      	ldr	r1, [r7, #0]
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f000 fa08 	bl	800d5be <USBD_CtlError>
      err++;
 800d1ae:	7afb      	ldrb	r3, [r7, #11]
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	72fb      	strb	r3, [r7, #11]
      break;
 800d1b4:	bf00      	nop
  }

  if (err != 0U)
 800d1b6:	7afb      	ldrb	r3, [r7, #11]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d11e      	bne.n	800d1fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	88db      	ldrh	r3, [r3, #6]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d016      	beq.n	800d1f2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d1c4:	893b      	ldrh	r3, [r7, #8]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d00e      	beq.n	800d1e8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	88da      	ldrh	r2, [r3, #6]
 800d1ce:	893b      	ldrh	r3, [r7, #8]
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	bf28      	it	cs
 800d1d4:	4613      	movcs	r3, r2
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d1da:	893b      	ldrh	r3, [r7, #8]
 800d1dc:	461a      	mov	r2, r3
 800d1de:	68f9      	ldr	r1, [r7, #12]
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 fa5d 	bl	800d6a0 <USBD_CtlSendData>
 800d1e6:	e009      	b.n	800d1fc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d1e8:	6839      	ldr	r1, [r7, #0]
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 f9e7 	bl	800d5be <USBD_CtlError>
 800d1f0:	e004      	b.n	800d1fc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f000 faae 	bl	800d754 <USBD_CtlSendStatus>
 800d1f8:	e000      	b.n	800d1fc <USBD_GetDescriptor+0x2cc>
    return;
 800d1fa:	bf00      	nop
  }
}
 800d1fc:	3710      	adds	r7, #16
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop

0800d204 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	889b      	ldrh	r3, [r3, #4]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d131      	bne.n	800d27a <USBD_SetAddress+0x76>
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	88db      	ldrh	r3, [r3, #6]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d12d      	bne.n	800d27a <USBD_SetAddress+0x76>
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	885b      	ldrh	r3, [r3, #2]
 800d222:	2b7f      	cmp	r3, #127	; 0x7f
 800d224:	d829      	bhi.n	800d27a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	885b      	ldrh	r3, [r3, #2]
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d230:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	2b03      	cmp	r3, #3
 800d23c:	d104      	bne.n	800d248 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d23e:	6839      	ldr	r1, [r7, #0]
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 f9bc 	bl	800d5be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d246:	e01d      	b.n	800d284 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	7bfa      	ldrb	r2, [r7, #15]
 800d24c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d250:	7bfb      	ldrb	r3, [r7, #15]
 800d252:	4619      	mov	r1, r3
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f003 fe53 	bl	8010f00 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 fa7a 	bl	800d754 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d260:	7bfb      	ldrb	r3, [r7, #15]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d004      	beq.n	800d270 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2202      	movs	r2, #2
 800d26a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d26e:	e009      	b.n	800d284 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2201      	movs	r2, #1
 800d274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d278:	e004      	b.n	800d284 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d27a:	6839      	ldr	r1, [r7, #0]
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 f99e 	bl	800d5be <USBD_CtlError>
  }
}
 800d282:	bf00      	nop
 800d284:	bf00      	nop
 800d286:	3710      	adds	r7, #16
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d296:	2300      	movs	r3, #0
 800d298:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	885b      	ldrh	r3, [r3, #2]
 800d29e:	b2da      	uxtb	r2, r3
 800d2a0:	4b4e      	ldr	r3, [pc, #312]	; (800d3dc <USBD_SetConfig+0x150>)
 800d2a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d2a4:	4b4d      	ldr	r3, [pc, #308]	; (800d3dc <USBD_SetConfig+0x150>)
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d905      	bls.n	800d2b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d2ac:	6839      	ldr	r1, [r7, #0]
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 f985 	bl	800d5be <USBD_CtlError>
    return USBD_FAIL;
 800d2b4:	2303      	movs	r3, #3
 800d2b6:	e08c      	b.n	800d3d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	2b02      	cmp	r3, #2
 800d2c2:	d002      	beq.n	800d2ca <USBD_SetConfig+0x3e>
 800d2c4:	2b03      	cmp	r3, #3
 800d2c6:	d029      	beq.n	800d31c <USBD_SetConfig+0x90>
 800d2c8:	e075      	b.n	800d3b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d2ca:	4b44      	ldr	r3, [pc, #272]	; (800d3dc <USBD_SetConfig+0x150>)
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d020      	beq.n	800d314 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d2d2:	4b42      	ldr	r3, [pc, #264]	; (800d3dc <USBD_SetConfig+0x150>)
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d2dc:	4b3f      	ldr	r3, [pc, #252]	; (800d3dc <USBD_SetConfig+0x150>)
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f7fe ffe7 	bl	800c2b6 <USBD_SetClassConfig>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d2ec:	7bfb      	ldrb	r3, [r7, #15]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d008      	beq.n	800d304 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d2f2:	6839      	ldr	r1, [r7, #0]
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 f962 	bl	800d5be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2202      	movs	r2, #2
 800d2fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d302:	e065      	b.n	800d3d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 fa25 	bl	800d754 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2203      	movs	r2, #3
 800d30e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d312:	e05d      	b.n	800d3d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 fa1d 	bl	800d754 <USBD_CtlSendStatus>
      break;
 800d31a:	e059      	b.n	800d3d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d31c:	4b2f      	ldr	r3, [pc, #188]	; (800d3dc <USBD_SetConfig+0x150>)
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d112      	bne.n	800d34a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2202      	movs	r2, #2
 800d328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d32c:	4b2b      	ldr	r3, [pc, #172]	; (800d3dc <USBD_SetConfig+0x150>)
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	461a      	mov	r2, r3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d336:	4b29      	ldr	r3, [pc, #164]	; (800d3dc <USBD_SetConfig+0x150>)
 800d338:	781b      	ldrb	r3, [r3, #0]
 800d33a:	4619      	mov	r1, r3
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f7fe ffd6 	bl	800c2ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 fa06 	bl	800d754 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d348:	e042      	b.n	800d3d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d34a:	4b24      	ldr	r3, [pc, #144]	; (800d3dc <USBD_SetConfig+0x150>)
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	461a      	mov	r2, r3
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	685b      	ldr	r3, [r3, #4]
 800d354:	429a      	cmp	r2, r3
 800d356:	d02a      	beq.n	800d3ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	b2db      	uxtb	r3, r3
 800d35e:	4619      	mov	r1, r3
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f7fe ffc4 	bl	800c2ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d366:	4b1d      	ldr	r3, [pc, #116]	; (800d3dc <USBD_SetConfig+0x150>)
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	461a      	mov	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d370:	4b1a      	ldr	r3, [pc, #104]	; (800d3dc <USBD_SetConfig+0x150>)
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	4619      	mov	r1, r3
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f7fe ff9d 	bl	800c2b6 <USBD_SetClassConfig>
 800d37c:	4603      	mov	r3, r0
 800d37e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d380:	7bfb      	ldrb	r3, [r7, #15]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d00f      	beq.n	800d3a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d386:	6839      	ldr	r1, [r7, #0]
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f000 f918 	bl	800d5be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	b2db      	uxtb	r3, r3
 800d394:	4619      	mov	r1, r3
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f7fe ffa9 	bl	800c2ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2202      	movs	r2, #2
 800d3a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d3a4:	e014      	b.n	800d3d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 f9d4 	bl	800d754 <USBD_CtlSendStatus>
      break;
 800d3ac:	e010      	b.n	800d3d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f000 f9d0 	bl	800d754 <USBD_CtlSendStatus>
      break;
 800d3b4:	e00c      	b.n	800d3d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d3b6:	6839      	ldr	r1, [r7, #0]
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f000 f900 	bl	800d5be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d3be:	4b07      	ldr	r3, [pc, #28]	; (800d3dc <USBD_SetConfig+0x150>)
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	4619      	mov	r1, r3
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f7fe ff92 	bl	800c2ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d3ca:	2303      	movs	r3, #3
 800d3cc:	73fb      	strb	r3, [r7, #15]
      break;
 800d3ce:	bf00      	nop
  }

  return ret;
 800d3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3710      	adds	r7, #16
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	20000980 	.word	0x20000980

0800d3e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	88db      	ldrh	r3, [r3, #6]
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d004      	beq.n	800d3fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d3f2:	6839      	ldr	r1, [r7, #0]
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 f8e2 	bl	800d5be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d3fa:	e023      	b.n	800d444 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d402:	b2db      	uxtb	r3, r3
 800d404:	2b02      	cmp	r3, #2
 800d406:	dc02      	bgt.n	800d40e <USBD_GetConfig+0x2e>
 800d408:	2b00      	cmp	r3, #0
 800d40a:	dc03      	bgt.n	800d414 <USBD_GetConfig+0x34>
 800d40c:	e015      	b.n	800d43a <USBD_GetConfig+0x5a>
 800d40e:	2b03      	cmp	r3, #3
 800d410:	d00b      	beq.n	800d42a <USBD_GetConfig+0x4a>
 800d412:	e012      	b.n	800d43a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2200      	movs	r2, #0
 800d418:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	3308      	adds	r3, #8
 800d41e:	2201      	movs	r2, #1
 800d420:	4619      	mov	r1, r3
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f000 f93c 	bl	800d6a0 <USBD_CtlSendData>
        break;
 800d428:	e00c      	b.n	800d444 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	3304      	adds	r3, #4
 800d42e:	2201      	movs	r2, #1
 800d430:	4619      	mov	r1, r3
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 f934 	bl	800d6a0 <USBD_CtlSendData>
        break;
 800d438:	e004      	b.n	800d444 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d43a:	6839      	ldr	r1, [r7, #0]
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 f8be 	bl	800d5be <USBD_CtlError>
        break;
 800d442:	bf00      	nop
}
 800d444:	bf00      	nop
 800d446:	3708      	adds	r7, #8
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	3b01      	subs	r3, #1
 800d460:	2b02      	cmp	r3, #2
 800d462:	d81e      	bhi.n	800d4a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	88db      	ldrh	r3, [r3, #6]
 800d468:	2b02      	cmp	r3, #2
 800d46a:	d004      	beq.n	800d476 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d46c:	6839      	ldr	r1, [r7, #0]
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 f8a5 	bl	800d5be <USBD_CtlError>
        break;
 800d474:	e01a      	b.n	800d4ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2201      	movs	r2, #1
 800d47a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d482:	2b00      	cmp	r3, #0
 800d484:	d005      	beq.n	800d492 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	68db      	ldr	r3, [r3, #12]
 800d48a:	f043 0202 	orr.w	r2, r3, #2
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	330c      	adds	r3, #12
 800d496:	2202      	movs	r2, #2
 800d498:	4619      	mov	r1, r3
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 f900 	bl	800d6a0 <USBD_CtlSendData>
      break;
 800d4a0:	e004      	b.n	800d4ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d4a2:	6839      	ldr	r1, [r7, #0]
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 f88a 	bl	800d5be <USBD_CtlError>
      break;
 800d4aa:	bf00      	nop
  }
}
 800d4ac:	bf00      	nop
 800d4ae:	3708      	adds	r7, #8
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	885b      	ldrh	r3, [r3, #2]
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d107      	bne.n	800d4d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 f940 	bl	800d754 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d4d4:	e013      	b.n	800d4fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	885b      	ldrh	r3, [r3, #2]
 800d4da:	2b02      	cmp	r3, #2
 800d4dc:	d10b      	bne.n	800d4f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	889b      	ldrh	r3, [r3, #4]
 800d4e2:	0a1b      	lsrs	r3, r3, #8
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	b2da      	uxtb	r2, r3
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 f930 	bl	800d754 <USBD_CtlSendStatus>
}
 800d4f4:	e003      	b.n	800d4fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d4f6:	6839      	ldr	r1, [r7, #0]
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 f860 	bl	800d5be <USBD_CtlError>
}
 800d4fe:	bf00      	nop
 800d500:	3708      	adds	r7, #8
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}

0800d506 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d506:	b580      	push	{r7, lr}
 800d508:	b082      	sub	sp, #8
 800d50a:	af00      	add	r7, sp, #0
 800d50c:	6078      	str	r0, [r7, #4]
 800d50e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d516:	b2db      	uxtb	r3, r3
 800d518:	3b01      	subs	r3, #1
 800d51a:	2b02      	cmp	r3, #2
 800d51c:	d80b      	bhi.n	800d536 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	885b      	ldrh	r3, [r3, #2]
 800d522:	2b01      	cmp	r3, #1
 800d524:	d10c      	bne.n	800d540 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2200      	movs	r2, #0
 800d52a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f000 f910 	bl	800d754 <USBD_CtlSendStatus>
      }
      break;
 800d534:	e004      	b.n	800d540 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d536:	6839      	ldr	r1, [r7, #0]
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f000 f840 	bl	800d5be <USBD_CtlError>
      break;
 800d53e:	e000      	b.n	800d542 <USBD_ClrFeature+0x3c>
      break;
 800d540:	bf00      	nop
  }
}
 800d542:	bf00      	nop
 800d544:	3708      	adds	r7, #8
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}

0800d54a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d54a:	b580      	push	{r7, lr}
 800d54c:	b084      	sub	sp, #16
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
 800d552:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	781a      	ldrb	r2, [r3, #0]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	3301      	adds	r3, #1
 800d564:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	781a      	ldrb	r2, [r3, #0]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	3301      	adds	r3, #1
 800d572:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f7ff fa41 	bl	800c9fc <SWAPBYTE>
 800d57a:	4603      	mov	r3, r0
 800d57c:	461a      	mov	r2, r3
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	3301      	adds	r3, #1
 800d586:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	3301      	adds	r3, #1
 800d58c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d58e:	68f8      	ldr	r0, [r7, #12]
 800d590:	f7ff fa34 	bl	800c9fc <SWAPBYTE>
 800d594:	4603      	mov	r3, r0
 800d596:	461a      	mov	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	3301      	adds	r3, #1
 800d5a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d5a8:	68f8      	ldr	r0, [r7, #12]
 800d5aa:	f7ff fa27 	bl	800c9fc <SWAPBYTE>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	80da      	strh	r2, [r3, #6]
}
 800d5b6:	bf00      	nop
 800d5b8:	3710      	adds	r7, #16
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	b082      	sub	sp, #8
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
 800d5c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5c8:	2180      	movs	r1, #128	; 0x80
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f003 fc2e 	bl	8010e2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f003 fc2a 	bl	8010e2c <USBD_LL_StallEP>
}
 800d5d8:	bf00      	nop
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b086      	sub	sp, #24
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d036      	beq.n	800d664 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d5fa:	6938      	ldr	r0, [r7, #16]
 800d5fc:	f000 f836 	bl	800d66c <USBD_GetLen>
 800d600:	4603      	mov	r3, r0
 800d602:	3301      	adds	r3, #1
 800d604:	b29b      	uxth	r3, r3
 800d606:	005b      	lsls	r3, r3, #1
 800d608:	b29a      	uxth	r2, r3
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d60e:	7dfb      	ldrb	r3, [r7, #23]
 800d610:	68ba      	ldr	r2, [r7, #8]
 800d612:	4413      	add	r3, r2
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	7812      	ldrb	r2, [r2, #0]
 800d618:	701a      	strb	r2, [r3, #0]
  idx++;
 800d61a:	7dfb      	ldrb	r3, [r7, #23]
 800d61c:	3301      	adds	r3, #1
 800d61e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d620:	7dfb      	ldrb	r3, [r7, #23]
 800d622:	68ba      	ldr	r2, [r7, #8]
 800d624:	4413      	add	r3, r2
 800d626:	2203      	movs	r2, #3
 800d628:	701a      	strb	r2, [r3, #0]
  idx++;
 800d62a:	7dfb      	ldrb	r3, [r7, #23]
 800d62c:	3301      	adds	r3, #1
 800d62e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d630:	e013      	b.n	800d65a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d632:	7dfb      	ldrb	r3, [r7, #23]
 800d634:	68ba      	ldr	r2, [r7, #8]
 800d636:	4413      	add	r3, r2
 800d638:	693a      	ldr	r2, [r7, #16]
 800d63a:	7812      	ldrb	r2, [r2, #0]
 800d63c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	3301      	adds	r3, #1
 800d642:	613b      	str	r3, [r7, #16]
    idx++;
 800d644:	7dfb      	ldrb	r3, [r7, #23]
 800d646:	3301      	adds	r3, #1
 800d648:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d64a:	7dfb      	ldrb	r3, [r7, #23]
 800d64c:	68ba      	ldr	r2, [r7, #8]
 800d64e:	4413      	add	r3, r2
 800d650:	2200      	movs	r2, #0
 800d652:	701a      	strb	r2, [r3, #0]
    idx++;
 800d654:	7dfb      	ldrb	r3, [r7, #23]
 800d656:	3301      	adds	r3, #1
 800d658:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d1e7      	bne.n	800d632 <USBD_GetString+0x52>
 800d662:	e000      	b.n	800d666 <USBD_GetString+0x86>
    return;
 800d664:	bf00      	nop
  }
}
 800d666:	3718      	adds	r7, #24
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b085      	sub	sp, #20
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d674:	2300      	movs	r3, #0
 800d676:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d67c:	e005      	b.n	800d68a <USBD_GetLen+0x1e>
  {
    len++;
 800d67e:	7bfb      	ldrb	r3, [r7, #15]
 800d680:	3301      	adds	r3, #1
 800d682:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	3301      	adds	r3, #1
 800d688:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d1f5      	bne.n	800d67e <USBD_GetLen+0x12>
  }

  return len;
 800d692:	7bfb      	ldrb	r3, [r7, #15]
}
 800d694:	4618      	mov	r0, r3
 800d696:	3714      	adds	r7, #20
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	60f8      	str	r0, [r7, #12]
 800d6a8:	60b9      	str	r1, [r7, #8]
 800d6aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2202      	movs	r2, #2
 800d6b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	687a      	ldr	r2, [r7, #4]
 800d6b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	68ba      	ldr	r2, [r7, #8]
 800d6c4:	2100      	movs	r1, #0
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	f003 fc39 	bl	8010f3e <USBD_LL_Transmit>

  return USBD_OK;
 800d6cc:	2300      	movs	r3, #0
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3710      	adds	r7, #16
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}

0800d6d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d6d6:	b580      	push	{r7, lr}
 800d6d8:	b084      	sub	sp, #16
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	60f8      	str	r0, [r7, #12]
 800d6de:	60b9      	str	r1, [r7, #8]
 800d6e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	68ba      	ldr	r2, [r7, #8]
 800d6e6:	2100      	movs	r1, #0
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f003 fc28 	bl	8010f3e <USBD_LL_Transmit>

  return USBD_OK;
 800d6ee:	2300      	movs	r3, #0
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3710      	adds	r7, #16
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	60b9      	str	r1, [r7, #8]
 800d702:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2203      	movs	r2, #3
 800d708:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	687a      	ldr	r2, [r7, #4]
 800d710:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	68ba      	ldr	r2, [r7, #8]
 800d720:	2100      	movs	r1, #0
 800d722:	68f8      	ldr	r0, [r7, #12]
 800d724:	f003 fc2c 	bl	8010f80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d728:	2300      	movs	r3, #0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3710      	adds	r7, #16
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d732:	b580      	push	{r7, lr}
 800d734:	b084      	sub	sp, #16
 800d736:	af00      	add	r7, sp, #0
 800d738:	60f8      	str	r0, [r7, #12]
 800d73a:	60b9      	str	r1, [r7, #8]
 800d73c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	68ba      	ldr	r2, [r7, #8]
 800d742:	2100      	movs	r1, #0
 800d744:	68f8      	ldr	r0, [r7, #12]
 800d746:	f003 fc1b 	bl	8010f80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d74a:	2300      	movs	r3, #0
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3710      	adds	r7, #16
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2204      	movs	r2, #4
 800d760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d764:	2300      	movs	r3, #0
 800d766:	2200      	movs	r2, #0
 800d768:	2100      	movs	r1, #0
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f003 fbe7 	bl	8010f3e <USBD_LL_Transmit>

  return USBD_OK;
 800d770:	2300      	movs	r3, #0
}
 800d772:	4618      	mov	r0, r3
 800d774:	3708      	adds	r7, #8
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b082      	sub	sp, #8
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2205      	movs	r2, #5
 800d786:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d78a:	2300      	movs	r3, #0
 800d78c:	2200      	movs	r2, #0
 800d78e:	2100      	movs	r1, #0
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f003 fbf5 	bl	8010f80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d796:	2300      	movs	r3, #0
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3708      	adds	r7, #8
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <__NVIC_SetPriority>:
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	6039      	str	r1, [r7, #0]
 800d7aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d7ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	db0a      	blt.n	800d7ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	b2da      	uxtb	r2, r3
 800d7b8:	490c      	ldr	r1, [pc, #48]	; (800d7ec <__NVIC_SetPriority+0x4c>)
 800d7ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7be:	0112      	lsls	r2, r2, #4
 800d7c0:	b2d2      	uxtb	r2, r2
 800d7c2:	440b      	add	r3, r1
 800d7c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d7c8:	e00a      	b.n	800d7e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	b2da      	uxtb	r2, r3
 800d7ce:	4908      	ldr	r1, [pc, #32]	; (800d7f0 <__NVIC_SetPriority+0x50>)
 800d7d0:	79fb      	ldrb	r3, [r7, #7]
 800d7d2:	f003 030f 	and.w	r3, r3, #15
 800d7d6:	3b04      	subs	r3, #4
 800d7d8:	0112      	lsls	r2, r2, #4
 800d7da:	b2d2      	uxtb	r2, r2
 800d7dc:	440b      	add	r3, r1
 800d7de:	761a      	strb	r2, [r3, #24]
}
 800d7e0:	bf00      	nop
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr
 800d7ec:	e000e100 	.word	0xe000e100
 800d7f0:	e000ed00 	.word	0xe000ed00

0800d7f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d7f8:	4b05      	ldr	r3, [pc, #20]	; (800d810 <SysTick_Handler+0x1c>)
 800d7fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d7fc:	f001 feb2 	bl	800f564 <xTaskGetSchedulerState>
 800d800:	4603      	mov	r3, r0
 800d802:	2b01      	cmp	r3, #1
 800d804:	d001      	beq.n	800d80a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d806:	f002 fc97 	bl	8010138 <xPortSysTickHandler>
  }
}
 800d80a:	bf00      	nop
 800d80c:	bd80      	pop	{r7, pc}
 800d80e:	bf00      	nop
 800d810:	e000e010 	.word	0xe000e010

0800d814 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d814:	b580      	push	{r7, lr}
 800d816:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d818:	2100      	movs	r1, #0
 800d81a:	f06f 0004 	mvn.w	r0, #4
 800d81e:	f7ff ffbf 	bl	800d7a0 <__NVIC_SetPriority>
#endif
}
 800d822:	bf00      	nop
 800d824:	bd80      	pop	{r7, pc}
	...

0800d828 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d82e:	f3ef 8305 	mrs	r3, IPSR
 800d832:	603b      	str	r3, [r7, #0]
  return(result);
 800d834:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d836:	2b00      	cmp	r3, #0
 800d838:	d003      	beq.n	800d842 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d83a:	f06f 0305 	mvn.w	r3, #5
 800d83e:	607b      	str	r3, [r7, #4]
 800d840:	e00c      	b.n	800d85c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d842:	4b0a      	ldr	r3, [pc, #40]	; (800d86c <osKernelInitialize+0x44>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d105      	bne.n	800d856 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d84a:	4b08      	ldr	r3, [pc, #32]	; (800d86c <osKernelInitialize+0x44>)
 800d84c:	2201      	movs	r2, #1
 800d84e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d850:	2300      	movs	r3, #0
 800d852:	607b      	str	r3, [r7, #4]
 800d854:	e002      	b.n	800d85c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d856:	f04f 33ff 	mov.w	r3, #4294967295
 800d85a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d85c:	687b      	ldr	r3, [r7, #4]
}
 800d85e:	4618      	mov	r0, r3
 800d860:	370c      	adds	r7, #12
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr
 800d86a:	bf00      	nop
 800d86c:	20000984 	.word	0x20000984

0800d870 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d876:	f3ef 8305 	mrs	r3, IPSR
 800d87a:	603b      	str	r3, [r7, #0]
  return(result);
 800d87c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d003      	beq.n	800d88a <osKernelStart+0x1a>
    stat = osErrorISR;
 800d882:	f06f 0305 	mvn.w	r3, #5
 800d886:	607b      	str	r3, [r7, #4]
 800d888:	e010      	b.n	800d8ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d88a:	4b0b      	ldr	r3, [pc, #44]	; (800d8b8 <osKernelStart+0x48>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	2b01      	cmp	r3, #1
 800d890:	d109      	bne.n	800d8a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d892:	f7ff ffbf 	bl	800d814 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d896:	4b08      	ldr	r3, [pc, #32]	; (800d8b8 <osKernelStart+0x48>)
 800d898:	2202      	movs	r2, #2
 800d89a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d89c:	f001 fa1a 	bl	800ecd4 <vTaskStartScheduler>
      stat = osOK;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	607b      	str	r3, [r7, #4]
 800d8a4:	e002      	b.n	800d8ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d8a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d8ac:	687b      	ldr	r3, [r7, #4]
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3708      	adds	r7, #8
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	20000984 	.word	0x20000984

0800d8bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b08e      	sub	sp, #56	; 0x38
 800d8c0:	af04      	add	r7, sp, #16
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	60b9      	str	r1, [r7, #8]
 800d8c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8cc:	f3ef 8305 	mrs	r3, IPSR
 800d8d0:	617b      	str	r3, [r7, #20]
  return(result);
 800d8d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d17f      	bne.n	800d9d8 <osThreadNew+0x11c>
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d07c      	beq.n	800d9d8 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800d8de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d8e2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d8e4:	2318      	movs	r3, #24
 800d8e6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800d8f0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d045      	beq.n	800d984 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d002      	beq.n	800d906 <osThreadNew+0x4a>
        name = attr->name;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	699b      	ldr	r3, [r3, #24]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d002      	beq.n	800d914 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	699b      	ldr	r3, [r3, #24]
 800d912:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d008      	beq.n	800d92c <osThreadNew+0x70>
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	2b38      	cmp	r3, #56	; 0x38
 800d91e:	d805      	bhi.n	800d92c <osThreadNew+0x70>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	f003 0301 	and.w	r3, r3, #1
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d001      	beq.n	800d930 <osThreadNew+0x74>
        return (NULL);
 800d92c:	2300      	movs	r3, #0
 800d92e:	e054      	b.n	800d9da <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	695b      	ldr	r3, [r3, #20]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d003      	beq.n	800d940 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	695b      	ldr	r3, [r3, #20]
 800d93c:	089b      	lsrs	r3, r3, #2
 800d93e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	689b      	ldr	r3, [r3, #8]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00e      	beq.n	800d966 <osThreadNew+0xaa>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	68db      	ldr	r3, [r3, #12]
 800d94c:	2b6b      	cmp	r3, #107	; 0x6b
 800d94e:	d90a      	bls.n	800d966 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d954:	2b00      	cmp	r3, #0
 800d956:	d006      	beq.n	800d966 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	695b      	ldr	r3, [r3, #20]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d002      	beq.n	800d966 <osThreadNew+0xaa>
        mem = 1;
 800d960:	2301      	movs	r3, #1
 800d962:	61bb      	str	r3, [r7, #24]
 800d964:	e010      	b.n	800d988 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	689b      	ldr	r3, [r3, #8]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d10c      	bne.n	800d988 <osThreadNew+0xcc>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d108      	bne.n	800d988 <osThreadNew+0xcc>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	691b      	ldr	r3, [r3, #16]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d104      	bne.n	800d988 <osThreadNew+0xcc>
          mem = 0;
 800d97e:	2300      	movs	r3, #0
 800d980:	61bb      	str	r3, [r7, #24]
 800d982:	e001      	b.n	800d988 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800d984:	2300      	movs	r3, #0
 800d986:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d988:	69bb      	ldr	r3, [r7, #24]
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d110      	bne.n	800d9b0 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d996:	9202      	str	r2, [sp, #8]
 800d998:	9301      	str	r3, [sp, #4]
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	9300      	str	r3, [sp, #0]
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	6a3a      	ldr	r2, [r7, #32]
 800d9a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d9a4:	68f8      	ldr	r0, [r7, #12]
 800d9a6:	f000 feb9 	bl	800e71c <xTaskCreateStatic>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	613b      	str	r3, [r7, #16]
 800d9ae:	e013      	b.n	800d9d8 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800d9b0:	69bb      	ldr	r3, [r7, #24]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d110      	bne.n	800d9d8 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d9b6:	6a3b      	ldr	r3, [r7, #32]
 800d9b8:	b29a      	uxth	r2, r3
 800d9ba:	f107 0310 	add.w	r3, r7, #16
 800d9be:	9301      	str	r3, [sp, #4]
 800d9c0:	69fb      	ldr	r3, [r7, #28]
 800d9c2:	9300      	str	r3, [sp, #0]
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f000 ff04 	bl	800e7d6 <xTaskCreate>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d001      	beq.n	800d9d8 <osThreadNew+0x11c>
            hTask = NULL;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d9d8:	693b      	ldr	r3, [r7, #16]
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3728      	adds	r7, #40	; 0x28
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b084      	sub	sp, #16
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9ea:	f3ef 8305 	mrs	r3, IPSR
 800d9ee:	60bb      	str	r3, [r7, #8]
  return(result);
 800d9f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d003      	beq.n	800d9fe <osDelay+0x1c>
    stat = osErrorISR;
 800d9f6:	f06f 0305 	mvn.w	r3, #5
 800d9fa:	60fb      	str	r3, [r7, #12]
 800d9fc:	e007      	b.n	800da0e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d9fe:	2300      	movs	r3, #0
 800da00:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d002      	beq.n	800da0e <osDelay+0x2c>
      vTaskDelay(ticks);
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f001 f829 	bl	800ea60 <vTaskDelay>
    }
  }

  return (stat);
 800da0e:	68fb      	ldr	r3, [r7, #12]
}
 800da10:	4618      	mov	r0, r3
 800da12:	3710      	adds	r7, #16
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800da18:	b580      	push	{r7, lr}
 800da1a:	b08a      	sub	sp, #40	; 0x28
 800da1c:	af02      	add	r7, sp, #8
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	60b9      	str	r1, [r7, #8]
 800da22:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800da24:	2300      	movs	r3, #0
 800da26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da28:	f3ef 8305 	mrs	r3, IPSR
 800da2c:	613b      	str	r3, [r7, #16]
  return(result);
 800da2e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800da30:	2b00      	cmp	r3, #0
 800da32:	d15f      	bne.n	800daf4 <osMessageQueueNew+0xdc>
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d05c      	beq.n	800daf4 <osMessageQueueNew+0xdc>
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d059      	beq.n	800daf4 <osMessageQueueNew+0xdc>
    mem = -1;
 800da40:	f04f 33ff 	mov.w	r3, #4294967295
 800da44:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d029      	beq.n	800daa0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	689b      	ldr	r3, [r3, #8]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d012      	beq.n	800da7a <osMessageQueueNew+0x62>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	2b4f      	cmp	r3, #79	; 0x4f
 800da5a:	d90e      	bls.n	800da7a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800da60:	2b00      	cmp	r3, #0
 800da62:	d00a      	beq.n	800da7a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	695a      	ldr	r2, [r3, #20]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	68b9      	ldr	r1, [r7, #8]
 800da6c:	fb01 f303 	mul.w	r3, r1, r3
 800da70:	429a      	cmp	r2, r3
 800da72:	d302      	bcc.n	800da7a <osMessageQueueNew+0x62>
        mem = 1;
 800da74:	2301      	movs	r3, #1
 800da76:	61bb      	str	r3, [r7, #24]
 800da78:	e014      	b.n	800daa4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	689b      	ldr	r3, [r3, #8]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d110      	bne.n	800daa4 <osMessageQueueNew+0x8c>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	68db      	ldr	r3, [r3, #12]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d10c      	bne.n	800daa4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d108      	bne.n	800daa4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	695b      	ldr	r3, [r3, #20]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d104      	bne.n	800daa4 <osMessageQueueNew+0x8c>
          mem = 0;
 800da9a:	2300      	movs	r3, #0
 800da9c:	61bb      	str	r3, [r7, #24]
 800da9e:	e001      	b.n	800daa4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800daa0:	2300      	movs	r3, #0
 800daa2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800daa4:	69bb      	ldr	r3, [r7, #24]
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d10b      	bne.n	800dac2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	691a      	ldr	r2, [r3, #16]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	689b      	ldr	r3, [r3, #8]
 800dab2:	2100      	movs	r1, #0
 800dab4:	9100      	str	r1, [sp, #0]
 800dab6:	68b9      	ldr	r1, [r7, #8]
 800dab8:	68f8      	ldr	r0, [r7, #12]
 800daba:	f000 f971 	bl	800dda0 <xQueueGenericCreateStatic>
 800dabe:	61f8      	str	r0, [r7, #28]
 800dac0:	e008      	b.n	800dad4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d105      	bne.n	800dad4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800dac8:	2200      	movs	r2, #0
 800daca:	68b9      	ldr	r1, [r7, #8]
 800dacc:	68f8      	ldr	r0, [r7, #12]
 800dace:	f000 f9df 	bl	800de90 <xQueueGenericCreate>
 800dad2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800dad4:	69fb      	ldr	r3, [r7, #28]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00c      	beq.n	800daf4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d003      	beq.n	800dae8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	617b      	str	r3, [r7, #20]
 800dae6:	e001      	b.n	800daec <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800dae8:	2300      	movs	r3, #0
 800daea:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800daec:	6979      	ldr	r1, [r7, #20]
 800daee:	69f8      	ldr	r0, [r7, #28]
 800daf0:	f000 fdb6 	bl	800e660 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800daf4:	69fb      	ldr	r3, [r7, #28]
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3720      	adds	r7, #32
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
	...

0800db00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800db00:	b480      	push	{r7}
 800db02:	b085      	sub	sp, #20
 800db04:	af00      	add	r7, sp, #0
 800db06:	60f8      	str	r0, [r7, #12]
 800db08:	60b9      	str	r1, [r7, #8]
 800db0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	4a07      	ldr	r2, [pc, #28]	; (800db2c <vApplicationGetIdleTaskMemory+0x2c>)
 800db10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	4a06      	ldr	r2, [pc, #24]	; (800db30 <vApplicationGetIdleTaskMemory+0x30>)
 800db16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db1e:	601a      	str	r2, [r3, #0]
}
 800db20:	bf00      	nop
 800db22:	3714      	adds	r7, #20
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr
 800db2c:	20000988 	.word	0x20000988
 800db30:	200009f4 	.word	0x200009f4

0800db34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800db34:	b480      	push	{r7}
 800db36:	b085      	sub	sp, #20
 800db38:	af00      	add	r7, sp, #0
 800db3a:	60f8      	str	r0, [r7, #12]
 800db3c:	60b9      	str	r1, [r7, #8]
 800db3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	4a07      	ldr	r2, [pc, #28]	; (800db60 <vApplicationGetTimerTaskMemory+0x2c>)
 800db44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	4a06      	ldr	r2, [pc, #24]	; (800db64 <vApplicationGetTimerTaskMemory+0x30>)
 800db4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db52:	601a      	str	r2, [r3, #0]
}
 800db54:	bf00      	nop
 800db56:	3714      	adds	r7, #20
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr
 800db60:	20000df4 	.word	0x20000df4
 800db64:	20000e60 	.word	0x20000e60

0800db68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800db68:	b480      	push	{r7}
 800db6a:	b083      	sub	sp, #12
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f103 0208 	add.w	r2, r3, #8
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f04f 32ff 	mov.w	r2, #4294967295
 800db80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f103 0208 	add.w	r2, r3, #8
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f103 0208 	add.w	r2, r3, #8
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2200      	movs	r2, #0
 800db9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800db9c:	bf00      	nop
 800db9e:	370c      	adds	r7, #12
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr

0800dba8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b083      	sub	sp, #12
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dbb6:	bf00      	nop
 800dbb8:	370c      	adds	r7, #12
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc0:	4770      	bx	lr

0800dbc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dbc2:	b480      	push	{r7}
 800dbc4:	b085      	sub	sp, #20
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	6078      	str	r0, [r7, #4]
 800dbca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	68fa      	ldr	r2, [r7, #12]
 800dbd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	689a      	ldr	r2, [r3, #8]
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	683a      	ldr	r2, [r7, #0]
 800dbe6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	683a      	ldr	r2, [r7, #0]
 800dbec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	687a      	ldr	r2, [r7, #4]
 800dbf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	1c5a      	adds	r2, r3, #1
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	601a      	str	r2, [r3, #0]
}
 800dbfe:	bf00      	nop
 800dc00:	3714      	adds	r7, #20
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr

0800dc0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dc0a:	b480      	push	{r7}
 800dc0c:	b085      	sub	sp, #20
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
 800dc12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc20:	d103      	bne.n	800dc2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	691b      	ldr	r3, [r3, #16]
 800dc26:	60fb      	str	r3, [r7, #12]
 800dc28:	e00c      	b.n	800dc44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	3308      	adds	r3, #8
 800dc2e:	60fb      	str	r3, [r7, #12]
 800dc30:	e002      	b.n	800dc38 <vListInsert+0x2e>
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	685b      	ldr	r3, [r3, #4]
 800dc36:	60fb      	str	r3, [r7, #12]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	68ba      	ldr	r2, [r7, #8]
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d2f6      	bcs.n	800dc32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	685a      	ldr	r2, [r3, #4]
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	683a      	ldr	r2, [r7, #0]
 800dc52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	68fa      	ldr	r2, [r7, #12]
 800dc58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	683a      	ldr	r2, [r7, #0]
 800dc5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	1c5a      	adds	r2, r3, #1
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	601a      	str	r2, [r3, #0]
}
 800dc70:	bf00      	nop
 800dc72:	3714      	adds	r7, #20
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b085      	sub	sp, #20
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	691b      	ldr	r3, [r3, #16]
 800dc88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	687a      	ldr	r2, [r7, #4]
 800dc90:	6892      	ldr	r2, [r2, #8]
 800dc92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	689b      	ldr	r3, [r3, #8]
 800dc98:	687a      	ldr	r2, [r7, #4]
 800dc9a:	6852      	ldr	r2, [r2, #4]
 800dc9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	687a      	ldr	r2, [r7, #4]
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d103      	bne.n	800dcb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	689a      	ldr	r2, [r3, #8]
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	1e5a      	subs	r2, r3, #1
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681b      	ldr	r3, [r3, #0]
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3714      	adds	r7, #20
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr

0800dcd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d10a      	bne.n	800dcfa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce8:	f383 8811 	msr	BASEPRI, r3
 800dcec:	f3bf 8f6f 	isb	sy
 800dcf0:	f3bf 8f4f 	dsb	sy
 800dcf4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dcf6:	bf00      	nop
 800dcf8:	e7fe      	b.n	800dcf8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800dcfa:	f002 f98b 	bl	8010014 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd06:	68f9      	ldr	r1, [r7, #12]
 800dd08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dd0a:	fb01 f303 	mul.w	r3, r1, r3
 800dd0e:	441a      	add	r2, r3
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2200      	movs	r2, #0
 800dd18:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd2a:	3b01      	subs	r3, #1
 800dd2c:	68f9      	ldr	r1, [r7, #12]
 800dd2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dd30:	fb01 f303 	mul.w	r3, r1, r3
 800dd34:	441a      	add	r2, r3
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	22ff      	movs	r2, #255	; 0xff
 800dd3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	22ff      	movs	r2, #255	; 0xff
 800dd46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d114      	bne.n	800dd7a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	691b      	ldr	r3, [r3, #16]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d01a      	beq.n	800dd8e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	3310      	adds	r3, #16
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f001 fa43 	bl	800f1e8 <xTaskRemoveFromEventList>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d012      	beq.n	800dd8e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dd68:	4b0c      	ldr	r3, [pc, #48]	; (800dd9c <xQueueGenericReset+0xcc>)
 800dd6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd6e:	601a      	str	r2, [r3, #0]
 800dd70:	f3bf 8f4f 	dsb	sy
 800dd74:	f3bf 8f6f 	isb	sy
 800dd78:	e009      	b.n	800dd8e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	3310      	adds	r3, #16
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7ff fef2 	bl	800db68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	3324      	adds	r3, #36	; 0x24
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7ff feed 	bl	800db68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dd8e:	f002 f971 	bl	8010074 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dd92:	2301      	movs	r3, #1
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3710      	adds	r7, #16
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	e000ed04 	.word	0xe000ed04

0800dda0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b08e      	sub	sp, #56	; 0x38
 800dda4:	af02      	add	r7, sp, #8
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	607a      	str	r2, [r7, #4]
 800ddac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d10a      	bne.n	800ddca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ddb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb8:	f383 8811 	msr	BASEPRI, r3
 800ddbc:	f3bf 8f6f 	isb	sy
 800ddc0:	f3bf 8f4f 	dsb	sy
 800ddc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ddc6:	bf00      	nop
 800ddc8:	e7fe      	b.n	800ddc8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d10a      	bne.n	800dde6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ddd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd4:	f383 8811 	msr	BASEPRI, r3
 800ddd8:	f3bf 8f6f 	isb	sy
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dde2:	bf00      	nop
 800dde4:	e7fe      	b.n	800dde4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d002      	beq.n	800ddf2 <xQueueGenericCreateStatic+0x52>
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d001      	beq.n	800ddf6 <xQueueGenericCreateStatic+0x56>
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e000      	b.n	800ddf8 <xQueueGenericCreateStatic+0x58>
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d10a      	bne.n	800de12 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ddfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de00:	f383 8811 	msr	BASEPRI, r3
 800de04:	f3bf 8f6f 	isb	sy
 800de08:	f3bf 8f4f 	dsb	sy
 800de0c:	623b      	str	r3, [r7, #32]
}
 800de0e:	bf00      	nop
 800de10:	e7fe      	b.n	800de10 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d102      	bne.n	800de1e <xQueueGenericCreateStatic+0x7e>
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d101      	bne.n	800de22 <xQueueGenericCreateStatic+0x82>
 800de1e:	2301      	movs	r3, #1
 800de20:	e000      	b.n	800de24 <xQueueGenericCreateStatic+0x84>
 800de22:	2300      	movs	r3, #0
 800de24:	2b00      	cmp	r3, #0
 800de26:	d10a      	bne.n	800de3e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800de28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2c:	f383 8811 	msr	BASEPRI, r3
 800de30:	f3bf 8f6f 	isb	sy
 800de34:	f3bf 8f4f 	dsb	sy
 800de38:	61fb      	str	r3, [r7, #28]
}
 800de3a:	bf00      	nop
 800de3c:	e7fe      	b.n	800de3c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800de3e:	2350      	movs	r3, #80	; 0x50
 800de40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	2b50      	cmp	r3, #80	; 0x50
 800de46:	d00a      	beq.n	800de5e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800de48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de4c:	f383 8811 	msr	BASEPRI, r3
 800de50:	f3bf 8f6f 	isb	sy
 800de54:	f3bf 8f4f 	dsb	sy
 800de58:	61bb      	str	r3, [r7, #24]
}
 800de5a:	bf00      	nop
 800de5c:	e7fe      	b.n	800de5c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800de5e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800de64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de66:	2b00      	cmp	r3, #0
 800de68:	d00d      	beq.n	800de86 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800de6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6c:	2201      	movs	r2, #1
 800de6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800de72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800de76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de78:	9300      	str	r3, [sp, #0]
 800de7a:	4613      	mov	r3, r2
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	68b9      	ldr	r1, [r7, #8]
 800de80:	68f8      	ldr	r0, [r7, #12]
 800de82:	f000 f83f 	bl	800df04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800de86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800de88:	4618      	mov	r0, r3
 800de8a:	3730      	adds	r7, #48	; 0x30
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800de90:	b580      	push	{r7, lr}
 800de92:	b08a      	sub	sp, #40	; 0x28
 800de94:	af02      	add	r7, sp, #8
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	4613      	mov	r3, r2
 800de9c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d10a      	bne.n	800deba <xQueueGenericCreate+0x2a>
	__asm volatile
 800dea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea8:	f383 8811 	msr	BASEPRI, r3
 800deac:	f3bf 8f6f 	isb	sy
 800deb0:	f3bf 8f4f 	dsb	sy
 800deb4:	613b      	str	r3, [r7, #16]
}
 800deb6:	bf00      	nop
 800deb8:	e7fe      	b.n	800deb8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	68ba      	ldr	r2, [r7, #8]
 800debe:	fb02 f303 	mul.w	r3, r2, r3
 800dec2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dec4:	69fb      	ldr	r3, [r7, #28]
 800dec6:	3350      	adds	r3, #80	; 0x50
 800dec8:	4618      	mov	r0, r3
 800deca:	f002 f9c5 	bl	8010258 <pvPortMalloc>
 800dece:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d011      	beq.n	800defa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	3350      	adds	r3, #80	; 0x50
 800dede:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	2200      	movs	r2, #0
 800dee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dee8:	79fa      	ldrb	r2, [r7, #7]
 800deea:	69bb      	ldr	r3, [r7, #24]
 800deec:	9300      	str	r3, [sp, #0]
 800deee:	4613      	mov	r3, r2
 800def0:	697a      	ldr	r2, [r7, #20]
 800def2:	68b9      	ldr	r1, [r7, #8]
 800def4:	68f8      	ldr	r0, [r7, #12]
 800def6:	f000 f805 	bl	800df04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800defa:	69bb      	ldr	r3, [r7, #24]
	}
 800defc:	4618      	mov	r0, r3
 800defe:	3720      	adds	r7, #32
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	607a      	str	r2, [r7, #4]
 800df10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d103      	bne.n	800df20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	69ba      	ldr	r2, [r7, #24]
 800df1c:	601a      	str	r2, [r3, #0]
 800df1e:	e002      	b.n	800df26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800df20:	69bb      	ldr	r3, [r7, #24]
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800df26:	69bb      	ldr	r3, [r7, #24]
 800df28:	68fa      	ldr	r2, [r7, #12]
 800df2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800df2c:	69bb      	ldr	r3, [r7, #24]
 800df2e:	68ba      	ldr	r2, [r7, #8]
 800df30:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800df32:	2101      	movs	r1, #1
 800df34:	69b8      	ldr	r0, [r7, #24]
 800df36:	f7ff fecb 	bl	800dcd0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800df3a:	69bb      	ldr	r3, [r7, #24]
 800df3c:	78fa      	ldrb	r2, [r7, #3]
 800df3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800df42:	bf00      	nop
 800df44:	3710      	adds	r7, #16
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
	...

0800df4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b08e      	sub	sp, #56	; 0x38
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	607a      	str	r2, [r7, #4]
 800df58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800df5a:	2300      	movs	r3, #0
 800df5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800df62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df64:	2b00      	cmp	r3, #0
 800df66:	d10a      	bne.n	800df7e <xQueueGenericSend+0x32>
	__asm volatile
 800df68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6c:	f383 8811 	msr	BASEPRI, r3
 800df70:	f3bf 8f6f 	isb	sy
 800df74:	f3bf 8f4f 	dsb	sy
 800df78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800df7a:	bf00      	nop
 800df7c:	e7fe      	b.n	800df7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d103      	bne.n	800df8c <xQueueGenericSend+0x40>
 800df84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d101      	bne.n	800df90 <xQueueGenericSend+0x44>
 800df8c:	2301      	movs	r3, #1
 800df8e:	e000      	b.n	800df92 <xQueueGenericSend+0x46>
 800df90:	2300      	movs	r3, #0
 800df92:	2b00      	cmp	r3, #0
 800df94:	d10a      	bne.n	800dfac <xQueueGenericSend+0x60>
	__asm volatile
 800df96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df9a:	f383 8811 	msr	BASEPRI, r3
 800df9e:	f3bf 8f6f 	isb	sy
 800dfa2:	f3bf 8f4f 	dsb	sy
 800dfa6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dfa8:	bf00      	nop
 800dfaa:	e7fe      	b.n	800dfaa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	2b02      	cmp	r3, #2
 800dfb0:	d103      	bne.n	800dfba <xQueueGenericSend+0x6e>
 800dfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	d101      	bne.n	800dfbe <xQueueGenericSend+0x72>
 800dfba:	2301      	movs	r3, #1
 800dfbc:	e000      	b.n	800dfc0 <xQueueGenericSend+0x74>
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d10a      	bne.n	800dfda <xQueueGenericSend+0x8e>
	__asm volatile
 800dfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc8:	f383 8811 	msr	BASEPRI, r3
 800dfcc:	f3bf 8f6f 	isb	sy
 800dfd0:	f3bf 8f4f 	dsb	sy
 800dfd4:	623b      	str	r3, [r7, #32]
}
 800dfd6:	bf00      	nop
 800dfd8:	e7fe      	b.n	800dfd8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dfda:	f001 fac3 	bl	800f564 <xTaskGetSchedulerState>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d102      	bne.n	800dfea <xQueueGenericSend+0x9e>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d101      	bne.n	800dfee <xQueueGenericSend+0xa2>
 800dfea:	2301      	movs	r3, #1
 800dfec:	e000      	b.n	800dff0 <xQueueGenericSend+0xa4>
 800dfee:	2300      	movs	r3, #0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d10a      	bne.n	800e00a <xQueueGenericSend+0xbe>
	__asm volatile
 800dff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff8:	f383 8811 	msr	BASEPRI, r3
 800dffc:	f3bf 8f6f 	isb	sy
 800e000:	f3bf 8f4f 	dsb	sy
 800e004:	61fb      	str	r3, [r7, #28]
}
 800e006:	bf00      	nop
 800e008:	e7fe      	b.n	800e008 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e00a:	f002 f803 	bl	8010014 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e016:	429a      	cmp	r2, r3
 800e018:	d302      	bcc.n	800e020 <xQueueGenericSend+0xd4>
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	2b02      	cmp	r3, #2
 800e01e:	d129      	bne.n	800e074 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e020:	683a      	ldr	r2, [r7, #0]
 800e022:	68b9      	ldr	r1, [r7, #8]
 800e024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e026:	f000 fa0b 	bl	800e440 <prvCopyDataToQueue>
 800e02a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e030:	2b00      	cmp	r3, #0
 800e032:	d010      	beq.n	800e056 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e036:	3324      	adds	r3, #36	; 0x24
 800e038:	4618      	mov	r0, r3
 800e03a:	f001 f8d5 	bl	800f1e8 <xTaskRemoveFromEventList>
 800e03e:	4603      	mov	r3, r0
 800e040:	2b00      	cmp	r3, #0
 800e042:	d013      	beq.n	800e06c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e044:	4b3f      	ldr	r3, [pc, #252]	; (800e144 <xQueueGenericSend+0x1f8>)
 800e046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e04a:	601a      	str	r2, [r3, #0]
 800e04c:	f3bf 8f4f 	dsb	sy
 800e050:	f3bf 8f6f 	isb	sy
 800e054:	e00a      	b.n	800e06c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d007      	beq.n	800e06c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e05c:	4b39      	ldr	r3, [pc, #228]	; (800e144 <xQueueGenericSend+0x1f8>)
 800e05e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e062:	601a      	str	r2, [r3, #0]
 800e064:	f3bf 8f4f 	dsb	sy
 800e068:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e06c:	f002 f802 	bl	8010074 <vPortExitCritical>
				return pdPASS;
 800e070:	2301      	movs	r3, #1
 800e072:	e063      	b.n	800e13c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d103      	bne.n	800e082 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e07a:	f001 fffb 	bl	8010074 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e07e:	2300      	movs	r3, #0
 800e080:	e05c      	b.n	800e13c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e084:	2b00      	cmp	r3, #0
 800e086:	d106      	bne.n	800e096 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e088:	f107 0314 	add.w	r3, r7, #20
 800e08c:	4618      	mov	r0, r3
 800e08e:	f001 f90f 	bl	800f2b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e092:	2301      	movs	r3, #1
 800e094:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e096:	f001 ffed 	bl	8010074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e09a:	f000 fe81 	bl	800eda0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e09e:	f001 ffb9 	bl	8010014 <vPortEnterCritical>
 800e0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e0a8:	b25b      	sxtb	r3, r3
 800e0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ae:	d103      	bne.n	800e0b8 <xQueueGenericSend+0x16c>
 800e0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e0be:	b25b      	sxtb	r3, r3
 800e0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0c4:	d103      	bne.n	800e0ce <xQueueGenericSend+0x182>
 800e0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e0ce:	f001 ffd1 	bl	8010074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e0d2:	1d3a      	adds	r2, r7, #4
 800e0d4:	f107 0314 	add.w	r3, r7, #20
 800e0d8:	4611      	mov	r1, r2
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f001 f8fe 	bl	800f2dc <xTaskCheckForTimeOut>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d124      	bne.n	800e130 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e0e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0e8:	f000 faa2 	bl	800e630 <prvIsQueueFull>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d018      	beq.n	800e124 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f4:	3310      	adds	r3, #16
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	4611      	mov	r1, r2
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f001 f824 	bl	800f148 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e102:	f000 fa2d 	bl	800e560 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e106:	f000 fe59 	bl	800edbc <xTaskResumeAll>
 800e10a:	4603      	mov	r3, r0
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	f47f af7c 	bne.w	800e00a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e112:	4b0c      	ldr	r3, [pc, #48]	; (800e144 <xQueueGenericSend+0x1f8>)
 800e114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e118:	601a      	str	r2, [r3, #0]
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	f3bf 8f6f 	isb	sy
 800e122:	e772      	b.n	800e00a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e126:	f000 fa1b 	bl	800e560 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e12a:	f000 fe47 	bl	800edbc <xTaskResumeAll>
 800e12e:	e76c      	b.n	800e00a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e132:	f000 fa15 	bl	800e560 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e136:	f000 fe41 	bl	800edbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e13a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3738      	adds	r7, #56	; 0x38
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	e000ed04 	.word	0xe000ed04

0800e148 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b090      	sub	sp, #64	; 0x40
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	60f8      	str	r0, [r7, #12]
 800e150:	60b9      	str	r1, [r7, #8]
 800e152:	607a      	str	r2, [r7, #4]
 800e154:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d10a      	bne.n	800e176 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e164:	f383 8811 	msr	BASEPRI, r3
 800e168:	f3bf 8f6f 	isb	sy
 800e16c:	f3bf 8f4f 	dsb	sy
 800e170:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e172:	bf00      	nop
 800e174:	e7fe      	b.n	800e174 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d103      	bne.n	800e184 <xQueueGenericSendFromISR+0x3c>
 800e17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e180:	2b00      	cmp	r3, #0
 800e182:	d101      	bne.n	800e188 <xQueueGenericSendFromISR+0x40>
 800e184:	2301      	movs	r3, #1
 800e186:	e000      	b.n	800e18a <xQueueGenericSendFromISR+0x42>
 800e188:	2300      	movs	r3, #0
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d10a      	bne.n	800e1a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e192:	f383 8811 	msr	BASEPRI, r3
 800e196:	f3bf 8f6f 	isb	sy
 800e19a:	f3bf 8f4f 	dsb	sy
 800e19e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e1a0:	bf00      	nop
 800e1a2:	e7fe      	b.n	800e1a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	2b02      	cmp	r3, #2
 800e1a8:	d103      	bne.n	800e1b2 <xQueueGenericSendFromISR+0x6a>
 800e1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	d101      	bne.n	800e1b6 <xQueueGenericSendFromISR+0x6e>
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	e000      	b.n	800e1b8 <xQueueGenericSendFromISR+0x70>
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d10a      	bne.n	800e1d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c0:	f383 8811 	msr	BASEPRI, r3
 800e1c4:	f3bf 8f6f 	isb	sy
 800e1c8:	f3bf 8f4f 	dsb	sy
 800e1cc:	623b      	str	r3, [r7, #32]
}
 800e1ce:	bf00      	nop
 800e1d0:	e7fe      	b.n	800e1d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e1d2:	f002 f801 	bl	80101d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e1d6:	f3ef 8211 	mrs	r2, BASEPRI
 800e1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1de:	f383 8811 	msr	BASEPRI, r3
 800e1e2:	f3bf 8f6f 	isb	sy
 800e1e6:	f3bf 8f4f 	dsb	sy
 800e1ea:	61fa      	str	r2, [r7, #28]
 800e1ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e1ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d302      	bcc.n	800e204 <xQueueGenericSendFromISR+0xbc>
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	2b02      	cmp	r3, #2
 800e202:	d12f      	bne.n	800e264 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e206:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e20a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e212:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e214:	683a      	ldr	r2, [r7, #0]
 800e216:	68b9      	ldr	r1, [r7, #8]
 800e218:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e21a:	f000 f911 	bl	800e440 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e21e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e226:	d112      	bne.n	800e24e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d016      	beq.n	800e25e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e232:	3324      	adds	r3, #36	; 0x24
 800e234:	4618      	mov	r0, r3
 800e236:	f000 ffd7 	bl	800f1e8 <xTaskRemoveFromEventList>
 800e23a:	4603      	mov	r3, r0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d00e      	beq.n	800e25e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00b      	beq.n	800e25e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2201      	movs	r2, #1
 800e24a:	601a      	str	r2, [r3, #0]
 800e24c:	e007      	b.n	800e25e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e24e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e252:	3301      	adds	r3, #1
 800e254:	b2db      	uxtb	r3, r3
 800e256:	b25a      	sxtb	r2, r3
 800e258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e25e:	2301      	movs	r3, #1
 800e260:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e262:	e001      	b.n	800e268 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e264:	2300      	movs	r3, #0
 800e266:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e26a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e272:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e276:	4618      	mov	r0, r3
 800e278:	3740      	adds	r7, #64	; 0x40
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
	...

0800e280 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b08c      	sub	sp, #48	; 0x30
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	60b9      	str	r1, [r7, #8]
 800e28a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e28c:	2300      	movs	r3, #0
 800e28e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e296:	2b00      	cmp	r3, #0
 800e298:	d10a      	bne.n	800e2b0 <xQueueReceive+0x30>
	__asm volatile
 800e29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29e:	f383 8811 	msr	BASEPRI, r3
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	623b      	str	r3, [r7, #32]
}
 800e2ac:	bf00      	nop
 800e2ae:	e7fe      	b.n	800e2ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d103      	bne.n	800e2be <xQueueReceive+0x3e>
 800e2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d101      	bne.n	800e2c2 <xQueueReceive+0x42>
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e000      	b.n	800e2c4 <xQueueReceive+0x44>
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d10a      	bne.n	800e2de <xQueueReceive+0x5e>
	__asm volatile
 800e2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2cc:	f383 8811 	msr	BASEPRI, r3
 800e2d0:	f3bf 8f6f 	isb	sy
 800e2d4:	f3bf 8f4f 	dsb	sy
 800e2d8:	61fb      	str	r3, [r7, #28]
}
 800e2da:	bf00      	nop
 800e2dc:	e7fe      	b.n	800e2dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e2de:	f001 f941 	bl	800f564 <xTaskGetSchedulerState>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d102      	bne.n	800e2ee <xQueueReceive+0x6e>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d101      	bne.n	800e2f2 <xQueueReceive+0x72>
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	e000      	b.n	800e2f4 <xQueueReceive+0x74>
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d10a      	bne.n	800e30e <xQueueReceive+0x8e>
	__asm volatile
 800e2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2fc:	f383 8811 	msr	BASEPRI, r3
 800e300:	f3bf 8f6f 	isb	sy
 800e304:	f3bf 8f4f 	dsb	sy
 800e308:	61bb      	str	r3, [r7, #24]
}
 800e30a:	bf00      	nop
 800e30c:	e7fe      	b.n	800e30c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e30e:	f001 fe81 	bl	8010014 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e316:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d01f      	beq.n	800e35e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e31e:	68b9      	ldr	r1, [r7, #8]
 800e320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e322:	f000 f8f7 	bl	800e514 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e328:	1e5a      	subs	r2, r3, #1
 800e32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e330:	691b      	ldr	r3, [r3, #16]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d00f      	beq.n	800e356 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e338:	3310      	adds	r3, #16
 800e33a:	4618      	mov	r0, r3
 800e33c:	f000 ff54 	bl	800f1e8 <xTaskRemoveFromEventList>
 800e340:	4603      	mov	r3, r0
 800e342:	2b00      	cmp	r3, #0
 800e344:	d007      	beq.n	800e356 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e346:	4b3d      	ldr	r3, [pc, #244]	; (800e43c <xQueueReceive+0x1bc>)
 800e348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e34c:	601a      	str	r2, [r3, #0]
 800e34e:	f3bf 8f4f 	dsb	sy
 800e352:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e356:	f001 fe8d 	bl	8010074 <vPortExitCritical>
				return pdPASS;
 800e35a:	2301      	movs	r3, #1
 800e35c:	e069      	b.n	800e432 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d103      	bne.n	800e36c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e364:	f001 fe86 	bl	8010074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e368:	2300      	movs	r3, #0
 800e36a:	e062      	b.n	800e432 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d106      	bne.n	800e380 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e372:	f107 0310 	add.w	r3, r7, #16
 800e376:	4618      	mov	r0, r3
 800e378:	f000 ff9a 	bl	800f2b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e37c:	2301      	movs	r3, #1
 800e37e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e380:	f001 fe78 	bl	8010074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e384:	f000 fd0c 	bl	800eda0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e388:	f001 fe44 	bl	8010014 <vPortEnterCritical>
 800e38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e392:	b25b      	sxtb	r3, r3
 800e394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e398:	d103      	bne.n	800e3a2 <xQueueReceive+0x122>
 800e39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39c:	2200      	movs	r2, #0
 800e39e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3a8:	b25b      	sxtb	r3, r3
 800e3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ae:	d103      	bne.n	800e3b8 <xQueueReceive+0x138>
 800e3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3b8:	f001 fe5c 	bl	8010074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e3bc:	1d3a      	adds	r2, r7, #4
 800e3be:	f107 0310 	add.w	r3, r7, #16
 800e3c2:	4611      	mov	r1, r2
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f000 ff89 	bl	800f2dc <xTaskCheckForTimeOut>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d123      	bne.n	800e418 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e3d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3d2:	f000 f917 	bl	800e604 <prvIsQueueEmpty>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d017      	beq.n	800e40c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3de:	3324      	adds	r3, #36	; 0x24
 800e3e0:	687a      	ldr	r2, [r7, #4]
 800e3e2:	4611      	mov	r1, r2
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f000 feaf 	bl	800f148 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e3ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3ec:	f000 f8b8 	bl	800e560 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e3f0:	f000 fce4 	bl	800edbc <xTaskResumeAll>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d189      	bne.n	800e30e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e3fa:	4b10      	ldr	r3, [pc, #64]	; (800e43c <xQueueReceive+0x1bc>)
 800e3fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e400:	601a      	str	r2, [r3, #0]
 800e402:	f3bf 8f4f 	dsb	sy
 800e406:	f3bf 8f6f 	isb	sy
 800e40a:	e780      	b.n	800e30e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e40c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e40e:	f000 f8a7 	bl	800e560 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e412:	f000 fcd3 	bl	800edbc <xTaskResumeAll>
 800e416:	e77a      	b.n	800e30e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e41a:	f000 f8a1 	bl	800e560 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e41e:	f000 fccd 	bl	800edbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e424:	f000 f8ee 	bl	800e604 <prvIsQueueEmpty>
 800e428:	4603      	mov	r3, r0
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	f43f af6f 	beq.w	800e30e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e430:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e432:	4618      	mov	r0, r3
 800e434:	3730      	adds	r7, #48	; 0x30
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	e000ed04 	.word	0xe000ed04

0800e440 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b086      	sub	sp, #24
 800e444:	af00      	add	r7, sp, #0
 800e446:	60f8      	str	r0, [r7, #12]
 800e448:	60b9      	str	r1, [r7, #8]
 800e44a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e44c:	2300      	movs	r3, #0
 800e44e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e454:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d10d      	bne.n	800e47a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d14d      	bne.n	800e502 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	689b      	ldr	r3, [r3, #8]
 800e46a:	4618      	mov	r0, r3
 800e46c:	f001 f898 	bl	800f5a0 <xTaskPriorityDisinherit>
 800e470:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	2200      	movs	r2, #0
 800e476:	609a      	str	r2, [r3, #8]
 800e478:	e043      	b.n	800e502 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d119      	bne.n	800e4b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	6858      	ldr	r0, [r3, #4]
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e488:	461a      	mov	r2, r3
 800e48a:	68b9      	ldr	r1, [r7, #8]
 800e48c:	f002 fe36 	bl	80110fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	685a      	ldr	r2, [r3, #4]
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e498:	441a      	add	r2, r3
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	685a      	ldr	r2, [r3, #4]
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	689b      	ldr	r3, [r3, #8]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d32b      	bcc.n	800e502 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681a      	ldr	r2, [r3, #0]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	605a      	str	r2, [r3, #4]
 800e4b2:	e026      	b.n	800e502 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	68d8      	ldr	r0, [r3, #12]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4bc:	461a      	mov	r2, r3
 800e4be:	68b9      	ldr	r1, [r7, #8]
 800e4c0:	f002 fe1c 	bl	80110fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	68da      	ldr	r2, [r3, #12]
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4cc:	425b      	negs	r3, r3
 800e4ce:	441a      	add	r2, r3
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	68da      	ldr	r2, [r3, #12]
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d207      	bcs.n	800e4f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	689a      	ldr	r2, [r3, #8]
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4e8:	425b      	negs	r3, r3
 800e4ea:	441a      	add	r2, r3
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2b02      	cmp	r3, #2
 800e4f4:	d105      	bne.n	800e502 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d002      	beq.n	800e502 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	3b01      	subs	r3, #1
 800e500:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	1c5a      	adds	r2, r3, #1
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e50a:	697b      	ldr	r3, [r7, #20]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3718      	adds	r7, #24
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b082      	sub	sp, #8
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e522:	2b00      	cmp	r3, #0
 800e524:	d018      	beq.n	800e558 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	68da      	ldr	r2, [r3, #12]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e52e:	441a      	add	r2, r3
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	68da      	ldr	r2, [r3, #12]
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	689b      	ldr	r3, [r3, #8]
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d303      	bcc.n	800e548 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681a      	ldr	r2, [r3, #0]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	68d9      	ldr	r1, [r3, #12]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e550:	461a      	mov	r2, r3
 800e552:	6838      	ldr	r0, [r7, #0]
 800e554:	f002 fdd2 	bl	80110fc <memcpy>
	}
}
 800e558:	bf00      	nop
 800e55a:	3708      	adds	r7, #8
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b084      	sub	sp, #16
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e568:	f001 fd54 	bl	8010014 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e572:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e574:	e011      	b.n	800e59a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d012      	beq.n	800e5a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	3324      	adds	r3, #36	; 0x24
 800e582:	4618      	mov	r0, r3
 800e584:	f000 fe30 	bl	800f1e8 <xTaskRemoveFromEventList>
 800e588:	4603      	mov	r3, r0
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d001      	beq.n	800e592 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e58e:	f000 ff07 	bl	800f3a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e592:	7bfb      	ldrb	r3, [r7, #15]
 800e594:	3b01      	subs	r3, #1
 800e596:	b2db      	uxtb	r3, r3
 800e598:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e59a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	dce9      	bgt.n	800e576 <prvUnlockQueue+0x16>
 800e5a2:	e000      	b.n	800e5a6 <prvUnlockQueue+0x46>
					break;
 800e5a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	22ff      	movs	r2, #255	; 0xff
 800e5aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e5ae:	f001 fd61 	bl	8010074 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e5b2:	f001 fd2f 	bl	8010014 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e5bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e5be:	e011      	b.n	800e5e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	691b      	ldr	r3, [r3, #16]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d012      	beq.n	800e5ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	3310      	adds	r3, #16
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f000 fe0b 	bl	800f1e8 <xTaskRemoveFromEventList>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d001      	beq.n	800e5dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e5d8:	f000 fee2 	bl	800f3a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e5dc:	7bbb      	ldrb	r3, [r7, #14]
 800e5de:	3b01      	subs	r3, #1
 800e5e0:	b2db      	uxtb	r3, r3
 800e5e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e5e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	dce9      	bgt.n	800e5c0 <prvUnlockQueue+0x60>
 800e5ec:	e000      	b.n	800e5f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e5ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	22ff      	movs	r2, #255	; 0xff
 800e5f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e5f8:	f001 fd3c 	bl	8010074 <vPortExitCritical>
}
 800e5fc:	bf00      	nop
 800e5fe:	3710      	adds	r7, #16
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e60c:	f001 fd02 	bl	8010014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e614:	2b00      	cmp	r3, #0
 800e616:	d102      	bne.n	800e61e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e618:	2301      	movs	r3, #1
 800e61a:	60fb      	str	r3, [r7, #12]
 800e61c:	e001      	b.n	800e622 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e61e:	2300      	movs	r3, #0
 800e620:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e622:	f001 fd27 	bl	8010074 <vPortExitCritical>

	return xReturn;
 800e626:	68fb      	ldr	r3, [r7, #12]
}
 800e628:	4618      	mov	r0, r3
 800e62a:	3710      	adds	r7, #16
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}

0800e630 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b084      	sub	sp, #16
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e638:	f001 fcec 	bl	8010014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e644:	429a      	cmp	r2, r3
 800e646:	d102      	bne.n	800e64e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e648:	2301      	movs	r3, #1
 800e64a:	60fb      	str	r3, [r7, #12]
 800e64c:	e001      	b.n	800e652 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e64e:	2300      	movs	r3, #0
 800e650:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e652:	f001 fd0f 	bl	8010074 <vPortExitCritical>

	return xReturn;
 800e656:	68fb      	ldr	r3, [r7, #12]
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3710      	adds	r7, #16
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e660:	b480      	push	{r7}
 800e662:	b085      	sub	sp, #20
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e66a:	2300      	movs	r3, #0
 800e66c:	60fb      	str	r3, [r7, #12]
 800e66e:	e014      	b.n	800e69a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e670:	4a0f      	ldr	r2, [pc, #60]	; (800e6b0 <vQueueAddToRegistry+0x50>)
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d10b      	bne.n	800e694 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e67c:	490c      	ldr	r1, [pc, #48]	; (800e6b0 <vQueueAddToRegistry+0x50>)
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	683a      	ldr	r2, [r7, #0]
 800e682:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e686:	4a0a      	ldr	r2, [pc, #40]	; (800e6b0 <vQueueAddToRegistry+0x50>)
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	00db      	lsls	r3, r3, #3
 800e68c:	4413      	add	r3, r2
 800e68e:	687a      	ldr	r2, [r7, #4]
 800e690:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e692:	e006      	b.n	800e6a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	3301      	adds	r3, #1
 800e698:	60fb      	str	r3, [r7, #12]
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2b07      	cmp	r3, #7
 800e69e:	d9e7      	bls.n	800e670 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e6a0:	bf00      	nop
 800e6a2:	bf00      	nop
 800e6a4:	3714      	adds	r7, #20
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ac:	4770      	bx	lr
 800e6ae:	bf00      	nop
 800e6b0:	20001660 	.word	0x20001660

0800e6b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b086      	sub	sp, #24
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e6c4:	f001 fca6 	bl	8010014 <vPortEnterCritical>
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e6ce:	b25b      	sxtb	r3, r3
 800e6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6d4:	d103      	bne.n	800e6de <vQueueWaitForMessageRestricted+0x2a>
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6e4:	b25b      	sxtb	r3, r3
 800e6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6ea:	d103      	bne.n	800e6f4 <vQueueWaitForMessageRestricted+0x40>
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e6f4:	f001 fcbe 	bl	8010074 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d106      	bne.n	800e70e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	3324      	adds	r3, #36	; 0x24
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	68b9      	ldr	r1, [r7, #8]
 800e708:	4618      	mov	r0, r3
 800e70a:	f000 fd41 	bl	800f190 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e70e:	6978      	ldr	r0, [r7, #20]
 800e710:	f7ff ff26 	bl	800e560 <prvUnlockQueue>
	}
 800e714:	bf00      	nop
 800e716:	3718      	adds	r7, #24
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b08e      	sub	sp, #56	; 0x38
 800e720:	af04      	add	r7, sp, #16
 800e722:	60f8      	str	r0, [r7, #12]
 800e724:	60b9      	str	r1, [r7, #8]
 800e726:	607a      	str	r2, [r7, #4]
 800e728:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d10a      	bne.n	800e746 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e734:	f383 8811 	msr	BASEPRI, r3
 800e738:	f3bf 8f6f 	isb	sy
 800e73c:	f3bf 8f4f 	dsb	sy
 800e740:	623b      	str	r3, [r7, #32]
}
 800e742:	bf00      	nop
 800e744:	e7fe      	b.n	800e744 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d10a      	bne.n	800e762 <xTaskCreateStatic+0x46>
	__asm volatile
 800e74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e750:	f383 8811 	msr	BASEPRI, r3
 800e754:	f3bf 8f6f 	isb	sy
 800e758:	f3bf 8f4f 	dsb	sy
 800e75c:	61fb      	str	r3, [r7, #28]
}
 800e75e:	bf00      	nop
 800e760:	e7fe      	b.n	800e760 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e762:	236c      	movs	r3, #108	; 0x6c
 800e764:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	2b6c      	cmp	r3, #108	; 0x6c
 800e76a:	d00a      	beq.n	800e782 <xTaskCreateStatic+0x66>
	__asm volatile
 800e76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e770:	f383 8811 	msr	BASEPRI, r3
 800e774:	f3bf 8f6f 	isb	sy
 800e778:	f3bf 8f4f 	dsb	sy
 800e77c:	61bb      	str	r3, [r7, #24]
}
 800e77e:	bf00      	nop
 800e780:	e7fe      	b.n	800e780 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e782:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e786:	2b00      	cmp	r3, #0
 800e788:	d01e      	beq.n	800e7c8 <xTaskCreateStatic+0xac>
 800e78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d01b      	beq.n	800e7c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e792:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e798:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79c:	2202      	movs	r2, #2
 800e79e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	9303      	str	r3, [sp, #12]
 800e7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a8:	9302      	str	r3, [sp, #8]
 800e7aa:	f107 0314 	add.w	r3, r7, #20
 800e7ae:	9301      	str	r3, [sp, #4]
 800e7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b2:	9300      	str	r3, [sp, #0]
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	68b9      	ldr	r1, [r7, #8]
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	f000 f850 	bl	800e860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e7c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7c2:	f000 f8dd 	bl	800e980 <prvAddNewTaskToReadyList>
 800e7c6:	e001      	b.n	800e7cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e7cc:	697b      	ldr	r3, [r7, #20]
	}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3728      	adds	r7, #40	; 0x28
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}

0800e7d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e7d6:	b580      	push	{r7, lr}
 800e7d8:	b08c      	sub	sp, #48	; 0x30
 800e7da:	af04      	add	r7, sp, #16
 800e7dc:	60f8      	str	r0, [r7, #12]
 800e7de:	60b9      	str	r1, [r7, #8]
 800e7e0:	603b      	str	r3, [r7, #0]
 800e7e2:	4613      	mov	r3, r2
 800e7e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e7e6:	88fb      	ldrh	r3, [r7, #6]
 800e7e8:	009b      	lsls	r3, r3, #2
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f001 fd34 	bl	8010258 <pvPortMalloc>
 800e7f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d00e      	beq.n	800e816 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e7f8:	206c      	movs	r0, #108	; 0x6c
 800e7fa:	f001 fd2d 	bl	8010258 <pvPortMalloc>
 800e7fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e800:	69fb      	ldr	r3, [r7, #28]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d003      	beq.n	800e80e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e806:	69fb      	ldr	r3, [r7, #28]
 800e808:	697a      	ldr	r2, [r7, #20]
 800e80a:	631a      	str	r2, [r3, #48]	; 0x30
 800e80c:	e005      	b.n	800e81a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e80e:	6978      	ldr	r0, [r7, #20]
 800e810:	f001 fdee 	bl	80103f0 <vPortFree>
 800e814:	e001      	b.n	800e81a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e816:	2300      	movs	r3, #0
 800e818:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e81a:	69fb      	ldr	r3, [r7, #28]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d017      	beq.n	800e850 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	2200      	movs	r2, #0
 800e824:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e828:	88fa      	ldrh	r2, [r7, #6]
 800e82a:	2300      	movs	r3, #0
 800e82c:	9303      	str	r3, [sp, #12]
 800e82e:	69fb      	ldr	r3, [r7, #28]
 800e830:	9302      	str	r3, [sp, #8]
 800e832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e834:	9301      	str	r3, [sp, #4]
 800e836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e838:	9300      	str	r3, [sp, #0]
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	68b9      	ldr	r1, [r7, #8]
 800e83e:	68f8      	ldr	r0, [r7, #12]
 800e840:	f000 f80e 	bl	800e860 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e844:	69f8      	ldr	r0, [r7, #28]
 800e846:	f000 f89b 	bl	800e980 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e84a:	2301      	movs	r3, #1
 800e84c:	61bb      	str	r3, [r7, #24]
 800e84e:	e002      	b.n	800e856 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e850:	f04f 33ff 	mov.w	r3, #4294967295
 800e854:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e856:	69bb      	ldr	r3, [r7, #24]
	}
 800e858:	4618      	mov	r0, r3
 800e85a:	3720      	adds	r7, #32
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}

0800e860 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b088      	sub	sp, #32
 800e864:	af00      	add	r7, sp, #0
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	60b9      	str	r1, [r7, #8]
 800e86a:	607a      	str	r2, [r7, #4]
 800e86c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e870:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	461a      	mov	r2, r3
 800e878:	21a5      	movs	r1, #165	; 0xa5
 800e87a:	f002 fc4d 	bl	8011118 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e888:	3b01      	subs	r3, #1
 800e88a:	009b      	lsls	r3, r3, #2
 800e88c:	4413      	add	r3, r2
 800e88e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e890:	69bb      	ldr	r3, [r7, #24]
 800e892:	f023 0307 	bic.w	r3, r3, #7
 800e896:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e898:	69bb      	ldr	r3, [r7, #24]
 800e89a:	f003 0307 	and.w	r3, r3, #7
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d00a      	beq.n	800e8b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a6:	f383 8811 	msr	BASEPRI, r3
 800e8aa:	f3bf 8f6f 	isb	sy
 800e8ae:	f3bf 8f4f 	dsb	sy
 800e8b2:	617b      	str	r3, [r7, #20]
}
 800e8b4:	bf00      	nop
 800e8b6:	e7fe      	b.n	800e8b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d01f      	beq.n	800e8fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e8be:	2300      	movs	r3, #0
 800e8c0:	61fb      	str	r3, [r7, #28]
 800e8c2:	e012      	b.n	800e8ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e8c4:	68ba      	ldr	r2, [r7, #8]
 800e8c6:	69fb      	ldr	r3, [r7, #28]
 800e8c8:	4413      	add	r3, r2
 800e8ca:	7819      	ldrb	r1, [r3, #0]
 800e8cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8ce:	69fb      	ldr	r3, [r7, #28]
 800e8d0:	4413      	add	r3, r2
 800e8d2:	3334      	adds	r3, #52	; 0x34
 800e8d4:	460a      	mov	r2, r1
 800e8d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e8d8:	68ba      	ldr	r2, [r7, #8]
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	4413      	add	r3, r2
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d006      	beq.n	800e8f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e8e4:	69fb      	ldr	r3, [r7, #28]
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	61fb      	str	r3, [r7, #28]
 800e8ea:	69fb      	ldr	r3, [r7, #28]
 800e8ec:	2b1d      	cmp	r3, #29
 800e8ee:	d9e9      	bls.n	800e8c4 <prvInitialiseNewTask+0x64>
 800e8f0:	e000      	b.n	800e8f4 <prvInitialiseNewTask+0x94>
			{
				break;
 800e8f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800e8fc:	e003      	b.n	800e906 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e900:	2200      	movs	r2, #0
 800e902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e908:	2b37      	cmp	r3, #55	; 0x37
 800e90a:	d901      	bls.n	800e910 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e90c:	2337      	movs	r3, #55	; 0x37
 800e90e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e914:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e91a:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800e91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e91e:	2200      	movs	r2, #0
 800e920:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e924:	3304      	adds	r3, #4
 800e926:	4618      	mov	r0, r3
 800e928:	f7ff f93e 	bl	800dba8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e92e:	3318      	adds	r3, #24
 800e930:	4618      	mov	r0, r3
 800e932:	f7ff f939 	bl	800dba8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e93a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e93e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e944:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e94a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e94e:	2200      	movs	r2, #0
 800e950:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e954:	2200      	movs	r2, #0
 800e956:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e95a:	683a      	ldr	r2, [r7, #0]
 800e95c:	68f9      	ldr	r1, [r7, #12]
 800e95e:	69b8      	ldr	r0, [r7, #24]
 800e960:	f001 fa2e 	bl	800fdc0 <pxPortInitialiseStack>
 800e964:	4602      	mov	r2, r0
 800e966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e968:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d002      	beq.n	800e976 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e976:	bf00      	nop
 800e978:	3720      	adds	r7, #32
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
	...

0800e980 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e988:	f001 fb44 	bl	8010014 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e98c:	4b2d      	ldr	r3, [pc, #180]	; (800ea44 <prvAddNewTaskToReadyList+0xc4>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	3301      	adds	r3, #1
 800e992:	4a2c      	ldr	r2, [pc, #176]	; (800ea44 <prvAddNewTaskToReadyList+0xc4>)
 800e994:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e996:	4b2c      	ldr	r3, [pc, #176]	; (800ea48 <prvAddNewTaskToReadyList+0xc8>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d109      	bne.n	800e9b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e99e:	4a2a      	ldr	r2, [pc, #168]	; (800ea48 <prvAddNewTaskToReadyList+0xc8>)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e9a4:	4b27      	ldr	r3, [pc, #156]	; (800ea44 <prvAddNewTaskToReadyList+0xc4>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d110      	bne.n	800e9ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e9ac:	f000 fd1c 	bl	800f3e8 <prvInitialiseTaskLists>
 800e9b0:	e00d      	b.n	800e9ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e9b2:	4b26      	ldr	r3, [pc, #152]	; (800ea4c <prvAddNewTaskToReadyList+0xcc>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d109      	bne.n	800e9ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e9ba:	4b23      	ldr	r3, [pc, #140]	; (800ea48 <prvAddNewTaskToReadyList+0xc8>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d802      	bhi.n	800e9ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e9c8:	4a1f      	ldr	r2, [pc, #124]	; (800ea48 <prvAddNewTaskToReadyList+0xc8>)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e9ce:	4b20      	ldr	r3, [pc, #128]	; (800ea50 <prvAddNewTaskToReadyList+0xd0>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	4a1e      	ldr	r2, [pc, #120]	; (800ea50 <prvAddNewTaskToReadyList+0xd0>)
 800e9d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e9d8:	4b1d      	ldr	r3, [pc, #116]	; (800ea50 <prvAddNewTaskToReadyList+0xd0>)
 800e9da:	681a      	ldr	r2, [r3, #0]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9e4:	4b1b      	ldr	r3, [pc, #108]	; (800ea54 <prvAddNewTaskToReadyList+0xd4>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d903      	bls.n	800e9f4 <prvAddNewTaskToReadyList+0x74>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9f0:	4a18      	ldr	r2, [pc, #96]	; (800ea54 <prvAddNewTaskToReadyList+0xd4>)
 800e9f2:	6013      	str	r3, [r2, #0]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9f8:	4613      	mov	r3, r2
 800e9fa:	009b      	lsls	r3, r3, #2
 800e9fc:	4413      	add	r3, r2
 800e9fe:	009b      	lsls	r3, r3, #2
 800ea00:	4a15      	ldr	r2, [pc, #84]	; (800ea58 <prvAddNewTaskToReadyList+0xd8>)
 800ea02:	441a      	add	r2, r3
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	3304      	adds	r3, #4
 800ea08:	4619      	mov	r1, r3
 800ea0a:	4610      	mov	r0, r2
 800ea0c:	f7ff f8d9 	bl	800dbc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ea10:	f001 fb30 	bl	8010074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ea14:	4b0d      	ldr	r3, [pc, #52]	; (800ea4c <prvAddNewTaskToReadyList+0xcc>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d00e      	beq.n	800ea3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ea1c:	4b0a      	ldr	r3, [pc, #40]	; (800ea48 <prvAddNewTaskToReadyList+0xc8>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d207      	bcs.n	800ea3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ea2a:	4b0c      	ldr	r3, [pc, #48]	; (800ea5c <prvAddNewTaskToReadyList+0xdc>)
 800ea2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea30:	601a      	str	r2, [r3, #0]
 800ea32:	f3bf 8f4f 	dsb	sy
 800ea36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea3a:	bf00      	nop
 800ea3c:	3708      	adds	r7, #8
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	20001b74 	.word	0x20001b74
 800ea48:	200016a0 	.word	0x200016a0
 800ea4c:	20001b80 	.word	0x20001b80
 800ea50:	20001b90 	.word	0x20001b90
 800ea54:	20001b7c 	.word	0x20001b7c
 800ea58:	200016a4 	.word	0x200016a4
 800ea5c:	e000ed04 	.word	0xe000ed04

0800ea60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d017      	beq.n	800eaa2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ea72:	4b13      	ldr	r3, [pc, #76]	; (800eac0 <vTaskDelay+0x60>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d00a      	beq.n	800ea90 <vTaskDelay+0x30>
	__asm volatile
 800ea7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea7e:	f383 8811 	msr	BASEPRI, r3
 800ea82:	f3bf 8f6f 	isb	sy
 800ea86:	f3bf 8f4f 	dsb	sy
 800ea8a:	60bb      	str	r3, [r7, #8]
}
 800ea8c:	bf00      	nop
 800ea8e:	e7fe      	b.n	800ea8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ea90:	f000 f986 	bl	800eda0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ea94:	2100      	movs	r1, #0
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f000 fdf0 	bl	800f67c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ea9c:	f000 f98e 	bl	800edbc <xTaskResumeAll>
 800eaa0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d107      	bne.n	800eab8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800eaa8:	4b06      	ldr	r3, [pc, #24]	; (800eac4 <vTaskDelay+0x64>)
 800eaaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaae:	601a      	str	r2, [r3, #0]
 800eab0:	f3bf 8f4f 	dsb	sy
 800eab4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eab8:	bf00      	nop
 800eaba:	3710      	adds	r7, #16
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	20001b9c 	.word	0x20001b9c
 800eac4:	e000ed04 	.word	0xe000ed04

0800eac8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b084      	sub	sp, #16
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ead0:	f001 faa0 	bl	8010014 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d102      	bne.n	800eae0 <vTaskSuspend+0x18>
 800eada:	4b30      	ldr	r3, [pc, #192]	; (800eb9c <vTaskSuspend+0xd4>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	e000      	b.n	800eae2 <vTaskSuspend+0x1a>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	3304      	adds	r3, #4
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7ff f8c7 	bl	800dc7c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d004      	beq.n	800eb00 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	3318      	adds	r3, #24
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7ff f8be 	bl	800dc7c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	3304      	adds	r3, #4
 800eb04:	4619      	mov	r1, r3
 800eb06:	4826      	ldr	r0, [pc, #152]	; (800eba0 <vTaskSuspend+0xd8>)
 800eb08:	f7ff f85b 	bl	800dbc2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	2b01      	cmp	r3, #1
 800eb16:	d103      	bne.n	800eb20 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800eb20:	f001 faa8 	bl	8010074 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800eb24:	4b1f      	ldr	r3, [pc, #124]	; (800eba4 <vTaskSuspend+0xdc>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d005      	beq.n	800eb38 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800eb2c:	f001 fa72 	bl	8010014 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800eb30:	f000 fcf8 	bl	800f524 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800eb34:	f001 fa9e 	bl	8010074 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800eb38:	4b18      	ldr	r3, [pc, #96]	; (800eb9c <vTaskSuspend+0xd4>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	68fa      	ldr	r2, [r7, #12]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d127      	bne.n	800eb92 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800eb42:	4b18      	ldr	r3, [pc, #96]	; (800eba4 <vTaskSuspend+0xdc>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d017      	beq.n	800eb7a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800eb4a:	4b17      	ldr	r3, [pc, #92]	; (800eba8 <vTaskSuspend+0xe0>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d00a      	beq.n	800eb68 <vTaskSuspend+0xa0>
	__asm volatile
 800eb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb56:	f383 8811 	msr	BASEPRI, r3
 800eb5a:	f3bf 8f6f 	isb	sy
 800eb5e:	f3bf 8f4f 	dsb	sy
 800eb62:	60bb      	str	r3, [r7, #8]
}
 800eb64:	bf00      	nop
 800eb66:	e7fe      	b.n	800eb66 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800eb68:	4b10      	ldr	r3, [pc, #64]	; (800ebac <vTaskSuspend+0xe4>)
 800eb6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb6e:	601a      	str	r2, [r3, #0]
 800eb70:	f3bf 8f4f 	dsb	sy
 800eb74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb78:	e00b      	b.n	800eb92 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800eb7a:	4b09      	ldr	r3, [pc, #36]	; (800eba0 <vTaskSuspend+0xd8>)
 800eb7c:	681a      	ldr	r2, [r3, #0]
 800eb7e:	4b0c      	ldr	r3, [pc, #48]	; (800ebb0 <vTaskSuspend+0xe8>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d103      	bne.n	800eb8e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800eb86:	4b05      	ldr	r3, [pc, #20]	; (800eb9c <vTaskSuspend+0xd4>)
 800eb88:	2200      	movs	r2, #0
 800eb8a:	601a      	str	r2, [r3, #0]
	}
 800eb8c:	e001      	b.n	800eb92 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800eb8e:	f000 fa7d 	bl	800f08c <vTaskSwitchContext>
	}
 800eb92:	bf00      	nop
 800eb94:	3710      	adds	r7, #16
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	200016a0 	.word	0x200016a0
 800eba0:	20001b60 	.word	0x20001b60
 800eba4:	20001b80 	.word	0x20001b80
 800eba8:	20001b9c 	.word	0x20001b9c
 800ebac:	e000ed04 	.word	0xe000ed04
 800ebb0:	20001b74 	.word	0x20001b74

0800ebb4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b087      	sub	sp, #28
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d10a      	bne.n	800ebe0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800ebca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebce:	f383 8811 	msr	BASEPRI, r3
 800ebd2:	f3bf 8f6f 	isb	sy
 800ebd6:	f3bf 8f4f 	dsb	sy
 800ebda:	60fb      	str	r3, [r7, #12]
}
 800ebdc:	bf00      	nop
 800ebde:	e7fe      	b.n	800ebde <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	695b      	ldr	r3, [r3, #20]
 800ebe4:	4a0a      	ldr	r2, [pc, #40]	; (800ec10 <prvTaskIsTaskSuspended+0x5c>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d10a      	bne.n	800ec00 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebee:	4a09      	ldr	r2, [pc, #36]	; (800ec14 <prvTaskIsTaskSuspended+0x60>)
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d005      	beq.n	800ec00 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d101      	bne.n	800ec00 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec00:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ec02:	4618      	mov	r0, r3
 800ec04:	371c      	adds	r7, #28
 800ec06:	46bd      	mov	sp, r7
 800ec08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0c:	4770      	bx	lr
 800ec0e:	bf00      	nop
 800ec10:	20001b60 	.word	0x20001b60
 800ec14:	20001b34 	.word	0x20001b34

0800ec18 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d10a      	bne.n	800ec40 <vTaskResume+0x28>
	__asm volatile
 800ec2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec2e:	f383 8811 	msr	BASEPRI, r3
 800ec32:	f3bf 8f6f 	isb	sy
 800ec36:	f3bf 8f4f 	dsb	sy
 800ec3a:	60bb      	str	r3, [r7, #8]
}
 800ec3c:	bf00      	nop
 800ec3e:	e7fe      	b.n	800ec3e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800ec40:	4b20      	ldr	r3, [pc, #128]	; (800ecc4 <vTaskResume+0xac>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d038      	beq.n	800ecbc <vTaskResume+0xa4>
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d035      	beq.n	800ecbc <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800ec50:	f001 f9e0 	bl	8010014 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800ec54:	68f8      	ldr	r0, [r7, #12]
 800ec56:	f7ff ffad 	bl	800ebb4 <prvTaskIsTaskSuspended>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d02b      	beq.n	800ecb8 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	3304      	adds	r3, #4
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7ff f809 	bl	800dc7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec6e:	4b16      	ldr	r3, [pc, #88]	; (800ecc8 <vTaskResume+0xb0>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d903      	bls.n	800ec7e <vTaskResume+0x66>
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec7a:	4a13      	ldr	r2, [pc, #76]	; (800ecc8 <vTaskResume+0xb0>)
 800ec7c:	6013      	str	r3, [r2, #0]
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec82:	4613      	mov	r3, r2
 800ec84:	009b      	lsls	r3, r3, #2
 800ec86:	4413      	add	r3, r2
 800ec88:	009b      	lsls	r3, r3, #2
 800ec8a:	4a10      	ldr	r2, [pc, #64]	; (800eccc <vTaskResume+0xb4>)
 800ec8c:	441a      	add	r2, r3
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	3304      	adds	r3, #4
 800ec92:	4619      	mov	r1, r3
 800ec94:	4610      	mov	r0, r2
 800ec96:	f7fe ff94 	bl	800dbc2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec9e:	4b09      	ldr	r3, [pc, #36]	; (800ecc4 <vTaskResume+0xac>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d307      	bcc.n	800ecb8 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800eca8:	4b09      	ldr	r3, [pc, #36]	; (800ecd0 <vTaskResume+0xb8>)
 800ecaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecae:	601a      	str	r2, [r3, #0]
 800ecb0:	f3bf 8f4f 	dsb	sy
 800ecb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800ecb8:	f001 f9dc 	bl	8010074 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ecbc:	bf00      	nop
 800ecbe:	3710      	adds	r7, #16
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	200016a0 	.word	0x200016a0
 800ecc8:	20001b7c 	.word	0x20001b7c
 800eccc:	200016a4 	.word	0x200016a4
 800ecd0:	e000ed04 	.word	0xe000ed04

0800ecd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b08a      	sub	sp, #40	; 0x28
 800ecd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ecde:	2300      	movs	r3, #0
 800ece0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ece2:	463a      	mov	r2, r7
 800ece4:	1d39      	adds	r1, r7, #4
 800ece6:	f107 0308 	add.w	r3, r7, #8
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fe ff08 	bl	800db00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ecf0:	6839      	ldr	r1, [r7, #0]
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	68ba      	ldr	r2, [r7, #8]
 800ecf6:	9202      	str	r2, [sp, #8]
 800ecf8:	9301      	str	r3, [sp, #4]
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	9300      	str	r3, [sp, #0]
 800ecfe:	2300      	movs	r3, #0
 800ed00:	460a      	mov	r2, r1
 800ed02:	4921      	ldr	r1, [pc, #132]	; (800ed88 <vTaskStartScheduler+0xb4>)
 800ed04:	4821      	ldr	r0, [pc, #132]	; (800ed8c <vTaskStartScheduler+0xb8>)
 800ed06:	f7ff fd09 	bl	800e71c <xTaskCreateStatic>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	4a20      	ldr	r2, [pc, #128]	; (800ed90 <vTaskStartScheduler+0xbc>)
 800ed0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ed10:	4b1f      	ldr	r3, [pc, #124]	; (800ed90 <vTaskStartScheduler+0xbc>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d002      	beq.n	800ed1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ed18:	2301      	movs	r3, #1
 800ed1a:	617b      	str	r3, [r7, #20]
 800ed1c:	e001      	b.n	800ed22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	d102      	bne.n	800ed2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ed28:	f000 fcfc 	bl	800f724 <xTimerCreateTimerTask>
 800ed2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d116      	bne.n	800ed62 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ed34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed38:	f383 8811 	msr	BASEPRI, r3
 800ed3c:	f3bf 8f6f 	isb	sy
 800ed40:	f3bf 8f4f 	dsb	sy
 800ed44:	613b      	str	r3, [r7, #16]
}
 800ed46:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ed48:	4b12      	ldr	r3, [pc, #72]	; (800ed94 <vTaskStartScheduler+0xc0>)
 800ed4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ed50:	4b11      	ldr	r3, [pc, #68]	; (800ed98 <vTaskStartScheduler+0xc4>)
 800ed52:	2201      	movs	r2, #1
 800ed54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ed56:	4b11      	ldr	r3, [pc, #68]	; (800ed9c <vTaskStartScheduler+0xc8>)
 800ed58:	2200      	movs	r2, #0
 800ed5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ed5c:	f001 f8b8 	bl	800fed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ed60:	e00e      	b.n	800ed80 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed68:	d10a      	bne.n	800ed80 <vTaskStartScheduler+0xac>
	__asm volatile
 800ed6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed6e:	f383 8811 	msr	BASEPRI, r3
 800ed72:	f3bf 8f6f 	isb	sy
 800ed76:	f3bf 8f4f 	dsb	sy
 800ed7a:	60fb      	str	r3, [r7, #12]
}
 800ed7c:	bf00      	nop
 800ed7e:	e7fe      	b.n	800ed7e <vTaskStartScheduler+0xaa>
}
 800ed80:	bf00      	nop
 800ed82:	3718      	adds	r7, #24
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}
 800ed88:	080133b4 	.word	0x080133b4
 800ed8c:	0800f3b9 	.word	0x0800f3b9
 800ed90:	20001b98 	.word	0x20001b98
 800ed94:	20001b94 	.word	0x20001b94
 800ed98:	20001b80 	.word	0x20001b80
 800ed9c:	20001b78 	.word	0x20001b78

0800eda0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800eda0:	b480      	push	{r7}
 800eda2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800eda4:	4b04      	ldr	r3, [pc, #16]	; (800edb8 <vTaskSuspendAll+0x18>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	3301      	adds	r3, #1
 800edaa:	4a03      	ldr	r2, [pc, #12]	; (800edb8 <vTaskSuspendAll+0x18>)
 800edac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800edae:	bf00      	nop
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr
 800edb8:	20001b9c 	.word	0x20001b9c

0800edbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800edc2:	2300      	movs	r3, #0
 800edc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800edc6:	2300      	movs	r3, #0
 800edc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800edca:	4b42      	ldr	r3, [pc, #264]	; (800eed4 <xTaskResumeAll+0x118>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d10a      	bne.n	800ede8 <xTaskResumeAll+0x2c>
	__asm volatile
 800edd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd6:	f383 8811 	msr	BASEPRI, r3
 800edda:	f3bf 8f6f 	isb	sy
 800edde:	f3bf 8f4f 	dsb	sy
 800ede2:	603b      	str	r3, [r7, #0]
}
 800ede4:	bf00      	nop
 800ede6:	e7fe      	b.n	800ede6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ede8:	f001 f914 	bl	8010014 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800edec:	4b39      	ldr	r3, [pc, #228]	; (800eed4 <xTaskResumeAll+0x118>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	3b01      	subs	r3, #1
 800edf2:	4a38      	ldr	r2, [pc, #224]	; (800eed4 <xTaskResumeAll+0x118>)
 800edf4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edf6:	4b37      	ldr	r3, [pc, #220]	; (800eed4 <xTaskResumeAll+0x118>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d162      	bne.n	800eec4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800edfe:	4b36      	ldr	r3, [pc, #216]	; (800eed8 <xTaskResumeAll+0x11c>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d05e      	beq.n	800eec4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee06:	e02f      	b.n	800ee68 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee08:	4b34      	ldr	r3, [pc, #208]	; (800eedc <xTaskResumeAll+0x120>)
 800ee0a:	68db      	ldr	r3, [r3, #12]
 800ee0c:	68db      	ldr	r3, [r3, #12]
 800ee0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	3318      	adds	r3, #24
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7fe ff31 	bl	800dc7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	3304      	adds	r3, #4
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fe ff2c 	bl	800dc7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee28:	4b2d      	ldr	r3, [pc, #180]	; (800eee0 <xTaskResumeAll+0x124>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d903      	bls.n	800ee38 <xTaskResumeAll+0x7c>
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee34:	4a2a      	ldr	r2, [pc, #168]	; (800eee0 <xTaskResumeAll+0x124>)
 800ee36:	6013      	str	r3, [r2, #0]
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee3c:	4613      	mov	r3, r2
 800ee3e:	009b      	lsls	r3, r3, #2
 800ee40:	4413      	add	r3, r2
 800ee42:	009b      	lsls	r3, r3, #2
 800ee44:	4a27      	ldr	r2, [pc, #156]	; (800eee4 <xTaskResumeAll+0x128>)
 800ee46:	441a      	add	r2, r3
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	3304      	adds	r3, #4
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	4610      	mov	r0, r2
 800ee50:	f7fe feb7 	bl	800dbc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee58:	4b23      	ldr	r3, [pc, #140]	; (800eee8 <xTaskResumeAll+0x12c>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d302      	bcc.n	800ee68 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ee62:	4b22      	ldr	r3, [pc, #136]	; (800eeec <xTaskResumeAll+0x130>)
 800ee64:	2201      	movs	r2, #1
 800ee66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee68:	4b1c      	ldr	r3, [pc, #112]	; (800eedc <xTaskResumeAll+0x120>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d1cb      	bne.n	800ee08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d001      	beq.n	800ee7a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ee76:	f000 fb55 	bl	800f524 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ee7a:	4b1d      	ldr	r3, [pc, #116]	; (800eef0 <xTaskResumeAll+0x134>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d010      	beq.n	800eea8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ee86:	f000 f847 	bl	800ef18 <xTaskIncrementTick>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d002      	beq.n	800ee96 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ee90:	4b16      	ldr	r3, [pc, #88]	; (800eeec <xTaskResumeAll+0x130>)
 800ee92:	2201      	movs	r2, #1
 800ee94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	3b01      	subs	r3, #1
 800ee9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d1f1      	bne.n	800ee86 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800eea2:	4b13      	ldr	r3, [pc, #76]	; (800eef0 <xTaskResumeAll+0x134>)
 800eea4:	2200      	movs	r2, #0
 800eea6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eea8:	4b10      	ldr	r3, [pc, #64]	; (800eeec <xTaskResumeAll+0x130>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d009      	beq.n	800eec4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eeb4:	4b0f      	ldr	r3, [pc, #60]	; (800eef4 <xTaskResumeAll+0x138>)
 800eeb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eeba:	601a      	str	r2, [r3, #0]
 800eebc:	f3bf 8f4f 	dsb	sy
 800eec0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eec4:	f001 f8d6 	bl	8010074 <vPortExitCritical>

	return xAlreadyYielded;
 800eec8:	68bb      	ldr	r3, [r7, #8]
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3710      	adds	r7, #16
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	20001b9c 	.word	0x20001b9c
 800eed8:	20001b74 	.word	0x20001b74
 800eedc:	20001b34 	.word	0x20001b34
 800eee0:	20001b7c 	.word	0x20001b7c
 800eee4:	200016a4 	.word	0x200016a4
 800eee8:	200016a0 	.word	0x200016a0
 800eeec:	20001b88 	.word	0x20001b88
 800eef0:	20001b84 	.word	0x20001b84
 800eef4:	e000ed04 	.word	0xe000ed04

0800eef8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800eef8:	b480      	push	{r7}
 800eefa:	b083      	sub	sp, #12
 800eefc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800eefe:	4b05      	ldr	r3, [pc, #20]	; (800ef14 <xTaskGetTickCount+0x1c>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ef04:	687b      	ldr	r3, [r7, #4]
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	370c      	adds	r7, #12
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef10:	4770      	bx	lr
 800ef12:	bf00      	nop
 800ef14:	20001b78 	.word	0x20001b78

0800ef18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b086      	sub	sp, #24
 800ef1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef22:	4b4f      	ldr	r3, [pc, #316]	; (800f060 <xTaskIncrementTick+0x148>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	f040 808f 	bne.w	800f04a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ef2c:	4b4d      	ldr	r3, [pc, #308]	; (800f064 <xTaskIncrementTick+0x14c>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	3301      	adds	r3, #1
 800ef32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ef34:	4a4b      	ldr	r2, [pc, #300]	; (800f064 <xTaskIncrementTick+0x14c>)
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d120      	bne.n	800ef82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ef40:	4b49      	ldr	r3, [pc, #292]	; (800f068 <xTaskIncrementTick+0x150>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d00a      	beq.n	800ef60 <xTaskIncrementTick+0x48>
	__asm volatile
 800ef4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef4e:	f383 8811 	msr	BASEPRI, r3
 800ef52:	f3bf 8f6f 	isb	sy
 800ef56:	f3bf 8f4f 	dsb	sy
 800ef5a:	603b      	str	r3, [r7, #0]
}
 800ef5c:	bf00      	nop
 800ef5e:	e7fe      	b.n	800ef5e <xTaskIncrementTick+0x46>
 800ef60:	4b41      	ldr	r3, [pc, #260]	; (800f068 <xTaskIncrementTick+0x150>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	60fb      	str	r3, [r7, #12]
 800ef66:	4b41      	ldr	r3, [pc, #260]	; (800f06c <xTaskIncrementTick+0x154>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	4a3f      	ldr	r2, [pc, #252]	; (800f068 <xTaskIncrementTick+0x150>)
 800ef6c:	6013      	str	r3, [r2, #0]
 800ef6e:	4a3f      	ldr	r2, [pc, #252]	; (800f06c <xTaskIncrementTick+0x154>)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	6013      	str	r3, [r2, #0]
 800ef74:	4b3e      	ldr	r3, [pc, #248]	; (800f070 <xTaskIncrementTick+0x158>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	3301      	adds	r3, #1
 800ef7a:	4a3d      	ldr	r2, [pc, #244]	; (800f070 <xTaskIncrementTick+0x158>)
 800ef7c:	6013      	str	r3, [r2, #0]
 800ef7e:	f000 fad1 	bl	800f524 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ef82:	4b3c      	ldr	r3, [pc, #240]	; (800f074 <xTaskIncrementTick+0x15c>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	693a      	ldr	r2, [r7, #16]
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d349      	bcc.n	800f020 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef8c:	4b36      	ldr	r3, [pc, #216]	; (800f068 <xTaskIncrementTick+0x150>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d104      	bne.n	800efa0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef96:	4b37      	ldr	r3, [pc, #220]	; (800f074 <xTaskIncrementTick+0x15c>)
 800ef98:	f04f 32ff 	mov.w	r2, #4294967295
 800ef9c:	601a      	str	r2, [r3, #0]
					break;
 800ef9e:	e03f      	b.n	800f020 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efa0:	4b31      	ldr	r3, [pc, #196]	; (800f068 <xTaskIncrementTick+0x150>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	68db      	ldr	r3, [r3, #12]
 800efa6:	68db      	ldr	r3, [r3, #12]
 800efa8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	685b      	ldr	r3, [r3, #4]
 800efae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800efb0:	693a      	ldr	r2, [r7, #16]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d203      	bcs.n	800efc0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800efb8:	4a2e      	ldr	r2, [pc, #184]	; (800f074 <xTaskIncrementTick+0x15c>)
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800efbe:	e02f      	b.n	800f020 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	3304      	adds	r3, #4
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7fe fe59 	bl	800dc7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d004      	beq.n	800efdc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	3318      	adds	r3, #24
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7fe fe50 	bl	800dc7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efe0:	4b25      	ldr	r3, [pc, #148]	; (800f078 <xTaskIncrementTick+0x160>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d903      	bls.n	800eff0 <xTaskIncrementTick+0xd8>
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efec:	4a22      	ldr	r2, [pc, #136]	; (800f078 <xTaskIncrementTick+0x160>)
 800efee:	6013      	str	r3, [r2, #0]
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eff4:	4613      	mov	r3, r2
 800eff6:	009b      	lsls	r3, r3, #2
 800eff8:	4413      	add	r3, r2
 800effa:	009b      	lsls	r3, r3, #2
 800effc:	4a1f      	ldr	r2, [pc, #124]	; (800f07c <xTaskIncrementTick+0x164>)
 800effe:	441a      	add	r2, r3
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	3304      	adds	r3, #4
 800f004:	4619      	mov	r1, r3
 800f006:	4610      	mov	r0, r2
 800f008:	f7fe fddb 	bl	800dbc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f010:	4b1b      	ldr	r3, [pc, #108]	; (800f080 <xTaskIncrementTick+0x168>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f016:	429a      	cmp	r2, r3
 800f018:	d3b8      	bcc.n	800ef8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f01a:	2301      	movs	r3, #1
 800f01c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f01e:	e7b5      	b.n	800ef8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f020:	4b17      	ldr	r3, [pc, #92]	; (800f080 <xTaskIncrementTick+0x168>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f026:	4915      	ldr	r1, [pc, #84]	; (800f07c <xTaskIncrementTick+0x164>)
 800f028:	4613      	mov	r3, r2
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	4413      	add	r3, r2
 800f02e:	009b      	lsls	r3, r3, #2
 800f030:	440b      	add	r3, r1
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2b01      	cmp	r3, #1
 800f036:	d901      	bls.n	800f03c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f038:	2301      	movs	r3, #1
 800f03a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f03c:	4b11      	ldr	r3, [pc, #68]	; (800f084 <xTaskIncrementTick+0x16c>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d007      	beq.n	800f054 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f044:	2301      	movs	r3, #1
 800f046:	617b      	str	r3, [r7, #20]
 800f048:	e004      	b.n	800f054 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f04a:	4b0f      	ldr	r3, [pc, #60]	; (800f088 <xTaskIncrementTick+0x170>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	3301      	adds	r3, #1
 800f050:	4a0d      	ldr	r2, [pc, #52]	; (800f088 <xTaskIncrementTick+0x170>)
 800f052:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f054:	697b      	ldr	r3, [r7, #20]
}
 800f056:	4618      	mov	r0, r3
 800f058:	3718      	adds	r7, #24
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop
 800f060:	20001b9c 	.word	0x20001b9c
 800f064:	20001b78 	.word	0x20001b78
 800f068:	20001b2c 	.word	0x20001b2c
 800f06c:	20001b30 	.word	0x20001b30
 800f070:	20001b8c 	.word	0x20001b8c
 800f074:	20001b94 	.word	0x20001b94
 800f078:	20001b7c 	.word	0x20001b7c
 800f07c:	200016a4 	.word	0x200016a4
 800f080:	200016a0 	.word	0x200016a0
 800f084:	20001b88 	.word	0x20001b88
 800f088:	20001b84 	.word	0x20001b84

0800f08c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f08c:	b480      	push	{r7}
 800f08e:	b085      	sub	sp, #20
 800f090:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f092:	4b28      	ldr	r3, [pc, #160]	; (800f134 <vTaskSwitchContext+0xa8>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d003      	beq.n	800f0a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f09a:	4b27      	ldr	r3, [pc, #156]	; (800f138 <vTaskSwitchContext+0xac>)
 800f09c:	2201      	movs	r2, #1
 800f09e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f0a0:	e041      	b.n	800f126 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800f0a2:	4b25      	ldr	r3, [pc, #148]	; (800f138 <vTaskSwitchContext+0xac>)
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0a8:	4b24      	ldr	r3, [pc, #144]	; (800f13c <vTaskSwitchContext+0xb0>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	60fb      	str	r3, [r7, #12]
 800f0ae:	e010      	b.n	800f0d2 <vTaskSwitchContext+0x46>
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d10a      	bne.n	800f0cc <vTaskSwitchContext+0x40>
	__asm volatile
 800f0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ba:	f383 8811 	msr	BASEPRI, r3
 800f0be:	f3bf 8f6f 	isb	sy
 800f0c2:	f3bf 8f4f 	dsb	sy
 800f0c6:	607b      	str	r3, [r7, #4]
}
 800f0c8:	bf00      	nop
 800f0ca:	e7fe      	b.n	800f0ca <vTaskSwitchContext+0x3e>
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	3b01      	subs	r3, #1
 800f0d0:	60fb      	str	r3, [r7, #12]
 800f0d2:	491b      	ldr	r1, [pc, #108]	; (800f140 <vTaskSwitchContext+0xb4>)
 800f0d4:	68fa      	ldr	r2, [r7, #12]
 800f0d6:	4613      	mov	r3, r2
 800f0d8:	009b      	lsls	r3, r3, #2
 800f0da:	4413      	add	r3, r2
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	440b      	add	r3, r1
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d0e4      	beq.n	800f0b0 <vTaskSwitchContext+0x24>
 800f0e6:	68fa      	ldr	r2, [r7, #12]
 800f0e8:	4613      	mov	r3, r2
 800f0ea:	009b      	lsls	r3, r3, #2
 800f0ec:	4413      	add	r3, r2
 800f0ee:	009b      	lsls	r3, r3, #2
 800f0f0:	4a13      	ldr	r2, [pc, #76]	; (800f140 <vTaskSwitchContext+0xb4>)
 800f0f2:	4413      	add	r3, r2
 800f0f4:	60bb      	str	r3, [r7, #8]
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	685a      	ldr	r2, [r3, #4]
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	605a      	str	r2, [r3, #4]
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	685a      	ldr	r2, [r3, #4]
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	3308      	adds	r3, #8
 800f108:	429a      	cmp	r2, r3
 800f10a:	d104      	bne.n	800f116 <vTaskSwitchContext+0x8a>
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	685b      	ldr	r3, [r3, #4]
 800f110:	685a      	ldr	r2, [r3, #4]
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	605a      	str	r2, [r3, #4]
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	685b      	ldr	r3, [r3, #4]
 800f11a:	68db      	ldr	r3, [r3, #12]
 800f11c:	4a09      	ldr	r2, [pc, #36]	; (800f144 <vTaskSwitchContext+0xb8>)
 800f11e:	6013      	str	r3, [r2, #0]
 800f120:	4a06      	ldr	r2, [pc, #24]	; (800f13c <vTaskSwitchContext+0xb0>)
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	6013      	str	r3, [r2, #0]
}
 800f126:	bf00      	nop
 800f128:	3714      	adds	r7, #20
 800f12a:	46bd      	mov	sp, r7
 800f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f130:	4770      	bx	lr
 800f132:	bf00      	nop
 800f134:	20001b9c 	.word	0x20001b9c
 800f138:	20001b88 	.word	0x20001b88
 800f13c:	20001b7c 	.word	0x20001b7c
 800f140:	200016a4 	.word	0x200016a4
 800f144:	200016a0 	.word	0x200016a0

0800f148 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b084      	sub	sp, #16
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d10a      	bne.n	800f16e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f15c:	f383 8811 	msr	BASEPRI, r3
 800f160:	f3bf 8f6f 	isb	sy
 800f164:	f3bf 8f4f 	dsb	sy
 800f168:	60fb      	str	r3, [r7, #12]
}
 800f16a:	bf00      	nop
 800f16c:	e7fe      	b.n	800f16c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f16e:	4b07      	ldr	r3, [pc, #28]	; (800f18c <vTaskPlaceOnEventList+0x44>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	3318      	adds	r3, #24
 800f174:	4619      	mov	r1, r3
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f7fe fd47 	bl	800dc0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f17c:	2101      	movs	r1, #1
 800f17e:	6838      	ldr	r0, [r7, #0]
 800f180:	f000 fa7c 	bl	800f67c <prvAddCurrentTaskToDelayedList>
}
 800f184:	bf00      	nop
 800f186:	3710      	adds	r7, #16
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	200016a0 	.word	0x200016a0

0800f190 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f190:	b580      	push	{r7, lr}
 800f192:	b086      	sub	sp, #24
 800f194:	af00      	add	r7, sp, #0
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d10a      	bne.n	800f1b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a6:	f383 8811 	msr	BASEPRI, r3
 800f1aa:	f3bf 8f6f 	isb	sy
 800f1ae:	f3bf 8f4f 	dsb	sy
 800f1b2:	617b      	str	r3, [r7, #20]
}
 800f1b4:	bf00      	nop
 800f1b6:	e7fe      	b.n	800f1b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f1b8:	4b0a      	ldr	r3, [pc, #40]	; (800f1e4 <vTaskPlaceOnEventListRestricted+0x54>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	3318      	adds	r3, #24
 800f1be:	4619      	mov	r1, r3
 800f1c0:	68f8      	ldr	r0, [r7, #12]
 800f1c2:	f7fe fcfe 	bl	800dbc2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d002      	beq.n	800f1d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f1cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f1d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f1d2:	6879      	ldr	r1, [r7, #4]
 800f1d4:	68b8      	ldr	r0, [r7, #8]
 800f1d6:	f000 fa51 	bl	800f67c <prvAddCurrentTaskToDelayedList>
	}
 800f1da:	bf00      	nop
 800f1dc:	3718      	adds	r7, #24
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	200016a0 	.word	0x200016a0

0800f1e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b086      	sub	sp, #24
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	68db      	ldr	r3, [r3, #12]
 800f1f4:	68db      	ldr	r3, [r3, #12]
 800f1f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d10a      	bne.n	800f214 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f202:	f383 8811 	msr	BASEPRI, r3
 800f206:	f3bf 8f6f 	isb	sy
 800f20a:	f3bf 8f4f 	dsb	sy
 800f20e:	60fb      	str	r3, [r7, #12]
}
 800f210:	bf00      	nop
 800f212:	e7fe      	b.n	800f212 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f214:	693b      	ldr	r3, [r7, #16]
 800f216:	3318      	adds	r3, #24
 800f218:	4618      	mov	r0, r3
 800f21a:	f7fe fd2f 	bl	800dc7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f21e:	4b1e      	ldr	r3, [pc, #120]	; (800f298 <xTaskRemoveFromEventList+0xb0>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d11d      	bne.n	800f262 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f226:	693b      	ldr	r3, [r7, #16]
 800f228:	3304      	adds	r3, #4
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7fe fd26 	bl	800dc7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f234:	4b19      	ldr	r3, [pc, #100]	; (800f29c <xTaskRemoveFromEventList+0xb4>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	429a      	cmp	r2, r3
 800f23a:	d903      	bls.n	800f244 <xTaskRemoveFromEventList+0x5c>
 800f23c:	693b      	ldr	r3, [r7, #16]
 800f23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f240:	4a16      	ldr	r2, [pc, #88]	; (800f29c <xTaskRemoveFromEventList+0xb4>)
 800f242:	6013      	str	r3, [r2, #0]
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f248:	4613      	mov	r3, r2
 800f24a:	009b      	lsls	r3, r3, #2
 800f24c:	4413      	add	r3, r2
 800f24e:	009b      	lsls	r3, r3, #2
 800f250:	4a13      	ldr	r2, [pc, #76]	; (800f2a0 <xTaskRemoveFromEventList+0xb8>)
 800f252:	441a      	add	r2, r3
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	3304      	adds	r3, #4
 800f258:	4619      	mov	r1, r3
 800f25a:	4610      	mov	r0, r2
 800f25c:	f7fe fcb1 	bl	800dbc2 <vListInsertEnd>
 800f260:	e005      	b.n	800f26e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f262:	693b      	ldr	r3, [r7, #16]
 800f264:	3318      	adds	r3, #24
 800f266:	4619      	mov	r1, r3
 800f268:	480e      	ldr	r0, [pc, #56]	; (800f2a4 <xTaskRemoveFromEventList+0xbc>)
 800f26a:	f7fe fcaa 	bl	800dbc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f272:	4b0d      	ldr	r3, [pc, #52]	; (800f2a8 <xTaskRemoveFromEventList+0xc0>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f278:	429a      	cmp	r2, r3
 800f27a:	d905      	bls.n	800f288 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f27c:	2301      	movs	r3, #1
 800f27e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f280:	4b0a      	ldr	r3, [pc, #40]	; (800f2ac <xTaskRemoveFromEventList+0xc4>)
 800f282:	2201      	movs	r2, #1
 800f284:	601a      	str	r2, [r3, #0]
 800f286:	e001      	b.n	800f28c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f288:	2300      	movs	r3, #0
 800f28a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f28c:	697b      	ldr	r3, [r7, #20]
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3718      	adds	r7, #24
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	bf00      	nop
 800f298:	20001b9c 	.word	0x20001b9c
 800f29c:	20001b7c 	.word	0x20001b7c
 800f2a0:	200016a4 	.word	0x200016a4
 800f2a4:	20001b34 	.word	0x20001b34
 800f2a8:	200016a0 	.word	0x200016a0
 800f2ac:	20001b88 	.word	0x20001b88

0800f2b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b083      	sub	sp, #12
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f2b8:	4b06      	ldr	r3, [pc, #24]	; (800f2d4 <vTaskInternalSetTimeOutState+0x24>)
 800f2ba:	681a      	ldr	r2, [r3, #0]
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f2c0:	4b05      	ldr	r3, [pc, #20]	; (800f2d8 <vTaskInternalSetTimeOutState+0x28>)
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	605a      	str	r2, [r3, #4]
}
 800f2c8:	bf00      	nop
 800f2ca:	370c      	adds	r7, #12
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr
 800f2d4:	20001b8c 	.word	0x20001b8c
 800f2d8:	20001b78 	.word	0x20001b78

0800f2dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b088      	sub	sp, #32
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d10a      	bne.n	800f302 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f0:	f383 8811 	msr	BASEPRI, r3
 800f2f4:	f3bf 8f6f 	isb	sy
 800f2f8:	f3bf 8f4f 	dsb	sy
 800f2fc:	613b      	str	r3, [r7, #16]
}
 800f2fe:	bf00      	nop
 800f300:	e7fe      	b.n	800f300 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d10a      	bne.n	800f31e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f30c:	f383 8811 	msr	BASEPRI, r3
 800f310:	f3bf 8f6f 	isb	sy
 800f314:	f3bf 8f4f 	dsb	sy
 800f318:	60fb      	str	r3, [r7, #12]
}
 800f31a:	bf00      	nop
 800f31c:	e7fe      	b.n	800f31c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f31e:	f000 fe79 	bl	8010014 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f322:	4b1d      	ldr	r3, [pc, #116]	; (800f398 <xTaskCheckForTimeOut+0xbc>)
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	685b      	ldr	r3, [r3, #4]
 800f32c:	69ba      	ldr	r2, [r7, #24]
 800f32e:	1ad3      	subs	r3, r2, r3
 800f330:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f33a:	d102      	bne.n	800f342 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f33c:	2300      	movs	r3, #0
 800f33e:	61fb      	str	r3, [r7, #28]
 800f340:	e023      	b.n	800f38a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681a      	ldr	r2, [r3, #0]
 800f346:	4b15      	ldr	r3, [pc, #84]	; (800f39c <xTaskCheckForTimeOut+0xc0>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d007      	beq.n	800f35e <xTaskCheckForTimeOut+0x82>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	69ba      	ldr	r2, [r7, #24]
 800f354:	429a      	cmp	r2, r3
 800f356:	d302      	bcc.n	800f35e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f358:	2301      	movs	r3, #1
 800f35a:	61fb      	str	r3, [r7, #28]
 800f35c:	e015      	b.n	800f38a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	697a      	ldr	r2, [r7, #20]
 800f364:	429a      	cmp	r2, r3
 800f366:	d20b      	bcs.n	800f380 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	681a      	ldr	r2, [r3, #0]
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	1ad2      	subs	r2, r2, r3
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f7ff ff9b 	bl	800f2b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f37a:	2300      	movs	r3, #0
 800f37c:	61fb      	str	r3, [r7, #28]
 800f37e:	e004      	b.n	800f38a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	2200      	movs	r2, #0
 800f384:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f386:	2301      	movs	r3, #1
 800f388:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f38a:	f000 fe73 	bl	8010074 <vPortExitCritical>

	return xReturn;
 800f38e:	69fb      	ldr	r3, [r7, #28]
}
 800f390:	4618      	mov	r0, r3
 800f392:	3720      	adds	r7, #32
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}
 800f398:	20001b78 	.word	0x20001b78
 800f39c:	20001b8c 	.word	0x20001b8c

0800f3a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f3a4:	4b03      	ldr	r3, [pc, #12]	; (800f3b4 <vTaskMissedYield+0x14>)
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	601a      	str	r2, [r3, #0]
}
 800f3aa:	bf00      	nop
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b2:	4770      	bx	lr
 800f3b4:	20001b88 	.word	0x20001b88

0800f3b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b082      	sub	sp, #8
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f3c0:	f000 f852 	bl	800f468 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f3c4:	4b06      	ldr	r3, [pc, #24]	; (800f3e0 <prvIdleTask+0x28>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	d9f9      	bls.n	800f3c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f3cc:	4b05      	ldr	r3, [pc, #20]	; (800f3e4 <prvIdleTask+0x2c>)
 800f3ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3d2:	601a      	str	r2, [r3, #0]
 800f3d4:	f3bf 8f4f 	dsb	sy
 800f3d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f3dc:	e7f0      	b.n	800f3c0 <prvIdleTask+0x8>
 800f3de:	bf00      	nop
 800f3e0:	200016a4 	.word	0x200016a4
 800f3e4:	e000ed04 	.word	0xe000ed04

0800f3e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b082      	sub	sp, #8
 800f3ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	607b      	str	r3, [r7, #4]
 800f3f2:	e00c      	b.n	800f40e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	4613      	mov	r3, r2
 800f3f8:	009b      	lsls	r3, r3, #2
 800f3fa:	4413      	add	r3, r2
 800f3fc:	009b      	lsls	r3, r3, #2
 800f3fe:	4a12      	ldr	r2, [pc, #72]	; (800f448 <prvInitialiseTaskLists+0x60>)
 800f400:	4413      	add	r3, r2
 800f402:	4618      	mov	r0, r3
 800f404:	f7fe fbb0 	bl	800db68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	3301      	adds	r3, #1
 800f40c:	607b      	str	r3, [r7, #4]
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2b37      	cmp	r3, #55	; 0x37
 800f412:	d9ef      	bls.n	800f3f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f414:	480d      	ldr	r0, [pc, #52]	; (800f44c <prvInitialiseTaskLists+0x64>)
 800f416:	f7fe fba7 	bl	800db68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f41a:	480d      	ldr	r0, [pc, #52]	; (800f450 <prvInitialiseTaskLists+0x68>)
 800f41c:	f7fe fba4 	bl	800db68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f420:	480c      	ldr	r0, [pc, #48]	; (800f454 <prvInitialiseTaskLists+0x6c>)
 800f422:	f7fe fba1 	bl	800db68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f426:	480c      	ldr	r0, [pc, #48]	; (800f458 <prvInitialiseTaskLists+0x70>)
 800f428:	f7fe fb9e 	bl	800db68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f42c:	480b      	ldr	r0, [pc, #44]	; (800f45c <prvInitialiseTaskLists+0x74>)
 800f42e:	f7fe fb9b 	bl	800db68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f432:	4b0b      	ldr	r3, [pc, #44]	; (800f460 <prvInitialiseTaskLists+0x78>)
 800f434:	4a05      	ldr	r2, [pc, #20]	; (800f44c <prvInitialiseTaskLists+0x64>)
 800f436:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f438:	4b0a      	ldr	r3, [pc, #40]	; (800f464 <prvInitialiseTaskLists+0x7c>)
 800f43a:	4a05      	ldr	r2, [pc, #20]	; (800f450 <prvInitialiseTaskLists+0x68>)
 800f43c:	601a      	str	r2, [r3, #0]
}
 800f43e:	bf00      	nop
 800f440:	3708      	adds	r7, #8
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}
 800f446:	bf00      	nop
 800f448:	200016a4 	.word	0x200016a4
 800f44c:	20001b04 	.word	0x20001b04
 800f450:	20001b18 	.word	0x20001b18
 800f454:	20001b34 	.word	0x20001b34
 800f458:	20001b48 	.word	0x20001b48
 800f45c:	20001b60 	.word	0x20001b60
 800f460:	20001b2c 	.word	0x20001b2c
 800f464:	20001b30 	.word	0x20001b30

0800f468 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f46e:	e019      	b.n	800f4a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f470:	f000 fdd0 	bl	8010014 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f474:	4b10      	ldr	r3, [pc, #64]	; (800f4b8 <prvCheckTasksWaitingTermination+0x50>)
 800f476:	68db      	ldr	r3, [r3, #12]
 800f478:	68db      	ldr	r3, [r3, #12]
 800f47a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	3304      	adds	r3, #4
 800f480:	4618      	mov	r0, r3
 800f482:	f7fe fbfb 	bl	800dc7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f486:	4b0d      	ldr	r3, [pc, #52]	; (800f4bc <prvCheckTasksWaitingTermination+0x54>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	3b01      	subs	r3, #1
 800f48c:	4a0b      	ldr	r2, [pc, #44]	; (800f4bc <prvCheckTasksWaitingTermination+0x54>)
 800f48e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f490:	4b0b      	ldr	r3, [pc, #44]	; (800f4c0 <prvCheckTasksWaitingTermination+0x58>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	3b01      	subs	r3, #1
 800f496:	4a0a      	ldr	r2, [pc, #40]	; (800f4c0 <prvCheckTasksWaitingTermination+0x58>)
 800f498:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f49a:	f000 fdeb 	bl	8010074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f000 f810 	bl	800f4c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f4a4:	4b06      	ldr	r3, [pc, #24]	; (800f4c0 <prvCheckTasksWaitingTermination+0x58>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d1e1      	bne.n	800f470 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f4ac:	bf00      	nop
 800f4ae:	bf00      	nop
 800f4b0:	3708      	adds	r7, #8
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	20001b48 	.word	0x20001b48
 800f4bc:	20001b74 	.word	0x20001b74
 800f4c0:	20001b5c 	.word	0x20001b5c

0800f4c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b084      	sub	sp, #16
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d108      	bne.n	800f4e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f000 ff88 	bl	80103f0 <vPortFree>
				vPortFree( pxTCB );
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f000 ff85 	bl	80103f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f4e6:	e018      	b.n	800f51a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f4ee:	2b01      	cmp	r3, #1
 800f4f0:	d103      	bne.n	800f4fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f000 ff7c 	bl	80103f0 <vPortFree>
	}
 800f4f8:	e00f      	b.n	800f51a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800f500:	2b02      	cmp	r3, #2
 800f502:	d00a      	beq.n	800f51a <prvDeleteTCB+0x56>
	__asm volatile
 800f504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f508:	f383 8811 	msr	BASEPRI, r3
 800f50c:	f3bf 8f6f 	isb	sy
 800f510:	f3bf 8f4f 	dsb	sy
 800f514:	60fb      	str	r3, [r7, #12]
}
 800f516:	bf00      	nop
 800f518:	e7fe      	b.n	800f518 <prvDeleteTCB+0x54>
	}
 800f51a:	bf00      	nop
 800f51c:	3710      	adds	r7, #16
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}
	...

0800f524 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f524:	b480      	push	{r7}
 800f526:	b083      	sub	sp, #12
 800f528:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f52a:	4b0c      	ldr	r3, [pc, #48]	; (800f55c <prvResetNextTaskUnblockTime+0x38>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d104      	bne.n	800f53e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f534:	4b0a      	ldr	r3, [pc, #40]	; (800f560 <prvResetNextTaskUnblockTime+0x3c>)
 800f536:	f04f 32ff 	mov.w	r2, #4294967295
 800f53a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f53c:	e008      	b.n	800f550 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f53e:	4b07      	ldr	r3, [pc, #28]	; (800f55c <prvResetNextTaskUnblockTime+0x38>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	68db      	ldr	r3, [r3, #12]
 800f544:	68db      	ldr	r3, [r3, #12]
 800f546:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	685b      	ldr	r3, [r3, #4]
 800f54c:	4a04      	ldr	r2, [pc, #16]	; (800f560 <prvResetNextTaskUnblockTime+0x3c>)
 800f54e:	6013      	str	r3, [r2, #0]
}
 800f550:	bf00      	nop
 800f552:	370c      	adds	r7, #12
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr
 800f55c:	20001b2c 	.word	0x20001b2c
 800f560:	20001b94 	.word	0x20001b94

0800f564 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f564:	b480      	push	{r7}
 800f566:	b083      	sub	sp, #12
 800f568:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f56a:	4b0b      	ldr	r3, [pc, #44]	; (800f598 <xTaskGetSchedulerState+0x34>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d102      	bne.n	800f578 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f572:	2301      	movs	r3, #1
 800f574:	607b      	str	r3, [r7, #4]
 800f576:	e008      	b.n	800f58a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f578:	4b08      	ldr	r3, [pc, #32]	; (800f59c <xTaskGetSchedulerState+0x38>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d102      	bne.n	800f586 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f580:	2302      	movs	r3, #2
 800f582:	607b      	str	r3, [r7, #4]
 800f584:	e001      	b.n	800f58a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f586:	2300      	movs	r3, #0
 800f588:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f58a:	687b      	ldr	r3, [r7, #4]
	}
 800f58c:	4618      	mov	r0, r3
 800f58e:	370c      	adds	r7, #12
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr
 800f598:	20001b80 	.word	0x20001b80
 800f59c:	20001b9c 	.word	0x20001b9c

0800f5a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b086      	sub	sp, #24
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d056      	beq.n	800f664 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f5b6:	4b2e      	ldr	r3, [pc, #184]	; (800f670 <xTaskPriorityDisinherit+0xd0>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	693a      	ldr	r2, [r7, #16]
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d00a      	beq.n	800f5d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c4:	f383 8811 	msr	BASEPRI, r3
 800f5c8:	f3bf 8f6f 	isb	sy
 800f5cc:	f3bf 8f4f 	dsb	sy
 800f5d0:	60fb      	str	r3, [r7, #12]
}
 800f5d2:	bf00      	nop
 800f5d4:	e7fe      	b.n	800f5d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f5d6:	693b      	ldr	r3, [r7, #16]
 800f5d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d10a      	bne.n	800f5f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e2:	f383 8811 	msr	BASEPRI, r3
 800f5e6:	f3bf 8f6f 	isb	sy
 800f5ea:	f3bf 8f4f 	dsb	sy
 800f5ee:	60bb      	str	r3, [r7, #8]
}
 800f5f0:	bf00      	nop
 800f5f2:	e7fe      	b.n	800f5f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f5f8:	1e5a      	subs	r2, r3, #1
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f606:	429a      	cmp	r2, r3
 800f608:	d02c      	beq.n	800f664 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d128      	bne.n	800f664 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	3304      	adds	r3, #4
 800f616:	4618      	mov	r0, r3
 800f618:	f7fe fb30 	bl	800dc7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f628:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f62c:	693b      	ldr	r3, [r7, #16]
 800f62e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f634:	4b0f      	ldr	r3, [pc, #60]	; (800f674 <xTaskPriorityDisinherit+0xd4>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	429a      	cmp	r2, r3
 800f63a:	d903      	bls.n	800f644 <xTaskPriorityDisinherit+0xa4>
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f640:	4a0c      	ldr	r2, [pc, #48]	; (800f674 <xTaskPriorityDisinherit+0xd4>)
 800f642:	6013      	str	r3, [r2, #0]
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f648:	4613      	mov	r3, r2
 800f64a:	009b      	lsls	r3, r3, #2
 800f64c:	4413      	add	r3, r2
 800f64e:	009b      	lsls	r3, r3, #2
 800f650:	4a09      	ldr	r2, [pc, #36]	; (800f678 <xTaskPriorityDisinherit+0xd8>)
 800f652:	441a      	add	r2, r3
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	3304      	adds	r3, #4
 800f658:	4619      	mov	r1, r3
 800f65a:	4610      	mov	r0, r2
 800f65c:	f7fe fab1 	bl	800dbc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f660:	2301      	movs	r3, #1
 800f662:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f664:	697b      	ldr	r3, [r7, #20]
	}
 800f666:	4618      	mov	r0, r3
 800f668:	3718      	adds	r7, #24
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	200016a0 	.word	0x200016a0
 800f674:	20001b7c 	.word	0x20001b7c
 800f678:	200016a4 	.word	0x200016a4

0800f67c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b084      	sub	sp, #16
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f686:	4b21      	ldr	r3, [pc, #132]	; (800f70c <prvAddCurrentTaskToDelayedList+0x90>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f68c:	4b20      	ldr	r3, [pc, #128]	; (800f710 <prvAddCurrentTaskToDelayedList+0x94>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	3304      	adds	r3, #4
 800f692:	4618      	mov	r0, r3
 800f694:	f7fe faf2 	bl	800dc7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f69e:	d10a      	bne.n	800f6b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d007      	beq.n	800f6b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f6a6:	4b1a      	ldr	r3, [pc, #104]	; (800f710 <prvAddCurrentTaskToDelayedList+0x94>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	3304      	adds	r3, #4
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	4819      	ldr	r0, [pc, #100]	; (800f714 <prvAddCurrentTaskToDelayedList+0x98>)
 800f6b0:	f7fe fa87 	bl	800dbc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f6b4:	e026      	b.n	800f704 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f6b6:	68fa      	ldr	r2, [r7, #12]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	4413      	add	r3, r2
 800f6bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f6be:	4b14      	ldr	r3, [pc, #80]	; (800f710 <prvAddCurrentTaskToDelayedList+0x94>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	68ba      	ldr	r2, [r7, #8]
 800f6c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f6c6:	68ba      	ldr	r2, [r7, #8]
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d209      	bcs.n	800f6e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f6ce:	4b12      	ldr	r3, [pc, #72]	; (800f718 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f6d0:	681a      	ldr	r2, [r3, #0]
 800f6d2:	4b0f      	ldr	r3, [pc, #60]	; (800f710 <prvAddCurrentTaskToDelayedList+0x94>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	3304      	adds	r3, #4
 800f6d8:	4619      	mov	r1, r3
 800f6da:	4610      	mov	r0, r2
 800f6dc:	f7fe fa95 	bl	800dc0a <vListInsert>
}
 800f6e0:	e010      	b.n	800f704 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f6e2:	4b0e      	ldr	r3, [pc, #56]	; (800f71c <prvAddCurrentTaskToDelayedList+0xa0>)
 800f6e4:	681a      	ldr	r2, [r3, #0]
 800f6e6:	4b0a      	ldr	r3, [pc, #40]	; (800f710 <prvAddCurrentTaskToDelayedList+0x94>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	3304      	adds	r3, #4
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	4610      	mov	r0, r2
 800f6f0:	f7fe fa8b 	bl	800dc0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f6f4:	4b0a      	ldr	r3, [pc, #40]	; (800f720 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	68ba      	ldr	r2, [r7, #8]
 800f6fa:	429a      	cmp	r2, r3
 800f6fc:	d202      	bcs.n	800f704 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f6fe:	4a08      	ldr	r2, [pc, #32]	; (800f720 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	6013      	str	r3, [r2, #0]
}
 800f704:	bf00      	nop
 800f706:	3710      	adds	r7, #16
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}
 800f70c:	20001b78 	.word	0x20001b78
 800f710:	200016a0 	.word	0x200016a0
 800f714:	20001b60 	.word	0x20001b60
 800f718:	20001b30 	.word	0x20001b30
 800f71c:	20001b2c 	.word	0x20001b2c
 800f720:	20001b94 	.word	0x20001b94

0800f724 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b08a      	sub	sp, #40	; 0x28
 800f728:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f72a:	2300      	movs	r3, #0
 800f72c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f72e:	f000 fb07 	bl	800fd40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f732:	4b1c      	ldr	r3, [pc, #112]	; (800f7a4 <xTimerCreateTimerTask+0x80>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d021      	beq.n	800f77e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f73a:	2300      	movs	r3, #0
 800f73c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f73e:	2300      	movs	r3, #0
 800f740:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f742:	1d3a      	adds	r2, r7, #4
 800f744:	f107 0108 	add.w	r1, r7, #8
 800f748:	f107 030c 	add.w	r3, r7, #12
 800f74c:	4618      	mov	r0, r3
 800f74e:	f7fe f9f1 	bl	800db34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f752:	6879      	ldr	r1, [r7, #4]
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	68fa      	ldr	r2, [r7, #12]
 800f758:	9202      	str	r2, [sp, #8]
 800f75a:	9301      	str	r3, [sp, #4]
 800f75c:	2302      	movs	r3, #2
 800f75e:	9300      	str	r3, [sp, #0]
 800f760:	2300      	movs	r3, #0
 800f762:	460a      	mov	r2, r1
 800f764:	4910      	ldr	r1, [pc, #64]	; (800f7a8 <xTimerCreateTimerTask+0x84>)
 800f766:	4811      	ldr	r0, [pc, #68]	; (800f7ac <xTimerCreateTimerTask+0x88>)
 800f768:	f7fe ffd8 	bl	800e71c <xTaskCreateStatic>
 800f76c:	4603      	mov	r3, r0
 800f76e:	4a10      	ldr	r2, [pc, #64]	; (800f7b0 <xTimerCreateTimerTask+0x8c>)
 800f770:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f772:	4b0f      	ldr	r3, [pc, #60]	; (800f7b0 <xTimerCreateTimerTask+0x8c>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d001      	beq.n	800f77e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f77a:	2301      	movs	r3, #1
 800f77c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d10a      	bne.n	800f79a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f788:	f383 8811 	msr	BASEPRI, r3
 800f78c:	f3bf 8f6f 	isb	sy
 800f790:	f3bf 8f4f 	dsb	sy
 800f794:	613b      	str	r3, [r7, #16]
}
 800f796:	bf00      	nop
 800f798:	e7fe      	b.n	800f798 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f79a:	697b      	ldr	r3, [r7, #20]
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3718      	adds	r7, #24
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	20001bd0 	.word	0x20001bd0
 800f7a8:	080133bc 	.word	0x080133bc
 800f7ac:	0800f8e9 	.word	0x0800f8e9
 800f7b0:	20001bd4 	.word	0x20001bd4

0800f7b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b08a      	sub	sp, #40	; 0x28
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	60f8      	str	r0, [r7, #12]
 800f7bc:	60b9      	str	r1, [r7, #8]
 800f7be:	607a      	str	r2, [r7, #4]
 800f7c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d10a      	bne.n	800f7e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d0:	f383 8811 	msr	BASEPRI, r3
 800f7d4:	f3bf 8f6f 	isb	sy
 800f7d8:	f3bf 8f4f 	dsb	sy
 800f7dc:	623b      	str	r3, [r7, #32]
}
 800f7de:	bf00      	nop
 800f7e0:	e7fe      	b.n	800f7e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f7e2:	4b1a      	ldr	r3, [pc, #104]	; (800f84c <xTimerGenericCommand+0x98>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d02a      	beq.n	800f840 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	2b05      	cmp	r3, #5
 800f7fa:	dc18      	bgt.n	800f82e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f7fc:	f7ff feb2 	bl	800f564 <xTaskGetSchedulerState>
 800f800:	4603      	mov	r3, r0
 800f802:	2b02      	cmp	r3, #2
 800f804:	d109      	bne.n	800f81a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f806:	4b11      	ldr	r3, [pc, #68]	; (800f84c <xTimerGenericCommand+0x98>)
 800f808:	6818      	ldr	r0, [r3, #0]
 800f80a:	f107 0110 	add.w	r1, r7, #16
 800f80e:	2300      	movs	r3, #0
 800f810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f812:	f7fe fb9b 	bl	800df4c <xQueueGenericSend>
 800f816:	6278      	str	r0, [r7, #36]	; 0x24
 800f818:	e012      	b.n	800f840 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f81a:	4b0c      	ldr	r3, [pc, #48]	; (800f84c <xTimerGenericCommand+0x98>)
 800f81c:	6818      	ldr	r0, [r3, #0]
 800f81e:	f107 0110 	add.w	r1, r7, #16
 800f822:	2300      	movs	r3, #0
 800f824:	2200      	movs	r2, #0
 800f826:	f7fe fb91 	bl	800df4c <xQueueGenericSend>
 800f82a:	6278      	str	r0, [r7, #36]	; 0x24
 800f82c:	e008      	b.n	800f840 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f82e:	4b07      	ldr	r3, [pc, #28]	; (800f84c <xTimerGenericCommand+0x98>)
 800f830:	6818      	ldr	r0, [r3, #0]
 800f832:	f107 0110 	add.w	r1, r7, #16
 800f836:	2300      	movs	r3, #0
 800f838:	683a      	ldr	r2, [r7, #0]
 800f83a:	f7fe fc85 	bl	800e148 <xQueueGenericSendFromISR>
 800f83e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f842:	4618      	mov	r0, r3
 800f844:	3728      	adds	r7, #40	; 0x28
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}
 800f84a:	bf00      	nop
 800f84c:	20001bd0 	.word	0x20001bd0

0800f850 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b088      	sub	sp, #32
 800f854:	af02      	add	r7, sp, #8
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f85a:	4b22      	ldr	r3, [pc, #136]	; (800f8e4 <prvProcessExpiredTimer+0x94>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	68db      	ldr	r3, [r3, #12]
 800f862:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	3304      	adds	r3, #4
 800f868:	4618      	mov	r0, r3
 800f86a:	f7fe fa07 	bl	800dc7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f874:	f003 0304 	and.w	r3, r3, #4
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d022      	beq.n	800f8c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	699a      	ldr	r2, [r3, #24]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	18d1      	adds	r1, r2, r3
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	683a      	ldr	r2, [r7, #0]
 800f888:	6978      	ldr	r0, [r7, #20]
 800f88a:	f000 f8d1 	bl	800fa30 <prvInsertTimerInActiveList>
 800f88e:	4603      	mov	r3, r0
 800f890:	2b00      	cmp	r3, #0
 800f892:	d01f      	beq.n	800f8d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f894:	2300      	movs	r3, #0
 800f896:	9300      	str	r3, [sp, #0]
 800f898:	2300      	movs	r3, #0
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	2100      	movs	r1, #0
 800f89e:	6978      	ldr	r0, [r7, #20]
 800f8a0:	f7ff ff88 	bl	800f7b4 <xTimerGenericCommand>
 800f8a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f8a6:	693b      	ldr	r3, [r7, #16]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d113      	bne.n	800f8d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b0:	f383 8811 	msr	BASEPRI, r3
 800f8b4:	f3bf 8f6f 	isb	sy
 800f8b8:	f3bf 8f4f 	dsb	sy
 800f8bc:	60fb      	str	r3, [r7, #12]
}
 800f8be:	bf00      	nop
 800f8c0:	e7fe      	b.n	800f8c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8c8:	f023 0301 	bic.w	r3, r3, #1
 800f8cc:	b2da      	uxtb	r2, r3
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	6a1b      	ldr	r3, [r3, #32]
 800f8d8:	6978      	ldr	r0, [r7, #20]
 800f8da:	4798      	blx	r3
}
 800f8dc:	bf00      	nop
 800f8de:	3718      	adds	r7, #24
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}
 800f8e4:	20001bc8 	.word	0x20001bc8

0800f8e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b084      	sub	sp, #16
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f8f0:	f107 0308 	add.w	r3, r7, #8
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f000 f857 	bl	800f9a8 <prvGetNextExpireTime>
 800f8fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	4619      	mov	r1, r3
 800f900:	68f8      	ldr	r0, [r7, #12]
 800f902:	f000 f803 	bl	800f90c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f906:	f000 f8d5 	bl	800fab4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f90a:	e7f1      	b.n	800f8f0 <prvTimerTask+0x8>

0800f90c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b084      	sub	sp, #16
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f916:	f7ff fa43 	bl	800eda0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f91a:	f107 0308 	add.w	r3, r7, #8
 800f91e:	4618      	mov	r0, r3
 800f920:	f000 f866 	bl	800f9f0 <prvSampleTimeNow>
 800f924:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d130      	bne.n	800f98e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d10a      	bne.n	800f948 <prvProcessTimerOrBlockTask+0x3c>
 800f932:	687a      	ldr	r2, [r7, #4]
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	429a      	cmp	r2, r3
 800f938:	d806      	bhi.n	800f948 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f93a:	f7ff fa3f 	bl	800edbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f93e:	68f9      	ldr	r1, [r7, #12]
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f7ff ff85 	bl	800f850 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f946:	e024      	b.n	800f992 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d008      	beq.n	800f960 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f94e:	4b13      	ldr	r3, [pc, #76]	; (800f99c <prvProcessTimerOrBlockTask+0x90>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d101      	bne.n	800f95c <prvProcessTimerOrBlockTask+0x50>
 800f958:	2301      	movs	r3, #1
 800f95a:	e000      	b.n	800f95e <prvProcessTimerOrBlockTask+0x52>
 800f95c:	2300      	movs	r3, #0
 800f95e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f960:	4b0f      	ldr	r3, [pc, #60]	; (800f9a0 <prvProcessTimerOrBlockTask+0x94>)
 800f962:	6818      	ldr	r0, [r3, #0]
 800f964:	687a      	ldr	r2, [r7, #4]
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	1ad3      	subs	r3, r2, r3
 800f96a:	683a      	ldr	r2, [r7, #0]
 800f96c:	4619      	mov	r1, r3
 800f96e:	f7fe fea1 	bl	800e6b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f972:	f7ff fa23 	bl	800edbc <xTaskResumeAll>
 800f976:	4603      	mov	r3, r0
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d10a      	bne.n	800f992 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f97c:	4b09      	ldr	r3, [pc, #36]	; (800f9a4 <prvProcessTimerOrBlockTask+0x98>)
 800f97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f982:	601a      	str	r2, [r3, #0]
 800f984:	f3bf 8f4f 	dsb	sy
 800f988:	f3bf 8f6f 	isb	sy
}
 800f98c:	e001      	b.n	800f992 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f98e:	f7ff fa15 	bl	800edbc <xTaskResumeAll>
}
 800f992:	bf00      	nop
 800f994:	3710      	adds	r7, #16
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
 800f99a:	bf00      	nop
 800f99c:	20001bcc 	.word	0x20001bcc
 800f9a0:	20001bd0 	.word	0x20001bd0
 800f9a4:	e000ed04 	.word	0xe000ed04

0800f9a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	b085      	sub	sp, #20
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f9b0:	4b0e      	ldr	r3, [pc, #56]	; (800f9ec <prvGetNextExpireTime+0x44>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d101      	bne.n	800f9be <prvGetNextExpireTime+0x16>
 800f9ba:	2201      	movs	r2, #1
 800f9bc:	e000      	b.n	800f9c0 <prvGetNextExpireTime+0x18>
 800f9be:	2200      	movs	r2, #0
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d105      	bne.n	800f9d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f9cc:	4b07      	ldr	r3, [pc, #28]	; (800f9ec <prvGetNextExpireTime+0x44>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	68db      	ldr	r3, [r3, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	60fb      	str	r3, [r7, #12]
 800f9d6:	e001      	b.n	800f9dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f9d8:	2300      	movs	r3, #0
 800f9da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3714      	adds	r7, #20
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e8:	4770      	bx	lr
 800f9ea:	bf00      	nop
 800f9ec:	20001bc8 	.word	0x20001bc8

0800f9f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f9f8:	f7ff fa7e 	bl	800eef8 <xTaskGetTickCount>
 800f9fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f9fe:	4b0b      	ldr	r3, [pc, #44]	; (800fa2c <prvSampleTimeNow+0x3c>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	68fa      	ldr	r2, [r7, #12]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d205      	bcs.n	800fa14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fa08:	f000 f936 	bl	800fc78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2201      	movs	r2, #1
 800fa10:	601a      	str	r2, [r3, #0]
 800fa12:	e002      	b.n	800fa1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2200      	movs	r2, #0
 800fa18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fa1a:	4a04      	ldr	r2, [pc, #16]	; (800fa2c <prvSampleTimeNow+0x3c>)
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fa20:	68fb      	ldr	r3, [r7, #12]
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3710      	adds	r7, #16
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	20001bd8 	.word	0x20001bd8

0800fa30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b086      	sub	sp, #24
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	60f8      	str	r0, [r7, #12]
 800fa38:	60b9      	str	r1, [r7, #8]
 800fa3a:	607a      	str	r2, [r7, #4]
 800fa3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	68ba      	ldr	r2, [r7, #8]
 800fa46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	68fa      	ldr	r2, [r7, #12]
 800fa4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fa4e:	68ba      	ldr	r2, [r7, #8]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d812      	bhi.n	800fa7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa56:	687a      	ldr	r2, [r7, #4]
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	1ad2      	subs	r2, r2, r3
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	699b      	ldr	r3, [r3, #24]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d302      	bcc.n	800fa6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fa64:	2301      	movs	r3, #1
 800fa66:	617b      	str	r3, [r7, #20]
 800fa68:	e01b      	b.n	800faa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fa6a:	4b10      	ldr	r3, [pc, #64]	; (800faac <prvInsertTimerInActiveList+0x7c>)
 800fa6c:	681a      	ldr	r2, [r3, #0]
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	3304      	adds	r3, #4
 800fa72:	4619      	mov	r1, r3
 800fa74:	4610      	mov	r0, r2
 800fa76:	f7fe f8c8 	bl	800dc0a <vListInsert>
 800fa7a:	e012      	b.n	800faa2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fa7c:	687a      	ldr	r2, [r7, #4]
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d206      	bcs.n	800fa92 <prvInsertTimerInActiveList+0x62>
 800fa84:	68ba      	ldr	r2, [r7, #8]
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d302      	bcc.n	800fa92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	617b      	str	r3, [r7, #20]
 800fa90:	e007      	b.n	800faa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fa92:	4b07      	ldr	r3, [pc, #28]	; (800fab0 <prvInsertTimerInActiveList+0x80>)
 800fa94:	681a      	ldr	r2, [r3, #0]
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	3304      	adds	r3, #4
 800fa9a:	4619      	mov	r1, r3
 800fa9c:	4610      	mov	r0, r2
 800fa9e:	f7fe f8b4 	bl	800dc0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800faa2:	697b      	ldr	r3, [r7, #20]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3718      	adds	r7, #24
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	20001bcc 	.word	0x20001bcc
 800fab0:	20001bc8 	.word	0x20001bc8

0800fab4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b08e      	sub	sp, #56	; 0x38
 800fab8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800faba:	e0ca      	b.n	800fc52 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	da18      	bge.n	800faf4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fac2:	1d3b      	adds	r3, r7, #4
 800fac4:	3304      	adds	r3, #4
 800fac6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faca:	2b00      	cmp	r3, #0
 800facc:	d10a      	bne.n	800fae4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800face:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad2:	f383 8811 	msr	BASEPRI, r3
 800fad6:	f3bf 8f6f 	isb	sy
 800fada:	f3bf 8f4f 	dsb	sy
 800fade:	61fb      	str	r3, [r7, #28]
}
 800fae0:	bf00      	nop
 800fae2:	e7fe      	b.n	800fae2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800faea:	6850      	ldr	r0, [r2, #4]
 800faec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800faee:	6892      	ldr	r2, [r2, #8]
 800faf0:	4611      	mov	r1, r2
 800faf2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	f2c0 80aa 	blt.w	800fc50 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb02:	695b      	ldr	r3, [r3, #20]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d004      	beq.n	800fb12 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb0a:	3304      	adds	r3, #4
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f7fe f8b5 	bl	800dc7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fb12:	463b      	mov	r3, r7
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7ff ff6b 	bl	800f9f0 <prvSampleTimeNow>
 800fb1a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2b09      	cmp	r3, #9
 800fb20:	f200 8097 	bhi.w	800fc52 <prvProcessReceivedCommands+0x19e>
 800fb24:	a201      	add	r2, pc, #4	; (adr r2, 800fb2c <prvProcessReceivedCommands+0x78>)
 800fb26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb2a:	bf00      	nop
 800fb2c:	0800fb55 	.word	0x0800fb55
 800fb30:	0800fb55 	.word	0x0800fb55
 800fb34:	0800fb55 	.word	0x0800fb55
 800fb38:	0800fbc9 	.word	0x0800fbc9
 800fb3c:	0800fbdd 	.word	0x0800fbdd
 800fb40:	0800fc27 	.word	0x0800fc27
 800fb44:	0800fb55 	.word	0x0800fb55
 800fb48:	0800fb55 	.word	0x0800fb55
 800fb4c:	0800fbc9 	.word	0x0800fbc9
 800fb50:	0800fbdd 	.word	0x0800fbdd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb5a:	f043 0301 	orr.w	r3, r3, #1
 800fb5e:	b2da      	uxtb	r2, r3
 800fb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fb66:	68ba      	ldr	r2, [r7, #8]
 800fb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb6a:	699b      	ldr	r3, [r3, #24]
 800fb6c:	18d1      	adds	r1, r2, r3
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb74:	f7ff ff5c 	bl	800fa30 <prvInsertTimerInActiveList>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d069      	beq.n	800fc52 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb80:	6a1b      	ldr	r3, [r3, #32]
 800fb82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb8c:	f003 0304 	and.w	r3, r3, #4
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d05e      	beq.n	800fc52 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fb94:	68ba      	ldr	r2, [r7, #8]
 800fb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb98:	699b      	ldr	r3, [r3, #24]
 800fb9a:	441a      	add	r2, r3
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	9300      	str	r3, [sp, #0]
 800fba0:	2300      	movs	r3, #0
 800fba2:	2100      	movs	r1, #0
 800fba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fba6:	f7ff fe05 	bl	800f7b4 <xTimerGenericCommand>
 800fbaa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fbac:	6a3b      	ldr	r3, [r7, #32]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d14f      	bne.n	800fc52 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb6:	f383 8811 	msr	BASEPRI, r3
 800fbba:	f3bf 8f6f 	isb	sy
 800fbbe:	f3bf 8f4f 	dsb	sy
 800fbc2:	61bb      	str	r3, [r7, #24]
}
 800fbc4:	bf00      	nop
 800fbc6:	e7fe      	b.n	800fbc6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbce:	f023 0301 	bic.w	r3, r3, #1
 800fbd2:	b2da      	uxtb	r2, r3
 800fbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fbda:	e03a      	b.n	800fc52 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbe2:	f043 0301 	orr.w	r3, r3, #1
 800fbe6:	b2da      	uxtb	r2, r3
 800fbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fbee:	68ba      	ldr	r2, [r7, #8]
 800fbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbf2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbf6:	699b      	ldr	r3, [r3, #24]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d10a      	bne.n	800fc12 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc00:	f383 8811 	msr	BASEPRI, r3
 800fc04:	f3bf 8f6f 	isb	sy
 800fc08:	f3bf 8f4f 	dsb	sy
 800fc0c:	617b      	str	r3, [r7, #20]
}
 800fc0e:	bf00      	nop
 800fc10:	e7fe      	b.n	800fc10 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc14:	699a      	ldr	r2, [r3, #24]
 800fc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc18:	18d1      	adds	r1, r2, r3
 800fc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc20:	f7ff ff06 	bl	800fa30 <prvInsertTimerInActiveList>
					break;
 800fc24:	e015      	b.n	800fc52 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc2c:	f003 0302 	and.w	r3, r3, #2
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d103      	bne.n	800fc3c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fc34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc36:	f000 fbdb 	bl	80103f0 <vPortFree>
 800fc3a:	e00a      	b.n	800fc52 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc42:	f023 0301 	bic.w	r3, r3, #1
 800fc46:	b2da      	uxtb	r2, r3
 800fc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fc4e:	e000      	b.n	800fc52 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fc50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fc52:	4b08      	ldr	r3, [pc, #32]	; (800fc74 <prvProcessReceivedCommands+0x1c0>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	1d39      	adds	r1, r7, #4
 800fc58:	2200      	movs	r2, #0
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7fe fb10 	bl	800e280 <xQueueReceive>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	f47f af2a 	bne.w	800fabc <prvProcessReceivedCommands+0x8>
	}
}
 800fc68:	bf00      	nop
 800fc6a:	bf00      	nop
 800fc6c:	3730      	adds	r7, #48	; 0x30
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}
 800fc72:	bf00      	nop
 800fc74:	20001bd0 	.word	0x20001bd0

0800fc78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b088      	sub	sp, #32
 800fc7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fc7e:	e048      	b.n	800fd12 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc80:	4b2d      	ldr	r3, [pc, #180]	; (800fd38 <prvSwitchTimerLists+0xc0>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	68db      	ldr	r3, [r3, #12]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc8a:	4b2b      	ldr	r3, [pc, #172]	; (800fd38 <prvSwitchTimerLists+0xc0>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	68db      	ldr	r3, [r3, #12]
 800fc90:	68db      	ldr	r3, [r3, #12]
 800fc92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	3304      	adds	r3, #4
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f7fd ffef 	bl	800dc7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	6a1b      	ldr	r3, [r3, #32]
 800fca2:	68f8      	ldr	r0, [r7, #12]
 800fca4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fcac:	f003 0304 	and.w	r3, r3, #4
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d02e      	beq.n	800fd12 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	699b      	ldr	r3, [r3, #24]
 800fcb8:	693a      	ldr	r2, [r7, #16]
 800fcba:	4413      	add	r3, r2
 800fcbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fcbe:	68ba      	ldr	r2, [r7, #8]
 800fcc0:	693b      	ldr	r3, [r7, #16]
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d90e      	bls.n	800fce4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	68ba      	ldr	r2, [r7, #8]
 800fcca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	68fa      	ldr	r2, [r7, #12]
 800fcd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fcd2:	4b19      	ldr	r3, [pc, #100]	; (800fd38 <prvSwitchTimerLists+0xc0>)
 800fcd4:	681a      	ldr	r2, [r3, #0]
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	3304      	adds	r3, #4
 800fcda:	4619      	mov	r1, r3
 800fcdc:	4610      	mov	r0, r2
 800fcde:	f7fd ff94 	bl	800dc0a <vListInsert>
 800fce2:	e016      	b.n	800fd12 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fce4:	2300      	movs	r3, #0
 800fce6:	9300      	str	r3, [sp, #0]
 800fce8:	2300      	movs	r3, #0
 800fcea:	693a      	ldr	r2, [r7, #16]
 800fcec:	2100      	movs	r1, #0
 800fcee:	68f8      	ldr	r0, [r7, #12]
 800fcf0:	f7ff fd60 	bl	800f7b4 <xTimerGenericCommand>
 800fcf4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d10a      	bne.n	800fd12 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd00:	f383 8811 	msr	BASEPRI, r3
 800fd04:	f3bf 8f6f 	isb	sy
 800fd08:	f3bf 8f4f 	dsb	sy
 800fd0c:	603b      	str	r3, [r7, #0]
}
 800fd0e:	bf00      	nop
 800fd10:	e7fe      	b.n	800fd10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fd12:	4b09      	ldr	r3, [pc, #36]	; (800fd38 <prvSwitchTimerLists+0xc0>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d1b1      	bne.n	800fc80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fd1c:	4b06      	ldr	r3, [pc, #24]	; (800fd38 <prvSwitchTimerLists+0xc0>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fd22:	4b06      	ldr	r3, [pc, #24]	; (800fd3c <prvSwitchTimerLists+0xc4>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	4a04      	ldr	r2, [pc, #16]	; (800fd38 <prvSwitchTimerLists+0xc0>)
 800fd28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fd2a:	4a04      	ldr	r2, [pc, #16]	; (800fd3c <prvSwitchTimerLists+0xc4>)
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	6013      	str	r3, [r2, #0]
}
 800fd30:	bf00      	nop
 800fd32:	3718      	adds	r7, #24
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}
 800fd38:	20001bc8 	.word	0x20001bc8
 800fd3c:	20001bcc 	.word	0x20001bcc

0800fd40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fd46:	f000 f965 	bl	8010014 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fd4a:	4b15      	ldr	r3, [pc, #84]	; (800fda0 <prvCheckForValidListAndQueue+0x60>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d120      	bne.n	800fd94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fd52:	4814      	ldr	r0, [pc, #80]	; (800fda4 <prvCheckForValidListAndQueue+0x64>)
 800fd54:	f7fd ff08 	bl	800db68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fd58:	4813      	ldr	r0, [pc, #76]	; (800fda8 <prvCheckForValidListAndQueue+0x68>)
 800fd5a:	f7fd ff05 	bl	800db68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fd5e:	4b13      	ldr	r3, [pc, #76]	; (800fdac <prvCheckForValidListAndQueue+0x6c>)
 800fd60:	4a10      	ldr	r2, [pc, #64]	; (800fda4 <prvCheckForValidListAndQueue+0x64>)
 800fd62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fd64:	4b12      	ldr	r3, [pc, #72]	; (800fdb0 <prvCheckForValidListAndQueue+0x70>)
 800fd66:	4a10      	ldr	r2, [pc, #64]	; (800fda8 <prvCheckForValidListAndQueue+0x68>)
 800fd68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	9300      	str	r3, [sp, #0]
 800fd6e:	4b11      	ldr	r3, [pc, #68]	; (800fdb4 <prvCheckForValidListAndQueue+0x74>)
 800fd70:	4a11      	ldr	r2, [pc, #68]	; (800fdb8 <prvCheckForValidListAndQueue+0x78>)
 800fd72:	2110      	movs	r1, #16
 800fd74:	200a      	movs	r0, #10
 800fd76:	f7fe f813 	bl	800dda0 <xQueueGenericCreateStatic>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	4a08      	ldr	r2, [pc, #32]	; (800fda0 <prvCheckForValidListAndQueue+0x60>)
 800fd7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fd80:	4b07      	ldr	r3, [pc, #28]	; (800fda0 <prvCheckForValidListAndQueue+0x60>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d005      	beq.n	800fd94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fd88:	4b05      	ldr	r3, [pc, #20]	; (800fda0 <prvCheckForValidListAndQueue+0x60>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	490b      	ldr	r1, [pc, #44]	; (800fdbc <prvCheckForValidListAndQueue+0x7c>)
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7fe fc66 	bl	800e660 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fd94:	f000 f96e 	bl	8010074 <vPortExitCritical>
}
 800fd98:	bf00      	nop
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}
 800fd9e:	bf00      	nop
 800fda0:	20001bd0 	.word	0x20001bd0
 800fda4:	20001ba0 	.word	0x20001ba0
 800fda8:	20001bb4 	.word	0x20001bb4
 800fdac:	20001bc8 	.word	0x20001bc8
 800fdb0:	20001bcc 	.word	0x20001bcc
 800fdb4:	20001c7c 	.word	0x20001c7c
 800fdb8:	20001bdc 	.word	0x20001bdc
 800fdbc:	080133c4 	.word	0x080133c4

0800fdc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fdc0:	b480      	push	{r7}
 800fdc2:	b085      	sub	sp, #20
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	60f8      	str	r0, [r7, #12]
 800fdc8:	60b9      	str	r1, [r7, #8]
 800fdca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	3b04      	subs	r3, #4
 800fdd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fdd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	3b04      	subs	r3, #4
 800fdde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	f023 0201 	bic.w	r2, r3, #1
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	3b04      	subs	r3, #4
 800fdee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fdf0:	4a0c      	ldr	r2, [pc, #48]	; (800fe24 <pxPortInitialiseStack+0x64>)
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	3b14      	subs	r3, #20
 800fdfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fdfc:	687a      	ldr	r2, [r7, #4]
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	3b04      	subs	r3, #4
 800fe06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	f06f 0202 	mvn.w	r2, #2
 800fe0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	3b20      	subs	r3, #32
 800fe14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fe16:	68fb      	ldr	r3, [r7, #12]
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3714      	adds	r7, #20
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr
 800fe24:	0800fe29 	.word	0x0800fe29

0800fe28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fe28:	b480      	push	{r7}
 800fe2a:	b085      	sub	sp, #20
 800fe2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fe32:	4b12      	ldr	r3, [pc, #72]	; (800fe7c <prvTaskExitError+0x54>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe3a:	d00a      	beq.n	800fe52 <prvTaskExitError+0x2a>
	__asm volatile
 800fe3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe40:	f383 8811 	msr	BASEPRI, r3
 800fe44:	f3bf 8f6f 	isb	sy
 800fe48:	f3bf 8f4f 	dsb	sy
 800fe4c:	60fb      	str	r3, [r7, #12]
}
 800fe4e:	bf00      	nop
 800fe50:	e7fe      	b.n	800fe50 <prvTaskExitError+0x28>
	__asm volatile
 800fe52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe56:	f383 8811 	msr	BASEPRI, r3
 800fe5a:	f3bf 8f6f 	isb	sy
 800fe5e:	f3bf 8f4f 	dsb	sy
 800fe62:	60bb      	str	r3, [r7, #8]
}
 800fe64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fe66:	bf00      	nop
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d0fc      	beq.n	800fe68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fe6e:	bf00      	nop
 800fe70:	bf00      	nop
 800fe72:	3714      	adds	r7, #20
 800fe74:	46bd      	mov	sp, r7
 800fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7a:	4770      	bx	lr
 800fe7c:	20000670 	.word	0x20000670

0800fe80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fe80:	4b07      	ldr	r3, [pc, #28]	; (800fea0 <pxCurrentTCBConst2>)
 800fe82:	6819      	ldr	r1, [r3, #0]
 800fe84:	6808      	ldr	r0, [r1, #0]
 800fe86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe8a:	f380 8809 	msr	PSP, r0
 800fe8e:	f3bf 8f6f 	isb	sy
 800fe92:	f04f 0000 	mov.w	r0, #0
 800fe96:	f380 8811 	msr	BASEPRI, r0
 800fe9a:	4770      	bx	lr
 800fe9c:	f3af 8000 	nop.w

0800fea0 <pxCurrentTCBConst2>:
 800fea0:	200016a0 	.word	0x200016a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fea4:	bf00      	nop
 800fea6:	bf00      	nop

0800fea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fea8:	4808      	ldr	r0, [pc, #32]	; (800fecc <prvPortStartFirstTask+0x24>)
 800feaa:	6800      	ldr	r0, [r0, #0]
 800feac:	6800      	ldr	r0, [r0, #0]
 800feae:	f380 8808 	msr	MSP, r0
 800feb2:	f04f 0000 	mov.w	r0, #0
 800feb6:	f380 8814 	msr	CONTROL, r0
 800feba:	b662      	cpsie	i
 800febc:	b661      	cpsie	f
 800febe:	f3bf 8f4f 	dsb	sy
 800fec2:	f3bf 8f6f 	isb	sy
 800fec6:	df00      	svc	0
 800fec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800feca:	bf00      	nop
 800fecc:	e000ed08 	.word	0xe000ed08

0800fed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b086      	sub	sp, #24
 800fed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fed6:	4b46      	ldr	r3, [pc, #280]	; (800fff0 <xPortStartScheduler+0x120>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	4a46      	ldr	r2, [pc, #280]	; (800fff4 <xPortStartScheduler+0x124>)
 800fedc:	4293      	cmp	r3, r2
 800fede:	d10a      	bne.n	800fef6 <xPortStartScheduler+0x26>
	__asm volatile
 800fee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee4:	f383 8811 	msr	BASEPRI, r3
 800fee8:	f3bf 8f6f 	isb	sy
 800feec:	f3bf 8f4f 	dsb	sy
 800fef0:	613b      	str	r3, [r7, #16]
}
 800fef2:	bf00      	nop
 800fef4:	e7fe      	b.n	800fef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fef6:	4b3e      	ldr	r3, [pc, #248]	; (800fff0 <xPortStartScheduler+0x120>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	4a3f      	ldr	r2, [pc, #252]	; (800fff8 <xPortStartScheduler+0x128>)
 800fefc:	4293      	cmp	r3, r2
 800fefe:	d10a      	bne.n	800ff16 <xPortStartScheduler+0x46>
	__asm volatile
 800ff00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff04:	f383 8811 	msr	BASEPRI, r3
 800ff08:	f3bf 8f6f 	isb	sy
 800ff0c:	f3bf 8f4f 	dsb	sy
 800ff10:	60fb      	str	r3, [r7, #12]
}
 800ff12:	bf00      	nop
 800ff14:	e7fe      	b.n	800ff14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ff16:	4b39      	ldr	r3, [pc, #228]	; (800fffc <xPortStartScheduler+0x12c>)
 800ff18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	b2db      	uxtb	r3, r3
 800ff20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	22ff      	movs	r2, #255	; 0xff
 800ff26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	b2db      	uxtb	r3, r3
 800ff2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ff30:	78fb      	ldrb	r3, [r7, #3]
 800ff32:	b2db      	uxtb	r3, r3
 800ff34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ff38:	b2da      	uxtb	r2, r3
 800ff3a:	4b31      	ldr	r3, [pc, #196]	; (8010000 <xPortStartScheduler+0x130>)
 800ff3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ff3e:	4b31      	ldr	r3, [pc, #196]	; (8010004 <xPortStartScheduler+0x134>)
 800ff40:	2207      	movs	r2, #7
 800ff42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ff44:	e009      	b.n	800ff5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ff46:	4b2f      	ldr	r3, [pc, #188]	; (8010004 <xPortStartScheduler+0x134>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	3b01      	subs	r3, #1
 800ff4c:	4a2d      	ldr	r2, [pc, #180]	; (8010004 <xPortStartScheduler+0x134>)
 800ff4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ff50:	78fb      	ldrb	r3, [r7, #3]
 800ff52:	b2db      	uxtb	r3, r3
 800ff54:	005b      	lsls	r3, r3, #1
 800ff56:	b2db      	uxtb	r3, r3
 800ff58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ff5a:	78fb      	ldrb	r3, [r7, #3]
 800ff5c:	b2db      	uxtb	r3, r3
 800ff5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff62:	2b80      	cmp	r3, #128	; 0x80
 800ff64:	d0ef      	beq.n	800ff46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ff66:	4b27      	ldr	r3, [pc, #156]	; (8010004 <xPortStartScheduler+0x134>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	f1c3 0307 	rsb	r3, r3, #7
 800ff6e:	2b04      	cmp	r3, #4
 800ff70:	d00a      	beq.n	800ff88 <xPortStartScheduler+0xb8>
	__asm volatile
 800ff72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff76:	f383 8811 	msr	BASEPRI, r3
 800ff7a:	f3bf 8f6f 	isb	sy
 800ff7e:	f3bf 8f4f 	dsb	sy
 800ff82:	60bb      	str	r3, [r7, #8]
}
 800ff84:	bf00      	nop
 800ff86:	e7fe      	b.n	800ff86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ff88:	4b1e      	ldr	r3, [pc, #120]	; (8010004 <xPortStartScheduler+0x134>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	021b      	lsls	r3, r3, #8
 800ff8e:	4a1d      	ldr	r2, [pc, #116]	; (8010004 <xPortStartScheduler+0x134>)
 800ff90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ff92:	4b1c      	ldr	r3, [pc, #112]	; (8010004 <xPortStartScheduler+0x134>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ff9a:	4a1a      	ldr	r2, [pc, #104]	; (8010004 <xPortStartScheduler+0x134>)
 800ff9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	b2da      	uxtb	r2, r3
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ffa6:	4b18      	ldr	r3, [pc, #96]	; (8010008 <xPortStartScheduler+0x138>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	4a17      	ldr	r2, [pc, #92]	; (8010008 <xPortStartScheduler+0x138>)
 800ffac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ffb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ffb2:	4b15      	ldr	r3, [pc, #84]	; (8010008 <xPortStartScheduler+0x138>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	4a14      	ldr	r2, [pc, #80]	; (8010008 <xPortStartScheduler+0x138>)
 800ffb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ffbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ffbe:	f000 f8dd 	bl	801017c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ffc2:	4b12      	ldr	r3, [pc, #72]	; (801000c <xPortStartScheduler+0x13c>)
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ffc8:	f000 f8fc 	bl	80101c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ffcc:	4b10      	ldr	r3, [pc, #64]	; (8010010 <xPortStartScheduler+0x140>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4a0f      	ldr	r2, [pc, #60]	; (8010010 <xPortStartScheduler+0x140>)
 800ffd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ffd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ffd8:	f7ff ff66 	bl	800fea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ffdc:	f7ff f856 	bl	800f08c <vTaskSwitchContext>
	prvTaskExitError();
 800ffe0:	f7ff ff22 	bl	800fe28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ffe4:	2300      	movs	r3, #0
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3718      	adds	r7, #24
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	e000ed00 	.word	0xe000ed00
 800fff4:	410fc271 	.word	0x410fc271
 800fff8:	410fc270 	.word	0x410fc270
 800fffc:	e000e400 	.word	0xe000e400
 8010000:	20001ccc 	.word	0x20001ccc
 8010004:	20001cd0 	.word	0x20001cd0
 8010008:	e000ed20 	.word	0xe000ed20
 801000c:	20000670 	.word	0x20000670
 8010010:	e000ef34 	.word	0xe000ef34

08010014 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010014:	b480      	push	{r7}
 8010016:	b083      	sub	sp, #12
 8010018:	af00      	add	r7, sp, #0
	__asm volatile
 801001a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801001e:	f383 8811 	msr	BASEPRI, r3
 8010022:	f3bf 8f6f 	isb	sy
 8010026:	f3bf 8f4f 	dsb	sy
 801002a:	607b      	str	r3, [r7, #4]
}
 801002c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801002e:	4b0f      	ldr	r3, [pc, #60]	; (801006c <vPortEnterCritical+0x58>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	3301      	adds	r3, #1
 8010034:	4a0d      	ldr	r2, [pc, #52]	; (801006c <vPortEnterCritical+0x58>)
 8010036:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010038:	4b0c      	ldr	r3, [pc, #48]	; (801006c <vPortEnterCritical+0x58>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	2b01      	cmp	r3, #1
 801003e:	d10f      	bne.n	8010060 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010040:	4b0b      	ldr	r3, [pc, #44]	; (8010070 <vPortEnterCritical+0x5c>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	b2db      	uxtb	r3, r3
 8010046:	2b00      	cmp	r3, #0
 8010048:	d00a      	beq.n	8010060 <vPortEnterCritical+0x4c>
	__asm volatile
 801004a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801004e:	f383 8811 	msr	BASEPRI, r3
 8010052:	f3bf 8f6f 	isb	sy
 8010056:	f3bf 8f4f 	dsb	sy
 801005a:	603b      	str	r3, [r7, #0]
}
 801005c:	bf00      	nop
 801005e:	e7fe      	b.n	801005e <vPortEnterCritical+0x4a>
	}
}
 8010060:	bf00      	nop
 8010062:	370c      	adds	r7, #12
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr
 801006c:	20000670 	.word	0x20000670
 8010070:	e000ed04 	.word	0xe000ed04

08010074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010074:	b480      	push	{r7}
 8010076:	b083      	sub	sp, #12
 8010078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801007a:	4b12      	ldr	r3, [pc, #72]	; (80100c4 <vPortExitCritical+0x50>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d10a      	bne.n	8010098 <vPortExitCritical+0x24>
	__asm volatile
 8010082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010086:	f383 8811 	msr	BASEPRI, r3
 801008a:	f3bf 8f6f 	isb	sy
 801008e:	f3bf 8f4f 	dsb	sy
 8010092:	607b      	str	r3, [r7, #4]
}
 8010094:	bf00      	nop
 8010096:	e7fe      	b.n	8010096 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010098:	4b0a      	ldr	r3, [pc, #40]	; (80100c4 <vPortExitCritical+0x50>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	3b01      	subs	r3, #1
 801009e:	4a09      	ldr	r2, [pc, #36]	; (80100c4 <vPortExitCritical+0x50>)
 80100a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80100a2:	4b08      	ldr	r3, [pc, #32]	; (80100c4 <vPortExitCritical+0x50>)
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d105      	bne.n	80100b6 <vPortExitCritical+0x42>
 80100aa:	2300      	movs	r3, #0
 80100ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	f383 8811 	msr	BASEPRI, r3
}
 80100b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80100b6:	bf00      	nop
 80100b8:	370c      	adds	r7, #12
 80100ba:	46bd      	mov	sp, r7
 80100bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c0:	4770      	bx	lr
 80100c2:	bf00      	nop
 80100c4:	20000670 	.word	0x20000670
	...

080100d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80100d0:	f3ef 8009 	mrs	r0, PSP
 80100d4:	f3bf 8f6f 	isb	sy
 80100d8:	4b15      	ldr	r3, [pc, #84]	; (8010130 <pxCurrentTCBConst>)
 80100da:	681a      	ldr	r2, [r3, #0]
 80100dc:	f01e 0f10 	tst.w	lr, #16
 80100e0:	bf08      	it	eq
 80100e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80100e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ea:	6010      	str	r0, [r2, #0]
 80100ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80100f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80100f4:	f380 8811 	msr	BASEPRI, r0
 80100f8:	f3bf 8f4f 	dsb	sy
 80100fc:	f3bf 8f6f 	isb	sy
 8010100:	f7fe ffc4 	bl	800f08c <vTaskSwitchContext>
 8010104:	f04f 0000 	mov.w	r0, #0
 8010108:	f380 8811 	msr	BASEPRI, r0
 801010c:	bc09      	pop	{r0, r3}
 801010e:	6819      	ldr	r1, [r3, #0]
 8010110:	6808      	ldr	r0, [r1, #0]
 8010112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010116:	f01e 0f10 	tst.w	lr, #16
 801011a:	bf08      	it	eq
 801011c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010120:	f380 8809 	msr	PSP, r0
 8010124:	f3bf 8f6f 	isb	sy
 8010128:	4770      	bx	lr
 801012a:	bf00      	nop
 801012c:	f3af 8000 	nop.w

08010130 <pxCurrentTCBConst>:
 8010130:	200016a0 	.word	0x200016a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010134:	bf00      	nop
 8010136:	bf00      	nop

08010138 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
	__asm volatile
 801013e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010142:	f383 8811 	msr	BASEPRI, r3
 8010146:	f3bf 8f6f 	isb	sy
 801014a:	f3bf 8f4f 	dsb	sy
 801014e:	607b      	str	r3, [r7, #4]
}
 8010150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010152:	f7fe fee1 	bl	800ef18 <xTaskIncrementTick>
 8010156:	4603      	mov	r3, r0
 8010158:	2b00      	cmp	r3, #0
 801015a:	d003      	beq.n	8010164 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801015c:	4b06      	ldr	r3, [pc, #24]	; (8010178 <xPortSysTickHandler+0x40>)
 801015e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010162:	601a      	str	r2, [r3, #0]
 8010164:	2300      	movs	r3, #0
 8010166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	f383 8811 	msr	BASEPRI, r3
}
 801016e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010170:	bf00      	nop
 8010172:	3708      	adds	r7, #8
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}
 8010178:	e000ed04 	.word	0xe000ed04

0801017c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801017c:	b480      	push	{r7}
 801017e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010180:	4b0b      	ldr	r3, [pc, #44]	; (80101b0 <vPortSetupTimerInterrupt+0x34>)
 8010182:	2200      	movs	r2, #0
 8010184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010186:	4b0b      	ldr	r3, [pc, #44]	; (80101b4 <vPortSetupTimerInterrupt+0x38>)
 8010188:	2200      	movs	r2, #0
 801018a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801018c:	4b0a      	ldr	r3, [pc, #40]	; (80101b8 <vPortSetupTimerInterrupt+0x3c>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	4a0a      	ldr	r2, [pc, #40]	; (80101bc <vPortSetupTimerInterrupt+0x40>)
 8010192:	fba2 2303 	umull	r2, r3, r2, r3
 8010196:	099b      	lsrs	r3, r3, #6
 8010198:	4a09      	ldr	r2, [pc, #36]	; (80101c0 <vPortSetupTimerInterrupt+0x44>)
 801019a:	3b01      	subs	r3, #1
 801019c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801019e:	4b04      	ldr	r3, [pc, #16]	; (80101b0 <vPortSetupTimerInterrupt+0x34>)
 80101a0:	2207      	movs	r2, #7
 80101a2:	601a      	str	r2, [r3, #0]
}
 80101a4:	bf00      	nop
 80101a6:	46bd      	mov	sp, r7
 80101a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ac:	4770      	bx	lr
 80101ae:	bf00      	nop
 80101b0:	e000e010 	.word	0xe000e010
 80101b4:	e000e018 	.word	0xe000e018
 80101b8:	200005c0 	.word	0x200005c0
 80101bc:	10624dd3 	.word	0x10624dd3
 80101c0:	e000e014 	.word	0xe000e014

080101c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80101c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80101d4 <vPortEnableVFP+0x10>
 80101c8:	6801      	ldr	r1, [r0, #0]
 80101ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80101ce:	6001      	str	r1, [r0, #0]
 80101d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80101d2:	bf00      	nop
 80101d4:	e000ed88 	.word	0xe000ed88

080101d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80101d8:	b480      	push	{r7}
 80101da:	b085      	sub	sp, #20
 80101dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80101de:	f3ef 8305 	mrs	r3, IPSR
 80101e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	2b0f      	cmp	r3, #15
 80101e8:	d914      	bls.n	8010214 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80101ea:	4a17      	ldr	r2, [pc, #92]	; (8010248 <vPortValidateInterruptPriority+0x70>)
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	4413      	add	r3, r2
 80101f0:	781b      	ldrb	r3, [r3, #0]
 80101f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80101f4:	4b15      	ldr	r3, [pc, #84]	; (801024c <vPortValidateInterruptPriority+0x74>)
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	7afa      	ldrb	r2, [r7, #11]
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d20a      	bcs.n	8010214 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80101fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010202:	f383 8811 	msr	BASEPRI, r3
 8010206:	f3bf 8f6f 	isb	sy
 801020a:	f3bf 8f4f 	dsb	sy
 801020e:	607b      	str	r3, [r7, #4]
}
 8010210:	bf00      	nop
 8010212:	e7fe      	b.n	8010212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010214:	4b0e      	ldr	r3, [pc, #56]	; (8010250 <vPortValidateInterruptPriority+0x78>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801021c:	4b0d      	ldr	r3, [pc, #52]	; (8010254 <vPortValidateInterruptPriority+0x7c>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	429a      	cmp	r2, r3
 8010222:	d90a      	bls.n	801023a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010228:	f383 8811 	msr	BASEPRI, r3
 801022c:	f3bf 8f6f 	isb	sy
 8010230:	f3bf 8f4f 	dsb	sy
 8010234:	603b      	str	r3, [r7, #0]
}
 8010236:	bf00      	nop
 8010238:	e7fe      	b.n	8010238 <vPortValidateInterruptPriority+0x60>
	}
 801023a:	bf00      	nop
 801023c:	3714      	adds	r7, #20
 801023e:	46bd      	mov	sp, r7
 8010240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010244:	4770      	bx	lr
 8010246:	bf00      	nop
 8010248:	e000e3f0 	.word	0xe000e3f0
 801024c:	20001ccc 	.word	0x20001ccc
 8010250:	e000ed0c 	.word	0xe000ed0c
 8010254:	20001cd0 	.word	0x20001cd0

08010258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b08a      	sub	sp, #40	; 0x28
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010260:	2300      	movs	r3, #0
 8010262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010264:	f7fe fd9c 	bl	800eda0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010268:	4b5b      	ldr	r3, [pc, #364]	; (80103d8 <pvPortMalloc+0x180>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d101      	bne.n	8010274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010270:	f000 f920 	bl	80104b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010274:	4b59      	ldr	r3, [pc, #356]	; (80103dc <pvPortMalloc+0x184>)
 8010276:	681a      	ldr	r2, [r3, #0]
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	4013      	ands	r3, r2
 801027c:	2b00      	cmp	r3, #0
 801027e:	f040 8093 	bne.w	80103a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d01d      	beq.n	80102c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010288:	2208      	movs	r2, #8
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	4413      	add	r3, r2
 801028e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f003 0307 	and.w	r3, r3, #7
 8010296:	2b00      	cmp	r3, #0
 8010298:	d014      	beq.n	80102c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f023 0307 	bic.w	r3, r3, #7
 80102a0:	3308      	adds	r3, #8
 80102a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f003 0307 	and.w	r3, r3, #7
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00a      	beq.n	80102c4 <pvPortMalloc+0x6c>
	__asm volatile
 80102ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b2:	f383 8811 	msr	BASEPRI, r3
 80102b6:	f3bf 8f6f 	isb	sy
 80102ba:	f3bf 8f4f 	dsb	sy
 80102be:	617b      	str	r3, [r7, #20]
}
 80102c0:	bf00      	nop
 80102c2:	e7fe      	b.n	80102c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d06e      	beq.n	80103a8 <pvPortMalloc+0x150>
 80102ca:	4b45      	ldr	r3, [pc, #276]	; (80103e0 <pvPortMalloc+0x188>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	687a      	ldr	r2, [r7, #4]
 80102d0:	429a      	cmp	r2, r3
 80102d2:	d869      	bhi.n	80103a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80102d4:	4b43      	ldr	r3, [pc, #268]	; (80103e4 <pvPortMalloc+0x18c>)
 80102d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80102d8:	4b42      	ldr	r3, [pc, #264]	; (80103e4 <pvPortMalloc+0x18c>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80102de:	e004      	b.n	80102ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80102e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80102e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80102ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ec:	685b      	ldr	r3, [r3, #4]
 80102ee:	687a      	ldr	r2, [r7, #4]
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d903      	bls.n	80102fc <pvPortMalloc+0xa4>
 80102f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d1f1      	bne.n	80102e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80102fc:	4b36      	ldr	r3, [pc, #216]	; (80103d8 <pvPortMalloc+0x180>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010302:	429a      	cmp	r2, r3
 8010304:	d050      	beq.n	80103a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010306:	6a3b      	ldr	r3, [r7, #32]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	2208      	movs	r2, #8
 801030c:	4413      	add	r3, r2
 801030e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	6a3b      	ldr	r3, [r7, #32]
 8010316:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801031a:	685a      	ldr	r2, [r3, #4]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	1ad2      	subs	r2, r2, r3
 8010320:	2308      	movs	r3, #8
 8010322:	005b      	lsls	r3, r3, #1
 8010324:	429a      	cmp	r2, r3
 8010326:	d91f      	bls.n	8010368 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	4413      	add	r3, r2
 801032e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010330:	69bb      	ldr	r3, [r7, #24]
 8010332:	f003 0307 	and.w	r3, r3, #7
 8010336:	2b00      	cmp	r3, #0
 8010338:	d00a      	beq.n	8010350 <pvPortMalloc+0xf8>
	__asm volatile
 801033a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801033e:	f383 8811 	msr	BASEPRI, r3
 8010342:	f3bf 8f6f 	isb	sy
 8010346:	f3bf 8f4f 	dsb	sy
 801034a:	613b      	str	r3, [r7, #16]
}
 801034c:	bf00      	nop
 801034e:	e7fe      	b.n	801034e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010352:	685a      	ldr	r2, [r3, #4]
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	1ad2      	subs	r2, r2, r3
 8010358:	69bb      	ldr	r3, [r7, #24]
 801035a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801035c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801035e:	687a      	ldr	r2, [r7, #4]
 8010360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010362:	69b8      	ldr	r0, [r7, #24]
 8010364:	f000 f908 	bl	8010578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010368:	4b1d      	ldr	r3, [pc, #116]	; (80103e0 <pvPortMalloc+0x188>)
 801036a:	681a      	ldr	r2, [r3, #0]
 801036c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	1ad3      	subs	r3, r2, r3
 8010372:	4a1b      	ldr	r2, [pc, #108]	; (80103e0 <pvPortMalloc+0x188>)
 8010374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010376:	4b1a      	ldr	r3, [pc, #104]	; (80103e0 <pvPortMalloc+0x188>)
 8010378:	681a      	ldr	r2, [r3, #0]
 801037a:	4b1b      	ldr	r3, [pc, #108]	; (80103e8 <pvPortMalloc+0x190>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	429a      	cmp	r2, r3
 8010380:	d203      	bcs.n	801038a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010382:	4b17      	ldr	r3, [pc, #92]	; (80103e0 <pvPortMalloc+0x188>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	4a18      	ldr	r2, [pc, #96]	; (80103e8 <pvPortMalloc+0x190>)
 8010388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801038a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038c:	685a      	ldr	r2, [r3, #4]
 801038e:	4b13      	ldr	r3, [pc, #76]	; (80103dc <pvPortMalloc+0x184>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	431a      	orrs	r2, r3
 8010394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039a:	2200      	movs	r2, #0
 801039c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801039e:	4b13      	ldr	r3, [pc, #76]	; (80103ec <pvPortMalloc+0x194>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	3301      	adds	r3, #1
 80103a4:	4a11      	ldr	r2, [pc, #68]	; (80103ec <pvPortMalloc+0x194>)
 80103a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80103a8:	f7fe fd08 	bl	800edbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80103ac:	69fb      	ldr	r3, [r7, #28]
 80103ae:	f003 0307 	and.w	r3, r3, #7
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d00a      	beq.n	80103cc <pvPortMalloc+0x174>
	__asm volatile
 80103b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ba:	f383 8811 	msr	BASEPRI, r3
 80103be:	f3bf 8f6f 	isb	sy
 80103c2:	f3bf 8f4f 	dsb	sy
 80103c6:	60fb      	str	r3, [r7, #12]
}
 80103c8:	bf00      	nop
 80103ca:	e7fe      	b.n	80103ca <pvPortMalloc+0x172>
	return pvReturn;
 80103cc:	69fb      	ldr	r3, [r7, #28]
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3728      	adds	r7, #40	; 0x28
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	2000920c 	.word	0x2000920c
 80103dc:	20009220 	.word	0x20009220
 80103e0:	20009210 	.word	0x20009210
 80103e4:	20009204 	.word	0x20009204
 80103e8:	20009214 	.word	0x20009214
 80103ec:	20009218 	.word	0x20009218

080103f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b086      	sub	sp, #24
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d04d      	beq.n	801049e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010402:	2308      	movs	r3, #8
 8010404:	425b      	negs	r3, r3
 8010406:	697a      	ldr	r2, [r7, #20]
 8010408:	4413      	add	r3, r2
 801040a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	685a      	ldr	r2, [r3, #4]
 8010414:	4b24      	ldr	r3, [pc, #144]	; (80104a8 <vPortFree+0xb8>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	4013      	ands	r3, r2
 801041a:	2b00      	cmp	r3, #0
 801041c:	d10a      	bne.n	8010434 <vPortFree+0x44>
	__asm volatile
 801041e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010422:	f383 8811 	msr	BASEPRI, r3
 8010426:	f3bf 8f6f 	isb	sy
 801042a:	f3bf 8f4f 	dsb	sy
 801042e:	60fb      	str	r3, [r7, #12]
}
 8010430:	bf00      	nop
 8010432:	e7fe      	b.n	8010432 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d00a      	beq.n	8010452 <vPortFree+0x62>
	__asm volatile
 801043c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010440:	f383 8811 	msr	BASEPRI, r3
 8010444:	f3bf 8f6f 	isb	sy
 8010448:	f3bf 8f4f 	dsb	sy
 801044c:	60bb      	str	r3, [r7, #8]
}
 801044e:	bf00      	nop
 8010450:	e7fe      	b.n	8010450 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	685a      	ldr	r2, [r3, #4]
 8010456:	4b14      	ldr	r3, [pc, #80]	; (80104a8 <vPortFree+0xb8>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	4013      	ands	r3, r2
 801045c:	2b00      	cmp	r3, #0
 801045e:	d01e      	beq.n	801049e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d11a      	bne.n	801049e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	685a      	ldr	r2, [r3, #4]
 801046c:	4b0e      	ldr	r3, [pc, #56]	; (80104a8 <vPortFree+0xb8>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	43db      	mvns	r3, r3
 8010472:	401a      	ands	r2, r3
 8010474:	693b      	ldr	r3, [r7, #16]
 8010476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010478:	f7fe fc92 	bl	800eda0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801047c:	693b      	ldr	r3, [r7, #16]
 801047e:	685a      	ldr	r2, [r3, #4]
 8010480:	4b0a      	ldr	r3, [pc, #40]	; (80104ac <vPortFree+0xbc>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	4413      	add	r3, r2
 8010486:	4a09      	ldr	r2, [pc, #36]	; (80104ac <vPortFree+0xbc>)
 8010488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801048a:	6938      	ldr	r0, [r7, #16]
 801048c:	f000 f874 	bl	8010578 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010490:	4b07      	ldr	r3, [pc, #28]	; (80104b0 <vPortFree+0xc0>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	3301      	adds	r3, #1
 8010496:	4a06      	ldr	r2, [pc, #24]	; (80104b0 <vPortFree+0xc0>)
 8010498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801049a:	f7fe fc8f 	bl	800edbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801049e:	bf00      	nop
 80104a0:	3718      	adds	r7, #24
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	20009220 	.word	0x20009220
 80104ac:	20009210 	.word	0x20009210
 80104b0:	2000921c 	.word	0x2000921c

080104b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80104b4:	b480      	push	{r7}
 80104b6:	b085      	sub	sp, #20
 80104b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80104ba:	f247 5330 	movw	r3, #30000	; 0x7530
 80104be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80104c0:	4b27      	ldr	r3, [pc, #156]	; (8010560 <prvHeapInit+0xac>)
 80104c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	f003 0307 	and.w	r3, r3, #7
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d00c      	beq.n	80104e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	3307      	adds	r3, #7
 80104d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f023 0307 	bic.w	r3, r3, #7
 80104da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80104dc:	68ba      	ldr	r2, [r7, #8]
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	1ad3      	subs	r3, r2, r3
 80104e2:	4a1f      	ldr	r2, [pc, #124]	; (8010560 <prvHeapInit+0xac>)
 80104e4:	4413      	add	r3, r2
 80104e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80104ec:	4a1d      	ldr	r2, [pc, #116]	; (8010564 <prvHeapInit+0xb0>)
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80104f2:	4b1c      	ldr	r3, [pc, #112]	; (8010564 <prvHeapInit+0xb0>)
 80104f4:	2200      	movs	r2, #0
 80104f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	68ba      	ldr	r2, [r7, #8]
 80104fc:	4413      	add	r3, r2
 80104fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010500:	2208      	movs	r2, #8
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	1a9b      	subs	r3, r3, r2
 8010506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	f023 0307 	bic.w	r3, r3, #7
 801050e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	4a15      	ldr	r2, [pc, #84]	; (8010568 <prvHeapInit+0xb4>)
 8010514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010516:	4b14      	ldr	r3, [pc, #80]	; (8010568 <prvHeapInit+0xb4>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	2200      	movs	r2, #0
 801051c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801051e:	4b12      	ldr	r3, [pc, #72]	; (8010568 <prvHeapInit+0xb4>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	2200      	movs	r2, #0
 8010524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	68fa      	ldr	r2, [r7, #12]
 801052e:	1ad2      	subs	r2, r2, r3
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010534:	4b0c      	ldr	r3, [pc, #48]	; (8010568 <prvHeapInit+0xb4>)
 8010536:	681a      	ldr	r2, [r3, #0]
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	685b      	ldr	r3, [r3, #4]
 8010540:	4a0a      	ldr	r2, [pc, #40]	; (801056c <prvHeapInit+0xb8>)
 8010542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	685b      	ldr	r3, [r3, #4]
 8010548:	4a09      	ldr	r2, [pc, #36]	; (8010570 <prvHeapInit+0xbc>)
 801054a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801054c:	4b09      	ldr	r3, [pc, #36]	; (8010574 <prvHeapInit+0xc0>)
 801054e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010552:	601a      	str	r2, [r3, #0]
}
 8010554:	bf00      	nop
 8010556:	3714      	adds	r7, #20
 8010558:	46bd      	mov	sp, r7
 801055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055e:	4770      	bx	lr
 8010560:	20001cd4 	.word	0x20001cd4
 8010564:	20009204 	.word	0x20009204
 8010568:	2000920c 	.word	0x2000920c
 801056c:	20009214 	.word	0x20009214
 8010570:	20009210 	.word	0x20009210
 8010574:	20009220 	.word	0x20009220

08010578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010578:	b480      	push	{r7}
 801057a:	b085      	sub	sp, #20
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010580:	4b28      	ldr	r3, [pc, #160]	; (8010624 <prvInsertBlockIntoFreeList+0xac>)
 8010582:	60fb      	str	r3, [r7, #12]
 8010584:	e002      	b.n	801058c <prvInsertBlockIntoFreeList+0x14>
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	60fb      	str	r3, [r7, #12]
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	687a      	ldr	r2, [r7, #4]
 8010592:	429a      	cmp	r2, r3
 8010594:	d8f7      	bhi.n	8010586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	68ba      	ldr	r2, [r7, #8]
 80105a0:	4413      	add	r3, r2
 80105a2:	687a      	ldr	r2, [r7, #4]
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d108      	bne.n	80105ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	685a      	ldr	r2, [r3, #4]
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	441a      	add	r2, r3
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	685b      	ldr	r3, [r3, #4]
 80105c2:	68ba      	ldr	r2, [r7, #8]
 80105c4:	441a      	add	r2, r3
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d118      	bne.n	8010600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	681a      	ldr	r2, [r3, #0]
 80105d2:	4b15      	ldr	r3, [pc, #84]	; (8010628 <prvInsertBlockIntoFreeList+0xb0>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d00d      	beq.n	80105f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	685a      	ldr	r2, [r3, #4]
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	685b      	ldr	r3, [r3, #4]
 80105e4:	441a      	add	r2, r3
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	681a      	ldr	r2, [r3, #0]
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	601a      	str	r2, [r3, #0]
 80105f4:	e008      	b.n	8010608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80105f6:	4b0c      	ldr	r3, [pc, #48]	; (8010628 <prvInsertBlockIntoFreeList+0xb0>)
 80105f8:	681a      	ldr	r2, [r3, #0]
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	601a      	str	r2, [r3, #0]
 80105fe:	e003      	b.n	8010608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	681a      	ldr	r2, [r3, #0]
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010608:	68fa      	ldr	r2, [r7, #12]
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	429a      	cmp	r2, r3
 801060e:	d002      	beq.n	8010616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	687a      	ldr	r2, [r7, #4]
 8010614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010616:	bf00      	nop
 8010618:	3714      	adds	r7, #20
 801061a:	46bd      	mov	sp, r7
 801061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010620:	4770      	bx	lr
 8010622:	bf00      	nop
 8010624:	20009204 	.word	0x20009204
 8010628:	2000920c 	.word	0x2000920c

0801062c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010630:	2200      	movs	r2, #0
 8010632:	4912      	ldr	r1, [pc, #72]	; (801067c <MX_USB_DEVICE_Init+0x50>)
 8010634:	4812      	ldr	r0, [pc, #72]	; (8010680 <MX_USB_DEVICE_Init+0x54>)
 8010636:	f7fb fdc1 	bl	800c1bc <USBD_Init>
 801063a:	4603      	mov	r3, r0
 801063c:	2b00      	cmp	r3, #0
 801063e:	d001      	beq.n	8010644 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010640:	f7f3 fda2 	bl	8004188 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010644:	490f      	ldr	r1, [pc, #60]	; (8010684 <MX_USB_DEVICE_Init+0x58>)
 8010646:	480e      	ldr	r0, [pc, #56]	; (8010680 <MX_USB_DEVICE_Init+0x54>)
 8010648:	f7fb fde8 	bl	800c21c <USBD_RegisterClass>
 801064c:	4603      	mov	r3, r0
 801064e:	2b00      	cmp	r3, #0
 8010650:	d001      	beq.n	8010656 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010652:	f7f3 fd99 	bl	8004188 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010656:	490c      	ldr	r1, [pc, #48]	; (8010688 <MX_USB_DEVICE_Init+0x5c>)
 8010658:	4809      	ldr	r0, [pc, #36]	; (8010680 <MX_USB_DEVICE_Init+0x54>)
 801065a:	f7fb fcd9 	bl	800c010 <USBD_CDC_RegisterInterface>
 801065e:	4603      	mov	r3, r0
 8010660:	2b00      	cmp	r3, #0
 8010662:	d001      	beq.n	8010668 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010664:	f7f3 fd90 	bl	8004188 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010668:	4805      	ldr	r0, [pc, #20]	; (8010680 <MX_USB_DEVICE_Init+0x54>)
 801066a:	f7fb fe0d 	bl	800c288 <USBD_Start>
 801066e:	4603      	mov	r3, r0
 8010670:	2b00      	cmp	r3, #0
 8010672:	d001      	beq.n	8010678 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010674:	f7f3 fd88 	bl	8004188 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010678:	bf00      	nop
 801067a:	bd80      	pop	{r7, pc}
 801067c:	20000688 	.word	0x20000688
 8010680:	20009224 	.word	0x20009224
 8010684:	200005f0 	.word	0x200005f0
 8010688:	20000674 	.word	0x20000674

0801068c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010690:	2200      	movs	r2, #0
 8010692:	4905      	ldr	r1, [pc, #20]	; (80106a8 <CDC_Init_FS+0x1c>)
 8010694:	4805      	ldr	r0, [pc, #20]	; (80106ac <CDC_Init_FS+0x20>)
 8010696:	f7fb fcd5 	bl	800c044 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801069a:	4905      	ldr	r1, [pc, #20]	; (80106b0 <CDC_Init_FS+0x24>)
 801069c:	4803      	ldr	r0, [pc, #12]	; (80106ac <CDC_Init_FS+0x20>)
 801069e:	f7fb fcf3 	bl	800c088 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80106a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	bd80      	pop	{r7, pc}
 80106a8:	20009900 	.word	0x20009900
 80106ac:	20009224 	.word	0x20009224
 80106b0:	20009500 	.word	0x20009500

080106b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80106b4:	b480      	push	{r7}
 80106b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80106b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	46bd      	mov	sp, r7
 80106be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c2:	4770      	bx	lr

080106c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80106c4:	b480      	push	{r7}
 80106c6:	b083      	sub	sp, #12
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	4603      	mov	r3, r0
 80106cc:	6039      	str	r1, [r7, #0]
 80106ce:	71fb      	strb	r3, [r7, #7]
 80106d0:	4613      	mov	r3, r2
 80106d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80106d4:	79fb      	ldrb	r3, [r7, #7]
 80106d6:	2b23      	cmp	r3, #35	; 0x23
 80106d8:	d84a      	bhi.n	8010770 <CDC_Control_FS+0xac>
 80106da:	a201      	add	r2, pc, #4	; (adr r2, 80106e0 <CDC_Control_FS+0x1c>)
 80106dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106e0:	08010771 	.word	0x08010771
 80106e4:	08010771 	.word	0x08010771
 80106e8:	08010771 	.word	0x08010771
 80106ec:	08010771 	.word	0x08010771
 80106f0:	08010771 	.word	0x08010771
 80106f4:	08010771 	.word	0x08010771
 80106f8:	08010771 	.word	0x08010771
 80106fc:	08010771 	.word	0x08010771
 8010700:	08010771 	.word	0x08010771
 8010704:	08010771 	.word	0x08010771
 8010708:	08010771 	.word	0x08010771
 801070c:	08010771 	.word	0x08010771
 8010710:	08010771 	.word	0x08010771
 8010714:	08010771 	.word	0x08010771
 8010718:	08010771 	.word	0x08010771
 801071c:	08010771 	.word	0x08010771
 8010720:	08010771 	.word	0x08010771
 8010724:	08010771 	.word	0x08010771
 8010728:	08010771 	.word	0x08010771
 801072c:	08010771 	.word	0x08010771
 8010730:	08010771 	.word	0x08010771
 8010734:	08010771 	.word	0x08010771
 8010738:	08010771 	.word	0x08010771
 801073c:	08010771 	.word	0x08010771
 8010740:	08010771 	.word	0x08010771
 8010744:	08010771 	.word	0x08010771
 8010748:	08010771 	.word	0x08010771
 801074c:	08010771 	.word	0x08010771
 8010750:	08010771 	.word	0x08010771
 8010754:	08010771 	.word	0x08010771
 8010758:	08010771 	.word	0x08010771
 801075c:	08010771 	.word	0x08010771
 8010760:	08010771 	.word	0x08010771
 8010764:	08010771 	.word	0x08010771
 8010768:	08010771 	.word	0x08010771
 801076c:	08010771 	.word	0x08010771
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010770:	bf00      	nop
  }

  return (USBD_OK);
 8010772:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010774:	4618      	mov	r0, r3
 8010776:	370c      	adds	r7, #12
 8010778:	46bd      	mov	sp, r7
 801077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077e:	4770      	bx	lr

08010780 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b084      	sub	sp, #16
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t check = Buf[0];
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	781b      	ldrb	r3, [r3, #0]
 801078e:	73fb      	strb	r3, [r7, #15]
  CDC_Transmit_FS(Buf, *Len); //Echo input back to user
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	b29b      	uxth	r3, r3
 8010796:	4619      	mov	r1, r3
 8010798:	6878      	ldr	r0, [r7, #4]
 801079a:	f000 f817 	bl	80107cc <CDC_Transmit_FS>
  xQueueSendFromISR(USBInputHandle, &Buf[0], 0);
 801079e:	4b09      	ldr	r3, [pc, #36]	; (80107c4 <CDC_Receive_FS+0x44>)
 80107a0:	6818      	ldr	r0, [r3, #0]
 80107a2:	2300      	movs	r3, #0
 80107a4:	2200      	movs	r2, #0
 80107a6:	6879      	ldr	r1, [r7, #4]
 80107a8:	f7fd fcce 	bl	800e148 <xQueueGenericSendFromISR>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80107ac:	6879      	ldr	r1, [r7, #4]
 80107ae:	4806      	ldr	r0, [pc, #24]	; (80107c8 <CDC_Receive_FS+0x48>)
 80107b0:	f7fb fc6a 	bl	800c088 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80107b4:	4804      	ldr	r0, [pc, #16]	; (80107c8 <CDC_Receive_FS+0x48>)
 80107b6:	f7fb fccb 	bl	800c150 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80107ba:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80107bc:	4618      	mov	r0, r3
 80107be:	3710      	adds	r7, #16
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}
 80107c4:	2000092c 	.word	0x2000092c
 80107c8:	20009224 	.word	0x20009224

080107cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b084      	sub	sp, #16
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	460b      	mov	r3, r1
 80107d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80107d8:	2300      	movs	r3, #0
 80107da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80107dc:	4b0d      	ldr	r3, [pc, #52]	; (8010814 <CDC_Transmit_FS+0x48>)
 80107de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d001      	beq.n	80107f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80107ee:	2301      	movs	r3, #1
 80107f0:	e00b      	b.n	801080a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80107f2:	887b      	ldrh	r3, [r7, #2]
 80107f4:	461a      	mov	r2, r3
 80107f6:	6879      	ldr	r1, [r7, #4]
 80107f8:	4806      	ldr	r0, [pc, #24]	; (8010814 <CDC_Transmit_FS+0x48>)
 80107fa:	f7fb fc23 	bl	800c044 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80107fe:	4805      	ldr	r0, [pc, #20]	; (8010814 <CDC_Transmit_FS+0x48>)
 8010800:	f7fb fc60 	bl	800c0c4 <USBD_CDC_TransmitPacket>
 8010804:	4603      	mov	r3, r0
 8010806:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010808:	7bfb      	ldrb	r3, [r7, #15]
}
 801080a:	4618      	mov	r0, r3
 801080c:	3710      	adds	r7, #16
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}
 8010812:	bf00      	nop
 8010814:	20009224 	.word	0x20009224

08010818 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010818:	b480      	push	{r7}
 801081a:	b087      	sub	sp, #28
 801081c:	af00      	add	r7, sp, #0
 801081e:	60f8      	str	r0, [r7, #12]
 8010820:	60b9      	str	r1, [r7, #8]
 8010822:	4613      	mov	r3, r2
 8010824:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010826:	2300      	movs	r3, #0
 8010828:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801082a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801082e:	4618      	mov	r0, r3
 8010830:	371c      	adds	r7, #28
 8010832:	46bd      	mov	sp, r7
 8010834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010838:	4770      	bx	lr
	...

0801083c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801083c:	b480      	push	{r7}
 801083e:	b083      	sub	sp, #12
 8010840:	af00      	add	r7, sp, #0
 8010842:	4603      	mov	r3, r0
 8010844:	6039      	str	r1, [r7, #0]
 8010846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	2212      	movs	r2, #18
 801084c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801084e:	4b03      	ldr	r3, [pc, #12]	; (801085c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010850:	4618      	mov	r0, r3
 8010852:	370c      	adds	r7, #12
 8010854:	46bd      	mov	sp, r7
 8010856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085a:	4770      	bx	lr
 801085c:	200006a4 	.word	0x200006a4

08010860 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010860:	b480      	push	{r7}
 8010862:	b083      	sub	sp, #12
 8010864:	af00      	add	r7, sp, #0
 8010866:	4603      	mov	r3, r0
 8010868:	6039      	str	r1, [r7, #0]
 801086a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	2204      	movs	r2, #4
 8010870:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010872:	4b03      	ldr	r3, [pc, #12]	; (8010880 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010874:	4618      	mov	r0, r3
 8010876:	370c      	adds	r7, #12
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr
 8010880:	200006b8 	.word	0x200006b8

08010884 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	af00      	add	r7, sp, #0
 801088a:	4603      	mov	r3, r0
 801088c:	6039      	str	r1, [r7, #0]
 801088e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010890:	79fb      	ldrb	r3, [r7, #7]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d105      	bne.n	80108a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010896:	683a      	ldr	r2, [r7, #0]
 8010898:	4907      	ldr	r1, [pc, #28]	; (80108b8 <USBD_FS_ProductStrDescriptor+0x34>)
 801089a:	4808      	ldr	r0, [pc, #32]	; (80108bc <USBD_FS_ProductStrDescriptor+0x38>)
 801089c:	f7fc fea0 	bl	800d5e0 <USBD_GetString>
 80108a0:	e004      	b.n	80108ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80108a2:	683a      	ldr	r2, [r7, #0]
 80108a4:	4904      	ldr	r1, [pc, #16]	; (80108b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80108a6:	4805      	ldr	r0, [pc, #20]	; (80108bc <USBD_FS_ProductStrDescriptor+0x38>)
 80108a8:	f7fc fe9a 	bl	800d5e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80108ac:	4b02      	ldr	r3, [pc, #8]	; (80108b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3708      	adds	r7, #8
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
 80108b6:	bf00      	nop
 80108b8:	20009d00 	.word	0x20009d00
 80108bc:	080133cc 	.word	0x080133cc

080108c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b082      	sub	sp, #8
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	4603      	mov	r3, r0
 80108c8:	6039      	str	r1, [r7, #0]
 80108ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80108cc:	683a      	ldr	r2, [r7, #0]
 80108ce:	4904      	ldr	r1, [pc, #16]	; (80108e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80108d0:	4804      	ldr	r0, [pc, #16]	; (80108e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80108d2:	f7fc fe85 	bl	800d5e0 <USBD_GetString>
  return USBD_StrDesc;
 80108d6:	4b02      	ldr	r3, [pc, #8]	; (80108e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3708      	adds	r7, #8
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}
 80108e0:	20009d00 	.word	0x20009d00
 80108e4:	080133e4 	.word	0x080133e4

080108e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	4603      	mov	r3, r0
 80108f0:	6039      	str	r1, [r7, #0]
 80108f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	221a      	movs	r2, #26
 80108f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80108fa:	f000 f843 	bl	8010984 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80108fe:	4b02      	ldr	r3, [pc, #8]	; (8010908 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010900:	4618      	mov	r0, r3
 8010902:	3708      	adds	r7, #8
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}
 8010908:	200006bc 	.word	0x200006bc

0801090c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
 8010912:	4603      	mov	r3, r0
 8010914:	6039      	str	r1, [r7, #0]
 8010916:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010918:	79fb      	ldrb	r3, [r7, #7]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d105      	bne.n	801092a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801091e:	683a      	ldr	r2, [r7, #0]
 8010920:	4907      	ldr	r1, [pc, #28]	; (8010940 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010922:	4808      	ldr	r0, [pc, #32]	; (8010944 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010924:	f7fc fe5c 	bl	800d5e0 <USBD_GetString>
 8010928:	e004      	b.n	8010934 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801092a:	683a      	ldr	r2, [r7, #0]
 801092c:	4904      	ldr	r1, [pc, #16]	; (8010940 <USBD_FS_ConfigStrDescriptor+0x34>)
 801092e:	4805      	ldr	r0, [pc, #20]	; (8010944 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010930:	f7fc fe56 	bl	800d5e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010934:	4b02      	ldr	r3, [pc, #8]	; (8010940 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010936:	4618      	mov	r0, r3
 8010938:	3708      	adds	r7, #8
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}
 801093e:	bf00      	nop
 8010940:	20009d00 	.word	0x20009d00
 8010944:	080133f8 	.word	0x080133f8

08010948 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b082      	sub	sp, #8
 801094c:	af00      	add	r7, sp, #0
 801094e:	4603      	mov	r3, r0
 8010950:	6039      	str	r1, [r7, #0]
 8010952:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010954:	79fb      	ldrb	r3, [r7, #7]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d105      	bne.n	8010966 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801095a:	683a      	ldr	r2, [r7, #0]
 801095c:	4907      	ldr	r1, [pc, #28]	; (801097c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801095e:	4808      	ldr	r0, [pc, #32]	; (8010980 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010960:	f7fc fe3e 	bl	800d5e0 <USBD_GetString>
 8010964:	e004      	b.n	8010970 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010966:	683a      	ldr	r2, [r7, #0]
 8010968:	4904      	ldr	r1, [pc, #16]	; (801097c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801096a:	4805      	ldr	r0, [pc, #20]	; (8010980 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801096c:	f7fc fe38 	bl	800d5e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010970:	4b02      	ldr	r3, [pc, #8]	; (801097c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010972:	4618      	mov	r0, r3
 8010974:	3708      	adds	r7, #8
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}
 801097a:	bf00      	nop
 801097c:	20009d00 	.word	0x20009d00
 8010980:	08013404 	.word	0x08013404

08010984 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b084      	sub	sp, #16
 8010988:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801098a:	4b0f      	ldr	r3, [pc, #60]	; (80109c8 <Get_SerialNum+0x44>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010990:	4b0e      	ldr	r3, [pc, #56]	; (80109cc <Get_SerialNum+0x48>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010996:	4b0e      	ldr	r3, [pc, #56]	; (80109d0 <Get_SerialNum+0x4c>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801099c:	68fa      	ldr	r2, [r7, #12]
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	4413      	add	r3, r2
 80109a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d009      	beq.n	80109be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80109aa:	2208      	movs	r2, #8
 80109ac:	4909      	ldr	r1, [pc, #36]	; (80109d4 <Get_SerialNum+0x50>)
 80109ae:	68f8      	ldr	r0, [r7, #12]
 80109b0:	f000 f814 	bl	80109dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80109b4:	2204      	movs	r2, #4
 80109b6:	4908      	ldr	r1, [pc, #32]	; (80109d8 <Get_SerialNum+0x54>)
 80109b8:	68b8      	ldr	r0, [r7, #8]
 80109ba:	f000 f80f 	bl	80109dc <IntToUnicode>
  }
}
 80109be:	bf00      	nop
 80109c0:	3710      	adds	r7, #16
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	bf00      	nop
 80109c8:	1fff7a10 	.word	0x1fff7a10
 80109cc:	1fff7a14 	.word	0x1fff7a14
 80109d0:	1fff7a18 	.word	0x1fff7a18
 80109d4:	200006be 	.word	0x200006be
 80109d8:	200006ce 	.word	0x200006ce

080109dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80109dc:	b480      	push	{r7}
 80109de:	b087      	sub	sp, #28
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	60f8      	str	r0, [r7, #12]
 80109e4:	60b9      	str	r1, [r7, #8]
 80109e6:	4613      	mov	r3, r2
 80109e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80109ea:	2300      	movs	r3, #0
 80109ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80109ee:	2300      	movs	r3, #0
 80109f0:	75fb      	strb	r3, [r7, #23]
 80109f2:	e027      	b.n	8010a44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	0f1b      	lsrs	r3, r3, #28
 80109f8:	2b09      	cmp	r3, #9
 80109fa:	d80b      	bhi.n	8010a14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	0f1b      	lsrs	r3, r3, #28
 8010a00:	b2da      	uxtb	r2, r3
 8010a02:	7dfb      	ldrb	r3, [r7, #23]
 8010a04:	005b      	lsls	r3, r3, #1
 8010a06:	4619      	mov	r1, r3
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	440b      	add	r3, r1
 8010a0c:	3230      	adds	r2, #48	; 0x30
 8010a0e:	b2d2      	uxtb	r2, r2
 8010a10:	701a      	strb	r2, [r3, #0]
 8010a12:	e00a      	b.n	8010a2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	0f1b      	lsrs	r3, r3, #28
 8010a18:	b2da      	uxtb	r2, r3
 8010a1a:	7dfb      	ldrb	r3, [r7, #23]
 8010a1c:	005b      	lsls	r3, r3, #1
 8010a1e:	4619      	mov	r1, r3
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	440b      	add	r3, r1
 8010a24:	3237      	adds	r2, #55	; 0x37
 8010a26:	b2d2      	uxtb	r2, r2
 8010a28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	011b      	lsls	r3, r3, #4
 8010a2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010a30:	7dfb      	ldrb	r3, [r7, #23]
 8010a32:	005b      	lsls	r3, r3, #1
 8010a34:	3301      	adds	r3, #1
 8010a36:	68ba      	ldr	r2, [r7, #8]
 8010a38:	4413      	add	r3, r2
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010a3e:	7dfb      	ldrb	r3, [r7, #23]
 8010a40:	3301      	adds	r3, #1
 8010a42:	75fb      	strb	r3, [r7, #23]
 8010a44:	7dfa      	ldrb	r2, [r7, #23]
 8010a46:	79fb      	ldrb	r3, [r7, #7]
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d3d3      	bcc.n	80109f4 <IntToUnicode+0x18>
  }
}
 8010a4c:	bf00      	nop
 8010a4e:	bf00      	nop
 8010a50:	371c      	adds	r7, #28
 8010a52:	46bd      	mov	sp, r7
 8010a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a58:	4770      	bx	lr
	...

08010a5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b08a      	sub	sp, #40	; 0x28
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a64:	f107 0314 	add.w	r3, r7, #20
 8010a68:	2200      	movs	r2, #0
 8010a6a:	601a      	str	r2, [r3, #0]
 8010a6c:	605a      	str	r2, [r3, #4]
 8010a6e:	609a      	str	r2, [r3, #8]
 8010a70:	60da      	str	r2, [r3, #12]
 8010a72:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010a7c:	d13a      	bne.n	8010af4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010a7e:	2300      	movs	r3, #0
 8010a80:	613b      	str	r3, [r7, #16]
 8010a82:	4b1e      	ldr	r3, [pc, #120]	; (8010afc <HAL_PCD_MspInit+0xa0>)
 8010a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a86:	4a1d      	ldr	r2, [pc, #116]	; (8010afc <HAL_PCD_MspInit+0xa0>)
 8010a88:	f043 0301 	orr.w	r3, r3, #1
 8010a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8010a8e:	4b1b      	ldr	r3, [pc, #108]	; (8010afc <HAL_PCD_MspInit+0xa0>)
 8010a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a92:	f003 0301 	and.w	r3, r3, #1
 8010a96:	613b      	str	r3, [r7, #16]
 8010a98:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010a9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010aa0:	2302      	movs	r3, #2
 8010aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010aa8:	2303      	movs	r3, #3
 8010aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010aac:	230a      	movs	r3, #10
 8010aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ab0:	f107 0314 	add.w	r3, r7, #20
 8010ab4:	4619      	mov	r1, r3
 8010ab6:	4812      	ldr	r0, [pc, #72]	; (8010b00 <HAL_PCD_MspInit+0xa4>)
 8010ab8:	f7f4 fcc2 	bl	8005440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010abc:	4b0f      	ldr	r3, [pc, #60]	; (8010afc <HAL_PCD_MspInit+0xa0>)
 8010abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ac0:	4a0e      	ldr	r2, [pc, #56]	; (8010afc <HAL_PCD_MspInit+0xa0>)
 8010ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ac6:	6353      	str	r3, [r2, #52]	; 0x34
 8010ac8:	2300      	movs	r3, #0
 8010aca:	60fb      	str	r3, [r7, #12]
 8010acc:	4b0b      	ldr	r3, [pc, #44]	; (8010afc <HAL_PCD_MspInit+0xa0>)
 8010ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ad0:	4a0a      	ldr	r2, [pc, #40]	; (8010afc <HAL_PCD_MspInit+0xa0>)
 8010ad2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010ad6:	6453      	str	r3, [r2, #68]	; 0x44
 8010ad8:	4b08      	ldr	r3, [pc, #32]	; (8010afc <HAL_PCD_MspInit+0xa0>)
 8010ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ae0:	60fb      	str	r3, [r7, #12]
 8010ae2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	2105      	movs	r1, #5
 8010ae8:	2043      	movs	r0, #67	; 0x43
 8010aea:	f7f4 fc7f 	bl	80053ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010aee:	2043      	movs	r0, #67	; 0x43
 8010af0:	f7f4 fc98 	bl	8005424 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010af4:	bf00      	nop
 8010af6:	3728      	adds	r7, #40	; 0x28
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}
 8010afc:	40023800 	.word	0x40023800
 8010b00:	40020000 	.word	0x40020000

08010b04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010b18:	4619      	mov	r1, r3
 8010b1a:	4610      	mov	r0, r2
 8010b1c:	f7fb fc01 	bl	800c322 <USBD_LL_SetupStage>
}
 8010b20:	bf00      	nop
 8010b22:	3708      	adds	r7, #8
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}

08010b28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b082      	sub	sp, #8
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
 8010b30:	460b      	mov	r3, r1
 8010b32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010b3a:	78fa      	ldrb	r2, [r7, #3]
 8010b3c:	6879      	ldr	r1, [r7, #4]
 8010b3e:	4613      	mov	r3, r2
 8010b40:	00db      	lsls	r3, r3, #3
 8010b42:	4413      	add	r3, r2
 8010b44:	009b      	lsls	r3, r3, #2
 8010b46:	440b      	add	r3, r1
 8010b48:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010b4c:	681a      	ldr	r2, [r3, #0]
 8010b4e:	78fb      	ldrb	r3, [r7, #3]
 8010b50:	4619      	mov	r1, r3
 8010b52:	f7fb fc3b 	bl	800c3cc <USBD_LL_DataOutStage>
}
 8010b56:	bf00      	nop
 8010b58:	3708      	adds	r7, #8
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}

08010b5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b5e:	b580      	push	{r7, lr}
 8010b60:	b082      	sub	sp, #8
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	6078      	str	r0, [r7, #4]
 8010b66:	460b      	mov	r3, r1
 8010b68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010b70:	78fa      	ldrb	r2, [r7, #3]
 8010b72:	6879      	ldr	r1, [r7, #4]
 8010b74:	4613      	mov	r3, r2
 8010b76:	00db      	lsls	r3, r3, #3
 8010b78:	4413      	add	r3, r2
 8010b7a:	009b      	lsls	r3, r3, #2
 8010b7c:	440b      	add	r3, r1
 8010b7e:	334c      	adds	r3, #76	; 0x4c
 8010b80:	681a      	ldr	r2, [r3, #0]
 8010b82:	78fb      	ldrb	r3, [r7, #3]
 8010b84:	4619      	mov	r1, r3
 8010b86:	f7fb fcd4 	bl	800c532 <USBD_LL_DataInStage>
}
 8010b8a:	bf00      	nop
 8010b8c:	3708      	adds	r7, #8
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}

08010b92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b92:	b580      	push	{r7, lr}
 8010b94:	b082      	sub	sp, #8
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7fb fe08 	bl	800c7b6 <USBD_LL_SOF>
}
 8010ba6:	bf00      	nop
 8010ba8:	3708      	adds	r7, #8
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}

08010bae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bae:	b580      	push	{r7, lr}
 8010bb0:	b084      	sub	sp, #16
 8010bb2:	af00      	add	r7, sp, #0
 8010bb4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	68db      	ldr	r3, [r3, #12]
 8010bbe:	2b02      	cmp	r3, #2
 8010bc0:	d001      	beq.n	8010bc6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010bc2:	f7f3 fae1 	bl	8004188 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010bcc:	7bfa      	ldrb	r2, [r7, #15]
 8010bce:	4611      	mov	r1, r2
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7fb fdb2 	bl	800c73a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7fb fd5a 	bl	800c696 <USBD_LL_Reset>
}
 8010be2:	bf00      	nop
 8010be4:	3710      	adds	r7, #16
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}
	...

08010bec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b082      	sub	sp, #8
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7fb fdad 	bl	800c75a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	687a      	ldr	r2, [r7, #4]
 8010c0c:	6812      	ldr	r2, [r2, #0]
 8010c0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010c12:	f043 0301 	orr.w	r3, r3, #1
 8010c16:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6a1b      	ldr	r3, [r3, #32]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d005      	beq.n	8010c2c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010c20:	4b04      	ldr	r3, [pc, #16]	; (8010c34 <HAL_PCD_SuspendCallback+0x48>)
 8010c22:	691b      	ldr	r3, [r3, #16]
 8010c24:	4a03      	ldr	r2, [pc, #12]	; (8010c34 <HAL_PCD_SuspendCallback+0x48>)
 8010c26:	f043 0306 	orr.w	r3, r3, #6
 8010c2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010c2c:	bf00      	nop
 8010c2e:	3708      	adds	r7, #8
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}
 8010c34:	e000ed00 	.word	0xe000ed00

08010c38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7fb fd9d 	bl	800c786 <USBD_LL_Resume>
}
 8010c4c:	bf00      	nop
 8010c4e:	3708      	adds	r7, #8
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}

08010c54 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b082      	sub	sp, #8
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
 8010c5c:	460b      	mov	r3, r1
 8010c5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c66:	78fa      	ldrb	r2, [r7, #3]
 8010c68:	4611      	mov	r1, r2
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7fb fdf5 	bl	800c85a <USBD_LL_IsoOUTIncomplete>
}
 8010c70:	bf00      	nop
 8010c72:	3708      	adds	r7, #8
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}

08010c78 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b082      	sub	sp, #8
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	460b      	mov	r3, r1
 8010c82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c8a:	78fa      	ldrb	r2, [r7, #3]
 8010c8c:	4611      	mov	r1, r2
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7fb fdb1 	bl	800c7f6 <USBD_LL_IsoINIncomplete>
}
 8010c94:	bf00      	nop
 8010c96:	3708      	adds	r7, #8
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b082      	sub	sp, #8
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010caa:	4618      	mov	r0, r3
 8010cac:	f7fb fe07 	bl	800c8be <USBD_LL_DevConnected>
}
 8010cb0:	bf00      	nop
 8010cb2:	3708      	adds	r7, #8
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}

08010cb8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7fb fe04 	bl	800c8d4 <USBD_LL_DevDisconnected>
}
 8010ccc:	bf00      	nop
 8010cce:	3708      	adds	r7, #8
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}

08010cd4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b082      	sub	sp, #8
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	781b      	ldrb	r3, [r3, #0]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d13c      	bne.n	8010d5e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010ce4:	4a20      	ldr	r2, [pc, #128]	; (8010d68 <USBD_LL_Init+0x94>)
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	4a1e      	ldr	r2, [pc, #120]	; (8010d68 <USBD_LL_Init+0x94>)
 8010cf0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010cf4:	4b1c      	ldr	r3, [pc, #112]	; (8010d68 <USBD_LL_Init+0x94>)
 8010cf6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010cfa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010cfc:	4b1a      	ldr	r3, [pc, #104]	; (8010d68 <USBD_LL_Init+0x94>)
 8010cfe:	2204      	movs	r2, #4
 8010d00:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010d02:	4b19      	ldr	r3, [pc, #100]	; (8010d68 <USBD_LL_Init+0x94>)
 8010d04:	2202      	movs	r2, #2
 8010d06:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010d08:	4b17      	ldr	r3, [pc, #92]	; (8010d68 <USBD_LL_Init+0x94>)
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010d0e:	4b16      	ldr	r3, [pc, #88]	; (8010d68 <USBD_LL_Init+0x94>)
 8010d10:	2202      	movs	r2, #2
 8010d12:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010d14:	4b14      	ldr	r3, [pc, #80]	; (8010d68 <USBD_LL_Init+0x94>)
 8010d16:	2200      	movs	r2, #0
 8010d18:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010d1a:	4b13      	ldr	r3, [pc, #76]	; (8010d68 <USBD_LL_Init+0x94>)
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010d20:	4b11      	ldr	r3, [pc, #68]	; (8010d68 <USBD_LL_Init+0x94>)
 8010d22:	2200      	movs	r2, #0
 8010d24:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010d26:	4b10      	ldr	r3, [pc, #64]	; (8010d68 <USBD_LL_Init+0x94>)
 8010d28:	2200      	movs	r2, #0
 8010d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010d2c:	4b0e      	ldr	r3, [pc, #56]	; (8010d68 <USBD_LL_Init+0x94>)
 8010d2e:	2200      	movs	r2, #0
 8010d30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010d32:	480d      	ldr	r0, [pc, #52]	; (8010d68 <USBD_LL_Init+0x94>)
 8010d34:	f7f5 fd11 	bl	800675a <HAL_PCD_Init>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d001      	beq.n	8010d42 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010d3e:	f7f3 fa23 	bl	8004188 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010d42:	2180      	movs	r1, #128	; 0x80
 8010d44:	4808      	ldr	r0, [pc, #32]	; (8010d68 <USBD_LL_Init+0x94>)
 8010d46:	f7f6 ff68 	bl	8007c1a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010d4a:	2240      	movs	r2, #64	; 0x40
 8010d4c:	2100      	movs	r1, #0
 8010d4e:	4806      	ldr	r0, [pc, #24]	; (8010d68 <USBD_LL_Init+0x94>)
 8010d50:	f7f6 ff1c 	bl	8007b8c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010d54:	2280      	movs	r2, #128	; 0x80
 8010d56:	2101      	movs	r1, #1
 8010d58:	4803      	ldr	r0, [pc, #12]	; (8010d68 <USBD_LL_Init+0x94>)
 8010d5a:	f7f6 ff17 	bl	8007b8c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010d5e:	2300      	movs	r3, #0
}
 8010d60:	4618      	mov	r0, r3
 8010d62:	3708      	adds	r7, #8
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}
 8010d68:	20009f00 	.word	0x20009f00

08010d6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b084      	sub	sp, #16
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d74:	2300      	movs	r3, #0
 8010d76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7f5 fe06 	bl	8006994 <HAL_PCD_Start>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d8c:	7bfb      	ldrb	r3, [r7, #15]
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f000 f942 	bl	8011018 <USBD_Get_USB_Status>
 8010d94:	4603      	mov	r3, r0
 8010d96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d98:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	3710      	adds	r7, #16
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}

08010da2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010da2:	b580      	push	{r7, lr}
 8010da4:	b084      	sub	sp, #16
 8010da6:	af00      	add	r7, sp, #0
 8010da8:	6078      	str	r0, [r7, #4]
 8010daa:	4608      	mov	r0, r1
 8010dac:	4611      	mov	r1, r2
 8010dae:	461a      	mov	r2, r3
 8010db0:	4603      	mov	r3, r0
 8010db2:	70fb      	strb	r3, [r7, #3]
 8010db4:	460b      	mov	r3, r1
 8010db6:	70bb      	strb	r3, [r7, #2]
 8010db8:	4613      	mov	r3, r2
 8010dba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010dca:	78bb      	ldrb	r3, [r7, #2]
 8010dcc:	883a      	ldrh	r2, [r7, #0]
 8010dce:	78f9      	ldrb	r1, [r7, #3]
 8010dd0:	f7f6 fad7 	bl	8007382 <HAL_PCD_EP_Open>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010dd8:	7bfb      	ldrb	r3, [r7, #15]
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f000 f91c 	bl	8011018 <USBD_Get_USB_Status>
 8010de0:	4603      	mov	r3, r0
 8010de2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010de4:	7bbb      	ldrb	r3, [r7, #14]
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3710      	adds	r7, #16
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}

08010dee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010dee:	b580      	push	{r7, lr}
 8010df0:	b084      	sub	sp, #16
 8010df2:	af00      	add	r7, sp, #0
 8010df4:	6078      	str	r0, [r7, #4]
 8010df6:	460b      	mov	r3, r1
 8010df8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010e08:	78fa      	ldrb	r2, [r7, #3]
 8010e0a:	4611      	mov	r1, r2
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7f6 fb20 	bl	8007452 <HAL_PCD_EP_Close>
 8010e12:	4603      	mov	r3, r0
 8010e14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e16:	7bfb      	ldrb	r3, [r7, #15]
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f000 f8fd 	bl	8011018 <USBD_Get_USB_Status>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e22:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3710      	adds	r7, #16
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}

08010e2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b084      	sub	sp, #16
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
 8010e34:	460b      	mov	r3, r1
 8010e36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010e46:	78fa      	ldrb	r2, [r7, #3]
 8010e48:	4611      	mov	r1, r2
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f7f6 fbf8 	bl	8007640 <HAL_PCD_EP_SetStall>
 8010e50:	4603      	mov	r3, r0
 8010e52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e54:	7bfb      	ldrb	r3, [r7, #15]
 8010e56:	4618      	mov	r0, r3
 8010e58:	f000 f8de 	bl	8011018 <USBD_Get_USB_Status>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e60:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e62:	4618      	mov	r0, r3
 8010e64:	3710      	adds	r7, #16
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}

08010e6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e6a:	b580      	push	{r7, lr}
 8010e6c:	b084      	sub	sp, #16
 8010e6e:	af00      	add	r7, sp, #0
 8010e70:	6078      	str	r0, [r7, #4]
 8010e72:	460b      	mov	r3, r1
 8010e74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e76:	2300      	movs	r3, #0
 8010e78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010e84:	78fa      	ldrb	r2, [r7, #3]
 8010e86:	4611      	mov	r1, r2
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7f6 fc3d 	bl	8007708 <HAL_PCD_EP_ClrStall>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e92:	7bfb      	ldrb	r3, [r7, #15]
 8010e94:	4618      	mov	r0, r3
 8010e96:	f000 f8bf 	bl	8011018 <USBD_Get_USB_Status>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	3710      	adds	r7, #16
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}

08010ea8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ea8:	b480      	push	{r7}
 8010eaa:	b085      	sub	sp, #20
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
 8010eb0:	460b      	mov	r3, r1
 8010eb2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010eba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010ebc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	da0b      	bge.n	8010edc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010ec4:	78fb      	ldrb	r3, [r7, #3]
 8010ec6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010eca:	68f9      	ldr	r1, [r7, #12]
 8010ecc:	4613      	mov	r3, r2
 8010ece:	00db      	lsls	r3, r3, #3
 8010ed0:	4413      	add	r3, r2
 8010ed2:	009b      	lsls	r3, r3, #2
 8010ed4:	440b      	add	r3, r1
 8010ed6:	333e      	adds	r3, #62	; 0x3e
 8010ed8:	781b      	ldrb	r3, [r3, #0]
 8010eda:	e00b      	b.n	8010ef4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010edc:	78fb      	ldrb	r3, [r7, #3]
 8010ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010ee2:	68f9      	ldr	r1, [r7, #12]
 8010ee4:	4613      	mov	r3, r2
 8010ee6:	00db      	lsls	r3, r3, #3
 8010ee8:	4413      	add	r3, r2
 8010eea:	009b      	lsls	r3, r3, #2
 8010eec:	440b      	add	r3, r1
 8010eee:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010ef2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	3714      	adds	r7, #20
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efe:	4770      	bx	lr

08010f00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b084      	sub	sp, #16
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
 8010f08:	460b      	mov	r3, r1
 8010f0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f10:	2300      	movs	r3, #0
 8010f12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010f1a:	78fa      	ldrb	r2, [r7, #3]
 8010f1c:	4611      	mov	r1, r2
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7f6 fa0a 	bl	8007338 <HAL_PCD_SetAddress>
 8010f24:	4603      	mov	r3, r0
 8010f26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f28:	7bfb      	ldrb	r3, [r7, #15]
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f000 f874 	bl	8011018 <USBD_Get_USB_Status>
 8010f30:	4603      	mov	r3, r0
 8010f32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3710      	adds	r7, #16
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}

08010f3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010f3e:	b580      	push	{r7, lr}
 8010f40:	b086      	sub	sp, #24
 8010f42:	af00      	add	r7, sp, #0
 8010f44:	60f8      	str	r0, [r7, #12]
 8010f46:	607a      	str	r2, [r7, #4]
 8010f48:	603b      	str	r3, [r7, #0]
 8010f4a:	460b      	mov	r3, r1
 8010f4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f52:	2300      	movs	r3, #0
 8010f54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010f5c:	7af9      	ldrb	r1, [r7, #11]
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	687a      	ldr	r2, [r7, #4]
 8010f62:	f7f6 fb23 	bl	80075ac <HAL_PCD_EP_Transmit>
 8010f66:	4603      	mov	r3, r0
 8010f68:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f6a:	7dfb      	ldrb	r3, [r7, #23]
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f000 f853 	bl	8011018 <USBD_Get_USB_Status>
 8010f72:	4603      	mov	r3, r0
 8010f74:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010f76:	7dbb      	ldrb	r3, [r7, #22]
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	3718      	adds	r7, #24
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}

08010f80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b086      	sub	sp, #24
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	60f8      	str	r0, [r7, #12]
 8010f88:	607a      	str	r2, [r7, #4]
 8010f8a:	603b      	str	r3, [r7, #0]
 8010f8c:	460b      	mov	r3, r1
 8010f8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f90:	2300      	movs	r3, #0
 8010f92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f94:	2300      	movs	r3, #0
 8010f96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010f9e:	7af9      	ldrb	r1, [r7, #11]
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	687a      	ldr	r2, [r7, #4]
 8010fa4:	f7f6 fa9f 	bl	80074e6 <HAL_PCD_EP_Receive>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fac:	7dfb      	ldrb	r3, [r7, #23]
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f000 f832 	bl	8011018 <USBD_Get_USB_Status>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010fb8:	7dbb      	ldrb	r3, [r7, #22]
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3718      	adds	r7, #24
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}

08010fc2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010fc2:	b580      	push	{r7, lr}
 8010fc4:	b082      	sub	sp, #8
 8010fc6:	af00      	add	r7, sp, #0
 8010fc8:	6078      	str	r0, [r7, #4]
 8010fca:	460b      	mov	r3, r1
 8010fcc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010fd4:	78fa      	ldrb	r2, [r7, #3]
 8010fd6:	4611      	mov	r1, r2
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7f6 facf 	bl	800757c <HAL_PCD_EP_GetRxCount>
 8010fde:	4603      	mov	r3, r0
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3708      	adds	r7, #8
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}

08010fe8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010fe8:	b480      	push	{r7}
 8010fea:	b083      	sub	sp, #12
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010ff0:	4b03      	ldr	r3, [pc, #12]	; (8011000 <USBD_static_malloc+0x18>)
}
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	370c      	adds	r7, #12
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffc:	4770      	bx	lr
 8010ffe:	bf00      	nop
 8011000:	2000a40c 	.word	0x2000a40c

08011004 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011004:	b480      	push	{r7}
 8011006:	b083      	sub	sp, #12
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]

}
 801100c:	bf00      	nop
 801100e:	370c      	adds	r7, #12
 8011010:	46bd      	mov	sp, r7
 8011012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011016:	4770      	bx	lr

08011018 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011018:	b480      	push	{r7}
 801101a:	b085      	sub	sp, #20
 801101c:	af00      	add	r7, sp, #0
 801101e:	4603      	mov	r3, r0
 8011020:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011022:	2300      	movs	r3, #0
 8011024:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011026:	79fb      	ldrb	r3, [r7, #7]
 8011028:	2b03      	cmp	r3, #3
 801102a:	d817      	bhi.n	801105c <USBD_Get_USB_Status+0x44>
 801102c:	a201      	add	r2, pc, #4	; (adr r2, 8011034 <USBD_Get_USB_Status+0x1c>)
 801102e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011032:	bf00      	nop
 8011034:	08011045 	.word	0x08011045
 8011038:	0801104b 	.word	0x0801104b
 801103c:	08011051 	.word	0x08011051
 8011040:	08011057 	.word	0x08011057
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011044:	2300      	movs	r3, #0
 8011046:	73fb      	strb	r3, [r7, #15]
    break;
 8011048:	e00b      	b.n	8011062 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801104a:	2303      	movs	r3, #3
 801104c:	73fb      	strb	r3, [r7, #15]
    break;
 801104e:	e008      	b.n	8011062 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011050:	2301      	movs	r3, #1
 8011052:	73fb      	strb	r3, [r7, #15]
    break;
 8011054:	e005      	b.n	8011062 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011056:	2303      	movs	r3, #3
 8011058:	73fb      	strb	r3, [r7, #15]
    break;
 801105a:	e002      	b.n	8011062 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801105c:	2303      	movs	r3, #3
 801105e:	73fb      	strb	r3, [r7, #15]
    break;
 8011060:	bf00      	nop
  }
  return usb_status;
 8011062:	7bfb      	ldrb	r3, [r7, #15]
}
 8011064:	4618      	mov	r0, r3
 8011066:	3714      	adds	r7, #20
 8011068:	46bd      	mov	sp, r7
 801106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106e:	4770      	bx	lr

08011070 <atoi>:
 8011070:	220a      	movs	r2, #10
 8011072:	2100      	movs	r1, #0
 8011074:	f000 bb80 	b.w	8011778 <strtol>

08011078 <calloc>:
 8011078:	4b02      	ldr	r3, [pc, #8]	; (8011084 <calloc+0xc>)
 801107a:	460a      	mov	r2, r1
 801107c:	4601      	mov	r1, r0
 801107e:	6818      	ldr	r0, [r3, #0]
 8011080:	f000 b852 	b.w	8011128 <_calloc_r>
 8011084:	200006d8 	.word	0x200006d8

08011088 <__errno>:
 8011088:	4b01      	ldr	r3, [pc, #4]	; (8011090 <__errno+0x8>)
 801108a:	6818      	ldr	r0, [r3, #0]
 801108c:	4770      	bx	lr
 801108e:	bf00      	nop
 8011090:	200006d8 	.word	0x200006d8

08011094 <__libc_init_array>:
 8011094:	b570      	push	{r4, r5, r6, lr}
 8011096:	4d0d      	ldr	r5, [pc, #52]	; (80110cc <__libc_init_array+0x38>)
 8011098:	4c0d      	ldr	r4, [pc, #52]	; (80110d0 <__libc_init_array+0x3c>)
 801109a:	1b64      	subs	r4, r4, r5
 801109c:	10a4      	asrs	r4, r4, #2
 801109e:	2600      	movs	r6, #0
 80110a0:	42a6      	cmp	r6, r4
 80110a2:	d109      	bne.n	80110b8 <__libc_init_array+0x24>
 80110a4:	4d0b      	ldr	r5, [pc, #44]	; (80110d4 <__libc_init_array+0x40>)
 80110a6:	4c0c      	ldr	r4, [pc, #48]	; (80110d8 <__libc_init_array+0x44>)
 80110a8:	f001 fba2 	bl	80127f0 <_init>
 80110ac:	1b64      	subs	r4, r4, r5
 80110ae:	10a4      	asrs	r4, r4, #2
 80110b0:	2600      	movs	r6, #0
 80110b2:	42a6      	cmp	r6, r4
 80110b4:	d105      	bne.n	80110c2 <__libc_init_array+0x2e>
 80110b6:	bd70      	pop	{r4, r5, r6, pc}
 80110b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80110bc:	4798      	blx	r3
 80110be:	3601      	adds	r6, #1
 80110c0:	e7ee      	b.n	80110a0 <__libc_init_array+0xc>
 80110c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80110c6:	4798      	blx	r3
 80110c8:	3601      	adds	r6, #1
 80110ca:	e7f2      	b.n	80110b2 <__libc_init_array+0x1e>
 80110cc:	08013bc8 	.word	0x08013bc8
 80110d0:	08013bc8 	.word	0x08013bc8
 80110d4:	08013bc8 	.word	0x08013bc8
 80110d8:	08013bcc 	.word	0x08013bcc

080110dc <malloc>:
 80110dc:	4b02      	ldr	r3, [pc, #8]	; (80110e8 <malloc+0xc>)
 80110de:	4601      	mov	r1, r0
 80110e0:	6818      	ldr	r0, [r3, #0]
 80110e2:	f000 b8a3 	b.w	801122c <_malloc_r>
 80110e6:	bf00      	nop
 80110e8:	200006d8 	.word	0x200006d8

080110ec <free>:
 80110ec:	4b02      	ldr	r3, [pc, #8]	; (80110f8 <free+0xc>)
 80110ee:	4601      	mov	r1, r0
 80110f0:	6818      	ldr	r0, [r3, #0]
 80110f2:	f000 b82f 	b.w	8011154 <_free_r>
 80110f6:	bf00      	nop
 80110f8:	200006d8 	.word	0x200006d8

080110fc <memcpy>:
 80110fc:	440a      	add	r2, r1
 80110fe:	4291      	cmp	r1, r2
 8011100:	f100 33ff 	add.w	r3, r0, #4294967295
 8011104:	d100      	bne.n	8011108 <memcpy+0xc>
 8011106:	4770      	bx	lr
 8011108:	b510      	push	{r4, lr}
 801110a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801110e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011112:	4291      	cmp	r1, r2
 8011114:	d1f9      	bne.n	801110a <memcpy+0xe>
 8011116:	bd10      	pop	{r4, pc}

08011118 <memset>:
 8011118:	4402      	add	r2, r0
 801111a:	4603      	mov	r3, r0
 801111c:	4293      	cmp	r3, r2
 801111e:	d100      	bne.n	8011122 <memset+0xa>
 8011120:	4770      	bx	lr
 8011122:	f803 1b01 	strb.w	r1, [r3], #1
 8011126:	e7f9      	b.n	801111c <memset+0x4>

08011128 <_calloc_r>:
 8011128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801112a:	fba1 2402 	umull	r2, r4, r1, r2
 801112e:	b94c      	cbnz	r4, 8011144 <_calloc_r+0x1c>
 8011130:	4611      	mov	r1, r2
 8011132:	9201      	str	r2, [sp, #4]
 8011134:	f000 f87a 	bl	801122c <_malloc_r>
 8011138:	9a01      	ldr	r2, [sp, #4]
 801113a:	4605      	mov	r5, r0
 801113c:	b930      	cbnz	r0, 801114c <_calloc_r+0x24>
 801113e:	4628      	mov	r0, r5
 8011140:	b003      	add	sp, #12
 8011142:	bd30      	pop	{r4, r5, pc}
 8011144:	220c      	movs	r2, #12
 8011146:	6002      	str	r2, [r0, #0]
 8011148:	2500      	movs	r5, #0
 801114a:	e7f8      	b.n	801113e <_calloc_r+0x16>
 801114c:	4621      	mov	r1, r4
 801114e:	f7ff ffe3 	bl	8011118 <memset>
 8011152:	e7f4      	b.n	801113e <_calloc_r+0x16>

08011154 <_free_r>:
 8011154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011156:	2900      	cmp	r1, #0
 8011158:	d044      	beq.n	80111e4 <_free_r+0x90>
 801115a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801115e:	9001      	str	r0, [sp, #4]
 8011160:	2b00      	cmp	r3, #0
 8011162:	f1a1 0404 	sub.w	r4, r1, #4
 8011166:	bfb8      	it	lt
 8011168:	18e4      	addlt	r4, r4, r3
 801116a:	f000 fdef 	bl	8011d4c <__malloc_lock>
 801116e:	4a1e      	ldr	r2, [pc, #120]	; (80111e8 <_free_r+0x94>)
 8011170:	9801      	ldr	r0, [sp, #4]
 8011172:	6813      	ldr	r3, [r2, #0]
 8011174:	b933      	cbnz	r3, 8011184 <_free_r+0x30>
 8011176:	6063      	str	r3, [r4, #4]
 8011178:	6014      	str	r4, [r2, #0]
 801117a:	b003      	add	sp, #12
 801117c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011180:	f000 bdea 	b.w	8011d58 <__malloc_unlock>
 8011184:	42a3      	cmp	r3, r4
 8011186:	d908      	bls.n	801119a <_free_r+0x46>
 8011188:	6825      	ldr	r5, [r4, #0]
 801118a:	1961      	adds	r1, r4, r5
 801118c:	428b      	cmp	r3, r1
 801118e:	bf01      	itttt	eq
 8011190:	6819      	ldreq	r1, [r3, #0]
 8011192:	685b      	ldreq	r3, [r3, #4]
 8011194:	1949      	addeq	r1, r1, r5
 8011196:	6021      	streq	r1, [r4, #0]
 8011198:	e7ed      	b.n	8011176 <_free_r+0x22>
 801119a:	461a      	mov	r2, r3
 801119c:	685b      	ldr	r3, [r3, #4]
 801119e:	b10b      	cbz	r3, 80111a4 <_free_r+0x50>
 80111a0:	42a3      	cmp	r3, r4
 80111a2:	d9fa      	bls.n	801119a <_free_r+0x46>
 80111a4:	6811      	ldr	r1, [r2, #0]
 80111a6:	1855      	adds	r5, r2, r1
 80111a8:	42a5      	cmp	r5, r4
 80111aa:	d10b      	bne.n	80111c4 <_free_r+0x70>
 80111ac:	6824      	ldr	r4, [r4, #0]
 80111ae:	4421      	add	r1, r4
 80111b0:	1854      	adds	r4, r2, r1
 80111b2:	42a3      	cmp	r3, r4
 80111b4:	6011      	str	r1, [r2, #0]
 80111b6:	d1e0      	bne.n	801117a <_free_r+0x26>
 80111b8:	681c      	ldr	r4, [r3, #0]
 80111ba:	685b      	ldr	r3, [r3, #4]
 80111bc:	6053      	str	r3, [r2, #4]
 80111be:	4421      	add	r1, r4
 80111c0:	6011      	str	r1, [r2, #0]
 80111c2:	e7da      	b.n	801117a <_free_r+0x26>
 80111c4:	d902      	bls.n	80111cc <_free_r+0x78>
 80111c6:	230c      	movs	r3, #12
 80111c8:	6003      	str	r3, [r0, #0]
 80111ca:	e7d6      	b.n	801117a <_free_r+0x26>
 80111cc:	6825      	ldr	r5, [r4, #0]
 80111ce:	1961      	adds	r1, r4, r5
 80111d0:	428b      	cmp	r3, r1
 80111d2:	bf04      	itt	eq
 80111d4:	6819      	ldreq	r1, [r3, #0]
 80111d6:	685b      	ldreq	r3, [r3, #4]
 80111d8:	6063      	str	r3, [r4, #4]
 80111da:	bf04      	itt	eq
 80111dc:	1949      	addeq	r1, r1, r5
 80111de:	6021      	streq	r1, [r4, #0]
 80111e0:	6054      	str	r4, [r2, #4]
 80111e2:	e7ca      	b.n	801117a <_free_r+0x26>
 80111e4:	b003      	add	sp, #12
 80111e6:	bd30      	pop	{r4, r5, pc}
 80111e8:	2000a62c 	.word	0x2000a62c

080111ec <sbrk_aligned>:
 80111ec:	b570      	push	{r4, r5, r6, lr}
 80111ee:	4e0e      	ldr	r6, [pc, #56]	; (8011228 <sbrk_aligned+0x3c>)
 80111f0:	460c      	mov	r4, r1
 80111f2:	6831      	ldr	r1, [r6, #0]
 80111f4:	4605      	mov	r5, r0
 80111f6:	b911      	cbnz	r1, 80111fe <sbrk_aligned+0x12>
 80111f8:	f000 f922 	bl	8011440 <_sbrk_r>
 80111fc:	6030      	str	r0, [r6, #0]
 80111fe:	4621      	mov	r1, r4
 8011200:	4628      	mov	r0, r5
 8011202:	f000 f91d 	bl	8011440 <_sbrk_r>
 8011206:	1c43      	adds	r3, r0, #1
 8011208:	d00a      	beq.n	8011220 <sbrk_aligned+0x34>
 801120a:	1cc4      	adds	r4, r0, #3
 801120c:	f024 0403 	bic.w	r4, r4, #3
 8011210:	42a0      	cmp	r0, r4
 8011212:	d007      	beq.n	8011224 <sbrk_aligned+0x38>
 8011214:	1a21      	subs	r1, r4, r0
 8011216:	4628      	mov	r0, r5
 8011218:	f000 f912 	bl	8011440 <_sbrk_r>
 801121c:	3001      	adds	r0, #1
 801121e:	d101      	bne.n	8011224 <sbrk_aligned+0x38>
 8011220:	f04f 34ff 	mov.w	r4, #4294967295
 8011224:	4620      	mov	r0, r4
 8011226:	bd70      	pop	{r4, r5, r6, pc}
 8011228:	2000a630 	.word	0x2000a630

0801122c <_malloc_r>:
 801122c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011230:	1ccd      	adds	r5, r1, #3
 8011232:	f025 0503 	bic.w	r5, r5, #3
 8011236:	3508      	adds	r5, #8
 8011238:	2d0c      	cmp	r5, #12
 801123a:	bf38      	it	cc
 801123c:	250c      	movcc	r5, #12
 801123e:	2d00      	cmp	r5, #0
 8011240:	4607      	mov	r7, r0
 8011242:	db01      	blt.n	8011248 <_malloc_r+0x1c>
 8011244:	42a9      	cmp	r1, r5
 8011246:	d905      	bls.n	8011254 <_malloc_r+0x28>
 8011248:	230c      	movs	r3, #12
 801124a:	603b      	str	r3, [r7, #0]
 801124c:	2600      	movs	r6, #0
 801124e:	4630      	mov	r0, r6
 8011250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011254:	4e2e      	ldr	r6, [pc, #184]	; (8011310 <_malloc_r+0xe4>)
 8011256:	f000 fd79 	bl	8011d4c <__malloc_lock>
 801125a:	6833      	ldr	r3, [r6, #0]
 801125c:	461c      	mov	r4, r3
 801125e:	bb34      	cbnz	r4, 80112ae <_malloc_r+0x82>
 8011260:	4629      	mov	r1, r5
 8011262:	4638      	mov	r0, r7
 8011264:	f7ff ffc2 	bl	80111ec <sbrk_aligned>
 8011268:	1c43      	adds	r3, r0, #1
 801126a:	4604      	mov	r4, r0
 801126c:	d14d      	bne.n	801130a <_malloc_r+0xde>
 801126e:	6834      	ldr	r4, [r6, #0]
 8011270:	4626      	mov	r6, r4
 8011272:	2e00      	cmp	r6, #0
 8011274:	d140      	bne.n	80112f8 <_malloc_r+0xcc>
 8011276:	6823      	ldr	r3, [r4, #0]
 8011278:	4631      	mov	r1, r6
 801127a:	4638      	mov	r0, r7
 801127c:	eb04 0803 	add.w	r8, r4, r3
 8011280:	f000 f8de 	bl	8011440 <_sbrk_r>
 8011284:	4580      	cmp	r8, r0
 8011286:	d13a      	bne.n	80112fe <_malloc_r+0xd2>
 8011288:	6821      	ldr	r1, [r4, #0]
 801128a:	3503      	adds	r5, #3
 801128c:	1a6d      	subs	r5, r5, r1
 801128e:	f025 0503 	bic.w	r5, r5, #3
 8011292:	3508      	adds	r5, #8
 8011294:	2d0c      	cmp	r5, #12
 8011296:	bf38      	it	cc
 8011298:	250c      	movcc	r5, #12
 801129a:	4629      	mov	r1, r5
 801129c:	4638      	mov	r0, r7
 801129e:	f7ff ffa5 	bl	80111ec <sbrk_aligned>
 80112a2:	3001      	adds	r0, #1
 80112a4:	d02b      	beq.n	80112fe <_malloc_r+0xd2>
 80112a6:	6823      	ldr	r3, [r4, #0]
 80112a8:	442b      	add	r3, r5
 80112aa:	6023      	str	r3, [r4, #0]
 80112ac:	e00e      	b.n	80112cc <_malloc_r+0xa0>
 80112ae:	6822      	ldr	r2, [r4, #0]
 80112b0:	1b52      	subs	r2, r2, r5
 80112b2:	d41e      	bmi.n	80112f2 <_malloc_r+0xc6>
 80112b4:	2a0b      	cmp	r2, #11
 80112b6:	d916      	bls.n	80112e6 <_malloc_r+0xba>
 80112b8:	1961      	adds	r1, r4, r5
 80112ba:	42a3      	cmp	r3, r4
 80112bc:	6025      	str	r5, [r4, #0]
 80112be:	bf18      	it	ne
 80112c0:	6059      	strne	r1, [r3, #4]
 80112c2:	6863      	ldr	r3, [r4, #4]
 80112c4:	bf08      	it	eq
 80112c6:	6031      	streq	r1, [r6, #0]
 80112c8:	5162      	str	r2, [r4, r5]
 80112ca:	604b      	str	r3, [r1, #4]
 80112cc:	4638      	mov	r0, r7
 80112ce:	f104 060b 	add.w	r6, r4, #11
 80112d2:	f000 fd41 	bl	8011d58 <__malloc_unlock>
 80112d6:	f026 0607 	bic.w	r6, r6, #7
 80112da:	1d23      	adds	r3, r4, #4
 80112dc:	1af2      	subs	r2, r6, r3
 80112de:	d0b6      	beq.n	801124e <_malloc_r+0x22>
 80112e0:	1b9b      	subs	r3, r3, r6
 80112e2:	50a3      	str	r3, [r4, r2]
 80112e4:	e7b3      	b.n	801124e <_malloc_r+0x22>
 80112e6:	6862      	ldr	r2, [r4, #4]
 80112e8:	42a3      	cmp	r3, r4
 80112ea:	bf0c      	ite	eq
 80112ec:	6032      	streq	r2, [r6, #0]
 80112ee:	605a      	strne	r2, [r3, #4]
 80112f0:	e7ec      	b.n	80112cc <_malloc_r+0xa0>
 80112f2:	4623      	mov	r3, r4
 80112f4:	6864      	ldr	r4, [r4, #4]
 80112f6:	e7b2      	b.n	801125e <_malloc_r+0x32>
 80112f8:	4634      	mov	r4, r6
 80112fa:	6876      	ldr	r6, [r6, #4]
 80112fc:	e7b9      	b.n	8011272 <_malloc_r+0x46>
 80112fe:	230c      	movs	r3, #12
 8011300:	603b      	str	r3, [r7, #0]
 8011302:	4638      	mov	r0, r7
 8011304:	f000 fd28 	bl	8011d58 <__malloc_unlock>
 8011308:	e7a1      	b.n	801124e <_malloc_r+0x22>
 801130a:	6025      	str	r5, [r4, #0]
 801130c:	e7de      	b.n	80112cc <_malloc_r+0xa0>
 801130e:	bf00      	nop
 8011310:	2000a62c 	.word	0x2000a62c

08011314 <iprintf>:
 8011314:	b40f      	push	{r0, r1, r2, r3}
 8011316:	4b0a      	ldr	r3, [pc, #40]	; (8011340 <iprintf+0x2c>)
 8011318:	b513      	push	{r0, r1, r4, lr}
 801131a:	681c      	ldr	r4, [r3, #0]
 801131c:	b124      	cbz	r4, 8011328 <iprintf+0x14>
 801131e:	69a3      	ldr	r3, [r4, #24]
 8011320:	b913      	cbnz	r3, 8011328 <iprintf+0x14>
 8011322:	4620      	mov	r0, r4
 8011324:	f000 fc0c 	bl	8011b40 <__sinit>
 8011328:	ab05      	add	r3, sp, #20
 801132a:	9a04      	ldr	r2, [sp, #16]
 801132c:	68a1      	ldr	r1, [r4, #8]
 801132e:	9301      	str	r3, [sp, #4]
 8011330:	4620      	mov	r0, r4
 8011332:	f000 fecb 	bl	80120cc <_vfiprintf_r>
 8011336:	b002      	add	sp, #8
 8011338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801133c:	b004      	add	sp, #16
 801133e:	4770      	bx	lr
 8011340:	200006d8 	.word	0x200006d8

08011344 <_puts_r>:
 8011344:	b570      	push	{r4, r5, r6, lr}
 8011346:	460e      	mov	r6, r1
 8011348:	4605      	mov	r5, r0
 801134a:	b118      	cbz	r0, 8011354 <_puts_r+0x10>
 801134c:	6983      	ldr	r3, [r0, #24]
 801134e:	b90b      	cbnz	r3, 8011354 <_puts_r+0x10>
 8011350:	f000 fbf6 	bl	8011b40 <__sinit>
 8011354:	69ab      	ldr	r3, [r5, #24]
 8011356:	68ac      	ldr	r4, [r5, #8]
 8011358:	b913      	cbnz	r3, 8011360 <_puts_r+0x1c>
 801135a:	4628      	mov	r0, r5
 801135c:	f000 fbf0 	bl	8011b40 <__sinit>
 8011360:	4b2c      	ldr	r3, [pc, #176]	; (8011414 <_puts_r+0xd0>)
 8011362:	429c      	cmp	r4, r3
 8011364:	d120      	bne.n	80113a8 <_puts_r+0x64>
 8011366:	686c      	ldr	r4, [r5, #4]
 8011368:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801136a:	07db      	lsls	r3, r3, #31
 801136c:	d405      	bmi.n	801137a <_puts_r+0x36>
 801136e:	89a3      	ldrh	r3, [r4, #12]
 8011370:	0598      	lsls	r0, r3, #22
 8011372:	d402      	bmi.n	801137a <_puts_r+0x36>
 8011374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011376:	f000 fc81 	bl	8011c7c <__retarget_lock_acquire_recursive>
 801137a:	89a3      	ldrh	r3, [r4, #12]
 801137c:	0719      	lsls	r1, r3, #28
 801137e:	d51d      	bpl.n	80113bc <_puts_r+0x78>
 8011380:	6923      	ldr	r3, [r4, #16]
 8011382:	b1db      	cbz	r3, 80113bc <_puts_r+0x78>
 8011384:	3e01      	subs	r6, #1
 8011386:	68a3      	ldr	r3, [r4, #8]
 8011388:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801138c:	3b01      	subs	r3, #1
 801138e:	60a3      	str	r3, [r4, #8]
 8011390:	bb39      	cbnz	r1, 80113e2 <_puts_r+0x9e>
 8011392:	2b00      	cmp	r3, #0
 8011394:	da38      	bge.n	8011408 <_puts_r+0xc4>
 8011396:	4622      	mov	r2, r4
 8011398:	210a      	movs	r1, #10
 801139a:	4628      	mov	r0, r5
 801139c:	f000 f9f6 	bl	801178c <__swbuf_r>
 80113a0:	3001      	adds	r0, #1
 80113a2:	d011      	beq.n	80113c8 <_puts_r+0x84>
 80113a4:	250a      	movs	r5, #10
 80113a6:	e011      	b.n	80113cc <_puts_r+0x88>
 80113a8:	4b1b      	ldr	r3, [pc, #108]	; (8011418 <_puts_r+0xd4>)
 80113aa:	429c      	cmp	r4, r3
 80113ac:	d101      	bne.n	80113b2 <_puts_r+0x6e>
 80113ae:	68ac      	ldr	r4, [r5, #8]
 80113b0:	e7da      	b.n	8011368 <_puts_r+0x24>
 80113b2:	4b1a      	ldr	r3, [pc, #104]	; (801141c <_puts_r+0xd8>)
 80113b4:	429c      	cmp	r4, r3
 80113b6:	bf08      	it	eq
 80113b8:	68ec      	ldreq	r4, [r5, #12]
 80113ba:	e7d5      	b.n	8011368 <_puts_r+0x24>
 80113bc:	4621      	mov	r1, r4
 80113be:	4628      	mov	r0, r5
 80113c0:	f000 fa36 	bl	8011830 <__swsetup_r>
 80113c4:	2800      	cmp	r0, #0
 80113c6:	d0dd      	beq.n	8011384 <_puts_r+0x40>
 80113c8:	f04f 35ff 	mov.w	r5, #4294967295
 80113cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80113ce:	07da      	lsls	r2, r3, #31
 80113d0:	d405      	bmi.n	80113de <_puts_r+0x9a>
 80113d2:	89a3      	ldrh	r3, [r4, #12]
 80113d4:	059b      	lsls	r3, r3, #22
 80113d6:	d402      	bmi.n	80113de <_puts_r+0x9a>
 80113d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113da:	f000 fc50 	bl	8011c7e <__retarget_lock_release_recursive>
 80113de:	4628      	mov	r0, r5
 80113e0:	bd70      	pop	{r4, r5, r6, pc}
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	da04      	bge.n	80113f0 <_puts_r+0xac>
 80113e6:	69a2      	ldr	r2, [r4, #24]
 80113e8:	429a      	cmp	r2, r3
 80113ea:	dc06      	bgt.n	80113fa <_puts_r+0xb6>
 80113ec:	290a      	cmp	r1, #10
 80113ee:	d004      	beq.n	80113fa <_puts_r+0xb6>
 80113f0:	6823      	ldr	r3, [r4, #0]
 80113f2:	1c5a      	adds	r2, r3, #1
 80113f4:	6022      	str	r2, [r4, #0]
 80113f6:	7019      	strb	r1, [r3, #0]
 80113f8:	e7c5      	b.n	8011386 <_puts_r+0x42>
 80113fa:	4622      	mov	r2, r4
 80113fc:	4628      	mov	r0, r5
 80113fe:	f000 f9c5 	bl	801178c <__swbuf_r>
 8011402:	3001      	adds	r0, #1
 8011404:	d1bf      	bne.n	8011386 <_puts_r+0x42>
 8011406:	e7df      	b.n	80113c8 <_puts_r+0x84>
 8011408:	6823      	ldr	r3, [r4, #0]
 801140a:	250a      	movs	r5, #10
 801140c:	1c5a      	adds	r2, r3, #1
 801140e:	6022      	str	r2, [r4, #0]
 8011410:	701d      	strb	r5, [r3, #0]
 8011412:	e7db      	b.n	80113cc <_puts_r+0x88>
 8011414:	08013b4c 	.word	0x08013b4c
 8011418:	08013b6c 	.word	0x08013b6c
 801141c:	08013b2c 	.word	0x08013b2c

08011420 <puts>:
 8011420:	4b02      	ldr	r3, [pc, #8]	; (801142c <puts+0xc>)
 8011422:	4601      	mov	r1, r0
 8011424:	6818      	ldr	r0, [r3, #0]
 8011426:	f7ff bf8d 	b.w	8011344 <_puts_r>
 801142a:	bf00      	nop
 801142c:	200006d8 	.word	0x200006d8

08011430 <realloc>:
 8011430:	4b02      	ldr	r3, [pc, #8]	; (801143c <realloc+0xc>)
 8011432:	460a      	mov	r2, r1
 8011434:	4601      	mov	r1, r0
 8011436:	6818      	ldr	r0, [r3, #0]
 8011438:	f000 bc94 	b.w	8011d64 <_realloc_r>
 801143c:	200006d8 	.word	0x200006d8

08011440 <_sbrk_r>:
 8011440:	b538      	push	{r3, r4, r5, lr}
 8011442:	4d06      	ldr	r5, [pc, #24]	; (801145c <_sbrk_r+0x1c>)
 8011444:	2300      	movs	r3, #0
 8011446:	4604      	mov	r4, r0
 8011448:	4608      	mov	r0, r1
 801144a:	602b      	str	r3, [r5, #0]
 801144c:	f7f3 fdf6 	bl	800503c <_sbrk>
 8011450:	1c43      	adds	r3, r0, #1
 8011452:	d102      	bne.n	801145a <_sbrk_r+0x1a>
 8011454:	682b      	ldr	r3, [r5, #0]
 8011456:	b103      	cbz	r3, 801145a <_sbrk_r+0x1a>
 8011458:	6023      	str	r3, [r4, #0]
 801145a:	bd38      	pop	{r3, r4, r5, pc}
 801145c:	2000a638 	.word	0x2000a638

08011460 <setbuf>:
 8011460:	2900      	cmp	r1, #0
 8011462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011466:	bf0c      	ite	eq
 8011468:	2202      	moveq	r2, #2
 801146a:	2200      	movne	r2, #0
 801146c:	f000 b800 	b.w	8011470 <setvbuf>

08011470 <setvbuf>:
 8011470:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011474:	461d      	mov	r5, r3
 8011476:	4b5d      	ldr	r3, [pc, #372]	; (80115ec <setvbuf+0x17c>)
 8011478:	681f      	ldr	r7, [r3, #0]
 801147a:	4604      	mov	r4, r0
 801147c:	460e      	mov	r6, r1
 801147e:	4690      	mov	r8, r2
 8011480:	b127      	cbz	r7, 801148c <setvbuf+0x1c>
 8011482:	69bb      	ldr	r3, [r7, #24]
 8011484:	b913      	cbnz	r3, 801148c <setvbuf+0x1c>
 8011486:	4638      	mov	r0, r7
 8011488:	f000 fb5a 	bl	8011b40 <__sinit>
 801148c:	4b58      	ldr	r3, [pc, #352]	; (80115f0 <setvbuf+0x180>)
 801148e:	429c      	cmp	r4, r3
 8011490:	d167      	bne.n	8011562 <setvbuf+0xf2>
 8011492:	687c      	ldr	r4, [r7, #4]
 8011494:	f1b8 0f02 	cmp.w	r8, #2
 8011498:	d006      	beq.n	80114a8 <setvbuf+0x38>
 801149a:	f1b8 0f01 	cmp.w	r8, #1
 801149e:	f200 809f 	bhi.w	80115e0 <setvbuf+0x170>
 80114a2:	2d00      	cmp	r5, #0
 80114a4:	f2c0 809c 	blt.w	80115e0 <setvbuf+0x170>
 80114a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80114aa:	07db      	lsls	r3, r3, #31
 80114ac:	d405      	bmi.n	80114ba <setvbuf+0x4a>
 80114ae:	89a3      	ldrh	r3, [r4, #12]
 80114b0:	0598      	lsls	r0, r3, #22
 80114b2:	d402      	bmi.n	80114ba <setvbuf+0x4a>
 80114b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114b6:	f000 fbe1 	bl	8011c7c <__retarget_lock_acquire_recursive>
 80114ba:	4621      	mov	r1, r4
 80114bc:	4638      	mov	r0, r7
 80114be:	f000 faab 	bl	8011a18 <_fflush_r>
 80114c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80114c4:	b141      	cbz	r1, 80114d8 <setvbuf+0x68>
 80114c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80114ca:	4299      	cmp	r1, r3
 80114cc:	d002      	beq.n	80114d4 <setvbuf+0x64>
 80114ce:	4638      	mov	r0, r7
 80114d0:	f7ff fe40 	bl	8011154 <_free_r>
 80114d4:	2300      	movs	r3, #0
 80114d6:	6363      	str	r3, [r4, #52]	; 0x34
 80114d8:	2300      	movs	r3, #0
 80114da:	61a3      	str	r3, [r4, #24]
 80114dc:	6063      	str	r3, [r4, #4]
 80114de:	89a3      	ldrh	r3, [r4, #12]
 80114e0:	0619      	lsls	r1, r3, #24
 80114e2:	d503      	bpl.n	80114ec <setvbuf+0x7c>
 80114e4:	6921      	ldr	r1, [r4, #16]
 80114e6:	4638      	mov	r0, r7
 80114e8:	f7ff fe34 	bl	8011154 <_free_r>
 80114ec:	89a3      	ldrh	r3, [r4, #12]
 80114ee:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80114f2:	f023 0303 	bic.w	r3, r3, #3
 80114f6:	f1b8 0f02 	cmp.w	r8, #2
 80114fa:	81a3      	strh	r3, [r4, #12]
 80114fc:	d06c      	beq.n	80115d8 <setvbuf+0x168>
 80114fe:	ab01      	add	r3, sp, #4
 8011500:	466a      	mov	r2, sp
 8011502:	4621      	mov	r1, r4
 8011504:	4638      	mov	r0, r7
 8011506:	f000 fbbb 	bl	8011c80 <__swhatbuf_r>
 801150a:	89a3      	ldrh	r3, [r4, #12]
 801150c:	4318      	orrs	r0, r3
 801150e:	81a0      	strh	r0, [r4, #12]
 8011510:	2d00      	cmp	r5, #0
 8011512:	d130      	bne.n	8011576 <setvbuf+0x106>
 8011514:	9d00      	ldr	r5, [sp, #0]
 8011516:	4628      	mov	r0, r5
 8011518:	f7ff fde0 	bl	80110dc <malloc>
 801151c:	4606      	mov	r6, r0
 801151e:	2800      	cmp	r0, #0
 8011520:	d155      	bne.n	80115ce <setvbuf+0x15e>
 8011522:	f8dd 9000 	ldr.w	r9, [sp]
 8011526:	45a9      	cmp	r9, r5
 8011528:	d14a      	bne.n	80115c0 <setvbuf+0x150>
 801152a:	f04f 35ff 	mov.w	r5, #4294967295
 801152e:	2200      	movs	r2, #0
 8011530:	60a2      	str	r2, [r4, #8]
 8011532:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8011536:	6022      	str	r2, [r4, #0]
 8011538:	6122      	str	r2, [r4, #16]
 801153a:	2201      	movs	r2, #1
 801153c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011540:	6162      	str	r2, [r4, #20]
 8011542:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011544:	f043 0302 	orr.w	r3, r3, #2
 8011548:	07d2      	lsls	r2, r2, #31
 801154a:	81a3      	strh	r3, [r4, #12]
 801154c:	d405      	bmi.n	801155a <setvbuf+0xea>
 801154e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8011552:	d102      	bne.n	801155a <setvbuf+0xea>
 8011554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011556:	f000 fb92 	bl	8011c7e <__retarget_lock_release_recursive>
 801155a:	4628      	mov	r0, r5
 801155c:	b003      	add	sp, #12
 801155e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011562:	4b24      	ldr	r3, [pc, #144]	; (80115f4 <setvbuf+0x184>)
 8011564:	429c      	cmp	r4, r3
 8011566:	d101      	bne.n	801156c <setvbuf+0xfc>
 8011568:	68bc      	ldr	r4, [r7, #8]
 801156a:	e793      	b.n	8011494 <setvbuf+0x24>
 801156c:	4b22      	ldr	r3, [pc, #136]	; (80115f8 <setvbuf+0x188>)
 801156e:	429c      	cmp	r4, r3
 8011570:	bf08      	it	eq
 8011572:	68fc      	ldreq	r4, [r7, #12]
 8011574:	e78e      	b.n	8011494 <setvbuf+0x24>
 8011576:	2e00      	cmp	r6, #0
 8011578:	d0cd      	beq.n	8011516 <setvbuf+0xa6>
 801157a:	69bb      	ldr	r3, [r7, #24]
 801157c:	b913      	cbnz	r3, 8011584 <setvbuf+0x114>
 801157e:	4638      	mov	r0, r7
 8011580:	f000 fade 	bl	8011b40 <__sinit>
 8011584:	f1b8 0f01 	cmp.w	r8, #1
 8011588:	bf08      	it	eq
 801158a:	89a3      	ldrheq	r3, [r4, #12]
 801158c:	6026      	str	r6, [r4, #0]
 801158e:	bf04      	itt	eq
 8011590:	f043 0301 	orreq.w	r3, r3, #1
 8011594:	81a3      	strheq	r3, [r4, #12]
 8011596:	89a2      	ldrh	r2, [r4, #12]
 8011598:	f012 0308 	ands.w	r3, r2, #8
 801159c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80115a0:	d01c      	beq.n	80115dc <setvbuf+0x16c>
 80115a2:	07d3      	lsls	r3, r2, #31
 80115a4:	bf41      	itttt	mi
 80115a6:	2300      	movmi	r3, #0
 80115a8:	426d      	negmi	r5, r5
 80115aa:	60a3      	strmi	r3, [r4, #8]
 80115ac:	61a5      	strmi	r5, [r4, #24]
 80115ae:	bf58      	it	pl
 80115b0:	60a5      	strpl	r5, [r4, #8]
 80115b2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80115b4:	f015 0501 	ands.w	r5, r5, #1
 80115b8:	d115      	bne.n	80115e6 <setvbuf+0x176>
 80115ba:	f412 7f00 	tst.w	r2, #512	; 0x200
 80115be:	e7c8      	b.n	8011552 <setvbuf+0xe2>
 80115c0:	4648      	mov	r0, r9
 80115c2:	f7ff fd8b 	bl	80110dc <malloc>
 80115c6:	4606      	mov	r6, r0
 80115c8:	2800      	cmp	r0, #0
 80115ca:	d0ae      	beq.n	801152a <setvbuf+0xba>
 80115cc:	464d      	mov	r5, r9
 80115ce:	89a3      	ldrh	r3, [r4, #12]
 80115d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115d4:	81a3      	strh	r3, [r4, #12]
 80115d6:	e7d0      	b.n	801157a <setvbuf+0x10a>
 80115d8:	2500      	movs	r5, #0
 80115da:	e7a8      	b.n	801152e <setvbuf+0xbe>
 80115dc:	60a3      	str	r3, [r4, #8]
 80115de:	e7e8      	b.n	80115b2 <setvbuf+0x142>
 80115e0:	f04f 35ff 	mov.w	r5, #4294967295
 80115e4:	e7b9      	b.n	801155a <setvbuf+0xea>
 80115e6:	2500      	movs	r5, #0
 80115e8:	e7b7      	b.n	801155a <setvbuf+0xea>
 80115ea:	bf00      	nop
 80115ec:	200006d8 	.word	0x200006d8
 80115f0:	08013b4c 	.word	0x08013b4c
 80115f4:	08013b6c 	.word	0x08013b6c
 80115f8:	08013b2c 	.word	0x08013b2c

080115fc <siprintf>:
 80115fc:	b40e      	push	{r1, r2, r3}
 80115fe:	b500      	push	{lr}
 8011600:	b09c      	sub	sp, #112	; 0x70
 8011602:	ab1d      	add	r3, sp, #116	; 0x74
 8011604:	9002      	str	r0, [sp, #8]
 8011606:	9006      	str	r0, [sp, #24]
 8011608:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801160c:	4809      	ldr	r0, [pc, #36]	; (8011634 <siprintf+0x38>)
 801160e:	9107      	str	r1, [sp, #28]
 8011610:	9104      	str	r1, [sp, #16]
 8011612:	4909      	ldr	r1, [pc, #36]	; (8011638 <siprintf+0x3c>)
 8011614:	f853 2b04 	ldr.w	r2, [r3], #4
 8011618:	9105      	str	r1, [sp, #20]
 801161a:	6800      	ldr	r0, [r0, #0]
 801161c:	9301      	str	r3, [sp, #4]
 801161e:	a902      	add	r1, sp, #8
 8011620:	f000 fc2a 	bl	8011e78 <_svfiprintf_r>
 8011624:	9b02      	ldr	r3, [sp, #8]
 8011626:	2200      	movs	r2, #0
 8011628:	701a      	strb	r2, [r3, #0]
 801162a:	b01c      	add	sp, #112	; 0x70
 801162c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011630:	b003      	add	sp, #12
 8011632:	4770      	bx	lr
 8011634:	200006d8 	.word	0x200006d8
 8011638:	ffff0208 	.word	0xffff0208

0801163c <strcpy>:
 801163c:	4603      	mov	r3, r0
 801163e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011642:	f803 2b01 	strb.w	r2, [r3], #1
 8011646:	2a00      	cmp	r2, #0
 8011648:	d1f9      	bne.n	801163e <strcpy+0x2>
 801164a:	4770      	bx	lr

0801164c <strncpy>:
 801164c:	b510      	push	{r4, lr}
 801164e:	3901      	subs	r1, #1
 8011650:	4603      	mov	r3, r0
 8011652:	b132      	cbz	r2, 8011662 <strncpy+0x16>
 8011654:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011658:	f803 4b01 	strb.w	r4, [r3], #1
 801165c:	3a01      	subs	r2, #1
 801165e:	2c00      	cmp	r4, #0
 8011660:	d1f7      	bne.n	8011652 <strncpy+0x6>
 8011662:	441a      	add	r2, r3
 8011664:	2100      	movs	r1, #0
 8011666:	4293      	cmp	r3, r2
 8011668:	d100      	bne.n	801166c <strncpy+0x20>
 801166a:	bd10      	pop	{r4, pc}
 801166c:	f803 1b01 	strb.w	r1, [r3], #1
 8011670:	e7f9      	b.n	8011666 <strncpy+0x1a>
	...

08011674 <_strtol_l.constprop.0>:
 8011674:	2b01      	cmp	r3, #1
 8011676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801167a:	d001      	beq.n	8011680 <_strtol_l.constprop.0+0xc>
 801167c:	2b24      	cmp	r3, #36	; 0x24
 801167e:	d906      	bls.n	801168e <_strtol_l.constprop.0+0x1a>
 8011680:	f7ff fd02 	bl	8011088 <__errno>
 8011684:	2316      	movs	r3, #22
 8011686:	6003      	str	r3, [r0, #0]
 8011688:	2000      	movs	r0, #0
 801168a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801168e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011774 <_strtol_l.constprop.0+0x100>
 8011692:	460d      	mov	r5, r1
 8011694:	462e      	mov	r6, r5
 8011696:	f815 4b01 	ldrb.w	r4, [r5], #1
 801169a:	f814 700c 	ldrb.w	r7, [r4, ip]
 801169e:	f017 0708 	ands.w	r7, r7, #8
 80116a2:	d1f7      	bne.n	8011694 <_strtol_l.constprop.0+0x20>
 80116a4:	2c2d      	cmp	r4, #45	; 0x2d
 80116a6:	d132      	bne.n	801170e <_strtol_l.constprop.0+0x9a>
 80116a8:	782c      	ldrb	r4, [r5, #0]
 80116aa:	2701      	movs	r7, #1
 80116ac:	1cb5      	adds	r5, r6, #2
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d05b      	beq.n	801176a <_strtol_l.constprop.0+0xf6>
 80116b2:	2b10      	cmp	r3, #16
 80116b4:	d109      	bne.n	80116ca <_strtol_l.constprop.0+0x56>
 80116b6:	2c30      	cmp	r4, #48	; 0x30
 80116b8:	d107      	bne.n	80116ca <_strtol_l.constprop.0+0x56>
 80116ba:	782c      	ldrb	r4, [r5, #0]
 80116bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80116c0:	2c58      	cmp	r4, #88	; 0x58
 80116c2:	d14d      	bne.n	8011760 <_strtol_l.constprop.0+0xec>
 80116c4:	786c      	ldrb	r4, [r5, #1]
 80116c6:	2310      	movs	r3, #16
 80116c8:	3502      	adds	r5, #2
 80116ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80116ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80116d2:	f04f 0c00 	mov.w	ip, #0
 80116d6:	fbb8 f9f3 	udiv	r9, r8, r3
 80116da:	4666      	mov	r6, ip
 80116dc:	fb03 8a19 	mls	sl, r3, r9, r8
 80116e0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80116e4:	f1be 0f09 	cmp.w	lr, #9
 80116e8:	d816      	bhi.n	8011718 <_strtol_l.constprop.0+0xa4>
 80116ea:	4674      	mov	r4, lr
 80116ec:	42a3      	cmp	r3, r4
 80116ee:	dd24      	ble.n	801173a <_strtol_l.constprop.0+0xc6>
 80116f0:	f1bc 0f00 	cmp.w	ip, #0
 80116f4:	db1e      	blt.n	8011734 <_strtol_l.constprop.0+0xc0>
 80116f6:	45b1      	cmp	r9, r6
 80116f8:	d31c      	bcc.n	8011734 <_strtol_l.constprop.0+0xc0>
 80116fa:	d101      	bne.n	8011700 <_strtol_l.constprop.0+0x8c>
 80116fc:	45a2      	cmp	sl, r4
 80116fe:	db19      	blt.n	8011734 <_strtol_l.constprop.0+0xc0>
 8011700:	fb06 4603 	mla	r6, r6, r3, r4
 8011704:	f04f 0c01 	mov.w	ip, #1
 8011708:	f815 4b01 	ldrb.w	r4, [r5], #1
 801170c:	e7e8      	b.n	80116e0 <_strtol_l.constprop.0+0x6c>
 801170e:	2c2b      	cmp	r4, #43	; 0x2b
 8011710:	bf04      	itt	eq
 8011712:	782c      	ldrbeq	r4, [r5, #0]
 8011714:	1cb5      	addeq	r5, r6, #2
 8011716:	e7ca      	b.n	80116ae <_strtol_l.constprop.0+0x3a>
 8011718:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801171c:	f1be 0f19 	cmp.w	lr, #25
 8011720:	d801      	bhi.n	8011726 <_strtol_l.constprop.0+0xb2>
 8011722:	3c37      	subs	r4, #55	; 0x37
 8011724:	e7e2      	b.n	80116ec <_strtol_l.constprop.0+0x78>
 8011726:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801172a:	f1be 0f19 	cmp.w	lr, #25
 801172e:	d804      	bhi.n	801173a <_strtol_l.constprop.0+0xc6>
 8011730:	3c57      	subs	r4, #87	; 0x57
 8011732:	e7db      	b.n	80116ec <_strtol_l.constprop.0+0x78>
 8011734:	f04f 3cff 	mov.w	ip, #4294967295
 8011738:	e7e6      	b.n	8011708 <_strtol_l.constprop.0+0x94>
 801173a:	f1bc 0f00 	cmp.w	ip, #0
 801173e:	da05      	bge.n	801174c <_strtol_l.constprop.0+0xd8>
 8011740:	2322      	movs	r3, #34	; 0x22
 8011742:	6003      	str	r3, [r0, #0]
 8011744:	4646      	mov	r6, r8
 8011746:	b942      	cbnz	r2, 801175a <_strtol_l.constprop.0+0xe6>
 8011748:	4630      	mov	r0, r6
 801174a:	e79e      	b.n	801168a <_strtol_l.constprop.0+0x16>
 801174c:	b107      	cbz	r7, 8011750 <_strtol_l.constprop.0+0xdc>
 801174e:	4276      	negs	r6, r6
 8011750:	2a00      	cmp	r2, #0
 8011752:	d0f9      	beq.n	8011748 <_strtol_l.constprop.0+0xd4>
 8011754:	f1bc 0f00 	cmp.w	ip, #0
 8011758:	d000      	beq.n	801175c <_strtol_l.constprop.0+0xe8>
 801175a:	1e69      	subs	r1, r5, #1
 801175c:	6011      	str	r1, [r2, #0]
 801175e:	e7f3      	b.n	8011748 <_strtol_l.constprop.0+0xd4>
 8011760:	2430      	movs	r4, #48	; 0x30
 8011762:	2b00      	cmp	r3, #0
 8011764:	d1b1      	bne.n	80116ca <_strtol_l.constprop.0+0x56>
 8011766:	2308      	movs	r3, #8
 8011768:	e7af      	b.n	80116ca <_strtol_l.constprop.0+0x56>
 801176a:	2c30      	cmp	r4, #48	; 0x30
 801176c:	d0a5      	beq.n	80116ba <_strtol_l.constprop.0+0x46>
 801176e:	230a      	movs	r3, #10
 8011770:	e7ab      	b.n	80116ca <_strtol_l.constprop.0+0x56>
 8011772:	bf00      	nop
 8011774:	08013a25 	.word	0x08013a25

08011778 <strtol>:
 8011778:	4613      	mov	r3, r2
 801177a:	460a      	mov	r2, r1
 801177c:	4601      	mov	r1, r0
 801177e:	4802      	ldr	r0, [pc, #8]	; (8011788 <strtol+0x10>)
 8011780:	6800      	ldr	r0, [r0, #0]
 8011782:	f7ff bf77 	b.w	8011674 <_strtol_l.constprop.0>
 8011786:	bf00      	nop
 8011788:	200006d8 	.word	0x200006d8

0801178c <__swbuf_r>:
 801178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801178e:	460e      	mov	r6, r1
 8011790:	4614      	mov	r4, r2
 8011792:	4605      	mov	r5, r0
 8011794:	b118      	cbz	r0, 801179e <__swbuf_r+0x12>
 8011796:	6983      	ldr	r3, [r0, #24]
 8011798:	b90b      	cbnz	r3, 801179e <__swbuf_r+0x12>
 801179a:	f000 f9d1 	bl	8011b40 <__sinit>
 801179e:	4b21      	ldr	r3, [pc, #132]	; (8011824 <__swbuf_r+0x98>)
 80117a0:	429c      	cmp	r4, r3
 80117a2:	d12b      	bne.n	80117fc <__swbuf_r+0x70>
 80117a4:	686c      	ldr	r4, [r5, #4]
 80117a6:	69a3      	ldr	r3, [r4, #24]
 80117a8:	60a3      	str	r3, [r4, #8]
 80117aa:	89a3      	ldrh	r3, [r4, #12]
 80117ac:	071a      	lsls	r2, r3, #28
 80117ae:	d52f      	bpl.n	8011810 <__swbuf_r+0x84>
 80117b0:	6923      	ldr	r3, [r4, #16]
 80117b2:	b36b      	cbz	r3, 8011810 <__swbuf_r+0x84>
 80117b4:	6923      	ldr	r3, [r4, #16]
 80117b6:	6820      	ldr	r0, [r4, #0]
 80117b8:	1ac0      	subs	r0, r0, r3
 80117ba:	6963      	ldr	r3, [r4, #20]
 80117bc:	b2f6      	uxtb	r6, r6
 80117be:	4283      	cmp	r3, r0
 80117c0:	4637      	mov	r7, r6
 80117c2:	dc04      	bgt.n	80117ce <__swbuf_r+0x42>
 80117c4:	4621      	mov	r1, r4
 80117c6:	4628      	mov	r0, r5
 80117c8:	f000 f926 	bl	8011a18 <_fflush_r>
 80117cc:	bb30      	cbnz	r0, 801181c <__swbuf_r+0x90>
 80117ce:	68a3      	ldr	r3, [r4, #8]
 80117d0:	3b01      	subs	r3, #1
 80117d2:	60a3      	str	r3, [r4, #8]
 80117d4:	6823      	ldr	r3, [r4, #0]
 80117d6:	1c5a      	adds	r2, r3, #1
 80117d8:	6022      	str	r2, [r4, #0]
 80117da:	701e      	strb	r6, [r3, #0]
 80117dc:	6963      	ldr	r3, [r4, #20]
 80117de:	3001      	adds	r0, #1
 80117e0:	4283      	cmp	r3, r0
 80117e2:	d004      	beq.n	80117ee <__swbuf_r+0x62>
 80117e4:	89a3      	ldrh	r3, [r4, #12]
 80117e6:	07db      	lsls	r3, r3, #31
 80117e8:	d506      	bpl.n	80117f8 <__swbuf_r+0x6c>
 80117ea:	2e0a      	cmp	r6, #10
 80117ec:	d104      	bne.n	80117f8 <__swbuf_r+0x6c>
 80117ee:	4621      	mov	r1, r4
 80117f0:	4628      	mov	r0, r5
 80117f2:	f000 f911 	bl	8011a18 <_fflush_r>
 80117f6:	b988      	cbnz	r0, 801181c <__swbuf_r+0x90>
 80117f8:	4638      	mov	r0, r7
 80117fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117fc:	4b0a      	ldr	r3, [pc, #40]	; (8011828 <__swbuf_r+0x9c>)
 80117fe:	429c      	cmp	r4, r3
 8011800:	d101      	bne.n	8011806 <__swbuf_r+0x7a>
 8011802:	68ac      	ldr	r4, [r5, #8]
 8011804:	e7cf      	b.n	80117a6 <__swbuf_r+0x1a>
 8011806:	4b09      	ldr	r3, [pc, #36]	; (801182c <__swbuf_r+0xa0>)
 8011808:	429c      	cmp	r4, r3
 801180a:	bf08      	it	eq
 801180c:	68ec      	ldreq	r4, [r5, #12]
 801180e:	e7ca      	b.n	80117a6 <__swbuf_r+0x1a>
 8011810:	4621      	mov	r1, r4
 8011812:	4628      	mov	r0, r5
 8011814:	f000 f80c 	bl	8011830 <__swsetup_r>
 8011818:	2800      	cmp	r0, #0
 801181a:	d0cb      	beq.n	80117b4 <__swbuf_r+0x28>
 801181c:	f04f 37ff 	mov.w	r7, #4294967295
 8011820:	e7ea      	b.n	80117f8 <__swbuf_r+0x6c>
 8011822:	bf00      	nop
 8011824:	08013b4c 	.word	0x08013b4c
 8011828:	08013b6c 	.word	0x08013b6c
 801182c:	08013b2c 	.word	0x08013b2c

08011830 <__swsetup_r>:
 8011830:	4b32      	ldr	r3, [pc, #200]	; (80118fc <__swsetup_r+0xcc>)
 8011832:	b570      	push	{r4, r5, r6, lr}
 8011834:	681d      	ldr	r5, [r3, #0]
 8011836:	4606      	mov	r6, r0
 8011838:	460c      	mov	r4, r1
 801183a:	b125      	cbz	r5, 8011846 <__swsetup_r+0x16>
 801183c:	69ab      	ldr	r3, [r5, #24]
 801183e:	b913      	cbnz	r3, 8011846 <__swsetup_r+0x16>
 8011840:	4628      	mov	r0, r5
 8011842:	f000 f97d 	bl	8011b40 <__sinit>
 8011846:	4b2e      	ldr	r3, [pc, #184]	; (8011900 <__swsetup_r+0xd0>)
 8011848:	429c      	cmp	r4, r3
 801184a:	d10f      	bne.n	801186c <__swsetup_r+0x3c>
 801184c:	686c      	ldr	r4, [r5, #4]
 801184e:	89a3      	ldrh	r3, [r4, #12]
 8011850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011854:	0719      	lsls	r1, r3, #28
 8011856:	d42c      	bmi.n	80118b2 <__swsetup_r+0x82>
 8011858:	06dd      	lsls	r5, r3, #27
 801185a:	d411      	bmi.n	8011880 <__swsetup_r+0x50>
 801185c:	2309      	movs	r3, #9
 801185e:	6033      	str	r3, [r6, #0]
 8011860:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011864:	81a3      	strh	r3, [r4, #12]
 8011866:	f04f 30ff 	mov.w	r0, #4294967295
 801186a:	e03e      	b.n	80118ea <__swsetup_r+0xba>
 801186c:	4b25      	ldr	r3, [pc, #148]	; (8011904 <__swsetup_r+0xd4>)
 801186e:	429c      	cmp	r4, r3
 8011870:	d101      	bne.n	8011876 <__swsetup_r+0x46>
 8011872:	68ac      	ldr	r4, [r5, #8]
 8011874:	e7eb      	b.n	801184e <__swsetup_r+0x1e>
 8011876:	4b24      	ldr	r3, [pc, #144]	; (8011908 <__swsetup_r+0xd8>)
 8011878:	429c      	cmp	r4, r3
 801187a:	bf08      	it	eq
 801187c:	68ec      	ldreq	r4, [r5, #12]
 801187e:	e7e6      	b.n	801184e <__swsetup_r+0x1e>
 8011880:	0758      	lsls	r0, r3, #29
 8011882:	d512      	bpl.n	80118aa <__swsetup_r+0x7a>
 8011884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011886:	b141      	cbz	r1, 801189a <__swsetup_r+0x6a>
 8011888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801188c:	4299      	cmp	r1, r3
 801188e:	d002      	beq.n	8011896 <__swsetup_r+0x66>
 8011890:	4630      	mov	r0, r6
 8011892:	f7ff fc5f 	bl	8011154 <_free_r>
 8011896:	2300      	movs	r3, #0
 8011898:	6363      	str	r3, [r4, #52]	; 0x34
 801189a:	89a3      	ldrh	r3, [r4, #12]
 801189c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80118a0:	81a3      	strh	r3, [r4, #12]
 80118a2:	2300      	movs	r3, #0
 80118a4:	6063      	str	r3, [r4, #4]
 80118a6:	6923      	ldr	r3, [r4, #16]
 80118a8:	6023      	str	r3, [r4, #0]
 80118aa:	89a3      	ldrh	r3, [r4, #12]
 80118ac:	f043 0308 	orr.w	r3, r3, #8
 80118b0:	81a3      	strh	r3, [r4, #12]
 80118b2:	6923      	ldr	r3, [r4, #16]
 80118b4:	b94b      	cbnz	r3, 80118ca <__swsetup_r+0x9a>
 80118b6:	89a3      	ldrh	r3, [r4, #12]
 80118b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80118bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80118c0:	d003      	beq.n	80118ca <__swsetup_r+0x9a>
 80118c2:	4621      	mov	r1, r4
 80118c4:	4630      	mov	r0, r6
 80118c6:	f000 fa01 	bl	8011ccc <__smakebuf_r>
 80118ca:	89a0      	ldrh	r0, [r4, #12]
 80118cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80118d0:	f010 0301 	ands.w	r3, r0, #1
 80118d4:	d00a      	beq.n	80118ec <__swsetup_r+0xbc>
 80118d6:	2300      	movs	r3, #0
 80118d8:	60a3      	str	r3, [r4, #8]
 80118da:	6963      	ldr	r3, [r4, #20]
 80118dc:	425b      	negs	r3, r3
 80118de:	61a3      	str	r3, [r4, #24]
 80118e0:	6923      	ldr	r3, [r4, #16]
 80118e2:	b943      	cbnz	r3, 80118f6 <__swsetup_r+0xc6>
 80118e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80118e8:	d1ba      	bne.n	8011860 <__swsetup_r+0x30>
 80118ea:	bd70      	pop	{r4, r5, r6, pc}
 80118ec:	0781      	lsls	r1, r0, #30
 80118ee:	bf58      	it	pl
 80118f0:	6963      	ldrpl	r3, [r4, #20]
 80118f2:	60a3      	str	r3, [r4, #8]
 80118f4:	e7f4      	b.n	80118e0 <__swsetup_r+0xb0>
 80118f6:	2000      	movs	r0, #0
 80118f8:	e7f7      	b.n	80118ea <__swsetup_r+0xba>
 80118fa:	bf00      	nop
 80118fc:	200006d8 	.word	0x200006d8
 8011900:	08013b4c 	.word	0x08013b4c
 8011904:	08013b6c 	.word	0x08013b6c
 8011908:	08013b2c 	.word	0x08013b2c

0801190c <__sflush_r>:
 801190c:	898a      	ldrh	r2, [r1, #12]
 801190e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011912:	4605      	mov	r5, r0
 8011914:	0710      	lsls	r0, r2, #28
 8011916:	460c      	mov	r4, r1
 8011918:	d458      	bmi.n	80119cc <__sflush_r+0xc0>
 801191a:	684b      	ldr	r3, [r1, #4]
 801191c:	2b00      	cmp	r3, #0
 801191e:	dc05      	bgt.n	801192c <__sflush_r+0x20>
 8011920:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011922:	2b00      	cmp	r3, #0
 8011924:	dc02      	bgt.n	801192c <__sflush_r+0x20>
 8011926:	2000      	movs	r0, #0
 8011928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801192c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801192e:	2e00      	cmp	r6, #0
 8011930:	d0f9      	beq.n	8011926 <__sflush_r+0x1a>
 8011932:	2300      	movs	r3, #0
 8011934:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011938:	682f      	ldr	r7, [r5, #0]
 801193a:	602b      	str	r3, [r5, #0]
 801193c:	d032      	beq.n	80119a4 <__sflush_r+0x98>
 801193e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011940:	89a3      	ldrh	r3, [r4, #12]
 8011942:	075a      	lsls	r2, r3, #29
 8011944:	d505      	bpl.n	8011952 <__sflush_r+0x46>
 8011946:	6863      	ldr	r3, [r4, #4]
 8011948:	1ac0      	subs	r0, r0, r3
 801194a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801194c:	b10b      	cbz	r3, 8011952 <__sflush_r+0x46>
 801194e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011950:	1ac0      	subs	r0, r0, r3
 8011952:	2300      	movs	r3, #0
 8011954:	4602      	mov	r2, r0
 8011956:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011958:	6a21      	ldr	r1, [r4, #32]
 801195a:	4628      	mov	r0, r5
 801195c:	47b0      	blx	r6
 801195e:	1c43      	adds	r3, r0, #1
 8011960:	89a3      	ldrh	r3, [r4, #12]
 8011962:	d106      	bne.n	8011972 <__sflush_r+0x66>
 8011964:	6829      	ldr	r1, [r5, #0]
 8011966:	291d      	cmp	r1, #29
 8011968:	d82c      	bhi.n	80119c4 <__sflush_r+0xb8>
 801196a:	4a2a      	ldr	r2, [pc, #168]	; (8011a14 <__sflush_r+0x108>)
 801196c:	40ca      	lsrs	r2, r1
 801196e:	07d6      	lsls	r6, r2, #31
 8011970:	d528      	bpl.n	80119c4 <__sflush_r+0xb8>
 8011972:	2200      	movs	r2, #0
 8011974:	6062      	str	r2, [r4, #4]
 8011976:	04d9      	lsls	r1, r3, #19
 8011978:	6922      	ldr	r2, [r4, #16]
 801197a:	6022      	str	r2, [r4, #0]
 801197c:	d504      	bpl.n	8011988 <__sflush_r+0x7c>
 801197e:	1c42      	adds	r2, r0, #1
 8011980:	d101      	bne.n	8011986 <__sflush_r+0x7a>
 8011982:	682b      	ldr	r3, [r5, #0]
 8011984:	b903      	cbnz	r3, 8011988 <__sflush_r+0x7c>
 8011986:	6560      	str	r0, [r4, #84]	; 0x54
 8011988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801198a:	602f      	str	r7, [r5, #0]
 801198c:	2900      	cmp	r1, #0
 801198e:	d0ca      	beq.n	8011926 <__sflush_r+0x1a>
 8011990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011994:	4299      	cmp	r1, r3
 8011996:	d002      	beq.n	801199e <__sflush_r+0x92>
 8011998:	4628      	mov	r0, r5
 801199a:	f7ff fbdb 	bl	8011154 <_free_r>
 801199e:	2000      	movs	r0, #0
 80119a0:	6360      	str	r0, [r4, #52]	; 0x34
 80119a2:	e7c1      	b.n	8011928 <__sflush_r+0x1c>
 80119a4:	6a21      	ldr	r1, [r4, #32]
 80119a6:	2301      	movs	r3, #1
 80119a8:	4628      	mov	r0, r5
 80119aa:	47b0      	blx	r6
 80119ac:	1c41      	adds	r1, r0, #1
 80119ae:	d1c7      	bne.n	8011940 <__sflush_r+0x34>
 80119b0:	682b      	ldr	r3, [r5, #0]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d0c4      	beq.n	8011940 <__sflush_r+0x34>
 80119b6:	2b1d      	cmp	r3, #29
 80119b8:	d001      	beq.n	80119be <__sflush_r+0xb2>
 80119ba:	2b16      	cmp	r3, #22
 80119bc:	d101      	bne.n	80119c2 <__sflush_r+0xb6>
 80119be:	602f      	str	r7, [r5, #0]
 80119c0:	e7b1      	b.n	8011926 <__sflush_r+0x1a>
 80119c2:	89a3      	ldrh	r3, [r4, #12]
 80119c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119c8:	81a3      	strh	r3, [r4, #12]
 80119ca:	e7ad      	b.n	8011928 <__sflush_r+0x1c>
 80119cc:	690f      	ldr	r7, [r1, #16]
 80119ce:	2f00      	cmp	r7, #0
 80119d0:	d0a9      	beq.n	8011926 <__sflush_r+0x1a>
 80119d2:	0793      	lsls	r3, r2, #30
 80119d4:	680e      	ldr	r6, [r1, #0]
 80119d6:	bf08      	it	eq
 80119d8:	694b      	ldreq	r3, [r1, #20]
 80119da:	600f      	str	r7, [r1, #0]
 80119dc:	bf18      	it	ne
 80119de:	2300      	movne	r3, #0
 80119e0:	eba6 0807 	sub.w	r8, r6, r7
 80119e4:	608b      	str	r3, [r1, #8]
 80119e6:	f1b8 0f00 	cmp.w	r8, #0
 80119ea:	dd9c      	ble.n	8011926 <__sflush_r+0x1a>
 80119ec:	6a21      	ldr	r1, [r4, #32]
 80119ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80119f0:	4643      	mov	r3, r8
 80119f2:	463a      	mov	r2, r7
 80119f4:	4628      	mov	r0, r5
 80119f6:	47b0      	blx	r6
 80119f8:	2800      	cmp	r0, #0
 80119fa:	dc06      	bgt.n	8011a0a <__sflush_r+0xfe>
 80119fc:	89a3      	ldrh	r3, [r4, #12]
 80119fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a02:	81a3      	strh	r3, [r4, #12]
 8011a04:	f04f 30ff 	mov.w	r0, #4294967295
 8011a08:	e78e      	b.n	8011928 <__sflush_r+0x1c>
 8011a0a:	4407      	add	r7, r0
 8011a0c:	eba8 0800 	sub.w	r8, r8, r0
 8011a10:	e7e9      	b.n	80119e6 <__sflush_r+0xda>
 8011a12:	bf00      	nop
 8011a14:	20400001 	.word	0x20400001

08011a18 <_fflush_r>:
 8011a18:	b538      	push	{r3, r4, r5, lr}
 8011a1a:	690b      	ldr	r3, [r1, #16]
 8011a1c:	4605      	mov	r5, r0
 8011a1e:	460c      	mov	r4, r1
 8011a20:	b913      	cbnz	r3, 8011a28 <_fflush_r+0x10>
 8011a22:	2500      	movs	r5, #0
 8011a24:	4628      	mov	r0, r5
 8011a26:	bd38      	pop	{r3, r4, r5, pc}
 8011a28:	b118      	cbz	r0, 8011a32 <_fflush_r+0x1a>
 8011a2a:	6983      	ldr	r3, [r0, #24]
 8011a2c:	b90b      	cbnz	r3, 8011a32 <_fflush_r+0x1a>
 8011a2e:	f000 f887 	bl	8011b40 <__sinit>
 8011a32:	4b14      	ldr	r3, [pc, #80]	; (8011a84 <_fflush_r+0x6c>)
 8011a34:	429c      	cmp	r4, r3
 8011a36:	d11b      	bne.n	8011a70 <_fflush_r+0x58>
 8011a38:	686c      	ldr	r4, [r5, #4]
 8011a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d0ef      	beq.n	8011a22 <_fflush_r+0xa>
 8011a42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011a44:	07d0      	lsls	r0, r2, #31
 8011a46:	d404      	bmi.n	8011a52 <_fflush_r+0x3a>
 8011a48:	0599      	lsls	r1, r3, #22
 8011a4a:	d402      	bmi.n	8011a52 <_fflush_r+0x3a>
 8011a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a4e:	f000 f915 	bl	8011c7c <__retarget_lock_acquire_recursive>
 8011a52:	4628      	mov	r0, r5
 8011a54:	4621      	mov	r1, r4
 8011a56:	f7ff ff59 	bl	801190c <__sflush_r>
 8011a5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011a5c:	07da      	lsls	r2, r3, #31
 8011a5e:	4605      	mov	r5, r0
 8011a60:	d4e0      	bmi.n	8011a24 <_fflush_r+0xc>
 8011a62:	89a3      	ldrh	r3, [r4, #12]
 8011a64:	059b      	lsls	r3, r3, #22
 8011a66:	d4dd      	bmi.n	8011a24 <_fflush_r+0xc>
 8011a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a6a:	f000 f908 	bl	8011c7e <__retarget_lock_release_recursive>
 8011a6e:	e7d9      	b.n	8011a24 <_fflush_r+0xc>
 8011a70:	4b05      	ldr	r3, [pc, #20]	; (8011a88 <_fflush_r+0x70>)
 8011a72:	429c      	cmp	r4, r3
 8011a74:	d101      	bne.n	8011a7a <_fflush_r+0x62>
 8011a76:	68ac      	ldr	r4, [r5, #8]
 8011a78:	e7df      	b.n	8011a3a <_fflush_r+0x22>
 8011a7a:	4b04      	ldr	r3, [pc, #16]	; (8011a8c <_fflush_r+0x74>)
 8011a7c:	429c      	cmp	r4, r3
 8011a7e:	bf08      	it	eq
 8011a80:	68ec      	ldreq	r4, [r5, #12]
 8011a82:	e7da      	b.n	8011a3a <_fflush_r+0x22>
 8011a84:	08013b4c 	.word	0x08013b4c
 8011a88:	08013b6c 	.word	0x08013b6c
 8011a8c:	08013b2c 	.word	0x08013b2c

08011a90 <std>:
 8011a90:	2300      	movs	r3, #0
 8011a92:	b510      	push	{r4, lr}
 8011a94:	4604      	mov	r4, r0
 8011a96:	e9c0 3300 	strd	r3, r3, [r0]
 8011a9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011a9e:	6083      	str	r3, [r0, #8]
 8011aa0:	8181      	strh	r1, [r0, #12]
 8011aa2:	6643      	str	r3, [r0, #100]	; 0x64
 8011aa4:	81c2      	strh	r2, [r0, #14]
 8011aa6:	6183      	str	r3, [r0, #24]
 8011aa8:	4619      	mov	r1, r3
 8011aaa:	2208      	movs	r2, #8
 8011aac:	305c      	adds	r0, #92	; 0x5c
 8011aae:	f7ff fb33 	bl	8011118 <memset>
 8011ab2:	4b05      	ldr	r3, [pc, #20]	; (8011ac8 <std+0x38>)
 8011ab4:	6263      	str	r3, [r4, #36]	; 0x24
 8011ab6:	4b05      	ldr	r3, [pc, #20]	; (8011acc <std+0x3c>)
 8011ab8:	62a3      	str	r3, [r4, #40]	; 0x28
 8011aba:	4b05      	ldr	r3, [pc, #20]	; (8011ad0 <std+0x40>)
 8011abc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011abe:	4b05      	ldr	r3, [pc, #20]	; (8011ad4 <std+0x44>)
 8011ac0:	6224      	str	r4, [r4, #32]
 8011ac2:	6323      	str	r3, [r4, #48]	; 0x30
 8011ac4:	bd10      	pop	{r4, pc}
 8011ac6:	bf00      	nop
 8011ac8:	08012655 	.word	0x08012655
 8011acc:	08012677 	.word	0x08012677
 8011ad0:	080126af 	.word	0x080126af
 8011ad4:	080126d3 	.word	0x080126d3

08011ad8 <_cleanup_r>:
 8011ad8:	4901      	ldr	r1, [pc, #4]	; (8011ae0 <_cleanup_r+0x8>)
 8011ada:	f000 b8af 	b.w	8011c3c <_fwalk_reent>
 8011ade:	bf00      	nop
 8011ae0:	08011a19 	.word	0x08011a19

08011ae4 <__sfmoreglue>:
 8011ae4:	b570      	push	{r4, r5, r6, lr}
 8011ae6:	2268      	movs	r2, #104	; 0x68
 8011ae8:	1e4d      	subs	r5, r1, #1
 8011aea:	4355      	muls	r5, r2
 8011aec:	460e      	mov	r6, r1
 8011aee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011af2:	f7ff fb9b 	bl	801122c <_malloc_r>
 8011af6:	4604      	mov	r4, r0
 8011af8:	b140      	cbz	r0, 8011b0c <__sfmoreglue+0x28>
 8011afa:	2100      	movs	r1, #0
 8011afc:	e9c0 1600 	strd	r1, r6, [r0]
 8011b00:	300c      	adds	r0, #12
 8011b02:	60a0      	str	r0, [r4, #8]
 8011b04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011b08:	f7ff fb06 	bl	8011118 <memset>
 8011b0c:	4620      	mov	r0, r4
 8011b0e:	bd70      	pop	{r4, r5, r6, pc}

08011b10 <__sfp_lock_acquire>:
 8011b10:	4801      	ldr	r0, [pc, #4]	; (8011b18 <__sfp_lock_acquire+0x8>)
 8011b12:	f000 b8b3 	b.w	8011c7c <__retarget_lock_acquire_recursive>
 8011b16:	bf00      	nop
 8011b18:	2000a635 	.word	0x2000a635

08011b1c <__sfp_lock_release>:
 8011b1c:	4801      	ldr	r0, [pc, #4]	; (8011b24 <__sfp_lock_release+0x8>)
 8011b1e:	f000 b8ae 	b.w	8011c7e <__retarget_lock_release_recursive>
 8011b22:	bf00      	nop
 8011b24:	2000a635 	.word	0x2000a635

08011b28 <__sinit_lock_acquire>:
 8011b28:	4801      	ldr	r0, [pc, #4]	; (8011b30 <__sinit_lock_acquire+0x8>)
 8011b2a:	f000 b8a7 	b.w	8011c7c <__retarget_lock_acquire_recursive>
 8011b2e:	bf00      	nop
 8011b30:	2000a636 	.word	0x2000a636

08011b34 <__sinit_lock_release>:
 8011b34:	4801      	ldr	r0, [pc, #4]	; (8011b3c <__sinit_lock_release+0x8>)
 8011b36:	f000 b8a2 	b.w	8011c7e <__retarget_lock_release_recursive>
 8011b3a:	bf00      	nop
 8011b3c:	2000a636 	.word	0x2000a636

08011b40 <__sinit>:
 8011b40:	b510      	push	{r4, lr}
 8011b42:	4604      	mov	r4, r0
 8011b44:	f7ff fff0 	bl	8011b28 <__sinit_lock_acquire>
 8011b48:	69a3      	ldr	r3, [r4, #24]
 8011b4a:	b11b      	cbz	r3, 8011b54 <__sinit+0x14>
 8011b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b50:	f7ff bff0 	b.w	8011b34 <__sinit_lock_release>
 8011b54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011b58:	6523      	str	r3, [r4, #80]	; 0x50
 8011b5a:	4b13      	ldr	r3, [pc, #76]	; (8011ba8 <__sinit+0x68>)
 8011b5c:	4a13      	ldr	r2, [pc, #76]	; (8011bac <__sinit+0x6c>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	62a2      	str	r2, [r4, #40]	; 0x28
 8011b62:	42a3      	cmp	r3, r4
 8011b64:	bf04      	itt	eq
 8011b66:	2301      	moveq	r3, #1
 8011b68:	61a3      	streq	r3, [r4, #24]
 8011b6a:	4620      	mov	r0, r4
 8011b6c:	f000 f820 	bl	8011bb0 <__sfp>
 8011b70:	6060      	str	r0, [r4, #4]
 8011b72:	4620      	mov	r0, r4
 8011b74:	f000 f81c 	bl	8011bb0 <__sfp>
 8011b78:	60a0      	str	r0, [r4, #8]
 8011b7a:	4620      	mov	r0, r4
 8011b7c:	f000 f818 	bl	8011bb0 <__sfp>
 8011b80:	2200      	movs	r2, #0
 8011b82:	60e0      	str	r0, [r4, #12]
 8011b84:	2104      	movs	r1, #4
 8011b86:	6860      	ldr	r0, [r4, #4]
 8011b88:	f7ff ff82 	bl	8011a90 <std>
 8011b8c:	68a0      	ldr	r0, [r4, #8]
 8011b8e:	2201      	movs	r2, #1
 8011b90:	2109      	movs	r1, #9
 8011b92:	f7ff ff7d 	bl	8011a90 <std>
 8011b96:	68e0      	ldr	r0, [r4, #12]
 8011b98:	2202      	movs	r2, #2
 8011b9a:	2112      	movs	r1, #18
 8011b9c:	f7ff ff78 	bl	8011a90 <std>
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	61a3      	str	r3, [r4, #24]
 8011ba4:	e7d2      	b.n	8011b4c <__sinit+0xc>
 8011ba6:	bf00      	nop
 8011ba8:	08013b28 	.word	0x08013b28
 8011bac:	08011ad9 	.word	0x08011ad9

08011bb0 <__sfp>:
 8011bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bb2:	4607      	mov	r7, r0
 8011bb4:	f7ff ffac 	bl	8011b10 <__sfp_lock_acquire>
 8011bb8:	4b1e      	ldr	r3, [pc, #120]	; (8011c34 <__sfp+0x84>)
 8011bba:	681e      	ldr	r6, [r3, #0]
 8011bbc:	69b3      	ldr	r3, [r6, #24]
 8011bbe:	b913      	cbnz	r3, 8011bc6 <__sfp+0x16>
 8011bc0:	4630      	mov	r0, r6
 8011bc2:	f7ff ffbd 	bl	8011b40 <__sinit>
 8011bc6:	3648      	adds	r6, #72	; 0x48
 8011bc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011bcc:	3b01      	subs	r3, #1
 8011bce:	d503      	bpl.n	8011bd8 <__sfp+0x28>
 8011bd0:	6833      	ldr	r3, [r6, #0]
 8011bd2:	b30b      	cbz	r3, 8011c18 <__sfp+0x68>
 8011bd4:	6836      	ldr	r6, [r6, #0]
 8011bd6:	e7f7      	b.n	8011bc8 <__sfp+0x18>
 8011bd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011bdc:	b9d5      	cbnz	r5, 8011c14 <__sfp+0x64>
 8011bde:	4b16      	ldr	r3, [pc, #88]	; (8011c38 <__sfp+0x88>)
 8011be0:	60e3      	str	r3, [r4, #12]
 8011be2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011be6:	6665      	str	r5, [r4, #100]	; 0x64
 8011be8:	f000 f847 	bl	8011c7a <__retarget_lock_init_recursive>
 8011bec:	f7ff ff96 	bl	8011b1c <__sfp_lock_release>
 8011bf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011bf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011bf8:	6025      	str	r5, [r4, #0]
 8011bfa:	61a5      	str	r5, [r4, #24]
 8011bfc:	2208      	movs	r2, #8
 8011bfe:	4629      	mov	r1, r5
 8011c00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011c04:	f7ff fa88 	bl	8011118 <memset>
 8011c08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011c0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011c10:	4620      	mov	r0, r4
 8011c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c14:	3468      	adds	r4, #104	; 0x68
 8011c16:	e7d9      	b.n	8011bcc <__sfp+0x1c>
 8011c18:	2104      	movs	r1, #4
 8011c1a:	4638      	mov	r0, r7
 8011c1c:	f7ff ff62 	bl	8011ae4 <__sfmoreglue>
 8011c20:	4604      	mov	r4, r0
 8011c22:	6030      	str	r0, [r6, #0]
 8011c24:	2800      	cmp	r0, #0
 8011c26:	d1d5      	bne.n	8011bd4 <__sfp+0x24>
 8011c28:	f7ff ff78 	bl	8011b1c <__sfp_lock_release>
 8011c2c:	230c      	movs	r3, #12
 8011c2e:	603b      	str	r3, [r7, #0]
 8011c30:	e7ee      	b.n	8011c10 <__sfp+0x60>
 8011c32:	bf00      	nop
 8011c34:	08013b28 	.word	0x08013b28
 8011c38:	ffff0001 	.word	0xffff0001

08011c3c <_fwalk_reent>:
 8011c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c40:	4606      	mov	r6, r0
 8011c42:	4688      	mov	r8, r1
 8011c44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011c48:	2700      	movs	r7, #0
 8011c4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011c4e:	f1b9 0901 	subs.w	r9, r9, #1
 8011c52:	d505      	bpl.n	8011c60 <_fwalk_reent+0x24>
 8011c54:	6824      	ldr	r4, [r4, #0]
 8011c56:	2c00      	cmp	r4, #0
 8011c58:	d1f7      	bne.n	8011c4a <_fwalk_reent+0xe>
 8011c5a:	4638      	mov	r0, r7
 8011c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c60:	89ab      	ldrh	r3, [r5, #12]
 8011c62:	2b01      	cmp	r3, #1
 8011c64:	d907      	bls.n	8011c76 <_fwalk_reent+0x3a>
 8011c66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c6a:	3301      	adds	r3, #1
 8011c6c:	d003      	beq.n	8011c76 <_fwalk_reent+0x3a>
 8011c6e:	4629      	mov	r1, r5
 8011c70:	4630      	mov	r0, r6
 8011c72:	47c0      	blx	r8
 8011c74:	4307      	orrs	r7, r0
 8011c76:	3568      	adds	r5, #104	; 0x68
 8011c78:	e7e9      	b.n	8011c4e <_fwalk_reent+0x12>

08011c7a <__retarget_lock_init_recursive>:
 8011c7a:	4770      	bx	lr

08011c7c <__retarget_lock_acquire_recursive>:
 8011c7c:	4770      	bx	lr

08011c7e <__retarget_lock_release_recursive>:
 8011c7e:	4770      	bx	lr

08011c80 <__swhatbuf_r>:
 8011c80:	b570      	push	{r4, r5, r6, lr}
 8011c82:	460e      	mov	r6, r1
 8011c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c88:	2900      	cmp	r1, #0
 8011c8a:	b096      	sub	sp, #88	; 0x58
 8011c8c:	4614      	mov	r4, r2
 8011c8e:	461d      	mov	r5, r3
 8011c90:	da08      	bge.n	8011ca4 <__swhatbuf_r+0x24>
 8011c92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011c96:	2200      	movs	r2, #0
 8011c98:	602a      	str	r2, [r5, #0]
 8011c9a:	061a      	lsls	r2, r3, #24
 8011c9c:	d410      	bmi.n	8011cc0 <__swhatbuf_r+0x40>
 8011c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ca2:	e00e      	b.n	8011cc2 <__swhatbuf_r+0x42>
 8011ca4:	466a      	mov	r2, sp
 8011ca6:	f000 fd3b 	bl	8012720 <_fstat_r>
 8011caa:	2800      	cmp	r0, #0
 8011cac:	dbf1      	blt.n	8011c92 <__swhatbuf_r+0x12>
 8011cae:	9a01      	ldr	r2, [sp, #4]
 8011cb0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011cb4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011cb8:	425a      	negs	r2, r3
 8011cba:	415a      	adcs	r2, r3
 8011cbc:	602a      	str	r2, [r5, #0]
 8011cbe:	e7ee      	b.n	8011c9e <__swhatbuf_r+0x1e>
 8011cc0:	2340      	movs	r3, #64	; 0x40
 8011cc2:	2000      	movs	r0, #0
 8011cc4:	6023      	str	r3, [r4, #0]
 8011cc6:	b016      	add	sp, #88	; 0x58
 8011cc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08011ccc <__smakebuf_r>:
 8011ccc:	898b      	ldrh	r3, [r1, #12]
 8011cce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011cd0:	079d      	lsls	r5, r3, #30
 8011cd2:	4606      	mov	r6, r0
 8011cd4:	460c      	mov	r4, r1
 8011cd6:	d507      	bpl.n	8011ce8 <__smakebuf_r+0x1c>
 8011cd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011cdc:	6023      	str	r3, [r4, #0]
 8011cde:	6123      	str	r3, [r4, #16]
 8011ce0:	2301      	movs	r3, #1
 8011ce2:	6163      	str	r3, [r4, #20]
 8011ce4:	b002      	add	sp, #8
 8011ce6:	bd70      	pop	{r4, r5, r6, pc}
 8011ce8:	ab01      	add	r3, sp, #4
 8011cea:	466a      	mov	r2, sp
 8011cec:	f7ff ffc8 	bl	8011c80 <__swhatbuf_r>
 8011cf0:	9900      	ldr	r1, [sp, #0]
 8011cf2:	4605      	mov	r5, r0
 8011cf4:	4630      	mov	r0, r6
 8011cf6:	f7ff fa99 	bl	801122c <_malloc_r>
 8011cfa:	b948      	cbnz	r0, 8011d10 <__smakebuf_r+0x44>
 8011cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d00:	059a      	lsls	r2, r3, #22
 8011d02:	d4ef      	bmi.n	8011ce4 <__smakebuf_r+0x18>
 8011d04:	f023 0303 	bic.w	r3, r3, #3
 8011d08:	f043 0302 	orr.w	r3, r3, #2
 8011d0c:	81a3      	strh	r3, [r4, #12]
 8011d0e:	e7e3      	b.n	8011cd8 <__smakebuf_r+0xc>
 8011d10:	4b0d      	ldr	r3, [pc, #52]	; (8011d48 <__smakebuf_r+0x7c>)
 8011d12:	62b3      	str	r3, [r6, #40]	; 0x28
 8011d14:	89a3      	ldrh	r3, [r4, #12]
 8011d16:	6020      	str	r0, [r4, #0]
 8011d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d1c:	81a3      	strh	r3, [r4, #12]
 8011d1e:	9b00      	ldr	r3, [sp, #0]
 8011d20:	6163      	str	r3, [r4, #20]
 8011d22:	9b01      	ldr	r3, [sp, #4]
 8011d24:	6120      	str	r0, [r4, #16]
 8011d26:	b15b      	cbz	r3, 8011d40 <__smakebuf_r+0x74>
 8011d28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d2c:	4630      	mov	r0, r6
 8011d2e:	f000 fd09 	bl	8012744 <_isatty_r>
 8011d32:	b128      	cbz	r0, 8011d40 <__smakebuf_r+0x74>
 8011d34:	89a3      	ldrh	r3, [r4, #12]
 8011d36:	f023 0303 	bic.w	r3, r3, #3
 8011d3a:	f043 0301 	orr.w	r3, r3, #1
 8011d3e:	81a3      	strh	r3, [r4, #12]
 8011d40:	89a0      	ldrh	r0, [r4, #12]
 8011d42:	4305      	orrs	r5, r0
 8011d44:	81a5      	strh	r5, [r4, #12]
 8011d46:	e7cd      	b.n	8011ce4 <__smakebuf_r+0x18>
 8011d48:	08011ad9 	.word	0x08011ad9

08011d4c <__malloc_lock>:
 8011d4c:	4801      	ldr	r0, [pc, #4]	; (8011d54 <__malloc_lock+0x8>)
 8011d4e:	f7ff bf95 	b.w	8011c7c <__retarget_lock_acquire_recursive>
 8011d52:	bf00      	nop
 8011d54:	2000a634 	.word	0x2000a634

08011d58 <__malloc_unlock>:
 8011d58:	4801      	ldr	r0, [pc, #4]	; (8011d60 <__malloc_unlock+0x8>)
 8011d5a:	f7ff bf90 	b.w	8011c7e <__retarget_lock_release_recursive>
 8011d5e:	bf00      	nop
 8011d60:	2000a634 	.word	0x2000a634

08011d64 <_realloc_r>:
 8011d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d68:	4680      	mov	r8, r0
 8011d6a:	4614      	mov	r4, r2
 8011d6c:	460e      	mov	r6, r1
 8011d6e:	b921      	cbnz	r1, 8011d7a <_realloc_r+0x16>
 8011d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d74:	4611      	mov	r1, r2
 8011d76:	f7ff ba59 	b.w	801122c <_malloc_r>
 8011d7a:	b92a      	cbnz	r2, 8011d88 <_realloc_r+0x24>
 8011d7c:	f7ff f9ea 	bl	8011154 <_free_r>
 8011d80:	4625      	mov	r5, r4
 8011d82:	4628      	mov	r0, r5
 8011d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d88:	f000 fd18 	bl	80127bc <_malloc_usable_size_r>
 8011d8c:	4284      	cmp	r4, r0
 8011d8e:	4607      	mov	r7, r0
 8011d90:	d802      	bhi.n	8011d98 <_realloc_r+0x34>
 8011d92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011d96:	d812      	bhi.n	8011dbe <_realloc_r+0x5a>
 8011d98:	4621      	mov	r1, r4
 8011d9a:	4640      	mov	r0, r8
 8011d9c:	f7ff fa46 	bl	801122c <_malloc_r>
 8011da0:	4605      	mov	r5, r0
 8011da2:	2800      	cmp	r0, #0
 8011da4:	d0ed      	beq.n	8011d82 <_realloc_r+0x1e>
 8011da6:	42bc      	cmp	r4, r7
 8011da8:	4622      	mov	r2, r4
 8011daa:	4631      	mov	r1, r6
 8011dac:	bf28      	it	cs
 8011dae:	463a      	movcs	r2, r7
 8011db0:	f7ff f9a4 	bl	80110fc <memcpy>
 8011db4:	4631      	mov	r1, r6
 8011db6:	4640      	mov	r0, r8
 8011db8:	f7ff f9cc 	bl	8011154 <_free_r>
 8011dbc:	e7e1      	b.n	8011d82 <_realloc_r+0x1e>
 8011dbe:	4635      	mov	r5, r6
 8011dc0:	e7df      	b.n	8011d82 <_realloc_r+0x1e>

08011dc2 <__ssputs_r>:
 8011dc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dc6:	688e      	ldr	r6, [r1, #8]
 8011dc8:	429e      	cmp	r6, r3
 8011dca:	4682      	mov	sl, r0
 8011dcc:	460c      	mov	r4, r1
 8011dce:	4690      	mov	r8, r2
 8011dd0:	461f      	mov	r7, r3
 8011dd2:	d838      	bhi.n	8011e46 <__ssputs_r+0x84>
 8011dd4:	898a      	ldrh	r2, [r1, #12]
 8011dd6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011dda:	d032      	beq.n	8011e42 <__ssputs_r+0x80>
 8011ddc:	6825      	ldr	r5, [r4, #0]
 8011dde:	6909      	ldr	r1, [r1, #16]
 8011de0:	eba5 0901 	sub.w	r9, r5, r1
 8011de4:	6965      	ldr	r5, [r4, #20]
 8011de6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011dea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011dee:	3301      	adds	r3, #1
 8011df0:	444b      	add	r3, r9
 8011df2:	106d      	asrs	r5, r5, #1
 8011df4:	429d      	cmp	r5, r3
 8011df6:	bf38      	it	cc
 8011df8:	461d      	movcc	r5, r3
 8011dfa:	0553      	lsls	r3, r2, #21
 8011dfc:	d531      	bpl.n	8011e62 <__ssputs_r+0xa0>
 8011dfe:	4629      	mov	r1, r5
 8011e00:	f7ff fa14 	bl	801122c <_malloc_r>
 8011e04:	4606      	mov	r6, r0
 8011e06:	b950      	cbnz	r0, 8011e1e <__ssputs_r+0x5c>
 8011e08:	230c      	movs	r3, #12
 8011e0a:	f8ca 3000 	str.w	r3, [sl]
 8011e0e:	89a3      	ldrh	r3, [r4, #12]
 8011e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e14:	81a3      	strh	r3, [r4, #12]
 8011e16:	f04f 30ff 	mov.w	r0, #4294967295
 8011e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e1e:	6921      	ldr	r1, [r4, #16]
 8011e20:	464a      	mov	r2, r9
 8011e22:	f7ff f96b 	bl	80110fc <memcpy>
 8011e26:	89a3      	ldrh	r3, [r4, #12]
 8011e28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e30:	81a3      	strh	r3, [r4, #12]
 8011e32:	6126      	str	r6, [r4, #16]
 8011e34:	6165      	str	r5, [r4, #20]
 8011e36:	444e      	add	r6, r9
 8011e38:	eba5 0509 	sub.w	r5, r5, r9
 8011e3c:	6026      	str	r6, [r4, #0]
 8011e3e:	60a5      	str	r5, [r4, #8]
 8011e40:	463e      	mov	r6, r7
 8011e42:	42be      	cmp	r6, r7
 8011e44:	d900      	bls.n	8011e48 <__ssputs_r+0x86>
 8011e46:	463e      	mov	r6, r7
 8011e48:	6820      	ldr	r0, [r4, #0]
 8011e4a:	4632      	mov	r2, r6
 8011e4c:	4641      	mov	r1, r8
 8011e4e:	f000 fc9b 	bl	8012788 <memmove>
 8011e52:	68a3      	ldr	r3, [r4, #8]
 8011e54:	1b9b      	subs	r3, r3, r6
 8011e56:	60a3      	str	r3, [r4, #8]
 8011e58:	6823      	ldr	r3, [r4, #0]
 8011e5a:	4433      	add	r3, r6
 8011e5c:	6023      	str	r3, [r4, #0]
 8011e5e:	2000      	movs	r0, #0
 8011e60:	e7db      	b.n	8011e1a <__ssputs_r+0x58>
 8011e62:	462a      	mov	r2, r5
 8011e64:	f7ff ff7e 	bl	8011d64 <_realloc_r>
 8011e68:	4606      	mov	r6, r0
 8011e6a:	2800      	cmp	r0, #0
 8011e6c:	d1e1      	bne.n	8011e32 <__ssputs_r+0x70>
 8011e6e:	6921      	ldr	r1, [r4, #16]
 8011e70:	4650      	mov	r0, sl
 8011e72:	f7ff f96f 	bl	8011154 <_free_r>
 8011e76:	e7c7      	b.n	8011e08 <__ssputs_r+0x46>

08011e78 <_svfiprintf_r>:
 8011e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e7c:	4698      	mov	r8, r3
 8011e7e:	898b      	ldrh	r3, [r1, #12]
 8011e80:	061b      	lsls	r3, r3, #24
 8011e82:	b09d      	sub	sp, #116	; 0x74
 8011e84:	4607      	mov	r7, r0
 8011e86:	460d      	mov	r5, r1
 8011e88:	4614      	mov	r4, r2
 8011e8a:	d50e      	bpl.n	8011eaa <_svfiprintf_r+0x32>
 8011e8c:	690b      	ldr	r3, [r1, #16]
 8011e8e:	b963      	cbnz	r3, 8011eaa <_svfiprintf_r+0x32>
 8011e90:	2140      	movs	r1, #64	; 0x40
 8011e92:	f7ff f9cb 	bl	801122c <_malloc_r>
 8011e96:	6028      	str	r0, [r5, #0]
 8011e98:	6128      	str	r0, [r5, #16]
 8011e9a:	b920      	cbnz	r0, 8011ea6 <_svfiprintf_r+0x2e>
 8011e9c:	230c      	movs	r3, #12
 8011e9e:	603b      	str	r3, [r7, #0]
 8011ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ea4:	e0d1      	b.n	801204a <_svfiprintf_r+0x1d2>
 8011ea6:	2340      	movs	r3, #64	; 0x40
 8011ea8:	616b      	str	r3, [r5, #20]
 8011eaa:	2300      	movs	r3, #0
 8011eac:	9309      	str	r3, [sp, #36]	; 0x24
 8011eae:	2320      	movs	r3, #32
 8011eb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011eb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8011eb8:	2330      	movs	r3, #48	; 0x30
 8011eba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012064 <_svfiprintf_r+0x1ec>
 8011ebe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ec2:	f04f 0901 	mov.w	r9, #1
 8011ec6:	4623      	mov	r3, r4
 8011ec8:	469a      	mov	sl, r3
 8011eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ece:	b10a      	cbz	r2, 8011ed4 <_svfiprintf_r+0x5c>
 8011ed0:	2a25      	cmp	r2, #37	; 0x25
 8011ed2:	d1f9      	bne.n	8011ec8 <_svfiprintf_r+0x50>
 8011ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8011ed8:	d00b      	beq.n	8011ef2 <_svfiprintf_r+0x7a>
 8011eda:	465b      	mov	r3, fp
 8011edc:	4622      	mov	r2, r4
 8011ede:	4629      	mov	r1, r5
 8011ee0:	4638      	mov	r0, r7
 8011ee2:	f7ff ff6e 	bl	8011dc2 <__ssputs_r>
 8011ee6:	3001      	adds	r0, #1
 8011ee8:	f000 80aa 	beq.w	8012040 <_svfiprintf_r+0x1c8>
 8011eec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011eee:	445a      	add	r2, fp
 8011ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8011ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	f000 80a2 	beq.w	8012040 <_svfiprintf_r+0x1c8>
 8011efc:	2300      	movs	r3, #0
 8011efe:	f04f 32ff 	mov.w	r2, #4294967295
 8011f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f06:	f10a 0a01 	add.w	sl, sl, #1
 8011f0a:	9304      	str	r3, [sp, #16]
 8011f0c:	9307      	str	r3, [sp, #28]
 8011f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f12:	931a      	str	r3, [sp, #104]	; 0x68
 8011f14:	4654      	mov	r4, sl
 8011f16:	2205      	movs	r2, #5
 8011f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f1c:	4851      	ldr	r0, [pc, #324]	; (8012064 <_svfiprintf_r+0x1ec>)
 8011f1e:	f7ee f977 	bl	8000210 <memchr>
 8011f22:	9a04      	ldr	r2, [sp, #16]
 8011f24:	b9d8      	cbnz	r0, 8011f5e <_svfiprintf_r+0xe6>
 8011f26:	06d0      	lsls	r0, r2, #27
 8011f28:	bf44      	itt	mi
 8011f2a:	2320      	movmi	r3, #32
 8011f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f30:	0711      	lsls	r1, r2, #28
 8011f32:	bf44      	itt	mi
 8011f34:	232b      	movmi	r3, #43	; 0x2b
 8011f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8011f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8011f40:	d015      	beq.n	8011f6e <_svfiprintf_r+0xf6>
 8011f42:	9a07      	ldr	r2, [sp, #28]
 8011f44:	4654      	mov	r4, sl
 8011f46:	2000      	movs	r0, #0
 8011f48:	f04f 0c0a 	mov.w	ip, #10
 8011f4c:	4621      	mov	r1, r4
 8011f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f52:	3b30      	subs	r3, #48	; 0x30
 8011f54:	2b09      	cmp	r3, #9
 8011f56:	d94e      	bls.n	8011ff6 <_svfiprintf_r+0x17e>
 8011f58:	b1b0      	cbz	r0, 8011f88 <_svfiprintf_r+0x110>
 8011f5a:	9207      	str	r2, [sp, #28]
 8011f5c:	e014      	b.n	8011f88 <_svfiprintf_r+0x110>
 8011f5e:	eba0 0308 	sub.w	r3, r0, r8
 8011f62:	fa09 f303 	lsl.w	r3, r9, r3
 8011f66:	4313      	orrs	r3, r2
 8011f68:	9304      	str	r3, [sp, #16]
 8011f6a:	46a2      	mov	sl, r4
 8011f6c:	e7d2      	b.n	8011f14 <_svfiprintf_r+0x9c>
 8011f6e:	9b03      	ldr	r3, [sp, #12]
 8011f70:	1d19      	adds	r1, r3, #4
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	9103      	str	r1, [sp, #12]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	bfbb      	ittet	lt
 8011f7a:	425b      	neglt	r3, r3
 8011f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8011f80:	9307      	strge	r3, [sp, #28]
 8011f82:	9307      	strlt	r3, [sp, #28]
 8011f84:	bfb8      	it	lt
 8011f86:	9204      	strlt	r2, [sp, #16]
 8011f88:	7823      	ldrb	r3, [r4, #0]
 8011f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8011f8c:	d10c      	bne.n	8011fa8 <_svfiprintf_r+0x130>
 8011f8e:	7863      	ldrb	r3, [r4, #1]
 8011f90:	2b2a      	cmp	r3, #42	; 0x2a
 8011f92:	d135      	bne.n	8012000 <_svfiprintf_r+0x188>
 8011f94:	9b03      	ldr	r3, [sp, #12]
 8011f96:	1d1a      	adds	r2, r3, #4
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	9203      	str	r2, [sp, #12]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	bfb8      	it	lt
 8011fa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8011fa4:	3402      	adds	r4, #2
 8011fa6:	9305      	str	r3, [sp, #20]
 8011fa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012074 <_svfiprintf_r+0x1fc>
 8011fac:	7821      	ldrb	r1, [r4, #0]
 8011fae:	2203      	movs	r2, #3
 8011fb0:	4650      	mov	r0, sl
 8011fb2:	f7ee f92d 	bl	8000210 <memchr>
 8011fb6:	b140      	cbz	r0, 8011fca <_svfiprintf_r+0x152>
 8011fb8:	2340      	movs	r3, #64	; 0x40
 8011fba:	eba0 000a 	sub.w	r0, r0, sl
 8011fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8011fc2:	9b04      	ldr	r3, [sp, #16]
 8011fc4:	4303      	orrs	r3, r0
 8011fc6:	3401      	adds	r4, #1
 8011fc8:	9304      	str	r3, [sp, #16]
 8011fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fce:	4826      	ldr	r0, [pc, #152]	; (8012068 <_svfiprintf_r+0x1f0>)
 8011fd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011fd4:	2206      	movs	r2, #6
 8011fd6:	f7ee f91b 	bl	8000210 <memchr>
 8011fda:	2800      	cmp	r0, #0
 8011fdc:	d038      	beq.n	8012050 <_svfiprintf_r+0x1d8>
 8011fde:	4b23      	ldr	r3, [pc, #140]	; (801206c <_svfiprintf_r+0x1f4>)
 8011fe0:	bb1b      	cbnz	r3, 801202a <_svfiprintf_r+0x1b2>
 8011fe2:	9b03      	ldr	r3, [sp, #12]
 8011fe4:	3307      	adds	r3, #7
 8011fe6:	f023 0307 	bic.w	r3, r3, #7
 8011fea:	3308      	adds	r3, #8
 8011fec:	9303      	str	r3, [sp, #12]
 8011fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ff0:	4433      	add	r3, r6
 8011ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8011ff4:	e767      	b.n	8011ec6 <_svfiprintf_r+0x4e>
 8011ff6:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ffa:	460c      	mov	r4, r1
 8011ffc:	2001      	movs	r0, #1
 8011ffe:	e7a5      	b.n	8011f4c <_svfiprintf_r+0xd4>
 8012000:	2300      	movs	r3, #0
 8012002:	3401      	adds	r4, #1
 8012004:	9305      	str	r3, [sp, #20]
 8012006:	4619      	mov	r1, r3
 8012008:	f04f 0c0a 	mov.w	ip, #10
 801200c:	4620      	mov	r0, r4
 801200e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012012:	3a30      	subs	r2, #48	; 0x30
 8012014:	2a09      	cmp	r2, #9
 8012016:	d903      	bls.n	8012020 <_svfiprintf_r+0x1a8>
 8012018:	2b00      	cmp	r3, #0
 801201a:	d0c5      	beq.n	8011fa8 <_svfiprintf_r+0x130>
 801201c:	9105      	str	r1, [sp, #20]
 801201e:	e7c3      	b.n	8011fa8 <_svfiprintf_r+0x130>
 8012020:	fb0c 2101 	mla	r1, ip, r1, r2
 8012024:	4604      	mov	r4, r0
 8012026:	2301      	movs	r3, #1
 8012028:	e7f0      	b.n	801200c <_svfiprintf_r+0x194>
 801202a:	ab03      	add	r3, sp, #12
 801202c:	9300      	str	r3, [sp, #0]
 801202e:	462a      	mov	r2, r5
 8012030:	4b0f      	ldr	r3, [pc, #60]	; (8012070 <_svfiprintf_r+0x1f8>)
 8012032:	a904      	add	r1, sp, #16
 8012034:	4638      	mov	r0, r7
 8012036:	f3af 8000 	nop.w
 801203a:	1c42      	adds	r2, r0, #1
 801203c:	4606      	mov	r6, r0
 801203e:	d1d6      	bne.n	8011fee <_svfiprintf_r+0x176>
 8012040:	89ab      	ldrh	r3, [r5, #12]
 8012042:	065b      	lsls	r3, r3, #25
 8012044:	f53f af2c 	bmi.w	8011ea0 <_svfiprintf_r+0x28>
 8012048:	9809      	ldr	r0, [sp, #36]	; 0x24
 801204a:	b01d      	add	sp, #116	; 0x74
 801204c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012050:	ab03      	add	r3, sp, #12
 8012052:	9300      	str	r3, [sp, #0]
 8012054:	462a      	mov	r2, r5
 8012056:	4b06      	ldr	r3, [pc, #24]	; (8012070 <_svfiprintf_r+0x1f8>)
 8012058:	a904      	add	r1, sp, #16
 801205a:	4638      	mov	r0, r7
 801205c:	f000 f9d4 	bl	8012408 <_printf_i>
 8012060:	e7eb      	b.n	801203a <_svfiprintf_r+0x1c2>
 8012062:	bf00      	nop
 8012064:	08013b8c 	.word	0x08013b8c
 8012068:	08013b96 	.word	0x08013b96
 801206c:	00000000 	.word	0x00000000
 8012070:	08011dc3 	.word	0x08011dc3
 8012074:	08013b92 	.word	0x08013b92

08012078 <__sfputc_r>:
 8012078:	6893      	ldr	r3, [r2, #8]
 801207a:	3b01      	subs	r3, #1
 801207c:	2b00      	cmp	r3, #0
 801207e:	b410      	push	{r4}
 8012080:	6093      	str	r3, [r2, #8]
 8012082:	da08      	bge.n	8012096 <__sfputc_r+0x1e>
 8012084:	6994      	ldr	r4, [r2, #24]
 8012086:	42a3      	cmp	r3, r4
 8012088:	db01      	blt.n	801208e <__sfputc_r+0x16>
 801208a:	290a      	cmp	r1, #10
 801208c:	d103      	bne.n	8012096 <__sfputc_r+0x1e>
 801208e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012092:	f7ff bb7b 	b.w	801178c <__swbuf_r>
 8012096:	6813      	ldr	r3, [r2, #0]
 8012098:	1c58      	adds	r0, r3, #1
 801209a:	6010      	str	r0, [r2, #0]
 801209c:	7019      	strb	r1, [r3, #0]
 801209e:	4608      	mov	r0, r1
 80120a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120a4:	4770      	bx	lr

080120a6 <__sfputs_r>:
 80120a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120a8:	4606      	mov	r6, r0
 80120aa:	460f      	mov	r7, r1
 80120ac:	4614      	mov	r4, r2
 80120ae:	18d5      	adds	r5, r2, r3
 80120b0:	42ac      	cmp	r4, r5
 80120b2:	d101      	bne.n	80120b8 <__sfputs_r+0x12>
 80120b4:	2000      	movs	r0, #0
 80120b6:	e007      	b.n	80120c8 <__sfputs_r+0x22>
 80120b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120bc:	463a      	mov	r2, r7
 80120be:	4630      	mov	r0, r6
 80120c0:	f7ff ffda 	bl	8012078 <__sfputc_r>
 80120c4:	1c43      	adds	r3, r0, #1
 80120c6:	d1f3      	bne.n	80120b0 <__sfputs_r+0xa>
 80120c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080120cc <_vfiprintf_r>:
 80120cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120d0:	460d      	mov	r5, r1
 80120d2:	b09d      	sub	sp, #116	; 0x74
 80120d4:	4614      	mov	r4, r2
 80120d6:	4698      	mov	r8, r3
 80120d8:	4606      	mov	r6, r0
 80120da:	b118      	cbz	r0, 80120e4 <_vfiprintf_r+0x18>
 80120dc:	6983      	ldr	r3, [r0, #24]
 80120de:	b90b      	cbnz	r3, 80120e4 <_vfiprintf_r+0x18>
 80120e0:	f7ff fd2e 	bl	8011b40 <__sinit>
 80120e4:	4b89      	ldr	r3, [pc, #548]	; (801230c <_vfiprintf_r+0x240>)
 80120e6:	429d      	cmp	r5, r3
 80120e8:	d11b      	bne.n	8012122 <_vfiprintf_r+0x56>
 80120ea:	6875      	ldr	r5, [r6, #4]
 80120ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80120ee:	07d9      	lsls	r1, r3, #31
 80120f0:	d405      	bmi.n	80120fe <_vfiprintf_r+0x32>
 80120f2:	89ab      	ldrh	r3, [r5, #12]
 80120f4:	059a      	lsls	r2, r3, #22
 80120f6:	d402      	bmi.n	80120fe <_vfiprintf_r+0x32>
 80120f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80120fa:	f7ff fdbf 	bl	8011c7c <__retarget_lock_acquire_recursive>
 80120fe:	89ab      	ldrh	r3, [r5, #12]
 8012100:	071b      	lsls	r3, r3, #28
 8012102:	d501      	bpl.n	8012108 <_vfiprintf_r+0x3c>
 8012104:	692b      	ldr	r3, [r5, #16]
 8012106:	b9eb      	cbnz	r3, 8012144 <_vfiprintf_r+0x78>
 8012108:	4629      	mov	r1, r5
 801210a:	4630      	mov	r0, r6
 801210c:	f7ff fb90 	bl	8011830 <__swsetup_r>
 8012110:	b1c0      	cbz	r0, 8012144 <_vfiprintf_r+0x78>
 8012112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012114:	07dc      	lsls	r4, r3, #31
 8012116:	d50e      	bpl.n	8012136 <_vfiprintf_r+0x6a>
 8012118:	f04f 30ff 	mov.w	r0, #4294967295
 801211c:	b01d      	add	sp, #116	; 0x74
 801211e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012122:	4b7b      	ldr	r3, [pc, #492]	; (8012310 <_vfiprintf_r+0x244>)
 8012124:	429d      	cmp	r5, r3
 8012126:	d101      	bne.n	801212c <_vfiprintf_r+0x60>
 8012128:	68b5      	ldr	r5, [r6, #8]
 801212a:	e7df      	b.n	80120ec <_vfiprintf_r+0x20>
 801212c:	4b79      	ldr	r3, [pc, #484]	; (8012314 <_vfiprintf_r+0x248>)
 801212e:	429d      	cmp	r5, r3
 8012130:	bf08      	it	eq
 8012132:	68f5      	ldreq	r5, [r6, #12]
 8012134:	e7da      	b.n	80120ec <_vfiprintf_r+0x20>
 8012136:	89ab      	ldrh	r3, [r5, #12]
 8012138:	0598      	lsls	r0, r3, #22
 801213a:	d4ed      	bmi.n	8012118 <_vfiprintf_r+0x4c>
 801213c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801213e:	f7ff fd9e 	bl	8011c7e <__retarget_lock_release_recursive>
 8012142:	e7e9      	b.n	8012118 <_vfiprintf_r+0x4c>
 8012144:	2300      	movs	r3, #0
 8012146:	9309      	str	r3, [sp, #36]	; 0x24
 8012148:	2320      	movs	r3, #32
 801214a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801214e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012152:	2330      	movs	r3, #48	; 0x30
 8012154:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012318 <_vfiprintf_r+0x24c>
 8012158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801215c:	f04f 0901 	mov.w	r9, #1
 8012160:	4623      	mov	r3, r4
 8012162:	469a      	mov	sl, r3
 8012164:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012168:	b10a      	cbz	r2, 801216e <_vfiprintf_r+0xa2>
 801216a:	2a25      	cmp	r2, #37	; 0x25
 801216c:	d1f9      	bne.n	8012162 <_vfiprintf_r+0x96>
 801216e:	ebba 0b04 	subs.w	fp, sl, r4
 8012172:	d00b      	beq.n	801218c <_vfiprintf_r+0xc0>
 8012174:	465b      	mov	r3, fp
 8012176:	4622      	mov	r2, r4
 8012178:	4629      	mov	r1, r5
 801217a:	4630      	mov	r0, r6
 801217c:	f7ff ff93 	bl	80120a6 <__sfputs_r>
 8012180:	3001      	adds	r0, #1
 8012182:	f000 80aa 	beq.w	80122da <_vfiprintf_r+0x20e>
 8012186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012188:	445a      	add	r2, fp
 801218a:	9209      	str	r2, [sp, #36]	; 0x24
 801218c:	f89a 3000 	ldrb.w	r3, [sl]
 8012190:	2b00      	cmp	r3, #0
 8012192:	f000 80a2 	beq.w	80122da <_vfiprintf_r+0x20e>
 8012196:	2300      	movs	r3, #0
 8012198:	f04f 32ff 	mov.w	r2, #4294967295
 801219c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121a0:	f10a 0a01 	add.w	sl, sl, #1
 80121a4:	9304      	str	r3, [sp, #16]
 80121a6:	9307      	str	r3, [sp, #28]
 80121a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80121ac:	931a      	str	r3, [sp, #104]	; 0x68
 80121ae:	4654      	mov	r4, sl
 80121b0:	2205      	movs	r2, #5
 80121b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121b6:	4858      	ldr	r0, [pc, #352]	; (8012318 <_vfiprintf_r+0x24c>)
 80121b8:	f7ee f82a 	bl	8000210 <memchr>
 80121bc:	9a04      	ldr	r2, [sp, #16]
 80121be:	b9d8      	cbnz	r0, 80121f8 <_vfiprintf_r+0x12c>
 80121c0:	06d1      	lsls	r1, r2, #27
 80121c2:	bf44      	itt	mi
 80121c4:	2320      	movmi	r3, #32
 80121c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121ca:	0713      	lsls	r3, r2, #28
 80121cc:	bf44      	itt	mi
 80121ce:	232b      	movmi	r3, #43	; 0x2b
 80121d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121d4:	f89a 3000 	ldrb.w	r3, [sl]
 80121d8:	2b2a      	cmp	r3, #42	; 0x2a
 80121da:	d015      	beq.n	8012208 <_vfiprintf_r+0x13c>
 80121dc:	9a07      	ldr	r2, [sp, #28]
 80121de:	4654      	mov	r4, sl
 80121e0:	2000      	movs	r0, #0
 80121e2:	f04f 0c0a 	mov.w	ip, #10
 80121e6:	4621      	mov	r1, r4
 80121e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121ec:	3b30      	subs	r3, #48	; 0x30
 80121ee:	2b09      	cmp	r3, #9
 80121f0:	d94e      	bls.n	8012290 <_vfiprintf_r+0x1c4>
 80121f2:	b1b0      	cbz	r0, 8012222 <_vfiprintf_r+0x156>
 80121f4:	9207      	str	r2, [sp, #28]
 80121f6:	e014      	b.n	8012222 <_vfiprintf_r+0x156>
 80121f8:	eba0 0308 	sub.w	r3, r0, r8
 80121fc:	fa09 f303 	lsl.w	r3, r9, r3
 8012200:	4313      	orrs	r3, r2
 8012202:	9304      	str	r3, [sp, #16]
 8012204:	46a2      	mov	sl, r4
 8012206:	e7d2      	b.n	80121ae <_vfiprintf_r+0xe2>
 8012208:	9b03      	ldr	r3, [sp, #12]
 801220a:	1d19      	adds	r1, r3, #4
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	9103      	str	r1, [sp, #12]
 8012210:	2b00      	cmp	r3, #0
 8012212:	bfbb      	ittet	lt
 8012214:	425b      	neglt	r3, r3
 8012216:	f042 0202 	orrlt.w	r2, r2, #2
 801221a:	9307      	strge	r3, [sp, #28]
 801221c:	9307      	strlt	r3, [sp, #28]
 801221e:	bfb8      	it	lt
 8012220:	9204      	strlt	r2, [sp, #16]
 8012222:	7823      	ldrb	r3, [r4, #0]
 8012224:	2b2e      	cmp	r3, #46	; 0x2e
 8012226:	d10c      	bne.n	8012242 <_vfiprintf_r+0x176>
 8012228:	7863      	ldrb	r3, [r4, #1]
 801222a:	2b2a      	cmp	r3, #42	; 0x2a
 801222c:	d135      	bne.n	801229a <_vfiprintf_r+0x1ce>
 801222e:	9b03      	ldr	r3, [sp, #12]
 8012230:	1d1a      	adds	r2, r3, #4
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	9203      	str	r2, [sp, #12]
 8012236:	2b00      	cmp	r3, #0
 8012238:	bfb8      	it	lt
 801223a:	f04f 33ff 	movlt.w	r3, #4294967295
 801223e:	3402      	adds	r4, #2
 8012240:	9305      	str	r3, [sp, #20]
 8012242:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012328 <_vfiprintf_r+0x25c>
 8012246:	7821      	ldrb	r1, [r4, #0]
 8012248:	2203      	movs	r2, #3
 801224a:	4650      	mov	r0, sl
 801224c:	f7ed ffe0 	bl	8000210 <memchr>
 8012250:	b140      	cbz	r0, 8012264 <_vfiprintf_r+0x198>
 8012252:	2340      	movs	r3, #64	; 0x40
 8012254:	eba0 000a 	sub.w	r0, r0, sl
 8012258:	fa03 f000 	lsl.w	r0, r3, r0
 801225c:	9b04      	ldr	r3, [sp, #16]
 801225e:	4303      	orrs	r3, r0
 8012260:	3401      	adds	r4, #1
 8012262:	9304      	str	r3, [sp, #16]
 8012264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012268:	482c      	ldr	r0, [pc, #176]	; (801231c <_vfiprintf_r+0x250>)
 801226a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801226e:	2206      	movs	r2, #6
 8012270:	f7ed ffce 	bl	8000210 <memchr>
 8012274:	2800      	cmp	r0, #0
 8012276:	d03f      	beq.n	80122f8 <_vfiprintf_r+0x22c>
 8012278:	4b29      	ldr	r3, [pc, #164]	; (8012320 <_vfiprintf_r+0x254>)
 801227a:	bb1b      	cbnz	r3, 80122c4 <_vfiprintf_r+0x1f8>
 801227c:	9b03      	ldr	r3, [sp, #12]
 801227e:	3307      	adds	r3, #7
 8012280:	f023 0307 	bic.w	r3, r3, #7
 8012284:	3308      	adds	r3, #8
 8012286:	9303      	str	r3, [sp, #12]
 8012288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801228a:	443b      	add	r3, r7
 801228c:	9309      	str	r3, [sp, #36]	; 0x24
 801228e:	e767      	b.n	8012160 <_vfiprintf_r+0x94>
 8012290:	fb0c 3202 	mla	r2, ip, r2, r3
 8012294:	460c      	mov	r4, r1
 8012296:	2001      	movs	r0, #1
 8012298:	e7a5      	b.n	80121e6 <_vfiprintf_r+0x11a>
 801229a:	2300      	movs	r3, #0
 801229c:	3401      	adds	r4, #1
 801229e:	9305      	str	r3, [sp, #20]
 80122a0:	4619      	mov	r1, r3
 80122a2:	f04f 0c0a 	mov.w	ip, #10
 80122a6:	4620      	mov	r0, r4
 80122a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122ac:	3a30      	subs	r2, #48	; 0x30
 80122ae:	2a09      	cmp	r2, #9
 80122b0:	d903      	bls.n	80122ba <_vfiprintf_r+0x1ee>
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d0c5      	beq.n	8012242 <_vfiprintf_r+0x176>
 80122b6:	9105      	str	r1, [sp, #20]
 80122b8:	e7c3      	b.n	8012242 <_vfiprintf_r+0x176>
 80122ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80122be:	4604      	mov	r4, r0
 80122c0:	2301      	movs	r3, #1
 80122c2:	e7f0      	b.n	80122a6 <_vfiprintf_r+0x1da>
 80122c4:	ab03      	add	r3, sp, #12
 80122c6:	9300      	str	r3, [sp, #0]
 80122c8:	462a      	mov	r2, r5
 80122ca:	4b16      	ldr	r3, [pc, #88]	; (8012324 <_vfiprintf_r+0x258>)
 80122cc:	a904      	add	r1, sp, #16
 80122ce:	4630      	mov	r0, r6
 80122d0:	f3af 8000 	nop.w
 80122d4:	4607      	mov	r7, r0
 80122d6:	1c78      	adds	r0, r7, #1
 80122d8:	d1d6      	bne.n	8012288 <_vfiprintf_r+0x1bc>
 80122da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80122dc:	07d9      	lsls	r1, r3, #31
 80122de:	d405      	bmi.n	80122ec <_vfiprintf_r+0x220>
 80122e0:	89ab      	ldrh	r3, [r5, #12]
 80122e2:	059a      	lsls	r2, r3, #22
 80122e4:	d402      	bmi.n	80122ec <_vfiprintf_r+0x220>
 80122e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80122e8:	f7ff fcc9 	bl	8011c7e <__retarget_lock_release_recursive>
 80122ec:	89ab      	ldrh	r3, [r5, #12]
 80122ee:	065b      	lsls	r3, r3, #25
 80122f0:	f53f af12 	bmi.w	8012118 <_vfiprintf_r+0x4c>
 80122f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80122f6:	e711      	b.n	801211c <_vfiprintf_r+0x50>
 80122f8:	ab03      	add	r3, sp, #12
 80122fa:	9300      	str	r3, [sp, #0]
 80122fc:	462a      	mov	r2, r5
 80122fe:	4b09      	ldr	r3, [pc, #36]	; (8012324 <_vfiprintf_r+0x258>)
 8012300:	a904      	add	r1, sp, #16
 8012302:	4630      	mov	r0, r6
 8012304:	f000 f880 	bl	8012408 <_printf_i>
 8012308:	e7e4      	b.n	80122d4 <_vfiprintf_r+0x208>
 801230a:	bf00      	nop
 801230c:	08013b4c 	.word	0x08013b4c
 8012310:	08013b6c 	.word	0x08013b6c
 8012314:	08013b2c 	.word	0x08013b2c
 8012318:	08013b8c 	.word	0x08013b8c
 801231c:	08013b96 	.word	0x08013b96
 8012320:	00000000 	.word	0x00000000
 8012324:	080120a7 	.word	0x080120a7
 8012328:	08013b92 	.word	0x08013b92

0801232c <_printf_common>:
 801232c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012330:	4616      	mov	r6, r2
 8012332:	4699      	mov	r9, r3
 8012334:	688a      	ldr	r2, [r1, #8]
 8012336:	690b      	ldr	r3, [r1, #16]
 8012338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801233c:	4293      	cmp	r3, r2
 801233e:	bfb8      	it	lt
 8012340:	4613      	movlt	r3, r2
 8012342:	6033      	str	r3, [r6, #0]
 8012344:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012348:	4607      	mov	r7, r0
 801234a:	460c      	mov	r4, r1
 801234c:	b10a      	cbz	r2, 8012352 <_printf_common+0x26>
 801234e:	3301      	adds	r3, #1
 8012350:	6033      	str	r3, [r6, #0]
 8012352:	6823      	ldr	r3, [r4, #0]
 8012354:	0699      	lsls	r1, r3, #26
 8012356:	bf42      	ittt	mi
 8012358:	6833      	ldrmi	r3, [r6, #0]
 801235a:	3302      	addmi	r3, #2
 801235c:	6033      	strmi	r3, [r6, #0]
 801235e:	6825      	ldr	r5, [r4, #0]
 8012360:	f015 0506 	ands.w	r5, r5, #6
 8012364:	d106      	bne.n	8012374 <_printf_common+0x48>
 8012366:	f104 0a19 	add.w	sl, r4, #25
 801236a:	68e3      	ldr	r3, [r4, #12]
 801236c:	6832      	ldr	r2, [r6, #0]
 801236e:	1a9b      	subs	r3, r3, r2
 8012370:	42ab      	cmp	r3, r5
 8012372:	dc26      	bgt.n	80123c2 <_printf_common+0x96>
 8012374:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012378:	1e13      	subs	r3, r2, #0
 801237a:	6822      	ldr	r2, [r4, #0]
 801237c:	bf18      	it	ne
 801237e:	2301      	movne	r3, #1
 8012380:	0692      	lsls	r2, r2, #26
 8012382:	d42b      	bmi.n	80123dc <_printf_common+0xb0>
 8012384:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012388:	4649      	mov	r1, r9
 801238a:	4638      	mov	r0, r7
 801238c:	47c0      	blx	r8
 801238e:	3001      	adds	r0, #1
 8012390:	d01e      	beq.n	80123d0 <_printf_common+0xa4>
 8012392:	6823      	ldr	r3, [r4, #0]
 8012394:	68e5      	ldr	r5, [r4, #12]
 8012396:	6832      	ldr	r2, [r6, #0]
 8012398:	f003 0306 	and.w	r3, r3, #6
 801239c:	2b04      	cmp	r3, #4
 801239e:	bf08      	it	eq
 80123a0:	1aad      	subeq	r5, r5, r2
 80123a2:	68a3      	ldr	r3, [r4, #8]
 80123a4:	6922      	ldr	r2, [r4, #16]
 80123a6:	bf0c      	ite	eq
 80123a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80123ac:	2500      	movne	r5, #0
 80123ae:	4293      	cmp	r3, r2
 80123b0:	bfc4      	itt	gt
 80123b2:	1a9b      	subgt	r3, r3, r2
 80123b4:	18ed      	addgt	r5, r5, r3
 80123b6:	2600      	movs	r6, #0
 80123b8:	341a      	adds	r4, #26
 80123ba:	42b5      	cmp	r5, r6
 80123bc:	d11a      	bne.n	80123f4 <_printf_common+0xc8>
 80123be:	2000      	movs	r0, #0
 80123c0:	e008      	b.n	80123d4 <_printf_common+0xa8>
 80123c2:	2301      	movs	r3, #1
 80123c4:	4652      	mov	r2, sl
 80123c6:	4649      	mov	r1, r9
 80123c8:	4638      	mov	r0, r7
 80123ca:	47c0      	blx	r8
 80123cc:	3001      	adds	r0, #1
 80123ce:	d103      	bne.n	80123d8 <_printf_common+0xac>
 80123d0:	f04f 30ff 	mov.w	r0, #4294967295
 80123d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123d8:	3501      	adds	r5, #1
 80123da:	e7c6      	b.n	801236a <_printf_common+0x3e>
 80123dc:	18e1      	adds	r1, r4, r3
 80123de:	1c5a      	adds	r2, r3, #1
 80123e0:	2030      	movs	r0, #48	; 0x30
 80123e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80123e6:	4422      	add	r2, r4
 80123e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80123ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80123f0:	3302      	adds	r3, #2
 80123f2:	e7c7      	b.n	8012384 <_printf_common+0x58>
 80123f4:	2301      	movs	r3, #1
 80123f6:	4622      	mov	r2, r4
 80123f8:	4649      	mov	r1, r9
 80123fa:	4638      	mov	r0, r7
 80123fc:	47c0      	blx	r8
 80123fe:	3001      	adds	r0, #1
 8012400:	d0e6      	beq.n	80123d0 <_printf_common+0xa4>
 8012402:	3601      	adds	r6, #1
 8012404:	e7d9      	b.n	80123ba <_printf_common+0x8e>
	...

08012408 <_printf_i>:
 8012408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801240c:	7e0f      	ldrb	r7, [r1, #24]
 801240e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012410:	2f78      	cmp	r7, #120	; 0x78
 8012412:	4691      	mov	r9, r2
 8012414:	4680      	mov	r8, r0
 8012416:	460c      	mov	r4, r1
 8012418:	469a      	mov	sl, r3
 801241a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801241e:	d807      	bhi.n	8012430 <_printf_i+0x28>
 8012420:	2f62      	cmp	r7, #98	; 0x62
 8012422:	d80a      	bhi.n	801243a <_printf_i+0x32>
 8012424:	2f00      	cmp	r7, #0
 8012426:	f000 80d8 	beq.w	80125da <_printf_i+0x1d2>
 801242a:	2f58      	cmp	r7, #88	; 0x58
 801242c:	f000 80a3 	beq.w	8012576 <_printf_i+0x16e>
 8012430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012438:	e03a      	b.n	80124b0 <_printf_i+0xa8>
 801243a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801243e:	2b15      	cmp	r3, #21
 8012440:	d8f6      	bhi.n	8012430 <_printf_i+0x28>
 8012442:	a101      	add	r1, pc, #4	; (adr r1, 8012448 <_printf_i+0x40>)
 8012444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012448:	080124a1 	.word	0x080124a1
 801244c:	080124b5 	.word	0x080124b5
 8012450:	08012431 	.word	0x08012431
 8012454:	08012431 	.word	0x08012431
 8012458:	08012431 	.word	0x08012431
 801245c:	08012431 	.word	0x08012431
 8012460:	080124b5 	.word	0x080124b5
 8012464:	08012431 	.word	0x08012431
 8012468:	08012431 	.word	0x08012431
 801246c:	08012431 	.word	0x08012431
 8012470:	08012431 	.word	0x08012431
 8012474:	080125c1 	.word	0x080125c1
 8012478:	080124e5 	.word	0x080124e5
 801247c:	080125a3 	.word	0x080125a3
 8012480:	08012431 	.word	0x08012431
 8012484:	08012431 	.word	0x08012431
 8012488:	080125e3 	.word	0x080125e3
 801248c:	08012431 	.word	0x08012431
 8012490:	080124e5 	.word	0x080124e5
 8012494:	08012431 	.word	0x08012431
 8012498:	08012431 	.word	0x08012431
 801249c:	080125ab 	.word	0x080125ab
 80124a0:	682b      	ldr	r3, [r5, #0]
 80124a2:	1d1a      	adds	r2, r3, #4
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	602a      	str	r2, [r5, #0]
 80124a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80124ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80124b0:	2301      	movs	r3, #1
 80124b2:	e0a3      	b.n	80125fc <_printf_i+0x1f4>
 80124b4:	6820      	ldr	r0, [r4, #0]
 80124b6:	6829      	ldr	r1, [r5, #0]
 80124b8:	0606      	lsls	r6, r0, #24
 80124ba:	f101 0304 	add.w	r3, r1, #4
 80124be:	d50a      	bpl.n	80124d6 <_printf_i+0xce>
 80124c0:	680e      	ldr	r6, [r1, #0]
 80124c2:	602b      	str	r3, [r5, #0]
 80124c4:	2e00      	cmp	r6, #0
 80124c6:	da03      	bge.n	80124d0 <_printf_i+0xc8>
 80124c8:	232d      	movs	r3, #45	; 0x2d
 80124ca:	4276      	negs	r6, r6
 80124cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80124d0:	485e      	ldr	r0, [pc, #376]	; (801264c <_printf_i+0x244>)
 80124d2:	230a      	movs	r3, #10
 80124d4:	e019      	b.n	801250a <_printf_i+0x102>
 80124d6:	680e      	ldr	r6, [r1, #0]
 80124d8:	602b      	str	r3, [r5, #0]
 80124da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80124de:	bf18      	it	ne
 80124e0:	b236      	sxthne	r6, r6
 80124e2:	e7ef      	b.n	80124c4 <_printf_i+0xbc>
 80124e4:	682b      	ldr	r3, [r5, #0]
 80124e6:	6820      	ldr	r0, [r4, #0]
 80124e8:	1d19      	adds	r1, r3, #4
 80124ea:	6029      	str	r1, [r5, #0]
 80124ec:	0601      	lsls	r1, r0, #24
 80124ee:	d501      	bpl.n	80124f4 <_printf_i+0xec>
 80124f0:	681e      	ldr	r6, [r3, #0]
 80124f2:	e002      	b.n	80124fa <_printf_i+0xf2>
 80124f4:	0646      	lsls	r6, r0, #25
 80124f6:	d5fb      	bpl.n	80124f0 <_printf_i+0xe8>
 80124f8:	881e      	ldrh	r6, [r3, #0]
 80124fa:	4854      	ldr	r0, [pc, #336]	; (801264c <_printf_i+0x244>)
 80124fc:	2f6f      	cmp	r7, #111	; 0x6f
 80124fe:	bf0c      	ite	eq
 8012500:	2308      	moveq	r3, #8
 8012502:	230a      	movne	r3, #10
 8012504:	2100      	movs	r1, #0
 8012506:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801250a:	6865      	ldr	r5, [r4, #4]
 801250c:	60a5      	str	r5, [r4, #8]
 801250e:	2d00      	cmp	r5, #0
 8012510:	bfa2      	ittt	ge
 8012512:	6821      	ldrge	r1, [r4, #0]
 8012514:	f021 0104 	bicge.w	r1, r1, #4
 8012518:	6021      	strge	r1, [r4, #0]
 801251a:	b90e      	cbnz	r6, 8012520 <_printf_i+0x118>
 801251c:	2d00      	cmp	r5, #0
 801251e:	d04d      	beq.n	80125bc <_printf_i+0x1b4>
 8012520:	4615      	mov	r5, r2
 8012522:	fbb6 f1f3 	udiv	r1, r6, r3
 8012526:	fb03 6711 	mls	r7, r3, r1, r6
 801252a:	5dc7      	ldrb	r7, [r0, r7]
 801252c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012530:	4637      	mov	r7, r6
 8012532:	42bb      	cmp	r3, r7
 8012534:	460e      	mov	r6, r1
 8012536:	d9f4      	bls.n	8012522 <_printf_i+0x11a>
 8012538:	2b08      	cmp	r3, #8
 801253a:	d10b      	bne.n	8012554 <_printf_i+0x14c>
 801253c:	6823      	ldr	r3, [r4, #0]
 801253e:	07de      	lsls	r6, r3, #31
 8012540:	d508      	bpl.n	8012554 <_printf_i+0x14c>
 8012542:	6923      	ldr	r3, [r4, #16]
 8012544:	6861      	ldr	r1, [r4, #4]
 8012546:	4299      	cmp	r1, r3
 8012548:	bfde      	ittt	le
 801254a:	2330      	movle	r3, #48	; 0x30
 801254c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012550:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012554:	1b52      	subs	r2, r2, r5
 8012556:	6122      	str	r2, [r4, #16]
 8012558:	f8cd a000 	str.w	sl, [sp]
 801255c:	464b      	mov	r3, r9
 801255e:	aa03      	add	r2, sp, #12
 8012560:	4621      	mov	r1, r4
 8012562:	4640      	mov	r0, r8
 8012564:	f7ff fee2 	bl	801232c <_printf_common>
 8012568:	3001      	adds	r0, #1
 801256a:	d14c      	bne.n	8012606 <_printf_i+0x1fe>
 801256c:	f04f 30ff 	mov.w	r0, #4294967295
 8012570:	b004      	add	sp, #16
 8012572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012576:	4835      	ldr	r0, [pc, #212]	; (801264c <_printf_i+0x244>)
 8012578:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801257c:	6829      	ldr	r1, [r5, #0]
 801257e:	6823      	ldr	r3, [r4, #0]
 8012580:	f851 6b04 	ldr.w	r6, [r1], #4
 8012584:	6029      	str	r1, [r5, #0]
 8012586:	061d      	lsls	r5, r3, #24
 8012588:	d514      	bpl.n	80125b4 <_printf_i+0x1ac>
 801258a:	07df      	lsls	r7, r3, #31
 801258c:	bf44      	itt	mi
 801258e:	f043 0320 	orrmi.w	r3, r3, #32
 8012592:	6023      	strmi	r3, [r4, #0]
 8012594:	b91e      	cbnz	r6, 801259e <_printf_i+0x196>
 8012596:	6823      	ldr	r3, [r4, #0]
 8012598:	f023 0320 	bic.w	r3, r3, #32
 801259c:	6023      	str	r3, [r4, #0]
 801259e:	2310      	movs	r3, #16
 80125a0:	e7b0      	b.n	8012504 <_printf_i+0xfc>
 80125a2:	6823      	ldr	r3, [r4, #0]
 80125a4:	f043 0320 	orr.w	r3, r3, #32
 80125a8:	6023      	str	r3, [r4, #0]
 80125aa:	2378      	movs	r3, #120	; 0x78
 80125ac:	4828      	ldr	r0, [pc, #160]	; (8012650 <_printf_i+0x248>)
 80125ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80125b2:	e7e3      	b.n	801257c <_printf_i+0x174>
 80125b4:	0659      	lsls	r1, r3, #25
 80125b6:	bf48      	it	mi
 80125b8:	b2b6      	uxthmi	r6, r6
 80125ba:	e7e6      	b.n	801258a <_printf_i+0x182>
 80125bc:	4615      	mov	r5, r2
 80125be:	e7bb      	b.n	8012538 <_printf_i+0x130>
 80125c0:	682b      	ldr	r3, [r5, #0]
 80125c2:	6826      	ldr	r6, [r4, #0]
 80125c4:	6961      	ldr	r1, [r4, #20]
 80125c6:	1d18      	adds	r0, r3, #4
 80125c8:	6028      	str	r0, [r5, #0]
 80125ca:	0635      	lsls	r5, r6, #24
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	d501      	bpl.n	80125d4 <_printf_i+0x1cc>
 80125d0:	6019      	str	r1, [r3, #0]
 80125d2:	e002      	b.n	80125da <_printf_i+0x1d2>
 80125d4:	0670      	lsls	r0, r6, #25
 80125d6:	d5fb      	bpl.n	80125d0 <_printf_i+0x1c8>
 80125d8:	8019      	strh	r1, [r3, #0]
 80125da:	2300      	movs	r3, #0
 80125dc:	6123      	str	r3, [r4, #16]
 80125de:	4615      	mov	r5, r2
 80125e0:	e7ba      	b.n	8012558 <_printf_i+0x150>
 80125e2:	682b      	ldr	r3, [r5, #0]
 80125e4:	1d1a      	adds	r2, r3, #4
 80125e6:	602a      	str	r2, [r5, #0]
 80125e8:	681d      	ldr	r5, [r3, #0]
 80125ea:	6862      	ldr	r2, [r4, #4]
 80125ec:	2100      	movs	r1, #0
 80125ee:	4628      	mov	r0, r5
 80125f0:	f7ed fe0e 	bl	8000210 <memchr>
 80125f4:	b108      	cbz	r0, 80125fa <_printf_i+0x1f2>
 80125f6:	1b40      	subs	r0, r0, r5
 80125f8:	6060      	str	r0, [r4, #4]
 80125fa:	6863      	ldr	r3, [r4, #4]
 80125fc:	6123      	str	r3, [r4, #16]
 80125fe:	2300      	movs	r3, #0
 8012600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012604:	e7a8      	b.n	8012558 <_printf_i+0x150>
 8012606:	6923      	ldr	r3, [r4, #16]
 8012608:	462a      	mov	r2, r5
 801260a:	4649      	mov	r1, r9
 801260c:	4640      	mov	r0, r8
 801260e:	47d0      	blx	sl
 8012610:	3001      	adds	r0, #1
 8012612:	d0ab      	beq.n	801256c <_printf_i+0x164>
 8012614:	6823      	ldr	r3, [r4, #0]
 8012616:	079b      	lsls	r3, r3, #30
 8012618:	d413      	bmi.n	8012642 <_printf_i+0x23a>
 801261a:	68e0      	ldr	r0, [r4, #12]
 801261c:	9b03      	ldr	r3, [sp, #12]
 801261e:	4298      	cmp	r0, r3
 8012620:	bfb8      	it	lt
 8012622:	4618      	movlt	r0, r3
 8012624:	e7a4      	b.n	8012570 <_printf_i+0x168>
 8012626:	2301      	movs	r3, #1
 8012628:	4632      	mov	r2, r6
 801262a:	4649      	mov	r1, r9
 801262c:	4640      	mov	r0, r8
 801262e:	47d0      	blx	sl
 8012630:	3001      	adds	r0, #1
 8012632:	d09b      	beq.n	801256c <_printf_i+0x164>
 8012634:	3501      	adds	r5, #1
 8012636:	68e3      	ldr	r3, [r4, #12]
 8012638:	9903      	ldr	r1, [sp, #12]
 801263a:	1a5b      	subs	r3, r3, r1
 801263c:	42ab      	cmp	r3, r5
 801263e:	dcf2      	bgt.n	8012626 <_printf_i+0x21e>
 8012640:	e7eb      	b.n	801261a <_printf_i+0x212>
 8012642:	2500      	movs	r5, #0
 8012644:	f104 0619 	add.w	r6, r4, #25
 8012648:	e7f5      	b.n	8012636 <_printf_i+0x22e>
 801264a:	bf00      	nop
 801264c:	08013b9d 	.word	0x08013b9d
 8012650:	08013bae 	.word	0x08013bae

08012654 <__sread>:
 8012654:	b510      	push	{r4, lr}
 8012656:	460c      	mov	r4, r1
 8012658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801265c:	f000 f8b6 	bl	80127cc <_read_r>
 8012660:	2800      	cmp	r0, #0
 8012662:	bfab      	itete	ge
 8012664:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012666:	89a3      	ldrhlt	r3, [r4, #12]
 8012668:	181b      	addge	r3, r3, r0
 801266a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801266e:	bfac      	ite	ge
 8012670:	6563      	strge	r3, [r4, #84]	; 0x54
 8012672:	81a3      	strhlt	r3, [r4, #12]
 8012674:	bd10      	pop	{r4, pc}

08012676 <__swrite>:
 8012676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801267a:	461f      	mov	r7, r3
 801267c:	898b      	ldrh	r3, [r1, #12]
 801267e:	05db      	lsls	r3, r3, #23
 8012680:	4605      	mov	r5, r0
 8012682:	460c      	mov	r4, r1
 8012684:	4616      	mov	r6, r2
 8012686:	d505      	bpl.n	8012694 <__swrite+0x1e>
 8012688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801268c:	2302      	movs	r3, #2
 801268e:	2200      	movs	r2, #0
 8012690:	f000 f868 	bl	8012764 <_lseek_r>
 8012694:	89a3      	ldrh	r3, [r4, #12]
 8012696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801269a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801269e:	81a3      	strh	r3, [r4, #12]
 80126a0:	4632      	mov	r2, r6
 80126a2:	463b      	mov	r3, r7
 80126a4:	4628      	mov	r0, r5
 80126a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126aa:	f000 b817 	b.w	80126dc <_write_r>

080126ae <__sseek>:
 80126ae:	b510      	push	{r4, lr}
 80126b0:	460c      	mov	r4, r1
 80126b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126b6:	f000 f855 	bl	8012764 <_lseek_r>
 80126ba:	1c43      	adds	r3, r0, #1
 80126bc:	89a3      	ldrh	r3, [r4, #12]
 80126be:	bf15      	itete	ne
 80126c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80126c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80126c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80126ca:	81a3      	strheq	r3, [r4, #12]
 80126cc:	bf18      	it	ne
 80126ce:	81a3      	strhne	r3, [r4, #12]
 80126d0:	bd10      	pop	{r4, pc}

080126d2 <__sclose>:
 80126d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126d6:	f000 b813 	b.w	8012700 <_close_r>
	...

080126dc <_write_r>:
 80126dc:	b538      	push	{r3, r4, r5, lr}
 80126de:	4d07      	ldr	r5, [pc, #28]	; (80126fc <_write_r+0x20>)
 80126e0:	4604      	mov	r4, r0
 80126e2:	4608      	mov	r0, r1
 80126e4:	4611      	mov	r1, r2
 80126e6:	2200      	movs	r2, #0
 80126e8:	602a      	str	r2, [r5, #0]
 80126ea:	461a      	mov	r2, r3
 80126ec:	f7f1 f88c 	bl	8003808 <_write>
 80126f0:	1c43      	adds	r3, r0, #1
 80126f2:	d102      	bne.n	80126fa <_write_r+0x1e>
 80126f4:	682b      	ldr	r3, [r5, #0]
 80126f6:	b103      	cbz	r3, 80126fa <_write_r+0x1e>
 80126f8:	6023      	str	r3, [r4, #0]
 80126fa:	bd38      	pop	{r3, r4, r5, pc}
 80126fc:	2000a638 	.word	0x2000a638

08012700 <_close_r>:
 8012700:	b538      	push	{r3, r4, r5, lr}
 8012702:	4d06      	ldr	r5, [pc, #24]	; (801271c <_close_r+0x1c>)
 8012704:	2300      	movs	r3, #0
 8012706:	4604      	mov	r4, r0
 8012708:	4608      	mov	r0, r1
 801270a:	602b      	str	r3, [r5, #0]
 801270c:	f7f2 fc61 	bl	8004fd2 <_close>
 8012710:	1c43      	adds	r3, r0, #1
 8012712:	d102      	bne.n	801271a <_close_r+0x1a>
 8012714:	682b      	ldr	r3, [r5, #0]
 8012716:	b103      	cbz	r3, 801271a <_close_r+0x1a>
 8012718:	6023      	str	r3, [r4, #0]
 801271a:	bd38      	pop	{r3, r4, r5, pc}
 801271c:	2000a638 	.word	0x2000a638

08012720 <_fstat_r>:
 8012720:	b538      	push	{r3, r4, r5, lr}
 8012722:	4d07      	ldr	r5, [pc, #28]	; (8012740 <_fstat_r+0x20>)
 8012724:	2300      	movs	r3, #0
 8012726:	4604      	mov	r4, r0
 8012728:	4608      	mov	r0, r1
 801272a:	4611      	mov	r1, r2
 801272c:	602b      	str	r3, [r5, #0]
 801272e:	f7f2 fc5c 	bl	8004fea <_fstat>
 8012732:	1c43      	adds	r3, r0, #1
 8012734:	d102      	bne.n	801273c <_fstat_r+0x1c>
 8012736:	682b      	ldr	r3, [r5, #0]
 8012738:	b103      	cbz	r3, 801273c <_fstat_r+0x1c>
 801273a:	6023      	str	r3, [r4, #0]
 801273c:	bd38      	pop	{r3, r4, r5, pc}
 801273e:	bf00      	nop
 8012740:	2000a638 	.word	0x2000a638

08012744 <_isatty_r>:
 8012744:	b538      	push	{r3, r4, r5, lr}
 8012746:	4d06      	ldr	r5, [pc, #24]	; (8012760 <_isatty_r+0x1c>)
 8012748:	2300      	movs	r3, #0
 801274a:	4604      	mov	r4, r0
 801274c:	4608      	mov	r0, r1
 801274e:	602b      	str	r3, [r5, #0]
 8012750:	f7f2 fc5b 	bl	800500a <_isatty>
 8012754:	1c43      	adds	r3, r0, #1
 8012756:	d102      	bne.n	801275e <_isatty_r+0x1a>
 8012758:	682b      	ldr	r3, [r5, #0]
 801275a:	b103      	cbz	r3, 801275e <_isatty_r+0x1a>
 801275c:	6023      	str	r3, [r4, #0]
 801275e:	bd38      	pop	{r3, r4, r5, pc}
 8012760:	2000a638 	.word	0x2000a638

08012764 <_lseek_r>:
 8012764:	b538      	push	{r3, r4, r5, lr}
 8012766:	4d07      	ldr	r5, [pc, #28]	; (8012784 <_lseek_r+0x20>)
 8012768:	4604      	mov	r4, r0
 801276a:	4608      	mov	r0, r1
 801276c:	4611      	mov	r1, r2
 801276e:	2200      	movs	r2, #0
 8012770:	602a      	str	r2, [r5, #0]
 8012772:	461a      	mov	r2, r3
 8012774:	f7f2 fc54 	bl	8005020 <_lseek>
 8012778:	1c43      	adds	r3, r0, #1
 801277a:	d102      	bne.n	8012782 <_lseek_r+0x1e>
 801277c:	682b      	ldr	r3, [r5, #0]
 801277e:	b103      	cbz	r3, 8012782 <_lseek_r+0x1e>
 8012780:	6023      	str	r3, [r4, #0]
 8012782:	bd38      	pop	{r3, r4, r5, pc}
 8012784:	2000a638 	.word	0x2000a638

08012788 <memmove>:
 8012788:	4288      	cmp	r0, r1
 801278a:	b510      	push	{r4, lr}
 801278c:	eb01 0402 	add.w	r4, r1, r2
 8012790:	d902      	bls.n	8012798 <memmove+0x10>
 8012792:	4284      	cmp	r4, r0
 8012794:	4623      	mov	r3, r4
 8012796:	d807      	bhi.n	80127a8 <memmove+0x20>
 8012798:	1e43      	subs	r3, r0, #1
 801279a:	42a1      	cmp	r1, r4
 801279c:	d008      	beq.n	80127b0 <memmove+0x28>
 801279e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80127a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80127a6:	e7f8      	b.n	801279a <memmove+0x12>
 80127a8:	4402      	add	r2, r0
 80127aa:	4601      	mov	r1, r0
 80127ac:	428a      	cmp	r2, r1
 80127ae:	d100      	bne.n	80127b2 <memmove+0x2a>
 80127b0:	bd10      	pop	{r4, pc}
 80127b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80127b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80127ba:	e7f7      	b.n	80127ac <memmove+0x24>

080127bc <_malloc_usable_size_r>:
 80127bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127c0:	1f18      	subs	r0, r3, #4
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	bfbc      	itt	lt
 80127c6:	580b      	ldrlt	r3, [r1, r0]
 80127c8:	18c0      	addlt	r0, r0, r3
 80127ca:	4770      	bx	lr

080127cc <_read_r>:
 80127cc:	b538      	push	{r3, r4, r5, lr}
 80127ce:	4d07      	ldr	r5, [pc, #28]	; (80127ec <_read_r+0x20>)
 80127d0:	4604      	mov	r4, r0
 80127d2:	4608      	mov	r0, r1
 80127d4:	4611      	mov	r1, r2
 80127d6:	2200      	movs	r2, #0
 80127d8:	602a      	str	r2, [r5, #0]
 80127da:	461a      	mov	r2, r3
 80127dc:	f7f2 fbdc 	bl	8004f98 <_read>
 80127e0:	1c43      	adds	r3, r0, #1
 80127e2:	d102      	bne.n	80127ea <_read_r+0x1e>
 80127e4:	682b      	ldr	r3, [r5, #0]
 80127e6:	b103      	cbz	r3, 80127ea <_read_r+0x1e>
 80127e8:	6023      	str	r3, [r4, #0]
 80127ea:	bd38      	pop	{r3, r4, r5, pc}
 80127ec:	2000a638 	.word	0x2000a638

080127f0 <_init>:
 80127f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127f2:	bf00      	nop
 80127f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127f6:	bc08      	pop	{r3}
 80127f8:	469e      	mov	lr, r3
 80127fa:	4770      	bx	lr

080127fc <_fini>:
 80127fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127fe:	bf00      	nop
 8012800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012802:	bc08      	pop	{r3}
 8012804:	469e      	mov	lr, r3
 8012806:	4770      	bx	lr
