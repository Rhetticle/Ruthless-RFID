
Ruthless RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d8  0801064c  0801064c  0002064c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011024  08011024  00030700  2**0
                  CONTENTS
  4 .ARM          00000008  08011024  08011024  00021024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801102c  0801102c  00030700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801102c  0801102c  0002102c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011030  08011030  00021030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000700  20000000  08011034  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000077e0  20000700  08011734  00030700  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007ee0  08011734  00037ee0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030700  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028734  00000000  00000000  00030730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a7a  00000000  00000000  00058e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002158  00000000  00000000  0005e8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f18  00000000  00000000  00060a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8f4  00000000  00000000  00062950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027a65  00000000  00000000  00080244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f090  00000000  00000000  000a7ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146d39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000919c  00000000  00000000  00146d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000700 	.word	0x20000700
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010634 	.word	0x08010634

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000704 	.word	0x20000704
 80001dc:	08010634 	.word	0x08010634

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <MFRC_REGW>:
 * @param addr: register address
 *
 * @param data: value to write to register
 */

PCD_StatusTypeDef MFRC_REGW(uint8_t addr,uint8_t data){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af04      	add	r7, sp, #16
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460a      	mov	r2, r1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	4613      	mov	r3, r2
 8000bae:	71bb      	strb	r3, [r7, #6]
	uint8_t value=data;
 8000bb0:	79bb      	ldrb	r3, [r7, #6]
 8000bb2:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, addr, 1, &value, 1, 100)!=HAL_OK){
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	2364      	movs	r3, #100	; 0x64
 8000bba:	9302      	str	r3, [sp, #8]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	f107 030f 	add.w	r3, r7, #15
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	2150      	movs	r1, #80	; 0x50
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <MFRC_REGW+0x44>)
 8000bcc:	f003 fdd8 	bl	8004780 <HAL_I2C_Mem_Write>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MFRC_REGW+0x3a>
		return(PCD_I2C_ERR);
 8000bd6:	23bb      	movs	r3, #187	; 0xbb
 8000bd8:	e000      	b.n	8000bdc <MFRC_REGW+0x3c>
	}
	else{
		return(PCD_OK);
 8000bda:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000071c 	.word	0x2000071c

08000be8 <MFRC_REGR>:
 * @param addr: register address
 *
 * @param data: pointer to store read value
 */

PCD_StatusTypeDef MFRC_REGR(uint8_t addr,uint8_t* data){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af04      	add	r7, sp, #16
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, addr, 1, data, 1, 100)!=HAL_OK){
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	2364      	movs	r3, #100	; 0x64
 8000bfa:	9302      	str	r3, [sp, #8]
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2301      	movs	r3, #1
 8000c06:	2150      	movs	r1, #80	; 0x50
 8000c08:	4806      	ldr	r0, [pc, #24]	; (8000c24 <MFRC_REGR+0x3c>)
 8000c0a:	f003 feb3 	bl	8004974 <HAL_I2C_Mem_Read>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MFRC_REGR+0x30>
		return(PCD_I2C_ERR);
 8000c14:	23bb      	movs	r3, #187	; 0xbb
 8000c16:	e000      	b.n	8000c1a <MFRC_REGR+0x32>
	}
	else{
		return(PCD_OK);
 8000c18:	23cc      	movs	r3, #204	; 0xcc
	}
	HAL_Delay(1);
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000071c 	.word	0x2000071c

08000c28 <MFRC_FIFOW>:
 * @param data: Array of data to write to FIFO
 *
 * @param size: Size of array (bytes)
 */

PCD_StatusTypeDef MFRC_FIFOW(uint8_t* data,uint8_t size){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af04      	add	r7, sp, #16
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e018      	b.n	8000c6c <MFRC_FIFOW+0x44>
		if(HAL_I2C_Mem_Write(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	4413      	add	r3, r2
 8000c40:	2264      	movs	r2, #100	; 0x64
 8000c42:	9202      	str	r2, [sp, #8]
 8000c44:	2201      	movs	r2, #1
 8000c46:	9201      	str	r2, [sp, #4]
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	2209      	movs	r2, #9
 8000c4e:	2150      	movs	r1, #80	; 0x50
 8000c50:	480b      	ldr	r0, [pc, #44]	; (8000c80 <MFRC_FIFOW+0x58>)
 8000c52:	f003 fd95 	bl	8004780 <HAL_I2C_Mem_Write>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MFRC_FIFOW+0x38>
			return(PCD_I2C_ERR);
 8000c5c:	23bb      	movs	r3, #187	; 0xbb
 8000c5e:	e00a      	b.n	8000c76 <MFRC_FIFOW+0x4e>

		}
		HAL_Delay(1);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f003 f975 	bl	8003f50 <HAL_Delay>
	for(int i=0;i<size;i++){
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dbe2      	blt.n	8000c3a <MFRC_FIFOW+0x12>

	}
	return(PCD_OK);
 8000c74:	23cc      	movs	r3, #204	; 0xcc
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000071c 	.word	0x2000071c

08000c84 <MFRC_FIFOR>:
 * @param data: Array to store read values (Ensure array is large enough)
 *
 * @param size: Number of bytes to read from FIFO
 */

PCD_StatusTypeDef MFRC_FIFOR(uint8_t* data,uint8_t size){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af04      	add	r7, sp, #16
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<size;i++){
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	e018      	b.n	8000cc8 <MFRC_FIFOR+0x44>
		if(HAL_I2C_Mem_Read(&hi2c1, MFRC_ADDR<<1, 0x09, 1, &data[i], 1, 100)!=HAL_OK){
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	2264      	movs	r2, #100	; 0x64
 8000c9e:	9202      	str	r2, [sp, #8]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	9201      	str	r2, [sp, #4]
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	2209      	movs	r2, #9
 8000caa:	2150      	movs	r1, #80	; 0x50
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <MFRC_FIFOR+0x58>)
 8000cae:	f003 fe61 	bl	8004974 <HAL_I2C_Mem_Read>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MFRC_FIFOR+0x38>
			return(PCD_I2C_ERR);
 8000cb8:	23bb      	movs	r3, #187	; 0xbb
 8000cba:	e00a      	b.n	8000cd2 <MFRC_FIFOR+0x4e>
		}
		HAL_Delay(1);
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f003 f947 	bl	8003f50 <HAL_Delay>
	for(int i=0;i<size;i++){
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbe2      	blt.n	8000c96 <MFRC_FIFOR+0x12>

	}
	return(PCD_OK);
 8000cd0:	23cc      	movs	r3, #204	; 0xcc
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000071c 	.word	0x2000071c

08000ce0 <MFRC_ANTON>:
	uint8_t value;
	MFRC_REGR(0x37,&value); //Expect 0x91 or 0x92
	CDC_Transmit_FS(&value,1);
}

void MFRC_ANTON(void){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	uint8_t value;
	MFRC_REGR(TX_CONT, &value);
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	4619      	mov	r1, r3
 8000cea:	2014      	movs	r0, #20
 8000cec:	f7ff ff7c 	bl	8000be8 <MFRC_REGR>
	if ((value & 0x03) != 0x03) {
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d007      	beq.n	8000d0a <MFRC_ANTON+0x2a>
		MFRC_REGW(TX_CONT, value | 0x03);
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f043 0303 	orr.w	r3, r3, #3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	4619      	mov	r1, r3
 8000d04:	2014      	movs	r0, #20
 8000d06:	f7ff ff4b 	bl	8000ba0 <MFRC_REGW>
	}
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <ClearBitMask>:
	uint8_t value;
	MFRC_REGR(RFCfgReg,&value);
	MFRC_REGW(RFCfgReg,value|0x70); //Set receiver gain to 48dB
}

void ClearBitMask(uint8_t addr,uint8_t mask){
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	460a      	mov	r2, r1
 8000d1c:	71fb      	strb	r3, [r7, #7]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	MFRC_REGR(addr,&tmp);
 8000d22:	f107 020f 	add.w	r2, r7, #15
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	4611      	mov	r1, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff5c 	bl	8000be8 <MFRC_REGR>
	MFRC_REGW(addr,tmp&(~mask));
 8000d30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	b25a      	sxtb	r2, r3
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	b25b      	sxtb	r3, r3
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	b25b      	sxtb	r3, r3
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff2a 	bl	8000ba0 <MFRC_REGW>
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <MFRC_ANTOFF>:

void MFRC_ANTOFF(void){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	ClearBitMask(TX_CONT,0x03);
 8000d58:	2103      	movs	r1, #3
 8000d5a:	2014      	movs	r0, #20
 8000d5c:	f7ff ffd9 	bl	8000d12 <ClearBitMask>
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <CALC_CRC>:
 *
 * @param result: Array to store the two bytes of CRC
 *
 * */

PCD_StatusTypeDef CALC_CRC(uint8_t* data,uint8_t size,uint8_t* result){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	72fb      	strb	r3, [r7, #11]
	uint8_t CRCIRQ;
	MFRC_REGW(CMD_REG,IDLE); //clear command register
 8000d72:	2100      	movs	r1, #0
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff ff13 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(DIVIRQ,0x04); //Clear interrupt bits so we can detect when CRCIRQ is set
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	2005      	movs	r0, #5
 8000d7e:	f7ff ff0f 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80);
 8000d82:	2180      	movs	r1, #128	; 0x80
 8000d84:	200a      	movs	r0, #10
 8000d86:	f7ff ff0b 	bl	8000ba0 <MFRC_REGW>
	MFRC_FIFOW(data, size); //Write data to FIFO ready for CRC calculation
 8000d8a:	7afb      	ldrb	r3, [r7, #11]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f7ff ff4a 	bl	8000c28 <MFRC_FIFOW>
	MFRC_REGW(CMD_REG,CALCCRC); //Execute CRC calculation command
 8000d94:	2103      	movs	r1, #3
 8000d96:	2001      	movs	r0, #1
 8000d98:	f7ff ff02 	bl	8000ba0 <MFRC_REGW>
	HAL_Delay(100);
 8000d9c:	2064      	movs	r0, #100	; 0x64
 8000d9e:	f003 f8d7 	bl	8003f50 <HAL_Delay>
	MFRC_REGR(DIVIRQ,&CRCIRQ);
 8000da2:	f107 0317 	add.w	r3, r7, #23
 8000da6:	4619      	mov	r1, r3
 8000da8:	2005      	movs	r0, #5
 8000daa:	f7ff ff1d 	bl	8000be8 <MFRC_REGR>
	if((CRCIRQ&0x04)!=0x04){
 8000dae:	7dfb      	ldrb	r3, [r7, #23]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <CALC_CRC+0x58>
		return(CRC_ERR); //CRC calculation took too long
 8000db8:	23ee      	movs	r3, #238	; 0xee
 8000dba:	e00e      	b.n	8000dda <CALC_CRC+0x76>
	}
	MFRC_REGW(CMD_REG,IDLE);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff feee 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGR(CRCL, &result[0]);
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	2022      	movs	r0, #34	; 0x22
 8000dc8:	f7ff ff0e 	bl	8000be8 <MFRC_REGR>
	MFRC_REGR(CRCH, &result[1]); //Store the 16-bit CRC in result
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	2021      	movs	r0, #33	; 0x21
 8000dd4:	f7ff ff08 	bl	8000be8 <MFRC_REGR>
	return(PCD_OK);
 8000dd8:	23cc      	movs	r3, #204	; 0xcc

}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <MFRC_INIT>:
/* Initialise MFRC to begin transceiving
 *
 * Code is written to interface with MIFARE Ultralight PICC. Different PICCs will need different baud rate.
 */

PCD_StatusTypeDef MFRC_INIT(void){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, NRST, 1); //Make sure MFRC is not reset
 8000de8:	2201      	movs	r2, #1
 8000dea:	2120      	movs	r1, #32
 8000dec:	4815      	ldr	r0, [pc, #84]	; (8000e44 <MFRC_INIT+0x60>)
 8000dee:	f003 fb51 	bl	8004494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, NRST, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2120      	movs	r1, #32
 8000df6:	4813      	ldr	r0, [pc, #76]	; (8000e44 <MFRC_INIT+0x60>)
 8000df8:	f003 fb4c 	bl	8004494 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f003 f8a7 	bl	8003f50 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, NRST, 1);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2120      	movs	r1, #32
 8000e06:	480f      	ldr	r0, [pc, #60]	; (8000e44 <MFRC_INIT+0x60>)
 8000e08:	f003 fb44 	bl	8004494 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000e0c:	2032      	movs	r0, #50	; 0x32
 8000e0e:	f003 f89f 	bl	8003f50 <HAL_Delay>
	MFRC_REGW(TX_REG,0x00);
 8000e12:	2100      	movs	r1, #0
 8000e14:	2012      	movs	r0, #18
 8000e16:	f7ff fec3 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(RX_REG,0x00);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2013      	movs	r0, #19
 8000e1e:	f7ff febf 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(MODWIDTH,0x26);
 8000e22:	2126      	movs	r1, #38	; 0x26
 8000e24:	2024      	movs	r0, #36	; 0x24
 8000e26:	f7ff febb 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(TXASK,0x40); //Force 100% ASK modulation regardless of ModGsPrereg
 8000e2a:	2140      	movs	r1, #64	; 0x40
 8000e2c:	2015      	movs	r0, #21
 8000e2e:	f7ff feb7 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(MODE_REG,0x3D);
 8000e32:	213d      	movs	r1, #61	; 0x3d
 8000e34:	2011      	movs	r0, #17
 8000e36:	f7ff feb3 	bl	8000ba0 <MFRC_REGW>
	MFRC_ANTON();
 8000e3a:	f7ff ff51 	bl	8000ce0 <MFRC_ANTON>
	return(PCD_OK);
 8000e3e:	23cc      	movs	r3, #204	; 0xcc



}
 8000e40:	4618      	mov	r0, r3
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40020400 	.word	0x40020400

08000e48 <MFRC_TRANSCEIVE>:
 * !!Check PICC datasheet to see what data is needed in sendData i.e. Read/Write command, response bytes etc!!
 * !!When writing ensure correct address, most MIFARE PICCs contain OTP (one-time-programmable) sections as well as
 * lock bytes to remove write permissions from certain pages. These operations are NOT reversable!!
 */

PCD_StatusTypeDef MFRC_TRANSCEIVE(uint8_t* sendData,uint8_t sendsize,uint8_t* recdata,uint8_t recsize,uint8_t validbits){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	461a      	mov	r2, r3
 8000e54:	460b      	mov	r3, r1
 8000e56:	72fb      	strb	r3, [r7, #11]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	72bb      	strb	r3, [r7, #10]
	uint8_t IRQval=0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	75fb      	strb	r3, [r7, #23]
	uint8_t BIT_val=0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	75bb      	strb	r3, [r7, #22]

	MFRC_REGW(CMD_REG,IDLE); //Clear command register
 8000e64:	2100      	movs	r1, #0
 8000e66:	2001      	movs	r0, #1
 8000e68:	f7ff fe9a 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(IRQ_REG,0x7F);
 8000e6c:	217f      	movs	r1, #127	; 0x7f
 8000e6e:	2004      	movs	r0, #4
 8000e70:	f7ff fe96 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(FIFO_LEV,0x80); //Clear FIFO buffer
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	200a      	movs	r0, #10
 8000e78:	f7ff fe92 	bl	8000ba0 <MFRC_REGW>
	MFRC_FIFOW(sendData,sendsize); //Write data to FIFO ready for transmission
 8000e7c:	7afb      	ldrb	r3, [r7, #11]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	f7ff fed1 	bl	8000c28 <MFRC_FIFOW>
	MFRC_REGW(BITFRAME,validbits);
 8000e86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	200d      	movs	r0, #13
 8000e8e:	f7ff fe87 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGW(CMD_REG,TRANSCEIVE); //Send FIFO data and receive PICC response
 8000e92:	210c      	movs	r1, #12
 8000e94:	2001      	movs	r0, #1
 8000e96:	f7ff fe83 	bl	8000ba0 <MFRC_REGW>
	MFRC_REGR(BITFRAME,&BIT_val);
 8000e9a:	f107 0316 	add.w	r3, r7, #22
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	200d      	movs	r0, #13
 8000ea2:	f7ff fea1 	bl	8000be8 <MFRC_REGR>
	MFRC_REGW(BITFRAME,(BIT_val|0x80)); //Start send bit
 8000ea6:	7dbb      	ldrb	r3, [r7, #22]
 8000ea8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4619      	mov	r1, r3
 8000eb0:	200d      	movs	r0, #13
 8000eb2:	f7ff fe75 	bl	8000ba0 <MFRC_REGW>
	while(IRQval&0x30!=0x30){ //Hang here until RXIRQ and IDLEIRQ bits are set
 8000eb6:	bf00      	nop
		MFRC_REGR(IRQ_REG,&IRQval);
	}
	HAL_Delay(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f003 f849 	bl	8003f50 <HAL_Delay>
	MFRC_FIFOR(recdata,recsize); //Read and store received data
 8000ebe:	7abb      	ldrb	r3, [r7, #10]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fede 	bl	8000c84 <MFRC_FIFOR>


	return(PCD_OK);
 8000ec8:	23cc      	movs	r3, #204	; 0xcc
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <MFRC_WUPA>:
 * Function to issue the WUPA command to PICC (We use this to go from HALT to READY state check ISO standard)
 *
 * @param reponse: PICC reponse to WUPA (Expect 0x44, 0x00 for ULTRALIGHT
 * */

PCD_StatusTypeDef MFRC_WUPA(uint8_t* response){
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af02      	add	r7, sp, #8
 8000ed8:	6078      	str	r0, [r7, #4]
	uint8_t WUPA=0x52;
 8000eda:	2352      	movs	r3, #82	; 0x52
 8000edc:	73fb      	strb	r3, [r7, #15]
	ClearBitMask(COLLREG, 0x80);
 8000ede:	2180      	movs	r1, #128	; 0x80
 8000ee0:	200e      	movs	r0, #14
 8000ee2:	f7ff ff16 	bl	8000d12 <ClearBitMask>
	if(MFRC_TRANSCEIVE(&WUPA,1, response, 2, 7)!=PCD_OK){//WUPA is a 7-bit command
 8000ee6:	f107 000f 	add.w	r0, r7, #15
 8000eea:	2307      	movs	r3, #7
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2302      	movs	r3, #2
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	f7ff ffa8 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2bcc      	cmp	r3, #204	; 0xcc
 8000efc:	d001      	beq.n	8000f02 <MFRC_WUPA+0x30>
		return(PCD_COMM_ERR);
 8000efe:	23aa      	movs	r3, #170	; 0xaa
 8000f00:	e000      	b.n	8000f04 <MFRC_WUPA+0x32>
	}

	else{
		return(PCD_OK);
 8000f02:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <MFRC_HALTA>:

/*
 * Function to issue HALTA command to PICC (Change from READY to HALT state) Send WUPA and select sequence to re-select PICC
 * */

PCD_StatusTypeDef MFRC_HALTA(void){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af02      	add	r7, sp, #8
	uint8_t transaction[4]={ULTRA_HALTA,0x00};
 8000f12:	2350      	movs	r3, #80	; 0x50
 8000f14:	60fb      	str	r3, [r7, #12]
	uint8_t CRC_val[2];
	uint8_t ack;

	if(CALC_CRC(transaction, 2, CRC_val)!=PCD_OK){
 8000f16:	f107 0208 	add.w	r2, r7, #8
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	2102      	movs	r1, #2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff1f 	bl	8000d64 <CALC_CRC>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2bcc      	cmp	r3, #204	; 0xcc
 8000f2a:	d001      	beq.n	8000f30 <MFRC_HALTA+0x24>
		return(CRC_ERR);
 8000f2c:	23ee      	movs	r3, #238	; 0xee
 8000f2e:	e013      	b.n	8000f58 <MFRC_HALTA+0x4c>
	}
	memcpy(transaction+2,CRC_val,2);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	3302      	adds	r3, #2
 8000f36:	893a      	ldrh	r2, [r7, #8]
 8000f38:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, &ack, 1, 0)!=PCD_OK){
 8000f3a:	1dfa      	adds	r2, r7, #7
 8000f3c:	f107 000c 	add.w	r0, r7, #12
 8000f40:	2300      	movs	r3, #0
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2301      	movs	r3, #1
 8000f46:	2104      	movs	r1, #4
 8000f48:	f7ff ff7e 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2bcc      	cmp	r3, #204	; 0xcc
 8000f50:	d001      	beq.n	8000f56 <MFRC_HALTA+0x4a>
		return(PCD_COMM_ERR);
 8000f52:	23aa      	movs	r3, #170	; 0xaa
 8000f54:	e000      	b.n	8000f58 <MFRC_HALTA+0x4c>
	}

	else{
		return(PCD_OK);
 8000f56:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <MFRC_ANTICOL1>:
 * Function to transceive anticollision cascade level 1 command (Second step after REQA to select PICC)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL1(uint8_t* reponse){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x93,0x20};
 8000f68:	f242 0393 	movw	r3, #8339	; 0x2093
 8000f6c:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8000f6e:	2180      	movs	r1, #128	; 0x80
 8000f70:	200e      	movs	r0, #14
 8000f72:	f7ff fece 	bl	8000d12 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 8000f76:	f107 000c 	add.w	r0, r7, #12
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2305      	movs	r3, #5
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	2102      	movs	r1, #2
 8000f84:	f7ff ff60 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2bcc      	cmp	r3, #204	; 0xcc
 8000f8c:	d001      	beq.n	8000f92 <MFRC_ANTICOL1+0x32>
		return(PCD_COMM_ERR);
 8000f8e:	23aa      	movs	r3, #170	; 0xaa
 8000f90:	e000      	b.n	8000f94 <MFRC_ANTICOL1+0x34>
	}
	else{
		return(PCD_OK);
 8000f92:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <MFRC_SEL1>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x04 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL1(uint8_t* anticol,uint8_t* response){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x93,0x70};
 8000fa6:	f247 0393 	movw	r3, #28819	; 0x7093
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	3302      	adds	r3, #2
 8000fbc:	2205      	movs	r2, #5
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f00e fe9f 	bl	800fd04 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 8000fc6:	f107 0208 	add.w	r2, r7, #8
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2107      	movs	r1, #7
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fec7 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	3307      	adds	r3, #7
 8000fdc:	893a      	ldrh	r2, [r7, #8]
 8000fde:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8000fe0:	f107 000c 	add.w	r0, r7, #12
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2303      	movs	r3, #3
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	2109      	movs	r1, #9
 8000fee:	f7ff ff2b 	bl	8000e48 <MFRC_TRANSCEIVE>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2bcc      	cmp	r3, #204	; 0xcc
 8000ff6:	d001      	beq.n	8000ffc <MFRC_SEL1+0x60>
		return(PCD_COMM_ERR);
 8000ff8:	23aa      	movs	r3, #170	; 0xaa
 8000ffa:	e000      	b.n	8000ffe <MFRC_SEL1+0x62>
	}

	else{
		return(PCD_OK);
 8000ffc:	23cc      	movs	r3, #204	; 0xcc
	}

}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <MFRC_ANTICOL2>:
 * Function to transceive anticollision cascade level 2 command (Cascade level 1 commands must be performed first)
 *
 * @param response: Array to store PICC response to anticollision command
 * */

PCD_StatusTypeDef MFRC_ANTICOL2(uint8_t* reponse){
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af02      	add	r7, sp, #8
 800100c:	6078      	str	r0, [r7, #4]
	uint8_t transaction[]={0x95,0x20};
 800100e:	f242 0395 	movw	r3, #8341	; 0x2095
 8001012:	81bb      	strh	r3, [r7, #12]
	ClearBitMask(COLLREG, 0x80);
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	200e      	movs	r0, #14
 8001018:	f7ff fe7b 	bl	8000d12 <ClearBitMask>
	if(MFRC_TRANSCEIVE(transaction, 2, reponse, 5, 0)!=PCD_OK){
 800101c:	f107 000c 	add.w	r0, r7, #12
 8001020:	2300      	movs	r3, #0
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2305      	movs	r3, #5
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	2102      	movs	r1, #2
 800102a:	f7ff ff0d 	bl	8000e48 <MFRC_TRANSCEIVE>
 800102e:	4603      	mov	r3, r0
 8001030:	2bcc      	cmp	r3, #204	; 0xcc
 8001032:	d001      	beq.n	8001038 <MFRC_ANTICOL2+0x32>
		return(PCD_COMM_ERR);
 8001034:	23aa      	movs	r3, #170	; 0xaa
 8001036:	e000      	b.n	800103a <MFRC_ANTICOL2+0x34>
	}
	else{
		return(PCD_OK);
 8001038:	23cc      	movs	r3, #204	; 0xcc
	}
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <MFRC_SEL2>:
 *
 * @param response: Array to store PICC response to command (Expect SAK of 0x00 and two bytes CRC)
 *
 * */

PCD_StatusTypeDef MFRC_SEL2(uint8_t* anticol,uint8_t* response){
 8001042:	b580      	push	{r7, lr}
 8001044:	b088      	sub	sp, #32
 8001046:	af02      	add	r7, sp, #8
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
	uint8_t transaction[9]={0x95,0x70};
 800104c:	f247 0395 	movw	r3, #28821	; 0x7095
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	711a      	strb	r2, [r3, #4]
	uint8_t CRC_val[2];

	memcpy(transaction+2,anticol,5);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	3302      	adds	r3, #2
 8001062:	2205      	movs	r2, #5
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4618      	mov	r0, r3
 8001068:	f00e fe4c 	bl	800fd04 <memcpy>
	CALC_CRC(transaction, 7, CRC_val);
 800106c:	f107 0208 	add.w	r2, r7, #8
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2107      	movs	r1, #7
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fe74 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+7,CRC_val,2);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	3307      	adds	r3, #7
 8001082:	893a      	ldrh	r2, [r7, #8]
 8001084:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 9, response, 3, 0)!=PCD_OK){
 8001086:	f107 000c 	add.w	r0, r7, #12
 800108a:	2300      	movs	r3, #0
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2303      	movs	r3, #3
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	2109      	movs	r1, #9
 8001094:	f7ff fed8 	bl	8000e48 <MFRC_TRANSCEIVE>
 8001098:	4603      	mov	r3, r0
 800109a:	2bcc      	cmp	r3, #204	; 0xcc
 800109c:	d001      	beq.n	80010a2 <MFRC_SEL2+0x60>
		return(PCD_COMM_ERR);
 800109e:	23aa      	movs	r3, #170	; 0xaa
 80010a0:	e000      	b.n	80010a4 <MFRC_SEL2+0x62>
	}

	else{
		return(PCD_OK);
 80010a2:	23cc      	movs	r3, #204	; 0xcc
	}

}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <PICC_Select>:

/*
 * Function to select the MIFARE ULTRALIGHT PICC (Don't forget to call REQA on first power up or use PICC_CHECK below)
 * */

PCD_StatusTypeDef PICC_Select(void){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
	  uint8_t SELECT1[3];
	  uint8_t ANTICOL2[5];
	  uint8_t SELECT2[3];
	  uint8_t ATQA[2];

	  if (PICC_CHECK() != PCD_OK) {
 80010b2:	f000 f839 	bl	8001128 <PICC_CHECK>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2bcc      	cmp	r3, #204	; 0xcc
 80010ba:	d001      	beq.n	80010c0 <PICC_Select+0x14>
		  return PCD_COMM_ERR;
 80010bc:	23aa      	movs	r3, #170	; 0xaa
 80010be:	e02f      	b.n	8001120 <PICC_Select+0x74>
	  }
	  MFRC_WUPA(ATQA);
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff05 	bl	8000ed2 <MFRC_WUPA>
	  MFRC_ANTICOL1(ANTICOL1);
 80010c8:	f107 0318 	add.w	r3, r7, #24
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff47 	bl	8000f60 <MFRC_ANTICOL1>
	  if(ANTICOL1[0]!=0x88){
 80010d2:	7e3b      	ldrb	r3, [r7, #24]
 80010d4:	2b88      	cmp	r3, #136	; 0x88
 80010d6:	d001      	beq.n	80010dc <PICC_Select+0x30>
		  return(PCD_COMM_ERR);
 80010d8:	23aa      	movs	r3, #170	; 0xaa
 80010da:	e021      	b.n	8001120 <PICC_Select+0x74>
	  }
	  HAL_Delay(10);
 80010dc:	200a      	movs	r0, #10
 80010de:	f002 ff37 	bl	8003f50 <HAL_Delay>
	  MFRC_SEL1(ANTICOL1, SELECT1);
 80010e2:	f107 0214 	add.w	r2, r7, #20
 80010e6:	f107 0318 	add.w	r3, r7, #24
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff55 	bl	8000f9c <MFRC_SEL1>
	  HAL_Delay(10);
 80010f2:	200a      	movs	r0, #10
 80010f4:	f002 ff2c 	bl	8003f50 <HAL_Delay>
	  MFRC_ANTICOL2(ANTICOL2);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff82 	bl	8001006 <MFRC_ANTICOL2>
	  HAL_Delay(10);
 8001102:	200a      	movs	r0, #10
 8001104:	f002 ff24 	bl	8003f50 <HAL_Delay>
	  MFRC_SEL2(ANTICOL2, SELECT2);
 8001108:	f107 0208 	add.w	r2, r7, #8
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff95 	bl	8001042 <MFRC_SEL2>
	  HAL_Delay(10);
 8001118:	200a      	movs	r0, #10
 800111a:	f002 ff19 	bl	8003f50 <HAL_Delay>
	  return(PCD_OK);
 800111e:	23cc      	movs	r3, #204	; 0xcc
}
 8001120:	4618      	mov	r0, r3
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <PICC_CHECK>:

/*
 * Function to check for PICC in field
 * */

PCD_StatusTypeDef PICC_CHECK(void){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	uint8_t ATQA[2];
	if(MFRC_WUPA(ATQA)!=PCD_OK){
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fece 	bl	8000ed2 <MFRC_WUPA>
 8001136:	4603      	mov	r3, r0
 8001138:	2bcc      	cmp	r3, #204	; 0xcc
 800113a:	d001      	beq.n	8001140 <PICC_CHECK+0x18>
		return(PCD_COMM_ERR);
 800113c:	23aa      	movs	r3, #170	; 0xaa
 800113e:	e00a      	b.n	8001156 <PICC_CHECK+0x2e>
	}

	else{
		if((ATQA[0]!=ULTRA_ATQA0) || (ATQA[1] != ULTRA_ATQA1)){
 8001140:	793b      	ldrb	r3, [r7, #4]
 8001142:	2b44      	cmp	r3, #68	; 0x44
 8001144:	d102      	bne.n	800114c <PICC_CHECK+0x24>
 8001146:	797b      	ldrb	r3, [r7, #5]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <PICC_CHECK+0x28>
			return(PCD_COMM_ERR);
 800114c:	23aa      	movs	r3, #170	; 0xaa
 800114e:	e002      	b.n	8001156 <PICC_CHECK+0x2e>
		}
		else{
			MFRC_HALTA();
 8001150:	f7ff fedc 	bl	8000f0c <MFRC_HALTA>
			return(PCD_OK);
 8001154:	23cc      	movs	r3, #204	; 0xcc
		}
	}
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <UL_READ>:
 *
 * @param data: Array to store read data
 *
 * */

PCD_StatusTypeDef UL_READ(uint8_t addr,uint8_t* data){
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af02      	add	r7, sp, #8
 8001164:	4603      	mov	r3, r0
 8001166:	6039      	str	r1, [r7, #0]
 8001168:	71fb      	strb	r3, [r7, #7]

	uint8_t transaction[4]={ULTRA_READ,addr};
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	2330      	movs	r3, #48	; 0x30
 8001170:	733b      	strb	r3, [r7, #12]
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	737b      	strb	r3, [r7, #13]
	uint8_t CRC_val[2];

	CALC_CRC(transaction, 2, CRC_val);
 8001176:	f107 0208 	add.w	r2, r7, #8
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	2102      	movs	r1, #2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fdef 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+2,CRC_val,2);
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	3302      	adds	r3, #2
 800118c:	893a      	ldrh	r2, [r7, #8]
 800118e:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 4, data, UL_READSIZE, 0)!=PCD_OK){
 8001190:	f107 000c 	add.w	r0, r7, #12
 8001194:	2300      	movs	r3, #0
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2310      	movs	r3, #16
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	2104      	movs	r1, #4
 800119e:	f7ff fe53 	bl	8000e48 <MFRC_TRANSCEIVE>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2bcc      	cmp	r3, #204	; 0xcc
 80011a6:	d001      	beq.n	80011ac <UL_READ+0x4e>
		return(PCD_COMM_ERR);
 80011a8:	23aa      	movs	r3, #170	; 0xaa
 80011aa:	e000      	b.n	80011ae <UL_READ+0x50>
	}

	else{
		return(PCD_OK);
 80011ac:	23cc      	movs	r3, #204	; 0xcc
	}
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <UL_WRITE>:
 *
 * @param data: Array of 4 bytes to write
 *
 * */

PCD_StatusTypeDef UL_WRITE(uint8_t addr,uint8_t* data){
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b088      	sub	sp, #32
 80011ba:	af02      	add	r7, sp, #8
 80011bc:	4603      	mov	r3, r0
 80011be:	6039      	str	r1, [r7, #0]
 80011c0:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[8]={ULTRA_WRITE,addr};
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	23a2      	movs	r3, #162	; 0xa2
 80011ce:	743b      	strb	r3, [r7, #16]
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	747b      	strb	r3, [r7, #17]
	uint8_t ack;
	uint8_t CRC_val[2];

	//Safety check to see if we're trying to write to any of the first four pages which contain sensitive data (uid, OTP etc)
	if (addr <= 3) {
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d801      	bhi.n	80011de <UL_WRITE+0x28>
		return PCD_PROTECTED_ERR;
 80011da:	2302      	movs	r3, #2
 80011dc:	e022      	b.n	8001224 <UL_WRITE+0x6e>
	}

	memcpy(transaction+2,data,4);
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	3302      	adds	r3, #2
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	601a      	str	r2, [r3, #0]

	CALC_CRC(transaction, 6, CRC_val);
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	2106      	movs	r1, #6
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fdb5 	bl	8000d64 <CALC_CRC>

	memcpy(transaction+6,CRC_val,2);
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	3306      	adds	r3, #6
 8001200:	89ba      	ldrh	r2, [r7, #12]
 8001202:	801a      	strh	r2, [r3, #0]

	if(MFRC_TRANSCEIVE(transaction, 8, &ack, 1, 0)!=PCD_OK){
 8001204:	f107 020f 	add.w	r2, r7, #15
 8001208:	f107 0010 	add.w	r0, r7, #16
 800120c:	2300      	movs	r3, #0
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	2108      	movs	r1, #8
 8001214:	f7ff fe18 	bl	8000e48 <MFRC_TRANSCEIVE>
 8001218:	4603      	mov	r3, r0
 800121a:	2bcc      	cmp	r3, #204	; 0xcc
 800121c:	d001      	beq.n	8001222 <UL_WRITE+0x6c>
		return(PCD_COMM_ERR);
 800121e:	23aa      	movs	r3, #170	; 0xaa
 8001220:	e000      	b.n	8001224 <UL_WRITE+0x6e>
	}

	else{
		return(PCD_OK);
 8001222:	23cc      	movs	r3, #204	; 0xcc
	}
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <UL_getuid>:
 * Read the 7 byte uid of MIFARE Ultralight card
 *
 * @param uid - Array to store uid
 * @return PCD_OK if uid was successfully read
 * */
PCD_StatusTypeDef UL_getuid(uint8_t* uid) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	uint8_t read[UL_READSIZE];

	if (UL_READ(0x00, read) != PCD_OK) {
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	4619      	mov	r1, r3
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff ff8f 	bl	800115e <UL_READ>
 8001240:	4603      	mov	r3, r0
 8001242:	2bcc      	cmp	r3, #204	; 0xcc
 8001244:	d001      	beq.n	800124a <UL_getuid+0x1e>
		return PCD_COMM_ERR;
 8001246:	23aa      	movs	r3, #170	; 0xaa
 8001248:	e007      	b.n	800125a <UL_getuid+0x2e>
	}

	memcpy(uid, read, UL_UIDSIZE);
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	2207      	movs	r2, #7
 8001250:	4619      	mov	r1, r3
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f00e fd56 	bl	800fd04 <memcpy>
	return PCD_OK;
 8001258:	23cc      	movs	r3, #204	; 0xcc
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <UL_getalldata>:
 * Get all 64 bytes of user data from card
 *
 * @param data - Array to store data
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_getalldata(uint8_t* data) {
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	e010      	b.n	8001292 <UL_getalldata+0x30>
		if (UL_READ(i, data) != PCD_OK) {
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff71 	bl	800115e <UL_READ>
 800127c:	4603      	mov	r3, r0
 800127e:	2bcc      	cmp	r3, #204	; 0xcc
 8001280:	d001      	beq.n	8001286 <UL_getalldata+0x24>
			return PCD_COMM_ERR;
 8001282:	23aa      	movs	r3, #170	; 0xaa
 8001284:	e009      	b.n	800129a <UL_getalldata+0x38>
		}
		data += UL_READSIZE; //increment pointer
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3310      	adds	r3, #16
 800128a:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < UL_DATAEND; i += UL_PAGESIZE) {
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3304      	adds	r3, #4
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b0e      	cmp	r3, #14
 8001296:	ddeb      	ble.n	8001270 <UL_getalldata+0xe>
	}

	return PCD_OK;
 8001298:	23cc      	movs	r3, #204	; 0xcc
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <UL_readcard>:
 * Read MIFARE Ultralight card data into card struct
 *
 * @param result - Card to store data into
 * @return PCD_OK if data was successfully read
 * */
PCD_StatusTypeDef UL_readcard(Card* result) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

	result->type = "MIFARE Ultralight";
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a16      	ldr	r2, [pc, #88]	; (8001308 <UL_readcard+0x64>)
 80012b0:	60da      	str	r2, [r3, #12]
	result->name = "Test1";
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a15      	ldr	r2, [pc, #84]	; (800130c <UL_readcard+0x68>)
 80012b6:	609a      	str	r2, [r3, #8]
	result->uidsize = UL_UIDSIZE;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2207      	movs	r2, #7
 80012bc:	711a      	strb	r2, [r3, #4]
	result->contents_size = UL_MEMSIZE;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2240      	movs	r2, #64	; 0x40
 80012c2:	831a      	strh	r2, [r3, #24]
	result->read_protected = 0;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	741a      	strb	r2, [r3, #16]

	if (PICC_Select() != PCD_OK) { //Select PICC if available
 80012ca:	f7ff feef 	bl	80010ac <PICC_Select>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2bcc      	cmp	r3, #204	; 0xcc
 80012d2:	d001      	beq.n	80012d8 <UL_readcard+0x34>
		return PCD_NO_PICC;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e012      	b.n	80012fe <UL_readcard+0x5a>
	}
	if ((UL_getuid(result->uid) != PCD_OK) || (UL_getalldata(result->contents) !=  PCD_OK)) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ffa5 	bl	800122c <UL_getuid>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2bcc      	cmp	r3, #204	; 0xcc
 80012e6:	d107      	bne.n	80012f8 <UL_readcard+0x54>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ffb8 	bl	8001262 <UL_getalldata>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2bcc      	cmp	r3, #204	; 0xcc
 80012f6:	d001      	beq.n	80012fc <UL_readcard+0x58>
		return PCD_COMM_ERR;
 80012f8:	23aa      	movs	r3, #170	; 0xaa
 80012fa:	e000      	b.n	80012fe <UL_readcard+0x5a>
	}
	return PCD_OK;
 80012fc:	23cc      	movs	r3, #204	; 0xcc
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	080106ac 	.word	0x080106ac
 800130c:	080106c0 	.word	0x080106c0

08001310 <UL_writecard>:
/**
 * Write a card object to a physical card
 * @param towrite - Card instance to write
 * @return PCD_OK if card was successfully written to and verified.
 * */
PCD_StatusTypeDef UL_writecard(Card* towrite) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	uint8_t* data_to_write = malloc(UL_DATASIZE * sizeof(uint8_t));
 8001318:	2030      	movs	r0, #48	; 0x30
 800131a:	f00e fce3 	bl	800fce4 <malloc>
 800131e:	4603      	mov	r3, r0
 8001320:	60bb      	str	r3, [r7, #8]
	memcpy(data_to_write, towrite->contents + (UL_MEMSIZE - UL_DATASIZE), UL_DATASIZE);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	3310      	adds	r3, #16
 8001328:	2230      	movs	r2, #48	; 0x30
 800132a:	4619      	mov	r1, r3
 800132c:	68b8      	ldr	r0, [r7, #8]
 800132e:	f00e fce9 	bl	800fd04 <memcpy>

	if (PICC_Select() != PCD_OK) {
 8001332:	f7ff febb 	bl	80010ac <PICC_Select>
 8001336:	4603      	mov	r3, r0
 8001338:	2bcc      	cmp	r3, #204	; 0xcc
 800133a:	d004      	beq.n	8001346 <UL_writecard+0x36>
		free(data_to_write);
 800133c:	68b8      	ldr	r0, [r7, #8]
 800133e:	f00e fcd9 	bl	800fcf4 <free>
		return PCD_NO_PICC;
 8001342:	2301      	movs	r3, #1
 8001344:	e020      	b.n	8001388 <UL_writecard+0x78>
	}

	for (int addr = UL_DATASTART; addr <= UL_DATAEND; addr++) {
 8001346:	2304      	movs	r3, #4
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	e016      	b.n	800137a <UL_writecard+0x6a>
		if (UL_WRITE(addr, data_to_write + (UL_PAGESIZE * (addr - UL_DATASTART))) != PCD_OK) {
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	3b04      	subs	r3, #4
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4619      	mov	r1, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	440b      	add	r3, r1
 800135c:	4619      	mov	r1, r3
 800135e:	4610      	mov	r0, r2
 8001360:	f7ff ff29 	bl	80011b6 <UL_WRITE>
 8001364:	4603      	mov	r3, r0
 8001366:	2bcc      	cmp	r3, #204	; 0xcc
 8001368:	d004      	beq.n	8001374 <UL_writecard+0x64>
			free(data_to_write);
 800136a:	68b8      	ldr	r0, [r7, #8]
 800136c:	f00e fcc2 	bl	800fcf4 <free>
			return PCD_COMM_ERR;
 8001370:	23aa      	movs	r3, #170	; 0xaa
 8001372:	e009      	b.n	8001388 <UL_writecard+0x78>
	for (int addr = UL_DATASTART; addr <= UL_DATAEND; addr++) {
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3301      	adds	r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2b0f      	cmp	r3, #15
 800137e:	dde5      	ble.n	800134c <UL_writecard+0x3c>
		}
	}
	free(data_to_write);
 8001380:	68b8      	ldr	r0, [r7, #8]
 8001382:	f00e fcb7 	bl	800fcf4 <free>
	return PCD_OK;
 8001386:	23cc      	movs	r3, #204	; 0xcc
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <uid_tostring>:
 *
 * @param uid - Uid
 * @param size - Size of uid
 * @return pointer to string of uid
 * */
char* uid_tostring(uint8_t* uid, uint8_t size) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	70fb      	strb	r3, [r7, #3]
	char* result = malloc((2 * size * sizeof(char)) + 1); //multiply by 2 since 1 byte is two hex digits
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	3301      	adds	r3, #1
 80013a2:	4618      	mov	r0, r3
 80013a4:	f00e fc9e 	bl	800fce4 <malloc>
 80013a8:	4603      	mov	r3, r0
 80013aa:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < size; i++) {
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	e023      	b.n	80013fa <uid_tostring+0x6a>
		if (uid[i] <= 0x0F) { //Only one hex character
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	d80d      	bhi.n	80013da <uid_tostring+0x4a>
			sprintf(result + (2 * i), "0%X", uid[i]);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	461a      	mov	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	1898      	adds	r0, r3, r2
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4912      	ldr	r1, [pc, #72]	; (800141c <uid_tostring+0x8c>)
 80013d4:	f00e fda4 	bl	800ff20 <siprintf>
 80013d8:	e00c      	b.n	80013f4 <uid_tostring+0x64>
		} else {
			sprintf(result + (2 * i), "%X", uid[i]);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	461a      	mov	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	1898      	adds	r0, r3, r2
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	490c      	ldr	r1, [pc, #48]	; (8001420 <uid_tostring+0x90>)
 80013f0:	f00e fd96 	bl	800ff20 <siprintf>
	for (int i = 0; i < size; i++) {
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	3301      	adds	r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	429a      	cmp	r2, r3
 8001400:	dbd7      	blt.n	80013b2 <uid_tostring+0x22>
		}
	}
	result[2 * size] = '\0'; //Add null
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	461a      	mov	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4413      	add	r3, r2
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
	return result;
 8001410:	68bb      	ldr	r3, [r7, #8]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	080106c8 	.word	0x080106c8
 8001420:	080106cc 	.word	0x080106cc

08001424 <UL_verify>:
/**
 * Verify that a phyiscal card's contents matches what was intended to be written
 * @param check - Card to check phyiscal card data against
 * @return PCD_OK if contents is correct
 * */
PCD_StatusTypeDef UL_verify(Card* check) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	Card* read = malloc(sizeof(Card));
 800142c:	201c      	movs	r0, #28
 800142e:	f00e fc59 	bl	800fce4 <malloc>
 8001432:	4603      	mov	r3, r0
 8001434:	60bb      	str	r3, [r7, #8]
	read->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 8001436:	2040      	movs	r0, #64	; 0x40
 8001438:	f00e fc54 	bl	800fce4 <malloc>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	615a      	str	r2, [r3, #20]
	read->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8001444:	2007      	movs	r0, #7
 8001446:	f00e fc4d 	bl	800fce4 <malloc>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	601a      	str	r2, [r3, #0]

	if (UL_readcard(read) != PCD_OK) {
 8001452:	68b8      	ldr	r0, [r7, #8]
 8001454:	f7ff ff26 	bl	80012a4 <UL_readcard>
 8001458:	4603      	mov	r3, r0
 800145a:	2bcc      	cmp	r3, #204	; 0xcc
 800145c:	d001      	beq.n	8001462 <UL_verify+0x3e>
		return PCD_COMM_ERR;
 800145e:	23aa      	movs	r3, #170	; 0xaa
 8001460:	e031      	b.n	80014c6 <UL_verify+0xa2>
	}

	for (int byte = 0; byte < UL_MEMSIZE; byte++) {
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	e01d      	b.n	80014a4 <UL_verify+0x80>
		if (read->contents[byte] != check->contents[byte]) {
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4413      	add	r3, r2
 8001470:	781a      	ldrb	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6959      	ldr	r1, [r3, #20]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	440b      	add	r3, r1
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d00e      	beq.n	800149e <UL_verify+0x7a>
			free(read->contents);
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	4618      	mov	r0, r3
 8001486:	f00e fc35 	bl	800fcf4 <free>
			free(read->uid);
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f00e fc30 	bl	800fcf4 <free>
			free(read);
 8001494:	68b8      	ldr	r0, [r7, #8]
 8001496:	f00e fc2d 	bl	800fcf4 <free>
			return PCD_VERIFY_ERR;
 800149a:	2303      	movs	r3, #3
 800149c:	e013      	b.n	80014c6 <UL_verify+0xa2>
	for (int byte = 0; byte < UL_MEMSIZE; byte++) {
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3301      	adds	r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b3f      	cmp	r3, #63	; 0x3f
 80014a8:	ddde      	ble.n	8001468 <UL_verify+0x44>
		}
	}
	free(read->contents);
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f00e fc20 	bl	800fcf4 <free>
	free(read->uid);
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f00e fc1b 	bl	800fcf4 <free>
	free(read);
 80014be:	68b8      	ldr	r0, [r7, #8]
 80014c0:	f00e fc18 	bl	800fcf4 <free>
	return PCD_OK;
 80014c4:	23cc      	movs	r3, #204	; 0xcc
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <OLED_Clear>:
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
}
/*Function to clear OLED (write all zero to display memory)
 *
 * */
void OLED_Clear(void){
 80014ce:	b580      	push	{r7, lr}
 80014d0:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80014d4:	af00      	add	r7, sp, #0
	uint8_t zeros[1024];
	memset(zeros,0x00,1024);
 80014d6:	463b      	mov	r3, r7
 80014d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f00e fc1e 	bl	800fd20 <memset>
	OLED_FLUSH(zeros);
 80014e4:	463b      	mov	r3, r7
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f87c 	bl	80015e4 <OLED_FLUSH>

}
 80014ec:	bf00      	nop
 80014ee:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <OLED_cmd>:

/*Function to send single byte command to display (ENSURE DC is low)
 *
 * @param data: Command to send to display
 * */
HAL_StatusTypeDef OLED_cmd(uint8_t data){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	uint8_t value=data;
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2110      	movs	r1, #16
 800150a:	4815      	ldr	r0, [pc, #84]	; (8001560 <OLED_cmd+0x68>)
 800150c:	f002 ffc2 	bl	8004494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2102      	movs	r1, #2
 8001514:	4813      	ldr	r0, [pc, #76]	; (8001564 <OLED_cmd+0x6c>)
 8001516:	f002 ffbd 	bl	8004494 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY)!=HAL_OK){
 800151a:	f107 010f 	add.w	r1, r7, #15
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	2201      	movs	r2, #1
 8001524:	4810      	ldr	r0, [pc, #64]	; (8001568 <OLED_cmd+0x70>)
 8001526:	f005 ff60 	bl	80073ea <HAL_SPI_Transmit>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d009      	beq.n	8001544 <OLED_cmd+0x4c>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8001530:	2201      	movs	r2, #1
 8001532:	2110      	movs	r1, #16
 8001534:	480a      	ldr	r0, [pc, #40]	; (8001560 <OLED_cmd+0x68>)
 8001536:	f002 ffad 	bl	8004494 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800153a:	2001      	movs	r0, #1
 800153c:	f002 fd08 	bl	8003f50 <HAL_Delay>
		return(HAL_ERROR);
 8001540:	2301      	movs	r3, #1
 8001542:	e008      	b.n	8001556 <OLED_cmd+0x5e>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	2110      	movs	r1, #16
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <OLED_cmd+0x68>)
 800154a:	f002 ffa3 	bl	8004494 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800154e:	2001      	movs	r0, #1
 8001550:	f002 fcfe 	bl	8003f50 <HAL_Delay>
		return(HAL_OK);
 8001554:	2300      	movs	r3, #0
	}

}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	20000770 	.word	0x20000770

0800156c <OLED_data>:
 *
 * @param data: Pointer to array of data to send
 *
 * @param size: Size of array (maximum is 1024)
 * */
HAL_StatusTypeDef OLED_data(uint8_t* data,uint8_t size){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2110      	movs	r1, #16
 800157c:	4816      	ldr	r0, [pc, #88]	; (80015d8 <OLED_data+0x6c>)
 800157e:	f002 ff89 	bl	8004494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 1);
 8001582:	2201      	movs	r2, #1
 8001584:	2102      	movs	r1, #2
 8001586:	4815      	ldr	r0, [pc, #84]	; (80015dc <OLED_data+0x70>)
 8001588:	f002 ff84 	bl	8004494 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY)!=HAL_OK){
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	b29a      	uxth	r2, r3
 8001590:	f04f 33ff 	mov.w	r3, #4294967295
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4812      	ldr	r0, [pc, #72]	; (80015e0 <OLED_data+0x74>)
 8001598:	f005 ff27 	bl	80073ea <HAL_SPI_Transmit>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00b      	beq.n	80015ba <OLED_data+0x4e>
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2102      	movs	r1, #2
 80015a6:	480d      	ldr	r0, [pc, #52]	; (80015dc <OLED_data+0x70>)
 80015a8:	f002 ff74 	bl	8004494 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2110      	movs	r1, #16
 80015b0:	4809      	ldr	r0, [pc, #36]	; (80015d8 <OLED_data+0x6c>)
 80015b2:	f002 ff6f 	bl	8004494 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00a      	b.n	80015d0 <OLED_data+0x64>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2102      	movs	r1, #2
 80015be:	4807      	ldr	r0, [pc, #28]	; (80015dc <OLED_data+0x70>)
 80015c0:	f002 ff68 	bl	8004494 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 80015c4:	2201      	movs	r2, #1
 80015c6:	2110      	movs	r1, #16
 80015c8:	4803      	ldr	r0, [pc, #12]	; (80015d8 <OLED_data+0x6c>)
 80015ca:	f002 ff63 	bl	8004494 <HAL_GPIO_WritePin>
		return(HAL_OK);
 80015ce:	2300      	movs	r3, #0
	}



}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40020400 	.word	0x40020400
 80015e0:	20000770 	.word	0x20000770

080015e4 <OLED_FLUSH>:

/*Function to send a whole page of display data (1024 bytes)
 *
 * @param mem: Pointer to array of data
 * */
void OLED_FLUSH(uint8_t* mem){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	for(int page=0;page<8;page++){
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	e023      	b.n	800163a <OLED_FLUSH+0x56>
		OLED_cmd(PAGE_ADDR+page);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	3b50      	subs	r3, #80	; 0x50
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff7c 	bl	80014f8 <OLED_cmd>
		OLED_cmd(LOWER_COL);
 8001600:	2002      	movs	r0, #2
 8001602:	f7ff ff79 	bl	80014f8 <OLED_cmd>
		OLED_cmd(UPPER_COL);
 8001606:	2010      	movs	r0, #16
 8001608:	f7ff ff76 	bl	80014f8 <OLED_cmd>
		for(int i=0;i<128;i++){
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	e00d      	b.n	800162e <OLED_FLUSH+0x4a>
			OLED_data(&mem[(page*128)+i],1);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	01da      	lsls	r2, r3, #7
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	4413      	add	r3, r2
 800161a:	461a      	mov	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4413      	add	r3, r2
 8001620:	2101      	movs	r1, #1
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ffa2 	bl	800156c <OLED_data>
		for(int i=0;i<128;i++){
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	3301      	adds	r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b7f      	cmp	r3, #127	; 0x7f
 8001632:	ddee      	ble.n	8001612 <OLED_FLUSH+0x2e>
	for(int page=0;page<8;page++){
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3301      	adds	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b07      	cmp	r3, #7
 800163e:	ddd8      	ble.n	80015f2 <OLED_FLUSH+0xe>
		}


	}
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <OLED_INIT>:

/*Function to initialise OLED display
 *
 * */

HAL_StatusTypeDef OLED_INIT(void){
 800164c:	b5b0      	push	{r4, r5, r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, OLED_CS, 1);
 8001652:	2201      	movs	r2, #1
 8001654:	2110      	movs	r1, #16
 8001656:	482f      	ldr	r0, [pc, #188]	; (8001714 <OLED_INIT+0xc8>)
 8001658:	f002 ff1c 	bl	8004494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 800165c:	2201      	movs	r2, #1
 800165e:	2108      	movs	r1, #8
 8001660:	482c      	ldr	r0, [pc, #176]	; (8001714 <OLED_INIT+0xc8>)
 8001662:	f002 ff17 	bl	8004494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, OLED_DC, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2102      	movs	r1, #2
 800166a:	482b      	ldr	r0, [pc, #172]	; (8001718 <OLED_INIT+0xcc>)
 800166c:	f002 ff12 	bl	8004494 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001670:	2064      	movs	r0, #100	; 0x64
 8001672:	f002 fc6d 	bl	8003f50 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2108      	movs	r1, #8
 800167a:	4826      	ldr	r0, [pc, #152]	; (8001714 <OLED_INIT+0xc8>)
 800167c:	f002 ff0a 	bl	8004494 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001680:	2064      	movs	r0, #100	; 0x64
 8001682:	f002 fc65 	bl	8003f50 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, OLED_RST, 1);
 8001686:	2201      	movs	r2, #1
 8001688:	2108      	movs	r1, #8
 800168a:	4822      	ldr	r0, [pc, #136]	; (8001714 <OLED_INIT+0xc8>)
 800168c:	f002 ff02 	bl	8004494 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001690:	2064      	movs	r0, #100	; 0x64
 8001692:	f002 fc5d 	bl	8003f50 <HAL_Delay>
	uint8_t config_data[25]={DISP_OFF , LOWER_COL , UPPER_COL , LINE_STRT , PAGE_ADDR , CNTRST_SET , CNTRST , SEG_MAP ,
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <OLED_INIT+0xd0>)
 8001698:	463c      	mov	r4, r7
 800169a:	461d      	mov	r5, r3
 800169c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016a4:	c403      	stmia	r4!, {r0, r1}
 80016a6:	7022      	strb	r2, [r4, #0]
							DISP_NORM , MUX_SET , MUX , DCDC_SET , DCDC , CHRG_PMP , SCAN_DIR , DISP_OFFSET_SET ,
							DISP_OFFSET , OSC_SET , OSC , PRE_CHRG_SET , PRE_CHRG , COM_SET , COM , VCOM_SET, VCOM};


	for(int i = 0; i < 25; i++){
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	e00c      	b.n	80016c8 <OLED_INIT+0x7c>
		OLED_cmd(config_data[i]);
 80016ae:	463a      	mov	r2, r7
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	4413      	add	r3, r2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff1e 	bl	80014f8 <OLED_cmd>
		HAL_Delay(1);
 80016bc:	2001      	movs	r0, #1
 80016be:	f002 fc47 	bl	8003f50 <HAL_Delay>
	for(int i = 0; i < 25; i++){
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3301      	adds	r3, #1
 80016c6:	61fb      	str	r3, [r7, #28]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	2b18      	cmp	r3, #24
 80016cc:	ddef      	ble.n	80016ae <OLED_INIT+0x62>
	}

	OLED_cmd(DISP_INV);
 80016ce:	20a7      	movs	r0, #167	; 0xa7
 80016d0:	f7ff ff12 	bl	80014f8 <OLED_cmd>
	OLED_FLUSH(HVE);
 80016d4:	4812      	ldr	r0, [pc, #72]	; (8001720 <OLED_INIT+0xd4>)
 80016d6:	f7ff ff85 	bl	80015e4 <OLED_FLUSH>
	OLED_cmd(DISP_ON);
 80016da:	20af      	movs	r0, #175	; 0xaf
 80016dc:	f7ff ff0c 	bl	80014f8 <OLED_cmd>
	HAL_Delay(1000);
 80016e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016e4:	f002 fc34 	bl	8003f50 <HAL_Delay>
	OLED_cmd(DISP_OFF);
 80016e8:	20ae      	movs	r0, #174	; 0xae
 80016ea:	f7ff ff05 	bl	80014f8 <OLED_cmd>
	HAL_Delay(10);
 80016ee:	200a      	movs	r0, #10
 80016f0:	f002 fc2e 	bl	8003f50 <HAL_Delay>
	OLED_cmd(DISP_NORM);
 80016f4:	20a6      	movs	r0, #166	; 0xa6
 80016f6:	f7ff feff 	bl	80014f8 <OLED_cmd>
	HAL_Delay(10);
 80016fa:	200a      	movs	r0, #10
 80016fc:	f002 fc28 	bl	8003f50 <HAL_Delay>
	OLED_cmd(DISP_ON);
 8001700:	20af      	movs	r0, #175	; 0xaf
 8001702:	f7ff fef9 	bl	80014f8 <OLED_cmd>
	OLED_Clear();
 8001706:	f7ff fee2 	bl	80014ce <OLED_Clear>
	return HAL_OK;
 800170a:	2300      	movs	r3, #0

}
 800170c:	4618      	mov	r0, r3
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bdb0      	pop	{r4, r5, r7, pc}
 8001714:	40020000 	.word	0x40020000
 8001718:	40020400 	.word	0x40020400
 800171c:	080106d0 	.word	0x080106d0
 8001720:	20000000 	.word	0x20000000

08001724 <OLED_InvChar>:
 *
 * @param character: Character to invert (Must be an ASCII character)
 *
 * @param result: Pointer to array to store the 5 inverted bytes that make up the character
 * */
void OLED_InvChar(char character,uint8_t* result){
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[OLED_CHARSIZE];

	for(int i=0;i<=OLED_CHARSIZE;i++){
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	e015      	b.n	8001762 <OLED_InvChar+0x3e>
			temp[i]=~(ASCII[(uint8_t)character-ASCII_START][i]);
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	f1a3 0220 	sub.w	r2, r3, #32
 800173c:	4911      	ldr	r1, [pc, #68]	; (8001784 <OLED_InvChar+0x60>)
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	18ca      	adds	r2, r1, r3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	4413      	add	r3, r2
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	43db      	mvns	r3, r3
 800174e:	b2d9      	uxtb	r1, r3
 8001750:	f107 020c 	add.w	r2, r7, #12
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	4413      	add	r3, r2
 8001758:	460a      	mov	r2, r1
 800175a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<=OLED_CHARSIZE;i++){
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3301      	adds	r3, #1
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2b05      	cmp	r3, #5
 8001766:	dde6      	ble.n	8001736 <OLED_InvChar+0x12>
	}
	memcpy(result,temp,OLED_CHARSIZE);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	6010      	str	r0, [r2, #0]
 8001774:	791b      	ldrb	r3, [r3, #4]
 8001776:	7113      	strb	r3, [r2, #4]
}
 8001778:	bf00      	nop
 800177a:	371c      	adds	r7, #28
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	08010ac8 	.word	0x08010ac8

08001788 <OLED_drawChar>:
 * @param character: Character to draw
 *
 * @param invert: Option to invert the character (Use INVERT to invert defined in OLED.h)
 * */

void OLED_drawChar(uint8_t page,uint8_t col, char character, uint8_t invert){
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	4604      	mov	r4, r0
 8001790:	4608      	mov	r0, r1
 8001792:	4611      	mov	r1, r2
 8001794:	461a      	mov	r2, r3
 8001796:	4623      	mov	r3, r4
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	4603      	mov	r3, r0
 800179c:	71bb      	strb	r3, [r7, #6]
 800179e:	460b      	mov	r3, r1
 80017a0:	717b      	strb	r3, [r7, #5]
 80017a2:	4613      	mov	r3, r2
 80017a4:	713b      	strb	r3, [r7, #4]
	OLED_cmd(PAGE_ADDR+page);
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	3b50      	subs	r3, #80	; 0x50
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fea3 	bl	80014f8 <OLED_cmd>
	OLED_cmd(col&0x0F);
 80017b2:	79bb      	ldrb	r3, [r7, #6]
 80017b4:	f003 030f 	and.w	r3, r3, #15
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fe9c 	bl	80014f8 <OLED_cmd>
	OLED_cmd(0x10|(col>>4));
 80017c0:	79bb      	ldrb	r3, [r7, #6]
 80017c2:	091b      	lsrs	r3, r3, #4
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	f043 0310 	orr.w	r3, r3, #16
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fe93 	bl	80014f8 <OLED_cmd>
	uint8_t data[6];

	if(invert==NORMAL){
 80017d2:	793b      	ldrb	r3, [r7, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d110      	bne.n	80017fa <OLED_drawChar+0x72>
		memcpy(data,ASCII[(uint8_t)character-0x20],5);
 80017d8:	797b      	ldrb	r3, [r7, #5]
 80017da:	f1a3 0220 	sub.w	r2, r3, #32
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	4a0f      	ldr	r2, [pc, #60]	; (8001824 <OLED_drawChar+0x9c>)
 80017e6:	1899      	adds	r1, r3, r2
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	2205      	movs	r2, #5
 80017ee:	4618      	mov	r0, r3
 80017f0:	f00e fa88 	bl	800fd04 <memcpy>
		data[5]=0x00;
 80017f4:	2300      	movs	r3, #0
 80017f6:	737b      	strb	r3, [r7, #13]
 80017f8:	e009      	b.n	800180e <OLED_drawChar+0x86>
	}
	else{
		data[0]=0xFF;
 80017fa:	23ff      	movs	r3, #255	; 0xff
 80017fc:	723b      	strb	r3, [r7, #8]
		OLED_InvChar(character,data + 1);
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	3301      	adds	r3, #1
 8001804:	797a      	ldrb	r2, [r7, #5]
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f7ff ff8b 	bl	8001724 <OLED_InvChar>

	}

	OLED_data(data, 6);
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	2106      	movs	r1, #6
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fea9 	bl	800156c <OLED_data>

	}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	bd90      	pop	{r4, r7, pc}
 8001822:	bf00      	nop
 8001824:	08010ac8 	.word	0x08010ac8

08001828 <OLED_Printlin>:
 * @param string: String to print (MUST BE LESS THAN 21)
 *
 * @param invert: Option to invert the entire string
 * */

void OLED_Printlin(uint8_t page,uint8_t col,char* string,uint8_t invert){
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	603a      	str	r2, [r7, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
 8001836:	460b      	mov	r3, r1
 8001838:	71bb      	strb	r3, [r7, #6]
 800183a:	4613      	mov	r3, r2
 800183c:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<strlen(string);i++){
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	e014      	b.n	800186e <OLED_Printlin+0x46>
		OLED_drawChar(page, col+(i*6), string[i],invert);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	461a      	mov	r2, r3
 800184a:	0052      	lsls	r2, r2, #1
 800184c:	4413      	add	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	b2da      	uxtb	r2, r3
 8001852:	79bb      	ldrb	r3, [r7, #6]
 8001854:	4413      	add	r3, r2
 8001856:	b2d9      	uxtb	r1, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	4413      	add	r3, r2
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	797b      	ldrb	r3, [r7, #5]
 8001862:	79f8      	ldrb	r0, [r7, #7]
 8001864:	f7ff ff90 	bl	8001788 <OLED_drawChar>
	for(int i=0;i<strlen(string);i++){
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3301      	adds	r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	6838      	ldr	r0, [r7, #0]
 8001870:	f7fe fcb6 	bl	80001e0 <strlen>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	429a      	cmp	r2, r3
 800187a:	d8e3      	bhi.n	8001844 <OLED_Printlin+0x1c>
	}
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <OLED_PrintCent>:
 * @param string: String to print
 *
 * @param invert: Option to invert text
 * */

void OLED_PrintCent(uint8_t page, char* string, uint8_t invert){
 8001886:	b580      	push	{r7, lr}
 8001888:	b084      	sub	sp, #16
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	6039      	str	r1, [r7, #0]
 8001890:	71fb      	strb	r3, [r7, #7]
 8001892:	4613      	mov	r3, r2
 8001894:	71bb      	strb	r3, [r7, #6]
	int len=strlen(string);
 8001896:	6838      	ldr	r0, [r7, #0]
 8001898:	f7fe fca2 	bl	80001e0 <strlen>
 800189c:	4603      	mov	r3, r0
 800189e:	60fb      	str	r3, [r7, #12]

	int start_col=(MID_COL)-((len/2)*6);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	0fda      	lsrs	r2, r3, #31
 80018a4:	4413      	add	r3, r2
 80018a6:	105b      	asrs	r3, r3, #1
 80018a8:	425b      	negs	r3, r3
 80018aa:	461a      	mov	r2, r3
 80018ac:	4613      	mov	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	3340      	adds	r3, #64	; 0x40
 80018b6:	60bb      	str	r3, [r7, #8]

	OLED_Printlin(page, start_col, string, invert);
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	b2d9      	uxtb	r1, r3
 80018bc:	79bb      	ldrb	r3, [r7, #6]
 80018be:	79f8      	ldrb	r0, [r7, #7]
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	f7ff ffb1 	bl	8001828 <OLED_Printlin>
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <OLED_Print>:
/*General purpose print function with wrap around ability. (Can take string of abitrary size and fit onto display)
 *
 * @param string: String to print (This can be longer than the max 21 character per line this function will chop it up)
 * */

void OLED_Print(char* string){
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b094      	sub	sp, #80	; 0x50
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
	char fill = ' ';
 80018d6:	2320      	movs	r3, #32
 80018d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int i=0;
 80018dc:	2300      	movs	r3, #0
 80018de:	64fb      	str	r3, [r7, #76]	; 0x4c
	int last_ind=0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	64bb      	str	r3, [r7, #72]	; 0x48
	int line=0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	647b      	str	r3, [r7, #68]	; 0x44
	int linend=0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	63bb      	str	r3, [r7, #56]	; 0x38
	    while(1){

	        char thisline[22];
	        char whitespaces[20];

	        for(int charac=0;charac<22;charac++){
 80018ec:	2300      	movs	r3, #0
 80018ee:	643b      	str	r3, [r7, #64]	; 0x40
 80018f0:	e018      	b.n	8001924 <OLED_Print+0x56>
	            if(string[last_ind+charac]==' '){
 80018f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018f6:	4413      	add	r3, r2
 80018f8:	461a      	mov	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b20      	cmp	r3, #32
 8001902:	d10b      	bne.n	800191c <OLED_Print+0x4e>
	                whitespaces[i]=charac; //keep track of our whitespaces
 8001904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001906:	b2d9      	uxtb	r1, r3
 8001908:	f107 020c 	add.w	r2, r7, #12
 800190c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800190e:	4413      	add	r3, r2
 8001910:	460a      	mov	r2, r1
 8001912:	701a      	strb	r2, [r3, #0]
	                i++;
 8001914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001916:	3301      	adds	r3, #1
 8001918:	64fb      	str	r3, [r7, #76]	; 0x4c
 800191a:	e000      	b.n	800191e <OLED_Print+0x50>
	            }
	            else{
	                continue;
 800191c:	bf00      	nop
	        for(int charac=0;charac<22;charac++){
 800191e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001920:	3301      	adds	r3, #1
 8001922:	643b      	str	r3, [r7, #64]	; 0x40
 8001924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001926:	2b15      	cmp	r3, #21
 8001928:	dde3      	ble.n	80018f2 <OLED_Print+0x24>
	            }


	        }

	        if(string[last_ind]==' '){
 800192a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4413      	add	r3, r2
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b20      	cmp	r3, #32
 8001934:	d102      	bne.n	800193c <OLED_Print+0x6e>
	            last_ind++;
 8001936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001938:	3301      	adds	r3, #1
 800193a:	64bb      	str	r3, [r7, #72]	; 0x48

	        else{

	        }

	        if(strlen(string+last_ind)<22){ //special routine for end of line (since string[last_ind+20] may not exist)
 800193c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fc4c 	bl	80001e0 <strlen>
 8001948:	4603      	mov	r3, r0
 800194a:	2b15      	cmp	r3, #21
 800194c:	d828      	bhi.n	80019a0 <OLED_Print+0xd2>
	            linend=strlen(string+last_ind);
 800194e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4413      	add	r3, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fc43 	bl	80001e0 <strlen>
 800195a:	4603      	mov	r3, r0
 800195c:	63bb      	str	r3, [r7, #56]	; 0x38
	            strncpy(thisline,string+last_ind,linend); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 800195e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	18d1      	adds	r1, r2, r3
 8001964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001966:	f107 0320 	add.w	r3, r7, #32
 800196a:	4618      	mov	r0, r3
 800196c:	f00e fb00 	bl	800ff70 <strncpy>
	            memset(thisline+linend,fill,21-linend);
 8001970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001972:	f107 0220 	add.w	r2, r7, #32
 8001976:	18d0      	adds	r0, r2, r3
 8001978:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800197c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800197e:	f1c3 0315 	rsb	r3, r3, #21
 8001982:	461a      	mov	r2, r3
 8001984:	f00e f9cc 	bl	800fd20 <memset>
	            thisline[21]=' ';
 8001988:	2320      	movs	r3, #32
 800198a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            OLED_Printlin(line, 0x02,thisline,NORMAL);
 800198e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001990:	b2d8      	uxtb	r0, r3
 8001992:	f107 0220 	add.w	r2, r7, #32
 8001996:	2300      	movs	r3, #0
 8001998:	2102      	movs	r1, #2
 800199a:	f7ff ff45 	bl	8001828 <OLED_Printlin>




	    }
}
 800199e:	e05e      	b.n	8001a5e <OLED_Print+0x190>
	        if((string[(last_ind)+20]!=' ') && (string[(last_ind)+21]!=' ')){
 80019a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019a2:	3314      	adds	r3, #20
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	4413      	add	r3, r2
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b20      	cmp	r3, #32
 80019ac:	d03a      	beq.n	8001a24 <OLED_Print+0x156>
 80019ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019b0:	3315      	adds	r3, #21
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b20      	cmp	r3, #32
 80019ba:	d033      	beq.n	8001a24 <OLED_Print+0x156>
	            strncpy(thisline,string+last_ind,whitespaces[i-1]); //i-1 since the last loop of whitespaces will increment i i.e. if 4 whitespaces in first 21 characters whitespaces[3] will be last index
 80019bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	18d1      	adds	r1, r2, r3
 80019c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c4:	3b01      	subs	r3, #1
 80019c6:	3350      	adds	r3, #80	; 0x50
 80019c8:	443b      	add	r3, r7
 80019ca:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80019ce:	461a      	mov	r2, r3
 80019d0:	f107 0320 	add.w	r3, r7, #32
 80019d4:	4618      	mov	r0, r3
 80019d6:	f00e facb 	bl	800ff70 <strncpy>
	            memset(thisline+whitespaces[i-1],fill,21-whitespaces[i-1]);
 80019da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019dc:	3b01      	subs	r3, #1
 80019de:	3350      	adds	r3, #80	; 0x50
 80019e0:	443b      	add	r3, r7
 80019e2:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80019e6:	461a      	mov	r2, r3
 80019e8:	f107 0320 	add.w	r3, r7, #32
 80019ec:	1898      	adds	r0, r3, r2
 80019ee:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80019f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019f4:	3b01      	subs	r3, #1
 80019f6:	3350      	adds	r3, #80	; 0x50
 80019f8:	443b      	add	r3, r7
 80019fa:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80019fe:	f1c3 0315 	rsb	r3, r3, #21
 8001a02:	461a      	mov	r2, r3
 8001a04:	f00e f98c 	bl	800fd20 <memset>
	            thisline[21]=' ';
 8001a08:	2320      	movs	r3, #32
 8001a0a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+whitespaces[i-1];
 8001a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a10:	3b01      	subs	r3, #1
 8001a12:	3350      	adds	r3, #80	; 0x50
 8001a14:	443b      	add	r3, r7
 8001a16:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a1e:	4413      	add	r3, r2
 8001a20:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a22:	e00e      	b.n	8001a42 <OLED_Print+0x174>
	            strncpy(thisline,string+last_ind,21);
 8001a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	18d1      	adds	r1, r2, r3
 8001a2a:	f107 0320 	add.w	r3, r7, #32
 8001a2e:	2215      	movs	r2, #21
 8001a30:	4618      	mov	r0, r3
 8001a32:	f00e fa9d 	bl	800ff70 <strncpy>
	            thisline[21]=' ';
 8001a36:	2320      	movs	r3, #32
 8001a38:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	            last_ind=last_ind+21;
 8001a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a3e:	3315      	adds	r3, #21
 8001a40:	64bb      	str	r3, [r7, #72]	; 0x48
	        i=0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	64fb      	str	r3, [r7, #76]	; 0x4c
	        OLED_Printlin(line, 0x02, thisline,NORMAL);
 8001a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a48:	b2d8      	uxtb	r0, r3
 8001a4a:	f107 0220 	add.w	r2, r7, #32
 8001a4e:	2300      	movs	r3, #0
 8001a50:	2102      	movs	r1, #2
 8001a52:	f7ff fee9 	bl	8001828 <OLED_Printlin>
	        line++;
 8001a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a58:	3301      	adds	r3, #1
 8001a5a:	647b      	str	r3, [r7, #68]	; 0x44
	    while(1){
 8001a5c:	e746      	b.n	80018ec <OLED_Print+0x1e>
}
 8001a5e:	3750      	adds	r7, #80	; 0x50
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <OLED_SCREEN>:
 * @param screen: Screen to display
 *
 * @param invert: Option to invert entire screen
 * */

void OLED_SCREEN(const Screen* screen,uint8_t invert) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
	OLED_Clear();
 8001a70:	f7ff fd2d 	bl	80014ce <OLED_Clear>
	OLED_PrintCent(0, (char*)screen->data[0], invert);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	78fa      	ldrb	r2, [r7, #3]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff ff01 	bl	8001886 <OLED_PrintCent>

	for(int i = 0; i < screen->datsize - 1; i++) {
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	e01a      	b.n	8001ac0 <OLED_SCREEN+0x5c>
		OLED_Printlin((uint8_t)screen->dataloc[i+1][0],(uint8_t) screen->dataloc[i+1][1],(char*) screen->data[i+1], invert);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	3301      	adds	r3, #1
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	7818      	ldrb	r0, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	7859      	ldrb	r1, [r3, #1]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3301      	adds	r3, #1
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	f7ff feb7 	bl	8001828 <OLED_Printlin>
	for(int i = 0; i < screen->datsize - 1; i++) {
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3301      	adds	r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	dbde      	blt.n	8001a8a <OLED_SCREEN+0x26>
	}
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <OLED_SCRNREF>:
 * @param dataindx: Index of screen->data to modify
 *
 * @param data: Data to add to the screen
 * */

void OLED_SCRNREF(const Screen* screen,uint8_t dataindx,char* data){
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	72fb      	strb	r3, [r7, #11]
	int len=strlen(screen->data[dataindx]);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	7afb      	ldrb	r3, [r7, #11]
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fb75 	bl	80001e0 <strlen>
 8001af6:	4603      	mov	r3, r0
 8001af8:	617b      	str	r3, [r7, #20]
	int start_col=screen->dataloc[dataindx][1]+((len)*6);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	7afb      	ldrb	r3, [r7, #11]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	785b      	ldrb	r3, [r3, #1]
 8001b06:	4619      	mov	r1, r3
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	440b      	add	r3, r1
 8001b14:	613b      	str	r3, [r7, #16]

	OLED_Printlin(screen->dataloc[dataindx][0], start_col, data, NORMAL);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	7afb      	ldrb	r3, [r7, #11]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	7818      	ldrb	r0, [r3, #0]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	b2d9      	uxtb	r1, r3
 8001b26:	2300      	movs	r3, #0
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	f7ff fe7d 	bl	8001828 <OLED_Printlin>
}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <OLED_SELECT>:
 * @param page: Row to place arrow
 *
 * @param col: Column to place arrow
 * */

void OLED_SELECT(const Screen* screen,uint8_t selopt, int restore){
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b089      	sub	sp, #36	; 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	460b      	mov	r3, r1
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	72fb      	strb	r3, [r7, #11]

	char arrow[]="->";
 8001b46:	4a35      	ldr	r2, [pc, #212]	; (8001c1c <OLED_SELECT+0xe4>)
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	4611      	mov	r1, r2
 8001b50:	8019      	strh	r1, [r3, #0]
 8001b52:	3302      	adds	r3, #2
 8001b54:	0c12      	lsrs	r2, r2, #16
 8001b56:	701a      	strb	r2, [r3, #0]

	uint8_t prevpage,prevcol,thispage,thiscol,index;
	char* rest;

	if(selopt == 0){
 8001b58:	7afb      	ldrb	r3, [r7, #11]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d105      	bne.n	8001b6a <OLED_SELECT+0x32>
	    index = screen->selsize - 1;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	3b01      	subs	r3, #1
 8001b66:	77fb      	strb	r3, [r7, #31]
 8001b68:	e002      	b.n	8001b70 <OLED_SELECT+0x38>
	} else {
		index = selopt - 1;
 8001b6a:	7afb      	ldrb	r3, [r7, #11]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	77fb      	strb	r3, [r7, #31]
	}

	prevpage=screen->seldata[index][0];
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	7ffb      	ldrb	r3, [r7, #31]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	75fb      	strb	r3, [r7, #23]
	prevcol=screen->seldata[index][1];
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	7ffb      	ldrb	r3, [r7, #31]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	785b      	ldrb	r3, [r3, #1]
 8001b8a:	75bb      	strb	r3, [r7, #22]
	thispage=screen->seldata[selopt][0];
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	7afb      	ldrb	r3, [r7, #11]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	757b      	strb	r3, [r7, #21]
	thiscol=screen->seldata[selopt][1];
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	691a      	ldr	r2, [r3, #16]
 8001b9e:	7afb      	ldrb	r3, [r7, #11]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	785b      	ldrb	r3, [r3, #1]
 8001ba6:	753b      	strb	r3, [r7, #20]

	if(restore == OLED_RESTORE){
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d122      	bne.n	8001bf4 <OLED_SELECT+0xbc>
	    if (selopt == 0) {
 8001bae:	7afb      	ldrb	r3, [r7, #11]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d110      	bne.n	8001bd6 <OLED_SELECT+0x9e>
	    	rest=(char*)screen->data[find_restore_string(screen, screen->selsize - 1)]; //Here we may be wrapping around so we must restore the last select option
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	689c      	ldr	r4, [r3, #8]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 f911 	bl	8001dec <find_restore_string>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4423      	add	r3, r4
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	e010      	b.n	8001bf8 <OLED_SELECT+0xc0>
	    } else {
	    	rest=(char*)screen->data[find_restore_string(screen, selopt - 1)];
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	689c      	ldr	r4, [r3, #8]
 8001bda:	7afb      	ldrb	r3, [r7, #11]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	4619      	mov	r1, r3
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 f902 	bl	8001dec <find_restore_string>
 8001be8:	4603      	mov	r3, r0
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4423      	add	r3, r4
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	e001      	b.n	8001bf8 <OLED_SELECT+0xc0>
	    }
	} else {
	    rest = "  ";
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <OLED_SELECT+0xe8>)
 8001bf6:	61bb      	str	r3, [r7, #24]
	}

	    OLED_Printlin(prevpage, prevcol, rest, NORMAL); //This restores the line of the previous (now deselected) select option
 8001bf8:	7db9      	ldrb	r1, [r7, #22]
 8001bfa:	7df8      	ldrb	r0, [r7, #23]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	f7ff fe12 	bl	8001828 <OLED_Printlin>
	    OLED_Printlin(thispage, thiscol, arrow, NORMAL);
 8001c04:	f107 0210 	add.w	r2, r7, #16
 8001c08:	7d39      	ldrb	r1, [r7, #20]
 8001c0a:	7d78      	ldrb	r0, [r7, #21]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f7ff fe0b 	bl	8001828 <OLED_Printlin>

}
 8001c12:	bf00      	nop
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd90      	pop	{r4, r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	080106f0 	.word	0x080106f0
 8001c20:	080106ec 	.word	0x080106ec

08001c24 <OLED_select_inv>:
/**
 * Select option by inverting the character which is selected
 * @param screen - Screen currently displayed
 * @param selopt - Selected select option
 * */
void OLED_select_inv(const Screen* screen, uint8_t selopt) {
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	70fb      	strb	r3, [r7, #3]
	uint8_t index, prevpage, prevcol, thispage, thiscol;
	char* restore;

	if(selopt == 0){
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d105      	bne.n	8001c42 <OLED_select_inv+0x1e>
		index = screen->selsize - 1;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	75fb      	strb	r3, [r7, #23]
 8001c40:	e002      	b.n	8001c48 <OLED_select_inv+0x24>
	} else {
		index = selopt - 1;
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	75fb      	strb	r3, [r7, #23]
	}

	prevpage=screen->seldata[index][0];
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	7dfb      	ldrb	r3, [r7, #23]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4413      	add	r3, r2
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	73fb      	strb	r3, [r7, #15]
	prevcol=screen->seldata[index][1];
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	785b      	ldrb	r3, [r3, #1]
 8001c62:	73bb      	strb	r3, [r7, #14]
	thispage=screen->seldata[selopt][0];
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	737b      	strb	r3, [r7, #13]
	thiscol=screen->seldata[selopt][1];
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691a      	ldr	r2, [r3, #16]
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	785b      	ldrb	r3, [r3, #1]
 8001c7e:	733b      	strb	r3, [r7, #12]

	if (selopt == 0) {
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d110      	bne.n	8001ca8 <OLED_select_inv+0x84>
		restore=(char*)screen->data[find_restore_string(screen, screen->selsize - 1)]; //Here we may be wrapping around so we must restore the last select option
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689c      	ldr	r4, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	4619      	mov	r1, r3
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f8a8 	bl	8001dec <find_restore_string>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4423      	add	r3, r4
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	e00d      	b.n	8001cc4 <OLED_select_inv+0xa0>
	} else {
		restore=(char*)screen->data[find_restore_string(screen, selopt - 1)];
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689c      	ldr	r4, [r3, #8]
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f899 	bl	8001dec <find_restore_string>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4423      	add	r3, r4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	613b      	str	r3, [r7, #16]
	}

	OLED_Printlin(prevpage, prevcol, restore, NORMAL);
 8001cc4:	7bb9      	ldrb	r1, [r7, #14]
 8001cc6:	7bf8      	ldrb	r0, [r7, #15]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	f7ff fdac 	bl	8001828 <OLED_Printlin>
	OLED_Printlin(thispage, thiscol, screen->data[selopt + 1], INVERT);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	7b39      	ldrb	r1, [r7, #12]
 8001ce0:	7b78      	ldrb	r0, [r7, #13]
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f7ff fda0 	bl	8001828 <OLED_Printlin>
}
 8001ce8:	bf00      	nop
 8001cea:	371c      	adds	r7, #28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd90      	pop	{r4, r7, pc}

08001cf0 <OLED_display_files>:
 * Display filenames to OLED display (used in show files task)
 *
 * @param page - Page of files to display (page count is increased as user scrolls through files)
 * @return HAL_OK if files were successfully displayed
 * */
HAL_StatusTypeDef OLED_display_files(const Screen* screen, uint8_t page) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	70fb      	strb	r3, [r7, #3]
	if (get_number_files() == 0) {
 8001cfc:	f001 fd48 	bl	8003790 <get_number_files>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <OLED_display_files+0x1a>
		return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e04c      	b.n	8001da4 <OLED_display_files+0xb4>
	}
	uint16_t file_count = get_number_files();
 8001d0a:	f001 fd41 	bl	8003790 <get_number_files>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	847b      	strh	r3, [r7, #34]	; 0x22

	char** file_names = malloc(file_count * sizeof(char*));
 8001d12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f00d ffe4 	bl	800fce4 <malloc>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	61fb      	str	r3, [r7, #28]
	char used[5];
	char free[5];

	get_free_size_str(free);
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	4618      	mov	r0, r3
 8001d26:	f001 fe3f 	bl	80039a8 <get_free_size_str>
	get_used_size_str(used);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f001 fe28 	bl	8003984 <get_used_size_str>

	OLED_SCRNREF(&SCRN_ShowFiles, 4, free);
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	461a      	mov	r2, r3
 8001d3a:	2104      	movs	r1, #4
 8001d3c:	481b      	ldr	r0, [pc, #108]	; (8001dac <OLED_display_files+0xbc>)
 8001d3e:	f7ff feca 	bl	8001ad6 <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_ShowFiles, 5, used);
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	461a      	mov	r2, r3
 8001d48:	2105      	movs	r1, #5
 8001d4a:	4818      	ldr	r0, [pc, #96]	; (8001dac <OLED_display_files+0xbc>)
 8001d4c:	f7ff fec3 	bl	8001ad6 <OLED_SCRNREF>

	if (get_all_files(file_names) != RFS_OK) {
 8001d50:	69f8      	ldr	r0, [r7, #28]
 8001d52:	f001 fd3e 	bl	80037d2 <get_all_files>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d006      	beq.n	8001d6a <OLED_display_files+0x7a>
		free_filenames(file_names, file_count);
 8001d5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d5e:	4619      	mov	r1, r3
 8001d60:	69f8      	ldr	r0, [r7, #28]
 8001d62:	f000 f825 	bl	8001db0 <free_filenames>
		return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e01c      	b.n	8001da4 <OLED_display_files+0xb4>
	}

	for (int i = 0; i < file_count; i++) {
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6e:	e00f      	b.n	8001d90 <OLED_display_files+0xa0>
		OLED_SCRNREF(&SCRN_ShowFiles, i + 1, file_names[i]);
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	3301      	adds	r3, #1
 8001d76:	b2d9      	uxtb	r1, r3
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	4413      	add	r3, r2
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	4809      	ldr	r0, [pc, #36]	; (8001dac <OLED_display_files+0xbc>)
 8001d86:	f7ff fea6 	bl	8001ad6 <OLED_SCRNREF>
	for (int i = 0; i < file_count; i++) {
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d94:	429a      	cmp	r2, r3
 8001d96:	dbeb      	blt.n	8001d70 <OLED_display_files+0x80>
	}

	free_filenames(file_names, file_count);
 8001d98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	69f8      	ldr	r0, [r7, #28]
 8001d9e:	f000 f807 	bl	8001db0 <free_filenames>
	return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3728      	adds	r7, #40	; 0x28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	08010f88 	.word	0x08010f88

08001db0 <free_filenames>:
/**
 * Free list of file names
 * @param file_names - File names
 * @param size -  Number of file names
 * */
void free_filenames(char** file_names, int size) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < size; i++) {
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	e00a      	b.n	8001dd6 <free_filenames+0x26>
		free(file_names[i]);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f00d ff92 	bl	800fcf4 <free>
	for (int i = 0; i < size; i++) {
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	dbf0      	blt.n	8001dc0 <free_filenames+0x10>
	}
	free(file_names);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f00d ff88 	bl	800fcf4 <free>
}
 8001de4:	bf00      	nop
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <find_restore_string>:
 *
 * @param screen - Screen to update
 * @param prev_sel_opt - Previous selected option
 * @return index of string in screen->data to be used as replacement
 * */
uint8_t find_restore_string(const Screen* screen, uint8_t prev_sel_opt) {
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	70fb      	strb	r3, [r7, #3]
	uint8_t index_of_string;

	for (int i = 1; i < screen->datsize; i++) {
 8001df8:	2301      	movs	r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	e021      	b.n	8001e42 <find_restore_string+0x56>
		if((screen->dataloc[i][0] == screen->seldata[prev_sel_opt][0]) && (screen->dataloc[i][1] == screen->seldata[prev_sel_opt][1])) {
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	781a      	ldrb	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6919      	ldr	r1, [r3, #16]
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	440b      	add	r3, r1
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d110      	bne.n	8001e3c <find_restore_string+0x50>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	785a      	ldrb	r2, [r3, #1]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6919      	ldr	r1, [r3, #16]
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	440b      	add	r3, r1
 8001e30:	785b      	ldrb	r3, [r3, #1]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d102      	bne.n	8001e3c <find_restore_string+0x50>
			index_of_string = i;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	73fb      	strb	r3, [r7, #15]
			break;
 8001e3a:	e007      	b.n	8001e4c <find_restore_string+0x60>
	for (int i = 1; i < screen->datsize; i++) {
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dbd8      	blt.n	8001dfe <find_restore_string+0x12>
		}
	}

	return index_of_string;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <oled_show_file>:

/**
 * Show the file data of given file entry number
 * @param entry - Entry to show data of
 * */
void oled_show_file(uint16_t entry) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f001 fd08 	bl	800387e <entry_present>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d12d      	bne.n	8001ed0 <oled_show_file+0x74>
		return; //No card entry present
	}

	work = read_card_entry(entry);
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f001 fb31 	bl	80034de <read_card_entry>
 8001e7c:	60f8      	str	r0, [r7, #12]

	OLED_SCREEN(&SCRN_FileData, NORMAL);
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4815      	ldr	r0, [pc, #84]	; (8001ed8 <oled_show_file+0x7c>)
 8001e82:	f7ff fdef 	bl	8001a64 <OLED_SCREEN>
	OLED_SCRNREF(&SCRN_FileData, 0, work->name);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4812      	ldr	r0, [pc, #72]	; (8001ed8 <oled_show_file+0x7c>)
 8001e90:	f7ff fe21 	bl	8001ad6 <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_TYPE_LOC, work->type);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	480e      	ldr	r0, [pc, #56]	; (8001ed8 <oled_show_file+0x7c>)
 8001e9e:	f7ff fe1a 	bl	8001ad6 <OLED_SCRNREF>
	OLED_SCRNREF(&SCRN_FileData, SHOWFILE_UID_LOC, uid_tostring(work->uid, work->uidsize));
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	791b      	ldrb	r3, [r3, #4]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4610      	mov	r0, r2
 8001eae:	f7ff fa6f 	bl	8001390 <uid_tostring>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	2102      	movs	r1, #2
 8001eb8:	4807      	ldr	r0, [pc, #28]	; (8001ed8 <oled_show_file+0x7c>)
 8001eba:	f7ff fe0c 	bl	8001ad6 <OLED_SCRNREF>
	OLED_SELECT(&SCRN_FileData, 0, OLED_NORESTORE);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <oled_show_file+0x7c>)
 8001ec4:	f7ff fe38 	bl	8001b38 <OLED_SELECT>

	free(work);
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f00d ff13 	bl	800fcf4 <free>
 8001ece:	e000      	b.n	8001ed2 <oled_show_file+0x76>
		return; //No card entry present
 8001ed0:	bf00      	nop
}
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	08010f9c 	.word	0x08010f9c

08001edc <oled_move_selection>:
 * Move selection arrow for given screen
 * @param screen - Screen to be modified
 * @param arrow_index - Pointer to variable which keeps track of arrow index
 * @param restore - Option to restore previous text or not
 * */
void oled_move_selection(const Screen* screen, uint8_t* arrow_index, uint8_t restore) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	71fb      	strb	r3, [r7, #7]
	uint8_t max_index = screen->selsize;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	75fb      	strb	r3, [r7, #23]

	if (*arrow_index >= max_index - 1) {
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	7dfb      	ldrb	r3, [r7, #23]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	429a      	cmp	r2, r3
 8001efc:	db03      	blt.n	8001f06 <oled_move_selection+0x2a>
		*arrow_index = 0;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	e005      	b.n	8001f12 <oled_move_selection+0x36>
	} else {
		*arrow_index += 1;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	701a      	strb	r2, [r3, #0]

	}
	OLED_SELECT(screen, *arrow_index, restore);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	79fa      	ldrb	r2, [r7, #7]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f7ff fe0c 	bl	8001b38 <OLED_SELECT>
}
 8001f20:	bf00      	nop
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <oled_move_selection_inv>:
/**
 * Select by inverting the text on the screen
 * @param screen - Screen to modify
 * @param select_index - Pointer to variable that keeps track of selection index
 * */
void oled_move_selection_inv(const Screen* screen, uint8_t* select_index) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
	uint8_t max_index = screen->selsize;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	73fb      	strb	r3, [r7, #15]

	if (*select_index >= max_index - 1) {
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	429a      	cmp	r2, r3
 8001f44:	db03      	blt.n	8001f4e <oled_move_selection_inv+0x26>
		*select_index = 0;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
 8001f4c:	e005      	b.n	8001f5a <oled_move_selection_inv+0x32>
	} else {
		*select_index += 1;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	701a      	strb	r2, [r3, #0]
	}

	OLED_select_inv(screen, *select_index);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff fe5f 	bl	8001c24 <OLED_select_inv>
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <oled_keyboard_update>:

/**
 * Update string displayed displayed in keyboard task as it's being written
 * */
void oled_keyboard_update (uint8_t char_index_selected, char* curr_name) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
	uint8_t length;

	if (curr_name == NULL) {
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d102      	bne.n	8001f88 <oled_keyboard_update+0x18>
		length = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	73fb      	strb	r3, [r7, #15]
 8001f86:	e004      	b.n	8001f92 <oled_keyboard_update+0x22>
	} else {
		length = strlen(curr_name);
 8001f88:	6838      	ldr	r0, [r7, #0]
 8001f8a:	f7fe f929 	bl	80001e0 <strlen>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	73fb      	strb	r3, [r7, #15]
	}

	curr_name = realloc(curr_name, length + 2); //Increment by 2 since we want to store a new character as well as null
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	3302      	adds	r3, #2
 8001f96:	4619      	mov	r1, r3
 8001f98:	6838      	ldr	r0, [r7, #0]
 8001f9a:	f00d ffa9 	bl	800fef0 <realloc>
 8001f9e:	6038      	str	r0, [r7, #0]
	curr_name[length] = KEYBOARD_LUT[char_index_selected];
 8001fa0:	79fa      	ldrb	r2, [r7, #7]
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	6839      	ldr	r1, [r7, #0]
 8001fa6:	440b      	add	r3, r1
 8001fa8:	4908      	ldr	r1, [pc, #32]	; (8001fcc <oled_keyboard_update+0x5c>)
 8001faa:	5c8a      	ldrb	r2, [r1, r2]
 8001fac:	701a      	strb	r2, [r3, #0]
	curr_name[length + 1] = '\0';
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	701a      	strb	r2, [r3, #0]
	OLED_SCRNREF(&SCRN_Keyboard, 0, curr_name);
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4804      	ldr	r0, [pc, #16]	; (8001fd0 <oled_keyboard_update+0x60>)
 8001fc0:	f7ff fd89 	bl	8001ad6 <OLED_SCRNREF>
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	08010aac 	.word	0x08010aac
 8001fd0:	08010fc4 	.word	0x08010fc4

08001fd4 <STAT_READ>:
 * Function to read one of three status registers. Registers in order are (Protection, config and status)
 *
 * @param addr: Address of status register we wish to read from
 * */

uint8_t STAT_READ(uint8_t addr){
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
	uint8_t transaction[]={READ_STAT, addr, DUMMY};
 8001fde:	230f      	movs	r3, #15
 8001fe0:	733b      	strb	r3, [r7, #12]
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	737b      	strb	r3, [r7, #13]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73bb      	strb	r3, [r7, #14]
	uint8_t rec[3];
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff0:	480d      	ldr	r0, [pc, #52]	; (8002028 <STAT_READ+0x54>)
 8001ff2:	f002 fa4f 	bl	8004494 <HAL_GPIO_WritePin>
	while(HAL_SPI_TransmitReceive(&hspi2, transaction,rec, 3, 100)!=HAL_OK);
 8001ff6:	bf00      	nop
 8001ff8:	f107 0208 	add.w	r2, r7, #8
 8001ffc:	f107 010c 	add.w	r1, r7, #12
 8002000:	2364      	movs	r3, #100	; 0x64
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	2303      	movs	r3, #3
 8002006:	4809      	ldr	r0, [pc, #36]	; (800202c <STAT_READ+0x58>)
 8002008:	f005 fb2b 	bl	8007662 <HAL_SPI_TransmitReceive>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f2      	bne.n	8001ff8 <STAT_READ+0x24>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002012:	2201      	movs	r2, #1
 8002014:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002018:	4803      	ldr	r0, [pc, #12]	; (8002028 <STAT_READ+0x54>)
 800201a:	f002 fa3b 	bl	8004494 <HAL_GPIO_WritePin>
	return(rec[2]); //Status register value
 800201e:	7abb      	ldrb	r3, [r7, #10]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40020000 	.word	0x40020000
 800202c:	200007c8 	.word	0x200007c8

08002030 <STAT_WRITE>:
 * @param addr: Address of status register
 *
 * @param value: Value to write to register
 * */

HAL_StatusTypeDef STAT_WRITE(uint8_t addr,uint8_t value){
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	460a      	mov	r2, r1
 800203a:	71fb      	strb	r3, [r7, #7]
 800203c:	4613      	mov	r3, r2
 800203e:	71bb      	strb	r3, [r7, #6]
	uint8_t transaction[]={WRIT_STAT,addr,value};
 8002040:	231f      	movs	r3, #31
 8002042:	733b      	strb	r3, [r7, #12]
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	737b      	strb	r3, [r7, #13]
 8002048:	79bb      	ldrb	r3, [r7, #6]
 800204a:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002052:	480a      	ldr	r0, [pc, #40]	; (800207c <STAT_WRITE+0x4c>)
 8002054:	f002 fa1e 	bl	8004494 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, transaction, 3, 100);
 8002058:	f107 010c 	add.w	r1, r7, #12
 800205c:	2364      	movs	r3, #100	; 0x64
 800205e:	2203      	movs	r2, #3
 8002060:	4807      	ldr	r0, [pc, #28]	; (8002080 <STAT_WRITE+0x50>)
 8002062:	f005 f9c2 	bl	80073ea <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002066:	2201      	movs	r2, #1
 8002068:	f44f 7180 	mov.w	r1, #256	; 0x100
 800206c:	4803      	ldr	r0, [pc, #12]	; (800207c <STAT_WRITE+0x4c>)
 800206e:	f002 fa11 	bl	8004494 <HAL_GPIO_WritePin>

	return(HAL_OK);
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40020000 	.word	0x40020000
 8002080:	200007c8 	.word	0x200007c8

08002084 <WRIT_EN>:
 * 		Bad block manage
 *
 * The Write Enable bit in status register 3 will be reset to 0 after any of these instructions
 * */

void WRIT_EN(void){
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
	uint8_t write_en=W_EN;
 800208a:	2306      	movs	r3, #6
 800208c:	71fb      	strb	r3, [r7, #7]
	WRITE_DIS();
 800208e:	f000 f825 	bl	80020dc <WRITE_DIS>

	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 8002092:	e011      	b.n	80020b8 <WRIT_EN+0x34>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002094:	2200      	movs	r2, #0
 8002096:	f44f 7180 	mov.w	r1, #256	; 0x100
 800209a:	480e      	ldr	r0, [pc, #56]	; (80020d4 <WRIT_EN+0x50>)
 800209c:	f002 f9fa 	bl	8004494 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, &write_en, 1, 100);
 80020a0:	1df9      	adds	r1, r7, #7
 80020a2:	2364      	movs	r3, #100	; 0x64
 80020a4:	2201      	movs	r2, #1
 80020a6:	480c      	ldr	r0, [pc, #48]	; (80020d8 <WRIT_EN+0x54>)
 80020a8:	f005 f99f 	bl	80073ea <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80020ac:	2201      	movs	r2, #1
 80020ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020b2:	4808      	ldr	r0, [pc, #32]	; (80020d4 <WRIT_EN+0x50>)
 80020b4:	f002 f9ee 	bl	8004494 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)!=0x02){ //Check that second to last bit (Write Enable bit) of status register is 1
 80020b8:	20c0      	movs	r0, #192	; 0xc0
 80020ba:	f7ff ff8b 	bl	8001fd4 <STAT_READ>
 80020be:	4603      	mov	r3, r0
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d1e5      	bne.n	8002094 <WRIT_EN+0x10>
	}


}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40020000 	.word	0x40020000
 80020d8:	200007c8 	.word	0x200007c8

080020dc <WRITE_DIS>:

/**
 * Disable write permissions (Sets WEL bit in STAT_REG3 to 0)
 * */
void WRITE_DIS(void) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
	uint8_t write_dis = W_DIS;
 80020e2:	2304      	movs	r3, #4
 80020e4:	71fb      	strb	r3, [r7, #7]

	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 80020e6:	e011      	b.n	800210c <WRITE_DIS+0x30>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ee:	480e      	ldr	r0, [pc, #56]	; (8002128 <WRITE_DIS+0x4c>)
 80020f0:	f002 f9d0 	bl	8004494 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi2, &write_dis, 1, 100);
 80020f4:	1df9      	adds	r1, r7, #7
 80020f6:	2364      	movs	r3, #100	; 0x64
 80020f8:	2201      	movs	r2, #1
 80020fa:	480c      	ldr	r0, [pc, #48]	; (800212c <WRITE_DIS+0x50>)
 80020fc:	f005 f975 	bl	80073ea <HAL_SPI_Transmit>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002100:	2201      	movs	r2, #1
 8002102:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002106:	4808      	ldr	r0, [pc, #32]	; (8002128 <WRITE_DIS+0x4c>)
 8002108:	f002 f9c4 	bl	8004494 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x02)==0x02){
 800210c:	20c0      	movs	r0, #192	; 0xc0
 800210e:	f7ff ff61 	bl	8001fd4 <STAT_READ>
 8002112:	4603      	mov	r3, r0
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b02      	cmp	r3, #2
 800211a:	d0e5      	beq.n	80020e8 <WRITE_DIS+0xc>
		}
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40020000 	.word	0x40020000
 800212c:	200007c8 	.word	0x200007c8

08002130 <block_erase>:
/**
 * Erase a 128kB (64 pages) block to 0xFF
 *
 * @param block_num - Block number to erase
 * */
void block_erase(uint16_t block_num) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	80fb      	strh	r3, [r7, #6]
	uint16_t page_addr = block_num * BLOCK_PAGECOUNT;
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	019b      	lsls	r3, r3, #6
 800213e:	81fb      	strh	r3, [r7, #14]
	uint8_t transaction [] = {BLOCK_ERS, DUMMY, page_addr>>8, page_addr};
 8002140:	23d8      	movs	r3, #216	; 0xd8
 8002142:	723b      	strb	r3, [r7, #8]
 8002144:	2300      	movs	r3, #0
 8002146:	727b      	strb	r3, [r7, #9]
 8002148:	89fb      	ldrh	r3, [r7, #14]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	b29b      	uxth	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	72bb      	strb	r3, [r7, #10]
 8002152:	89fb      	ldrh	r3, [r7, #14]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	72fb      	strb	r3, [r7, #11]
	WRIT_EN();
 8002158:	f7ff ff94 	bl	8002084 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800215c:	2200      	movs	r2, #0
 800215e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002162:	480f      	ldr	r0, [pc, #60]	; (80021a0 <block_erase+0x70>)
 8002164:	f002 f996 	bl	8004494 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, transaction, sizeof(transaction)/sizeof(transaction[0]), 100);
 8002168:	f107 0108 	add.w	r1, r7, #8
 800216c:	2364      	movs	r3, #100	; 0x64
 800216e:	2204      	movs	r2, #4
 8002170:	480c      	ldr	r0, [pc, #48]	; (80021a4 <block_erase+0x74>)
 8002172:	f005 f93a 	bl	80073ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002176:	2201      	movs	r2, #1
 8002178:	f44f 7180 	mov.w	r1, #256	; 0x100
 800217c:	4808      	ldr	r0, [pc, #32]	; (80021a0 <block_erase+0x70>)
 800217e:	f002 f989 	bl	8004494 <HAL_GPIO_WritePin>
	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8002182:	bf00      	nop
 8002184:	20c0      	movs	r0, #192	; 0xc0
 8002186:	f7ff ff25 	bl	8001fd4 <STAT_READ>
 800218a:	4603      	mov	r3, r0
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b01      	cmp	r3, #1
 8002192:	d0f7      	beq.n	8002184 <block_erase+0x54>
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40020000 	.word	0x40020000
 80021a4:	200007c8 	.word	0x200007c8

080021a8 <MEM_INIT>:
 * All we are doing here is removing write protection from entire array by setting BP bits
 * in status register 1 to zero
 *
 * */

HAL_StatusTypeDef MEM_INIT(void){
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80021ac:	2201      	movs	r2, #1
 80021ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021b2:	480a      	ldr	r0, [pc, #40]	; (80021dc <MEM_INIT+0x34>)
 80021b4:	f002 f96e 	bl	8004494 <HAL_GPIO_WritePin>

	STAT_WRITE(STAT_REG1, 0x00); //remove protection of entire memory array
 80021b8:	2100      	movs	r1, #0
 80021ba:	20a0      	movs	r0, #160	; 0xa0
 80021bc:	f7ff ff38 	bl	8002030 <STAT_WRITE>
	if (STAT_READ(STAT_REG1) != 0x00) {
 80021c0:	20a0      	movs	r0, #160	; 0xa0
 80021c2:	f7ff ff07 	bl	8001fd4 <STAT_READ>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MEM_INIT+0x28>
		return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e002      	b.n	80021d6 <MEM_INIT+0x2e>
	}

	WRITE_DIS();
 80021d0:	f7ff ff84 	bl	80020dc <WRITE_DIS>
	return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40020000 	.word	0x40020000

080021e0 <MEM_WRITE>:
 * @param data: data to write
 *
 * @param bytes: Number of bytes to write to page
 * */

HAL_StatusTypeDef MEM_WRITE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60ba      	str	r2, [r7, #8]
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	4603      	mov	r3, r0
 80021ec:	81fb      	strh	r3, [r7, #14]
 80021ee:	460b      	mov	r3, r1
 80021f0:	81bb      	strh	r3, [r7, #12]
	uint8_t* setup = malloc((bytes+3)*sizeof(uint8_t)); //Extra 3 bytes for write opcode and column address
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3303      	adds	r3, #3
 80021f6:	4618      	mov	r0, r3
 80021f8:	f00d fd74 	bl	800fce4 <malloc>
 80021fc:	4603      	mov	r3, r0
 80021fe:	617b      	str	r3, [r7, #20]
	uint8_t execute[]={WRIT_EXE, DUMMY, page_addr>>8, page_addr};
 8002200:	2310      	movs	r3, #16
 8002202:	743b      	strb	r3, [r7, #16]
 8002204:	2300      	movs	r3, #0
 8002206:	747b      	strb	r3, [r7, #17]
 8002208:	89fb      	ldrh	r3, [r7, #14]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	b29b      	uxth	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	74bb      	strb	r3, [r7, #18]
 8002212:	89fb      	ldrh	r3, [r7, #14]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	74fb      	strb	r3, [r7, #19]

	setup[0] = WRIT_LOAD;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2202      	movs	r2, #2
 800221c:	701a      	strb	r2, [r3, #0]
	setup[1] = col_addr>>8;
 800221e:	89bb      	ldrh	r3, [r7, #12]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	b29a      	uxth	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3301      	adds	r3, #1
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	701a      	strb	r2, [r3, #0]
	setup[2] = col_addr;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	3302      	adds	r3, #2
 8002230:	89ba      	ldrh	r2, [r7, #12]
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]
	memcpy(&setup[3], data, bytes);
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3303      	adds	r3, #3
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	4618      	mov	r0, r3
 8002240:	f00d fd60 	bl	800fd04 <memcpy>

	WRIT_EN();
 8002244:	f7ff ff1e 	bl	8002084 <WRIT_EN>
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002248:	2200      	movs	r2, #0
 800224a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800224e:	482d      	ldr	r0, [pc, #180]	; (8002304 <MEM_WRITE+0x124>)
 8002250:	f002 f920 	bl	8004494 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, setup, bytes+3, 100)!=HAL_OK){ //load data to internal buffer
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	b29b      	uxth	r3, r3
 8002258:	3303      	adds	r3, #3
 800225a:	b29a      	uxth	r2, r3
 800225c:	2364      	movs	r3, #100	; 0x64
 800225e:	6979      	ldr	r1, [r7, #20]
 8002260:	4829      	ldr	r0, [pc, #164]	; (8002308 <MEM_WRITE+0x128>)
 8002262:	f005 f8c2 	bl	80073ea <HAL_SPI_Transmit>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <MEM_WRITE+0xa2>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800226c:	2201      	movs	r2, #1
 800226e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002272:	4824      	ldr	r0, [pc, #144]	; (8002304 <MEM_WRITE+0x124>)
 8002274:	f002 f90e 	bl	8004494 <HAL_GPIO_WritePin>
		free(setup);
 8002278:	6978      	ldr	r0, [r7, #20]
 800227a:	f00d fd3b 	bl	800fcf4 <free>
		return(HAL_ERROR);
 800227e:	2301      	movs	r3, #1
 8002280:	e03c      	b.n	80022fc <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002282:	2201      	movs	r2, #1
 8002284:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002288:	481e      	ldr	r0, [pc, #120]	; (8002304 <MEM_WRITE+0x124>)
 800228a:	f002 f903 	bl	8004494 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until busy bit is cleared
 800228e:	bf00      	nop
 8002290:	20c0      	movs	r0, #192	; 0xc0
 8002292:	f7ff fe9f 	bl	8001fd4 <STAT_READ>
 8002296:	4603      	mov	r3, r0
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b01      	cmp	r3, #1
 800229e:	d0f7      	beq.n	8002290 <MEM_WRITE+0xb0>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80022a0:	2200      	movs	r2, #0
 80022a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022a6:	4817      	ldr	r0, [pc, #92]	; (8002304 <MEM_WRITE+0x124>)
 80022a8:	f002 f8f4 	bl	8004494 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, execute, 4, 100)!=HAL_OK){ //Send command to dump internal buffer data to memory array
 80022ac:	f107 0110 	add.w	r1, r7, #16
 80022b0:	2364      	movs	r3, #100	; 0x64
 80022b2:	2204      	movs	r2, #4
 80022b4:	4814      	ldr	r0, [pc, #80]	; (8002308 <MEM_WRITE+0x128>)
 80022b6:	f005 f898 	bl	80073ea <HAL_SPI_Transmit>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <MEM_WRITE+0xf6>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80022c0:	2201      	movs	r2, #1
 80022c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022c6:	480f      	ldr	r0, [pc, #60]	; (8002304 <MEM_WRITE+0x124>)
 80022c8:	f002 f8e4 	bl	8004494 <HAL_GPIO_WritePin>
		free(setup);
 80022cc:	6978      	ldr	r0, [r7, #20]
 80022ce:	f00d fd11 	bl	800fcf4 <free>
		return(HAL_ERROR);
 80022d2:	2301      	movs	r3, #1
 80022d4:	e012      	b.n	80022fc <MEM_WRITE+0x11c>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80022d6:	2201      	movs	r2, #1
 80022d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022dc:	4809      	ldr	r0, [pc, #36]	; (8002304 <MEM_WRITE+0x124>)
 80022de:	f002 f8d9 	bl	8004494 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 80022e2:	bf00      	nop
 80022e4:	20c0      	movs	r0, #192	; 0xc0
 80022e6:	f7ff fe75 	bl	8001fd4 <STAT_READ>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d0f7      	beq.n	80022e4 <MEM_WRITE+0x104>
	free(setup);
 80022f4:	6978      	ldr	r0, [r7, #20]
 80022f6:	f00d fcfd 	bl	800fcf4 <free>
	return(HAL_OK);
 80022fa:	2300      	movs	r3, #0

}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40020000 	.word	0x40020000
 8002308:	200007c8 	.word	0x200007c8

0800230c <MEM_READPAGE>:
 * @param bytes: Number of bytes to read from data buffer
 *
 * !!Note data must first be shifted from memory array into internal data buffer and then can be read!!
 * */

HAL_StatusTypeDef MEM_READPAGE(uint16_t page_addr,uint16_t col_addr,uint8_t* data,uint32_t bytes){ //Read one 2KiB page. Data will be put into internal buffer which can then be read. Wait at least tDR or until busy bit is clear
 800230c:	b580      	push	{r7, lr}
 800230e:	b08c      	sub	sp, #48	; 0x30
 8002310:	af02      	add	r7, sp, #8
 8002312:	60ba      	str	r2, [r7, #8]
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	4603      	mov	r3, r0
 8002318:	81fb      	strh	r3, [r7, #14]
 800231a:	460b      	mov	r3, r1
 800231c:	81bb      	strh	r3, [r7, #12]
	uint8_t transaction[]={READ_PAGE, DUMMY, page_addr>>8, page_addr};
 800231e:	2313      	movs	r3, #19
 8002320:	753b      	strb	r3, [r7, #20]
 8002322:	2300      	movs	r3, #0
 8002324:	757b      	strb	r3, [r7, #21]
 8002326:	89fb      	ldrh	r3, [r7, #14]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	b29b      	uxth	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	75bb      	strb	r3, [r7, #22]
 8002330:	89fb      	ldrh	r3, [r7, #14]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	75fb      	strb	r3, [r7, #23]
	uint8_t transaction_size = sizeof(transaction)/sizeof(transaction[0]);
 8002336:	2304      	movs	r3, #4
 8002338:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t* read_command = malloc(bytes+transaction_size); //Must allocate here since array may be too big for FreeRTOS task stack
 800233c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f00d fccd 	bl	800fce4 <malloc>
 800234a:	4603      	mov	r3, r0
 800234c:	61fb      	str	r3, [r7, #28]
	uint8_t* rec_data = malloc(bytes+transaction_size);
 800234e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f00d fcc4 	bl	800fce4 <malloc>
 800235c:	4603      	mov	r3, r0
 800235e:	61bb      	str	r3, [r7, #24]

	memset(read_command, 0, bytes+transaction_size);
 8002360:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4413      	add	r3, r2
 8002368:	461a      	mov	r2, r3
 800236a:	2100      	movs	r1, #0
 800236c:	69f8      	ldr	r0, [r7, #28]
 800236e:	f00d fcd7 	bl	800fd20 <memset>
	read_command[0]=READ_BUF;
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	2203      	movs	r2, #3
 8002376:	701a      	strb	r2, [r3, #0]
	read_command[1]= col_addr>>8;
 8002378:	89bb      	ldrh	r3, [r7, #12]
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	b29a      	uxth	r2, r3
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3301      	adds	r3, #1
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	701a      	strb	r2, [r3, #0]
	read_command[2] = col_addr;
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3302      	adds	r3, #2
 800238a:	89ba      	ldrh	r2, [r7, #12]
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	701a      	strb	r2, [r3, #0]
	read_command[3] = DUMMY;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	3303      	adds	r3, #3
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800239e:	4842      	ldr	r0, [pc, #264]	; (80024a8 <MEM_READPAGE+0x19c>)
 80023a0:	f002 f878 	bl	8004494 <HAL_GPIO_WritePin>
	if(HAL_SPI_Transmit(&hspi2, transaction, 4, 100)!=HAL_OK){ //load data to internal buffer
 80023a4:	f107 0114 	add.w	r1, r7, #20
 80023a8:	2364      	movs	r3, #100	; 0x64
 80023aa:	2204      	movs	r2, #4
 80023ac:	483f      	ldr	r0, [pc, #252]	; (80024ac <MEM_READPAGE+0x1a0>)
 80023ae:	f005 f81c 	bl	80073ea <HAL_SPI_Transmit>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00d      	beq.n	80023d4 <MEM_READPAGE+0xc8>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80023b8:	2201      	movs	r2, #1
 80023ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023be:	483a      	ldr	r0, [pc, #232]	; (80024a8 <MEM_READPAGE+0x19c>)
 80023c0:	f002 f868 	bl	8004494 <HAL_GPIO_WritePin>
		free(read_command);
 80023c4:	69f8      	ldr	r0, [r7, #28]
 80023c6:	f00d fc95 	bl	800fcf4 <free>
		free(rec_data);
 80023ca:	69b8      	ldr	r0, [r7, #24]
 80023cc:	f00d fc92 	bl	800fcf4 <free>
		return(HAL_ERROR);
 80023d0:	2301      	movs	r3, #1
 80023d2:	e064      	b.n	800249e <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80023d4:	2201      	movs	r2, #1
 80023d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023da:	4833      	ldr	r0, [pc, #204]	; (80024a8 <MEM_READPAGE+0x19c>)
 80023dc:	f002 f85a 	bl	8004494 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01); //Wait here until BUSY bit is cleared
 80023e0:	bf00      	nop
 80023e2:	20c0      	movs	r0, #192	; 0xc0
 80023e4:	f7ff fdf6 	bl	8001fd4 <STAT_READ>
 80023e8:	4603      	mov	r3, r0
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d0f7      	beq.n	80023e2 <MEM_READPAGE+0xd6>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023f8:	482b      	ldr	r0, [pc, #172]	; (80024a8 <MEM_READPAGE+0x19c>)
 80023fa:	f002 f84b 	bl	8004494 <HAL_GPIO_WritePin>
	if(HAL_SPI_TransmitReceive(&hspi2, read_command, rec_data, bytes+transaction_size, 100)!=HAL_OK){ //Send command to flush buffer to memory array
 80023fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002402:	b29a      	uxth	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	b29b      	uxth	r3, r3
 8002408:	4413      	add	r3, r2
 800240a:	b29b      	uxth	r3, r3
 800240c:	2264      	movs	r2, #100	; 0x64
 800240e:	9200      	str	r2, [sp, #0]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	69f9      	ldr	r1, [r7, #28]
 8002414:	4825      	ldr	r0, [pc, #148]	; (80024ac <MEM_READPAGE+0x1a0>)
 8002416:	f005 f924 	bl	8007662 <HAL_SPI_TransmitReceive>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00d      	beq.n	800243c <MEM_READPAGE+0x130>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002420:	2201      	movs	r2, #1
 8002422:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002426:	4820      	ldr	r0, [pc, #128]	; (80024a8 <MEM_READPAGE+0x19c>)
 8002428:	f002 f834 	bl	8004494 <HAL_GPIO_WritePin>
		free(read_command);
 800242c:	69f8      	ldr	r0, [r7, #28]
 800242e:	f00d fc61 	bl	800fcf4 <free>
		free(rec_data);
 8002432:	69b8      	ldr	r0, [r7, #24]
 8002434:	f00d fc5e 	bl	800fcf4 <free>
		return(HAL_ERROR);
 8002438:	2301      	movs	r3, #1
 800243a:	e030      	b.n	800249e <MEM_READPAGE+0x192>
	}
	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800243c:	2201      	movs	r2, #1
 800243e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002442:	4819      	ldr	r0, [pc, #100]	; (80024a8 <MEM_READPAGE+0x19c>)
 8002444:	f002 f826 	bl	8004494 <HAL_GPIO_WritePin>

	while((STAT_READ(STAT_REG3)&0x01) == 0x01);
 8002448:	bf00      	nop
 800244a:	20c0      	movs	r0, #192	; 0xc0
 800244c:	f7ff fdc2 	bl	8001fd4 <STAT_READ>
 8002450:	4603      	mov	r3, r0
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b01      	cmp	r3, #1
 8002458:	d0f7      	beq.n	800244a <MEM_READPAGE+0x13e>

	if (bytes == 1) {
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d104      	bne.n	800246a <MEM_READPAGE+0x15e>
		*data = rec_data[4];
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	791a      	ldrb	r2, [r3, #4]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	701a      	strb	r2, [r3, #0]
 8002468:	e012      	b.n	8002490 <MEM_READPAGE+0x184>
	} else {
		for(int i = 0; i < bytes; i++){
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
 800246e:	e00b      	b.n	8002488 <MEM_READPAGE+0x17c>
				data[i] = rec_data[i+4]; //+4 as first four elements of rec_data are meaningless
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	3304      	adds	r3, #4
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	441a      	add	r2, r3
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	68b9      	ldr	r1, [r7, #8]
 800247c:	440b      	add	r3, r1
 800247e:	7812      	ldrb	r2, [r2, #0]
 8002480:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < bytes; i++){
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	3301      	adds	r3, #1
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	429a      	cmp	r2, r3
 800248e:	d8ef      	bhi.n	8002470 <MEM_READPAGE+0x164>
		}
	}
	free(read_command);
 8002490:	69f8      	ldr	r0, [r7, #28]
 8002492:	f00d fc2f 	bl	800fcf4 <free>
	free(rec_data);
 8002496:	69b8      	ldr	r0, [r7, #24]
 8002498:	f00d fc2c 	bl	800fcf4 <free>
	return(HAL_OK);
 800249c:	2300      	movs	r3, #0

}
 800249e:	4618      	mov	r0, r3
 80024a0:	3728      	adds	r7, #40	; 0x28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40020000 	.word	0x40020000
 80024ac:	200007c8 	.word	0x200007c8

080024b0 <memory_reset>:
}

/**
 * Clear entire memory array to 0xFF
 * */
void memory_reset(void) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
	for (int i = 0; i < BLOCK_COUNT; i++) {
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	e007      	b.n	80024cc <memory_reset+0x1c>
		block_erase(i);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fe35 	bl	8002130 <block_erase>
	for (int i = 0; i < BLOCK_COUNT; i++) {
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3301      	adds	r3, #1
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d2:	dbf3      	blt.n	80024bc <memory_reset+0xc>
	}
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <HAL_GPIO_EXTI_Callback>:

/****************************************Button Interrupt Handler**************************************
 * Interrupt is triggered on falling (button pressed) and rising (button released) edges. On release the
 * value of timer 3 is checked to see if the time elapsed makes the press a short or long press
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	80fb      	strh	r3, [r7, #6]
	uint16_t tim_val = __HAL_TIM_GET_COUNTER(&htim3);
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_GPIO_EXTI_Callback+0x78>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	81fb      	strh	r3, [r7, #14]
	uint8_t button_state = NO_PRESS;
 80024f2:	2300      	movs	r3, #0
 80024f4:	737b      	strb	r3, [r7, #13]

	if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1) && (tim_val > 0)) {
 80024f6:	2102      	movs	r1, #2
 80024f8:	4818      	ldr	r0, [pc, #96]	; (800255c <HAL_GPIO_EXTI_Callback+0x7c>)
 80024fa:	f001 ffb3 	bl	8004464 <HAL_GPIO_ReadPin>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b01      	cmp	r3, #1
 8002502:	d11b      	bne.n	800253c <HAL_GPIO_EXTI_Callback+0x5c>
 8002504:	89fb      	ldrh	r3, [r7, #14]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d018      	beq.n	800253c <HAL_GPIO_EXTI_Callback+0x5c>
		HAL_TIM_Base_Stop(&htim3);
 800250a:	4813      	ldr	r0, [pc, #76]	; (8002558 <HAL_GPIO_EXTI_Callback+0x78>)
 800250c:	f005 fbc0 	bl	8007c90 <HAL_TIM_Base_Stop>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_GPIO_EXTI_Callback+0x78>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2200      	movs	r2, #0
 8002516:	625a      	str	r2, [r3, #36]	; 0x24

		if (tim_val > LONG_PRESS_THRESH) {
 8002518:	89fb      	ldrh	r3, [r7, #14]
 800251a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800251e:	d902      	bls.n	8002526 <HAL_GPIO_EXTI_Callback+0x46>
			button_state = LONG_PRESS;
 8002520:	2301      	movs	r3, #1
 8002522:	737b      	strb	r3, [r7, #13]
 8002524:	e001      	b.n	800252a <HAL_GPIO_EXTI_Callback+0x4a>
		} else {
			button_state = SHORT_PRESS;
 8002526:	2302      	movs	r3, #2
 8002528:	737b      	strb	r3, [r7, #13]
		}
		xQueueSendFromISR(UserInputHandle, &button_state, 0);
 800252a:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <HAL_GPIO_EXTI_Callback+0x80>)
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	f107 010d 	add.w	r1, r7, #13
 8002532:	2300      	movs	r3, #0
 8002534:	2200      	movs	r2, #0
 8002536:	f00a fc4f 	bl	800cdd8 <xQueueGenericSendFromISR>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
		HAL_TIM_Base_Start(&htim3);
	}
}
 800253a:	e009      	b.n	8002550 <HAL_GPIO_EXTI_Callback+0x70>
	} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0){
 800253c:	2102      	movs	r1, #2
 800253e:	4807      	ldr	r0, [pc, #28]	; (800255c <HAL_GPIO_EXTI_Callback+0x7c>)
 8002540:	f001 ff90 	bl	8004464 <HAL_GPIO_ReadPin>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <HAL_GPIO_EXTI_Callback+0x70>
		HAL_TIM_Base_Start(&htim3);
 800254a:	4803      	ldr	r0, [pc, #12]	; (8002558 <HAL_GPIO_EXTI_Callback+0x78>)
 800254c:	f005 fb46 	bl	8007bdc <HAL_TIM_Base_Start>
}
 8002550:	bf00      	nop
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000868 	.word	0x20000868
 800255c:	40020000 	.word	0x40020000
 8002560:	200008d8 	.word	0x200008d8

08002564 <BUZZ>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void BUZZ(void){
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002568:	2108      	movs	r1, #8
 800256a:	4806      	ldr	r0, [pc, #24]	; (8002584 <BUZZ+0x20>)
 800256c:	f005 fc74 	bl	8007e58 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 8002570:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002574:	f001 fcec 	bl	8003f50 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002578:	2108      	movs	r1, #8
 800257a:	4802      	ldr	r0, [pc, #8]	; (8002584 <BUZZ+0x20>)
 800257c:	f005 fd1c 	bl	8007fb8 <HAL_TIM_PWM_Stop>
}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000820 	.word	0x20000820

08002588 <write_card>:

void write_card(Card* towrite) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	OLED_Clear();
 8002590:	f7fe ff9d 	bl	80014ce <OLED_Clear>
	MFRC_ANTON();
 8002594:	f7fe fba4 	bl	8000ce0 <MFRC_ANTON>
	OLED_PrintCent(2, "Writing...", NORMAL);
 8002598:	2200      	movs	r2, #0
 800259a:	4926      	ldr	r1, [pc, #152]	; (8002634 <write_card+0xac>)
 800259c:	2002      	movs	r0, #2
 800259e:	f7ff f972 	bl	8001886 <OLED_PrintCent>
	if (UL_writecard(towrite) == PCD_NO_PICC) {
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fe feb4 	bl	8001310 <UL_writecard>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d118      	bne.n	80025e0 <write_card+0x58>
		OLED_PrintCent(4, "ERROR: Couldn't find", NORMAL);
 80025ae:	2200      	movs	r2, #0
 80025b0:	4921      	ldr	r1, [pc, #132]	; (8002638 <write_card+0xb0>)
 80025b2:	2004      	movs	r0, #4
 80025b4:	f7ff f967 	bl	8001886 <OLED_PrintCent>
		OLED_PrintCent(6, "Card", NORMAL);
 80025b8:	2200      	movs	r2, #0
 80025ba:	4920      	ldr	r1, [pc, #128]	; (800263c <write_card+0xb4>)
 80025bc:	2006      	movs	r0, #6
 80025be:	f7ff f962 	bl	8001886 <OLED_PrintCent>
		MFRC_ANTOFF();
 80025c2:	f7fe fbc7 	bl	8000d54 <MFRC_ANTOFF>
		osDelay(2000);
 80025c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80025ca:	f00a f852 	bl	800c672 <osDelay>
		vTaskResume(HomeHandle);
 80025ce:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <write_card+0xb8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f00b f968 	bl	800d8a8 <vTaskResume>
		vTaskSuspend(NULL);
 80025d8:	2000      	movs	r0, #0
 80025da:	f00b f8bd 	bl	800d758 <vTaskSuspend>
		MFRC_ANTOFF();
		osDelay(1000);
		vTaskResume(HomeHandle);
		vTaskSuspend(NULL);
	}
}
 80025de:	e025      	b.n	800262c <write_card+0xa4>
		MFRC_HALTA(); //Deselect card
 80025e0:	f7fe fc94 	bl	8000f0c <MFRC_HALTA>
		OLED_PrintCent(4,"Verifying...", NORMAL);
 80025e4:	2200      	movs	r2, #0
 80025e6:	4917      	ldr	r1, [pc, #92]	; (8002644 <write_card+0xbc>)
 80025e8:	2004      	movs	r0, #4
 80025ea:	f7ff f94c 	bl	8001886 <OLED_PrintCent>
		if (UL_verify(towrite) == PCD_OK) {
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe ff18 	bl	8001424 <UL_verify>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2bcc      	cmp	r3, #204	; 0xcc
 80025f8:	d105      	bne.n	8002606 <write_card+0x7e>
			OLED_PrintCent(6, "Write verified :)", NORMAL);
 80025fa:	2200      	movs	r2, #0
 80025fc:	4912      	ldr	r1, [pc, #72]	; (8002648 <write_card+0xc0>)
 80025fe:	2006      	movs	r0, #6
 8002600:	f7ff f941 	bl	8001886 <OLED_PrintCent>
 8002604:	e004      	b.n	8002610 <write_card+0x88>
			OLED_PrintCent(6, "COULDN'T VERIFY", NORMAL);
 8002606:	2200      	movs	r2, #0
 8002608:	4910      	ldr	r1, [pc, #64]	; (800264c <write_card+0xc4>)
 800260a:	2006      	movs	r0, #6
 800260c:	f7ff f93b 	bl	8001886 <OLED_PrintCent>
		MFRC_ANTOFF();
 8002610:	f7fe fba0 	bl	8000d54 <MFRC_ANTOFF>
		osDelay(1000);
 8002614:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002618:	f00a f82b 	bl	800c672 <osDelay>
		vTaskResume(HomeHandle);
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <write_card+0xb8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f00b f941 	bl	800d8a8 <vTaskResume>
		vTaskSuspend(NULL);
 8002626:	2000      	movs	r0, #0
 8002628:	f00b f896 	bl	800d758 <vTaskSuspend>
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	0801078c 	.word	0x0801078c
 8002638:	08010798 	.word	0x08010798
 800263c:	080107b0 	.word	0x080107b0
 8002640:	200008bc 	.word	0x200008bc
 8002644:	080107b8 	.word	0x080107b8
 8002648:	080107c8 	.word	0x080107c8
 800264c:	080107dc 	.word	0x080107dc

08002650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002654:	f001 fc3a 	bl	8003ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002658:	f000 f8c0 	bl	80027dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800265c:	f000 fa88 	bl	8002b70 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002660:	f000 f926 	bl	80028b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002664:	f000 f952 	bl	800290c <MX_SPI1_Init>
  MX_SPI2_Init();
 8002668:	f000 f988 	bl	800297c <MX_SPI2_Init>
  MX_TIM2_Init();
 800266c:	f000 f9bc 	bl	80029e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002670:	f000 fa30 	bl	8002ad4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002674:	f009 ff20 	bl	800c4b8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UidtoFound */
  UidtoFoundHandle = osMessageQueueNew (1, sizeof(Card*), &UidtoFound_attributes);
 8002678:	4a35      	ldr	r2, [pc, #212]	; (8002750 <main+0x100>)
 800267a:	2104      	movs	r1, #4
 800267c:	2001      	movs	r0, #1
 800267e:	f00a f813 	bl	800c6a8 <osMessageQueueNew>
 8002682:	4603      	mov	r3, r0
 8002684:	4a33      	ldr	r2, [pc, #204]	; (8002754 <main+0x104>)
 8002686:	6013      	str	r3, [r2, #0]

  /* creation of UserInput */
  UserInputHandle = osMessageQueueNew (1, sizeof(uint8_t), &UserInput_attributes);
 8002688:	4a33      	ldr	r2, [pc, #204]	; (8002758 <main+0x108>)
 800268a:	2101      	movs	r1, #1
 800268c:	2001      	movs	r0, #1
 800268e:	f00a f80b 	bl	800c6a8 <osMessageQueueNew>
 8002692:	4603      	mov	r3, r0
 8002694:	4a31      	ldr	r2, [pc, #196]	; (800275c <main+0x10c>)
 8002696:	6013      	str	r3, [r2, #0]

  /* creation of FileEntry */
  FileEntryHandle = osMessageQueueNew (1, sizeof(uint16_t), &FileEntry_attributes);
 8002698:	4a31      	ldr	r2, [pc, #196]	; (8002760 <main+0x110>)
 800269a:	2102      	movs	r1, #2
 800269c:	2001      	movs	r0, #1
 800269e:	f00a f803 	bl	800c6a8 <osMessageQueueNew>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4a2f      	ldr	r2, [pc, #188]	; (8002764 <main+0x114>)
 80026a6:	6013      	str	r3, [r2, #0]

  /* creation of KeyboardOut */
  KeyboardOutHandle = osMessageQueueNew (1, sizeof(char*), &KeyboardOut_attributes);
 80026a8:	4a2f      	ldr	r2, [pc, #188]	; (8002768 <main+0x118>)
 80026aa:	2104      	movs	r1, #4
 80026ac:	2001      	movs	r0, #1
 80026ae:	f009 fffb 	bl	800c6a8 <osMessageQueueNew>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4a2d      	ldr	r2, [pc, #180]	; (800276c <main+0x11c>)
 80026b6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PERIPHINIT */
  PERIPHINITHandle = osThreadNew(Start_Init, NULL, &PERIPHINIT_attributes);
 80026b8:	4a2d      	ldr	r2, [pc, #180]	; (8002770 <main+0x120>)
 80026ba:	2100      	movs	r1, #0
 80026bc:	482d      	ldr	r0, [pc, #180]	; (8002774 <main+0x124>)
 80026be:	f009 ff45 	bl	800c54c <osThreadNew>
 80026c2:	4603      	mov	r3, r0
 80026c4:	4a2c      	ldr	r2, [pc, #176]	; (8002778 <main+0x128>)
 80026c6:	6013      	str	r3, [r2, #0]

  /* creation of ReadCard */
  ReadCardHandle = osThreadNew(StartReadCard, NULL, &ReadCard_attributes);
 80026c8:	4a2c      	ldr	r2, [pc, #176]	; (800277c <main+0x12c>)
 80026ca:	2100      	movs	r1, #0
 80026cc:	482c      	ldr	r0, [pc, #176]	; (8002780 <main+0x130>)
 80026ce:	f009 ff3d 	bl	800c54c <osThreadNew>
 80026d2:	4603      	mov	r3, r0
 80026d4:	4a2b      	ldr	r2, [pc, #172]	; (8002784 <main+0x134>)
 80026d6:	6013      	str	r3, [r2, #0]

  /* creation of WriteCard */
  WriteCardHandle = osThreadNew(StartWriteCard, NULL, &WriteCard_attributes);
 80026d8:	4a2b      	ldr	r2, [pc, #172]	; (8002788 <main+0x138>)
 80026da:	2100      	movs	r1, #0
 80026dc:	482b      	ldr	r0, [pc, #172]	; (800278c <main+0x13c>)
 80026de:	f009 ff35 	bl	800c54c <osThreadNew>
 80026e2:	4603      	mov	r3, r0
 80026e4:	4a2a      	ldr	r2, [pc, #168]	; (8002790 <main+0x140>)
 80026e6:	6013      	str	r3, [r2, #0]

  /* creation of Home */
  HomeHandle = osThreadNew(StartHome, NULL, &Home_attributes);
 80026e8:	4a2a      	ldr	r2, [pc, #168]	; (8002794 <main+0x144>)
 80026ea:	2100      	movs	r1, #0
 80026ec:	482a      	ldr	r0, [pc, #168]	; (8002798 <main+0x148>)
 80026ee:	f009 ff2d 	bl	800c54c <osThreadNew>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4a29      	ldr	r2, [pc, #164]	; (800279c <main+0x14c>)
 80026f6:	6013      	str	r3, [r2, #0]

  /* creation of CardFound */
  CardFoundHandle = osThreadNew(CardFoundStart, NULL, &CardFound_attributes);
 80026f8:	4a29      	ldr	r2, [pc, #164]	; (80027a0 <main+0x150>)
 80026fa:	2100      	movs	r1, #0
 80026fc:	4829      	ldr	r0, [pc, #164]	; (80027a4 <main+0x154>)
 80026fe:	f009 ff25 	bl	800c54c <osThreadNew>
 8002702:	4603      	mov	r3, r0
 8002704:	4a28      	ldr	r2, [pc, #160]	; (80027a8 <main+0x158>)
 8002706:	6013      	str	r3, [r2, #0]

  /* creation of ShowFiles */
  ShowFilesHandle = osThreadNew(StartShowFiles, NULL, &ShowFiles_attributes);
 8002708:	4a28      	ldr	r2, [pc, #160]	; (80027ac <main+0x15c>)
 800270a:	2100      	movs	r1, #0
 800270c:	4828      	ldr	r0, [pc, #160]	; (80027b0 <main+0x160>)
 800270e:	f009 ff1d 	bl	800c54c <osThreadNew>
 8002712:	4603      	mov	r3, r0
 8002714:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <main+0x164>)
 8002716:	6013      	str	r3, [r2, #0]

  /* creation of ShowFileData */
  ShowFileDataHandle = osThreadNew(StartShowFileData, NULL, &ShowFileData_attributes);
 8002718:	4a27      	ldr	r2, [pc, #156]	; (80027b8 <main+0x168>)
 800271a:	2100      	movs	r1, #0
 800271c:	4827      	ldr	r0, [pc, #156]	; (80027bc <main+0x16c>)
 800271e:	f009 ff15 	bl	800c54c <osThreadNew>
 8002722:	4603      	mov	r3, r0
 8002724:	4a26      	ldr	r2, [pc, #152]	; (80027c0 <main+0x170>)
 8002726:	6013      	str	r3, [r2, #0]

  /* creation of Clone */
  CloneHandle = osThreadNew(StartClone, NULL, &Clone_attributes);
 8002728:	4a26      	ldr	r2, [pc, #152]	; (80027c4 <main+0x174>)
 800272a:	2100      	movs	r1, #0
 800272c:	4826      	ldr	r0, [pc, #152]	; (80027c8 <main+0x178>)
 800272e:	f009 ff0d 	bl	800c54c <osThreadNew>
 8002732:	4603      	mov	r3, r0
 8002734:	4a25      	ldr	r2, [pc, #148]	; (80027cc <main+0x17c>)
 8002736:	6013      	str	r3, [r2, #0]

  /* creation of Keyboard */
  KeyboardHandle = osThreadNew(StartKeyboard, NULL, &Keyboard_attributes);
 8002738:	4a25      	ldr	r2, [pc, #148]	; (80027d0 <main+0x180>)
 800273a:	2100      	movs	r1, #0
 800273c:	4825      	ldr	r0, [pc, #148]	; (80027d4 <main+0x184>)
 800273e:	f009 ff05 	bl	800c54c <osThreadNew>
 8002742:	4603      	mov	r3, r0
 8002744:	4a24      	ldr	r2, [pc, #144]	; (80027d8 <main+0x188>)
 8002746:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002748:	f009 feda 	bl	800c500 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800274c:	e7fe      	b.n	800274c <main+0xfc>
 800274e:	bf00      	nop
 8002750:	08010dec 	.word	0x08010dec
 8002754:	200008d4 	.word	0x200008d4
 8002758:	08010e04 	.word	0x08010e04
 800275c:	200008d8 	.word	0x200008d8
 8002760:	08010e1c 	.word	0x08010e1c
 8002764:	200008dc 	.word	0x200008dc
 8002768:	08010e34 	.word	0x08010e34
 800276c:	200008e0 	.word	0x200008e0
 8002770:	08010ca8 	.word	0x08010ca8
 8002774:	08002c69 	.word	0x08002c69
 8002778:	200008b0 	.word	0x200008b0
 800277c:	08010ccc 	.word	0x08010ccc
 8002780:	08002dbd 	.word	0x08002dbd
 8002784:	200008b4 	.word	0x200008b4
 8002788:	08010cf0 	.word	0x08010cf0
 800278c:	08002e4d 	.word	0x08002e4d
 8002790:	200008b8 	.word	0x200008b8
 8002794:	08010d14 	.word	0x08010d14
 8002798:	08002eed 	.word	0x08002eed
 800279c:	200008bc 	.word	0x200008bc
 80027a0:	08010d38 	.word	0x08010d38
 80027a4:	08002fc1 	.word	0x08002fc1
 80027a8:	200008c0 	.word	0x200008c0
 80027ac:	08010d5c 	.word	0x08010d5c
 80027b0:	080030ad 	.word	0x080030ad
 80027b4:	200008c4 	.word	0x200008c4
 80027b8:	08010d80 	.word	0x08010d80
 80027bc:	08003179 	.word	0x08003179
 80027c0:	200008c8 	.word	0x200008c8
 80027c4:	08010da4 	.word	0x08010da4
 80027c8:	0800321d 	.word	0x0800321d
 80027cc:	200008cc 	.word	0x200008cc
 80027d0:	08010dc8 	.word	0x08010dc8
 80027d4:	080032cd 	.word	0x080032cd
 80027d8:	200008d0 	.word	0x200008d0

080027dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b094      	sub	sp, #80	; 0x50
 80027e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027e2:	f107 0320 	add.w	r3, r7, #32
 80027e6:	2230      	movs	r2, #48	; 0x30
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f00d fa98 	bl	800fd20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027f0:	f107 030c 	add.w	r3, r7, #12
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002800:	2300      	movs	r3, #0
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	4b28      	ldr	r3, [pc, #160]	; (80028a8 <SystemClock_Config+0xcc>)
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <SystemClock_Config+0xcc>)
 800280a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280e:	6413      	str	r3, [r2, #64]	; 0x40
 8002810:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <SystemClock_Config+0xcc>)
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800281c:	2300      	movs	r3, #0
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	4b22      	ldr	r3, [pc, #136]	; (80028ac <SystemClock_Config+0xd0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002828:	4a20      	ldr	r2, [pc, #128]	; (80028ac <SystemClock_Config+0xd0>)
 800282a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <SystemClock_Config+0xd0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800283c:	2301      	movs	r3, #1
 800283e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002846:	2302      	movs	r3, #2
 8002848:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800284a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800284e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002850:	2308      	movs	r3, #8
 8002852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002854:	23a8      	movs	r3, #168	; 0xa8
 8002856:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002858:	2304      	movs	r3, #4
 800285a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800285c:	2307      	movs	r3, #7
 800285e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002860:	f107 0320 	add.w	r3, r7, #32
 8002864:	4618      	mov	r0, r3
 8002866:	f004 f883 	bl	8006970 <HAL_RCC_OscConfig>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002870:	f000 fd7c 	bl	800336c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002874:	230f      	movs	r3, #15
 8002876:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002878:	2302      	movs	r3, #2
 800287a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002884:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800288a:	f107 030c 	add.w	r3, r7, #12
 800288e:	2102      	movs	r1, #2
 8002890:	4618      	mov	r0, r3
 8002892:	f004 fae5 	bl	8006e60 <HAL_RCC_ClockConfig>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800289c:	f000 fd66 	bl	800336c <Error_Handler>
  }
}
 80028a0:	bf00      	nop
 80028a2:	3750      	adds	r7, #80	; 0x50
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40007000 	.word	0x40007000

080028b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <MX_I2C1_Init+0x50>)
 80028b6:	4a13      	ldr	r2, [pc, #76]	; (8002904 <MX_I2C1_Init+0x54>)
 80028b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <MX_I2C1_Init+0x50>)
 80028bc:	4a12      	ldr	r2, [pc, #72]	; (8002908 <MX_I2C1_Init+0x58>)
 80028be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028c0:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <MX_I2C1_Init+0x50>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <MX_I2C1_Init+0x50>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <MX_I2C1_Init+0x50>)
 80028ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <MX_I2C1_Init+0x50>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <MX_I2C1_Init+0x50>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028e0:	4b07      	ldr	r3, [pc, #28]	; (8002900 <MX_I2C1_Init+0x50>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <MX_I2C1_Init+0x50>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028ec:	4804      	ldr	r0, [pc, #16]	; (8002900 <MX_I2C1_Init+0x50>)
 80028ee:	f001 fe03 	bl	80044f8 <HAL_I2C_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028f8:	f000 fd38 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	2000071c 	.word	0x2000071c
 8002904:	40005400 	.word	0x40005400
 8002908:	000186a0 	.word	0x000186a0

0800290c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <MX_SPI1_Init+0x68>)
 8002912:	4a19      	ldr	r2, [pc, #100]	; (8002978 <MX_SPI1_Init+0x6c>)
 8002914:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002916:	4b17      	ldr	r3, [pc, #92]	; (8002974 <MX_SPI1_Init+0x68>)
 8002918:	f44f 7282 	mov.w	r2, #260	; 0x104
 800291c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800291e:	4b15      	ldr	r3, [pc, #84]	; (8002974 <MX_SPI1_Init+0x68>)
 8002920:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002924:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002926:	4b13      	ldr	r3, [pc, #76]	; (8002974 <MX_SPI1_Init+0x68>)
 8002928:	2200      	movs	r2, #0
 800292a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <MX_SPI1_Init+0x68>)
 800292e:	2200      	movs	r2, #0
 8002930:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <MX_SPI1_Init+0x68>)
 8002934:	2200      	movs	r2, #0
 8002936:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002938:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <MX_SPI1_Init+0x68>)
 800293a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800293e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <MX_SPI1_Init+0x68>)
 8002942:	2218      	movs	r2, #24
 8002944:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002946:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <MX_SPI1_Init+0x68>)
 8002948:	2200      	movs	r2, #0
 800294a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <MX_SPI1_Init+0x68>)
 800294e:	2200      	movs	r2, #0
 8002950:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002952:	4b08      	ldr	r3, [pc, #32]	; (8002974 <MX_SPI1_Init+0x68>)
 8002954:	2200      	movs	r2, #0
 8002956:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <MX_SPI1_Init+0x68>)
 800295a:	220a      	movs	r2, #10
 800295c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800295e:	4805      	ldr	r0, [pc, #20]	; (8002974 <MX_SPI1_Init+0x68>)
 8002960:	f004 fcba 	bl	80072d8 <HAL_SPI_Init>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800296a:	f000 fcff 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000770 	.word	0x20000770
 8002978:	40013000 	.word	0x40013000

0800297c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002980:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <MX_SPI2_Init+0x64>)
 8002982:	4a18      	ldr	r2, [pc, #96]	; (80029e4 <MX_SPI2_Init+0x68>)
 8002984:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002986:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <MX_SPI2_Init+0x64>)
 8002988:	f44f 7282 	mov.w	r2, #260	; 0x104
 800298c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <MX_SPI2_Init+0x64>)
 8002990:	2200      	movs	r2, #0
 8002992:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <MX_SPI2_Init+0x64>)
 8002996:	2200      	movs	r2, #0
 8002998:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <MX_SPI2_Init+0x64>)
 800299c:	2200      	movs	r2, #0
 800299e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <MX_SPI2_Init+0x64>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80029a6:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <MX_SPI2_Init+0x64>)
 80029a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029ae:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <MX_SPI2_Init+0x64>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029b4:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <MX_SPI2_Init+0x64>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <MX_SPI2_Init+0x64>)
 80029bc:	2200      	movs	r2, #0
 80029be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <MX_SPI2_Init+0x64>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <MX_SPI2_Init+0x64>)
 80029c8:	220a      	movs	r2, #10
 80029ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80029cc:	4804      	ldr	r0, [pc, #16]	; (80029e0 <MX_SPI2_Init+0x64>)
 80029ce:	f004 fc83 	bl	80072d8 <HAL_SPI_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80029d8:	f000 fcc8 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	200007c8 	.word	0x200007c8
 80029e4:	40003800 	.word	0x40003800

080029e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08e      	sub	sp, #56	; 0x38
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029fc:	f107 0320 	add.w	r3, r7, #32
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
 8002a14:	615a      	str	r2, [r3, #20]
 8002a16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a18:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <MX_TIM2_Init+0xe8>)
 8002a1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8002a20:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <MX_TIM2_Init+0xe8>)
 8002a22:	f240 12a3 	movw	r2, #419	; 0x1a3
 8002a26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a28:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <MX_TIM2_Init+0xe8>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8002a2e:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <MX_TIM2_Init+0xe8>)
 8002a30:	2231      	movs	r2, #49	; 0x31
 8002a32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a34:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <MX_TIM2_Init+0xe8>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a3a:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <MX_TIM2_Init+0xe8>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a40:	4823      	ldr	r0, [pc, #140]	; (8002ad0 <MX_TIM2_Init+0xe8>)
 8002a42:	f005 f87b 	bl	8007b3c <HAL_TIM_Base_Init>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002a4c:	f000 fc8e 	bl	800336c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	481c      	ldr	r0, [pc, #112]	; (8002ad0 <MX_TIM2_Init+0xe8>)
 8002a5e:	f005 fcd9 	bl	8008414 <HAL_TIM_ConfigClockSource>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002a68:	f000 fc80 	bl	800336c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a6c:	4818      	ldr	r0, [pc, #96]	; (8002ad0 <MX_TIM2_Init+0xe8>)
 8002a6e:	f005 f999 	bl	8007da4 <HAL_TIM_PWM_Init>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002a78:	f000 fc78 	bl	800336c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a84:	f107 0320 	add.w	r3, r7, #32
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4811      	ldr	r0, [pc, #68]	; (8002ad0 <MX_TIM2_Init+0xe8>)
 8002a8c:	f006 f87e 	bl	8008b8c <HAL_TIMEx_MasterConfigSynchronization>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002a96:	f000 fc69 	bl	800336c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a9a:	2360      	movs	r3, #96	; 0x60
 8002a9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8002a9e:	2318      	movs	r3, #24
 8002aa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002aaa:	1d3b      	adds	r3, r7, #4
 8002aac:	2208      	movs	r2, #8
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4807      	ldr	r0, [pc, #28]	; (8002ad0 <MX_TIM2_Init+0xe8>)
 8002ab2:	f005 fbed 	bl	8008290 <HAL_TIM_PWM_ConfigChannel>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002abc:	f000 fc56 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002ac0:	4803      	ldr	r0, [pc, #12]	; (8002ad0 <MX_TIM2_Init+0xe8>)
 8002ac2:	f001 f8ab 	bl	8003c1c <HAL_TIM_MspPostInit>

}
 8002ac6:	bf00      	nop
 8002ac8:	3738      	adds	r7, #56	; 0x38
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000820 	.word	0x20000820

08002ad4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ada:	f107 0308 	add.w	r3, r7, #8
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	609a      	str	r2, [r3, #8]
 8002ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae8:	463b      	mov	r3, r7
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002af0:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <MX_TIM3_Init+0x94>)
 8002af2:	4a1e      	ldr	r2, [pc, #120]	; (8002b6c <MX_TIM3_Init+0x98>)
 8002af4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000-1;
 8002af6:	4b1c      	ldr	r3, [pc, #112]	; (8002b68 <MX_TIM3_Init+0x94>)
 8002af8:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002afc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002afe:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <MX_TIM3_Init+0x94>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8002b04:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <MX_TIM3_Init+0x94>)
 8002b06:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002b0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b0c:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <MX_TIM3_Init+0x94>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <MX_TIM3_Init+0x94>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b18:	4813      	ldr	r0, [pc, #76]	; (8002b68 <MX_TIM3_Init+0x94>)
 8002b1a:	f005 f80f 	bl	8007b3c <HAL_TIM_Base_Init>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002b24:	f000 fc22 	bl	800336c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b2e:	f107 0308 	add.w	r3, r7, #8
 8002b32:	4619      	mov	r1, r3
 8002b34:	480c      	ldr	r0, [pc, #48]	; (8002b68 <MX_TIM3_Init+0x94>)
 8002b36:	f005 fc6d 	bl	8008414 <HAL_TIM_ConfigClockSource>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002b40:	f000 fc14 	bl	800336c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b44:	2300      	movs	r3, #0
 8002b46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b4c:	463b      	mov	r3, r7
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4805      	ldr	r0, [pc, #20]	; (8002b68 <MX_TIM3_Init+0x94>)
 8002b52:	f006 f81b 	bl	8008b8c <HAL_TIMEx_MasterConfigSynchronization>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002b5c:	f000 fc06 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b60:	bf00      	nop
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20000868 	.word	0x20000868
 8002b6c:	40000400 	.word	0x40000400

08002b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b76:	f107 030c 	add.w	r3, r7, #12
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	609a      	str	r2, [r3, #8]
 8002b82:	60da      	str	r2, [r3, #12]
 8002b84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	4b34      	ldr	r3, [pc, #208]	; (8002c5c <MX_GPIO_Init+0xec>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	4a33      	ldr	r2, [pc, #204]	; (8002c5c <MX_GPIO_Init+0xec>)
 8002b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b94:	6313      	str	r3, [r2, #48]	; 0x30
 8002b96:	4b31      	ldr	r3, [pc, #196]	; (8002c5c <MX_GPIO_Init+0xec>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <MX_GPIO_Init+0xec>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	4a2c      	ldr	r2, [pc, #176]	; (8002c5c <MX_GPIO_Init+0xec>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <MX_GPIO_Init+0xec>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	603b      	str	r3, [r7, #0]
 8002bc2:	4b26      	ldr	r3, [pc, #152]	; (8002c5c <MX_GPIO_Init+0xec>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	4a25      	ldr	r2, [pc, #148]	; (8002c5c <MX_GPIO_Init+0xec>)
 8002bc8:	f043 0302 	orr.w	r3, r3, #2
 8002bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bce:	4b23      	ldr	r3, [pc, #140]	; (8002c5c <MX_GPIO_Init+0xec>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin, GPIO_PIN_RESET);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002be0:	481f      	ldr	r0, [pc, #124]	; (8002c60 <MX_GPIO_Init+0xf0>)
 8002be2:	f001 fc57 	bl	8004494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MFRC_NRST_Pin, GPIO_PIN_RESET);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2122      	movs	r1, #34	; 0x22
 8002bea:	481e      	ldr	r0, [pc, #120]	; (8002c64 <MX_GPIO_Init+0xf4>)
 8002bec:	f001 fc52 	bl	8004494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002bf4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002bf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002bfe:	f107 030c 	add.w	r3, r7, #12
 8002c02:	4619      	mov	r1, r3
 8002c04:	4816      	ldr	r0, [pc, #88]	; (8002c60 <MX_GPIO_Init+0xf0>)
 8002c06:	f001 faa9 	bl	800415c <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin CS_OLED_Pin CS_MEM_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|CS_OLED_Pin|CS_MEM_Pin;
 8002c0a:	f44f 738c 	mov.w	r3, #280	; 0x118
 8002c0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c10:	2301      	movs	r3, #1
 8002c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1c:	f107 030c 	add.w	r3, r7, #12
 8002c20:	4619      	mov	r1, r3
 8002c22:	480f      	ldr	r0, [pc, #60]	; (8002c60 <MX_GPIO_Init+0xf0>)
 8002c24:	f001 fa9a 	bl	800415c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MFRC_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MFRC_NRST_Pin;
 8002c28:	2322      	movs	r3, #34	; 0x22
 8002c2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4809      	ldr	r0, [pc, #36]	; (8002c64 <MX_GPIO_Init+0xf4>)
 8002c40:	f001 fa8c 	bl	800415c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002c44:	2200      	movs	r2, #0
 8002c46:	2105      	movs	r1, #5
 8002c48:	2007      	movs	r0, #7
 8002c4a:	f001 fa5d 	bl	8004108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002c4e:	2007      	movs	r0, #7
 8002c50:	f001 fa76 	bl	8004140 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c54:	bf00      	nop
 8002c56:	3720      	adds	r7, #32
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40020000 	.word	0x40020000
 8002c64:	40020400 	.word	0x40020400

08002c68 <Start_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Init */
void Start_Init(void *argument)
{
 8002c68:	b5b0      	push	{r4, r5, r7, lr}
 8002c6a:	b09c      	sub	sp, #112	; 0x70
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002c70:	f00c fb24 	bl	800f2bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(ReadCardHandle);
 8002c74:	4b42      	ldr	r3, [pc, #264]	; (8002d80 <Start_Init+0x118>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f00a fd6d 	bl	800d758 <vTaskSuspend>
    vTaskSuspend(WriteCardHandle);
 8002c7e:	4b41      	ldr	r3, [pc, #260]	; (8002d84 <Start_Init+0x11c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f00a fd68 	bl	800d758 <vTaskSuspend>
    vTaskSuspend(HomeHandle);
 8002c88:	4b3f      	ldr	r3, [pc, #252]	; (8002d88 <Start_Init+0x120>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f00a fd63 	bl	800d758 <vTaskSuspend>
    vTaskSuspend(CardFoundHandle);
 8002c92:	4b3e      	ldr	r3, [pc, #248]	; (8002d8c <Start_Init+0x124>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f00a fd5e 	bl	800d758 <vTaskSuspend>
    vTaskSuspend(ShowFilesHandle);
 8002c9c:	4b3c      	ldr	r3, [pc, #240]	; (8002d90 <Start_Init+0x128>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f00a fd59 	bl	800d758 <vTaskSuspend>
    vTaskSuspend(ShowFileDataHandle);
 8002ca6:	4b3b      	ldr	r3, [pc, #236]	; (8002d94 <Start_Init+0x12c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f00a fd54 	bl	800d758 <vTaskSuspend>
    vTaskSuspend(CloneHandle);
 8002cb0:	4b39      	ldr	r3, [pc, #228]	; (8002d98 <Start_Init+0x130>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f00a fd4f 	bl	800d758 <vTaskSuspend>
    vTaskSuspend(KeyboardHandle);
 8002cba:	4b38      	ldr	r3, [pc, #224]	; (8002d9c <Start_Init+0x134>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f00a fd4a 	bl	800d758 <vTaskSuspend>

    MFRC_INIT();
 8002cc4:	f7fe f88e 	bl	8000de4 <MFRC_INIT>
    MFRC_ANTOFF();
 8002cc8:	f7fe f844 	bl	8000d54 <MFRC_ANTOFF>
    OLED_INIT();
 8002ccc:	f7fe fcbe 	bl	800164c <OLED_INIT>
    OLED_Print(TC);
 8002cd0:	4833      	ldr	r0, [pc, #204]	; (8002da0 <Start_Init+0x138>)
 8002cd2:	f7fe fdfc 	bl	80018ce <OLED_Print>
    MEM_INIT();
 8002cd6:	f7ff fa67 	bl	80021a8 <MEM_INIT>
    memory_reset();
 8002cda:	f7ff fbe9 	bl	80024b0 <memory_reset>

    uint8_t fake_contents[64] = {0x04, 0x41, 0xBF, 0x72,
 8002cde:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <Start_Init+0x13c>)
 8002ce0:	f107 0408 	add.w	r4, r7, #8
 8002ce4:	461d      	mov	r5, r3
 8002ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cf2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002cf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    							0x00, 0x01, 0x00, 0x01,
    							0x00, 0x01, 0x00, 0x01,
    							0x00, 0x00, 0x00, 0x00,
    							0x00, 0x00, 0x00, 0x00,
    							0x00, 0x00, 0x00, 0x63};
    uint8_t uid[7] = {0x04, 0x41, 0xBF, 0x72, 0x1A, 0x06, 0x6C};
 8002cfa:	4a2b      	ldr	r2, [pc, #172]	; (8002da8 <Start_Init+0x140>)
 8002cfc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d04:	6018      	str	r0, [r3, #0]
 8002d06:	3304      	adds	r3, #4
 8002d08:	8019      	strh	r1, [r3, #0]
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	0c0a      	lsrs	r2, r1, #16
 8002d0e:	701a      	strb	r2, [r3, #0]

    Card fake_card = {
 8002d10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d16:	2307      	movs	r3, #7
 8002d18:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8002d1c:	4b23      	ldr	r3, [pc, #140]	; (8002dac <Start_Init+0x144>)
 8002d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d20:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <Start_Init+0x148>)
 8002d22:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d24:	2300      	movs	r3, #0
 8002d26:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8002d2a:	f107 0308 	add.w	r3, r7, #8
 8002d2e:	663b      	str	r3, [r7, #96]	; 0x60
 8002d30:	2340      	movs	r3, #64	; 0x40
 8002d32:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    	.uidsize = 7,
		.name = "fake",
		.type = "MIFARE Ultralight",
		.read_protected = 0
    };
    enter_card(&fake_card, 0);
 8002d36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fb1a 	bl	8003376 <enter_card>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) != 0);
 8002d42:	bf00      	nop
 8002d44:	2102      	movs	r1, #2
 8002d46:	481b      	ldr	r0, [pc, #108]	; (8002db4 <Start_Init+0x14c>)
 8002d48:	f001 fb8c 	bl	8004464 <HAL_GPIO_ReadPin>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f8      	bne.n	8002d44 <Start_Init+0xdc>
    osDelay(10);
 8002d52:	200a      	movs	r0, #10
 8002d54:	f009 fc8d 	bl	800c672 <osDelay>
    uint8_t clear = NO_PRESS;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    xQueueSend(UserInputHandle, &clear, 0);
 8002d5e:	4b16      	ldr	r3, [pc, #88]	; (8002db8 <Start_Init+0x150>)
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	f107 014b 	add.w	r1, r7, #75	; 0x4b
 8002d66:	2300      	movs	r3, #0
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f009 ff37 	bl	800cbdc <xQueueGenericSend>
    vTaskResume(HomeHandle);
 8002d6e:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <Start_Init+0x120>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f00a fd98 	bl	800d8a8 <vTaskResume>
    vTaskSuspend(NULL);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f00a fced 	bl	800d758 <vTaskSuspend>
  {
 8002d7e:	e779      	b.n	8002c74 <Start_Init+0xc>
 8002d80:	200008b4 	.word	0x200008b4
 8002d84:	200008b8 	.word	0x200008b8
 8002d88:	200008bc 	.word	0x200008bc
 8002d8c:	200008c0 	.word	0x200008c0
 8002d90:	200008c4 	.word	0x200008c4
 8002d94:	200008c8 	.word	0x200008c8
 8002d98:	200008cc 	.word	0x200008cc
 8002d9c:	200008d0 	.word	0x200008d0
 8002da0:	20000400 	.word	0x20000400
 8002da4:	08010808 	.word	0x08010808
 8002da8:	08010848 	.word	0x08010848
 8002dac:	080107ec 	.word	0x080107ec
 8002db0:	080107f4 	.word	0x080107f4
 8002db4:	40020000 	.word	0x40020000
 8002db8:	200008d8 	.word	0x200008d8

08002dbc <StartReadCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCard */
void StartReadCard(void *argument)
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCard */
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 8002dc4:	201c      	movs	r0, #28
 8002dc6:	f00c ff8d 	bl	800fce4 <malloc>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	60bb      	str	r3, [r7, #8]
	read_card->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 8002dce:	68bc      	ldr	r4, [r7, #8]
 8002dd0:	2040      	movs	r0, #64	; 0x40
 8002dd2:	f00c ff87 	bl	800fce4 <malloc>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	6163      	str	r3, [r4, #20]
	read_card->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8002dda:	68bc      	ldr	r4, [r7, #8]
 8002ddc:	2007      	movs	r0, #7
 8002dde:	f00c ff81 	bl	800fce4 <malloc>
 8002de2:	4603      	mov	r3, r0
 8002de4:	6023      	str	r3, [r4, #0]
	int ranonce = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	MFRC_ANTON();
 8002dea:	f7fd ff79 	bl	8000ce0 <MFRC_ANTON>
	if (ranonce == 0){
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d106      	bne.n	8002e02 <StartReadCard+0x46>
		OLED_SCREEN(&SCRN_ReadCard, NORMAL);
 8002df4:	2100      	movs	r1, #0
 8002df6:	4812      	ldr	r0, [pc, #72]	; (8002e40 <StartReadCard+0x84>)
 8002df8:	f7fe fe34 	bl	8001a64 <OLED_SCREEN>
		ranonce++;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	60fb      	str	r3, [r7, #12]
	}
	if(UL_readcard(read_card) == PCD_OK){
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe fa4d 	bl	80012a4 <UL_readcard>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2bcc      	cmp	r3, #204	; 0xcc
 8002e0e:	d1ec      	bne.n	8002dea <StartReadCard+0x2e>
			BUZZ();
 8002e10:	f7ff fba8 	bl	8002564 <BUZZ>
			MFRC_ANTOFF();
 8002e14:	f7fd ff9e 	bl	8000d54 <MFRC_ANTOFF>
			xQueueSend(UidtoFoundHandle,&read_card,0);
 8002e18:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <StartReadCard+0x88>)
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	f107 0108 	add.w	r1, r7, #8
 8002e20:	2300      	movs	r3, #0
 8002e22:	2200      	movs	r2, #0
 8002e24:	f009 feda 	bl	800cbdc <xQueueGenericSend>
			vTaskResume(CardFoundHandle);
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <StartReadCard+0x8c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f00a fd3b 	bl	800d8a8 <vTaskResume>
			ranonce = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
			vTaskSuspend(NULL);
 8002e36:	2000      	movs	r0, #0
 8002e38:	f00a fc8e 	bl	800d758 <vTaskSuspend>
	MFRC_ANTON();
 8002e3c:	e7d5      	b.n	8002dea <StartReadCard+0x2e>
 8002e3e:	bf00      	nop
 8002e40:	08010f4c 	.word	0x08010f4c
 8002e44:	200008d4 	.word	0x200008d4
 8002e48:	200008c0 	.word	0x200008c0

08002e4c <StartWriteCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteCard */
void StartWriteCard(void *argument)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteCard */
	uint8_t file_select_count = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	75fb      	strb	r3, [r7, #23]
	int ranonce = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61fb      	str	r3, [r7, #28]
	Button_StateTypeDef button_state;
	Card* towrite = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0){
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <StartWriteCard+0x28>
	  	OLED_SCREEN(&SCRN_WriteCard, NORMAL);
 8002e66:	2100      	movs	r1, #0
 8002e68:	481e      	ldr	r0, [pc, #120]	; (8002ee4 <StartWriteCard+0x98>)
 8002e6a:	f7fe fdfb 	bl	8001a64 <OLED_SCREEN>
	  	ranonce++;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3301      	adds	r3, #1
 8002e72:	61fb      	str	r3, [r7, #28]

	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8002e74:	4b1c      	ldr	r3, [pc, #112]	; (8002ee8 <StartWriteCard+0x9c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f107 010f 	add.w	r1, r7, #15
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f00a f846 	bl	800cf10 <xQueueReceive>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d1ea      	bne.n	8002e60 <StartWriteCard+0x14>
		  if (button_state == SHORT_PRESS) {
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d11c      	bne.n	8002eca <StartWriteCard+0x7e>
			  if (entry_present(file_select_count) == RFS_OK) {
 8002e90:	7dfb      	ldrb	r3, [r7, #23]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fcf2 	bl	800387e <entry_present>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1df      	bne.n	8002e60 <StartWriteCard+0x14>
				  towrite = read_card_entry(file_select_count);
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fb1a 	bl	80034de <read_card_entry>
 8002eaa:	61b8      	str	r0, [r7, #24]
				  char* file_name = get_file_name(file_select_count);
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 fd01 	bl	80038b8 <get_file_name>
 8002eb6:	6138      	str	r0, [r7, #16]
				  OLED_SCRNREF(&SCRN_WriteCard, WRITE_SRC_LOC, file_name);
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	2102      	movs	r1, #2
 8002ebc:	4809      	ldr	r0, [pc, #36]	; (8002ee4 <StartWriteCard+0x98>)
 8002ebe:	f7fe fe0a 	bl	8001ad6 <OLED_SCRNREF>
				  free(file_name);
 8002ec2:	6938      	ldr	r0, [r7, #16]
 8002ec4:	f00c ff16 	bl	800fcf4 <free>
 8002ec8:	e7ca      	b.n	8002e60 <StartWriteCard+0x14>
			  }

		  } else if ((button_state == LONG_PRESS) && (towrite != NULL)) {
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d1c7      	bne.n	8002e60 <StartWriteCard+0x14>
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0c4      	beq.n	8002e60 <StartWriteCard+0x14>
			  	ranonce= 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
			  	write_card(towrite);
 8002eda:	69b8      	ldr	r0, [r7, #24]
 8002edc:	f7ff fb54 	bl	8002588 <write_card>
	  if (ranonce == 0){
 8002ee0:	e7be      	b.n	8002e60 <StartWriteCard+0x14>
 8002ee2:	bf00      	nop
 8002ee4:	08010f74 	.word	0x08010f74
 8002ee8:	200008d8 	.word	0x200008d8

08002eec <StartHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHome */
void StartHome(void *argument)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHome */
	uint8_t select_index = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
  /* Infinite loop */
  for(;;)
  {
	  if (ranonce == 0) {
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10c      	bne.n	8002f1c <StartHome+0x30>
		  OLED_SCREEN(&SCRN_Home, NORMAL);
 8002f02:	2100      	movs	r1, #0
 8002f04:	4828      	ldr	r0, [pc, #160]	; (8002fa8 <StartHome+0xbc>)
 8002f06:	f7fe fdad 	bl	8001a64 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_Home, select_index, OLED_RESTORE);
 8002f0a:	7afb      	ldrb	r3, [r7, #11]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4825      	ldr	r0, [pc, #148]	; (8002fa8 <StartHome+0xbc>)
 8002f12:	f7fe fe11 	bl	8001b38 <OLED_SELECT>
		  ranonce++;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	60fb      	str	r3, [r7, #12]
	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8002f1c:	4b23      	ldr	r3, [pc, #140]	; (8002fac <StartHome+0xc0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f107 010a 	add.w	r1, r7, #10
 8002f24:	2200      	movs	r2, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f009 fff2 	bl	800cf10 <xQueueReceive>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d1e4      	bne.n	8002efc <StartHome+0x10>
		  if (button_state == SHORT_PRESS) {
 8002f32:	7abb      	ldrb	r3, [r7, #10]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d107      	bne.n	8002f48 <StartHome+0x5c>
			  oled_move_selection(&SCRN_Home, &select_index, OLED_RESTORE);
 8002f38:	f107 030b 	add.w	r3, r7, #11
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4819      	ldr	r0, [pc, #100]	; (8002fa8 <StartHome+0xbc>)
 8002f42:	f7fe ffcb 	bl	8001edc <oled_move_selection>
 8002f46:	e7d9      	b.n	8002efc <StartHome+0x10>
		  } else if (button_state == LONG_PRESS) {
 8002f48:	7abb      	ldrb	r3, [r7, #10]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d1d6      	bne.n	8002efc <StartHome+0x10>
			  switch(select_index) {
 8002f4e:	7afb      	ldrb	r3, [r7, #11]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d823      	bhi.n	8002f9c <StartHome+0xb0>
 8002f54:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <StartHome+0x70>)
 8002f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5a:	bf00      	nop
 8002f5c:	08002f6d 	.word	0x08002f6d
 8002f60:	08002f79 	.word	0x08002f79
 8002f64:	08002f85 	.word	0x08002f85
 8002f68:	08002f91 	.word	0x08002f91
			  	  case 0:
			  		  vTaskResume(ReadCardHandle);
 8002f6c:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <StartHome+0xc4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f00a fc99 	bl	800d8a8 <vTaskResume>
			  		  break;
 8002f76:	e011      	b.n	8002f9c <StartHome+0xb0>
			  	  case 1:
			  		  vTaskResume(WriteCardHandle);
 8002f78:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <StartHome+0xc8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f00a fc93 	bl	800d8a8 <vTaskResume>
			  		  break;
 8002f82:	e00b      	b.n	8002f9c <StartHome+0xb0>
			  	  case 2:
			  		  vTaskResume(ShowFilesHandle);
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <StartHome+0xcc>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f00a fc8d 	bl	800d8a8 <vTaskResume>
			  		  break;
 8002f8e:	e005      	b.n	8002f9c <StartHome+0xb0>
			  	  case 3:
			  		  vTaskResume(CloneHandle);
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <StartHome+0xd0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f00a fc87 	bl	800d8a8 <vTaskResume>
			  		  break;
 8002f9a:	bf00      	nop
			  }
			  ranonce = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
			  vTaskSuspend(NULL);
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f00a fbd9 	bl	800d758 <vTaskSuspend>
	  if (ranonce == 0) {
 8002fa6:	e7a9      	b.n	8002efc <StartHome+0x10>
 8002fa8:	08010f38 	.word	0x08010f38
 8002fac:	200008d8 	.word	0x200008d8
 8002fb0:	200008b4 	.word	0x200008b4
 8002fb4:	200008b8 	.word	0x200008b8
 8002fb8:	200008c4 	.word	0x200008c4
 8002fbc:	200008cc 	.word	0x200008cc

08002fc0 <CardFoundStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CardFoundStart */
void CardFoundStart(void *argument)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CardFoundStart */
	uint8_t select_index = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	73fb      	strb	r3, [r7, #15]
	int ranonce = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
	Card* read_card;
  /* Infinite loop */
  for(;;)
  {

	if (ranonce == 0) {
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d130      	bne.n	8003038 <CardFoundStart+0x78>
		while(xQueueReceive(UidtoFoundHandle, &read_card, 0) != pdTRUE);
 8002fd6:	bf00      	nop
 8002fd8:	4b2f      	ldr	r3, [pc, #188]	; (8003098 <CardFoundStart+0xd8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f107 0108 	add.w	r1, r7, #8
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f009 ff94 	bl	800cf10 <xQueueReceive>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d1f4      	bne.n	8002fd8 <CardFoundStart+0x18>
		char* uid_str = uid_tostring(read_card->uid, read_card->uidsize);
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	791b      	ldrb	r3, [r3, #4]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f7fe f9c9 	bl	8001390 <uid_tostring>
 8002ffe:	6138      	str	r0, [r7, #16]
		OLED_SCREEN(&SCRN_CardFound, NORMAL);
 8003000:	2100      	movs	r1, #0
 8003002:	4826      	ldr	r0, [pc, #152]	; (800309c <CardFoundStart+0xdc>)
 8003004:	f7fe fd2e 	bl	8001a64 <OLED_SCREEN>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_UID_LOC, uid_str);
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	2101      	movs	r1, #1
 800300c:	4823      	ldr	r0, [pc, #140]	; (800309c <CardFoundStart+0xdc>)
 800300e:	f7fe fd62 	bl	8001ad6 <OLED_SCRNREF>
		OLED_SCRNREF(&SCRN_CardFound, FOUND_CARDTYPE_LOC, read_card->type);
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	461a      	mov	r2, r3
 8003018:	2102      	movs	r1, #2
 800301a:	4820      	ldr	r0, [pc, #128]	; (800309c <CardFoundStart+0xdc>)
 800301c:	f7fe fd5b 	bl	8001ad6 <OLED_SCRNREF>
		OLED_SELECT(&SCRN_CardFound, select_index, OLED_NORESTORE);
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	2200      	movs	r2, #0
 8003024:	4619      	mov	r1, r3
 8003026:	481d      	ldr	r0, [pc, #116]	; (800309c <CardFoundStart+0xdc>)
 8003028:	f7fe fd86 	bl	8001b38 <OLED_SELECT>
		ranonce++;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	3301      	adds	r3, #1
 8003030:	617b      	str	r3, [r7, #20]
		free(uid_str);
 8003032:	6938      	ldr	r0, [r7, #16]
 8003034:	f00c fe5e 	bl	800fcf4 <free>
	}

 	if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003038:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <CardFoundStart+0xe0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f107 010e 	add.w	r1, r7, #14
 8003040:	2200      	movs	r2, #0
 8003042:	4618      	mov	r0, r3
 8003044:	f009 ff64 	bl	800cf10 <xQueueReceive>
 8003048:	4603      	mov	r3, r0
 800304a:	2b01      	cmp	r3, #1
 800304c:	d1c0      	bne.n	8002fd0 <CardFoundStart+0x10>
 		if (button_state == SHORT_PRESS) {
 800304e:	7bbb      	ldrb	r3, [r7, #14]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d107      	bne.n	8003064 <CardFoundStart+0xa4>
 			oled_move_selection(&SCRN_CardFound, &select_index, OLED_NORESTORE);
 8003054:	f107 030f 	add.w	r3, r7, #15
 8003058:	2200      	movs	r2, #0
 800305a:	4619      	mov	r1, r3
 800305c:	480f      	ldr	r0, [pc, #60]	; (800309c <CardFoundStart+0xdc>)
 800305e:	f7fe ff3d 	bl	8001edc <oled_move_selection>
 8003062:	e7b5      	b.n	8002fd0 <CardFoundStart+0x10>
 		} else if (button_state == LONG_PRESS) {
 8003064:	7bbb      	ldrb	r3, [r7, #14]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d1b2      	bne.n	8002fd0 <CardFoundStart+0x10>
 			if (select_index == 0) {
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d107      	bne.n	8003080 <CardFoundStart+0xc0>
 				//enter_card(read_card, mem_find_free_block());
 				vTaskResume(KeyboardHandle);
 8003070:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <CardFoundStart+0xe4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f00a fc17 	bl	800d8a8 <vTaskResume>

 				//while(xQueueReceive(KeyboardOutHandle, &name, 0) != pdTRUE);
 				vTaskSuspend(NULL);
 800307a:	2000      	movs	r0, #0
 800307c:	f00a fb6c 	bl	800d758 <vTaskSuspend>
 			 }
 			vTaskResume(HomeHandle);
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <CardFoundStart+0xe8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f00a fc0f 	bl	800d8a8 <vTaskResume>
 			ranonce = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
 			vTaskSuspend(NULL);
 800308e:	2000      	movs	r0, #0
 8003090:	f00a fb62 	bl	800d758 <vTaskSuspend>
	if (ranonce == 0) {
 8003094:	e79c      	b.n	8002fd0 <CardFoundStart+0x10>
 8003096:	bf00      	nop
 8003098:	200008d4 	.word	0x200008d4
 800309c:	08010f60 	.word	0x08010f60
 80030a0:	200008d8 	.word	0x200008d8
 80030a4:	200008d0 	.word	0x200008d0
 80030a8:	200008bc 	.word	0x200008bc

080030ac <StartShowFiles>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFiles */
void StartShowFiles(void *argument)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFiles */
	uint8_t select_index = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
	Button_StateTypeDef button_state;
	/* Infinite loop */
  for(;;)
  {

	  if (ranonce == 0) {
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d110      	bne.n	80030e4 <StartShowFiles+0x38>
		  OLED_SCREEN(&SCRN_ShowFiles, NORMAL);
 80030c2:	2100      	movs	r1, #0
 80030c4:	4827      	ldr	r0, [pc, #156]	; (8003164 <StartShowFiles+0xb8>)
 80030c6:	f7fe fccd 	bl	8001a64 <OLED_SCREEN>
		  OLED_SELECT(&SCRN_ShowFiles, select_index, OLED_RESTORE);
 80030ca:	7afb      	ldrb	r3, [r7, #11]
 80030cc:	2201      	movs	r2, #1
 80030ce:	4619      	mov	r1, r3
 80030d0:	4824      	ldr	r0, [pc, #144]	; (8003164 <StartShowFiles+0xb8>)
 80030d2:	f7fe fd31 	bl	8001b38 <OLED_SELECT>
		  OLED_display_files(&SCRN_ShowFiles, 0);
 80030d6:	2100      	movs	r1, #0
 80030d8:	4822      	ldr	r0, [pc, #136]	; (8003164 <StartShowFiles+0xb8>)
 80030da:	f7fe fe09 	bl	8001cf0 <OLED_display_files>
		  ranonce++;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	3301      	adds	r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
	  }

	  if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 80030e4:	4b20      	ldr	r3, [pc, #128]	; (8003168 <StartShowFiles+0xbc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f107 010a 	add.w	r1, r7, #10
 80030ec:	2200      	movs	r2, #0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f009 ff0e 	bl	800cf10 <xQueueReceive>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d1e0      	bne.n	80030bc <StartShowFiles+0x10>
		  if (button_state == SHORT_PRESS) {
 80030fa:	7abb      	ldrb	r3, [r7, #10]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d107      	bne.n	8003110 <StartShowFiles+0x64>

			  oled_move_selection(&SCRN_ShowFiles, &select_index, OLED_RESTORE);
 8003100:	f107 030b 	add.w	r3, r7, #11
 8003104:	2201      	movs	r2, #1
 8003106:	4619      	mov	r1, r3
 8003108:	4816      	ldr	r0, [pc, #88]	; (8003164 <StartShowFiles+0xb8>)
 800310a:	f7fe fee7 	bl	8001edc <oled_move_selection>
 800310e:	e7d5      	b.n	80030bc <StartShowFiles+0x10>

		  } else if (button_state == LONG_PRESS) {
 8003110:	7abb      	ldrb	r3, [r7, #10]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d1d2      	bne.n	80030bc <StartShowFiles+0x10>

			  if (select_index == SHOWFILES_EXIT_LOC) {
 8003116:	7afb      	ldrb	r3, [r7, #11]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d105      	bne.n	8003128 <StartShowFiles+0x7c>
				  vTaskResume(HomeHandle);
 800311c:	4b13      	ldr	r3, [pc, #76]	; (800316c <StartShowFiles+0xc0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f00a fbc1 	bl	800d8a8 <vTaskResume>
 8003126:	e017      	b.n	8003158 <StartShowFiles+0xac>

			  } else if ((entry_present(select_index) == RFS_OK)) {
 8003128:	7afb      	ldrb	r3, [r7, #11]
 800312a:	b29b      	uxth	r3, r3
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fba6 	bl	800387e <entry_present>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10f      	bne.n	8003158 <StartShowFiles+0xac>
				  uint16_t entry = select_index;
 8003138:	7afb      	ldrb	r3, [r7, #11]
 800313a:	b29b      	uxth	r3, r3
 800313c:	813b      	strh	r3, [r7, #8]
				  xQueueSend(FileEntryHandle, &entry, 0);
 800313e:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <StartShowFiles+0xc4>)
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	f107 0108 	add.w	r1, r7, #8
 8003146:	2300      	movs	r3, #0
 8003148:	2200      	movs	r2, #0
 800314a:	f009 fd47 	bl	800cbdc <xQueueGenericSend>
				  vTaskResume(ShowFileDataHandle);
 800314e:	4b09      	ldr	r3, [pc, #36]	; (8003174 <StartShowFiles+0xc8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f00a fba8 	bl	800d8a8 <vTaskResume>

			  }
			  ranonce = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
			  vTaskSuspend(NULL);
 800315c:	2000      	movs	r0, #0
 800315e:	f00a fafb 	bl	800d758 <vTaskSuspend>
	  if (ranonce == 0) {
 8003162:	e7ab      	b.n	80030bc <StartShowFiles+0x10>
 8003164:	08010f88 	.word	0x08010f88
 8003168:	200008d8 	.word	0x200008d8
 800316c:	200008bc 	.word	0x200008bc
 8003170:	200008dc 	.word	0x200008dc
 8003174:	200008c8 	.word	0x200008c8

08003178 <StartShowFileData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowFileData */
void StartShowFileData(void *argument)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowFileData */
	uint8_t select_index = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	72fb      	strb	r3, [r7, #11]
	int ranonce = 0;
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
	uint16_t entry_to_show;
  /* Infinite loop */
  for(;;)
  {

    if (ranonce == 0) {
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d112      	bne.n	80031b4 <StartShowFileData+0x3c>
    	while(xQueueReceive(FileEntryHandle, &entry_to_show, 0) != pdTRUE);
 800318e:	bf00      	nop
 8003190:	4b1e      	ldr	r3, [pc, #120]	; (800320c <StartShowFileData+0x94>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f107 0108 	add.w	r1, r7, #8
 8003198:	2200      	movs	r2, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f009 feb8 	bl	800cf10 <xQueueReceive>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d1f4      	bne.n	8003190 <StartShowFileData+0x18>
    	oled_show_file(entry_to_show);
 80031a6:	893b      	ldrh	r3, [r7, #8]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fe fe57 	bl	8001e5c <oled_show_file>
    	ranonce++;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	3301      	adds	r3, #1
 80031b2:	60fb      	str	r3, [r7, #12]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 80031b4:	4b16      	ldr	r3, [pc, #88]	; (8003210 <StartShowFileData+0x98>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f107 010a 	add.w	r1, r7, #10
 80031bc:	2200      	movs	r2, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f009 fea6 	bl	800cf10 <xQueueReceive>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d1de      	bne.n	8003188 <StartShowFileData+0x10>
    	if (button_state == SHORT_PRESS) {
 80031ca:	7abb      	ldrb	r3, [r7, #10]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d107      	bne.n	80031e0 <StartShowFileData+0x68>
    		oled_move_selection(&SCRN_FileData, &select_index, OLED_NORESTORE);
 80031d0:	f107 030b 	add.w	r3, r7, #11
 80031d4:	2200      	movs	r2, #0
 80031d6:	4619      	mov	r1, r3
 80031d8:	480e      	ldr	r0, [pc, #56]	; (8003214 <StartShowFileData+0x9c>)
 80031da:	f7fe fe7f 	bl	8001edc <oled_move_selection>
 80031de:	e7d3      	b.n	8003188 <StartShowFileData+0x10>
    	} else if (button_state == LONG_PRESS) {
 80031e0:	7abb      	ldrb	r3, [r7, #10]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d1d0      	bne.n	8003188 <StartShowFileData+0x10>
    		if (select_index == SHOWFILE_DELETE_LOC) {
 80031e6:	7afb      	ldrb	r3, [r7, #11]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d103      	bne.n	80031f4 <StartShowFileData+0x7c>
    			remove_card(entry_to_show);
 80031ec:	893b      	ldrh	r3, [r7, #8]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fb8f 	bl	8003912 <remove_card>
    		}
    		vTaskResume(ShowFilesHandle);
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <StartShowFileData+0xa0>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f00a fb55 	bl	800d8a8 <vTaskResume>
    		ranonce = 0;
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
    		vTaskSuspend(NULL);
 8003202:	2000      	movs	r0, #0
 8003204:	f00a faa8 	bl	800d758 <vTaskSuspend>
    if (ranonce == 0) {
 8003208:	e7be      	b.n	8003188 <StartShowFileData+0x10>
 800320a:	bf00      	nop
 800320c:	200008dc 	.word	0x200008dc
 8003210:	200008d8 	.word	0x200008d8
 8003214:	08010f9c 	.word	0x08010f9c
 8003218:	200008c4 	.word	0x200008c4

0800321c <StartClone>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClone */
void StartClone(void *argument)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartClone */
	int ranonce = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
	Card* read_card = malloc(sizeof(Card)); //Store our read card here
 8003228:	201c      	movs	r0, #28
 800322a:	f00c fd5b 	bl	800fce4 <malloc>
 800322e:	4603      	mov	r3, r0
 8003230:	60bb      	str	r3, [r7, #8]
	read_card->contents = malloc(UL_MEMSIZE * sizeof(uint8_t));
 8003232:	2040      	movs	r0, #64	; 0x40
 8003234:	f00c fd56 	bl	800fce4 <malloc>
 8003238:	4603      	mov	r3, r0
 800323a:	461a      	mov	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	615a      	str	r2, [r3, #20]
	read_card->uid = malloc(UL_UIDSIZE * sizeof(uint8_t));
 8003240:	2007      	movs	r0, #7
 8003242:	f00c fd4f 	bl	800fce4 <malloc>
 8003246:	4603      	mov	r3, r0
 8003248:	461a      	mov	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	MFRC_ANTON();
 800324e:	f7fd fd47 	bl	8000ce0 <MFRC_ANTON>
    if (ranonce == 0) {
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d106      	bne.n	8003266 <StartClone+0x4a>
    	OLED_SCREEN(&SCRN_Clone, NORMAL);
 8003258:	2100      	movs	r1, #0
 800325a:	4819      	ldr	r0, [pc, #100]	; (80032c0 <StartClone+0xa4>)
 800325c:	f7fe fc02 	bl	8001a64 <OLED_SCREEN>
    	ranonce++;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3301      	adds	r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
    }

    if (UL_readcard(read_card) == PCD_OK) {
 8003266:	68b8      	ldr	r0, [r7, #8]
 8003268:	f7fe f81c 	bl	80012a4 <UL_readcard>
 800326c:	4603      	mov	r3, r0
 800326e:	2bcc      	cmp	r3, #204	; 0xcc
 8003270:	d1ed      	bne.n	800324e <StartClone+0x32>
    	MFRC_HALTA(); //De-select card
 8003272:	f7fd fe4b 	bl	8000f0c <MFRC_HALTA>
    	BUZZ();
 8003276:	f7ff f975 	bl	8002564 <BUZZ>
    	OLED_Clear();
 800327a:	f7fe f928 	bl	80014ce <OLED_Clear>
    	read_card->contents[60] = 0xEE;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	333c      	adds	r3, #60	; 0x3c
 8003284:	22ee      	movs	r2, #238	; 0xee
 8003286:	701a      	strb	r2, [r3, #0]
    	OLED_PrintCent(2, "PLACE CARD YOU WISH", NORMAL);
 8003288:	2200      	movs	r2, #0
 800328a:	490e      	ldr	r1, [pc, #56]	; (80032c4 <StartClone+0xa8>)
 800328c:	2002      	movs	r0, #2
 800328e:	f7fe fafa 	bl	8001886 <OLED_PrintCent>
    	OLED_PrintCent(4, "TO COPY TO", NORMAL);
 8003292:	2200      	movs	r2, #0
 8003294:	490c      	ldr	r1, [pc, #48]	; (80032c8 <StartClone+0xac>)
 8003296:	2004      	movs	r0, #4
 8003298:	f7fe faf5 	bl	8001886 <OLED_PrintCent>
    	while(PICC_CHECK() == PCD_OK); //Hang until read card is removed
 800329c:	bf00      	nop
 800329e:	f7fd ff43 	bl	8001128 <PICC_CHECK>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2bcc      	cmp	r3, #204	; 0xcc
 80032a6:	d0fa      	beq.n	800329e <StartClone+0x82>
    	while(PICC_CHECK() != PCD_OK); //Hang until new card is placed
 80032a8:	bf00      	nop
 80032aa:	f7fd ff3d 	bl	8001128 <PICC_CHECK>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2bcc      	cmp	r3, #204	; 0xcc
 80032b2:	d1fa      	bne.n	80032aa <StartClone+0x8e>
    	ranonce = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
    	write_card(read_card);
 80032b8:	68b8      	ldr	r0, [r7, #8]
 80032ba:	f7ff f965 	bl	8002588 <write_card>
	MFRC_ANTON();
 80032be:	e7c6      	b.n	800324e <StartClone+0x32>
 80032c0:	08010fb0 	.word	0x08010fb0
 80032c4:	08010850 	.word	0x08010850
 80032c8:	08010864 	.word	0x08010864

080032cc <StartKeyboard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKeyboard */
void StartKeyboard(void *argument)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKeyboard */
	uint8_t select_index = 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]
	int ranonce = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
	Button_StateTypeDef button_state;
	char* file_name = NULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
    if (ranonce == 0) {
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10d      	bne.n	8003302 <StartKeyboard+0x36>
    	OLED_Clear();
 80032e6:	f7fe f8f2 	bl	80014ce <OLED_Clear>
    	OLED_SCREEN(&SCRN_Keyboard, NORMAL);
 80032ea:	2100      	movs	r1, #0
 80032ec:	4814      	ldr	r0, [pc, #80]	; (8003340 <StartKeyboard+0x74>)
 80032ee:	f7fe fbb9 	bl	8001a64 <OLED_SCREEN>
    	OLED_select_inv(&SCRN_Keyboard, select_index);
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	4619      	mov	r1, r3
 80032f6:	4812      	ldr	r0, [pc, #72]	; (8003340 <StartKeyboard+0x74>)
 80032f8:	f7fe fc94 	bl	8001c24 <OLED_select_inv>
    	ranonce++;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	3301      	adds	r3, #1
 8003300:	617b      	str	r3, [r7, #20]
    }

    if (xQueueReceive(UserInputHandle, &button_state, 0) == pdTRUE) {
 8003302:	4b10      	ldr	r3, [pc, #64]	; (8003344 <StartKeyboard+0x78>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f107 010e 	add.w	r1, r7, #14
 800330a:	2200      	movs	r2, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f009 fdff 	bl	800cf10 <xQueueReceive>
 8003312:	4603      	mov	r3, r0
 8003314:	2b01      	cmp	r3, #1
 8003316:	d1e3      	bne.n	80032e0 <StartKeyboard+0x14>
    	if (button_state == SHORT_PRESS) {
 8003318:	7bbb      	ldrb	r3, [r7, #14]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d106      	bne.n	800332c <StartKeyboard+0x60>
    		oled_move_selection_inv(&SCRN_Keyboard, &select_index);
 800331e:	f107 030f 	add.w	r3, r7, #15
 8003322:	4619      	mov	r1, r3
 8003324:	4806      	ldr	r0, [pc, #24]	; (8003340 <StartKeyboard+0x74>)
 8003326:	f7fe fdff 	bl	8001f28 <oled_move_selection_inv>
 800332a:	e7d9      	b.n	80032e0 <StartKeyboard+0x14>
    	} else if (button_state == LONG_PRESS) {
 800332c:	7bbb      	ldrb	r3, [r7, #14]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d1d6      	bne.n	80032e0 <StartKeyboard+0x14>
    		oled_keyboard_update(select_index, file_name);
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	6939      	ldr	r1, [r7, #16]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe fe1a 	bl	8001f70 <oled_keyboard_update>
    if (ranonce == 0) {
 800333c:	e7d0      	b.n	80032e0 <StartKeyboard+0x14>
 800333e:	bf00      	nop
 8003340:	08010fc4 	.word	0x08010fc4
 8003344:	200008d8 	.word	0x200008d8

08003348 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a04      	ldr	r2, [pc, #16]	; (8003368 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d101      	bne.n	800335e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800335a:	f000 fdd9 	bl	8003f10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40000c00 	.word	0x40000c00

0800336c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003370:	b672      	cpsid	i
}
 8003372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003374:	e7fe      	b.n	8003374 <Error_Handler+0x8>

08003376 <enter_card>:
 *
 * @param card - Card to store
 * @param entry - Entry (Block number) to store card
 * @return RFS_OK if card was successfully stored
 * */
RFS_StatusTypeDef enter_card(Card* card, uint16_t entry) {
 8003376:	b5b0      	push	{r4, r5, r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	460b      	mov	r3, r1
 8003380:	807b      	strh	r3, [r7, #2]
	uint16_t block_startaddr = entry * BLOCK_PAGECOUNT;
 8003382:	887b      	ldrh	r3, [r7, #2]
 8003384:	019b      	lsls	r3, r3, #6
 8003386:	81fb      	strh	r3, [r7, #14]
	block_erase(entry); //Erase entire block ready for new data
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe fed0 	bl	8002130 <block_erase>
	enter_metadata(card, entry);
 8003390:	887b      	ldrh	r3, [r7, #2]
 8003392:	4619      	mov	r1, r3
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f83f 	bl	8003418 <enter_metadata>

	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000, (uint8_t*)card->name, strlen(card->name)) != HAL_OK) {
 800339a:	89fb      	ldrh	r3, [r7, #14]
 800339c:	3301      	adds	r3, #1
 800339e:	b29c      	uxth	r4, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689d      	ldr	r5, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fc ff19 	bl	80001e0 <strlen>
 80033ae:	4603      	mov	r3, r0
 80033b0:	462a      	mov	r2, r5
 80033b2:	2100      	movs	r1, #0
 80033b4:	4620      	mov	r0, r4
 80033b6:	f7fe ff13 	bl	80021e0 <MEM_WRITE>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <enter_card+0x4e>
		return RFS_WRITE_ERROR;
 80033c0:	2304      	movs	r3, #4
 80033c2:	e025      	b.n	8003410 <enter_card+0x9a>
	}
	if (MEM_WRITE(block_startaddr + NAMEPAGE_OFFSET, 0x0000 + strlen(card->name),card->uid ,card->uidsize) != HAL_OK) {
 80033c4:	89fb      	ldrh	r3, [r7, #14]
 80033c6:	3301      	adds	r3, #1
 80033c8:	b29c      	uxth	r4, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fc ff06 	bl	80001e0 <strlen>
 80033d4:	4603      	mov	r3, r0
 80033d6:	b299      	uxth	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	791b      	ldrb	r3, [r3, #4]
 80033e0:	4620      	mov	r0, r4
 80033e2:	f7fe fefd 	bl	80021e0 <MEM_WRITE>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <enter_card+0x7a>
		return RFS_WRITE_ERROR;
 80033ec:	2304      	movs	r3, #4
 80033ee:	e00f      	b.n	8003410 <enter_card+0x9a>
	}
	if (MEM_WRITE(block_startaddr + DATAPAGE_OFFSET, 0x0000, card->contents, card->contents_size) != HAL_OK) {
 80033f0:	89fb      	ldrh	r3, [r7, #14]
 80033f2:	3302      	adds	r3, #2
 80033f4:	b298      	uxth	r0, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	8b1b      	ldrh	r3, [r3, #24]
 80033fe:	2100      	movs	r1, #0
 8003400:	f7fe feee 	bl	80021e0 <MEM_WRITE>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <enter_card+0x98>
		return RFS_WRITE_ERROR;
 800340a:	2304      	movs	r3, #4
 800340c:	e000      	b.n	8003410 <enter_card+0x9a>
	}

	return RFS_OK;
 800340e:	2300      	movs	r3, #0

}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bdb0      	pop	{r4, r5, r7, pc}

08003418 <enter_metadata>:
 * Write the card metadata into a block
 *
 * @param card - Card to write
 * @param block_num - Block number
 * */
RFS_StatusTypeDef enter_metadata(Card* card, uint16_t block_num) {
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	807b      	strh	r3, [r7, #2]
	uint8_t card_size = card->contents_size; //Card contents is uint8_t
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8b1b      	ldrh	r3, [r3, #24]
 8003428:	73fb      	strb	r3, [r7, #15]
	uint8_t read_protected = card->read_protected;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	7c1b      	ldrb	r3, [r3, #16]
 800342e:	73bb      	strb	r3, [r7, #14]
	uint8_t uid_size = card->uidsize;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	791b      	ldrb	r3, [r3, #4]
 8003434:	737b      	strb	r3, [r7, #13]
	uint8_t metasize = sizeof(card_size) + sizeof(uid_size) + sizeof(read_protected) + strlen(card->type);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	4618      	mov	r0, r3
 800343c:	f7fc fed0 	bl	80001e0 <strlen>
 8003440:	4603      	mov	r3, r0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	3303      	adds	r3, #3
 8003446:	733b      	strb	r3, [r7, #12]
	uint8_t* metadata = malloc(metasize);
 8003448:	7b3b      	ldrb	r3, [r7, #12]
 800344a:	4618      	mov	r0, r3
 800344c:	f00c fc4a 	bl	800fce4 <malloc>
 8003450:	4603      	mov	r3, r0
 8003452:	60bb      	str	r3, [r7, #8]

	memcpy(metadata, (uint8_t*) card->type, strlen(card->type));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68dc      	ldr	r4, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4618      	mov	r0, r3
 800345e:	f7fc febf 	bl	80001e0 <strlen>
 8003462:	4603      	mov	r3, r0
 8003464:	461a      	mov	r2, r3
 8003466:	4621      	mov	r1, r4
 8003468:	68b8      	ldr	r0, [r7, #8]
 800346a:	f00c fc4b 	bl	800fd04 <memcpy>
	metadata[strlen(card->type) + 0] = card_size;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fc feb4 	bl	80001e0 <strlen>
 8003478:	4602      	mov	r2, r0
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	4413      	add	r3, r2
 800347e:	7bfa      	ldrb	r2, [r7, #15]
 8003480:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 1] = uid_size;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fc feaa 	bl	80001e0 <strlen>
 800348c:	4603      	mov	r3, r0
 800348e:	3301      	adds	r3, #1
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	4413      	add	r3, r2
 8003494:	7b7a      	ldrb	r2, [r7, #13]
 8003496:	701a      	strb	r2, [r3, #0]
	metadata[strlen(card->type) + 2] = read_protected;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4618      	mov	r0, r3
 800349e:	f7fc fe9f 	bl	80001e0 <strlen>
 80034a2:	4603      	mov	r3, r0
 80034a4:	3302      	adds	r3, #2
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	4413      	add	r3, r2
 80034aa:	7bba      	ldrb	r2, [r7, #14]
 80034ac:	701a      	strb	r2, [r3, #0]

	if (MEM_WRITE(block_num * BLOCK_PAGECOUNT, 0x0000, metadata, metasize) != HAL_OK) {
 80034ae:	887b      	ldrh	r3, [r7, #2]
 80034b0:	019b      	lsls	r3, r3, #6
 80034b2:	b298      	uxth	r0, r3
 80034b4:	7b3b      	ldrb	r3, [r7, #12]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	2100      	movs	r1, #0
 80034ba:	f7fe fe91 	bl	80021e0 <MEM_WRITE>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d004      	beq.n	80034ce <enter_metadata+0xb6>
		free(metadata);
 80034c4:	68b8      	ldr	r0, [r7, #8]
 80034c6:	f00c fc15 	bl	800fcf4 <free>
		return RFS_WRITE_ERROR;
 80034ca:	2304      	movs	r3, #4
 80034cc:	e003      	b.n	80034d6 <enter_metadata+0xbe>
	}
	free(metadata);
 80034ce:	68b8      	ldr	r0, [r7, #8]
 80034d0:	f00c fc10 	bl	800fcf4 <free>
	return RFS_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd90      	pop	{r4, r7, pc}

080034de <read_card_entry>:
 * Get card from entry number
 *
 * @param entry - Entry number of card
 * @return a new Card instance with read data
 * */
Card* read_card_entry(uint16_t entry) {
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	4603      	mov	r3, r0
 80034e6:	80fb      	strh	r3, [r7, #6]
	Card* result = malloc(sizeof(Card));
 80034e8:	201c      	movs	r0, #28
 80034ea:	f00c fbfb 	bl	800fce4 <malloc>
 80034ee:	4603      	mov	r3, r0
 80034f0:	60fb      	str	r3, [r7, #12]

	if (read_metadata(result, entry) != RFS_OK) {
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	4619      	mov	r1, r3
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f81e 	bl	8003538 <read_metadata>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <read_card_entry+0x28>
		return NULL;
 8003502:	2300      	movs	r3, #0
 8003504:	e014      	b.n	8003530 <read_card_entry+0x52>
	}

	if (read_nameuid(result, entry) != RFS_OK) {
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	4619      	mov	r1, r3
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f881 	bl	8003612 <read_nameuid>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <read_card_entry+0x3c>
		return NULL;
 8003516:	2300      	movs	r3, #0
 8003518:	e00a      	b.n	8003530 <read_card_entry+0x52>
	}

	if(read_cardcontents(result, entry) != RFS_OK) {
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	4619      	mov	r1, r3
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f8e2 	bl	80036e8 <read_cardcontents>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <read_card_entry+0x50>
		return NULL;
 800352a:	2300      	movs	r3, #0
 800352c:	e000      	b.n	8003530 <read_card_entry+0x52>
	}

	return result;
 800352e:	68fb      	ldr	r3, [r7, #12]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <read_metadata>:
 *
 * @param result - Card to store data to
 * @param entry - entry to read from
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_metadata(Card* result, uint16_t entry) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	807b      	strh	r3, [r7, #2]
	uint16_t metadata_size = get_datasize(entry, METAPAGE_OFFSET);
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	2100      	movs	r1, #0
 8003548:	4618      	mov	r0, r3
 800354a:	f000 f8f5 	bl	8003738 <get_datasize>
 800354e:	4603      	mov	r3, r0
 8003550:	82fb      	strh	r3, [r7, #22]
	uint8_t* metadata = malloc(metadata_size * sizeof(uint8_t));
 8003552:	8afb      	ldrh	r3, [r7, #22]
 8003554:	4618      	mov	r0, r3
 8003556:	f00c fbc5 	bl	800fce4 <malloc>
 800355a:	4603      	mov	r3, r0
 800355c:	613b      	str	r3, [r7, #16]
	char* type = malloc(((metadata_size - 3) + 1) * sizeof(char)); //+1 for null
 800355e:	8afb      	ldrh	r3, [r7, #22]
 8003560:	3b02      	subs	r3, #2
 8003562:	4618      	mov	r0, r3
 8003564:	f00c fbbe 	bl	800fce4 <malloc>
 8003568:	4603      	mov	r3, r0
 800356a:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, metadata, metadata_size) != HAL_OK) {
 800356c:	887b      	ldrh	r3, [r7, #2]
 800356e:	019b      	lsls	r3, r3, #6
 8003570:	b298      	uxth	r0, r3
 8003572:	8afb      	ldrh	r3, [r7, #22]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	2100      	movs	r1, #0
 8003578:	f7fe fec8 	bl	800230c <MEM_READPAGE>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d004      	beq.n	800358c <read_metadata+0x54>
		free(metadata);
 8003582:	6938      	ldr	r0, [r7, #16]
 8003584:	f00c fbb6 	bl	800fcf4 <free>
		return RFS_READ_ERROR;
 8003588:	2305      	movs	r3, #5
 800358a:	e03e      	b.n	800360a <read_metadata+0xd2>
	}

	if ((uint8_t)type[0] == 0xFF) { //Simple check to see if we read an empty entry
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2bff      	cmp	r3, #255	; 0xff
 8003592:	d104      	bne.n	800359e <read_metadata+0x66>
		free(metadata);
 8003594:	6938      	ldr	r0, [r7, #16]
 8003596:	f00c fbad 	bl	800fcf4 <free>
		return RFS_NO_CARD;
 800359a:	2301      	movs	r3, #1
 800359c:	e035      	b.n	800360a <read_metadata+0xd2>
	}

	memcpy(type, metadata, metadata_size - 3);
 800359e:	8afb      	ldrh	r3, [r7, #22]
 80035a0:	3b03      	subs	r3, #3
 80035a2:	461a      	mov	r2, r3
 80035a4:	6939      	ldr	r1, [r7, #16]
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f00c fbac 	bl	800fd04 <memcpy>
	type[metadata_size - 3] = '\0';
 80035ac:	8afb      	ldrh	r3, [r7, #22]
 80035ae:	3b03      	subs	r3, #3
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
	result->type = type;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	60da      	str	r2, [r3, #12]
	result->contents_size = metadata[metadata_size - 3];
 80035be:	8afb      	ldrh	r3, [r7, #22]
 80035c0:	3b03      	subs	r3, #3
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4413      	add	r3, r2
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	831a      	strh	r2, [r3, #24]
	result->uidsize = metadata[metadata_size - 2];
 80035ce:	8afb      	ldrh	r3, [r7, #22]
 80035d0:	3b02      	subs	r3, #2
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4413      	add	r3, r2
 80035d6:	781a      	ldrb	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	711a      	strb	r2, [r3, #4]
	if (metadata[metadata_size - 1] == READ_PROTECTED) { //Card is read protected
 80035dc:	8afb      	ldrh	r3, [r7, #22]
 80035de:	3b01      	subs	r3, #1
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4413      	add	r3, r2
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d104      	bne.n	80035f4 <read_metadata+0xbc>
		free(metadata);
 80035ea:	6938      	ldr	r0, [r7, #16]
 80035ec:	f00c fb82 	bl	800fcf4 <free>
		return RFS_CARD_PROTECTED;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e00a      	b.n	800360a <read_metadata+0xd2>
	}
	result->read_protected = metadata[metadata_size - 1];
 80035f4:	8afb      	ldrh	r3, [r7, #22]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4413      	add	r3, r2
 80035fc:	781a      	ldrb	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	741a      	strb	r2, [r3, #16]
	free(metadata);
 8003602:	6938      	ldr	r0, [r7, #16]
 8003604:	f00c fb76 	bl	800fcf4 <free>

	return RFS_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <read_nameuid>:
 * Read the name and uid of card entry. Note that metadata must be read before name and uid can be read
 * @param result - Result to store data to
 * @param entry - Entry to read from
 * @return RFS_OK if name and uid was successfully read
 * */
RFS_StatusTypeDef read_nameuid(Card* result, uint16_t entry) {
 8003612:	b580      	push	{r7, lr}
 8003614:	b086      	sub	sp, #24
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	460b      	mov	r3, r1
 800361c:	807b      	strh	r3, [r7, #2]
	uint16_t datasize = get_datasize(entry, NAMEPAGE_OFFSET);
 800361e:	887b      	ldrh	r3, [r7, #2]
 8003620:	2101      	movs	r1, #1
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f888 	bl	8003738 <get_datasize>
 8003628:	4603      	mov	r3, r0
 800362a:	82fb      	strh	r3, [r7, #22]
	uint8_t* raw_data = malloc(datasize*sizeof(uint8_t));
 800362c:	8afb      	ldrh	r3, [r7, #22]
 800362e:	4618      	mov	r0, r3
 8003630:	f00c fb58 	bl	800fce4 <malloc>
 8003634:	4603      	mov	r3, r0
 8003636:	613b      	str	r3, [r7, #16]
	char* name = malloc((datasize - result->uidsize + 1) * sizeof(char)); //+1 for null
 8003638:	8afb      	ldrh	r3, [r7, #22]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	7912      	ldrb	r2, [r2, #4]
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	3301      	adds	r3, #1
 8003642:	4618      	mov	r0, r3
 8003644:	f00c fb4e 	bl	800fce4 <malloc>
 8003648:	4603      	mov	r3, r0
 800364a:	60fb      	str	r3, [r7, #12]
	uint8_t* uid = malloc((result->uidsize) * sizeof(uint8_t));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	791b      	ldrb	r3, [r3, #4]
 8003650:	4618      	mov	r0, r3
 8003652:	f00c fb47 	bl	800fce4 <malloc>
 8003656:	4603      	mov	r3, r0
 8003658:	60bb      	str	r3, [r7, #8]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + NAMEPAGE_OFFSET, 0x0000, raw_data, datasize) != HAL_OK) {
 800365a:	887b      	ldrh	r3, [r7, #2]
 800365c:	019b      	lsls	r3, r3, #6
 800365e:	b29b      	uxth	r3, r3
 8003660:	3301      	adds	r3, #1
 8003662:	b298      	uxth	r0, r3
 8003664:	8afb      	ldrh	r3, [r7, #22]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	2100      	movs	r1, #0
 800366a:	f7fe fe4f 	bl	800230c <MEM_READPAGE>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d004      	beq.n	800367e <read_nameuid+0x6c>
		free(raw_data);
 8003674:	6938      	ldr	r0, [r7, #16]
 8003676:	f00c fb3d 	bl	800fcf4 <free>
		return RFS_READ_ERROR;
 800367a:	2305      	movs	r3, #5
 800367c:	e030      	b.n	80036e0 <read_nameuid+0xce>
	}

	if ((uint8_t)name[0] == 0xFF) { //Simple check to see if we read an empty entry
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	2bff      	cmp	r3, #255	; 0xff
 8003684:	d104      	bne.n	8003690 <read_nameuid+0x7e>
		free(raw_data);
 8003686:	6938      	ldr	r0, [r7, #16]
 8003688:	f00c fb34 	bl	800fcf4 <free>
		return RFS_NO_CARD;
 800368c:	2301      	movs	r3, #1
 800368e:	e027      	b.n	80036e0 <read_nameuid+0xce>
	}

	memcpy(name, raw_data, datasize - result->uidsize);
 8003690:	8afb      	ldrh	r3, [r7, #22]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	7912      	ldrb	r2, [r2, #4]
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	461a      	mov	r2, r3
 800369a:	6939      	ldr	r1, [r7, #16]
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f00c fb31 	bl	800fd04 <memcpy>
	name[datasize - result->uidsize] = '\0';
 80036a2:	8afb      	ldrh	r3, [r7, #22]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	7912      	ldrb	r2, [r2, #4]
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	461a      	mov	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4413      	add	r3, r2
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
	result->name = name;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	609a      	str	r2, [r3, #8]

	memcpy(uid, raw_data + strlen(name), result->uidsize);
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f7fc fd90 	bl	80001e0 <strlen>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1899      	adds	r1, r3, r2
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	791b      	ldrb	r3, [r3, #4]
 80036ca:	461a      	mov	r2, r3
 80036cc:	68b8      	ldr	r0, [r7, #8]
 80036ce:	f00c fb19 	bl	800fd04 <memcpy>
	result->uid = uid;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	601a      	str	r2, [r3, #0]
	free(raw_data);
 80036d8:	6938      	ldr	r0, [r7, #16]
 80036da:	f00c fb0b 	bl	800fcf4 <free>

	return RFS_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <read_cardcontents>:
/**
 * Read the contents of a card entry
 * @param entry - Entry to read contents of
 * @return RFS_OK if data was successfully read
 * */
RFS_StatusTypeDef read_cardcontents(Card* result, uint16_t entry) {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	807b      	strh	r3, [r7, #2]
	uint8_t* contents = malloc(result->contents_size * sizeof(uint8_t));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8b1b      	ldrh	r3, [r3, #24]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f00c faf3 	bl	800fce4 <malloc>
 80036fe:	4603      	mov	r3, r0
 8003700:	60fb      	str	r3, [r7, #12]

	if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + DATAPAGE_OFFSET, 0x0000, contents, result->contents_size) != HAL_OK) {
 8003702:	887b      	ldrh	r3, [r7, #2]
 8003704:	019b      	lsls	r3, r3, #6
 8003706:	b29b      	uxth	r3, r3
 8003708:	3302      	adds	r3, #2
 800370a:	b298      	uxth	r0, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	8b1b      	ldrh	r3, [r3, #24]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	2100      	movs	r1, #0
 8003714:	f7fe fdfa 	bl	800230c <MEM_READPAGE>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d004      	beq.n	8003728 <read_cardcontents+0x40>
		free(contents);
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f00c fae8 	bl	800fcf4 <free>
		return RFS_READ_ERROR;
 8003724:	2305      	movs	r3, #5
 8003726:	e003      	b.n	8003730 <read_cardcontents+0x48>
	}

	result->contents = contents;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	615a      	str	r2, [r3, #20]
	return RFS_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <get_datasize>:
 * Get the size of a chunk of data from specific block and page
 * @param entry - Entry to read from
 * @param page - Page to begin reading from
 * @return size of data in bytes
 * */
uint16_t get_datasize(uint16_t entry, uint8_t page) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	460a      	mov	r2, r1
 8003742:	80fb      	strh	r3, [r7, #6]
 8003744:	4613      	mov	r3, r2
 8003746:	717b      	strb	r3, [r7, #5]
	uint16_t size = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	81fb      	strh	r3, [r7, #14]
	uint8_t byte_read = 0x00;
 800374c:	2300      	movs	r3, #0
 800374e:	737b      	strb	r3, [r7, #13]

	while(byte_read != 0xFF) {
 8003750:	e014      	b.n	800377c <get_datasize+0x44>
		if (MEM_READPAGE((entry * BLOCK_PAGECOUNT) + page, size, &byte_read, 1) != HAL_OK) {
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	019b      	lsls	r3, r3, #6
 8003756:	b29a      	uxth	r2, r3
 8003758:	797b      	ldrb	r3, [r7, #5]
 800375a:	b29b      	uxth	r3, r3
 800375c:	4413      	add	r3, r2
 800375e:	b298      	uxth	r0, r3
 8003760:	f107 020d 	add.w	r2, r7, #13
 8003764:	89f9      	ldrh	r1, [r7, #14]
 8003766:	2301      	movs	r3, #1
 8003768:	f7fe fdd0 	bl	800230c <MEM_READPAGE>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <get_datasize+0x3e>
			return 0; //Error occured whilst reading
 8003772:	2300      	movs	r3, #0
 8003774:	e008      	b.n	8003788 <get_datasize+0x50>
		}
		size++;
 8003776:	89fb      	ldrh	r3, [r7, #14]
 8003778:	3301      	adds	r3, #1
 800377a:	81fb      	strh	r3, [r7, #14]
	while(byte_read != 0xFF) {
 800377c:	7b7b      	ldrb	r3, [r7, #13]
 800377e:	2bff      	cmp	r3, #255	; 0xff
 8003780:	d1e7      	bne.n	8003752 <get_datasize+0x1a>
	}

	return size - 1; //Last iteration will add 1 to true size so -1
 8003782:	89fb      	ldrh	r3, [r7, #14]
 8003784:	3b01      	subs	r3, #1
 8003786:	b29b      	uxth	r3, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <get_number_files>:

/**
 * Get number of files currently stored
 * @return number of files stored
 * */
int get_number_files(void) {
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
	int count = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < BLOCK_COUNT; i++) {
 800379a:	2300      	movs	r3, #0
 800379c:	603b      	str	r3, [r7, #0]
 800379e:	e00d      	b.n	80037bc <get_number_files+0x2c>
		if (entry_present(i) == RFS_OK) {
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 f86a 	bl	800387e <entry_present>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <get_number_files+0x36>
			count++;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3301      	adds	r3, #1
 80037b4:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < BLOCK_COUNT; i++) {
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	3301      	adds	r3, #1
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c2:	dbed      	blt.n	80037a0 <get_number_files+0x10>
 80037c4:	e000      	b.n	80037c8 <get_number_files+0x38>
		} else {
			break;
 80037c6:	bf00      	nop
		}

	}

	return count;
 80037c8:	687b      	ldr	r3, [r7, #4]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <get_all_files>:
 * Get the names of all currently stored cards
 *
 * @param result - Array to store file names
 * @return RFS_OK if all file names were read correctly
 * */
RFS_StatusTypeDef get_all_files(char** result) {
 80037d2:	b5b0      	push	{r4, r5, r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
	Card* work;

	for (int i = 0; i < BLOCK_COUNT; i++) {
 80037da:	2300      	movs	r3, #0
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	e040      	b.n	8003862 <get_all_files+0x90>
		if (entry_present(i) == RFS_OK) {
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 f84a 	bl	800387e <entry_present>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d13d      	bne.n	800386c <get_all_files+0x9a>
			work = read_card_entry(i);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff fe72 	bl	80034de <read_card_entry>
 80037fa:	60f8      	str	r0, [r7, #12]
			result[i] = malloc(strlen(work->name) + 1);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4618      	mov	r0, r3
 8003802:	f7fc fced 	bl	80001e0 <strlen>
 8003806:	4603      	mov	r3, r0
 8003808:	1c59      	adds	r1, r3, #1
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	18d4      	adds	r4, r2, r3
 8003812:	4608      	mov	r0, r1
 8003814:	f00c fa66 	bl	800fce4 <malloc>
 8003818:	4603      	mov	r3, r0
 800381a:	6023      	str	r3, [r4, #0]
			memcpy(result[i], work->name, strlen(work->name));
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	4413      	add	r3, r2
 8003824:	681c      	ldr	r4, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	689d      	ldr	r5, [r3, #8]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	4618      	mov	r0, r3
 8003830:	f7fc fcd6 	bl	80001e0 <strlen>
 8003834:	4603      	mov	r3, r0
 8003836:	461a      	mov	r2, r3
 8003838:	4629      	mov	r1, r5
 800383a:	4620      	mov	r0, r4
 800383c:	f00c fa62 	bl	800fd04 <memcpy>
			result[i][strlen(work->name)] = '\0';
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	4413      	add	r3, r2
 8003848:	681c      	ldr	r4, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fc fcc6 	bl	80001e0 <strlen>
 8003854:	4603      	mov	r3, r0
 8003856:	4423      	add	r3, r4
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < BLOCK_COUNT; i++) {
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	3301      	adds	r3, #1
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003868:	dbba      	blt.n	80037e0 <get_all_files+0xe>
 800386a:	e000      	b.n	800386e <get_all_files+0x9c>
		} else {
			break;
 800386c:	bf00      	nop
		}
	}

	free(work);
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f00c fa40 	bl	800fcf4 <free>
	return RFS_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bdb0      	pop	{r4, r5, r7, pc}

0800387e <entry_present>:
 * Check if entry is present
 *
 * @param entry - Entry to check
 * @return RFS_OK if entry is present
 * */
RFS_StatusTypeDef entry_present(uint16_t entry) {
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	4603      	mov	r3, r0
 8003886:	80fb      	strh	r3, [r7, #6]
	uint8_t byte_read;

	if (MEM_READPAGE(entry * BLOCK_PAGECOUNT, 0x0000, &byte_read, 1) != HAL_OK) {
 8003888:	88fb      	ldrh	r3, [r7, #6]
 800388a:	019b      	lsls	r3, r3, #6
 800388c:	b298      	uxth	r0, r3
 800388e:	f107 020f 	add.w	r2, r7, #15
 8003892:	2301      	movs	r3, #1
 8003894:	2100      	movs	r1, #0
 8003896:	f7fe fd39 	bl	800230c <MEM_READPAGE>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <entry_present+0x26>
		return RFS_READ_ERROR;
 80038a0:	2305      	movs	r3, #5
 80038a2:	e005      	b.n	80038b0 <entry_present+0x32>
	}

	if (byte_read == 0xFF) {
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	2bff      	cmp	r3, #255	; 0xff
 80038a8:	d101      	bne.n	80038ae <entry_present+0x30>
		return RFS_NO_CARD;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <entry_present+0x32>
	}

	return RFS_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <get_file_name>:
/**
 * Get the file name of a given entry
 * @param entry - Entry to get name of
 * @return pointer to name
 * */
char* get_file_name(uint16_t entry) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	80fb      	strh	r3, [r7, #6]
	Card* work;

	if (entry_present(entry) != RFS_OK) {
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff ffda 	bl	800387e <entry_present>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <get_file_name+0x1c>
		return NULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e01a      	b.n	800390a <get_file_name+0x52>
	}

	work = read_card_entry(entry);
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fe01 	bl	80034de <read_card_entry>
 80038dc:	60f8      	str	r0, [r7, #12]

	char* name = malloc((strlen(work->name) + 1) * sizeof(char));
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fc fc7c 	bl	80001e0 <strlen>
 80038e8:	4603      	mov	r3, r0
 80038ea:	3301      	adds	r3, #1
 80038ec:	4618      	mov	r0, r3
 80038ee:	f00c f9f9 	bl	800fce4 <malloc>
 80038f2:	4603      	mov	r3, r0
 80038f4:	60bb      	str	r3, [r7, #8]
	strcpy(name, work->name);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	4619      	mov	r1, r3
 80038fc:	68b8      	ldr	r0, [r7, #8]
 80038fe:	f00c fb2f 	bl	800ff60 <strcpy>
	free(work);
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f00c f9f6 	bl	800fcf4 <free>

	return name;
 8003908:	68bb      	ldr	r3, [r7, #8]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <remove_card>:

/**
 * Remove card from file system
 * @param entry - Entry to remove
 * */
void remove_card(uint16_t entry) {
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	4603      	mov	r3, r0
 800391a:	80fb      	strh	r3, [r7, #6]
	block_erase(entry);
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fe fc06 	bl	8002130 <block_erase>
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	0000      	movs	r0, r0
	...

08003930 <get_used_size>:

/**
 * Calculate the used size of memory in MiB
 * @return size of memory used in MiB
 * */
uint32_t get_used_size(void) {
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
	int file_count = get_number_files();
 8003936:	f7ff ff2b 	bl	8003790 <get_number_files>
 800393a:	6078      	str	r0, [r7, #4]

	return (BLOCK_SIZE * file_count);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7fc ff23 	bl	8000788 <__aeabi_i2d>
 8003942:	a309      	add	r3, pc, #36	; (adr r3, 8003968 <get_used_size+0x38>)
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f7fc fca2 	bl	8000290 <__aeabi_dmul>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4610      	mov	r0, r2
 8003952:	4619      	mov	r1, r3
 8003954:	f7fc ff82 	bl	800085c <__aeabi_d2uiz>
 8003958:	4603      	mov	r3, r0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	f3af 8000 	nop.w
 8003968:	d2f1a9fc 	.word	0xd2f1a9fc
 800396c:	3fc0624d 	.word	0x3fc0624d

08003970 <get_free_size>:

/**
 * Get size of memory that is free
 * @return size of memory that is free in MiB
 * */
uint32_t get_free_size(void) {
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
	return MEM_SIZE - get_used_size();
 8003974:	f7ff ffdc 	bl	8003930 <get_used_size>
 8003978:	4603      	mov	r3, r0
 800397a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
}
 800397e:	4618      	mov	r0, r3
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <get_used_size_str>:

/**
 * Get used size as a string (Useful for printing to OLED)
 * @param result - Pointer to string to write to
 * */
void get_used_size_str(char* result) {
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
	uint32_t used = get_used_size();
 800398c:	f7ff ffd0 	bl	8003930 <get_used_size>
 8003990:	60f8      	str	r0, [r7, #12]
	sprintf(result,"%i", used);
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4903      	ldr	r1, [pc, #12]	; (80039a4 <get_used_size_str+0x20>)
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f00c fac2 	bl	800ff20 <siprintf>
}
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	080108a8 	.word	0x080108a8

080039a8 <get_free_size_str>:

/**
 * Get free size as a string
 * @param result - Pointer to string to write to
 * */
void get_free_size_str(char* result) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
	uint32_t free = get_free_size();
 80039b0:	f7ff ffde 	bl	8003970 <get_free_size>
 80039b4:	60f8      	str	r0, [r7, #12]
	sprintf(result, "%i", free);
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4903      	ldr	r1, [pc, #12]	; (80039c8 <get_free_size_str+0x20>)
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f00c fab0 	bl	800ff20 <siprintf>
}
 80039c0:	bf00      	nop
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	080108a8 	.word	0x080108a8

080039cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	607b      	str	r3, [r7, #4]
 80039d6:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <HAL_MspInit+0x54>)
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	4a11      	ldr	r2, [pc, #68]	; (8003a20 <HAL_MspInit+0x54>)
 80039dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039e0:	6453      	str	r3, [r2, #68]	; 0x44
 80039e2:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <HAL_MspInit+0x54>)
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ea:	607b      	str	r3, [r7, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	603b      	str	r3, [r7, #0]
 80039f2:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_MspInit+0x54>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	4a0a      	ldr	r2, [pc, #40]	; (8003a20 <HAL_MspInit+0x54>)
 80039f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fc:	6413      	str	r3, [r2, #64]	; 0x40
 80039fe:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <HAL_MspInit+0x54>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	210f      	movs	r1, #15
 8003a0e:	f06f 0001 	mvn.w	r0, #1
 8003a12:	f000 fb79 	bl	8004108 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800

08003a24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08a      	sub	sp, #40	; 0x28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2c:	f107 0314 	add.w	r3, r7, #20
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a19      	ldr	r2, [pc, #100]	; (8003aa8 <HAL_I2C_MspInit+0x84>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d12b      	bne.n	8003a9e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	4b18      	ldr	r3, [pc, #96]	; (8003aac <HAL_I2C_MspInit+0x88>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	4a17      	ldr	r2, [pc, #92]	; (8003aac <HAL_I2C_MspInit+0x88>)
 8003a50:	f043 0302 	orr.w	r3, r3, #2
 8003a54:	6313      	str	r3, [r2, #48]	; 0x30
 8003a56:	4b15      	ldr	r3, [pc, #84]	; (8003aac <HAL_I2C_MspInit+0x88>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a62:	23c0      	movs	r3, #192	; 0xc0
 8003a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a66:	2312      	movs	r3, #18
 8003a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a72:	2304      	movs	r3, #4
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a76:	f107 0314 	add.w	r3, r7, #20
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	480c      	ldr	r0, [pc, #48]	; (8003ab0 <HAL_I2C_MspInit+0x8c>)
 8003a7e:	f000 fb6d 	bl	800415c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	4b09      	ldr	r3, [pc, #36]	; (8003aac <HAL_I2C_MspInit+0x88>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	4a08      	ldr	r2, [pc, #32]	; (8003aac <HAL_I2C_MspInit+0x88>)
 8003a8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a90:	6413      	str	r3, [r2, #64]	; 0x40
 8003a92:	4b06      	ldr	r3, [pc, #24]	; (8003aac <HAL_I2C_MspInit+0x88>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003a9e:	bf00      	nop
 8003aa0:	3728      	adds	r7, #40	; 0x28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40005400 	.word	0x40005400
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40020400 	.word	0x40020400

08003ab4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08c      	sub	sp, #48	; 0x30
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003abc:	f107 031c 	add.w	r3, r7, #28
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	609a      	str	r2, [r3, #8]
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a32      	ldr	r2, [pc, #200]	; (8003b9c <HAL_SPI_MspInit+0xe8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d12c      	bne.n	8003b30 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	4b31      	ldr	r3, [pc, #196]	; (8003ba0 <HAL_SPI_MspInit+0xec>)
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	4a30      	ldr	r2, [pc, #192]	; (8003ba0 <HAL_SPI_MspInit+0xec>)
 8003ae0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ae6:	4b2e      	ldr	r3, [pc, #184]	; (8003ba0 <HAL_SPI_MspInit+0xec>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aee:	61bb      	str	r3, [r7, #24]
 8003af0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	4b2a      	ldr	r3, [pc, #168]	; (8003ba0 <HAL_SPI_MspInit+0xec>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	4a29      	ldr	r2, [pc, #164]	; (8003ba0 <HAL_SPI_MspInit+0xec>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	6313      	str	r3, [r2, #48]	; 0x30
 8003b02:	4b27      	ldr	r3, [pc, #156]	; (8003ba0 <HAL_SPI_MspInit+0xec>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003b0e:	23a0      	movs	r3, #160	; 0xa0
 8003b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b12:	2302      	movs	r3, #2
 8003b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b1e:	2305      	movs	r3, #5
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b22:	f107 031c 	add.w	r3, r7, #28
 8003b26:	4619      	mov	r1, r3
 8003b28:	481e      	ldr	r0, [pc, #120]	; (8003ba4 <HAL_SPI_MspInit+0xf0>)
 8003b2a:	f000 fb17 	bl	800415c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003b2e:	e031      	b.n	8003b94 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a1c      	ldr	r2, [pc, #112]	; (8003ba8 <HAL_SPI_MspInit+0xf4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d12c      	bne.n	8003b94 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	4b18      	ldr	r3, [pc, #96]	; (8003ba0 <HAL_SPI_MspInit+0xec>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	4a17      	ldr	r2, [pc, #92]	; (8003ba0 <HAL_SPI_MspInit+0xec>)
 8003b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b48:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <HAL_SPI_MspInit+0xec>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <HAL_SPI_MspInit+0xec>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	4a10      	ldr	r2, [pc, #64]	; (8003ba0 <HAL_SPI_MspInit+0xec>)
 8003b60:	f043 0302 	orr.w	r3, r3, #2
 8003b64:	6313      	str	r3, [r2, #48]	; 0x30
 8003b66:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <HAL_SPI_MspInit+0xec>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003b72:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8003b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b80:	2303      	movs	r3, #3
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b84:	2305      	movs	r3, #5
 8003b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b88:	f107 031c 	add.w	r3, r7, #28
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4807      	ldr	r0, [pc, #28]	; (8003bac <HAL_SPI_MspInit+0xf8>)
 8003b90:	f000 fae4 	bl	800415c <HAL_GPIO_Init>
}
 8003b94:	bf00      	nop
 8003b96:	3730      	adds	r7, #48	; 0x30
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40013000 	.word	0x40013000
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	40020000 	.word	0x40020000
 8003ba8:	40003800 	.word	0x40003800
 8003bac:	40020400 	.word	0x40020400

08003bb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc0:	d10e      	bne.n	8003be0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <HAL_TIM_Base_MspInit+0x64>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	4a12      	ldr	r2, [pc, #72]	; (8003c14 <HAL_TIM_Base_MspInit+0x64>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd2:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <HAL_TIM_Base_MspInit+0x64>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003bde:	e012      	b.n	8003c06 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a0c      	ldr	r2, [pc, #48]	; (8003c18 <HAL_TIM_Base_MspInit+0x68>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d10d      	bne.n	8003c06 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_TIM_Base_MspInit+0x64>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	4a08      	ldr	r2, [pc, #32]	; (8003c14 <HAL_TIM_Base_MspInit+0x64>)
 8003bf4:	f043 0302 	orr.w	r3, r3, #2
 8003bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bfa:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_TIM_Base_MspInit+0x64>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	60bb      	str	r3, [r7, #8]
 8003c04:	68bb      	ldr	r3, [r7, #8]
}
 8003c06:	bf00      	nop
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40023800 	.word	0x40023800
 8003c18:	40000400 	.word	0x40000400

08003c1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c24:	f107 030c 	add.w	r3, r7, #12
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	609a      	str	r2, [r3, #8]
 8003c30:	60da      	str	r2, [r3, #12]
 8003c32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c3c:	d11d      	bne.n	8003c7a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <HAL_TIM_MspPostInit+0x68>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	4a0f      	ldr	r2, [pc, #60]	; (8003c84 <HAL_TIM_MspPostInit+0x68>)
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <HAL_TIM_MspPostInit+0x68>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	60bb      	str	r3, [r7, #8]
 8003c58:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5e:	2302      	movs	r3, #2
 8003c60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c6e:	f107 030c 	add.w	r3, r7, #12
 8003c72:	4619      	mov	r1, r3
 8003c74:	4804      	ldr	r0, [pc, #16]	; (8003c88 <HAL_TIM_MspPostInit+0x6c>)
 8003c76:	f000 fa71 	bl	800415c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003c7a:	bf00      	nop
 8003c7c:	3720      	adds	r7, #32
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40020000 	.word	0x40020000

08003c8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08e      	sub	sp, #56	; 0x38
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	4b33      	ldr	r3, [pc, #204]	; (8003d70 <HAL_InitTick+0xe4>)
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	4a32      	ldr	r2, [pc, #200]	; (8003d70 <HAL_InitTick+0xe4>)
 8003ca6:	f043 0308 	orr.w	r3, r3, #8
 8003caa:	6413      	str	r3, [r2, #64]	; 0x40
 8003cac:	4b30      	ldr	r3, [pc, #192]	; (8003d70 <HAL_InitTick+0xe4>)
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003cb8:	f107 0210 	add.w	r2, r7, #16
 8003cbc:	f107 0314 	add.w	r3, r7, #20
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f003 fad6 	bl	8007274 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d103      	bne.n	8003cda <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003cd2:	f003 fabb 	bl	800724c <HAL_RCC_GetPCLK1Freq>
 8003cd6:	6378      	str	r0, [r7, #52]	; 0x34
 8003cd8:	e004      	b.n	8003ce4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003cda:	f003 fab7 	bl	800724c <HAL_RCC_GetPCLK1Freq>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce6:	4a23      	ldr	r2, [pc, #140]	; (8003d74 <HAL_InitTick+0xe8>)
 8003ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cec:	0c9b      	lsrs	r3, r3, #18
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8003cf2:	4b21      	ldr	r3, [pc, #132]	; (8003d78 <HAL_InitTick+0xec>)
 8003cf4:	4a21      	ldr	r2, [pc, #132]	; (8003d7c <HAL_InitTick+0xf0>)
 8003cf6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8003cf8:	4b1f      	ldr	r3, [pc, #124]	; (8003d78 <HAL_InitTick+0xec>)
 8003cfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cfe:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8003d00:	4a1d      	ldr	r2, [pc, #116]	; (8003d78 <HAL_InitTick+0xec>)
 8003d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d04:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8003d06:	4b1c      	ldr	r3, [pc, #112]	; (8003d78 <HAL_InitTick+0xec>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d0c:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <HAL_InitTick+0xec>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d12:	4b19      	ldr	r3, [pc, #100]	; (8003d78 <HAL_InitTick+0xec>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8003d18:	4817      	ldr	r0, [pc, #92]	; (8003d78 <HAL_InitTick+0xec>)
 8003d1a:	f003 ff0f 	bl	8007b3c <HAL_TIM_Base_Init>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003d24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d11b      	bne.n	8003d64 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8003d2c:	4812      	ldr	r0, [pc, #72]	; (8003d78 <HAL_InitTick+0xec>)
 8003d2e:	f003 ffd7 	bl	8007ce0 <HAL_TIM_Base_Start_IT>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003d38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d111      	bne.n	8003d64 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003d40:	2032      	movs	r0, #50	; 0x32
 8003d42:	f000 f9fd 	bl	8004140 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b0f      	cmp	r3, #15
 8003d4a:	d808      	bhi.n	8003d5e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	2032      	movs	r0, #50	; 0x32
 8003d52:	f000 f9d9 	bl	8004108 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d56:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <HAL_InitTick+0xf4>)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	e002      	b.n	8003d64 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003d64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3738      	adds	r7, #56	; 0x38
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40023800 	.word	0x40023800
 8003d74:	431bde83 	.word	0x431bde83
 8003d78:	200008e4 	.word	0x200008e4
 8003d7c:	40000c00 	.word	0x40000c00
 8003d80:	200005a0 	.word	0x200005a0

08003d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d88:	e7fe      	b.n	8003d88 <NMI_Handler+0x4>

08003d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d8e:	e7fe      	b.n	8003d8e <HardFault_Handler+0x4>

08003d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d94:	e7fe      	b.n	8003d94 <MemManage_Handler+0x4>

08003d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d96:	b480      	push	{r7}
 8003d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d9a:	e7fe      	b.n	8003d9a <BusFault_Handler+0x4>

08003d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003da0:	e7fe      	b.n	8003da0 <UsageFault_Handler+0x4>

08003da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003da2:	b480      	push	{r7}
 8003da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003da6:	bf00      	nop
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003db4:	2002      	movs	r0, #2
 8003db6:	f000 fb87 	bl	80044c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003dc4:	4802      	ldr	r0, [pc, #8]	; (8003dd0 <TIM5_IRQHandler+0x10>)
 8003dc6:	f004 f95b 	bl	8008080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	200008e4 	.word	0x200008e4

08003dd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003dd8:	4802      	ldr	r0, [pc, #8]	; (8003de4 <OTG_FS_IRQHandler+0x10>)
 8003dda:	f001 fc9c 	bl	8005716 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	200077a4 	.word	0x200077a4

08003de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003df0:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <_sbrk+0x5c>)
 8003df2:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <_sbrk+0x60>)
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dfc:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <_sbrk+0x64>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d102      	bne.n	8003e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e04:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <_sbrk+0x64>)
 8003e06:	4a12      	ldr	r2, [pc, #72]	; (8003e50 <_sbrk+0x68>)
 8003e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <_sbrk+0x64>)
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d207      	bcs.n	8003e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e18:	f00b ff3a 	bl	800fc90 <__errno>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	220c      	movs	r2, #12
 8003e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e22:	f04f 33ff 	mov.w	r3, #4294967295
 8003e26:	e009      	b.n	8003e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e28:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <_sbrk+0x64>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e2e:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <_sbrk+0x64>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	4a05      	ldr	r2, [pc, #20]	; (8003e4c <_sbrk+0x64>)
 8003e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20010000 	.word	0x20010000
 8003e48:	00000400 	.word	0x00000400
 8003e4c:	2000092c 	.word	0x2000092c
 8003e50:	20007ee0 	.word	0x20007ee0

08003e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e58:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <SystemInit+0x20>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5e:	4a05      	ldr	r2, [pc, #20]	; (8003e74 <SystemInit+0x20>)
 8003e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e68:	bf00      	nop
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	e000ed00 	.word	0xe000ed00

08003e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003eb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e7c:	480d      	ldr	r0, [pc, #52]	; (8003eb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e7e:	490e      	ldr	r1, [pc, #56]	; (8003eb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e80:	4a0e      	ldr	r2, [pc, #56]	; (8003ebc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e84:	e002      	b.n	8003e8c <LoopCopyDataInit>

08003e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e8a:	3304      	adds	r3, #4

08003e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e90:	d3f9      	bcc.n	8003e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e92:	4a0b      	ldr	r2, [pc, #44]	; (8003ec0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003e94:	4c0b      	ldr	r4, [pc, #44]	; (8003ec4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e98:	e001      	b.n	8003e9e <LoopFillZerobss>

08003e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e9c:	3204      	adds	r2, #4

08003e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ea0:	d3fb      	bcc.n	8003e9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ea2:	f7ff ffd7 	bl	8003e54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ea6:	f00b fef9 	bl	800fc9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003eaa:	f7fe fbd1 	bl	8002650 <main>
  bx  lr    
 8003eae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003eb0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003eb8:	20000700 	.word	0x20000700
  ldr r2, =_sidata
 8003ebc:	08011034 	.word	0x08011034
  ldr r2, =_sbss
 8003ec0:	20000700 	.word	0x20000700
  ldr r4, =_ebss
 8003ec4:	20007ee0 	.word	0x20007ee0

08003ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ec8:	e7fe      	b.n	8003ec8 <ADC_IRQHandler>
	...

08003ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ed0:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <HAL_Init+0x40>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a0d      	ldr	r2, [pc, #52]	; (8003f0c <HAL_Init+0x40>)
 8003ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003edc:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <HAL_Init+0x40>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a0a      	ldr	r2, [pc, #40]	; (8003f0c <HAL_Init+0x40>)
 8003ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ee6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ee8:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <HAL_Init+0x40>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a07      	ldr	r2, [pc, #28]	; (8003f0c <HAL_Init+0x40>)
 8003eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ef4:	2003      	movs	r0, #3
 8003ef6:	f000 f8fc 	bl	80040f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003efa:	200f      	movs	r0, #15
 8003efc:	f7ff fec6 	bl	8003c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f00:	f7ff fd64 	bl	80039cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40023c00 	.word	0x40023c00

08003f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f14:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_IncTick+0x20>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_IncTick+0x24>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4413      	add	r3, r2
 8003f20:	4a04      	ldr	r2, [pc, #16]	; (8003f34 <HAL_IncTick+0x24>)
 8003f22:	6013      	str	r3, [r2, #0]
}
 8003f24:	bf00      	nop
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	200005a4 	.word	0x200005a4
 8003f34:	20000930 	.word	0x20000930

08003f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f3c:	4b03      	ldr	r3, [pc, #12]	; (8003f4c <HAL_GetTick+0x14>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	20000930 	.word	0x20000930

08003f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f58:	f7ff ffee 	bl	8003f38 <HAL_GetTick>
 8003f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f68:	d005      	beq.n	8003f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <HAL_Delay+0x44>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f76:	bf00      	nop
 8003f78:	f7ff ffde 	bl	8003f38 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d8f7      	bhi.n	8003f78 <HAL_Delay+0x28>
  {
  }
}
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	200005a4 	.word	0x200005a4

08003f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <__NVIC_SetPriorityGrouping+0x44>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fca:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <__NVIC_SetPriorityGrouping+0x44>)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	60d3      	str	r3, [r2, #12]
}
 8003fd0:	bf00      	nop
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	e000ed00 	.word	0xe000ed00

08003fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	0a1b      	lsrs	r3, r3, #8
 8003fea:	f003 0307 	and.w	r3, r3, #7
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	e000ed00 	.word	0xe000ed00

08003ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	4603      	mov	r3, r0
 8004004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400a:	2b00      	cmp	r3, #0
 800400c:	db0b      	blt.n	8004026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	f003 021f 	and.w	r2, r3, #31
 8004014:	4907      	ldr	r1, [pc, #28]	; (8004034 <__NVIC_EnableIRQ+0x38>)
 8004016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	2001      	movs	r0, #1
 800401e:	fa00 f202 	lsl.w	r2, r0, r2
 8004022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	e000e100 	.word	0xe000e100

08004038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	6039      	str	r1, [r7, #0]
 8004042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004048:	2b00      	cmp	r3, #0
 800404a:	db0a      	blt.n	8004062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	b2da      	uxtb	r2, r3
 8004050:	490c      	ldr	r1, [pc, #48]	; (8004084 <__NVIC_SetPriority+0x4c>)
 8004052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004056:	0112      	lsls	r2, r2, #4
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	440b      	add	r3, r1
 800405c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004060:	e00a      	b.n	8004078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	b2da      	uxtb	r2, r3
 8004066:	4908      	ldr	r1, [pc, #32]	; (8004088 <__NVIC_SetPriority+0x50>)
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	3b04      	subs	r3, #4
 8004070:	0112      	lsls	r2, r2, #4
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	440b      	add	r3, r1
 8004076:	761a      	strb	r2, [r3, #24]
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	e000e100 	.word	0xe000e100
 8004088:	e000ed00 	.word	0xe000ed00

0800408c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800408c:	b480      	push	{r7}
 800408e:	b089      	sub	sp, #36	; 0x24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f1c3 0307 	rsb	r3, r3, #7
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	bf28      	it	cs
 80040aa:	2304      	movcs	r3, #4
 80040ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	3304      	adds	r3, #4
 80040b2:	2b06      	cmp	r3, #6
 80040b4:	d902      	bls.n	80040bc <NVIC_EncodePriority+0x30>
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	3b03      	subs	r3, #3
 80040ba:	e000      	b.n	80040be <NVIC_EncodePriority+0x32>
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c0:	f04f 32ff 	mov.w	r2, #4294967295
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43da      	mvns	r2, r3
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	401a      	ands	r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040d4:	f04f 31ff 	mov.w	r1, #4294967295
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	fa01 f303 	lsl.w	r3, r1, r3
 80040de:	43d9      	mvns	r1, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e4:	4313      	orrs	r3, r2
         );
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3724      	adds	r7, #36	; 0x24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff ff4c 	bl	8003f98 <__NVIC_SetPriorityGrouping>
}
 8004100:	bf00      	nop
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	4603      	mov	r3, r0
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800411a:	f7ff ff61 	bl	8003fe0 <__NVIC_GetPriorityGrouping>
 800411e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	6978      	ldr	r0, [r7, #20]
 8004126:	f7ff ffb1 	bl	800408c <NVIC_EncodePriority>
 800412a:	4602      	mov	r2, r0
 800412c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004130:	4611      	mov	r1, r2
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff ff80 	bl	8004038 <__NVIC_SetPriority>
}
 8004138:	bf00      	nop
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800414a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff ff54 	bl	8003ffc <__NVIC_EnableIRQ>
}
 8004154:	bf00      	nop
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800415c:	b480      	push	{r7}
 800415e:	b089      	sub	sp, #36	; 0x24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800416e:	2300      	movs	r3, #0
 8004170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
 8004176:	e159      	b.n	800442c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004178:	2201      	movs	r2, #1
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4013      	ands	r3, r2
 800418a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	429a      	cmp	r2, r3
 8004192:	f040 8148 	bne.w	8004426 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d005      	beq.n	80041ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d130      	bne.n	8004210 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	2203      	movs	r2, #3
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43db      	mvns	r3, r3
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4013      	ands	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041e4:	2201      	movs	r2, #1
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4013      	ands	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	f003 0201 	and.w	r2, r3, #1
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b03      	cmp	r3, #3
 800421a:	d017      	beq.n	800424c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	2203      	movs	r2, #3
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d123      	bne.n	80042a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	08da      	lsrs	r2, r3, #3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3208      	adds	r2, #8
 8004260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	220f      	movs	r2, #15
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	08da      	lsrs	r2, r3, #3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3208      	adds	r2, #8
 800429a:	69b9      	ldr	r1, [r7, #24]
 800429c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	2203      	movs	r2, #3
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 0203 	and.w	r2, r3, #3
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80a2 	beq.w	8004426 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	4b57      	ldr	r3, [pc, #348]	; (8004444 <HAL_GPIO_Init+0x2e8>)
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	4a56      	ldr	r2, [pc, #344]	; (8004444 <HAL_GPIO_Init+0x2e8>)
 80042ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042f0:	6453      	str	r3, [r2, #68]	; 0x44
 80042f2:	4b54      	ldr	r3, [pc, #336]	; (8004444 <HAL_GPIO_Init+0x2e8>)
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042fe:	4a52      	ldr	r2, [pc, #328]	; (8004448 <HAL_GPIO_Init+0x2ec>)
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	089b      	lsrs	r3, r3, #2
 8004304:	3302      	adds	r3, #2
 8004306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	220f      	movs	r2, #15
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43db      	mvns	r3, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4013      	ands	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a49      	ldr	r2, [pc, #292]	; (800444c <HAL_GPIO_Init+0x2f0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d019      	beq.n	800435e <HAL_GPIO_Init+0x202>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a48      	ldr	r2, [pc, #288]	; (8004450 <HAL_GPIO_Init+0x2f4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d013      	beq.n	800435a <HAL_GPIO_Init+0x1fe>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a47      	ldr	r2, [pc, #284]	; (8004454 <HAL_GPIO_Init+0x2f8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00d      	beq.n	8004356 <HAL_GPIO_Init+0x1fa>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a46      	ldr	r2, [pc, #280]	; (8004458 <HAL_GPIO_Init+0x2fc>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d007      	beq.n	8004352 <HAL_GPIO_Init+0x1f6>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a45      	ldr	r2, [pc, #276]	; (800445c <HAL_GPIO_Init+0x300>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d101      	bne.n	800434e <HAL_GPIO_Init+0x1f2>
 800434a:	2304      	movs	r3, #4
 800434c:	e008      	b.n	8004360 <HAL_GPIO_Init+0x204>
 800434e:	2307      	movs	r3, #7
 8004350:	e006      	b.n	8004360 <HAL_GPIO_Init+0x204>
 8004352:	2303      	movs	r3, #3
 8004354:	e004      	b.n	8004360 <HAL_GPIO_Init+0x204>
 8004356:	2302      	movs	r3, #2
 8004358:	e002      	b.n	8004360 <HAL_GPIO_Init+0x204>
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <HAL_GPIO_Init+0x204>
 800435e:	2300      	movs	r3, #0
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	f002 0203 	and.w	r2, r2, #3
 8004366:	0092      	lsls	r2, r2, #2
 8004368:	4093      	lsls	r3, r2
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4313      	orrs	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004370:	4935      	ldr	r1, [pc, #212]	; (8004448 <HAL_GPIO_Init+0x2ec>)
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	089b      	lsrs	r3, r3, #2
 8004376:	3302      	adds	r3, #2
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800437e:	4b38      	ldr	r3, [pc, #224]	; (8004460 <HAL_GPIO_Init+0x304>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	43db      	mvns	r3, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4013      	ands	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043a2:	4a2f      	ldr	r2, [pc, #188]	; (8004460 <HAL_GPIO_Init+0x304>)
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043a8:	4b2d      	ldr	r3, [pc, #180]	; (8004460 <HAL_GPIO_Init+0x304>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	43db      	mvns	r3, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4013      	ands	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043cc:	4a24      	ldr	r2, [pc, #144]	; (8004460 <HAL_GPIO_Init+0x304>)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043d2:	4b23      	ldr	r3, [pc, #140]	; (8004460 <HAL_GPIO_Init+0x304>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	43db      	mvns	r3, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4013      	ands	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043f6:	4a1a      	ldr	r2, [pc, #104]	; (8004460 <HAL_GPIO_Init+0x304>)
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043fc:	4b18      	ldr	r3, [pc, #96]	; (8004460 <HAL_GPIO_Init+0x304>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	43db      	mvns	r3, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4013      	ands	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004420:	4a0f      	ldr	r2, [pc, #60]	; (8004460 <HAL_GPIO_Init+0x304>)
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	3301      	adds	r3, #1
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2b0f      	cmp	r3, #15
 8004430:	f67f aea2 	bls.w	8004178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	3724      	adds	r7, #36	; 0x24
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40023800 	.word	0x40023800
 8004448:	40013800 	.word	0x40013800
 800444c:	40020000 	.word	0x40020000
 8004450:	40020400 	.word	0x40020400
 8004454:	40020800 	.word	0x40020800
 8004458:	40020c00 	.word	0x40020c00
 800445c:	40021000 	.word	0x40021000
 8004460:	40013c00 	.word	0x40013c00

08004464 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	887b      	ldrh	r3, [r7, #2]
 8004476:	4013      	ands	r3, r2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800447c:	2301      	movs	r3, #1
 800447e:	73fb      	strb	r3, [r7, #15]
 8004480:	e001      	b.n	8004486 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004482:	2300      	movs	r3, #0
 8004484:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004486:	7bfb      	ldrb	r3, [r7, #15]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	807b      	strh	r3, [r7, #2]
 80044a0:	4613      	mov	r3, r2
 80044a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044a4:	787b      	ldrb	r3, [r7, #1]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044aa:	887a      	ldrh	r2, [r7, #2]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044b0:	e003      	b.n	80044ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044b2:	887b      	ldrh	r3, [r7, #2]
 80044b4:	041a      	lsls	r2, r3, #16
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	619a      	str	r2, [r3, #24]
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	4603      	mov	r3, r0
 80044d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80044d2:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044d4:	695a      	ldr	r2, [r3, #20]
 80044d6:	88fb      	ldrh	r3, [r7, #6]
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d006      	beq.n	80044ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044de:	4a05      	ldr	r2, [pc, #20]	; (80044f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044e0:	88fb      	ldrh	r3, [r7, #6]
 80044e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044e4:	88fb      	ldrh	r3, [r7, #6]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fd fffa 	bl	80024e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80044ec:	bf00      	nop
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40013c00 	.word	0x40013c00

080044f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e12b      	b.n	8004762 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7ff fa80 	bl	8003a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2224      	movs	r2, #36	; 0x24
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800454a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800455a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800455c:	f002 fe76 	bl	800724c <HAL_RCC_GetPCLK1Freq>
 8004560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	4a81      	ldr	r2, [pc, #516]	; (800476c <HAL_I2C_Init+0x274>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d807      	bhi.n	800457c <HAL_I2C_Init+0x84>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a80      	ldr	r2, [pc, #512]	; (8004770 <HAL_I2C_Init+0x278>)
 8004570:	4293      	cmp	r3, r2
 8004572:	bf94      	ite	ls
 8004574:	2301      	movls	r3, #1
 8004576:	2300      	movhi	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	e006      	b.n	800458a <HAL_I2C_Init+0x92>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4a7d      	ldr	r2, [pc, #500]	; (8004774 <HAL_I2C_Init+0x27c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	bf94      	ite	ls
 8004584:	2301      	movls	r3, #1
 8004586:	2300      	movhi	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e0e7      	b.n	8004762 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a78      	ldr	r2, [pc, #480]	; (8004778 <HAL_I2C_Init+0x280>)
 8004596:	fba2 2303 	umull	r2, r3, r2, r3
 800459a:	0c9b      	lsrs	r3, r3, #18
 800459c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	4a6a      	ldr	r2, [pc, #424]	; (800476c <HAL_I2C_Init+0x274>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d802      	bhi.n	80045cc <HAL_I2C_Init+0xd4>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	3301      	adds	r3, #1
 80045ca:	e009      	b.n	80045e0 <HAL_I2C_Init+0xe8>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	4a69      	ldr	r2, [pc, #420]	; (800477c <HAL_I2C_Init+0x284>)
 80045d8:	fba2 2303 	umull	r2, r3, r2, r3
 80045dc:	099b      	lsrs	r3, r3, #6
 80045de:	3301      	adds	r3, #1
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	430b      	orrs	r3, r1
 80045e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	495c      	ldr	r1, [pc, #368]	; (800476c <HAL_I2C_Init+0x274>)
 80045fc:	428b      	cmp	r3, r1
 80045fe:	d819      	bhi.n	8004634 <HAL_I2C_Init+0x13c>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	1e59      	subs	r1, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	fbb1 f3f3 	udiv	r3, r1, r3
 800460e:	1c59      	adds	r1, r3, #1
 8004610:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004614:	400b      	ands	r3, r1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_I2C_Init+0x138>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1e59      	subs	r1, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	fbb1 f3f3 	udiv	r3, r1, r3
 8004628:	3301      	adds	r3, #1
 800462a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462e:	e051      	b.n	80046d4 <HAL_I2C_Init+0x1dc>
 8004630:	2304      	movs	r3, #4
 8004632:	e04f      	b.n	80046d4 <HAL_I2C_Init+0x1dc>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d111      	bne.n	8004660 <HAL_I2C_Init+0x168>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	1e58      	subs	r0, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6859      	ldr	r1, [r3, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	440b      	add	r3, r1
 800464a:	fbb0 f3f3 	udiv	r3, r0, r3
 800464e:	3301      	adds	r3, #1
 8004650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004654:	2b00      	cmp	r3, #0
 8004656:	bf0c      	ite	eq
 8004658:	2301      	moveq	r3, #1
 800465a:	2300      	movne	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	e012      	b.n	8004686 <HAL_I2C_Init+0x18e>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1e58      	subs	r0, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6859      	ldr	r1, [r3, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	0099      	lsls	r1, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	fbb0 f3f3 	udiv	r3, r0, r3
 8004676:	3301      	adds	r3, #1
 8004678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467c:	2b00      	cmp	r3, #0
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_I2C_Init+0x196>
 800468a:	2301      	movs	r3, #1
 800468c:	e022      	b.n	80046d4 <HAL_I2C_Init+0x1dc>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10e      	bne.n	80046b4 <HAL_I2C_Init+0x1bc>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1e58      	subs	r0, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6859      	ldr	r1, [r3, #4]
 800469e:	460b      	mov	r3, r1
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	440b      	add	r3, r1
 80046a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a8:	3301      	adds	r3, #1
 80046aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b2:	e00f      	b.n	80046d4 <HAL_I2C_Init+0x1dc>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	1e58      	subs	r0, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6859      	ldr	r1, [r3, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	0099      	lsls	r1, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ca:	3301      	adds	r3, #1
 80046cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	6809      	ldr	r1, [r1, #0]
 80046d8:	4313      	orrs	r3, r2
 80046da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69da      	ldr	r2, [r3, #28]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004702:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6911      	ldr	r1, [r2, #16]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	68d2      	ldr	r2, [r2, #12]
 800470e:	4311      	orrs	r1, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6812      	ldr	r2, [r2, #0]
 8004714:	430b      	orrs	r3, r1
 8004716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	000186a0 	.word	0x000186a0
 8004770:	001e847f 	.word	0x001e847f
 8004774:	003d08ff 	.word	0x003d08ff
 8004778:	431bde83 	.word	0x431bde83
 800477c:	10624dd3 	.word	0x10624dd3

08004780 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af02      	add	r7, sp, #8
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	4608      	mov	r0, r1
 800478a:	4611      	mov	r1, r2
 800478c:	461a      	mov	r2, r3
 800478e:	4603      	mov	r3, r0
 8004790:	817b      	strh	r3, [r7, #10]
 8004792:	460b      	mov	r3, r1
 8004794:	813b      	strh	r3, [r7, #8]
 8004796:	4613      	mov	r3, r2
 8004798:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800479a:	f7ff fbcd 	bl	8003f38 <HAL_GetTick>
 800479e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	f040 80d9 	bne.w	8004960 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	2319      	movs	r3, #25
 80047b4:	2201      	movs	r2, #1
 80047b6:	496d      	ldr	r1, [pc, #436]	; (800496c <HAL_I2C_Mem_Write+0x1ec>)
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 fc7f 	bl	80050bc <I2C_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80047c4:	2302      	movs	r3, #2
 80047c6:	e0cc      	b.n	8004962 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_I2C_Mem_Write+0x56>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e0c5      	b.n	8004962 <HAL_I2C_Mem_Write+0x1e2>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d007      	beq.n	80047fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800480a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2221      	movs	r2, #33	; 0x21
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2240      	movs	r2, #64	; 0x40
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a3a      	ldr	r2, [r7, #32]
 8004826:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800482c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4a4d      	ldr	r2, [pc, #308]	; (8004970 <HAL_I2C_Mem_Write+0x1f0>)
 800483c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800483e:	88f8      	ldrh	r0, [r7, #6]
 8004840:	893a      	ldrh	r2, [r7, #8]
 8004842:	8979      	ldrh	r1, [r7, #10]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	9301      	str	r3, [sp, #4]
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	4603      	mov	r3, r0
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 fab6 	bl	8004dc0 <I2C_RequestMemoryWrite>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d052      	beq.n	8004900 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e081      	b.n	8004962 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 fd00 	bl	8005268 <I2C_WaitOnTXEFlagUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00d      	beq.n	800488a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	2b04      	cmp	r3, #4
 8004874:	d107      	bne.n	8004886 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004884:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e06b      	b.n	8004962 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	781a      	ldrb	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d11b      	bne.n	8004900 <HAL_I2C_Mem_Write+0x180>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d017      	beq.n	8004900 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	781a      	ldrb	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1aa      	bne.n	800485e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 fcec 	bl	80052ea <I2C_WaitOnBTFFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00d      	beq.n	8004934 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	2b04      	cmp	r3, #4
 800491e:	d107      	bne.n	8004930 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e016      	b.n	8004962 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	e000      	b.n	8004962 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004960:	2302      	movs	r3, #2
  }
}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	00100002 	.word	0x00100002
 8004970:	ffff0000 	.word	0xffff0000

08004974 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08c      	sub	sp, #48	; 0x30
 8004978:	af02      	add	r7, sp, #8
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	4608      	mov	r0, r1
 800497e:	4611      	mov	r1, r2
 8004980:	461a      	mov	r2, r3
 8004982:	4603      	mov	r3, r0
 8004984:	817b      	strh	r3, [r7, #10]
 8004986:	460b      	mov	r3, r1
 8004988:	813b      	strh	r3, [r7, #8]
 800498a:	4613      	mov	r3, r2
 800498c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800498e:	f7ff fad3 	bl	8003f38 <HAL_GetTick>
 8004992:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b20      	cmp	r3, #32
 800499e:	f040 8208 	bne.w	8004db2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	2319      	movs	r3, #25
 80049a8:	2201      	movs	r2, #1
 80049aa:	497b      	ldr	r1, [pc, #492]	; (8004b98 <HAL_I2C_Mem_Read+0x224>)
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 fb85 	bl	80050bc <I2C_WaitOnFlagUntilTimeout>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80049b8:	2302      	movs	r3, #2
 80049ba:	e1fb      	b.n	8004db4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <HAL_I2C_Mem_Read+0x56>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e1f4      	b.n	8004db4 <HAL_I2C_Mem_Read+0x440>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d007      	beq.n	80049f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2222      	movs	r2, #34	; 0x22
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2240      	movs	r2, #64	; 0x40
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4a5b      	ldr	r2, [pc, #364]	; (8004b9c <HAL_I2C_Mem_Read+0x228>)
 8004a30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a32:	88f8      	ldrh	r0, [r7, #6]
 8004a34:	893a      	ldrh	r2, [r7, #8]
 8004a36:	8979      	ldrh	r1, [r7, #10]
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	9301      	str	r3, [sp, #4]
 8004a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	4603      	mov	r3, r0
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 fa52 	bl	8004eec <I2C_RequestMemoryRead>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e1b0      	b.n	8004db4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d113      	bne.n	8004a82 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	623b      	str	r3, [r7, #32]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	623b      	str	r3, [r7, #32]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	623b      	str	r3, [r7, #32]
 8004a6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	e184      	b.n	8004d8c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d11b      	bne.n	8004ac2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	61fb      	str	r3, [r7, #28]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	61fb      	str	r3, [r7, #28]
 8004aae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e164      	b.n	8004d8c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d11b      	bne.n	8004b02 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aea:	2300      	movs	r3, #0
 8004aec:	61bb      	str	r3, [r7, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	61bb      	str	r3, [r7, #24]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	61bb      	str	r3, [r7, #24]
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	e144      	b.n	8004d8c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b18:	e138      	b.n	8004d8c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	f200 80f1 	bhi.w	8004d06 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d123      	bne.n	8004b74 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 fc1b 	bl	800536c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e139      	b.n	8004db4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691a      	ldr	r2, [r3, #16]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b72:	e10b      	b.n	8004d8c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d14e      	bne.n	8004c1a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b82:	2200      	movs	r2, #0
 8004b84:	4906      	ldr	r1, [pc, #24]	; (8004ba0 <HAL_I2C_Mem_Read+0x22c>)
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 fa98 	bl	80050bc <I2C_WaitOnFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d008      	beq.n	8004ba4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e10e      	b.n	8004db4 <HAL_I2C_Mem_Read+0x440>
 8004b96:	bf00      	nop
 8004b98:	00100002 	.word	0x00100002
 8004b9c:	ffff0000 	.word	0xffff0000
 8004ba0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691a      	ldr	r2, [r3, #16]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c18:	e0b8      	b.n	8004d8c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	2200      	movs	r2, #0
 8004c22:	4966      	ldr	r1, [pc, #408]	; (8004dbc <HAL_I2C_Mem_Read+0x448>)
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 fa49 	bl	80050bc <I2C_WaitOnFlagUntilTimeout>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e0bf      	b.n	8004db4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691a      	ldr	r2, [r3, #16]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	494f      	ldr	r1, [pc, #316]	; (8004dbc <HAL_I2C_Mem_Read+0x448>)
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 fa1b 	bl	80050bc <I2C_WaitOnFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e091      	b.n	8004db4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d04:	e042      	b.n	8004d8c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 fb2e 	bl	800536c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e04c      	b.n	8004db4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d118      	bne.n	8004d8c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f47f aec2 	bne.w	8004b1a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	e000      	b.n	8004db4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004db2:	2302      	movs	r3, #2
  }
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3728      	adds	r7, #40	; 0x28
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	00010004 	.word	0x00010004

08004dc0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b088      	sub	sp, #32
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	4608      	mov	r0, r1
 8004dca:	4611      	mov	r1, r2
 8004dcc:	461a      	mov	r2, r3
 8004dce:	4603      	mov	r3, r0
 8004dd0:	817b      	strh	r3, [r7, #10]
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	813b      	strh	r3, [r7, #8]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004de8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 f960 	bl	80050bc <I2C_WaitOnFlagUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00d      	beq.n	8004e1e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e10:	d103      	bne.n	8004e1a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e05f      	b.n	8004ede <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e1e:	897b      	ldrh	r3, [r7, #10]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	461a      	mov	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	6a3a      	ldr	r2, [r7, #32]
 8004e32:	492d      	ldr	r1, [pc, #180]	; (8004ee8 <I2C_RequestMemoryWrite+0x128>)
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 f998 	bl	800516a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e04c      	b.n	8004ede <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e44:	2300      	movs	r3, #0
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5c:	6a39      	ldr	r1, [r7, #32]
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 fa02 	bl	8005268 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00d      	beq.n	8004e86 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d107      	bne.n	8004e82 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e02b      	b.n	8004ede <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e86:	88fb      	ldrh	r3, [r7, #6]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d105      	bne.n	8004e98 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e8c:	893b      	ldrh	r3, [r7, #8]
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	611a      	str	r2, [r3, #16]
 8004e96:	e021      	b.n	8004edc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e98:	893b      	ldrh	r3, [r7, #8]
 8004e9a:	0a1b      	lsrs	r3, r3, #8
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea8:	6a39      	ldr	r1, [r7, #32]
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 f9dc 	bl	8005268 <I2C_WaitOnTXEFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00d      	beq.n	8004ed2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d107      	bne.n	8004ece <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ecc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e005      	b.n	8004ede <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ed2:	893b      	ldrh	r3, [r7, #8]
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	00010002 	.word	0x00010002

08004eec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4603      	mov	r3, r0
 8004efc:	817b      	strh	r3, [r7, #10]
 8004efe:	460b      	mov	r3, r1
 8004f00:	813b      	strh	r3, [r7, #8]
 8004f02:	4613      	mov	r3, r2
 8004f04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f8c2 	bl	80050bc <I2C_WaitOnFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00d      	beq.n	8004f5a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4c:	d103      	bne.n	8004f56 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e0aa      	b.n	80050b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f5a:	897b      	ldrh	r3, [r7, #10]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	6a3a      	ldr	r2, [r7, #32]
 8004f6e:	4952      	ldr	r1, [pc, #328]	; (80050b8 <I2C_RequestMemoryRead+0x1cc>)
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 f8fa 	bl	800516a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e097      	b.n	80050b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f98:	6a39      	ldr	r1, [r7, #32]
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 f964 	bl	8005268 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00d      	beq.n	8004fc2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d107      	bne.n	8004fbe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e076      	b.n	80050b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fc2:	88fb      	ldrh	r3, [r7, #6]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d105      	bne.n	8004fd4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fc8:	893b      	ldrh	r3, [r7, #8]
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	611a      	str	r2, [r3, #16]
 8004fd2:	e021      	b.n	8005018 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fd4:	893b      	ldrh	r3, [r7, #8]
 8004fd6:	0a1b      	lsrs	r3, r3, #8
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe4:	6a39      	ldr	r1, [r7, #32]
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f93e 	bl	8005268 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00d      	beq.n	800500e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d107      	bne.n	800500a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005008:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e050      	b.n	80050b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800500e:	893b      	ldrh	r3, [r7, #8]
 8005010:	b2da      	uxtb	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501a:	6a39      	ldr	r1, [r7, #32]
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f923 	bl	8005268 <I2C_WaitOnTXEFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00d      	beq.n	8005044 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502c:	2b04      	cmp	r3, #4
 800502e:	d107      	bne.n	8005040 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800503e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e035      	b.n	80050b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005052:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	2200      	movs	r2, #0
 800505c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f82b 	bl	80050bc <I2C_WaitOnFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00d      	beq.n	8005088 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800507a:	d103      	bne.n	8005084 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005082:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e013      	b.n	80050b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005088:	897b      	ldrh	r3, [r7, #10]
 800508a:	b2db      	uxtb	r3, r3
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	b2da      	uxtb	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	6a3a      	ldr	r2, [r7, #32]
 800509c:	4906      	ldr	r1, [pc, #24]	; (80050b8 <I2C_RequestMemoryRead+0x1cc>)
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f863 	bl	800516a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e000      	b.n	80050b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	00010002 	.word	0x00010002

080050bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	4613      	mov	r3, r2
 80050ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050cc:	e025      	b.n	800511a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d4:	d021      	beq.n	800511a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d6:	f7fe ff2f 	bl	8003f38 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d302      	bcc.n	80050ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d116      	bne.n	800511a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f043 0220 	orr.w	r2, r3, #32
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e023      	b.n	8005162 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	0c1b      	lsrs	r3, r3, #16
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b01      	cmp	r3, #1
 8005122:	d10d      	bne.n	8005140 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	43da      	mvns	r2, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4013      	ands	r3, r2
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	bf0c      	ite	eq
 8005136:	2301      	moveq	r3, #1
 8005138:	2300      	movne	r3, #0
 800513a:	b2db      	uxtb	r3, r3
 800513c:	461a      	mov	r2, r3
 800513e:	e00c      	b.n	800515a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	43da      	mvns	r2, r3
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4013      	ands	r3, r2
 800514c:	b29b      	uxth	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	bf0c      	ite	eq
 8005152:	2301      	moveq	r3, #1
 8005154:	2300      	movne	r3, #0
 8005156:	b2db      	uxtb	r3, r3
 8005158:	461a      	mov	r2, r3
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	429a      	cmp	r2, r3
 800515e:	d0b6      	beq.n	80050ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	607a      	str	r2, [r7, #4]
 8005176:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005178:	e051      	b.n	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005188:	d123      	bne.n	80051d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005198:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f043 0204 	orr.w	r2, r3, #4
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e046      	b.n	8005260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d8:	d021      	beq.n	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051da:	f7fe fead 	bl	8003f38 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d302      	bcc.n	80051f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d116      	bne.n	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f043 0220 	orr.w	r2, r3, #32
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e020      	b.n	8005260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	d10c      	bne.n	8005242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	43da      	mvns	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4013      	ands	r3, r2
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	bf14      	ite	ne
 800523a:	2301      	movne	r3, #1
 800523c:	2300      	moveq	r3, #0
 800523e:	b2db      	uxtb	r3, r3
 8005240:	e00b      	b.n	800525a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	43da      	mvns	r2, r3
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	4013      	ands	r3, r2
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	bf14      	ite	ne
 8005254:	2301      	movne	r3, #1
 8005256:	2300      	moveq	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d18d      	bne.n	800517a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005274:	e02d      	b.n	80052d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 f8ce 	bl	8005418 <I2C_IsAcknowledgeFailed>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e02d      	b.n	80052e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528c:	d021      	beq.n	80052d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528e:	f7fe fe53 	bl	8003f38 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	429a      	cmp	r2, r3
 800529c:	d302      	bcc.n	80052a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d116      	bne.n	80052d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f043 0220 	orr.w	r2, r3, #32
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e007      	b.n	80052e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052dc:	2b80      	cmp	r3, #128	; 0x80
 80052de:	d1ca      	bne.n	8005276 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b084      	sub	sp, #16
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	60f8      	str	r0, [r7, #12]
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052f6:	e02d      	b.n	8005354 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 f88d 	bl	8005418 <I2C_IsAcknowledgeFailed>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e02d      	b.n	8005364 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	d021      	beq.n	8005354 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005310:	f7fe fe12 	bl	8003f38 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	429a      	cmp	r2, r3
 800531e:	d302      	bcc.n	8005326 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d116      	bne.n	8005354 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	f043 0220 	orr.w	r2, r3, #32
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e007      	b.n	8005364 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b04      	cmp	r3, #4
 8005360:	d1ca      	bne.n	80052f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005378:	e042      	b.n	8005400 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b10      	cmp	r3, #16
 8005386:	d119      	bne.n	80053bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0210 	mvn.w	r2, #16
 8005390:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2220      	movs	r2, #32
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e029      	b.n	8005410 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053bc:	f7fe fdbc 	bl	8003f38 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d302      	bcc.n	80053d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d116      	bne.n	8005400 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2220      	movs	r2, #32
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	f043 0220 	orr.w	r2, r3, #32
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e007      	b.n	8005410 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540a:	2b40      	cmp	r3, #64	; 0x40
 800540c:	d1b5      	bne.n	800537a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800542a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800542e:	d11b      	bne.n	8005468 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005438:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	f043 0204 	orr.w	r2, r3, #4
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e000      	b.n	800546a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005476:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005478:	b08f      	sub	sp, #60	; 0x3c
 800547a:	af0a      	add	r7, sp, #40	; 0x28
 800547c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e10f      	b.n	80056a8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f00a f8ea 	bl	800f67c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2203      	movs	r2, #3
 80054ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d102      	bne.n	80054c2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f003 fcf7 	bl	8008eba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	603b      	str	r3, [r7, #0]
 80054d2:	687e      	ldr	r6, [r7, #4]
 80054d4:	466d      	mov	r5, sp
 80054d6:	f106 0410 	add.w	r4, r6, #16
 80054da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80054ea:	1d33      	adds	r3, r6, #4
 80054ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054ee:	6838      	ldr	r0, [r7, #0]
 80054f0:	f003 fbce 	bl	8008c90 <USB_CoreInit>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2202      	movs	r2, #2
 80054fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e0d0      	b.n	80056a8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2100      	movs	r1, #0
 800550c:	4618      	mov	r0, r3
 800550e:	f003 fce5 	bl	8008edc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005512:	2300      	movs	r3, #0
 8005514:	73fb      	strb	r3, [r7, #15]
 8005516:	e04a      	b.n	80055ae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005518:	7bfa      	ldrb	r2, [r7, #15]
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	4613      	mov	r3, r2
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	4413      	add	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	440b      	add	r3, r1
 8005526:	333d      	adds	r3, #61	; 0x3d
 8005528:	2201      	movs	r2, #1
 800552a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800552c:	7bfa      	ldrb	r2, [r7, #15]
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	4613      	mov	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	333c      	adds	r3, #60	; 0x3c
 800553c:	7bfa      	ldrb	r2, [r7, #15]
 800553e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005540:	7bfa      	ldrb	r2, [r7, #15]
 8005542:	7bfb      	ldrb	r3, [r7, #15]
 8005544:	b298      	uxth	r0, r3
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	4613      	mov	r3, r2
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	4413      	add	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	3344      	adds	r3, #68	; 0x44
 8005554:	4602      	mov	r2, r0
 8005556:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005558:	7bfa      	ldrb	r2, [r7, #15]
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	4613      	mov	r3, r2
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	4413      	add	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	3340      	adds	r3, #64	; 0x40
 8005568:	2200      	movs	r2, #0
 800556a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800556c:	7bfa      	ldrb	r2, [r7, #15]
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	4413      	add	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	3348      	adds	r3, #72	; 0x48
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005580:	7bfa      	ldrb	r2, [r7, #15]
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	4613      	mov	r3, r2
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	4413      	add	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	440b      	add	r3, r1
 800558e:	334c      	adds	r3, #76	; 0x4c
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005594:	7bfa      	ldrb	r2, [r7, #15]
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	3354      	adds	r3, #84	; 0x54
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	3301      	adds	r3, #1
 80055ac:	73fb      	strb	r3, [r7, #15]
 80055ae:	7bfa      	ldrb	r2, [r7, #15]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d3af      	bcc.n	8005518 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055b8:	2300      	movs	r3, #0
 80055ba:	73fb      	strb	r3, [r7, #15]
 80055bc:	e044      	b.n	8005648 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055be:	7bfa      	ldrb	r2, [r7, #15]
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	440b      	add	r3, r1
 80055cc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055d4:	7bfa      	ldrb	r2, [r7, #15]
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	4613      	mov	r3, r2
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4413      	add	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	440b      	add	r3, r1
 80055e2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80055e6:	7bfa      	ldrb	r2, [r7, #15]
 80055e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80055ea:	7bfa      	ldrb	r2, [r7, #15]
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	4613      	mov	r3, r2
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	4413      	add	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	440b      	add	r3, r1
 80055f8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80055fc:	2200      	movs	r2, #0
 80055fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005600:	7bfa      	ldrb	r2, [r7, #15]
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	4613      	mov	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	4413      	add	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005616:	7bfa      	ldrb	r2, [r7, #15]
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	4613      	mov	r3, r2
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	440b      	add	r3, r1
 8005624:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800562c:	7bfa      	ldrb	r2, [r7, #15]
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	4613      	mov	r3, r2
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005642:	7bfb      	ldrb	r3, [r7, #15]
 8005644:	3301      	adds	r3, #1
 8005646:	73fb      	strb	r3, [r7, #15]
 8005648:	7bfa      	ldrb	r2, [r7, #15]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	429a      	cmp	r2, r3
 8005650:	d3b5      	bcc.n	80055be <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	687e      	ldr	r6, [r7, #4]
 800565a:	466d      	mov	r5, sp
 800565c:	f106 0410 	add.w	r4, r6, #16
 8005660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005668:	e894 0003 	ldmia.w	r4, {r0, r1}
 800566c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005670:	1d33      	adds	r3, r6, #4
 8005672:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005674:	6838      	ldr	r0, [r7, #0]
 8005676:	f003 fc7d 	bl	8008f74 <USB_DevInit>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e00d      	b.n	80056a8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f004 fdcc 	bl	800a23e <USB_DevDisconnect>

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_PCD_Start+0x1c>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e020      	b.n	800570e <HAL_PCD_Start+0x5e>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d109      	bne.n	80056f0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d005      	beq.n	80056f0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f003 fbcf 	bl	8008e98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f004 fd7c 	bl	800a1fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005716:	b590      	push	{r4, r7, lr}
 8005718:	b08d      	sub	sp, #52	; 0x34
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f004 fe3a 	bl	800a3a6 <USB_GetMode>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	f040 848a 	bne.w	800604e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4618      	mov	r0, r3
 8005740:	f004 fd9e 	bl	800a280 <USB_ReadInterrupts>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 8480 	beq.w	800604c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	0a1b      	lsrs	r3, r3, #8
 8005756:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4618      	mov	r0, r3
 8005766:	f004 fd8b 	bl	800a280 <USB_ReadInterrupts>
 800576a:	4603      	mov	r3, r0
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b02      	cmp	r3, #2
 8005772:	d107      	bne.n	8005784 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695a      	ldr	r2, [r3, #20]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f002 0202 	and.w	r2, r2, #2
 8005782:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4618      	mov	r0, r3
 800578a:	f004 fd79 	bl	800a280 <USB_ReadInterrupts>
 800578e:	4603      	mov	r3, r0
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b10      	cmp	r3, #16
 8005796:	d161      	bne.n	800585c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699a      	ldr	r2, [r3, #24]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0210 	bic.w	r2, r2, #16
 80057a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	f003 020f 	and.w	r2, r3, #15
 80057b4:	4613      	mov	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	4413      	add	r3, r2
 80057c4:	3304      	adds	r3, #4
 80057c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	0c5b      	lsrs	r3, r3, #17
 80057cc:	f003 030f 	and.w	r3, r3, #15
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d124      	bne.n	800581e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80057da:	4013      	ands	r3, r2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d035      	beq.n	800584c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	091b      	lsrs	r3, r3, #4
 80057e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80057ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	6a38      	ldr	r0, [r7, #32]
 80057f4:	f004 fbb0 	bl	8009f58 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	091b      	lsrs	r3, r3, #4
 8005800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005804:	441a      	add	r2, r3
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	6a1a      	ldr	r2, [r3, #32]
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	091b      	lsrs	r3, r3, #4
 8005812:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005816:	441a      	add	r2, r3
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	621a      	str	r2, [r3, #32]
 800581c:	e016      	b.n	800584c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	0c5b      	lsrs	r3, r3, #17
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	2b06      	cmp	r3, #6
 8005828:	d110      	bne.n	800584c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005830:	2208      	movs	r2, #8
 8005832:	4619      	mov	r1, r3
 8005834:	6a38      	ldr	r0, [r7, #32]
 8005836:	f004 fb8f 	bl	8009f58 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	6a1a      	ldr	r2, [r3, #32]
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005846:	441a      	add	r2, r3
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0210 	orr.w	r2, r2, #16
 800585a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f004 fd0d 	bl	800a280 <USB_ReadInterrupts>
 8005866:	4603      	mov	r3, r0
 8005868:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800586c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005870:	f040 80a7 	bne.w	80059c2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f004 fd12 	bl	800a2a6 <USB_ReadDevAllOutEpInterrupt>
 8005882:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005884:	e099      	b.n	80059ba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 808e 	beq.w	80059ae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	4611      	mov	r1, r2
 800589c:	4618      	mov	r0, r3
 800589e:	f004 fd36 	bl	800a30e <USB_ReadDevOutEPInterrupt>
 80058a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00c      	beq.n	80058c8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ba:	461a      	mov	r2, r3
 80058bc:	2301      	movs	r3, #1
 80058be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80058c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fec2 	bl	800664c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00c      	beq.n	80058ec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058de:	461a      	mov	r2, r3
 80058e0:	2308      	movs	r3, #8
 80058e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80058e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 ff98 	bl	800681c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f003 0310 	and.w	r3, r3, #16
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d008      	beq.n	8005908 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005902:	461a      	mov	r2, r3
 8005904:	2310      	movs	r3, #16
 8005906:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d030      	beq.n	8005974 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591a:	2b80      	cmp	r3, #128	; 0x80
 800591c:	d109      	bne.n	8005932 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	69fa      	ldr	r2, [r7, #28]
 8005928:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800592c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005930:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005934:	4613      	mov	r3, r2
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	4413      	add	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	4413      	add	r3, r2
 8005944:	3304      	adds	r3, #4
 8005946:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	78db      	ldrb	r3, [r3, #3]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d108      	bne.n	8005962 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2200      	movs	r2, #0
 8005954:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	b2db      	uxtb	r3, r3
 800595a:	4619      	mov	r1, r3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f009 ff89 	bl	800f874 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596e:	461a      	mov	r2, r3
 8005970:	2302      	movs	r3, #2
 8005972:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	2b00      	cmp	r3, #0
 800597c:	d008      	beq.n	8005990 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598a:	461a      	mov	r2, r3
 800598c:	2320      	movs	r3, #32
 800598e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d009      	beq.n	80059ae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a6:	461a      	mov	r2, r3
 80059a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	3301      	adds	r3, #1
 80059b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	085b      	lsrs	r3, r3, #1
 80059b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80059ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f47f af62 	bne.w	8005886 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f004 fc5a 	bl	800a280 <USB_ReadInterrupts>
 80059cc:	4603      	mov	r3, r0
 80059ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059d6:	f040 80db 	bne.w	8005b90 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4618      	mov	r0, r3
 80059e0:	f004 fc7b 	bl	800a2da <USB_ReadDevAllInEpInterrupt>
 80059e4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80059ea:	e0cd      	b.n	8005b88 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 80c2 	beq.w	8005b7c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	4611      	mov	r1, r2
 8005a02:	4618      	mov	r0, r3
 8005a04:	f004 fca1 	bl	800a34a <USB_ReadDevInEPInterrupt>
 8005a08:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d057      	beq.n	8005ac4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a20:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	69f9      	ldr	r1, [r7, #28]
 8005a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a34:	4013      	ands	r3, r2
 8005a36:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a44:	461a      	mov	r2, r3
 8005a46:	2301      	movs	r3, #1
 8005a48:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d132      	bne.n	8005ab8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a56:	4613      	mov	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	334c      	adds	r3, #76	; 0x4c
 8005a62:	6819      	ldr	r1, [r3, #0]
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a68:	4613      	mov	r3, r2
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4403      	add	r3, r0
 8005a72:	3348      	adds	r3, #72	; 0x48
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4419      	add	r1, r3
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4403      	add	r3, r0
 8005a86:	334c      	adds	r3, #76	; 0x4c
 8005a88:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d113      	bne.n	8005ab8 <HAL_PCD_IRQHandler+0x3a2>
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a94:	4613      	mov	r3, r2
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	4413      	add	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	3354      	adds	r3, #84	; 0x54
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d108      	bne.n	8005ab8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	f004 fca8 	bl	800a408 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f009 fe5d 	bl	800f77e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d008      	beq.n	8005ae0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ada:	461a      	mov	r2, r3
 8005adc:	2308      	movs	r3, #8
 8005ade:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d008      	beq.n	8005afc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af6:	461a      	mov	r2, r3
 8005af8:	2310      	movs	r3, #16
 8005afa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d008      	beq.n	8005b18 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b12:	461a      	mov	r2, r3
 8005b14:	2340      	movs	r3, #64	; 0x40
 8005b16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d023      	beq.n	8005b6a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005b22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b24:	6a38      	ldr	r0, [r7, #32]
 8005b26:	f003 fb89 	bl	800923c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	3338      	adds	r3, #56	; 0x38
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	4413      	add	r3, r2
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	78db      	ldrb	r3, [r3, #3]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d108      	bne.n	8005b58 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	4619      	mov	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f009 fea0 	bl	800f898 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b64:	461a      	mov	r2, r3
 8005b66:	2302      	movs	r3, #2
 8005b68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fcdb 	bl	8006532 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	3301      	adds	r3, #1
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	085b      	lsrs	r3, r3, #1
 8005b86:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f47f af2e 	bne.w	80059ec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f004 fb73 	bl	800a280 <USB_ReadInterrupts>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ba4:	d122      	bne.n	8005bec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bb4:	f023 0301 	bic.w	r3, r3, #1
 8005bb8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d108      	bne.n	8005bd6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005bcc:	2100      	movs	r1, #0
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fec2 	bl	8006958 <HAL_PCDEx_LPM_Callback>
 8005bd4:	e002      	b.n	8005bdc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f009 fe3e 	bl	800f858 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695a      	ldr	r2, [r3, #20]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f004 fb45 	bl	800a280 <USB_ReadInterrupts>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c00:	d112      	bne.n	8005c28 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d102      	bne.n	8005c18 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f009 fdfa 	bl	800f80c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695a      	ldr	r2, [r3, #20]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005c26:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f004 fb27 	bl	800a280 <USB_ReadInterrupts>
 8005c32:	4603      	mov	r3, r0
 8005c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3c:	f040 80b7 	bne.w	8005dae <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c4e:	f023 0301 	bic.w	r3, r3, #1
 8005c52:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2110      	movs	r1, #16
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f003 faee 	bl	800923c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c60:	2300      	movs	r3, #0
 8005c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c64:	e046      	b.n	8005cf4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c72:	461a      	mov	r2, r3
 8005c74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c78:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c98:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cbe:	0151      	lsls	r1, r2, #5
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	440a      	add	r2, r1
 8005cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ccc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cde:	0151      	lsls	r1, r2, #5
 8005ce0:	69fa      	ldr	r2, [r7, #28]
 8005ce2:	440a      	add	r2, r1
 8005ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d3b3      	bcc.n	8005c66 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d0c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005d10:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d016      	beq.n	8005d48 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d24:	69fa      	ldr	r2, [r7, #28]
 8005d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d2a:	f043 030b 	orr.w	r3, r3, #11
 8005d2e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d40:	f043 030b 	orr.w	r3, r3, #11
 8005d44:	6453      	str	r3, [r2, #68]	; 0x44
 8005d46:	e015      	b.n	8005d74 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d5a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005d5e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	69fa      	ldr	r2, [r7, #28]
 8005d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d6e:	f043 030b 	orr.w	r3, r3, #11
 8005d72:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69fa      	ldr	r2, [r7, #28]
 8005d7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d86:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d98:	461a      	mov	r2, r3
 8005d9a:	f004 fb35 	bl	800a408 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005dac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f004 fa64 	bl	800a280 <USB_ReadInterrupts>
 8005db8:	4603      	mov	r3, r0
 8005dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dc2:	d124      	bne.n	8005e0e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f004 fafa 	bl	800a3c2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f003 faaf 	bl	8009336 <USB_GetDevSpeed>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	461a      	mov	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681c      	ldr	r4, [r3, #0]
 8005de4:	f001 fa26 	bl	8007234 <HAL_RCC_GetHCLKFreq>
 8005de8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	461a      	mov	r2, r3
 8005df2:	4620      	mov	r0, r4
 8005df4:	f002 ffae 	bl	8008d54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f009 fce8 	bl	800f7ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f004 fa34 	bl	800a280 <USB_ReadInterrupts>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b08      	cmp	r3, #8
 8005e20:	d10a      	bne.n	8005e38 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f009 fcc5 	bl	800f7b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695a      	ldr	r2, [r3, #20]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f002 0208 	and.w	r2, r2, #8
 8005e36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f004 fa1f 	bl	800a280 <USB_ReadInterrupts>
 8005e42:	4603      	mov	r3, r0
 8005e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e48:	2b80      	cmp	r3, #128	; 0x80
 8005e4a:	d122      	bne.n	8005e92 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e58:	2301      	movs	r3, #1
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e5c:	e014      	b.n	8005e88 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e62:	4613      	mov	r3, r2
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	440b      	add	r3, r1
 8005e6c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d105      	bne.n	8005e82 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fb27 	bl	80064d0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	3301      	adds	r3, #1
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d3e5      	bcc.n	8005e5e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f004 f9f2 	bl	800a280 <USB_ReadInterrupts>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ea6:	d13b      	bne.n	8005f20 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8005eac:	e02b      	b.n	8005f06 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	4413      	add	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	440b      	add	r3, r1
 8005ecc:	3340      	adds	r3, #64	; 0x40
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d115      	bne.n	8005f00 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005ed4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	da12      	bge.n	8005f00 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ede:	4613      	mov	r3, r2
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	4413      	add	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	440b      	add	r3, r1
 8005ee8:	333f      	adds	r3, #63	; 0x3f
 8005eea:	2201      	movs	r2, #1
 8005eec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	4619      	mov	r1, r3
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fae8 	bl	80064d0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	3301      	adds	r3, #1
 8005f04:	627b      	str	r3, [r7, #36]	; 0x24
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d3ce      	bcc.n	8005eae <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695a      	ldr	r2, [r3, #20]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005f1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f004 f9ab 	bl	800a280 <USB_ReadInterrupts>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f34:	d155      	bne.n	8005fe2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f36:	2301      	movs	r3, #1
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24
 8005f3a:	e045      	b.n	8005fc8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f50:	4613      	mov	r3, r2
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	440b      	add	r3, r1
 8005f5a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d12e      	bne.n	8005fc2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005f64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	da2b      	bge.n	8005fc2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005f76:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d121      	bne.n	8005fc2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f82:	4613      	mov	r3, r2
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	4413      	add	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005f90:	2201      	movs	r2, #1
 8005f92:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10a      	bne.n	8005fc2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fbe:	6053      	str	r3, [r2, #4]
            break;
 8005fc0:	e007      	b.n	8005fd2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d3b4      	bcc.n	8005f3c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	695a      	ldr	r2, [r3, #20]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f004 f94a 	bl	800a280 <USB_ReadInterrupts>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff6:	d10a      	bne.n	800600e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f009 fc5f 	bl	800f8bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	695a      	ldr	r2, [r3, #20]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800600c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4618      	mov	r0, r3
 8006014:	f004 f934 	bl	800a280 <USB_ReadInterrupts>
 8006018:	4603      	mov	r3, r0
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b04      	cmp	r3, #4
 8006020:	d115      	bne.n	800604e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f009 fc4f 	bl	800f8d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6859      	ldr	r1, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
 800604a:	e000      	b.n	800604e <HAL_PCD_IRQHandler+0x938>
      return;
 800604c:	bf00      	nop
    }
  }
}
 800604e:	3734      	adds	r7, #52	; 0x34
 8006050:	46bd      	mov	sp, r7
 8006052:	bd90      	pop	{r4, r7, pc}

08006054 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_PCD_SetAddress+0x1a>
 800606a:	2302      	movs	r3, #2
 800606c:	e013      	b.n	8006096 <HAL_PCD_SetAddress+0x42>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	78fa      	ldrb	r2, [r7, #3]
 800607a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	78fa      	ldrb	r2, [r7, #3]
 8006084:	4611      	mov	r1, r2
 8006086:	4618      	mov	r0, r3
 8006088:	f004 f892 	bl	800a1b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	4608      	mov	r0, r1
 80060a8:	4611      	mov	r1, r2
 80060aa:	461a      	mov	r2, r3
 80060ac:	4603      	mov	r3, r0
 80060ae:	70fb      	strb	r3, [r7, #3]
 80060b0:	460b      	mov	r3, r1
 80060b2:	803b      	strh	r3, [r7, #0]
 80060b4:	4613      	mov	r3, r2
 80060b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80060b8:	2300      	movs	r3, #0
 80060ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80060bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	da0f      	bge.n	80060e4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	f003 020f 	and.w	r2, r3, #15
 80060ca:	4613      	mov	r3, r2
 80060cc:	00db      	lsls	r3, r3, #3
 80060ce:	4413      	add	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	3338      	adds	r3, #56	; 0x38
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	4413      	add	r3, r2
 80060d8:	3304      	adds	r3, #4
 80060da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2201      	movs	r2, #1
 80060e0:	705a      	strb	r2, [r3, #1]
 80060e2:	e00f      	b.n	8006104 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	f003 020f 	and.w	r2, r3, #15
 80060ea:	4613      	mov	r3, r2
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	4413      	add	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	4413      	add	r3, r2
 80060fa:	3304      	adds	r3, #4
 80060fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006104:	78fb      	ldrb	r3, [r7, #3]
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	b2da      	uxtb	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006110:	883a      	ldrh	r2, [r7, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	78ba      	ldrb	r2, [r7, #2]
 800611a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	785b      	ldrb	r3, [r3, #1]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d004      	beq.n	800612e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800612e:	78bb      	ldrb	r3, [r7, #2]
 8006130:	2b02      	cmp	r3, #2
 8006132:	d102      	bne.n	800613a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_PCD_EP_Open+0xaa>
 8006144:	2302      	movs	r3, #2
 8006146:	e00e      	b.n	8006166 <HAL_PCD_EP_Open+0xc8>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68f9      	ldr	r1, [r7, #12]
 8006156:	4618      	mov	r0, r3
 8006158:	f003 f912 	bl	8009380 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006164:	7afb      	ldrb	r3, [r7, #11]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	460b      	mov	r3, r1
 8006178:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800617a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800617e:	2b00      	cmp	r3, #0
 8006180:	da0f      	bge.n	80061a2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006182:	78fb      	ldrb	r3, [r7, #3]
 8006184:	f003 020f 	and.w	r2, r3, #15
 8006188:	4613      	mov	r3, r2
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	3338      	adds	r3, #56	; 0x38
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	4413      	add	r3, r2
 8006196:	3304      	adds	r3, #4
 8006198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	705a      	strb	r2, [r3, #1]
 80061a0:	e00f      	b.n	80061c2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061a2:	78fb      	ldrb	r3, [r7, #3]
 80061a4:	f003 020f 	and.w	r2, r3, #15
 80061a8:	4613      	mov	r3, r2
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	4413      	add	r3, r2
 80061b8:	3304      	adds	r3, #4
 80061ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80061c2:	78fb      	ldrb	r3, [r7, #3]
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_PCD_EP_Close+0x6e>
 80061d8:	2302      	movs	r3, #2
 80061da:	e00e      	b.n	80061fa <HAL_PCD_EP_Close+0x8c>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68f9      	ldr	r1, [r7, #12]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f003 f950 	bl	8009490 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b086      	sub	sp, #24
 8006206:	af00      	add	r7, sp, #0
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	603b      	str	r3, [r7, #0]
 800620e:	460b      	mov	r3, r1
 8006210:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006212:	7afb      	ldrb	r3, [r7, #11]
 8006214:	f003 020f 	and.w	r2, r3, #15
 8006218:	4613      	mov	r3, r2
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	4413      	add	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	3304      	adds	r3, #4
 800622a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	2200      	movs	r2, #0
 800623c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2200      	movs	r2, #0
 8006242:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006244:	7afb      	ldrb	r3, [r7, #11]
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	b2da      	uxtb	r2, r3
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d102      	bne.n	800625e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800625e:	7afb      	ldrb	r3, [r7, #11]
 8006260:	f003 030f 	and.w	r3, r3, #15
 8006264:	2b00      	cmp	r3, #0
 8006266:	d109      	bne.n	800627c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6818      	ldr	r0, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	b2db      	uxtb	r3, r3
 8006272:	461a      	mov	r2, r3
 8006274:	6979      	ldr	r1, [r7, #20]
 8006276:	f003 fc2f 	bl	8009ad8 <USB_EP0StartXfer>
 800627a:	e008      	b.n	800628e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6818      	ldr	r0, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	b2db      	uxtb	r3, r3
 8006286:	461a      	mov	r2, r3
 8006288:	6979      	ldr	r1, [r7, #20]
 800628a:	f003 f9dd 	bl	8009648 <USB_EPStartXfer>
  }

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	f003 020f 	and.w	r2, r3, #15
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	4613      	mov	r3, r2
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	4413      	add	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80062ba:	681b      	ldr	r3, [r3, #0]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	607a      	str	r2, [r7, #4]
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	460b      	mov	r3, r1
 80062d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062d8:	7afb      	ldrb	r3, [r7, #11]
 80062da:	f003 020f 	and.w	r2, r3, #15
 80062de:	4613      	mov	r3, r2
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	3338      	adds	r3, #56	; 0x38
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4413      	add	r3, r2
 80062ec:	3304      	adds	r3, #4
 80062ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2200      	movs	r2, #0
 8006300:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2201      	movs	r2, #1
 8006306:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006308:	7afb      	ldrb	r3, [r7, #11]
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	b2da      	uxtb	r2, r3
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d102      	bne.n	8006322 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006322:	7afb      	ldrb	r3, [r7, #11]
 8006324:	f003 030f 	and.w	r3, r3, #15
 8006328:	2b00      	cmp	r3, #0
 800632a:	d109      	bne.n	8006340 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	6979      	ldr	r1, [r7, #20]
 800633a:	f003 fbcd 	bl	8009ad8 <USB_EP0StartXfer>
 800633e:	e008      	b.n	8006352 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	6979      	ldr	r1, [r7, #20]
 800634e:	f003 f97b 	bl	8009648 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	460b      	mov	r3, r1
 8006366:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	f003 020f 	and.w	r2, r3, #15
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	429a      	cmp	r2, r3
 8006374:	d901      	bls.n	800637a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e050      	b.n	800641c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800637a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800637e:	2b00      	cmp	r3, #0
 8006380:	da0f      	bge.n	80063a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006382:	78fb      	ldrb	r3, [r7, #3]
 8006384:	f003 020f 	and.w	r2, r3, #15
 8006388:	4613      	mov	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	3338      	adds	r3, #56	; 0x38
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	4413      	add	r3, r2
 8006396:	3304      	adds	r3, #4
 8006398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	705a      	strb	r2, [r3, #1]
 80063a0:	e00d      	b.n	80063be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80063a2:	78fa      	ldrb	r2, [r7, #3]
 80063a4:	4613      	mov	r3, r2
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	4413      	add	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	4413      	add	r3, r2
 80063b4:	3304      	adds	r3, #4
 80063b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	f003 030f 	and.w	r3, r3, #15
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d101      	bne.n	80063de <HAL_PCD_EP_SetStall+0x82>
 80063da:	2302      	movs	r3, #2
 80063dc:	e01e      	b.n	800641c <HAL_PCD_EP_SetStall+0xc0>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68f9      	ldr	r1, [r7, #12]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f003 fe0b 	bl	800a008 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80063f2:	78fb      	ldrb	r3, [r7, #3]
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10a      	bne.n	8006412 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6818      	ldr	r0, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	b2d9      	uxtb	r1, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800640c:	461a      	mov	r2, r3
 800640e:	f003 fffb 	bl	800a408 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	f003 020f 	and.w	r2, r3, #15
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	429a      	cmp	r2, r3
 800643c:	d901      	bls.n	8006442 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e042      	b.n	80064c8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006442:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006446:	2b00      	cmp	r3, #0
 8006448:	da0f      	bge.n	800646a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800644a:	78fb      	ldrb	r3, [r7, #3]
 800644c:	f003 020f 	and.w	r2, r3, #15
 8006450:	4613      	mov	r3, r2
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	4413      	add	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	3338      	adds	r3, #56	; 0x38
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	4413      	add	r3, r2
 800645e:	3304      	adds	r3, #4
 8006460:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2201      	movs	r2, #1
 8006466:	705a      	strb	r2, [r3, #1]
 8006468:	e00f      	b.n	800648a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800646a:	78fb      	ldrb	r3, [r7, #3]
 800646c:	f003 020f 	and.w	r2, r3, #15
 8006470:	4613      	mov	r3, r2
 8006472:	00db      	lsls	r3, r3, #3
 8006474:	4413      	add	r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	4413      	add	r3, r2
 8006480:	3304      	adds	r3, #4
 8006482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	b2da      	uxtb	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d101      	bne.n	80064aa <HAL_PCD_EP_ClrStall+0x86>
 80064a6:	2302      	movs	r3, #2
 80064a8:	e00e      	b.n	80064c8 <HAL_PCD_EP_ClrStall+0xa4>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68f9      	ldr	r1, [r7, #12]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f003 fe13 	bl	800a0e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	460b      	mov	r3, r1
 80064da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80064dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	da0c      	bge.n	80064fe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064e4:	78fb      	ldrb	r3, [r7, #3]
 80064e6:	f003 020f 	and.w	r2, r3, #15
 80064ea:	4613      	mov	r3, r2
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	3338      	adds	r3, #56	; 0x38
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	4413      	add	r3, r2
 80064f8:	3304      	adds	r3, #4
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	e00c      	b.n	8006518 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	f003 020f 	and.w	r2, r3, #15
 8006504:	4613      	mov	r3, r2
 8006506:	00db      	lsls	r3, r3, #3
 8006508:	4413      	add	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	4413      	add	r3, r2
 8006514:	3304      	adds	r3, #4
 8006516:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68f9      	ldr	r1, [r7, #12]
 800651e:	4618      	mov	r0, r3
 8006520:	f003 fc32 	bl	8009d88 <USB_EPStopXfer>
 8006524:	4603      	mov	r3, r0
 8006526:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006528:	7afb      	ldrb	r3, [r7, #11]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b08a      	sub	sp, #40	; 0x28
 8006536:	af02      	add	r7, sp, #8
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	4613      	mov	r3, r2
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	4413      	add	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	3338      	adds	r3, #56	; 0x38
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	4413      	add	r3, r2
 8006556:	3304      	adds	r3, #4
 8006558:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a1a      	ldr	r2, [r3, #32]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	429a      	cmp	r2, r3
 8006564:	d901      	bls.n	800656a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e06c      	b.n	8006644 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	699a      	ldr	r2, [r3, #24]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	69fa      	ldr	r2, [r7, #28]
 800657c:	429a      	cmp	r2, r3
 800657e:	d902      	bls.n	8006586 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	3303      	adds	r3, #3
 800658a:	089b      	lsrs	r3, r3, #2
 800658c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800658e:	e02b      	b.n	80065e8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	699a      	ldr	r2, [r3, #24]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	69fa      	ldr	r2, [r7, #28]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d902      	bls.n	80065ac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	3303      	adds	r3, #3
 80065b0:	089b      	lsrs	r3, r3, #2
 80065b2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6919      	ldr	r1, [r3, #16]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	4603      	mov	r3, r0
 80065ca:	6978      	ldr	r0, [r7, #20]
 80065cc:	f003 fc86 	bl	8009edc <USB_WritePacket>

    ep->xfer_buff  += len;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	691a      	ldr	r2, [r3, #16]
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	441a      	add	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a1a      	ldr	r2, [r3, #32]
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	441a      	add	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d809      	bhi.n	8006612 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a1a      	ldr	r2, [r3, #32]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006606:	429a      	cmp	r2, r3
 8006608:	d203      	bcs.n	8006612 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1be      	bne.n	8006590 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	699a      	ldr	r2, [r3, #24]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	429a      	cmp	r2, r3
 800661c:	d811      	bhi.n	8006642 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	f003 030f 	and.w	r3, r3, #15
 8006624:	2201      	movs	r2, #1
 8006626:	fa02 f303 	lsl.w	r3, r2, r3
 800662a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	43db      	mvns	r3, r3
 8006638:	6939      	ldr	r1, [r7, #16]
 800663a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800663e:	4013      	ands	r3, r2
 8006640:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3720      	adds	r7, #32
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b088      	sub	sp, #32
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	333c      	adds	r3, #60	; 0x3c
 8006664:	3304      	adds	r3, #4
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d17b      	bne.n	800677a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f003 0308 	and.w	r3, r3, #8
 8006688:	2b00      	cmp	r3, #0
 800668a:	d015      	beq.n	80066b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	4a61      	ldr	r2, [pc, #388]	; (8006814 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006690:	4293      	cmp	r3, r2
 8006692:	f240 80b9 	bls.w	8006808 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 80b3 	beq.w	8006808 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ae:	461a      	mov	r2, r3
 80066b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066b4:	6093      	str	r3, [r2, #8]
 80066b6:	e0a7      	b.n	8006808 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f003 0320 	and.w	r3, r3, #32
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d009      	beq.n	80066d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ce:	461a      	mov	r2, r3
 80066d0:	2320      	movs	r3, #32
 80066d2:	6093      	str	r3, [r2, #8]
 80066d4:	e098      	b.n	8006808 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f040 8093 	bne.w	8006808 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	4a4b      	ldr	r2, [pc, #300]	; (8006814 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d90f      	bls.n	800670a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00a      	beq.n	800670a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006700:	461a      	mov	r2, r3
 8006702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006706:	6093      	str	r3, [r2, #8]
 8006708:	e07e      	b.n	8006808 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	4613      	mov	r3, r2
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	4413      	add	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	4413      	add	r3, r2
 800671c:	3304      	adds	r3, #4
 800671e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	69da      	ldr	r2, [r3, #28]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	0159      	lsls	r1, r3, #5
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	440b      	add	r3, r1
 800672c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006736:	1ad2      	subs	r2, r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d114      	bne.n	800676c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d109      	bne.n	800675e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6818      	ldr	r0, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006754:	461a      	mov	r2, r3
 8006756:	2101      	movs	r1, #1
 8006758:	f003 fe56 	bl	800a408 <USB_EP0_OutStart>
 800675c:	e006      	b.n	800676c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	691a      	ldr	r2, [r3, #16]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	441a      	add	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	b2db      	uxtb	r3, r3
 8006770:	4619      	mov	r1, r3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f008 ffe8 	bl	800f748 <HAL_PCD_DataOutStageCallback>
 8006778:	e046      	b.n	8006808 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	4a26      	ldr	r2, [pc, #152]	; (8006818 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d124      	bne.n	80067cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00a      	beq.n	80067a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006798:	461a      	mov	r2, r3
 800679a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800679e:	6093      	str	r3, [r2, #8]
 80067a0:	e032      	b.n	8006808 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f003 0320 	and.w	r3, r3, #32
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d008      	beq.n	80067be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b8:	461a      	mov	r2, r3
 80067ba:	2320      	movs	r3, #32
 80067bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f008 ffbf 	bl	800f748 <HAL_PCD_DataOutStageCallback>
 80067ca:	e01d      	b.n	8006808 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d114      	bne.n	80067fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	683a      	ldr	r2, [r7, #0]
 80067d6:	4613      	mov	r3, r2
 80067d8:	00db      	lsls	r3, r3, #3
 80067da:	4413      	add	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	440b      	add	r3, r1
 80067e0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d108      	bne.n	80067fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6818      	ldr	r0, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80067f4:	461a      	mov	r2, r3
 80067f6:	2100      	movs	r1, #0
 80067f8:	f003 fe06 	bl	800a408 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	4619      	mov	r1, r3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f008 ffa0 	bl	800f748 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3720      	adds	r7, #32
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	4f54300a 	.word	0x4f54300a
 8006818:	4f54310a 	.word	0x4f54310a

0800681c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	333c      	adds	r3, #60	; 0x3c
 8006834:	3304      	adds	r3, #4
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	4413      	add	r3, r2
 8006842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4a15      	ldr	r2, [pc, #84]	; (80068a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d90e      	bls.n	8006870 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006858:	2b00      	cmp	r3, #0
 800685a:	d009      	beq.n	8006870 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006868:	461a      	mov	r2, r3
 800686a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800686e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f008 ff57 	bl	800f724 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4a0a      	ldr	r2, [pc, #40]	; (80068a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d90c      	bls.n	8006898 <PCD_EP_OutSetupPacket_int+0x7c>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d108      	bne.n	8006898 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6818      	ldr	r0, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006890:	461a      	mov	r2, r3
 8006892:	2101      	movs	r1, #1
 8006894:	f003 fdb8 	bl	800a408 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	4f54300a 	.word	0x4f54300a

080068a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	460b      	mov	r3, r1
 80068b2:	70fb      	strb	r3, [r7, #3]
 80068b4:	4613      	mov	r3, r2
 80068b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80068c0:	78fb      	ldrb	r3, [r7, #3]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d107      	bne.n	80068d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80068c6:	883b      	ldrh	r3, [r7, #0]
 80068c8:	0419      	lsls	r1, r3, #16
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	629a      	str	r2, [r3, #40]	; 0x28
 80068d4:	e028      	b.n	8006928 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068dc:	0c1b      	lsrs	r3, r3, #16
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	4413      	add	r3, r2
 80068e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80068e4:	2300      	movs	r3, #0
 80068e6:	73fb      	strb	r3, [r7, #15]
 80068e8:	e00d      	b.n	8006906 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
 80068f0:	3340      	adds	r3, #64	; 0x40
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	0c1b      	lsrs	r3, r3, #16
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	4413      	add	r3, r2
 80068fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006900:	7bfb      	ldrb	r3, [r7, #15]
 8006902:	3301      	adds	r3, #1
 8006904:	73fb      	strb	r3, [r7, #15]
 8006906:	7bfa      	ldrb	r2, [r7, #15]
 8006908:	78fb      	ldrb	r3, [r7, #3]
 800690a:	3b01      	subs	r3, #1
 800690c:	429a      	cmp	r2, r3
 800690e:	d3ec      	bcc.n	80068ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006910:	883b      	ldrh	r3, [r7, #0]
 8006912:	0418      	lsls	r0, r3, #16
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6819      	ldr	r1, [r3, #0]
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	3b01      	subs	r3, #1
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	4302      	orrs	r2, r0
 8006920:	3340      	adds	r3, #64	; 0x40
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	440b      	add	r3, r1
 8006926:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006936:	b480      	push	{r7}
 8006938:	b083      	sub	sp, #12
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	460b      	mov	r3, r1
 8006940:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	887a      	ldrh	r2, [r7, #2]
 8006948:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	460b      	mov	r3, r1
 8006962:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e267      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d075      	beq.n	8006a7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800698e:	4b88      	ldr	r3, [pc, #544]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f003 030c 	and.w	r3, r3, #12
 8006996:	2b04      	cmp	r3, #4
 8006998:	d00c      	beq.n	80069b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800699a:	4b85      	ldr	r3, [pc, #532]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069a2:	2b08      	cmp	r3, #8
 80069a4:	d112      	bne.n	80069cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069a6:	4b82      	ldr	r3, [pc, #520]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069b2:	d10b      	bne.n	80069cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b4:	4b7e      	ldr	r3, [pc, #504]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d05b      	beq.n	8006a78 <HAL_RCC_OscConfig+0x108>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d157      	bne.n	8006a78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e242      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d4:	d106      	bne.n	80069e4 <HAL_RCC_OscConfig+0x74>
 80069d6:	4b76      	ldr	r3, [pc, #472]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a75      	ldr	r2, [pc, #468]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 80069dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	e01d      	b.n	8006a20 <HAL_RCC_OscConfig+0xb0>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069ec:	d10c      	bne.n	8006a08 <HAL_RCC_OscConfig+0x98>
 80069ee:	4b70      	ldr	r3, [pc, #448]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a6f      	ldr	r2, [pc, #444]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 80069f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069f8:	6013      	str	r3, [r2, #0]
 80069fa:	4b6d      	ldr	r3, [pc, #436]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a6c      	ldr	r2, [pc, #432]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	e00b      	b.n	8006a20 <HAL_RCC_OscConfig+0xb0>
 8006a08:	4b69      	ldr	r3, [pc, #420]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a68      	ldr	r2, [pc, #416]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	4b66      	ldr	r3, [pc, #408]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a65      	ldr	r2, [pc, #404]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d013      	beq.n	8006a50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a28:	f7fd fa86 	bl	8003f38 <HAL_GetTick>
 8006a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a30:	f7fd fa82 	bl	8003f38 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b64      	cmp	r3, #100	; 0x64
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e207      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a42:	4b5b      	ldr	r3, [pc, #364]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d0f0      	beq.n	8006a30 <HAL_RCC_OscConfig+0xc0>
 8006a4e:	e014      	b.n	8006a7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a50:	f7fd fa72 	bl	8003f38 <HAL_GetTick>
 8006a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a58:	f7fd fa6e 	bl	8003f38 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b64      	cmp	r3, #100	; 0x64
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e1f3      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a6a:	4b51      	ldr	r3, [pc, #324]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1f0      	bne.n	8006a58 <HAL_RCC_OscConfig+0xe8>
 8006a76:	e000      	b.n	8006a7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d063      	beq.n	8006b4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a86:	4b4a      	ldr	r3, [pc, #296]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 030c 	and.w	r3, r3, #12
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00b      	beq.n	8006aaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a92:	4b47      	ldr	r3, [pc, #284]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a9a:	2b08      	cmp	r3, #8
 8006a9c:	d11c      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a9e:	4b44      	ldr	r3, [pc, #272]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d116      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aaa:	4b41      	ldr	r3, [pc, #260]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x152>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d001      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e1c7      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ac2:	4b3b      	ldr	r3, [pc, #236]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	00db      	lsls	r3, r3, #3
 8006ad0:	4937      	ldr	r1, [pc, #220]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ad6:	e03a      	b.n	8006b4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d020      	beq.n	8006b22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ae0:	4b34      	ldr	r3, [pc, #208]	; (8006bb4 <HAL_RCC_OscConfig+0x244>)
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae6:	f7fd fa27 	bl	8003f38 <HAL_GetTick>
 8006aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aec:	e008      	b.n	8006b00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006aee:	f7fd fa23 	bl	8003f38 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d901      	bls.n	8006b00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e1a8      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b00:	4b2b      	ldr	r3, [pc, #172]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d0f0      	beq.n	8006aee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b0c:	4b28      	ldr	r3, [pc, #160]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	4925      	ldr	r1, [pc, #148]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	600b      	str	r3, [r1, #0]
 8006b20:	e015      	b.n	8006b4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b22:	4b24      	ldr	r3, [pc, #144]	; (8006bb4 <HAL_RCC_OscConfig+0x244>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b28:	f7fd fa06 	bl	8003f38 <HAL_GetTick>
 8006b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b2e:	e008      	b.n	8006b42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b30:	f7fd fa02 	bl	8003f38 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e187      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b42:	4b1b      	ldr	r3, [pc, #108]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1f0      	bne.n	8006b30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0308 	and.w	r3, r3, #8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d036      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d016      	beq.n	8006b90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b62:	4b15      	ldr	r3, [pc, #84]	; (8006bb8 <HAL_RCC_OscConfig+0x248>)
 8006b64:	2201      	movs	r2, #1
 8006b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b68:	f7fd f9e6 	bl	8003f38 <HAL_GetTick>
 8006b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b6e:	e008      	b.n	8006b82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b70:	f7fd f9e2 	bl	8003f38 <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e167      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b82:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <HAL_RCC_OscConfig+0x240>)
 8006b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d0f0      	beq.n	8006b70 <HAL_RCC_OscConfig+0x200>
 8006b8e:	e01b      	b.n	8006bc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b90:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <HAL_RCC_OscConfig+0x248>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b96:	f7fd f9cf 	bl	8003f38 <HAL_GetTick>
 8006b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b9c:	e00e      	b.n	8006bbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b9e:	f7fd f9cb 	bl	8003f38 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d907      	bls.n	8006bbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e150      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
 8006bb0:	40023800 	.word	0x40023800
 8006bb4:	42470000 	.word	0x42470000
 8006bb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bbc:	4b88      	ldr	r3, [pc, #544]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1ea      	bne.n	8006b9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0304 	and.w	r3, r3, #4
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 8097 	beq.w	8006d04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bda:	4b81      	ldr	r3, [pc, #516]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10f      	bne.n	8006c06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006be6:	2300      	movs	r3, #0
 8006be8:	60bb      	str	r3, [r7, #8]
 8006bea:	4b7d      	ldr	r3, [pc, #500]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	4a7c      	ldr	r2, [pc, #496]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8006bf6:	4b7a      	ldr	r3, [pc, #488]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bfe:	60bb      	str	r3, [r7, #8]
 8006c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c02:	2301      	movs	r3, #1
 8006c04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c06:	4b77      	ldr	r3, [pc, #476]	; (8006de4 <HAL_RCC_OscConfig+0x474>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d118      	bne.n	8006c44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c12:	4b74      	ldr	r3, [pc, #464]	; (8006de4 <HAL_RCC_OscConfig+0x474>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a73      	ldr	r2, [pc, #460]	; (8006de4 <HAL_RCC_OscConfig+0x474>)
 8006c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c1e:	f7fd f98b 	bl	8003f38 <HAL_GetTick>
 8006c22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c24:	e008      	b.n	8006c38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c26:	f7fd f987 	bl	8003f38 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d901      	bls.n	8006c38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e10c      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c38:	4b6a      	ldr	r3, [pc, #424]	; (8006de4 <HAL_RCC_OscConfig+0x474>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0f0      	beq.n	8006c26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d106      	bne.n	8006c5a <HAL_RCC_OscConfig+0x2ea>
 8006c4c:	4b64      	ldr	r3, [pc, #400]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c50:	4a63      	ldr	r2, [pc, #396]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c52:	f043 0301 	orr.w	r3, r3, #1
 8006c56:	6713      	str	r3, [r2, #112]	; 0x70
 8006c58:	e01c      	b.n	8006c94 <HAL_RCC_OscConfig+0x324>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	2b05      	cmp	r3, #5
 8006c60:	d10c      	bne.n	8006c7c <HAL_RCC_OscConfig+0x30c>
 8006c62:	4b5f      	ldr	r3, [pc, #380]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c66:	4a5e      	ldr	r2, [pc, #376]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c68:	f043 0304 	orr.w	r3, r3, #4
 8006c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c6e:	4b5c      	ldr	r3, [pc, #368]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c72:	4a5b      	ldr	r2, [pc, #364]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c74:	f043 0301 	orr.w	r3, r3, #1
 8006c78:	6713      	str	r3, [r2, #112]	; 0x70
 8006c7a:	e00b      	b.n	8006c94 <HAL_RCC_OscConfig+0x324>
 8006c7c:	4b58      	ldr	r3, [pc, #352]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c80:	4a57      	ldr	r2, [pc, #348]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c82:	f023 0301 	bic.w	r3, r3, #1
 8006c86:	6713      	str	r3, [r2, #112]	; 0x70
 8006c88:	4b55      	ldr	r3, [pc, #340]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8c:	4a54      	ldr	r2, [pc, #336]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006c8e:	f023 0304 	bic.w	r3, r3, #4
 8006c92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d015      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c9c:	f7fd f94c 	bl	8003f38 <HAL_GetTick>
 8006ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ca2:	e00a      	b.n	8006cba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ca4:	f7fd f948 	bl	8003f38 <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e0cb      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cba:	4b49      	ldr	r3, [pc, #292]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0ee      	beq.n	8006ca4 <HAL_RCC_OscConfig+0x334>
 8006cc6:	e014      	b.n	8006cf2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cc8:	f7fd f936 	bl	8003f38 <HAL_GetTick>
 8006ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cce:	e00a      	b.n	8006ce6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cd0:	f7fd f932 	bl	8003f38 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e0b5      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ce6:	4b3e      	ldr	r3, [pc, #248]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1ee      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cf2:	7dfb      	ldrb	r3, [r7, #23]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d105      	bne.n	8006d04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cf8:	4b39      	ldr	r3, [pc, #228]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfc:	4a38      	ldr	r2, [pc, #224]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 80a1 	beq.w	8006e50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d0e:	4b34      	ldr	r3, [pc, #208]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f003 030c 	and.w	r3, r3, #12
 8006d16:	2b08      	cmp	r3, #8
 8006d18:	d05c      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d141      	bne.n	8006da6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d22:	4b31      	ldr	r3, [pc, #196]	; (8006de8 <HAL_RCC_OscConfig+0x478>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d28:	f7fd f906 	bl	8003f38 <HAL_GetTick>
 8006d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d30:	f7fd f902 	bl	8003f38 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e087      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d42:	4b27      	ldr	r3, [pc, #156]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1f0      	bne.n	8006d30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	69da      	ldr	r2, [r3, #28]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	431a      	orrs	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	019b      	lsls	r3, r3, #6
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d64:	085b      	lsrs	r3, r3, #1
 8006d66:	3b01      	subs	r3, #1
 8006d68:	041b      	lsls	r3, r3, #16
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	061b      	lsls	r3, r3, #24
 8006d72:	491b      	ldr	r1, [pc, #108]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d78:	4b1b      	ldr	r3, [pc, #108]	; (8006de8 <HAL_RCC_OscConfig+0x478>)
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d7e:	f7fd f8db 	bl	8003f38 <HAL_GetTick>
 8006d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d84:	e008      	b.n	8006d98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d86:	f7fd f8d7 	bl	8003f38 <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d901      	bls.n	8006d98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e05c      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d98:	4b11      	ldr	r3, [pc, #68]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0f0      	beq.n	8006d86 <HAL_RCC_OscConfig+0x416>
 8006da4:	e054      	b.n	8006e50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006da6:	4b10      	ldr	r3, [pc, #64]	; (8006de8 <HAL_RCC_OscConfig+0x478>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dac:	f7fd f8c4 	bl	8003f38 <HAL_GetTick>
 8006db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006db2:	e008      	b.n	8006dc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006db4:	f7fd f8c0 	bl	8003f38 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e045      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dc6:	4b06      	ldr	r3, [pc, #24]	; (8006de0 <HAL_RCC_OscConfig+0x470>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1f0      	bne.n	8006db4 <HAL_RCC_OscConfig+0x444>
 8006dd2:	e03d      	b.n	8006e50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d107      	bne.n	8006dec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e038      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
 8006de0:	40023800 	.word	0x40023800
 8006de4:	40007000 	.word	0x40007000
 8006de8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006dec:	4b1b      	ldr	r3, [pc, #108]	; (8006e5c <HAL_RCC_OscConfig+0x4ec>)
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d028      	beq.n	8006e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d121      	bne.n	8006e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d11a      	bne.n	8006e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d111      	bne.n	8006e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e32:	085b      	lsrs	r3, r3, #1
 8006e34:	3b01      	subs	r3, #1
 8006e36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d107      	bne.n	8006e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d001      	beq.n	8006e50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e000      	b.n	8006e52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3718      	adds	r7, #24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	40023800 	.word	0x40023800

08006e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e0cc      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e74:	4b68      	ldr	r3, [pc, #416]	; (8007018 <HAL_RCC_ClockConfig+0x1b8>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0307 	and.w	r3, r3, #7
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d90c      	bls.n	8006e9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e82:	4b65      	ldr	r3, [pc, #404]	; (8007018 <HAL_RCC_ClockConfig+0x1b8>)
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	b2d2      	uxtb	r2, r2
 8006e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e8a:	4b63      	ldr	r3, [pc, #396]	; (8007018 <HAL_RCC_ClockConfig+0x1b8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d001      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e0b8      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d020      	beq.n	8006eea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006eb4:	4b59      	ldr	r3, [pc, #356]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	4a58      	ldr	r2, [pc, #352]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006eba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ebe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0308 	and.w	r3, r3, #8
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ecc:	4b53      	ldr	r3, [pc, #332]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	4a52      	ldr	r2, [pc, #328]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006ed2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ed6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ed8:	4b50      	ldr	r3, [pc, #320]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	494d      	ldr	r1, [pc, #308]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d044      	beq.n	8006f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d107      	bne.n	8006f0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006efe:	4b47      	ldr	r3, [pc, #284]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d119      	bne.n	8006f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e07f      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d003      	beq.n	8006f1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d107      	bne.n	8006f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f1e:	4b3f      	ldr	r3, [pc, #252]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d109      	bne.n	8006f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e06f      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f2e:	4b3b      	ldr	r3, [pc, #236]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e067      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f3e:	4b37      	ldr	r3, [pc, #220]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f023 0203 	bic.w	r2, r3, #3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	4934      	ldr	r1, [pc, #208]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f50:	f7fc fff2 	bl	8003f38 <HAL_GetTick>
 8006f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f56:	e00a      	b.n	8006f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f58:	f7fc ffee 	bl	8003f38 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e04f      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f6e:	4b2b      	ldr	r3, [pc, #172]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 020c 	and.w	r2, r3, #12
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d1eb      	bne.n	8006f58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f80:	4b25      	ldr	r3, [pc, #148]	; (8007018 <HAL_RCC_ClockConfig+0x1b8>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d20c      	bcs.n	8006fa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f8e:	4b22      	ldr	r3, [pc, #136]	; (8007018 <HAL_RCC_ClockConfig+0x1b8>)
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f96:	4b20      	ldr	r3, [pc, #128]	; (8007018 <HAL_RCC_ClockConfig+0x1b8>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d001      	beq.n	8006fa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e032      	b.n	800700e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d008      	beq.n	8006fc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fb4:	4b19      	ldr	r3, [pc, #100]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	4916      	ldr	r1, [pc, #88]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0308 	and.w	r3, r3, #8
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d009      	beq.n	8006fe6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fd2:	4b12      	ldr	r3, [pc, #72]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	490e      	ldr	r1, [pc, #56]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006fe6:	f000 f821 	bl	800702c <HAL_RCC_GetSysClockFreq>
 8006fea:	4602      	mov	r2, r0
 8006fec:	4b0b      	ldr	r3, [pc, #44]	; (800701c <HAL_RCC_ClockConfig+0x1bc>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	091b      	lsrs	r3, r3, #4
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	490a      	ldr	r1, [pc, #40]	; (8007020 <HAL_RCC_ClockConfig+0x1c0>)
 8006ff8:	5ccb      	ldrb	r3, [r1, r3]
 8006ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffe:	4a09      	ldr	r2, [pc, #36]	; (8007024 <HAL_RCC_ClockConfig+0x1c4>)
 8007000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007002:	4b09      	ldr	r3, [pc, #36]	; (8007028 <HAL_RCC_ClockConfig+0x1c8>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4618      	mov	r0, r3
 8007008:	f7fc fe40 	bl	8003c8c <HAL_InitTick>

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	40023c00 	.word	0x40023c00
 800701c:	40023800 	.word	0x40023800
 8007020:	08010fd8 	.word	0x08010fd8
 8007024:	2000059c 	.word	0x2000059c
 8007028:	200005a0 	.word	0x200005a0

0800702c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800702c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007030:	b094      	sub	sp, #80	; 0x50
 8007032:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	647b      	str	r3, [r7, #68]	; 0x44
 8007038:	2300      	movs	r3, #0
 800703a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800703c:	2300      	movs	r3, #0
 800703e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007044:	4b79      	ldr	r3, [pc, #484]	; (800722c <HAL_RCC_GetSysClockFreq+0x200>)
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f003 030c 	and.w	r3, r3, #12
 800704c:	2b08      	cmp	r3, #8
 800704e:	d00d      	beq.n	800706c <HAL_RCC_GetSysClockFreq+0x40>
 8007050:	2b08      	cmp	r3, #8
 8007052:	f200 80e1 	bhi.w	8007218 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <HAL_RCC_GetSysClockFreq+0x34>
 800705a:	2b04      	cmp	r3, #4
 800705c:	d003      	beq.n	8007066 <HAL_RCC_GetSysClockFreq+0x3a>
 800705e:	e0db      	b.n	8007218 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007060:	4b73      	ldr	r3, [pc, #460]	; (8007230 <HAL_RCC_GetSysClockFreq+0x204>)
 8007062:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007064:	e0db      	b.n	800721e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007066:	4b72      	ldr	r3, [pc, #456]	; (8007230 <HAL_RCC_GetSysClockFreq+0x204>)
 8007068:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800706a:	e0d8      	b.n	800721e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800706c:	4b6f      	ldr	r3, [pc, #444]	; (800722c <HAL_RCC_GetSysClockFreq+0x200>)
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007074:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007076:	4b6d      	ldr	r3, [pc, #436]	; (800722c <HAL_RCC_GetSysClockFreq+0x200>)
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d063      	beq.n	800714a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007082:	4b6a      	ldr	r3, [pc, #424]	; (800722c <HAL_RCC_GetSysClockFreq+0x200>)
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	099b      	lsrs	r3, r3, #6
 8007088:	2200      	movs	r2, #0
 800708a:	63bb      	str	r3, [r7, #56]	; 0x38
 800708c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007094:	633b      	str	r3, [r7, #48]	; 0x30
 8007096:	2300      	movs	r3, #0
 8007098:	637b      	str	r3, [r7, #52]	; 0x34
 800709a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800709e:	4622      	mov	r2, r4
 80070a0:	462b      	mov	r3, r5
 80070a2:	f04f 0000 	mov.w	r0, #0
 80070a6:	f04f 0100 	mov.w	r1, #0
 80070aa:	0159      	lsls	r1, r3, #5
 80070ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070b0:	0150      	lsls	r0, r2, #5
 80070b2:	4602      	mov	r2, r0
 80070b4:	460b      	mov	r3, r1
 80070b6:	4621      	mov	r1, r4
 80070b8:	1a51      	subs	r1, r2, r1
 80070ba:	6139      	str	r1, [r7, #16]
 80070bc:	4629      	mov	r1, r5
 80070be:	eb63 0301 	sbc.w	r3, r3, r1
 80070c2:	617b      	str	r3, [r7, #20]
 80070c4:	f04f 0200 	mov.w	r2, #0
 80070c8:	f04f 0300 	mov.w	r3, #0
 80070cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070d0:	4659      	mov	r1, fp
 80070d2:	018b      	lsls	r3, r1, #6
 80070d4:	4651      	mov	r1, sl
 80070d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80070da:	4651      	mov	r1, sl
 80070dc:	018a      	lsls	r2, r1, #6
 80070de:	4651      	mov	r1, sl
 80070e0:	ebb2 0801 	subs.w	r8, r2, r1
 80070e4:	4659      	mov	r1, fp
 80070e6:	eb63 0901 	sbc.w	r9, r3, r1
 80070ea:	f04f 0200 	mov.w	r2, #0
 80070ee:	f04f 0300 	mov.w	r3, #0
 80070f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070fe:	4690      	mov	r8, r2
 8007100:	4699      	mov	r9, r3
 8007102:	4623      	mov	r3, r4
 8007104:	eb18 0303 	adds.w	r3, r8, r3
 8007108:	60bb      	str	r3, [r7, #8]
 800710a:	462b      	mov	r3, r5
 800710c:	eb49 0303 	adc.w	r3, r9, r3
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	f04f 0200 	mov.w	r2, #0
 8007116:	f04f 0300 	mov.w	r3, #0
 800711a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800711e:	4629      	mov	r1, r5
 8007120:	028b      	lsls	r3, r1, #10
 8007122:	4621      	mov	r1, r4
 8007124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007128:	4621      	mov	r1, r4
 800712a:	028a      	lsls	r2, r1, #10
 800712c:	4610      	mov	r0, r2
 800712e:	4619      	mov	r1, r3
 8007130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007132:	2200      	movs	r2, #0
 8007134:	62bb      	str	r3, [r7, #40]	; 0x28
 8007136:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007138:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800713c:	f7f9 fbae 	bl	800089c <__aeabi_uldivmod>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4613      	mov	r3, r2
 8007146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007148:	e058      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800714a:	4b38      	ldr	r3, [pc, #224]	; (800722c <HAL_RCC_GetSysClockFreq+0x200>)
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	099b      	lsrs	r3, r3, #6
 8007150:	2200      	movs	r2, #0
 8007152:	4618      	mov	r0, r3
 8007154:	4611      	mov	r1, r2
 8007156:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800715a:	623b      	str	r3, [r7, #32]
 800715c:	2300      	movs	r3, #0
 800715e:	627b      	str	r3, [r7, #36]	; 0x24
 8007160:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007164:	4642      	mov	r2, r8
 8007166:	464b      	mov	r3, r9
 8007168:	f04f 0000 	mov.w	r0, #0
 800716c:	f04f 0100 	mov.w	r1, #0
 8007170:	0159      	lsls	r1, r3, #5
 8007172:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007176:	0150      	lsls	r0, r2, #5
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	4641      	mov	r1, r8
 800717e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007182:	4649      	mov	r1, r9
 8007184:	eb63 0b01 	sbc.w	fp, r3, r1
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	f04f 0300 	mov.w	r3, #0
 8007190:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007194:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007198:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800719c:	ebb2 040a 	subs.w	r4, r2, sl
 80071a0:	eb63 050b 	sbc.w	r5, r3, fp
 80071a4:	f04f 0200 	mov.w	r2, #0
 80071a8:	f04f 0300 	mov.w	r3, #0
 80071ac:	00eb      	lsls	r3, r5, #3
 80071ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071b2:	00e2      	lsls	r2, r4, #3
 80071b4:	4614      	mov	r4, r2
 80071b6:	461d      	mov	r5, r3
 80071b8:	4643      	mov	r3, r8
 80071ba:	18e3      	adds	r3, r4, r3
 80071bc:	603b      	str	r3, [r7, #0]
 80071be:	464b      	mov	r3, r9
 80071c0:	eb45 0303 	adc.w	r3, r5, r3
 80071c4:	607b      	str	r3, [r7, #4]
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	f04f 0300 	mov.w	r3, #0
 80071ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071d2:	4629      	mov	r1, r5
 80071d4:	028b      	lsls	r3, r1, #10
 80071d6:	4621      	mov	r1, r4
 80071d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071dc:	4621      	mov	r1, r4
 80071de:	028a      	lsls	r2, r1, #10
 80071e0:	4610      	mov	r0, r2
 80071e2:	4619      	mov	r1, r3
 80071e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e6:	2200      	movs	r2, #0
 80071e8:	61bb      	str	r3, [r7, #24]
 80071ea:	61fa      	str	r2, [r7, #28]
 80071ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071f0:	f7f9 fb54 	bl	800089c <__aeabi_uldivmod>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	4613      	mov	r3, r2
 80071fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80071fc:	4b0b      	ldr	r3, [pc, #44]	; (800722c <HAL_RCC_GetSysClockFreq+0x200>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	0c1b      	lsrs	r3, r3, #16
 8007202:	f003 0303 	and.w	r3, r3, #3
 8007206:	3301      	adds	r3, #1
 8007208:	005b      	lsls	r3, r3, #1
 800720a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800720c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800720e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007210:	fbb2 f3f3 	udiv	r3, r2, r3
 8007214:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007216:	e002      	b.n	800721e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007218:	4b05      	ldr	r3, [pc, #20]	; (8007230 <HAL_RCC_GetSysClockFreq+0x204>)
 800721a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800721c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800721e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007220:	4618      	mov	r0, r3
 8007222:	3750      	adds	r7, #80	; 0x50
 8007224:	46bd      	mov	sp, r7
 8007226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800722a:	bf00      	nop
 800722c:	40023800 	.word	0x40023800
 8007230:	00f42400 	.word	0x00f42400

08007234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007234:	b480      	push	{r7}
 8007236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007238:	4b03      	ldr	r3, [pc, #12]	; (8007248 <HAL_RCC_GetHCLKFreq+0x14>)
 800723a:	681b      	ldr	r3, [r3, #0]
}
 800723c:	4618      	mov	r0, r3
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	2000059c 	.word	0x2000059c

0800724c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007250:	f7ff fff0 	bl	8007234 <HAL_RCC_GetHCLKFreq>
 8007254:	4602      	mov	r2, r0
 8007256:	4b05      	ldr	r3, [pc, #20]	; (800726c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	0a9b      	lsrs	r3, r3, #10
 800725c:	f003 0307 	and.w	r3, r3, #7
 8007260:	4903      	ldr	r1, [pc, #12]	; (8007270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007262:	5ccb      	ldrb	r3, [r1, r3]
 8007264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007268:	4618      	mov	r0, r3
 800726a:	bd80      	pop	{r7, pc}
 800726c:	40023800 	.word	0x40023800
 8007270:	08010fe8 	.word	0x08010fe8

08007274 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	220f      	movs	r2, #15
 8007282:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007284:	4b12      	ldr	r3, [pc, #72]	; (80072d0 <HAL_RCC_GetClockConfig+0x5c>)
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f003 0203 	and.w	r2, r3, #3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007290:	4b0f      	ldr	r3, [pc, #60]	; (80072d0 <HAL_RCC_GetClockConfig+0x5c>)
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800729c:	4b0c      	ldr	r3, [pc, #48]	; (80072d0 <HAL_RCC_GetClockConfig+0x5c>)
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80072a8:	4b09      	ldr	r3, [pc, #36]	; (80072d0 <HAL_RCC_GetClockConfig+0x5c>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	08db      	lsrs	r3, r3, #3
 80072ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80072b6:	4b07      	ldr	r3, [pc, #28]	; (80072d4 <HAL_RCC_GetClockConfig+0x60>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0207 	and.w	r2, r3, #7
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	601a      	str	r2, [r3, #0]
}
 80072c2:	bf00      	nop
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	40023800 	.word	0x40023800
 80072d4:	40023c00 	.word	0x40023c00

080072d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e07b      	b.n	80073e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d108      	bne.n	8007304 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072fa:	d009      	beq.n	8007310 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	61da      	str	r2, [r3, #28]
 8007302:	e005      	b.n	8007310 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d106      	bne.n	8007330 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7fc fbc2 	bl	8003ab4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007346:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007358:	431a      	orrs	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	431a      	orrs	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007380:	431a      	orrs	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800738a:	431a      	orrs	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007394:	ea42 0103 	orr.w	r1, r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	0c1b      	lsrs	r3, r3, #16
 80073ae:	f003 0104 	and.w	r1, r3, #4
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b6:	f003 0210 	and.w	r2, r3, #16
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69da      	ldr	r2, [r3, #28]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b088      	sub	sp, #32
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	60f8      	str	r0, [r7, #12]
 80073f2:	60b9      	str	r1, [r7, #8]
 80073f4:	603b      	str	r3, [r7, #0]
 80073f6:	4613      	mov	r3, r2
 80073f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007404:	2b01      	cmp	r3, #1
 8007406:	d101      	bne.n	800740c <HAL_SPI_Transmit+0x22>
 8007408:	2302      	movs	r3, #2
 800740a:	e126      	b.n	800765a <HAL_SPI_Transmit+0x270>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007414:	f7fc fd90 	bl	8003f38 <HAL_GetTick>
 8007418:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800741a:	88fb      	ldrh	r3, [r7, #6]
 800741c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b01      	cmp	r3, #1
 8007428:	d002      	beq.n	8007430 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800742a:	2302      	movs	r3, #2
 800742c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800742e:	e10b      	b.n	8007648 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <HAL_SPI_Transmit+0x52>
 8007436:	88fb      	ldrh	r3, [r7, #6]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d102      	bne.n	8007442 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007440:	e102      	b.n	8007648 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2203      	movs	r2, #3
 8007446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	88fa      	ldrh	r2, [r7, #6]
 800745a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	88fa      	ldrh	r2, [r7, #6]
 8007460:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007488:	d10f      	bne.n	80074aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007498:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b4:	2b40      	cmp	r3, #64	; 0x40
 80074b6:	d007      	beq.n	80074c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074d0:	d14b      	bne.n	800756a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <HAL_SPI_Transmit+0xf6>
 80074da:	8afb      	ldrh	r3, [r7, #22]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d13e      	bne.n	800755e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e4:	881a      	ldrh	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f0:	1c9a      	adds	r2, r3, #2
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	3b01      	subs	r3, #1
 80074fe:	b29a      	uxth	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007504:	e02b      	b.n	800755e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f003 0302 	and.w	r3, r3, #2
 8007510:	2b02      	cmp	r3, #2
 8007512:	d112      	bne.n	800753a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007518:	881a      	ldrh	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007524:	1c9a      	adds	r2, r3, #2
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800752e:	b29b      	uxth	r3, r3
 8007530:	3b01      	subs	r3, #1
 8007532:	b29a      	uxth	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	86da      	strh	r2, [r3, #54]	; 0x36
 8007538:	e011      	b.n	800755e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800753a:	f7fc fcfd 	bl	8003f38 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	d803      	bhi.n	8007552 <HAL_SPI_Transmit+0x168>
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007550:	d102      	bne.n	8007558 <HAL_SPI_Transmit+0x16e>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d102      	bne.n	800755e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800755c:	e074      	b.n	8007648 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007562:	b29b      	uxth	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1ce      	bne.n	8007506 <HAL_SPI_Transmit+0x11c>
 8007568:	e04c      	b.n	8007604 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <HAL_SPI_Transmit+0x18e>
 8007572:	8afb      	ldrh	r3, [r7, #22]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d140      	bne.n	80075fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	330c      	adds	r3, #12
 8007582:	7812      	ldrb	r2, [r2, #0]
 8007584:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007594:	b29b      	uxth	r3, r3
 8007596:	3b01      	subs	r3, #1
 8007598:	b29a      	uxth	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800759e:	e02c      	b.n	80075fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d113      	bne.n	80075d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	330c      	adds	r3, #12
 80075b8:	7812      	ldrb	r2, [r2, #0]
 80075ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80075d4:	e011      	b.n	80075fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075d6:	f7fc fcaf 	bl	8003f38 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d803      	bhi.n	80075ee <HAL_SPI_Transmit+0x204>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ec:	d102      	bne.n	80075f4 <HAL_SPI_Transmit+0x20a>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d102      	bne.n	80075fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075f8:	e026      	b.n	8007648 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1cd      	bne.n	80075a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 fa55 	bl	8007ab8 <SPI_EndRxTxTransaction>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2220      	movs	r2, #32
 8007618:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10a      	bne.n	8007638 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007622:	2300      	movs	r3, #0
 8007624:	613b      	str	r3, [r7, #16]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	613b      	str	r3, [r7, #16]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	613b      	str	r3, [r7, #16]
 8007636:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	77fb      	strb	r3, [r7, #31]
 8007644:	e000      	b.n	8007648 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007646:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007658:	7ffb      	ldrb	r3, [r7, #31]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3720      	adds	r7, #32
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b08c      	sub	sp, #48	; 0x30
 8007666:	af00      	add	r7, sp, #0
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	60b9      	str	r1, [r7, #8]
 800766c:	607a      	str	r2, [r7, #4]
 800766e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007670:	2301      	movs	r3, #1
 8007672:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007680:	2b01      	cmp	r3, #1
 8007682:	d101      	bne.n	8007688 <HAL_SPI_TransmitReceive+0x26>
 8007684:	2302      	movs	r3, #2
 8007686:	e18a      	b.n	800799e <HAL_SPI_TransmitReceive+0x33c>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007690:	f7fc fc52 	bl	8003f38 <HAL_GetTick>
 8007694:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800769c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80076a6:	887b      	ldrh	r3, [r7, #2]
 80076a8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d00f      	beq.n	80076d2 <HAL_SPI_TransmitReceive+0x70>
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076b8:	d107      	bne.n	80076ca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d103      	bne.n	80076ca <HAL_SPI_TransmitReceive+0x68>
 80076c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076c6:	2b04      	cmp	r3, #4
 80076c8:	d003      	beq.n	80076d2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80076ca:	2302      	movs	r3, #2
 80076cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076d0:	e15b      	b.n	800798a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <HAL_SPI_TransmitReceive+0x82>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <HAL_SPI_TransmitReceive+0x82>
 80076de:	887b      	ldrh	r3, [r7, #2]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d103      	bne.n	80076ec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076ea:	e14e      	b.n	800798a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b04      	cmp	r3, #4
 80076f6:	d003      	beq.n	8007700 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2205      	movs	r2, #5
 80076fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	887a      	ldrh	r2, [r7, #2]
 8007710:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	887a      	ldrh	r2, [r7, #2]
 8007716:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	887a      	ldrh	r2, [r7, #2]
 8007722:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	887a      	ldrh	r2, [r7, #2]
 8007728:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007740:	2b40      	cmp	r3, #64	; 0x40
 8007742:	d007      	beq.n	8007754 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007752:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800775c:	d178      	bne.n	8007850 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <HAL_SPI_TransmitReceive+0x10a>
 8007766:	8b7b      	ldrh	r3, [r7, #26]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d166      	bne.n	800783a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007770:	881a      	ldrh	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777c:	1c9a      	adds	r2, r3, #2
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007786:	b29b      	uxth	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007790:	e053      	b.n	800783a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b02      	cmp	r3, #2
 800779e:	d11b      	bne.n	80077d8 <HAL_SPI_TransmitReceive+0x176>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d016      	beq.n	80077d8 <HAL_SPI_TransmitReceive+0x176>
 80077aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d113      	bne.n	80077d8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b4:	881a      	ldrh	r2, [r3, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c0:	1c9a      	adds	r2, r3, #2
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	3b01      	subs	r3, #1
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d119      	bne.n	800781a <HAL_SPI_TransmitReceive+0x1b8>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d014      	beq.n	800781a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68da      	ldr	r2, [r3, #12]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fa:	b292      	uxth	r2, r2
 80077fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007802:	1c9a      	adds	r2, r3, #2
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800780c:	b29b      	uxth	r3, r3
 800780e:	3b01      	subs	r3, #1
 8007810:	b29a      	uxth	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007816:	2301      	movs	r3, #1
 8007818:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800781a:	f7fc fb8d 	bl	8003f38 <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007826:	429a      	cmp	r2, r3
 8007828:	d807      	bhi.n	800783a <HAL_SPI_TransmitReceive+0x1d8>
 800782a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007830:	d003      	beq.n	800783a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007838:	e0a7      	b.n	800798a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800783e:	b29b      	uxth	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1a6      	bne.n	8007792 <HAL_SPI_TransmitReceive+0x130>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007848:	b29b      	uxth	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1a1      	bne.n	8007792 <HAL_SPI_TransmitReceive+0x130>
 800784e:	e07c      	b.n	800794a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <HAL_SPI_TransmitReceive+0x1fc>
 8007858:	8b7b      	ldrh	r3, [r7, #26]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d16b      	bne.n	8007936 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	330c      	adds	r3, #12
 8007868:	7812      	ldrb	r2, [r2, #0]
 800786a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800787a:	b29b      	uxth	r3, r3
 800787c:	3b01      	subs	r3, #1
 800787e:	b29a      	uxth	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007884:	e057      	b.n	8007936 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f003 0302 	and.w	r3, r3, #2
 8007890:	2b02      	cmp	r3, #2
 8007892:	d11c      	bne.n	80078ce <HAL_SPI_TransmitReceive+0x26c>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007898:	b29b      	uxth	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d017      	beq.n	80078ce <HAL_SPI_TransmitReceive+0x26c>
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d114      	bne.n	80078ce <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	330c      	adds	r3, #12
 80078ae:	7812      	ldrb	r2, [r2, #0]
 80078b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b6:	1c5a      	adds	r2, r3, #1
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	3b01      	subs	r3, #1
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d119      	bne.n	8007910 <HAL_SPI_TransmitReceive+0x2ae>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d014      	beq.n	8007910 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f0:	b2d2      	uxtb	r2, r2
 80078f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	1c5a      	adds	r2, r3, #1
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007902:	b29b      	uxth	r3, r3
 8007904:	3b01      	subs	r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800790c:	2301      	movs	r3, #1
 800790e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007910:	f7fc fb12 	bl	8003f38 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800791c:	429a      	cmp	r2, r3
 800791e:	d803      	bhi.n	8007928 <HAL_SPI_TransmitReceive+0x2c6>
 8007920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007926:	d102      	bne.n	800792e <HAL_SPI_TransmitReceive+0x2cc>
 8007928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792a:	2b00      	cmp	r3, #0
 800792c:	d103      	bne.n	8007936 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007934:	e029      	b.n	800798a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800793a:	b29b      	uxth	r3, r3
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1a2      	bne.n	8007886 <HAL_SPI_TransmitReceive+0x224>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007944:	b29b      	uxth	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d19d      	bne.n	8007886 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800794a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800794c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 f8b2 	bl	8007ab8 <SPI_EndRxTxTransaction>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d006      	beq.n	8007968 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2220      	movs	r2, #32
 8007964:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007966:	e010      	b.n	800798a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10b      	bne.n	8007988 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007970:	2300      	movs	r3, #0
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	617b      	str	r3, [r7, #20]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	617b      	str	r3, [r7, #20]
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	e000      	b.n	800798a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007988:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800799a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3730      	adds	r7, #48	; 0x30
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b088      	sub	sp, #32
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	603b      	str	r3, [r7, #0]
 80079b4:	4613      	mov	r3, r2
 80079b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079b8:	f7fc fabe 	bl	8003f38 <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c0:	1a9b      	subs	r3, r3, r2
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	4413      	add	r3, r2
 80079c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079c8:	f7fc fab6 	bl	8003f38 <HAL_GetTick>
 80079cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079ce:	4b39      	ldr	r3, [pc, #228]	; (8007ab4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	015b      	lsls	r3, r3, #5
 80079d4:	0d1b      	lsrs	r3, r3, #20
 80079d6:	69fa      	ldr	r2, [r7, #28]
 80079d8:	fb02 f303 	mul.w	r3, r2, r3
 80079dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079de:	e054      	b.n	8007a8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e6:	d050      	beq.n	8007a8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079e8:	f7fc faa6 	bl	8003f38 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	69fa      	ldr	r2, [r7, #28]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d902      	bls.n	80079fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d13d      	bne.n	8007a7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a16:	d111      	bne.n	8007a3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a20:	d004      	beq.n	8007a2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a2a:	d107      	bne.n	8007a3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a44:	d10f      	bne.n	8007a66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e017      	b.n	8007aaa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	3b01      	subs	r3, #1
 8007a88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	689a      	ldr	r2, [r3, #8]
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	4013      	ands	r3, r2
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	bf0c      	ite	eq
 8007a9a:	2301      	moveq	r3, #1
 8007a9c:	2300      	movne	r3, #0
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	79fb      	ldrb	r3, [r7, #7]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d19b      	bne.n	80079e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3720      	adds	r7, #32
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	2000059c 	.word	0x2000059c

08007ab8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b088      	sub	sp, #32
 8007abc:	af02      	add	r7, sp, #8
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ac4:	4b1b      	ldr	r3, [pc, #108]	; (8007b34 <SPI_EndRxTxTransaction+0x7c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a1b      	ldr	r2, [pc, #108]	; (8007b38 <SPI_EndRxTxTransaction+0x80>)
 8007aca:	fba2 2303 	umull	r2, r3, r2, r3
 8007ace:	0d5b      	lsrs	r3, r3, #21
 8007ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ad4:	fb02 f303 	mul.w	r3, r2, r3
 8007ad8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ae2:	d112      	bne.n	8007b0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2200      	movs	r2, #0
 8007aec:	2180      	movs	r1, #128	; 0x80
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f7ff ff5a 	bl	80079a8 <SPI_WaitFlagStateUntilTimeout>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d016      	beq.n	8007b28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007afe:	f043 0220 	orr.w	r2, r3, #32
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e00f      	b.n	8007b2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00a      	beq.n	8007b26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b20:	2b80      	cmp	r3, #128	; 0x80
 8007b22:	d0f2      	beq.n	8007b0a <SPI_EndRxTxTransaction+0x52>
 8007b24:	e000      	b.n	8007b28 <SPI_EndRxTxTransaction+0x70>
        break;
 8007b26:	bf00      	nop
  }

  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3718      	adds	r7, #24
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	2000059c 	.word	0x2000059c
 8007b38:	165e9f81 	.word	0x165e9f81

08007b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e041      	b.n	8007bd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d106      	bne.n	8007b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7fc f824 	bl	8003bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	3304      	adds	r3, #4
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4610      	mov	r0, r2
 8007b7c:	f000 fd3a 	bl	80085f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
	...

08007bdc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d001      	beq.n	8007bf4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e03c      	b.n	8007c6e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a1e      	ldr	r2, [pc, #120]	; (8007c7c <HAL_TIM_Base_Start+0xa0>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d018      	beq.n	8007c38 <HAL_TIM_Base_Start+0x5c>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c0e:	d013      	beq.n	8007c38 <HAL_TIM_Base_Start+0x5c>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a1a      	ldr	r2, [pc, #104]	; (8007c80 <HAL_TIM_Base_Start+0xa4>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d00e      	beq.n	8007c38 <HAL_TIM_Base_Start+0x5c>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a19      	ldr	r2, [pc, #100]	; (8007c84 <HAL_TIM_Base_Start+0xa8>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d009      	beq.n	8007c38 <HAL_TIM_Base_Start+0x5c>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a17      	ldr	r2, [pc, #92]	; (8007c88 <HAL_TIM_Base_Start+0xac>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d004      	beq.n	8007c38 <HAL_TIM_Base_Start+0x5c>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a16      	ldr	r2, [pc, #88]	; (8007c8c <HAL_TIM_Base_Start+0xb0>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d111      	bne.n	8007c5c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f003 0307 	and.w	r3, r3, #7
 8007c42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b06      	cmp	r3, #6
 8007c48:	d010      	beq.n	8007c6c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f042 0201 	orr.w	r2, r2, #1
 8007c58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c5a:	e007      	b.n	8007c6c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f042 0201 	orr.w	r2, r2, #1
 8007c6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	40010000 	.word	0x40010000
 8007c80:	40000400 	.word	0x40000400
 8007c84:	40000800 	.word	0x40000800
 8007c88:	40000c00 	.word	0x40000c00
 8007c8c:	40014000 	.word	0x40014000

08007c90 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6a1a      	ldr	r2, [r3, #32]
 8007c9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10f      	bne.n	8007cc8 <HAL_TIM_Base_Stop+0x38>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6a1a      	ldr	r2, [r3, #32]
 8007cae:	f240 4344 	movw	r3, #1092	; 0x444
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d107      	bne.n	8007cc8 <HAL_TIM_Base_Stop+0x38>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f022 0201 	bic.w	r2, r2, #1
 8007cc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
	...

08007ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d001      	beq.n	8007cf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e044      	b.n	8007d82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68da      	ldr	r2, [r3, #12]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f042 0201 	orr.w	r2, r2, #1
 8007d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a1e      	ldr	r2, [pc, #120]	; (8007d90 <HAL_TIM_Base_Start_IT+0xb0>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d018      	beq.n	8007d4c <HAL_TIM_Base_Start_IT+0x6c>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d22:	d013      	beq.n	8007d4c <HAL_TIM_Base_Start_IT+0x6c>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a1a      	ldr	r2, [pc, #104]	; (8007d94 <HAL_TIM_Base_Start_IT+0xb4>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d00e      	beq.n	8007d4c <HAL_TIM_Base_Start_IT+0x6c>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a19      	ldr	r2, [pc, #100]	; (8007d98 <HAL_TIM_Base_Start_IT+0xb8>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d009      	beq.n	8007d4c <HAL_TIM_Base_Start_IT+0x6c>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a17      	ldr	r2, [pc, #92]	; (8007d9c <HAL_TIM_Base_Start_IT+0xbc>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d004      	beq.n	8007d4c <HAL_TIM_Base_Start_IT+0x6c>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a16      	ldr	r2, [pc, #88]	; (8007da0 <HAL_TIM_Base_Start_IT+0xc0>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d111      	bne.n	8007d70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b06      	cmp	r3, #6
 8007d5c:	d010      	beq.n	8007d80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f042 0201 	orr.w	r2, r2, #1
 8007d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d6e:	e007      	b.n	8007d80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f042 0201 	orr.w	r2, r2, #1
 8007d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	40010000 	.word	0x40010000
 8007d94:	40000400 	.word	0x40000400
 8007d98:	40000800 	.word	0x40000800
 8007d9c:	40000c00 	.word	0x40000c00
 8007da0:	40014000 	.word	0x40014000

08007da4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e041      	b.n	8007e3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d106      	bne.n	8007dd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f839 	bl	8007e42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	3304      	adds	r3, #4
 8007de0:	4619      	mov	r1, r3
 8007de2:	4610      	mov	r0, r2
 8007de4:	f000 fc06 	bl	80085f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b083      	sub	sp, #12
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007e4a:	bf00      	nop
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
	...

08007e58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d109      	bne.n	8007e7c <HAL_TIM_PWM_Start+0x24>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	bf14      	ite	ne
 8007e74:	2301      	movne	r3, #1
 8007e76:	2300      	moveq	r3, #0
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	e022      	b.n	8007ec2 <HAL_TIM_PWM_Start+0x6a>
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	d109      	bne.n	8007e96 <HAL_TIM_PWM_Start+0x3e>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	bf14      	ite	ne
 8007e8e:	2301      	movne	r3, #1
 8007e90:	2300      	moveq	r3, #0
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	e015      	b.n	8007ec2 <HAL_TIM_PWM_Start+0x6a>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	2b08      	cmp	r3, #8
 8007e9a:	d109      	bne.n	8007eb0 <HAL_TIM_PWM_Start+0x58>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	bf14      	ite	ne
 8007ea8:	2301      	movne	r3, #1
 8007eaa:	2300      	moveq	r3, #0
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	e008      	b.n	8007ec2 <HAL_TIM_PWM_Start+0x6a>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	bf14      	ite	ne
 8007ebc:	2301      	movne	r3, #1
 8007ebe:	2300      	moveq	r3, #0
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e068      	b.n	8007f9c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d104      	bne.n	8007eda <HAL_TIM_PWM_Start+0x82>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ed8:	e013      	b.n	8007f02 <HAL_TIM_PWM_Start+0xaa>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b04      	cmp	r3, #4
 8007ede:	d104      	bne.n	8007eea <HAL_TIM_PWM_Start+0x92>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ee8:	e00b      	b.n	8007f02 <HAL_TIM_PWM_Start+0xaa>
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b08      	cmp	r3, #8
 8007eee:	d104      	bne.n	8007efa <HAL_TIM_PWM_Start+0xa2>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ef8:	e003      	b.n	8007f02 <HAL_TIM_PWM_Start+0xaa>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2202      	movs	r2, #2
 8007efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2201      	movs	r2, #1
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 fe18 	bl	8008b40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a23      	ldr	r2, [pc, #140]	; (8007fa4 <HAL_TIM_PWM_Start+0x14c>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d107      	bne.n	8007f2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a1d      	ldr	r2, [pc, #116]	; (8007fa4 <HAL_TIM_PWM_Start+0x14c>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d018      	beq.n	8007f66 <HAL_TIM_PWM_Start+0x10e>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f3c:	d013      	beq.n	8007f66 <HAL_TIM_PWM_Start+0x10e>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a19      	ldr	r2, [pc, #100]	; (8007fa8 <HAL_TIM_PWM_Start+0x150>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d00e      	beq.n	8007f66 <HAL_TIM_PWM_Start+0x10e>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a17      	ldr	r2, [pc, #92]	; (8007fac <HAL_TIM_PWM_Start+0x154>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d009      	beq.n	8007f66 <HAL_TIM_PWM_Start+0x10e>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a16      	ldr	r2, [pc, #88]	; (8007fb0 <HAL_TIM_PWM_Start+0x158>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d004      	beq.n	8007f66 <HAL_TIM_PWM_Start+0x10e>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a14      	ldr	r2, [pc, #80]	; (8007fb4 <HAL_TIM_PWM_Start+0x15c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d111      	bne.n	8007f8a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f003 0307 	and.w	r3, r3, #7
 8007f70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b06      	cmp	r3, #6
 8007f76:	d010      	beq.n	8007f9a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f042 0201 	orr.w	r2, r2, #1
 8007f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f88:	e007      	b.n	8007f9a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f042 0201 	orr.w	r2, r2, #1
 8007f98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	40010000 	.word	0x40010000
 8007fa8:	40000400 	.word	0x40000400
 8007fac:	40000800 	.word	0x40000800
 8007fb0:	40000c00 	.word	0x40000c00
 8007fb4:	40014000 	.word	0x40014000

08007fb8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 fdb8 	bl	8008b40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a29      	ldr	r2, [pc, #164]	; (800807c <HAL_TIM_PWM_Stop+0xc4>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d117      	bne.n	800800a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	6a1a      	ldr	r2, [r3, #32]
 8007fe0:	f241 1311 	movw	r3, #4369	; 0x1111
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10f      	bne.n	800800a <HAL_TIM_PWM_Stop+0x52>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6a1a      	ldr	r2, [r3, #32]
 8007ff0:	f240 4344 	movw	r3, #1092	; 0x444
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d107      	bne.n	800800a <HAL_TIM_PWM_Stop+0x52>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008008:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6a1a      	ldr	r2, [r3, #32]
 8008010:	f241 1311 	movw	r3, #4369	; 0x1111
 8008014:	4013      	ands	r3, r2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10f      	bne.n	800803a <HAL_TIM_PWM_Stop+0x82>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6a1a      	ldr	r2, [r3, #32]
 8008020:	f240 4344 	movw	r3, #1092	; 0x444
 8008024:	4013      	ands	r3, r2
 8008026:	2b00      	cmp	r3, #0
 8008028:	d107      	bne.n	800803a <HAL_TIM_PWM_Stop+0x82>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f022 0201 	bic.w	r2, r2, #1
 8008038:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d104      	bne.n	800804a <HAL_TIM_PWM_Stop+0x92>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008048:	e013      	b.n	8008072 <HAL_TIM_PWM_Stop+0xba>
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2b04      	cmp	r3, #4
 800804e:	d104      	bne.n	800805a <HAL_TIM_PWM_Stop+0xa2>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008058:	e00b      	b.n	8008072 <HAL_TIM_PWM_Stop+0xba>
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2b08      	cmp	r3, #8
 800805e:	d104      	bne.n	800806a <HAL_TIM_PWM_Stop+0xb2>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008068:	e003      	b.n	8008072 <HAL_TIM_PWM_Stop+0xba>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	40010000 	.word	0x40010000

08008080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b02      	cmp	r3, #2
 8008094:	d122      	bne.n	80080dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	f003 0302 	and.w	r3, r3, #2
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d11b      	bne.n	80080dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f06f 0202 	mvn.w	r2, #2
 80080ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	f003 0303 	and.w	r3, r3, #3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fa77 	bl	80085b6 <HAL_TIM_IC_CaptureCallback>
 80080c8:	e005      	b.n	80080d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fa69 	bl	80085a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fa7a 	bl	80085ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	f003 0304 	and.w	r3, r3, #4
 80080e6:	2b04      	cmp	r3, #4
 80080e8:	d122      	bne.n	8008130 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	f003 0304 	and.w	r3, r3, #4
 80080f4:	2b04      	cmp	r3, #4
 80080f6:	d11b      	bne.n	8008130 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f06f 0204 	mvn.w	r2, #4
 8008100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2202      	movs	r2, #2
 8008106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fa4d 	bl	80085b6 <HAL_TIM_IC_CaptureCallback>
 800811c:	e005      	b.n	800812a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fa3f 	bl	80085a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fa50 	bl	80085ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f003 0308 	and.w	r3, r3, #8
 800813a:	2b08      	cmp	r3, #8
 800813c:	d122      	bne.n	8008184 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f003 0308 	and.w	r3, r3, #8
 8008148:	2b08      	cmp	r3, #8
 800814a:	d11b      	bne.n	8008184 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f06f 0208 	mvn.w	r2, #8
 8008154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2204      	movs	r2, #4
 800815a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	f003 0303 	and.w	r3, r3, #3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fa23 	bl	80085b6 <HAL_TIM_IC_CaptureCallback>
 8008170:	e005      	b.n	800817e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fa15 	bl	80085a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fa26 	bl	80085ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	f003 0310 	and.w	r3, r3, #16
 800818e:	2b10      	cmp	r3, #16
 8008190:	d122      	bne.n	80081d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	f003 0310 	and.w	r3, r3, #16
 800819c:	2b10      	cmp	r3, #16
 800819e:	d11b      	bne.n	80081d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f06f 0210 	mvn.w	r2, #16
 80081a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2208      	movs	r2, #8
 80081ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f9f9 	bl	80085b6 <HAL_TIM_IC_CaptureCallback>
 80081c4:	e005      	b.n	80081d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f9eb 	bl	80085a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f9fc 	bl	80085ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	f003 0301 	and.w	r3, r3, #1
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d10e      	bne.n	8008204 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d107      	bne.n	8008204 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f06f 0201 	mvn.w	r2, #1
 80081fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7fb f8a2 	bl	8003348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800820e:	2b80      	cmp	r3, #128	; 0x80
 8008210:	d10e      	bne.n	8008230 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800821c:	2b80      	cmp	r3, #128	; 0x80
 800821e:	d107      	bne.n	8008230 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fd26 	bl	8008c7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823a:	2b40      	cmp	r3, #64	; 0x40
 800823c:	d10e      	bne.n	800825c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008248:	2b40      	cmp	r3, #64	; 0x40
 800824a:	d107      	bne.n	800825c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f9c1 	bl	80085de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	f003 0320 	and.w	r3, r3, #32
 8008266:	2b20      	cmp	r3, #32
 8008268:	d10e      	bne.n	8008288 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	f003 0320 	and.w	r3, r3, #32
 8008274:	2b20      	cmp	r3, #32
 8008276:	d107      	bne.n	8008288 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f06f 0220 	mvn.w	r2, #32
 8008280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fcf0 	bl	8008c68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008288:	bf00      	nop
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d101      	bne.n	80082ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082aa:	2302      	movs	r3, #2
 80082ac:	e0ae      	b.n	800840c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2b0c      	cmp	r3, #12
 80082ba:	f200 809f 	bhi.w	80083fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80082be:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082f9 	.word	0x080082f9
 80082c8:	080083fd 	.word	0x080083fd
 80082cc:	080083fd 	.word	0x080083fd
 80082d0:	080083fd 	.word	0x080083fd
 80082d4:	08008339 	.word	0x08008339
 80082d8:	080083fd 	.word	0x080083fd
 80082dc:	080083fd 	.word	0x080083fd
 80082e0:	080083fd 	.word	0x080083fd
 80082e4:	0800837b 	.word	0x0800837b
 80082e8:	080083fd 	.word	0x080083fd
 80082ec:	080083fd 	.word	0x080083fd
 80082f0:	080083fd 	.word	0x080083fd
 80082f4:	080083bb 	.word	0x080083bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68b9      	ldr	r1, [r7, #8]
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 f9f8 	bl	80086f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699a      	ldr	r2, [r3, #24]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f042 0208 	orr.w	r2, r2, #8
 8008312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	699a      	ldr	r2, [r3, #24]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 0204 	bic.w	r2, r2, #4
 8008322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6999      	ldr	r1, [r3, #24]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	691a      	ldr	r2, [r3, #16]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	619a      	str	r2, [r3, #24]
      break;
 8008336:	e064      	b.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68b9      	ldr	r1, [r7, #8]
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fa3e 	bl	80087c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699a      	ldr	r2, [r3, #24]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	699a      	ldr	r2, [r3, #24]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6999      	ldr	r1, [r3, #24]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	021a      	lsls	r2, r3, #8
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	619a      	str	r2, [r3, #24]
      break;
 8008378:	e043      	b.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68b9      	ldr	r1, [r7, #8]
 8008380:	4618      	mov	r0, r3
 8008382:	f000 fa89 	bl	8008898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69da      	ldr	r2, [r3, #28]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f042 0208 	orr.w	r2, r2, #8
 8008394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	69da      	ldr	r2, [r3, #28]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0204 	bic.w	r2, r2, #4
 80083a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	69d9      	ldr	r1, [r3, #28]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	691a      	ldr	r2, [r3, #16]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	430a      	orrs	r2, r1
 80083b6:	61da      	str	r2, [r3, #28]
      break;
 80083b8:	e023      	b.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68b9      	ldr	r1, [r7, #8]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 fad3 	bl	800896c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69da      	ldr	r2, [r3, #28]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69da      	ldr	r2, [r3, #28]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	69d9      	ldr	r1, [r3, #28]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	021a      	lsls	r2, r3, #8
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	61da      	str	r2, [r3, #28]
      break;
 80083fa:	e002      	b.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008400:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800840a:	7dfb      	ldrb	r3, [r7, #23]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3718      	adds	r7, #24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008428:	2b01      	cmp	r3, #1
 800842a:	d101      	bne.n	8008430 <HAL_TIM_ConfigClockSource+0x1c>
 800842c:	2302      	movs	r3, #2
 800842e:	e0b4      	b.n	800859a <HAL_TIM_ConfigClockSource+0x186>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800844e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008468:	d03e      	beq.n	80084e8 <HAL_TIM_ConfigClockSource+0xd4>
 800846a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800846e:	f200 8087 	bhi.w	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008476:	f000 8086 	beq.w	8008586 <HAL_TIM_ConfigClockSource+0x172>
 800847a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800847e:	d87f      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008480:	2b70      	cmp	r3, #112	; 0x70
 8008482:	d01a      	beq.n	80084ba <HAL_TIM_ConfigClockSource+0xa6>
 8008484:	2b70      	cmp	r3, #112	; 0x70
 8008486:	d87b      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008488:	2b60      	cmp	r3, #96	; 0x60
 800848a:	d050      	beq.n	800852e <HAL_TIM_ConfigClockSource+0x11a>
 800848c:	2b60      	cmp	r3, #96	; 0x60
 800848e:	d877      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008490:	2b50      	cmp	r3, #80	; 0x50
 8008492:	d03c      	beq.n	800850e <HAL_TIM_ConfigClockSource+0xfa>
 8008494:	2b50      	cmp	r3, #80	; 0x50
 8008496:	d873      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 8008498:	2b40      	cmp	r3, #64	; 0x40
 800849a:	d058      	beq.n	800854e <HAL_TIM_ConfigClockSource+0x13a>
 800849c:	2b40      	cmp	r3, #64	; 0x40
 800849e:	d86f      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 80084a0:	2b30      	cmp	r3, #48	; 0x30
 80084a2:	d064      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x15a>
 80084a4:	2b30      	cmp	r3, #48	; 0x30
 80084a6:	d86b      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 80084a8:	2b20      	cmp	r3, #32
 80084aa:	d060      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x15a>
 80084ac:	2b20      	cmp	r3, #32
 80084ae:	d867      	bhi.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d05c      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x15a>
 80084b4:	2b10      	cmp	r3, #16
 80084b6:	d05a      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x15a>
 80084b8:	e062      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6818      	ldr	r0, [r3, #0]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	6899      	ldr	r1, [r3, #8]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	685a      	ldr	r2, [r3, #4]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	f000 fb19 	bl	8008b00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	609a      	str	r2, [r3, #8]
      break;
 80084e6:	e04f      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6818      	ldr	r0, [r3, #0]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	6899      	ldr	r1, [r3, #8]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	f000 fb02 	bl	8008b00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689a      	ldr	r2, [r3, #8]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800850a:	609a      	str	r2, [r3, #8]
      break;
 800850c:	e03c      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	6859      	ldr	r1, [r3, #4]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	461a      	mov	r2, r3
 800851c:	f000 fa76 	bl	8008a0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2150      	movs	r1, #80	; 0x50
 8008526:	4618      	mov	r0, r3
 8008528:	f000 facf 	bl	8008aca <TIM_ITRx_SetConfig>
      break;
 800852c:	e02c      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6818      	ldr	r0, [r3, #0]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	6859      	ldr	r1, [r3, #4]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	461a      	mov	r2, r3
 800853c:	f000 fa95 	bl	8008a6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2160      	movs	r1, #96	; 0x60
 8008546:	4618      	mov	r0, r3
 8008548:	f000 fabf 	bl	8008aca <TIM_ITRx_SetConfig>
      break;
 800854c:	e01c      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6818      	ldr	r0, [r3, #0]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	6859      	ldr	r1, [r3, #4]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	461a      	mov	r2, r3
 800855c:	f000 fa56 	bl	8008a0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2140      	movs	r1, #64	; 0x40
 8008566:	4618      	mov	r0, r3
 8008568:	f000 faaf 	bl	8008aca <TIM_ITRx_SetConfig>
      break;
 800856c:	e00c      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4619      	mov	r1, r3
 8008578:	4610      	mov	r0, r2
 800857a:	f000 faa6 	bl	8008aca <TIM_ITRx_SetConfig>
      break;
 800857e:	e003      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	73fb      	strb	r3, [r7, #15]
      break;
 8008584:	e000      	b.n	8008588 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008598:	7bfb      	ldrb	r3, [r7, #15]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085aa:	bf00      	nop
 80085ac:	370c      	adds	r7, #12
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085be:	bf00      	nop
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085d2:	bf00      	nop
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085de:	b480      	push	{r7}
 80085e0:	b083      	sub	sp, #12
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085e6:	bf00      	nop
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
	...

080085f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a34      	ldr	r2, [pc, #208]	; (80086d8 <TIM_Base_SetConfig+0xe4>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d00f      	beq.n	800862c <TIM_Base_SetConfig+0x38>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008612:	d00b      	beq.n	800862c <TIM_Base_SetConfig+0x38>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a31      	ldr	r2, [pc, #196]	; (80086dc <TIM_Base_SetConfig+0xe8>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d007      	beq.n	800862c <TIM_Base_SetConfig+0x38>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a30      	ldr	r2, [pc, #192]	; (80086e0 <TIM_Base_SetConfig+0xec>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d003      	beq.n	800862c <TIM_Base_SetConfig+0x38>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a2f      	ldr	r2, [pc, #188]	; (80086e4 <TIM_Base_SetConfig+0xf0>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d108      	bne.n	800863e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	4313      	orrs	r3, r2
 800863c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a25      	ldr	r2, [pc, #148]	; (80086d8 <TIM_Base_SetConfig+0xe4>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d01b      	beq.n	800867e <TIM_Base_SetConfig+0x8a>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800864c:	d017      	beq.n	800867e <TIM_Base_SetConfig+0x8a>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a22      	ldr	r2, [pc, #136]	; (80086dc <TIM_Base_SetConfig+0xe8>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d013      	beq.n	800867e <TIM_Base_SetConfig+0x8a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a21      	ldr	r2, [pc, #132]	; (80086e0 <TIM_Base_SetConfig+0xec>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d00f      	beq.n	800867e <TIM_Base_SetConfig+0x8a>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a20      	ldr	r2, [pc, #128]	; (80086e4 <TIM_Base_SetConfig+0xf0>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d00b      	beq.n	800867e <TIM_Base_SetConfig+0x8a>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a1f      	ldr	r2, [pc, #124]	; (80086e8 <TIM_Base_SetConfig+0xf4>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d007      	beq.n	800867e <TIM_Base_SetConfig+0x8a>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a1e      	ldr	r2, [pc, #120]	; (80086ec <TIM_Base_SetConfig+0xf8>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d003      	beq.n	800867e <TIM_Base_SetConfig+0x8a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a1d      	ldr	r2, [pc, #116]	; (80086f0 <TIM_Base_SetConfig+0xfc>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d108      	bne.n	8008690 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	4313      	orrs	r3, r2
 800868e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	4313      	orrs	r3, r2
 800869c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	689a      	ldr	r2, [r3, #8]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a08      	ldr	r2, [pc, #32]	; (80086d8 <TIM_Base_SetConfig+0xe4>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d103      	bne.n	80086c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	691a      	ldr	r2, [r3, #16]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	615a      	str	r2, [r3, #20]
}
 80086ca:	bf00      	nop
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	40010000 	.word	0x40010000
 80086dc:	40000400 	.word	0x40000400
 80086e0:	40000800 	.word	0x40000800
 80086e4:	40000c00 	.word	0x40000c00
 80086e8:	40014000 	.word	0x40014000
 80086ec:	40014400 	.word	0x40014400
 80086f0:	40014800 	.word	0x40014800

080086f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b087      	sub	sp, #28
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	f023 0201 	bic.w	r2, r3, #1
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f023 0303 	bic.w	r3, r3, #3
 800872a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	4313      	orrs	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f023 0302 	bic.w	r3, r3, #2
 800873c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	4313      	orrs	r3, r2
 8008746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a1c      	ldr	r2, [pc, #112]	; (80087bc <TIM_OC1_SetConfig+0xc8>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d10c      	bne.n	800876a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f023 0308 	bic.w	r3, r3, #8
 8008756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	4313      	orrs	r3, r2
 8008760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f023 0304 	bic.w	r3, r3, #4
 8008768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a13      	ldr	r2, [pc, #76]	; (80087bc <TIM_OC1_SetConfig+0xc8>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d111      	bne.n	8008796 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	4313      	orrs	r3, r2
 800878a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	4313      	orrs	r3, r2
 8008794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	621a      	str	r2, [r3, #32]
}
 80087b0:	bf00      	nop
 80087b2:	371c      	adds	r7, #28
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr
 80087bc:	40010000 	.word	0x40010000

080087c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b087      	sub	sp, #28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	f023 0210 	bic.w	r2, r3, #16
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	021b      	lsls	r3, r3, #8
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	4313      	orrs	r3, r2
 8008802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	f023 0320 	bic.w	r3, r3, #32
 800880a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	011b      	lsls	r3, r3, #4
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	4313      	orrs	r3, r2
 8008816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a1e      	ldr	r2, [pc, #120]	; (8008894 <TIM_OC2_SetConfig+0xd4>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d10d      	bne.n	800883c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	011b      	lsls	r3, r3, #4
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	4313      	orrs	r3, r2
 8008832:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800883a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a15      	ldr	r2, [pc, #84]	; (8008894 <TIM_OC2_SetConfig+0xd4>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d113      	bne.n	800886c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800884a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	695b      	ldr	r3, [r3, #20]
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	4313      	orrs	r3, r2
 800885e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	4313      	orrs	r3, r2
 800886a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	685a      	ldr	r2, [r3, #4]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	621a      	str	r2, [r3, #32]
}
 8008886:	bf00      	nop
 8008888:	371c      	adds	r7, #28
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	40010000 	.word	0x40010000

08008898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f023 0303 	bic.w	r3, r3, #3
 80088ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	021b      	lsls	r3, r3, #8
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a1d      	ldr	r2, [pc, #116]	; (8008968 <TIM_OC3_SetConfig+0xd0>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d10d      	bne.n	8008912 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	021b      	lsls	r3, r3, #8
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	4313      	orrs	r3, r2
 8008908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a14      	ldr	r2, [pc, #80]	; (8008968 <TIM_OC3_SetConfig+0xd0>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d113      	bne.n	8008942 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	011b      	lsls	r3, r3, #4
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	4313      	orrs	r3, r2
 8008934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	011b      	lsls	r3, r3, #4
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	4313      	orrs	r3, r2
 8008940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	685a      	ldr	r2, [r3, #4]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	621a      	str	r2, [r3, #32]
}
 800895c:	bf00      	nop
 800895e:	371c      	adds	r7, #28
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr
 8008968:	40010000 	.word	0x40010000

0800896c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	69db      	ldr	r3, [r3, #28]
 8008992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800899a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	021b      	lsls	r3, r3, #8
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	031b      	lsls	r3, r3, #12
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a10      	ldr	r2, [pc, #64]	; (8008a08 <TIM_OC4_SetConfig+0x9c>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d109      	bne.n	80089e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	019b      	lsls	r3, r3, #6
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	4313      	orrs	r3, r2
 80089de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	621a      	str	r2, [r3, #32]
}
 80089fa:	bf00      	nop
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	40010000 	.word	0x40010000

08008a0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b087      	sub	sp, #28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6a1b      	ldr	r3, [r3, #32]
 8008a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	f023 0201 	bic.w	r2, r3, #1
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	011b      	lsls	r3, r3, #4
 8008a3c:	693a      	ldr	r2, [r7, #16]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	f023 030a 	bic.w	r3, r3, #10
 8008a48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	693a      	ldr	r2, [r7, #16]
 8008a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	621a      	str	r2, [r3, #32]
}
 8008a5e:	bf00      	nop
 8008a60:	371c      	adds	r7, #28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b087      	sub	sp, #28
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	60f8      	str	r0, [r7, #12]
 8008a72:	60b9      	str	r1, [r7, #8]
 8008a74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	f023 0210 	bic.w	r2, r3, #16
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	031b      	lsls	r3, r3, #12
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008aa6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	011b      	lsls	r3, r3, #4
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	697a      	ldr	r2, [r7, #20]
 8008ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	621a      	str	r2, [r3, #32]
}
 8008abe:	bf00      	nop
 8008ac0:	371c      	adds	r7, #28
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b085      	sub	sp, #20
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	f043 0307 	orr.w	r3, r3, #7
 8008aec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	609a      	str	r2, [r3, #8]
}
 8008af4:	bf00      	nop
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
 8008b0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	021a      	lsls	r2, r3, #8
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	431a      	orrs	r2, r3
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	697a      	ldr	r2, [r7, #20]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	609a      	str	r2, [r3, #8]
}
 8008b34:	bf00      	nop
 8008b36:	371c      	adds	r7, #28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b087      	sub	sp, #28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	f003 031f 	and.w	r3, r3, #31
 8008b52:	2201      	movs	r2, #1
 8008b54:	fa02 f303 	lsl.w	r3, r2, r3
 8008b58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6a1a      	ldr	r2, [r3, #32]
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	43db      	mvns	r3, r3
 8008b62:	401a      	ands	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6a1a      	ldr	r2, [r3, #32]
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	f003 031f 	and.w	r3, r3, #31
 8008b72:	6879      	ldr	r1, [r7, #4]
 8008b74:	fa01 f303 	lsl.w	r3, r1, r3
 8008b78:	431a      	orrs	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	621a      	str	r2, [r3, #32]
}
 8008b7e:	bf00      	nop
 8008b80:	371c      	adds	r7, #28
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
	...

08008b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d101      	bne.n	8008ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	e050      	b.n	8008c46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a1c      	ldr	r2, [pc, #112]	; (8008c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d018      	beq.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bf0:	d013      	beq.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a18      	ldr	r2, [pc, #96]	; (8008c58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d00e      	beq.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a16      	ldr	r2, [pc, #88]	; (8008c5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d009      	beq.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a15      	ldr	r2, [pc, #84]	; (8008c60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d004      	beq.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a13      	ldr	r2, [pc, #76]	; (8008c64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d10c      	bne.n	8008c34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	40010000 	.word	0x40010000
 8008c58:	40000400 	.word	0x40000400
 8008c5c:	40000800 	.word	0x40000800
 8008c60:	40000c00 	.word	0x40000c00
 8008c64:	40014000 	.word	0x40014000

08008c68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c90:	b084      	sub	sp, #16
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b084      	sub	sp, #16
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	f107 001c 	add.w	r0, r7, #28
 8008c9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d122      	bne.n	8008cee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d105      	bne.n	8008ce2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f001 fbee 	bl	800a4c4 <USB_CoreReset>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	73fb      	strb	r3, [r7, #15]
 8008cec:	e01a      	b.n	8008d24 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f001 fbe2 	bl	800a4c4 <USB_CoreReset>
 8008d00:	4603      	mov	r3, r0
 8008d02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d106      	bne.n	8008d18 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	639a      	str	r2, [r3, #56]	; 0x38
 8008d16:	e005      	b.n	8008d24 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d10b      	bne.n	8008d42 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f043 0206 	orr.w	r2, r3, #6
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f043 0220 	orr.w	r2, r3, #32
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d4e:	b004      	add	sp, #16
 8008d50:	4770      	bx	lr
	...

08008d54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b087      	sub	sp, #28
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008d62:	79fb      	ldrb	r3, [r7, #7]
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d165      	bne.n	8008e34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	4a41      	ldr	r2, [pc, #260]	; (8008e70 <USB_SetTurnaroundTime+0x11c>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d906      	bls.n	8008d7e <USB_SetTurnaroundTime+0x2a>
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	4a40      	ldr	r2, [pc, #256]	; (8008e74 <USB_SetTurnaroundTime+0x120>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d202      	bcs.n	8008d7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008d78:	230f      	movs	r3, #15
 8008d7a:	617b      	str	r3, [r7, #20]
 8008d7c:	e062      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	4a3c      	ldr	r2, [pc, #240]	; (8008e74 <USB_SetTurnaroundTime+0x120>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d306      	bcc.n	8008d94 <USB_SetTurnaroundTime+0x40>
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	4a3b      	ldr	r2, [pc, #236]	; (8008e78 <USB_SetTurnaroundTime+0x124>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d202      	bcs.n	8008d94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008d8e:	230e      	movs	r3, #14
 8008d90:	617b      	str	r3, [r7, #20]
 8008d92:	e057      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	4a38      	ldr	r2, [pc, #224]	; (8008e78 <USB_SetTurnaroundTime+0x124>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d306      	bcc.n	8008daa <USB_SetTurnaroundTime+0x56>
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	4a37      	ldr	r2, [pc, #220]	; (8008e7c <USB_SetTurnaroundTime+0x128>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d202      	bcs.n	8008daa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008da4:	230d      	movs	r3, #13
 8008da6:	617b      	str	r3, [r7, #20]
 8008da8:	e04c      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	4a33      	ldr	r2, [pc, #204]	; (8008e7c <USB_SetTurnaroundTime+0x128>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d306      	bcc.n	8008dc0 <USB_SetTurnaroundTime+0x6c>
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	4a32      	ldr	r2, [pc, #200]	; (8008e80 <USB_SetTurnaroundTime+0x12c>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d802      	bhi.n	8008dc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008dba:	230c      	movs	r3, #12
 8008dbc:	617b      	str	r3, [r7, #20]
 8008dbe:	e041      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	4a2f      	ldr	r2, [pc, #188]	; (8008e80 <USB_SetTurnaroundTime+0x12c>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d906      	bls.n	8008dd6 <USB_SetTurnaroundTime+0x82>
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	4a2e      	ldr	r2, [pc, #184]	; (8008e84 <USB_SetTurnaroundTime+0x130>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d802      	bhi.n	8008dd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008dd0:	230b      	movs	r3, #11
 8008dd2:	617b      	str	r3, [r7, #20]
 8008dd4:	e036      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	4a2a      	ldr	r2, [pc, #168]	; (8008e84 <USB_SetTurnaroundTime+0x130>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d906      	bls.n	8008dec <USB_SetTurnaroundTime+0x98>
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	4a29      	ldr	r2, [pc, #164]	; (8008e88 <USB_SetTurnaroundTime+0x134>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d802      	bhi.n	8008dec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008de6:	230a      	movs	r3, #10
 8008de8:	617b      	str	r3, [r7, #20]
 8008dea:	e02b      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	4a26      	ldr	r2, [pc, #152]	; (8008e88 <USB_SetTurnaroundTime+0x134>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d906      	bls.n	8008e02 <USB_SetTurnaroundTime+0xae>
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	4a25      	ldr	r2, [pc, #148]	; (8008e8c <USB_SetTurnaroundTime+0x138>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d202      	bcs.n	8008e02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008dfc:	2309      	movs	r3, #9
 8008dfe:	617b      	str	r3, [r7, #20]
 8008e00:	e020      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	4a21      	ldr	r2, [pc, #132]	; (8008e8c <USB_SetTurnaroundTime+0x138>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d306      	bcc.n	8008e18 <USB_SetTurnaroundTime+0xc4>
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	4a20      	ldr	r2, [pc, #128]	; (8008e90 <USB_SetTurnaroundTime+0x13c>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d802      	bhi.n	8008e18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008e12:	2308      	movs	r3, #8
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	e015      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	4a1d      	ldr	r2, [pc, #116]	; (8008e90 <USB_SetTurnaroundTime+0x13c>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d906      	bls.n	8008e2e <USB_SetTurnaroundTime+0xda>
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	4a1c      	ldr	r2, [pc, #112]	; (8008e94 <USB_SetTurnaroundTime+0x140>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d202      	bcs.n	8008e2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008e28:	2307      	movs	r3, #7
 8008e2a:	617b      	str	r3, [r7, #20]
 8008e2c:	e00a      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008e2e:	2306      	movs	r3, #6
 8008e30:	617b      	str	r3, [r7, #20]
 8008e32:	e007      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008e34:	79fb      	ldrb	r3, [r7, #7]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d102      	bne.n	8008e40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008e3a:	2309      	movs	r3, #9
 8008e3c:	617b      	str	r3, [r7, #20]
 8008e3e:	e001      	b.n	8008e44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008e40:	2309      	movs	r3, #9
 8008e42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	68da      	ldr	r2, [r3, #12]
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	029b      	lsls	r3, r3, #10
 8008e58:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008e5c:	431a      	orrs	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	371c      	adds	r7, #28
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr
 8008e70:	00d8acbf 	.word	0x00d8acbf
 8008e74:	00e4e1c0 	.word	0x00e4e1c0
 8008e78:	00f42400 	.word	0x00f42400
 8008e7c:	01067380 	.word	0x01067380
 8008e80:	011a499f 	.word	0x011a499f
 8008e84:	01312cff 	.word	0x01312cff
 8008e88:	014ca43f 	.word	0x014ca43f
 8008e8c:	016e3600 	.word	0x016e3600
 8008e90:	01a6ab1f 	.word	0x01a6ab1f
 8008e94:	01e84800 	.word	0x01e84800

08008e98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	f043 0201 	orr.w	r2, r3, #1
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b083      	sub	sp, #12
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	f023 0201 	bic.w	r2, r3, #1
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ef8:	78fb      	ldrb	r3, [r7, #3]
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d115      	bne.n	8008f2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f0a:	2001      	movs	r0, #1
 8008f0c:	f7fb f820 	bl	8003f50 <HAL_Delay>
      ms++;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	3301      	adds	r3, #1
 8008f14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f001 fa45 	bl	800a3a6 <USB_GetMode>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d01e      	beq.n	8008f60 <USB_SetCurrentMode+0x84>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b31      	cmp	r3, #49	; 0x31
 8008f26:	d9f0      	bls.n	8008f0a <USB_SetCurrentMode+0x2e>
 8008f28:	e01a      	b.n	8008f60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f2a:	78fb      	ldrb	r3, [r7, #3]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d115      	bne.n	8008f5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f3c:	2001      	movs	r0, #1
 8008f3e:	f7fb f807 	bl	8003f50 <HAL_Delay>
      ms++;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3301      	adds	r3, #1
 8008f46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f001 fa2c 	bl	800a3a6 <USB_GetMode>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d005      	beq.n	8008f60 <USB_SetCurrentMode+0x84>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b31      	cmp	r3, #49	; 0x31
 8008f58:	d9f0      	bls.n	8008f3c <USB_SetCurrentMode+0x60>
 8008f5a:	e001      	b.n	8008f60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e005      	b.n	8008f6c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2b32      	cmp	r3, #50	; 0x32
 8008f64:	d101      	bne.n	8008f6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e000      	b.n	8008f6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f74:	b084      	sub	sp, #16
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b086      	sub	sp, #24
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008f8e:	2300      	movs	r3, #0
 8008f90:	613b      	str	r3, [r7, #16]
 8008f92:	e009      	b.n	8008fa8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	3340      	adds	r3, #64	; 0x40
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4413      	add	r3, r2
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	613b      	str	r3, [r7, #16]
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	2b0e      	cmp	r3, #14
 8008fac:	d9f2      	bls.n	8008f94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d11c      	bne.n	8008fee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fc2:	f043 0302 	orr.w	r3, r3, #2
 8008fc6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fcc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	639a      	str	r2, [r3, #56]	; 0x38
 8008fec:	e00b      	b.n	8009006 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800900c:	461a      	mov	r2, r3
 800900e:	2300      	movs	r3, #0
 8009010:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009018:	4619      	mov	r1, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009020:	461a      	mov	r2, r3
 8009022:	680b      	ldr	r3, [r1, #0]
 8009024:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009028:	2b01      	cmp	r3, #1
 800902a:	d10c      	bne.n	8009046 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800902c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902e:	2b00      	cmp	r3, #0
 8009030:	d104      	bne.n	800903c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009032:	2100      	movs	r1, #0
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 f965 	bl	8009304 <USB_SetDevSpeed>
 800903a:	e008      	b.n	800904e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800903c:	2101      	movs	r1, #1
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f960 	bl	8009304 <USB_SetDevSpeed>
 8009044:	e003      	b.n	800904e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009046:	2103      	movs	r1, #3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 f95b 	bl	8009304 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800904e:	2110      	movs	r1, #16
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f8f3 	bl	800923c <USB_FlushTxFifo>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d001      	beq.n	8009060 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f91f 	bl	80092a4 <USB_FlushRxFifo>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009076:	461a      	mov	r2, r3
 8009078:	2300      	movs	r3, #0
 800907a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009082:	461a      	mov	r2, r3
 8009084:	2300      	movs	r3, #0
 8009086:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800908e:	461a      	mov	r2, r3
 8009090:	2300      	movs	r3, #0
 8009092:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009094:	2300      	movs	r3, #0
 8009096:	613b      	str	r3, [r7, #16]
 8009098:	e043      	b.n	8009122 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	015a      	lsls	r2, r3, #5
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	4413      	add	r3, r2
 80090a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090b0:	d118      	bne.n	80090e4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10a      	bne.n	80090ce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c4:	461a      	mov	r2, r3
 80090c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	e013      	b.n	80090f6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090da:	461a      	mov	r2, r3
 80090dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80090e0:	6013      	str	r3, [r2, #0]
 80090e2:	e008      	b.n	80090f6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f0:	461a      	mov	r2, r3
 80090f2:	2300      	movs	r3, #0
 80090f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	015a      	lsls	r2, r3, #5
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	4413      	add	r3, r2
 80090fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009102:	461a      	mov	r2, r3
 8009104:	2300      	movs	r3, #0
 8009106:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	4413      	add	r3, r2
 8009110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009114:	461a      	mov	r2, r3
 8009116:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800911a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	3301      	adds	r3, #1
 8009120:	613b      	str	r3, [r7, #16]
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	429a      	cmp	r2, r3
 8009128:	d3b7      	bcc.n	800909a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800912a:	2300      	movs	r3, #0
 800912c:	613b      	str	r3, [r7, #16]
 800912e:	e043      	b.n	80091b8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	4413      	add	r3, r2
 8009138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009142:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009146:	d118      	bne.n	800917a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10a      	bne.n	8009164 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	4413      	add	r3, r2
 8009156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915a:	461a      	mov	r2, r3
 800915c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009160:	6013      	str	r3, [r2, #0]
 8009162:	e013      	b.n	800918c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009170:	461a      	mov	r2, r3
 8009172:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009176:	6013      	str	r3, [r2, #0]
 8009178:	e008      	b.n	800918c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	015a      	lsls	r2, r3, #5
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	4413      	add	r3, r2
 8009182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009186:	461a      	mov	r2, r3
 8009188:	2300      	movs	r3, #0
 800918a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	015a      	lsls	r2, r3, #5
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	4413      	add	r3, r2
 8009194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009198:	461a      	mov	r2, r3
 800919a:	2300      	movs	r3, #0
 800919c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	015a      	lsls	r2, r3, #5
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091aa:	461a      	mov	r2, r3
 80091ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	3301      	adds	r3, #1
 80091b6:	613b      	str	r3, [r7, #16]
 80091b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d3b7      	bcc.n	8009130 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80091e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80091e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d105      	bne.n	80091f4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	f043 0210 	orr.w	r2, r3, #16
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	699a      	ldr	r2, [r3, #24]
 80091f8:	4b0f      	ldr	r3, [pc, #60]	; (8009238 <USB_DevInit+0x2c4>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009202:	2b00      	cmp	r3, #0
 8009204:	d005      	beq.n	8009212 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	699b      	ldr	r3, [r3, #24]
 800920a:	f043 0208 	orr.w	r2, r3, #8
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009214:	2b01      	cmp	r3, #1
 8009216:	d107      	bne.n	8009228 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	699b      	ldr	r3, [r3, #24]
 800921c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009220:	f043 0304 	orr.w	r3, r3, #4
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009228:	7dfb      	ldrb	r3, [r7, #23]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009234:	b004      	add	sp, #16
 8009236:	4770      	bx	lr
 8009238:	803c3800 	.word	0x803c3800

0800923c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009246:	2300      	movs	r3, #0
 8009248:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	3301      	adds	r3, #1
 800924e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4a13      	ldr	r2, [pc, #76]	; (80092a0 <USB_FlushTxFifo+0x64>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d901      	bls.n	800925c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009258:	2303      	movs	r3, #3
 800925a:	e01b      	b.n	8009294 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	daf2      	bge.n	800924a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009264:	2300      	movs	r3, #0
 8009266:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	019b      	lsls	r3, r3, #6
 800926c:	f043 0220 	orr.w	r2, r3, #32
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	3301      	adds	r3, #1
 8009278:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	4a08      	ldr	r2, [pc, #32]	; (80092a0 <USB_FlushTxFifo+0x64>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d901      	bls.n	8009286 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009282:	2303      	movs	r3, #3
 8009284:	e006      	b.n	8009294 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	f003 0320 	and.w	r3, r3, #32
 800928e:	2b20      	cmp	r3, #32
 8009290:	d0f0      	beq.n	8009274 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	00030d40 	.word	0x00030d40

080092a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092ac:	2300      	movs	r3, #0
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3301      	adds	r3, #1
 80092b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	4a11      	ldr	r2, [pc, #68]	; (8009300 <USB_FlushRxFifo+0x5c>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d901      	bls.n	80092c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e018      	b.n	80092f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	daf2      	bge.n	80092b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80092ca:	2300      	movs	r3, #0
 80092cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2210      	movs	r2, #16
 80092d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	3301      	adds	r3, #1
 80092d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	4a08      	ldr	r2, [pc, #32]	; (8009300 <USB_FlushRxFifo+0x5c>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d901      	bls.n	80092e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80092e2:	2303      	movs	r3, #3
 80092e4:	e006      	b.n	80092f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	f003 0310 	and.w	r3, r3, #16
 80092ee:	2b10      	cmp	r3, #16
 80092f0:	d0f0      	beq.n	80092d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	00030d40 	.word	0x00030d40

08009304 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	460b      	mov	r3, r1
 800930e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	78fb      	ldrb	r3, [r7, #3]
 800931e:	68f9      	ldr	r1, [r7, #12]
 8009320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009324:	4313      	orrs	r3, r2
 8009326:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009336:	b480      	push	{r7}
 8009338:	b087      	sub	sp, #28
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	f003 0306 	and.w	r3, r3, #6
 800934e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d102      	bne.n	800935c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009356:	2300      	movs	r3, #0
 8009358:	75fb      	strb	r3, [r7, #23]
 800935a:	e00a      	b.n	8009372 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2b02      	cmp	r3, #2
 8009360:	d002      	beq.n	8009368 <USB_GetDevSpeed+0x32>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b06      	cmp	r3, #6
 8009366:	d102      	bne.n	800936e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009368:	2302      	movs	r3, #2
 800936a:	75fb      	strb	r3, [r7, #23]
 800936c:	e001      	b.n	8009372 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800936e:	230f      	movs	r3, #15
 8009370:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009372:	7dfb      	ldrb	r3, [r7, #23]
}
 8009374:	4618      	mov	r0, r3
 8009376:	371c      	adds	r7, #28
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	785b      	ldrb	r3, [r3, #1]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d13a      	bne.n	8009412 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a2:	69da      	ldr	r2, [r3, #28]
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	f003 030f 	and.w	r3, r3, #15
 80093ac:	2101      	movs	r1, #1
 80093ae:	fa01 f303 	lsl.w	r3, r1, r3
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	68f9      	ldr	r1, [r7, #12]
 80093b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093ba:	4313      	orrs	r3, r2
 80093bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	015a      	lsls	r2, r3, #5
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d155      	bne.n	8009480 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	791b      	ldrb	r3, [r3, #4]
 80093ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80093f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	059b      	lsls	r3, r3, #22
 80093f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80093f8:	4313      	orrs	r3, r2
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	0151      	lsls	r1, r2, #5
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	440a      	add	r2, r1
 8009402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800940a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800940e:	6013      	str	r3, [r2, #0]
 8009410:	e036      	b.n	8009480 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009418:	69da      	ldr	r2, [r3, #28]
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	f003 030f 	and.w	r3, r3, #15
 8009422:	2101      	movs	r1, #1
 8009424:	fa01 f303 	lsl.w	r3, r1, r3
 8009428:	041b      	lsls	r3, r3, #16
 800942a:	68f9      	ldr	r1, [r7, #12]
 800942c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009430:	4313      	orrs	r3, r2
 8009432:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	015a      	lsls	r2, r3, #5
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	4413      	add	r3, r2
 800943c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d11a      	bne.n	8009480 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	4413      	add	r3, r2
 8009452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	791b      	ldrb	r3, [r3, #4]
 8009464:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009466:	430b      	orrs	r3, r1
 8009468:	4313      	orrs	r3, r2
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	0151      	lsls	r1, r2, #5
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	440a      	add	r2, r1
 8009472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800947a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800947e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
	...

08009490 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	785b      	ldrb	r3, [r3, #1]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d161      	bne.n	8009570 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	015a      	lsls	r2, r3, #5
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	4413      	add	r3, r2
 80094b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094c2:	d11f      	bne.n	8009504 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	015a      	lsls	r2, r3, #5
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	4413      	add	r3, r2
 80094cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	0151      	lsls	r1, r2, #5
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	440a      	add	r2, r1
 80094da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	015a      	lsls	r2, r3, #5
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	0151      	lsls	r1, r2, #5
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	440a      	add	r2, r1
 80094fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009502:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800950a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	f003 030f 	and.w	r3, r3, #15
 8009514:	2101      	movs	r1, #1
 8009516:	fa01 f303 	lsl.w	r3, r1, r3
 800951a:	b29b      	uxth	r3, r3
 800951c:	43db      	mvns	r3, r3
 800951e:	68f9      	ldr	r1, [r7, #12]
 8009520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009524:	4013      	ands	r3, r2
 8009526:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800952e:	69da      	ldr	r2, [r3, #28]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	f003 030f 	and.w	r3, r3, #15
 8009538:	2101      	movs	r1, #1
 800953a:	fa01 f303 	lsl.w	r3, r1, r3
 800953e:	b29b      	uxth	r3, r3
 8009540:	43db      	mvns	r3, r3
 8009542:	68f9      	ldr	r1, [r7, #12]
 8009544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009548:	4013      	ands	r3, r2
 800954a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	015a      	lsls	r2, r3, #5
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	4413      	add	r3, r2
 8009554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	0159      	lsls	r1, r3, #5
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	440b      	add	r3, r1
 8009562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009566:	4619      	mov	r1, r3
 8009568:	4b35      	ldr	r3, [pc, #212]	; (8009640 <USB_DeactivateEndpoint+0x1b0>)
 800956a:	4013      	ands	r3, r2
 800956c:	600b      	str	r3, [r1, #0]
 800956e:	e060      	b.n	8009632 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009582:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009586:	d11f      	bne.n	80095c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	4413      	add	r3, r2
 8009590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	0151      	lsls	r1, r2, #5
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	440a      	add	r2, r1
 800959e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80095a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	015a      	lsls	r2, r3, #5
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	4413      	add	r3, r2
 80095b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	0151      	lsls	r1, r2, #5
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	440a      	add	r2, r1
 80095be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	f003 030f 	and.w	r3, r3, #15
 80095d8:	2101      	movs	r1, #1
 80095da:	fa01 f303 	lsl.w	r3, r1, r3
 80095de:	041b      	lsls	r3, r3, #16
 80095e0:	43db      	mvns	r3, r3
 80095e2:	68f9      	ldr	r1, [r7, #12]
 80095e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095e8:	4013      	ands	r3, r2
 80095ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095f2:	69da      	ldr	r2, [r3, #28]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	f003 030f 	and.w	r3, r3, #15
 80095fc:	2101      	movs	r1, #1
 80095fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009602:	041b      	lsls	r3, r3, #16
 8009604:	43db      	mvns	r3, r3
 8009606:	68f9      	ldr	r1, [r7, #12]
 8009608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800960c:	4013      	ands	r3, r2
 800960e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	0159      	lsls	r1, r3, #5
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	440b      	add	r3, r1
 8009626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800962a:	4619      	mov	r1, r3
 800962c:	4b05      	ldr	r3, [pc, #20]	; (8009644 <USB_DeactivateEndpoint+0x1b4>)
 800962e:	4013      	ands	r3, r2
 8009630:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3714      	adds	r7, #20
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr
 8009640:	ec337800 	.word	0xec337800
 8009644:	eff37800 	.word	0xeff37800

08009648 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b08a      	sub	sp, #40	; 0x28
 800964c:	af02      	add	r7, sp, #8
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	4613      	mov	r3, r2
 8009654:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	785b      	ldrb	r3, [r3, #1]
 8009664:	2b01      	cmp	r3, #1
 8009666:	f040 815c 	bne.w	8009922 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d132      	bne.n	80096d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	69ba      	ldr	r2, [r7, #24]
 8009682:	0151      	lsls	r1, r2, #5
 8009684:	69fa      	ldr	r2, [r7, #28]
 8009686:	440a      	add	r2, r1
 8009688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800968c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009690:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009694:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	4413      	add	r3, r2
 800969e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	69ba      	ldr	r2, [r7, #24]
 80096a6:	0151      	lsls	r1, r2, #5
 80096a8:	69fa      	ldr	r2, [r7, #28]
 80096aa:	440a      	add	r2, r1
 80096ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	015a      	lsls	r2, r3, #5
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	4413      	add	r3, r2
 80096be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	69ba      	ldr	r2, [r7, #24]
 80096c6:	0151      	lsls	r1, r2, #5
 80096c8:	69fa      	ldr	r2, [r7, #28]
 80096ca:	440a      	add	r2, r1
 80096cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096d0:	0cdb      	lsrs	r3, r3, #19
 80096d2:	04db      	lsls	r3, r3, #19
 80096d4:	6113      	str	r3, [r2, #16]
 80096d6:	e074      	b.n	80097c2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	015a      	lsls	r2, r3, #5
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	4413      	add	r3, r2
 80096e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	69ba      	ldr	r2, [r7, #24]
 80096e8:	0151      	lsls	r1, r2, #5
 80096ea:	69fa      	ldr	r2, [r7, #28]
 80096ec:	440a      	add	r2, r1
 80096ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096f2:	0cdb      	lsrs	r3, r3, #19
 80096f4:	04db      	lsls	r3, r3, #19
 80096f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	69ba      	ldr	r2, [r7, #24]
 8009708:	0151      	lsls	r1, r2, #5
 800970a:	69fa      	ldr	r2, [r7, #28]
 800970c:	440a      	add	r2, r1
 800970e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009712:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009716:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800971a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	4413      	add	r3, r2
 8009724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009728:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	6999      	ldr	r1, [r3, #24]
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	440b      	add	r3, r1
 8009734:	1e59      	subs	r1, r3, #1
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	fbb1 f3f3 	udiv	r3, r1, r3
 800973e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009740:	4b9d      	ldr	r3, [pc, #628]	; (80099b8 <USB_EPStartXfer+0x370>)
 8009742:	400b      	ands	r3, r1
 8009744:	69b9      	ldr	r1, [r7, #24]
 8009746:	0148      	lsls	r0, r1, #5
 8009748:	69f9      	ldr	r1, [r7, #28]
 800974a:	4401      	add	r1, r0
 800974c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009750:	4313      	orrs	r3, r2
 8009752:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	015a      	lsls	r2, r3, #5
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	4413      	add	r3, r2
 800975c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009760:	691a      	ldr	r2, [r3, #16]
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800976a:	69b9      	ldr	r1, [r7, #24]
 800976c:	0148      	lsls	r0, r1, #5
 800976e:	69f9      	ldr	r1, [r7, #28]
 8009770:	4401      	add	r1, r0
 8009772:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009776:	4313      	orrs	r3, r2
 8009778:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	791b      	ldrb	r3, [r3, #4]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d11f      	bne.n	80097c2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	4413      	add	r3, r2
 800978a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	69ba      	ldr	r2, [r7, #24]
 8009792:	0151      	lsls	r1, r2, #5
 8009794:	69fa      	ldr	r2, [r7, #28]
 8009796:	440a      	add	r2, r1
 8009798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800979c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80097a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	015a      	lsls	r2, r3, #5
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	69ba      	ldr	r2, [r7, #24]
 80097b2:	0151      	lsls	r1, r2, #5
 80097b4:	69fa      	ldr	r2, [r7, #28]
 80097b6:	440a      	add	r2, r1
 80097b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80097c2:	79fb      	ldrb	r3, [r7, #7]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d14b      	bne.n	8009860 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	695b      	ldr	r3, [r3, #20]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d009      	beq.n	80097e4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	015a      	lsls	r2, r3, #5
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097dc:	461a      	mov	r2, r3
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	695b      	ldr	r3, [r3, #20]
 80097e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	791b      	ldrb	r3, [r3, #4]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d128      	bne.n	800983e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d110      	bne.n	800981e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	4413      	add	r3, r2
 8009804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	69ba      	ldr	r2, [r7, #24]
 800980c:	0151      	lsls	r1, r2, #5
 800980e:	69fa      	ldr	r2, [r7, #28]
 8009810:	440a      	add	r2, r1
 8009812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009816:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800981a:	6013      	str	r3, [r2, #0]
 800981c:	e00f      	b.n	800983e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	015a      	lsls	r2, r3, #5
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	4413      	add	r3, r2
 8009826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	69ba      	ldr	r2, [r7, #24]
 800982e:	0151      	lsls	r1, r2, #5
 8009830:	69fa      	ldr	r2, [r7, #28]
 8009832:	440a      	add	r2, r1
 8009834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800983c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	015a      	lsls	r2, r3, #5
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	4413      	add	r3, r2
 8009846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	69ba      	ldr	r2, [r7, #24]
 800984e:	0151      	lsls	r1, r2, #5
 8009850:	69fa      	ldr	r2, [r7, #28]
 8009852:	440a      	add	r2, r1
 8009854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009858:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800985c:	6013      	str	r3, [r2, #0]
 800985e:	e133      	b.n	8009ac8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	015a      	lsls	r2, r3, #5
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	4413      	add	r3, r2
 8009868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	69ba      	ldr	r2, [r7, #24]
 8009870:	0151      	lsls	r1, r2, #5
 8009872:	69fa      	ldr	r2, [r7, #28]
 8009874:	440a      	add	r2, r1
 8009876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800987a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800987e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	791b      	ldrb	r3, [r3, #4]
 8009884:	2b01      	cmp	r3, #1
 8009886:	d015      	beq.n	80098b4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	699b      	ldr	r3, [r3, #24]
 800988c:	2b00      	cmp	r3, #0
 800988e:	f000 811b 	beq.w	8009ac8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	f003 030f 	and.w	r3, r3, #15
 80098a2:	2101      	movs	r1, #1
 80098a4:	fa01 f303 	lsl.w	r3, r1, r3
 80098a8:	69f9      	ldr	r1, [r7, #28]
 80098aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098ae:	4313      	orrs	r3, r2
 80098b0:	634b      	str	r3, [r1, #52]	; 0x34
 80098b2:	e109      	b.n	8009ac8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d110      	bne.n	80098e6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	015a      	lsls	r2, r3, #5
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	4413      	add	r3, r2
 80098cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	69ba      	ldr	r2, [r7, #24]
 80098d4:	0151      	lsls	r1, r2, #5
 80098d6:	69fa      	ldr	r2, [r7, #28]
 80098d8:	440a      	add	r2, r1
 80098da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	e00f      	b.n	8009906 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	015a      	lsls	r2, r3, #5
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	4413      	add	r3, r2
 80098ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	69ba      	ldr	r2, [r7, #24]
 80098f6:	0151      	lsls	r1, r2, #5
 80098f8:	69fa      	ldr	r2, [r7, #28]
 80098fa:	440a      	add	r2, r1
 80098fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009904:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	6919      	ldr	r1, [r3, #16]
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	781a      	ldrb	r2, [r3, #0]
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	b298      	uxth	r0, r3
 8009914:	79fb      	ldrb	r3, [r7, #7]
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	4603      	mov	r3, r0
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 fade 	bl	8009edc <USB_WritePacket>
 8009920:	e0d2      	b.n	8009ac8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	015a      	lsls	r2, r3, #5
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	4413      	add	r3, r2
 800992a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	69ba      	ldr	r2, [r7, #24]
 8009932:	0151      	lsls	r1, r2, #5
 8009934:	69fa      	ldr	r2, [r7, #28]
 8009936:	440a      	add	r2, r1
 8009938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800993c:	0cdb      	lsrs	r3, r3, #19
 800993e:	04db      	lsls	r3, r3, #19
 8009940:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	015a      	lsls	r2, r3, #5
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	4413      	add	r3, r2
 800994a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	69ba      	ldr	r2, [r7, #24]
 8009952:	0151      	lsls	r1, r2, #5
 8009954:	69fa      	ldr	r2, [r7, #28]
 8009956:	440a      	add	r2, r1
 8009958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800995c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009960:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009964:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d126      	bne.n	80099bc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	015a      	lsls	r2, r3, #5
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	4413      	add	r3, r2
 8009976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800997a:	691a      	ldr	r2, [r3, #16]
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009984:	69b9      	ldr	r1, [r7, #24]
 8009986:	0148      	lsls	r0, r1, #5
 8009988:	69f9      	ldr	r1, [r7, #28]
 800998a:	4401      	add	r1, r0
 800998c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009990:	4313      	orrs	r3, r2
 8009992:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	69ba      	ldr	r2, [r7, #24]
 80099a4:	0151      	lsls	r1, r2, #5
 80099a6:	69fa      	ldr	r2, [r7, #28]
 80099a8:	440a      	add	r2, r1
 80099aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099b2:	6113      	str	r3, [r2, #16]
 80099b4:	e03a      	b.n	8009a2c <USB_EPStartXfer+0x3e4>
 80099b6:	bf00      	nop
 80099b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	699a      	ldr	r2, [r3, #24]
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	4413      	add	r3, r2
 80099c6:	1e5a      	subs	r2, r3, #1
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80099d0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	8afa      	ldrh	r2, [r7, #22]
 80099d8:	fb03 f202 	mul.w	r2, r3, r2
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	015a      	lsls	r2, r3, #5
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	4413      	add	r3, r2
 80099e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ec:	691a      	ldr	r2, [r3, #16]
 80099ee:	8afb      	ldrh	r3, [r7, #22]
 80099f0:	04d9      	lsls	r1, r3, #19
 80099f2:	4b38      	ldr	r3, [pc, #224]	; (8009ad4 <USB_EPStartXfer+0x48c>)
 80099f4:	400b      	ands	r3, r1
 80099f6:	69b9      	ldr	r1, [r7, #24]
 80099f8:	0148      	lsls	r0, r1, #5
 80099fa:	69f9      	ldr	r1, [r7, #28]
 80099fc:	4401      	add	r1, r0
 80099fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a02:	4313      	orrs	r3, r2
 8009a04:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a12:	691a      	ldr	r2, [r3, #16]
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	69db      	ldr	r3, [r3, #28]
 8009a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a1c:	69b9      	ldr	r1, [r7, #24]
 8009a1e:	0148      	lsls	r0, r1, #5
 8009a20:	69f9      	ldr	r1, [r7, #28]
 8009a22:	4401      	add	r1, r0
 8009a24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009a2c:	79fb      	ldrb	r3, [r7, #7]
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d10d      	bne.n	8009a4e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d009      	beq.n	8009a4e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	6919      	ldr	r1, [r3, #16]
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	015a      	lsls	r2, r3, #5
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	4413      	add	r3, r2
 8009a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a4a:	460a      	mov	r2, r1
 8009a4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	791b      	ldrb	r3, [r3, #4]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d128      	bne.n	8009aa8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d110      	bne.n	8009a88 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	015a      	lsls	r2, r3, #5
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	69ba      	ldr	r2, [r7, #24]
 8009a76:	0151      	lsls	r1, r2, #5
 8009a78:	69fa      	ldr	r2, [r7, #28]
 8009a7a:	440a      	add	r2, r1
 8009a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	e00f      	b.n	8009aa8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	015a      	lsls	r2, r3, #5
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	4413      	add	r3, r2
 8009a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	69ba      	ldr	r2, [r7, #24]
 8009a98:	0151      	lsls	r1, r2, #5
 8009a9a:	69fa      	ldr	r2, [r7, #28]
 8009a9c:	440a      	add	r2, r1
 8009a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aa6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	69ba      	ldr	r2, [r7, #24]
 8009ab8:	0151      	lsls	r1, r2, #5
 8009aba:	69fa      	ldr	r2, [r7, #28]
 8009abc:	440a      	add	r2, r1
 8009abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ac2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ac6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3720      	adds	r7, #32
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	1ff80000 	.word	0x1ff80000

08009ad8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b087      	sub	sp, #28
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	785b      	ldrb	r3, [r3, #1]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	f040 80ce 	bne.w	8009c96 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d132      	bne.n	8009b68 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	015a      	lsls	r2, r3, #5
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	0151      	lsls	r1, r2, #5
 8009b14:	697a      	ldr	r2, [r7, #20]
 8009b16:	440a      	add	r2, r1
 8009b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009b20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009b24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	015a      	lsls	r2, r3, #5
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	0151      	lsls	r1, r2, #5
 8009b38:	697a      	ldr	r2, [r7, #20]
 8009b3a:	440a      	add	r2, r1
 8009b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	015a      	lsls	r2, r3, #5
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	0151      	lsls	r1, r2, #5
 8009b58:	697a      	ldr	r2, [r7, #20]
 8009b5a:	440a      	add	r2, r1
 8009b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b60:	0cdb      	lsrs	r3, r3, #19
 8009b62:	04db      	lsls	r3, r3, #19
 8009b64:	6113      	str	r3, [r2, #16]
 8009b66:	e04e      	b.n	8009c06 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	015a      	lsls	r2, r3, #5
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	4413      	add	r3, r2
 8009b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	0151      	lsls	r1, r2, #5
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	440a      	add	r2, r1
 8009b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b82:	0cdb      	lsrs	r3, r3, #19
 8009b84:	04db      	lsls	r3, r3, #19
 8009b86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	0151      	lsls	r1, r2, #5
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	440a      	add	r2, r1
 8009b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ba2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ba6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009baa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	699a      	ldr	r2, [r3, #24]
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d903      	bls.n	8009bc0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	68da      	ldr	r2, [r3, #12]
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	015a      	lsls	r2, r3, #5
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	4413      	add	r3, r2
 8009bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	693a      	ldr	r2, [r7, #16]
 8009bd0:	0151      	lsls	r1, r2, #5
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	440a      	add	r2, r1
 8009bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009bde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	015a      	lsls	r2, r3, #5
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bec:	691a      	ldr	r2, [r3, #16]
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bf6:	6939      	ldr	r1, [r7, #16]
 8009bf8:	0148      	lsls	r0, r1, #5
 8009bfa:	6979      	ldr	r1, [r7, #20]
 8009bfc:	4401      	add	r1, r0
 8009bfe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009c02:	4313      	orrs	r3, r2
 8009c04:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009c06:	79fb      	ldrb	r3, [r7, #7]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d11e      	bne.n	8009c4a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	695b      	ldr	r3, [r3, #20]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d009      	beq.n	8009c28 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	015a      	lsls	r2, r3, #5
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c20:	461a      	mov	r2, r3
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	695b      	ldr	r3, [r3, #20]
 8009c26:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	015a      	lsls	r2, r3, #5
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	4413      	add	r3, r2
 8009c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	0151      	lsls	r1, r2, #5
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	440a      	add	r2, r1
 8009c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c46:	6013      	str	r3, [r2, #0]
 8009c48:	e097      	b.n	8009d7a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	015a      	lsls	r2, r3, #5
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	4413      	add	r3, r2
 8009c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	0151      	lsls	r1, r2, #5
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	440a      	add	r2, r1
 8009c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009c68:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	699b      	ldr	r3, [r3, #24]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f000 8083 	beq.w	8009d7a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	f003 030f 	and.w	r3, r3, #15
 8009c84:	2101      	movs	r1, #1
 8009c86:	fa01 f303 	lsl.w	r3, r1, r3
 8009c8a:	6979      	ldr	r1, [r7, #20]
 8009c8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c90:	4313      	orrs	r3, r2
 8009c92:	634b      	str	r3, [r1, #52]	; 0x34
 8009c94:	e071      	b.n	8009d7a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	015a      	lsls	r2, r3, #5
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	693a      	ldr	r2, [r7, #16]
 8009ca6:	0151      	lsls	r1, r2, #5
 8009ca8:	697a      	ldr	r2, [r7, #20]
 8009caa:	440a      	add	r2, r1
 8009cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cb0:	0cdb      	lsrs	r3, r3, #19
 8009cb2:	04db      	lsls	r3, r3, #19
 8009cb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	015a      	lsls	r2, r3, #5
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	0151      	lsls	r1, r2, #5
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	440a      	add	r2, r1
 8009ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009cd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009cd8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	68da      	ldr	r2, [r3, #12]
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	68da      	ldr	r2, [r3, #12]
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	015a      	lsls	r2, r3, #5
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	0151      	lsls	r1, r2, #5
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	440a      	add	r2, r1
 8009d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	015a      	lsls	r2, r3, #5
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	4413      	add	r3, r2
 8009d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1e:	691a      	ldr	r2, [r3, #16]
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	69db      	ldr	r3, [r3, #28]
 8009d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d28:	6939      	ldr	r1, [r7, #16]
 8009d2a:	0148      	lsls	r0, r1, #5
 8009d2c:	6979      	ldr	r1, [r7, #20]
 8009d2e:	4401      	add	r1, r0
 8009d30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009d34:	4313      	orrs	r3, r2
 8009d36:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009d38:	79fb      	ldrb	r3, [r7, #7]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d10d      	bne.n	8009d5a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d009      	beq.n	8009d5a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	6919      	ldr	r1, [r3, #16]
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	015a      	lsls	r2, r3, #5
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	4413      	add	r3, r2
 8009d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d56:	460a      	mov	r2, r1
 8009d58:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	015a      	lsls	r2, r3, #5
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	4413      	add	r3, r2
 8009d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	693a      	ldr	r2, [r7, #16]
 8009d6a:	0151      	lsls	r1, r2, #5
 8009d6c:	697a      	ldr	r2, [r7, #20]
 8009d6e:	440a      	add	r2, r1
 8009d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	371c      	adds	r7, #28
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b087      	sub	sp, #28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d92:	2300      	movs	r3, #0
 8009d94:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	785b      	ldrb	r3, [r3, #1]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d14a      	bne.n	8009e3c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dbe:	f040 8086 	bne.w	8009ece <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	015a      	lsls	r2, r3, #5
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	4413      	add	r3, r2
 8009dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	7812      	ldrb	r2, [r2, #0]
 8009dd6:	0151      	lsls	r1, r2, #5
 8009dd8:	693a      	ldr	r2, [r7, #16]
 8009dda:	440a      	add	r2, r1
 8009ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009de0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009de4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	015a      	lsls	r2, r3, #5
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	4413      	add	r3, r2
 8009df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	7812      	ldrb	r2, [r2, #0]
 8009dfa:	0151      	lsls	r1, r2, #5
 8009dfc:	693a      	ldr	r2, [r7, #16]
 8009dfe:	440a      	add	r2, r1
 8009e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f242 7210 	movw	r2, #10000	; 0x2710
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d902      	bls.n	8009e20 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	75fb      	strb	r3, [r7, #23]
          break;
 8009e1e:	e056      	b.n	8009ece <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	015a      	lsls	r2, r3, #5
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	4413      	add	r3, r2
 8009e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e38:	d0e7      	beq.n	8009e0a <USB_EPStopXfer+0x82>
 8009e3a:	e048      	b.n	8009ece <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	015a      	lsls	r2, r3, #5
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	4413      	add	r3, r2
 8009e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e54:	d13b      	bne.n	8009ece <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	015a      	lsls	r2, r3, #5
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	4413      	add	r3, r2
 8009e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	7812      	ldrb	r2, [r2, #0]
 8009e6a:	0151      	lsls	r1, r2, #5
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	440a      	add	r2, r1
 8009e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e78:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	683a      	ldr	r2, [r7, #0]
 8009e8c:	7812      	ldrb	r2, [r2, #0]
 8009e8e:	0151      	lsls	r1, r2, #5
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	440a      	add	r2, r1
 8009e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f242 7210 	movw	r2, #10000	; 0x2710
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d902      	bls.n	8009eb4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8009eb2:	e00c      	b.n	8009ece <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	015a      	lsls	r2, r3, #5
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ecc:	d0e7      	beq.n	8009e9e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	371c      	adds	r7, #28
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b089      	sub	sp, #36	; 0x24
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	4611      	mov	r1, r2
 8009ee8:	461a      	mov	r2, r3
 8009eea:	460b      	mov	r3, r1
 8009eec:	71fb      	strb	r3, [r7, #7]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009efa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d123      	bne.n	8009f4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009f02:	88bb      	ldrh	r3, [r7, #4]
 8009f04:	3303      	adds	r3, #3
 8009f06:	089b      	lsrs	r3, r3, #2
 8009f08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	61bb      	str	r3, [r7, #24]
 8009f0e:	e018      	b.n	8009f42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009f10:	79fb      	ldrb	r3, [r7, #7]
 8009f12:	031a      	lsls	r2, r3, #12
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	4413      	add	r3, r2
 8009f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	3301      	adds	r3, #1
 8009f28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	3301      	adds	r3, #1
 8009f34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	61bb      	str	r3, [r7, #24]
 8009f42:	69ba      	ldr	r2, [r7, #24]
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d3e2      	bcc.n	8009f10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3724      	adds	r7, #36	; 0x24
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b08b      	sub	sp, #44	; 0x2c
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	4613      	mov	r3, r2
 8009f64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009f6e:	88fb      	ldrh	r3, [r7, #6]
 8009f70:	089b      	lsrs	r3, r3, #2
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009f76:	88fb      	ldrh	r3, [r7, #6]
 8009f78:	f003 0303 	and.w	r3, r3, #3
 8009f7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009f7e:	2300      	movs	r3, #0
 8009f80:	623b      	str	r3, [r7, #32]
 8009f82:	e014      	b.n	8009fae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f92:	3301      	adds	r3, #1
 8009f94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	3301      	adds	r3, #1
 8009f9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	3301      	adds	r3, #1
 8009fac:	623b      	str	r3, [r7, #32]
 8009fae:	6a3a      	ldr	r2, [r7, #32]
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d3e6      	bcc.n	8009f84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009fb6:	8bfb      	ldrh	r3, [r7, #30]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d01e      	beq.n	8009ffa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	f107 0310 	add.w	r3, r7, #16
 8009fcc:	6812      	ldr	r2, [r2, #0]
 8009fce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	6a3b      	ldr	r3, [r7, #32]
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	00db      	lsls	r3, r3, #3
 8009fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	701a      	strb	r2, [r3, #0]
      i++;
 8009fe2:	6a3b      	ldr	r3, [r7, #32]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	623b      	str	r3, [r7, #32]
      pDest++;
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fea:	3301      	adds	r3, #1
 8009fec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009fee:	8bfb      	ldrh	r3, [r7, #30]
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009ff4:	8bfb      	ldrh	r3, [r7, #30]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1ea      	bne.n	8009fd0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	372c      	adds	r7, #44	; 0x2c
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	785b      	ldrb	r3, [r3, #1]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d12c      	bne.n	800a07e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	015a      	lsls	r2, r3, #5
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	4413      	add	r3, r2
 800a02c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	db12      	blt.n	800a05c <USB_EPSetStall+0x54>
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00f      	beq.n	800a05c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	015a      	lsls	r2, r3, #5
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	4413      	add	r3, r2
 800a044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	0151      	lsls	r1, r2, #5
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	440a      	add	r2, r1
 800a052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a056:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a05a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	015a      	lsls	r2, r3, #5
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	4413      	add	r3, r2
 800a064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	0151      	lsls	r1, r2, #5
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	440a      	add	r2, r1
 800a072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a076:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a07a:	6013      	str	r3, [r2, #0]
 800a07c:	e02b      	b.n	800a0d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	015a      	lsls	r2, r3, #5
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	4413      	add	r3, r2
 800a086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	db12      	blt.n	800a0b6 <USB_EPSetStall+0xae>
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00f      	beq.n	800a0b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	015a      	lsls	r2, r3, #5
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	4413      	add	r3, r2
 800a09e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	0151      	lsls	r1, r2, #5
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	440a      	add	r2, r1
 800a0ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a0b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	015a      	lsls	r2, r3, #5
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	4413      	add	r3, r2
 800a0be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	0151      	lsls	r1, r2, #5
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	440a      	add	r2, r1
 800a0cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a0d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	785b      	ldrb	r3, [r3, #1]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d128      	bne.n	800a152 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	015a      	lsls	r2, r3, #5
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	4413      	add	r3, r2
 800a108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	68ba      	ldr	r2, [r7, #8]
 800a110:	0151      	lsls	r1, r2, #5
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	440a      	add	r2, r1
 800a116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a11a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a11e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	791b      	ldrb	r3, [r3, #4]
 800a124:	2b03      	cmp	r3, #3
 800a126:	d003      	beq.n	800a130 <USB_EPClearStall+0x4c>
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	791b      	ldrb	r3, [r3, #4]
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d138      	bne.n	800a1a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	015a      	lsls	r2, r3, #5
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	4413      	add	r3, r2
 800a138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	0151      	lsls	r1, r2, #5
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	440a      	add	r2, r1
 800a146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a14a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a14e:	6013      	str	r3, [r2, #0]
 800a150:	e027      	b.n	800a1a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	015a      	lsls	r2, r3, #5
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	4413      	add	r3, r2
 800a15a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68ba      	ldr	r2, [r7, #8]
 800a162:	0151      	lsls	r1, r2, #5
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	440a      	add	r2, r1
 800a168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a16c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a170:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	791b      	ldrb	r3, [r3, #4]
 800a176:	2b03      	cmp	r3, #3
 800a178:	d003      	beq.n	800a182 <USB_EPClearStall+0x9e>
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	791b      	ldrb	r3, [r3, #4]
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d10f      	bne.n	800a1a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	015a      	lsls	r2, r3, #5
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	4413      	add	r3, r2
 800a18a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68ba      	ldr	r2, [r7, #8]
 800a192:	0151      	lsls	r1, r2, #5
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	440a      	add	r2, r1
 800a198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a19c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3714      	adds	r7, #20
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a1d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	78fb      	ldrb	r3, [r7, #3]
 800a1de:	011b      	lsls	r3, r3, #4
 800a1e0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a1e4:	68f9      	ldr	r1, [r7, #12]
 800a1e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3714      	adds	r7, #20
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a216:	f023 0303 	bic.w	r3, r3, #3
 800a21a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a22a:	f023 0302 	bic.w	r3, r3, #2
 800a22e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3714      	adds	r7, #20
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr

0800a23e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a23e:	b480      	push	{r7}
 800a240:	b085      	sub	sp, #20
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a258:	f023 0303 	bic.w	r3, r3, #3
 800a25c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a26c:	f043 0302 	orr.w	r3, r3, #2
 800a270:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a272:	2300      	movs	r3, #0
}
 800a274:	4618      	mov	r0, r3
 800a276:	3714      	adds	r7, #20
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	695b      	ldr	r3, [r3, #20]
 800a28c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	699b      	ldr	r3, [r3, #24]
 800a292:	68fa      	ldr	r2, [r7, #12]
 800a294:	4013      	ands	r3, r2
 800a296:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a298:	68fb      	ldr	r3, [r7, #12]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3714      	adds	r7, #20
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b085      	sub	sp, #20
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2c2:	69db      	ldr	r3, [r3, #28]
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	0c1b      	lsrs	r3, r3, #16
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3714      	adds	r7, #20
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b085      	sub	sp, #20
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2f6:	69db      	ldr	r3, [r3, #28]
 800a2f8:	68ba      	ldr	r2, [r7, #8]
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	b29b      	uxth	r3, r3
}
 800a302:	4618      	mov	r0, r3
 800a304:	3714      	adds	r7, #20
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a30e:	b480      	push	{r7}
 800a310:	b085      	sub	sp, #20
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	460b      	mov	r3, r1
 800a318:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a31e:	78fb      	ldrb	r3, [r7, #3]
 800a320:	015a      	lsls	r2, r3, #5
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	4413      	add	r3, r2
 800a326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a334:	695b      	ldr	r3, [r3, #20]
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	4013      	ands	r3, r2
 800a33a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a33c:	68bb      	ldr	r3, [r7, #8]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr

0800a34a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a34a:	b480      	push	{r7}
 800a34c:	b087      	sub	sp, #28
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	460b      	mov	r3, r1
 800a354:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a36c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a36e:	78fb      	ldrb	r3, [r7, #3]
 800a370:	f003 030f 	and.w	r3, r3, #15
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	fa22 f303 	lsr.w	r3, r2, r3
 800a37a:	01db      	lsls	r3, r3, #7
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	4313      	orrs	r3, r2
 800a382:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a384:	78fb      	ldrb	r3, [r7, #3]
 800a386:	015a      	lsls	r2, r3, #5
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	4413      	add	r3, r2
 800a38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	4013      	ands	r3, r2
 800a396:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a398:	68bb      	ldr	r3, [r7, #8]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	371c      	adds	r7, #28
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	f003 0301 	and.w	r3, r3, #1
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	370c      	adds	r7, #12
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr

0800a3c2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a3c2:	b480      	push	{r7}
 800a3c4:	b085      	sub	sp, #20
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a3e0:	f023 0307 	bic.w	r3, r3, #7
 800a3e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3714      	adds	r7, #20
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	460b      	mov	r3, r1
 800a412:	607a      	str	r2, [r7, #4]
 800a414:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	333c      	adds	r3, #60	; 0x3c
 800a41e:	3304      	adds	r3, #4
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	4a26      	ldr	r2, [pc, #152]	; (800a4c0 <USB_EP0_OutStart+0xb8>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d90a      	bls.n	800a442 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a438:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a43c:	d101      	bne.n	800a442 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	e037      	b.n	800a4b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a448:	461a      	mov	r2, r3
 800a44a:	2300      	movs	r3, #0
 800a44c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	697a      	ldr	r2, [r7, #20]
 800a458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a45c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a460:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a470:	f043 0318 	orr.w	r3, r3, #24
 800a474:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a484:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a488:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a48a:	7afb      	ldrb	r3, [r7, #11]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d10f      	bne.n	800a4b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a496:	461a      	mov	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	697a      	ldr	r2, [r7, #20]
 800a4a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a4ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	371c      	adds	r7, #28
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	4f54300a 	.word	0x4f54300a

0800a4c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	4a13      	ldr	r2, [pc, #76]	; (800a528 <USB_CoreReset+0x64>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d901      	bls.n	800a4e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a4de:	2303      	movs	r3, #3
 800a4e0:	e01b      	b.n	800a51a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	daf2      	bge.n	800a4d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	f043 0201 	orr.w	r2, r3, #1
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	4a09      	ldr	r2, [pc, #36]	; (800a528 <USB_CoreReset+0x64>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d901      	bls.n	800a50c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a508:	2303      	movs	r3, #3
 800a50a:	e006      	b.n	800a51a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	f003 0301 	and.w	r3, r3, #1
 800a514:	2b01      	cmp	r3, #1
 800a516:	d0f0      	beq.n	800a4fa <USB_CoreReset+0x36>

  return HAL_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	00030d40 	.word	0x00030d40

0800a52c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	460b      	mov	r3, r1
 800a536:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a538:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a53c:	f005 fb64 	bl	800fc08 <USBD_static_malloc>
 800a540:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d109      	bne.n	800a55c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	32b0      	adds	r2, #176	; 0xb0
 800a552:	2100      	movs	r1, #0
 800a554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a558:	2302      	movs	r3, #2
 800a55a:	e0d4      	b.n	800a706 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a55c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a560:	2100      	movs	r1, #0
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f005 fbdc 	bl	800fd20 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	32b0      	adds	r2, #176	; 0xb0
 800a572:	68f9      	ldr	r1, [r7, #12]
 800a574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	32b0      	adds	r2, #176	; 0xb0
 800a582:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	7c1b      	ldrb	r3, [r3, #16]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d138      	bne.n	800a606 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a594:	4b5e      	ldr	r3, [pc, #376]	; (800a710 <USBD_CDC_Init+0x1e4>)
 800a596:	7819      	ldrb	r1, [r3, #0]
 800a598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a59c:	2202      	movs	r2, #2
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f005 fa0f 	bl	800f9c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a5a4:	4b5a      	ldr	r3, [pc, #360]	; (800a710 <USBD_CDC_Init+0x1e4>)
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	f003 020f 	and.w	r2, r3, #15
 800a5ac:	6879      	ldr	r1, [r7, #4]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	4413      	add	r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	440b      	add	r3, r1
 800a5b8:	3324      	adds	r3, #36	; 0x24
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a5be:	4b55      	ldr	r3, [pc, #340]	; (800a714 <USBD_CDC_Init+0x1e8>)
 800a5c0:	7819      	ldrb	r1, [r3, #0]
 800a5c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5c6:	2202      	movs	r2, #2
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f005 f9fa 	bl	800f9c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a5ce:	4b51      	ldr	r3, [pc, #324]	; (800a714 <USBD_CDC_Init+0x1e8>)
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	f003 020f 	and.w	r2, r3, #15
 800a5d6:	6879      	ldr	r1, [r7, #4]
 800a5d8:	4613      	mov	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4413      	add	r3, r2
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	440b      	add	r3, r1
 800a5e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a5ea:	4b4b      	ldr	r3, [pc, #300]	; (800a718 <USBD_CDC_Init+0x1ec>)
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	f003 020f 	and.w	r2, r3, #15
 800a5f2:	6879      	ldr	r1, [r7, #4]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	440b      	add	r3, r1
 800a5fe:	3326      	adds	r3, #38	; 0x26
 800a600:	2210      	movs	r2, #16
 800a602:	801a      	strh	r2, [r3, #0]
 800a604:	e035      	b.n	800a672 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a606:	4b42      	ldr	r3, [pc, #264]	; (800a710 <USBD_CDC_Init+0x1e4>)
 800a608:	7819      	ldrb	r1, [r3, #0]
 800a60a:	2340      	movs	r3, #64	; 0x40
 800a60c:	2202      	movs	r2, #2
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f005 f9d7 	bl	800f9c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a614:	4b3e      	ldr	r3, [pc, #248]	; (800a710 <USBD_CDC_Init+0x1e4>)
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	f003 020f 	and.w	r2, r3, #15
 800a61c:	6879      	ldr	r1, [r7, #4]
 800a61e:	4613      	mov	r3, r2
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	4413      	add	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	440b      	add	r3, r1
 800a628:	3324      	adds	r3, #36	; 0x24
 800a62a:	2201      	movs	r2, #1
 800a62c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a62e:	4b39      	ldr	r3, [pc, #228]	; (800a714 <USBD_CDC_Init+0x1e8>)
 800a630:	7819      	ldrb	r1, [r3, #0]
 800a632:	2340      	movs	r3, #64	; 0x40
 800a634:	2202      	movs	r2, #2
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f005 f9c3 	bl	800f9c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a63c:	4b35      	ldr	r3, [pc, #212]	; (800a714 <USBD_CDC_Init+0x1e8>)
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	f003 020f 	and.w	r2, r3, #15
 800a644:	6879      	ldr	r1, [r7, #4]
 800a646:	4613      	mov	r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4413      	add	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	440b      	add	r3, r1
 800a650:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a654:	2201      	movs	r2, #1
 800a656:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a658:	4b2f      	ldr	r3, [pc, #188]	; (800a718 <USBD_CDC_Init+0x1ec>)
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	f003 020f 	and.w	r2, r3, #15
 800a660:	6879      	ldr	r1, [r7, #4]
 800a662:	4613      	mov	r3, r2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	4413      	add	r3, r2
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	440b      	add	r3, r1
 800a66c:	3326      	adds	r3, #38	; 0x26
 800a66e:	2210      	movs	r2, #16
 800a670:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a672:	4b29      	ldr	r3, [pc, #164]	; (800a718 <USBD_CDC_Init+0x1ec>)
 800a674:	7819      	ldrb	r1, [r3, #0]
 800a676:	2308      	movs	r3, #8
 800a678:	2203      	movs	r2, #3
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f005 f9a1 	bl	800f9c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a680:	4b25      	ldr	r3, [pc, #148]	; (800a718 <USBD_CDC_Init+0x1ec>)
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	f003 020f 	and.w	r2, r3, #15
 800a688:	6879      	ldr	r1, [r7, #4]
 800a68a:	4613      	mov	r3, r2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4413      	add	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	440b      	add	r3, r1
 800a694:	3324      	adds	r3, #36	; 0x24
 800a696:	2201      	movs	r2, #1
 800a698:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	33b0      	adds	r3, #176	; 0xb0
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4413      	add	r3, r2
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	e018      	b.n	800a706 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	7c1b      	ldrb	r3, [r3, #16]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10a      	bne.n	800a6f2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a6dc:	4b0d      	ldr	r3, [pc, #52]	; (800a714 <USBD_CDC_Init+0x1e8>)
 800a6de:	7819      	ldrb	r1, [r3, #0]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a6e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f005 fa58 	bl	800fba0 <USBD_LL_PrepareReceive>
 800a6f0:	e008      	b.n	800a704 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a6f2:	4b08      	ldr	r3, [pc, #32]	; (800a714 <USBD_CDC_Init+0x1e8>)
 800a6f4:	7819      	ldrb	r1, [r3, #0]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a6fc:	2340      	movs	r3, #64	; 0x40
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f005 fa4e 	bl	800fba0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	2000062f 	.word	0x2000062f
 800a714:	20000630 	.word	0x20000630
 800a718:	20000631 	.word	0x20000631

0800a71c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	460b      	mov	r3, r1
 800a726:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a728:	4b3a      	ldr	r3, [pc, #232]	; (800a814 <USBD_CDC_DeInit+0xf8>)
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	4619      	mov	r1, r3
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f005 f96d 	bl	800fa0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a734:	4b37      	ldr	r3, [pc, #220]	; (800a814 <USBD_CDC_DeInit+0xf8>)
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	f003 020f 	and.w	r2, r3, #15
 800a73c:	6879      	ldr	r1, [r7, #4]
 800a73e:	4613      	mov	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	440b      	add	r3, r1
 800a748:	3324      	adds	r3, #36	; 0x24
 800a74a:	2200      	movs	r2, #0
 800a74c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a74e:	4b32      	ldr	r3, [pc, #200]	; (800a818 <USBD_CDC_DeInit+0xfc>)
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	4619      	mov	r1, r3
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f005 f95a 	bl	800fa0e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a75a:	4b2f      	ldr	r3, [pc, #188]	; (800a818 <USBD_CDC_DeInit+0xfc>)
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	f003 020f 	and.w	r2, r3, #15
 800a762:	6879      	ldr	r1, [r7, #4]
 800a764:	4613      	mov	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	4413      	add	r3, r2
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	440b      	add	r3, r1
 800a76e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a772:	2200      	movs	r2, #0
 800a774:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a776:	4b29      	ldr	r3, [pc, #164]	; (800a81c <USBD_CDC_DeInit+0x100>)
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	4619      	mov	r1, r3
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f005 f946 	bl	800fa0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a782:	4b26      	ldr	r3, [pc, #152]	; (800a81c <USBD_CDC_DeInit+0x100>)
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	f003 020f 	and.w	r2, r3, #15
 800a78a:	6879      	ldr	r1, [r7, #4]
 800a78c:	4613      	mov	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	440b      	add	r3, r1
 800a796:	3324      	adds	r3, #36	; 0x24
 800a798:	2200      	movs	r2, #0
 800a79a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a79c:	4b1f      	ldr	r3, [pc, #124]	; (800a81c <USBD_CDC_DeInit+0x100>)
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	f003 020f 	and.w	r2, r3, #15
 800a7a4:	6879      	ldr	r1, [r7, #4]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4413      	add	r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	440b      	add	r3, r1
 800a7b0:	3326      	adds	r3, #38	; 0x26
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	32b0      	adds	r2, #176	; 0xb0
 800a7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d01f      	beq.n	800a808 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	33b0      	adds	r3, #176	; 0xb0
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	4413      	add	r3, r2
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	32b0      	adds	r2, #176	; 0xb0
 800a7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f005 fa1a 	bl	800fc24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	32b0      	adds	r2, #176	; 0xb0
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	2000062f 	.word	0x2000062f
 800a818:	20000630 	.word	0x20000630
 800a81c:	20000631 	.word	0x20000631

0800a820 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	32b0      	adds	r2, #176	; 0xb0
 800a834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a838:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a83a:	2300      	movs	r3, #0
 800a83c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a83e:	2300      	movs	r3, #0
 800a840:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a842:	2300      	movs	r3, #0
 800a844:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d101      	bne.n	800a850 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a84c:	2303      	movs	r3, #3
 800a84e:	e0bf      	b.n	800a9d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d050      	beq.n	800a8fe <USBD_CDC_Setup+0xde>
 800a85c:	2b20      	cmp	r3, #32
 800a85e:	f040 80af 	bne.w	800a9c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	88db      	ldrh	r3, [r3, #6]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d03a      	beq.n	800a8e0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	b25b      	sxtb	r3, r3
 800a870:	2b00      	cmp	r3, #0
 800a872:	da1b      	bge.n	800a8ac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	33b0      	adds	r3, #176	; 0xb0
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	683a      	ldr	r2, [r7, #0]
 800a888:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a88a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a88c:	683a      	ldr	r2, [r7, #0]
 800a88e:	88d2      	ldrh	r2, [r2, #6]
 800a890:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	88db      	ldrh	r3, [r3, #6]
 800a896:	2b07      	cmp	r3, #7
 800a898:	bf28      	it	cs
 800a89a:	2307      	movcs	r3, #7
 800a89c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	89fa      	ldrh	r2, [r7, #14]
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f001 fd43 	bl	800c330 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a8aa:	e090      	b.n	800a9ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	785a      	ldrb	r2, [r3, #1]
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	88db      	ldrh	r3, [r3, #6]
 800a8ba:	2b3f      	cmp	r3, #63	; 0x3f
 800a8bc:	d803      	bhi.n	800a8c6 <USBD_CDC_Setup+0xa6>
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	88db      	ldrh	r3, [r3, #6]
 800a8c2:	b2da      	uxtb	r2, r3
 800a8c4:	e000      	b.n	800a8c8 <USBD_CDC_Setup+0xa8>
 800a8c6:	2240      	movs	r2, #64	; 0x40
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a8ce:	6939      	ldr	r1, [r7, #16]
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f001 fd55 	bl	800c388 <USBD_CtlPrepareRx>
      break;
 800a8de:	e076      	b.n	800a9ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	33b0      	adds	r3, #176	; 0xb0
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	7850      	ldrb	r0, [r2, #1]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	6839      	ldr	r1, [r7, #0]
 800a8fa:	4798      	blx	r3
      break;
 800a8fc:	e067      	b.n	800a9ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	785b      	ldrb	r3, [r3, #1]
 800a902:	2b0b      	cmp	r3, #11
 800a904:	d851      	bhi.n	800a9aa <USBD_CDC_Setup+0x18a>
 800a906:	a201      	add	r2, pc, #4	; (adr r2, 800a90c <USBD_CDC_Setup+0xec>)
 800a908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90c:	0800a93d 	.word	0x0800a93d
 800a910:	0800a9b9 	.word	0x0800a9b9
 800a914:	0800a9ab 	.word	0x0800a9ab
 800a918:	0800a9ab 	.word	0x0800a9ab
 800a91c:	0800a9ab 	.word	0x0800a9ab
 800a920:	0800a9ab 	.word	0x0800a9ab
 800a924:	0800a9ab 	.word	0x0800a9ab
 800a928:	0800a9ab 	.word	0x0800a9ab
 800a92c:	0800a9ab 	.word	0x0800a9ab
 800a930:	0800a9ab 	.word	0x0800a9ab
 800a934:	0800a967 	.word	0x0800a967
 800a938:	0800a991 	.word	0x0800a991
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a942:	b2db      	uxtb	r3, r3
 800a944:	2b03      	cmp	r3, #3
 800a946:	d107      	bne.n	800a958 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a948:	f107 030a 	add.w	r3, r7, #10
 800a94c:	2202      	movs	r2, #2
 800a94e:	4619      	mov	r1, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f001 fced 	bl	800c330 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a956:	e032      	b.n	800a9be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a958:	6839      	ldr	r1, [r7, #0]
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f001 fc77 	bl	800c24e <USBD_CtlError>
            ret = USBD_FAIL;
 800a960:	2303      	movs	r3, #3
 800a962:	75fb      	strb	r3, [r7, #23]
          break;
 800a964:	e02b      	b.n	800a9be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	2b03      	cmp	r3, #3
 800a970:	d107      	bne.n	800a982 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a972:	f107 030d 	add.w	r3, r7, #13
 800a976:	2201      	movs	r2, #1
 800a978:	4619      	mov	r1, r3
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f001 fcd8 	bl	800c330 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a980:	e01d      	b.n	800a9be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a982:	6839      	ldr	r1, [r7, #0]
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f001 fc62 	bl	800c24e <USBD_CtlError>
            ret = USBD_FAIL;
 800a98a:	2303      	movs	r3, #3
 800a98c:	75fb      	strb	r3, [r7, #23]
          break;
 800a98e:	e016      	b.n	800a9be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a996:	b2db      	uxtb	r3, r3
 800a998:	2b03      	cmp	r3, #3
 800a99a:	d00f      	beq.n	800a9bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a99c:	6839      	ldr	r1, [r7, #0]
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f001 fc55 	bl	800c24e <USBD_CtlError>
            ret = USBD_FAIL;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a9a8:	e008      	b.n	800a9bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a9aa:	6839      	ldr	r1, [r7, #0]
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f001 fc4e 	bl	800c24e <USBD_CtlError>
          ret = USBD_FAIL;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	75fb      	strb	r3, [r7, #23]
          break;
 800a9b6:	e002      	b.n	800a9be <USBD_CDC_Setup+0x19e>
          break;
 800a9b8:	bf00      	nop
 800a9ba:	e008      	b.n	800a9ce <USBD_CDC_Setup+0x1ae>
          break;
 800a9bc:	bf00      	nop
      }
      break;
 800a9be:	e006      	b.n	800a9ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a9c0:	6839      	ldr	r1, [r7, #0]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f001 fc43 	bl	800c24e <USBD_CtlError>
      ret = USBD_FAIL;
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	75fb      	strb	r3, [r7, #23]
      break;
 800a9cc:	bf00      	nop
  }

  return (uint8_t)ret;
 800a9ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3718      	adds	r7, #24
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	32b0      	adds	r2, #176	; 0xb0
 800a9f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a9fe:	2303      	movs	r3, #3
 800aa00:	e065      	b.n	800aace <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	32b0      	adds	r2, #176	; 0xb0
 800aa0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa10:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aa12:	78fb      	ldrb	r3, [r7, #3]
 800aa14:	f003 020f 	and.w	r2, r3, #15
 800aa18:	6879      	ldr	r1, [r7, #4]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	4413      	add	r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	440b      	add	r3, r1
 800aa24:	3318      	adds	r3, #24
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d02f      	beq.n	800aa8c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800aa2c:	78fb      	ldrb	r3, [r7, #3]
 800aa2e:	f003 020f 	and.w	r2, r3, #15
 800aa32:	6879      	ldr	r1, [r7, #4]
 800aa34:	4613      	mov	r3, r2
 800aa36:	009b      	lsls	r3, r3, #2
 800aa38:	4413      	add	r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	440b      	add	r3, r1
 800aa3e:	3318      	adds	r3, #24
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	78fb      	ldrb	r3, [r7, #3]
 800aa44:	f003 010f 	and.w	r1, r3, #15
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	00db      	lsls	r3, r3, #3
 800aa4e:	440b      	add	r3, r1
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4403      	add	r3, r0
 800aa54:	3348      	adds	r3, #72	; 0x48
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	fbb2 f1f3 	udiv	r1, r2, r3
 800aa5c:	fb01 f303 	mul.w	r3, r1, r3
 800aa60:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d112      	bne.n	800aa8c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800aa66:	78fb      	ldrb	r3, [r7, #3]
 800aa68:	f003 020f 	and.w	r2, r3, #15
 800aa6c:	6879      	ldr	r1, [r7, #4]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4413      	add	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	440b      	add	r3, r1
 800aa78:	3318      	adds	r3, #24
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aa7e:	78f9      	ldrb	r1, [r7, #3]
 800aa80:	2300      	movs	r3, #0
 800aa82:	2200      	movs	r2, #0
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f005 f86a 	bl	800fb5e <USBD_LL_Transmit>
 800aa8a:	e01f      	b.n	800aacc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	33b0      	adds	r3, #176	; 0xb0
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	4413      	add	r3, r2
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d010      	beq.n	800aacc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	33b0      	adds	r3, #176	; 0xb0
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	4413      	add	r3, r2
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800aac2:	68ba      	ldr	r2, [r7, #8]
 800aac4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800aac8:	78fa      	ldrb	r2, [r7, #3]
 800aaca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b084      	sub	sp, #16
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	460b      	mov	r3, r1
 800aae0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	32b0      	adds	r2, #176	; 0xb0
 800aaec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	32b0      	adds	r2, #176	; 0xb0
 800aafc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d101      	bne.n	800ab08 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ab04:	2303      	movs	r3, #3
 800ab06:	e01a      	b.n	800ab3e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ab08:	78fb      	ldrb	r3, [r7, #3]
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f005 f868 	bl	800fbe2 <USBD_LL_GetRxDataSize>
 800ab12:	4602      	mov	r2, r0
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	33b0      	adds	r3, #176	; 0xb0
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ab38:	4611      	mov	r1, r2
 800ab3a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b084      	sub	sp, #16
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	32b0      	adds	r2, #176	; 0xb0
 800ab58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d101      	bne.n	800ab68 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ab64:	2303      	movs	r3, #3
 800ab66:	e025      	b.n	800abb4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	33b0      	adds	r3, #176	; 0xb0
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4413      	add	r3, r2
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d01a      	beq.n	800abb2 <USBD_CDC_EP0_RxReady+0x6c>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ab82:	2bff      	cmp	r3, #255	; 0xff
 800ab84:	d015      	beq.n	800abb2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	33b0      	adds	r3, #176	; 0xb0
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	4413      	add	r3, r2
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ab9e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aba6:	b292      	uxth	r2, r2
 800aba8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	22ff      	movs	r2, #255	; 0xff
 800abae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3710      	adds	r7, #16
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800abc4:	2182      	movs	r1, #130	; 0x82
 800abc6:	4818      	ldr	r0, [pc, #96]	; (800ac28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800abc8:	f000 fd09 	bl	800b5de <USBD_GetEpDesc>
 800abcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800abce:	2101      	movs	r1, #1
 800abd0:	4815      	ldr	r0, [pc, #84]	; (800ac28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800abd2:	f000 fd04 	bl	800b5de <USBD_GetEpDesc>
 800abd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800abd8:	2181      	movs	r1, #129	; 0x81
 800abda:	4813      	ldr	r0, [pc, #76]	; (800ac28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800abdc:	f000 fcff 	bl	800b5de <USBD_GetEpDesc>
 800abe0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d002      	beq.n	800abee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	2210      	movs	r2, #16
 800abec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d006      	beq.n	800ac02 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abfc:	711a      	strb	r2, [r3, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d006      	beq.n	800ac16 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac10:	711a      	strb	r2, [r3, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2243      	movs	r2, #67	; 0x43
 800ac1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac1c:	4b02      	ldr	r3, [pc, #8]	; (800ac28 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3718      	adds	r7, #24
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	200005ec 	.word	0x200005ec

0800ac2c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac34:	2182      	movs	r1, #130	; 0x82
 800ac36:	4818      	ldr	r0, [pc, #96]	; (800ac98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac38:	f000 fcd1 	bl	800b5de <USBD_GetEpDesc>
 800ac3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ac3e:	2101      	movs	r1, #1
 800ac40:	4815      	ldr	r0, [pc, #84]	; (800ac98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac42:	f000 fccc 	bl	800b5de <USBD_GetEpDesc>
 800ac46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ac48:	2181      	movs	r1, #129	; 0x81
 800ac4a:	4813      	ldr	r0, [pc, #76]	; (800ac98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac4c:	f000 fcc7 	bl	800b5de <USBD_GetEpDesc>
 800ac50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d002      	beq.n	800ac5e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	2210      	movs	r2, #16
 800ac5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d006      	beq.n	800ac72 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	2200      	movs	r2, #0
 800ac68:	711a      	strb	r2, [r3, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f042 0202 	orr.w	r2, r2, #2
 800ac70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d006      	beq.n	800ac86 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	711a      	strb	r2, [r3, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f042 0202 	orr.w	r2, r2, #2
 800ac84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2243      	movs	r2, #67	; 0x43
 800ac8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac8c:	4b02      	ldr	r3, [pc, #8]	; (800ac98 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3718      	adds	r7, #24
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	200005ec 	.word	0x200005ec

0800ac9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b086      	sub	sp, #24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aca4:	2182      	movs	r1, #130	; 0x82
 800aca6:	4818      	ldr	r0, [pc, #96]	; (800ad08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aca8:	f000 fc99 	bl	800b5de <USBD_GetEpDesc>
 800acac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800acae:	2101      	movs	r1, #1
 800acb0:	4815      	ldr	r0, [pc, #84]	; (800ad08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800acb2:	f000 fc94 	bl	800b5de <USBD_GetEpDesc>
 800acb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800acb8:	2181      	movs	r1, #129	; 0x81
 800acba:	4813      	ldr	r0, [pc, #76]	; (800ad08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800acbc:	f000 fc8f 	bl	800b5de <USBD_GetEpDesc>
 800acc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d002      	beq.n	800acce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	2210      	movs	r2, #16
 800accc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d006      	beq.n	800ace2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acdc:	711a      	strb	r2, [r3, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d006      	beq.n	800acf6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2200      	movs	r2, #0
 800acec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acf0:	711a      	strb	r2, [r3, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2243      	movs	r2, #67	; 0x43
 800acfa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800acfc:	4b02      	ldr	r3, [pc, #8]	; (800ad08 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3718      	adds	r7, #24
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	200005ec 	.word	0x200005ec

0800ad0c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	220a      	movs	r2, #10
 800ad18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ad1a:	4b03      	ldr	r3, [pc, #12]	; (800ad28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr
 800ad28:	200005a8 	.word	0x200005a8

0800ad2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d101      	bne.n	800ad40 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	e009      	b.n	800ad54 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	33b0      	adds	r3, #176	; 0xb0
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	4413      	add	r3, r2
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b087      	sub	sp, #28
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	32b0      	adds	r2, #176	; 0xb0
 800ad76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad7a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d101      	bne.n	800ad86 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ad82:	2303      	movs	r3, #3
 800ad84:	e008      	b.n	800ad98 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	68ba      	ldr	r2, [r7, #8]
 800ad8a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	371c      	adds	r7, #28
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	32b0      	adds	r2, #176	; 0xb0
 800adb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adbc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d101      	bne.n	800adc8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800adc4:	2303      	movs	r3, #3
 800adc6:	e004      	b.n	800add2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800add0:	2300      	movs	r3, #0
}
 800add2:	4618      	mov	r0, r3
 800add4:	3714      	adds	r7, #20
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
	...

0800ade0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	32b0      	adds	r2, #176	; 0xb0
 800adf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adf6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	32b0      	adds	r2, #176	; 0xb0
 800ae02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d101      	bne.n	800ae0e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ae0a:	2303      	movs	r3, #3
 800ae0c:	e018      	b.n	800ae40 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	7c1b      	ldrb	r3, [r3, #16]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d10a      	bne.n	800ae2c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae16:	4b0c      	ldr	r3, [pc, #48]	; (800ae48 <USBD_CDC_ReceivePacket+0x68>)
 800ae18:	7819      	ldrb	r1, [r3, #0]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f004 febb 	bl	800fba0 <USBD_LL_PrepareReceive>
 800ae2a:	e008      	b.n	800ae3e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae2c:	4b06      	ldr	r3, [pc, #24]	; (800ae48 <USBD_CDC_ReceivePacket+0x68>)
 800ae2e:	7819      	ldrb	r1, [r3, #0]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae36:	2340      	movs	r3, #64	; 0x40
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f004 feb1 	bl	800fba0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	20000630 	.word	0x20000630

0800ae4c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	4613      	mov	r3, r2
 800ae58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d101      	bne.n	800ae64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ae60:	2303      	movs	r3, #3
 800ae62:	e01f      	b.n	800aea4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2200      	movs	r2, #0
 800ae78:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d003      	beq.n	800ae8a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	68ba      	ldr	r2, [r7, #8]
 800ae86:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	79fa      	ldrb	r2, [r7, #7]
 800ae96:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f004 fd2b 	bl	800f8f4 <USBD_LL_Init>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aea2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3718      	adds	r7, #24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d101      	bne.n	800aec4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aec0:	2303      	movs	r3, #3
 800aec2:	e025      	b.n	800af10 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	32ae      	adds	r2, #174	; 0xae
 800aed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00f      	beq.n	800af00 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	32ae      	adds	r2, #174	; 0xae
 800aeea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef0:	f107 020e 	add.w	r2, r7, #14
 800aef4:	4610      	mov	r0, r2
 800aef6:	4798      	blx	r3
 800aef8:	4602      	mov	r2, r0
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800af06:	1c5a      	adds	r2, r3, #1
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f004 fd33 	bl	800f98c <USBD_LL_Start>
 800af26:	4603      	mov	r3, r0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3708      	adds	r7, #8
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af38:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	370c      	adds	r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b084      	sub	sp, #16
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
 800af4e:	460b      	mov	r3, r1
 800af50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800af52:	2300      	movs	r3, #0
 800af54:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d009      	beq.n	800af74 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	78fa      	ldrb	r2, [r7, #3]
 800af6a:	4611      	mov	r1, r2
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	4798      	blx	r3
 800af70:	4603      	mov	r3, r0
 800af72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af74:	7bfb      	ldrb	r3, [r7, #15]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b084      	sub	sp, #16
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
 800af86:	460b      	mov	r3, r1
 800af88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800af8a:	2300      	movs	r3, #0
 800af8c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	78fa      	ldrb	r2, [r7, #3]
 800af98:	4611      	mov	r1, r2
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	4798      	blx	r3
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d001      	beq.n	800afa8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800afa4:	2303      	movs	r3, #3
 800afa6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800afa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b084      	sub	sp, #16
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
 800afba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800afc2:	6839      	ldr	r1, [r7, #0]
 800afc4:	4618      	mov	r0, r3
 800afc6:	f001 f908 	bl	800c1da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2201      	movs	r2, #1
 800afce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800afd8:	461a      	mov	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800afe6:	f003 031f 	and.w	r3, r3, #31
 800afea:	2b02      	cmp	r3, #2
 800afec:	d01a      	beq.n	800b024 <USBD_LL_SetupStage+0x72>
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d822      	bhi.n	800b038 <USBD_LL_SetupStage+0x86>
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d002      	beq.n	800affc <USBD_LL_SetupStage+0x4a>
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d00a      	beq.n	800b010 <USBD_LL_SetupStage+0x5e>
 800affa:	e01d      	b.n	800b038 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b002:	4619      	mov	r1, r3
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 fb5f 	bl	800b6c8 <USBD_StdDevReq>
 800b00a:	4603      	mov	r3, r0
 800b00c:	73fb      	strb	r3, [r7, #15]
      break;
 800b00e:	e020      	b.n	800b052 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b016:	4619      	mov	r1, r3
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 fbc7 	bl	800b7ac <USBD_StdItfReq>
 800b01e:	4603      	mov	r3, r0
 800b020:	73fb      	strb	r3, [r7, #15]
      break;
 800b022:	e016      	b.n	800b052 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b02a:	4619      	mov	r1, r3
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fc29 	bl	800b884 <USBD_StdEPReq>
 800b032:	4603      	mov	r3, r0
 800b034:	73fb      	strb	r3, [r7, #15]
      break;
 800b036:	e00c      	b.n	800b052 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b03e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b042:	b2db      	uxtb	r3, r3
 800b044:	4619      	mov	r1, r3
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f004 fd00 	bl	800fa4c <USBD_LL_StallEP>
 800b04c:	4603      	mov	r3, r0
 800b04e:	73fb      	strb	r3, [r7, #15]
      break;
 800b050:	bf00      	nop
  }

  return ret;
 800b052:	7bfb      	ldrb	r3, [r7, #15]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	460b      	mov	r3, r1
 800b066:	607a      	str	r2, [r7, #4]
 800b068:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b06a:	2300      	movs	r3, #0
 800b06c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b06e:	7afb      	ldrb	r3, [r7, #11]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d16e      	bne.n	800b152 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b07a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b082:	2b03      	cmp	r3, #3
 800b084:	f040 8098 	bne.w	800b1b8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	689a      	ldr	r2, [r3, #8]
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	429a      	cmp	r2, r3
 800b092:	d913      	bls.n	800b0bc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	689a      	ldr	r2, [r3, #8]
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	1ad2      	subs	r2, r2, r3
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	68da      	ldr	r2, [r3, #12]
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	bf28      	it	cs
 800b0ae:	4613      	movcs	r3, r2
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	6879      	ldr	r1, [r7, #4]
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f001 f984 	bl	800c3c2 <USBD_CtlContinueRx>
 800b0ba:	e07d      	b.n	800b1b8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b0c2:	f003 031f 	and.w	r3, r3, #31
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d014      	beq.n	800b0f4 <USBD_LL_DataOutStage+0x98>
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	d81d      	bhi.n	800b10a <USBD_LL_DataOutStage+0xae>
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d002      	beq.n	800b0d8 <USBD_LL_DataOutStage+0x7c>
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d003      	beq.n	800b0de <USBD_LL_DataOutStage+0x82>
 800b0d6:	e018      	b.n	800b10a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	75bb      	strb	r3, [r7, #22]
            break;
 800b0dc:	e018      	b.n	800b110 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f000 fa5e 	bl	800b5aa <USBD_CoreFindIF>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	75bb      	strb	r3, [r7, #22]
            break;
 800b0f2:	e00d      	b.n	800b110 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	68f8      	ldr	r0, [r7, #12]
 800b100:	f000 fa60 	bl	800b5c4 <USBD_CoreFindEP>
 800b104:	4603      	mov	r3, r0
 800b106:	75bb      	strb	r3, [r7, #22]
            break;
 800b108:	e002      	b.n	800b110 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b10a:	2300      	movs	r3, #0
 800b10c:	75bb      	strb	r3, [r7, #22]
            break;
 800b10e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b110:	7dbb      	ldrb	r3, [r7, #22]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d119      	bne.n	800b14a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	2b03      	cmp	r3, #3
 800b120:	d113      	bne.n	800b14a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b122:	7dba      	ldrb	r2, [r7, #22]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	32ae      	adds	r2, #174	; 0xae
 800b128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b12c:	691b      	ldr	r3, [r3, #16]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00b      	beq.n	800b14a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b132:	7dba      	ldrb	r2, [r7, #22]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b13a:	7dba      	ldrb	r2, [r7, #22]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	32ae      	adds	r2, #174	; 0xae
 800b140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f001 f94a 	bl	800c3e4 <USBD_CtlSendStatus>
 800b150:	e032      	b.n	800b1b8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b152:	7afb      	ldrb	r3, [r7, #11]
 800b154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	4619      	mov	r1, r3
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f000 fa31 	bl	800b5c4 <USBD_CoreFindEP>
 800b162:	4603      	mov	r3, r0
 800b164:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b166:	7dbb      	ldrb	r3, [r7, #22]
 800b168:	2bff      	cmp	r3, #255	; 0xff
 800b16a:	d025      	beq.n	800b1b8 <USBD_LL_DataOutStage+0x15c>
 800b16c:	7dbb      	ldrb	r3, [r7, #22]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d122      	bne.n	800b1b8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	2b03      	cmp	r3, #3
 800b17c:	d117      	bne.n	800b1ae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b17e:	7dba      	ldrb	r2, [r7, #22]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	32ae      	adds	r2, #174	; 0xae
 800b184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b188:	699b      	ldr	r3, [r3, #24]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00f      	beq.n	800b1ae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b18e:	7dba      	ldrb	r2, [r7, #22]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b196:	7dba      	ldrb	r2, [r7, #22]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	32ae      	adds	r2, #174	; 0xae
 800b19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a0:	699b      	ldr	r3, [r3, #24]
 800b1a2:	7afa      	ldrb	r2, [r7, #11]
 800b1a4:	4611      	mov	r1, r2
 800b1a6:	68f8      	ldr	r0, [r7, #12]
 800b1a8:	4798      	blx	r3
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b1ae:	7dfb      	ldrb	r3, [r7, #23]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d001      	beq.n	800b1b8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b1b4:	7dfb      	ldrb	r3, [r7, #23]
 800b1b6:	e000      	b.n	800b1ba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3718      	adds	r7, #24
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b086      	sub	sp, #24
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	60f8      	str	r0, [r7, #12]
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	607a      	str	r2, [r7, #4]
 800b1ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b1d0:	7afb      	ldrb	r3, [r7, #11]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d16f      	bne.n	800b2b6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	3314      	adds	r3, #20
 800b1da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b1e2:	2b02      	cmp	r3, #2
 800b1e4:	d15a      	bne.n	800b29c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	689a      	ldr	r2, [r3, #8]
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d914      	bls.n	800b21c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	689a      	ldr	r2, [r3, #8]
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	1ad2      	subs	r2, r2, r3
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	461a      	mov	r2, r3
 800b206:	6879      	ldr	r1, [r7, #4]
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f001 f8ac 	bl	800c366 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b20e:	2300      	movs	r3, #0
 800b210:	2200      	movs	r2, #0
 800b212:	2100      	movs	r1, #0
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f004 fcc3 	bl	800fba0 <USBD_LL_PrepareReceive>
 800b21a:	e03f      	b.n	800b29c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	68da      	ldr	r2, [r3, #12]
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	429a      	cmp	r2, r3
 800b226:	d11c      	bne.n	800b262 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	685a      	ldr	r2, [r3, #4]
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b230:	429a      	cmp	r2, r3
 800b232:	d316      	bcc.n	800b262 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	685a      	ldr	r2, [r3, #4]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b23e:	429a      	cmp	r2, r3
 800b240:	d20f      	bcs.n	800b262 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b242:	2200      	movs	r2, #0
 800b244:	2100      	movs	r1, #0
 800b246:	68f8      	ldr	r0, [r7, #12]
 800b248:	f001 f88d 	bl	800c366 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2200      	movs	r2, #0
 800b250:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b254:	2300      	movs	r3, #0
 800b256:	2200      	movs	r2, #0
 800b258:	2100      	movs	r1, #0
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f004 fca0 	bl	800fba0 <USBD_LL_PrepareReceive>
 800b260:	e01c      	b.n	800b29c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	2b03      	cmp	r3, #3
 800b26c:	d10f      	bne.n	800b28e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d009      	beq.n	800b28e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b28e:	2180      	movs	r1, #128	; 0x80
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f004 fbdb 	bl	800fa4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b296:	68f8      	ldr	r0, [r7, #12]
 800b298:	f001 f8b7 	bl	800c40a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d03a      	beq.n	800b31c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b2a6:	68f8      	ldr	r0, [r7, #12]
 800b2a8:	f7ff fe42 	bl	800af30 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b2b4:	e032      	b.n	800b31c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b2b6:	7afb      	ldrb	r3, [r7, #11]
 800b2b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	4619      	mov	r1, r3
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f000 f97f 	bl	800b5c4 <USBD_CoreFindEP>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2ca:	7dfb      	ldrb	r3, [r7, #23]
 800b2cc:	2bff      	cmp	r3, #255	; 0xff
 800b2ce:	d025      	beq.n	800b31c <USBD_LL_DataInStage+0x15a>
 800b2d0:	7dfb      	ldrb	r3, [r7, #23]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d122      	bne.n	800b31c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	2b03      	cmp	r3, #3
 800b2e0:	d11c      	bne.n	800b31c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b2e2:	7dfa      	ldrb	r2, [r7, #23]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	32ae      	adds	r2, #174	; 0xae
 800b2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ec:	695b      	ldr	r3, [r3, #20]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d014      	beq.n	800b31c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b2f2:	7dfa      	ldrb	r2, [r7, #23]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b2fa:	7dfa      	ldrb	r2, [r7, #23]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	32ae      	adds	r2, #174	; 0xae
 800b300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b304:	695b      	ldr	r3, [r3, #20]
 800b306:	7afa      	ldrb	r2, [r7, #11]
 800b308:	4611      	mov	r1, r2
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	4798      	blx	r3
 800b30e:	4603      	mov	r3, r0
 800b310:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b312:	7dbb      	ldrb	r3, [r7, #22]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d001      	beq.n	800b31c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b318:	7dbb      	ldrb	r3, [r7, #22]
 800b31a:	e000      	b.n	800b31e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3718      	adds	r7, #24
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b084      	sub	sp, #16
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b32e:	2300      	movs	r3, #0
 800b330:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2201      	movs	r2, #1
 800b336:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d014      	beq.n	800b38c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00e      	beq.n	800b38c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	6852      	ldr	r2, [r2, #4]
 800b37a:	b2d2      	uxtb	r2, r2
 800b37c:	4611      	mov	r1, r2
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	4798      	blx	r3
 800b382:	4603      	mov	r3, r0
 800b384:	2b00      	cmp	r3, #0
 800b386:	d001      	beq.n	800b38c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b388:	2303      	movs	r3, #3
 800b38a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b38c:	2340      	movs	r3, #64	; 0x40
 800b38e:	2200      	movs	r2, #0
 800b390:	2100      	movs	r1, #0
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f004 fb15 	bl	800f9c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2240      	movs	r2, #64	; 0x40
 800b3a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b3a8:	2340      	movs	r3, #64	; 0x40
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	2180      	movs	r1, #128	; 0x80
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f004 fb07 	bl	800f9c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2240      	movs	r2, #64	; 0x40
 800b3be:	621a      	str	r2, [r3, #32]

  return ret;
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b3ca:	b480      	push	{r7}
 800b3cc:	b083      	sub	sp, #12
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	78fa      	ldrb	r2, [r7, #3]
 800b3da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b083      	sub	sp, #12
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3f8:	b2da      	uxtb	r2, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2204      	movs	r2, #4
 800b404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	370c      	adds	r7, #12
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr

0800b416 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b416:	b480      	push	{r7}
 800b418:	b083      	sub	sp, #12
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b424:	b2db      	uxtb	r3, r3
 800b426:	2b04      	cmp	r3, #4
 800b428:	d106      	bne.n	800b438 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b430:	b2da      	uxtb	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b438:	2300      	movs	r3, #0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	370c      	adds	r7, #12
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr

0800b446 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b446:	b580      	push	{r7, lr}
 800b448:	b082      	sub	sp, #8
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b454:	b2db      	uxtb	r3, r3
 800b456:	2b03      	cmp	r3, #3
 800b458:	d110      	bne.n	800b47c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00b      	beq.n	800b47c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b46a:	69db      	ldr	r3, [r3, #28]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d005      	beq.n	800b47c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b476:	69db      	ldr	r3, [r3, #28]
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b47c:	2300      	movs	r3, #0
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3708      	adds	r7, #8
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b082      	sub	sp, #8
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
 800b48e:	460b      	mov	r3, r1
 800b490:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	32ae      	adds	r2, #174	; 0xae
 800b49c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d101      	bne.n	800b4a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	e01c      	b.n	800b4e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	2b03      	cmp	r3, #3
 800b4b2:	d115      	bne.n	800b4e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	32ae      	adds	r2, #174	; 0xae
 800b4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c2:	6a1b      	ldr	r3, [r3, #32]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d00b      	beq.n	800b4e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	32ae      	adds	r2, #174	; 0xae
 800b4d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d6:	6a1b      	ldr	r3, [r3, #32]
 800b4d8:	78fa      	ldrb	r2, [r7, #3]
 800b4da:	4611      	mov	r1, r2
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b082      	sub	sp, #8
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	32ae      	adds	r2, #174	; 0xae
 800b500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d101      	bne.n	800b50c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b508:	2303      	movs	r3, #3
 800b50a:	e01c      	b.n	800b546 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b512:	b2db      	uxtb	r3, r3
 800b514:	2b03      	cmp	r3, #3
 800b516:	d115      	bne.n	800b544 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	32ae      	adds	r2, #174	; 0xae
 800b522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00b      	beq.n	800b544 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	32ae      	adds	r2, #174	; 0xae
 800b536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53c:	78fa      	ldrb	r2, [r7, #3]
 800b53e:	4611      	mov	r1, r2
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3708      	adds	r7, #8
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b54e:	b480      	push	{r7}
 800b550:	b083      	sub	sp, #12
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	370c      	adds	r7, #12
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2201      	movs	r2, #1
 800b574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00e      	beq.n	800b5a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	6852      	ldr	r2, [r2, #4]
 800b58e:	b2d2      	uxtb	r2, r2
 800b590:	4611      	mov	r1, r2
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	4798      	blx	r3
 800b596:	4603      	mov	r3, r0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d001      	beq.n	800b5a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b59c:	2303      	movs	r3, #3
 800b59e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b5aa:	b480      	push	{r7}
 800b5ac:	b083      	sub	sp, #12
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b5b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b5d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	370c      	adds	r7, #12
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr

0800b5de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b086      	sub	sp, #24
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	885b      	ldrh	r3, [r3, #2]
 800b5fa:	b29a      	uxth	r2, r3
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	b29b      	uxth	r3, r3
 800b602:	429a      	cmp	r2, r3
 800b604:	d920      	bls.n	800b648 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b60e:	e013      	b.n	800b638 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b610:	f107 030a 	add.w	r3, r7, #10
 800b614:	4619      	mov	r1, r3
 800b616:	6978      	ldr	r0, [r7, #20]
 800b618:	f000 f81b 	bl	800b652 <USBD_GetNextDesc>
 800b61c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	785b      	ldrb	r3, [r3, #1]
 800b622:	2b05      	cmp	r3, #5
 800b624:	d108      	bne.n	800b638 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	789b      	ldrb	r3, [r3, #2]
 800b62e:	78fa      	ldrb	r2, [r7, #3]
 800b630:	429a      	cmp	r2, r3
 800b632:	d008      	beq.n	800b646 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b634:	2300      	movs	r3, #0
 800b636:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	885b      	ldrh	r3, [r3, #2]
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	897b      	ldrh	r3, [r7, #10]
 800b640:	429a      	cmp	r2, r3
 800b642:	d8e5      	bhi.n	800b610 <USBD_GetEpDesc+0x32>
 800b644:	e000      	b.n	800b648 <USBD_GetEpDesc+0x6a>
          break;
 800b646:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b648:	693b      	ldr	r3, [r7, #16]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3718      	adds	r7, #24
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b652:	b480      	push	{r7}
 800b654:	b085      	sub	sp, #20
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
 800b65a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	881a      	ldrh	r2, [r3, #0]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	b29b      	uxth	r3, r3
 800b66a:	4413      	add	r3, r2
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	461a      	mov	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	4413      	add	r3, r2
 800b67c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b67e:	68fb      	ldr	r3, [r7, #12]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3714      	adds	r7, #20
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b087      	sub	sp, #28
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b6aa:	8a3b      	ldrh	r3, [r7, #16]
 800b6ac:	021b      	lsls	r3, r3, #8
 800b6ae:	b21a      	sxth	r2, r3
 800b6b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	b21b      	sxth	r3, r3
 800b6b8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b6ba:	89fb      	ldrh	r3, [r7, #14]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	371c      	adds	r7, #28
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b6de:	2b40      	cmp	r3, #64	; 0x40
 800b6e0:	d005      	beq.n	800b6ee <USBD_StdDevReq+0x26>
 800b6e2:	2b40      	cmp	r3, #64	; 0x40
 800b6e4:	d857      	bhi.n	800b796 <USBD_StdDevReq+0xce>
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00f      	beq.n	800b70a <USBD_StdDevReq+0x42>
 800b6ea:	2b20      	cmp	r3, #32
 800b6ec:	d153      	bne.n	800b796 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	32ae      	adds	r2, #174	; 0xae
 800b6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	6839      	ldr	r1, [r7, #0]
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	4798      	blx	r3
 800b704:	4603      	mov	r3, r0
 800b706:	73fb      	strb	r3, [r7, #15]
      break;
 800b708:	e04a      	b.n	800b7a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	785b      	ldrb	r3, [r3, #1]
 800b70e:	2b09      	cmp	r3, #9
 800b710:	d83b      	bhi.n	800b78a <USBD_StdDevReq+0xc2>
 800b712:	a201      	add	r2, pc, #4	; (adr r2, 800b718 <USBD_StdDevReq+0x50>)
 800b714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b718:	0800b76d 	.word	0x0800b76d
 800b71c:	0800b781 	.word	0x0800b781
 800b720:	0800b78b 	.word	0x0800b78b
 800b724:	0800b777 	.word	0x0800b777
 800b728:	0800b78b 	.word	0x0800b78b
 800b72c:	0800b74b 	.word	0x0800b74b
 800b730:	0800b741 	.word	0x0800b741
 800b734:	0800b78b 	.word	0x0800b78b
 800b738:	0800b763 	.word	0x0800b763
 800b73c:	0800b755 	.word	0x0800b755
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b740:	6839      	ldr	r1, [r7, #0]
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 fa3c 	bl	800bbc0 <USBD_GetDescriptor>
          break;
 800b748:	e024      	b.n	800b794 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b74a:	6839      	ldr	r1, [r7, #0]
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fba1 	bl	800be94 <USBD_SetAddress>
          break;
 800b752:	e01f      	b.n	800b794 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 fbe0 	bl	800bf1c <USBD_SetConfig>
 800b75c:	4603      	mov	r3, r0
 800b75e:	73fb      	strb	r3, [r7, #15]
          break;
 800b760:	e018      	b.n	800b794 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b762:	6839      	ldr	r1, [r7, #0]
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 fc83 	bl	800c070 <USBD_GetConfig>
          break;
 800b76a:	e013      	b.n	800b794 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b76c:	6839      	ldr	r1, [r7, #0]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fcb4 	bl	800c0dc <USBD_GetStatus>
          break;
 800b774:	e00e      	b.n	800b794 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fce3 	bl	800c144 <USBD_SetFeature>
          break;
 800b77e:	e009      	b.n	800b794 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b780:	6839      	ldr	r1, [r7, #0]
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 fd07 	bl	800c196 <USBD_ClrFeature>
          break;
 800b788:	e004      	b.n	800b794 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b78a:	6839      	ldr	r1, [r7, #0]
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fd5e 	bl	800c24e <USBD_CtlError>
          break;
 800b792:	bf00      	nop
      }
      break;
 800b794:	e004      	b.n	800b7a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fd58 	bl	800c24e <USBD_CtlError>
      break;
 800b79e:	bf00      	nop
  }

  return ret;
 800b7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop

0800b7ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7c2:	2b40      	cmp	r3, #64	; 0x40
 800b7c4:	d005      	beq.n	800b7d2 <USBD_StdItfReq+0x26>
 800b7c6:	2b40      	cmp	r3, #64	; 0x40
 800b7c8:	d852      	bhi.n	800b870 <USBD_StdItfReq+0xc4>
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d001      	beq.n	800b7d2 <USBD_StdItfReq+0x26>
 800b7ce:	2b20      	cmp	r3, #32
 800b7d0:	d14e      	bne.n	800b870 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	2b02      	cmp	r3, #2
 800b7de:	d840      	bhi.n	800b862 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	889b      	ldrh	r3, [r3, #4]
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d836      	bhi.n	800b858 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	889b      	ldrh	r3, [r3, #4]
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7ff fed9 	bl	800b5aa <USBD_CoreFindIF>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7fc:	7bbb      	ldrb	r3, [r7, #14]
 800b7fe:	2bff      	cmp	r3, #255	; 0xff
 800b800:	d01d      	beq.n	800b83e <USBD_StdItfReq+0x92>
 800b802:	7bbb      	ldrb	r3, [r7, #14]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d11a      	bne.n	800b83e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b808:	7bba      	ldrb	r2, [r7, #14]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	32ae      	adds	r2, #174	; 0xae
 800b80e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00f      	beq.n	800b838 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b818:	7bba      	ldrb	r2, [r7, #14]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b820:	7bba      	ldrb	r2, [r7, #14]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	32ae      	adds	r2, #174	; 0xae
 800b826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	4798      	blx	r3
 800b832:	4603      	mov	r3, r0
 800b834:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b836:	e004      	b.n	800b842 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b838:	2303      	movs	r3, #3
 800b83a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b83c:	e001      	b.n	800b842 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b83e:	2303      	movs	r3, #3
 800b840:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	88db      	ldrh	r3, [r3, #6]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d110      	bne.n	800b86c <USBD_StdItfReq+0xc0>
 800b84a:	7bfb      	ldrb	r3, [r7, #15]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10d      	bne.n	800b86c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 fdc7 	bl	800c3e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b856:	e009      	b.n	800b86c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 fcf7 	bl	800c24e <USBD_CtlError>
          break;
 800b860:	e004      	b.n	800b86c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b862:	6839      	ldr	r1, [r7, #0]
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 fcf2 	bl	800c24e <USBD_CtlError>
          break;
 800b86a:	e000      	b.n	800b86e <USBD_StdItfReq+0xc2>
          break;
 800b86c:	bf00      	nop
      }
      break;
 800b86e:	e004      	b.n	800b87a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b870:	6839      	ldr	r1, [r7, #0]
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 fceb 	bl	800c24e <USBD_CtlError>
      break;
 800b878:	bf00      	nop
  }

  return ret;
 800b87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b88e:	2300      	movs	r3, #0
 800b890:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	889b      	ldrh	r3, [r3, #4]
 800b896:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8a0:	2b40      	cmp	r3, #64	; 0x40
 800b8a2:	d007      	beq.n	800b8b4 <USBD_StdEPReq+0x30>
 800b8a4:	2b40      	cmp	r3, #64	; 0x40
 800b8a6:	f200 817f 	bhi.w	800bba8 <USBD_StdEPReq+0x324>
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d02a      	beq.n	800b904 <USBD_StdEPReq+0x80>
 800b8ae:	2b20      	cmp	r3, #32
 800b8b0:	f040 817a 	bne.w	800bba8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b8b4:	7bbb      	ldrb	r3, [r7, #14]
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f7ff fe83 	bl	800b5c4 <USBD_CoreFindEP>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8c2:	7b7b      	ldrb	r3, [r7, #13]
 800b8c4:	2bff      	cmp	r3, #255	; 0xff
 800b8c6:	f000 8174 	beq.w	800bbb2 <USBD_StdEPReq+0x32e>
 800b8ca:	7b7b      	ldrb	r3, [r7, #13]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f040 8170 	bne.w	800bbb2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b8d2:	7b7a      	ldrb	r2, [r7, #13]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b8da:	7b7a      	ldrb	r2, [r7, #13]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	32ae      	adds	r2, #174	; 0xae
 800b8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	f000 8163 	beq.w	800bbb2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b8ec:	7b7a      	ldrb	r2, [r7, #13]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	32ae      	adds	r2, #174	; 0xae
 800b8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	6839      	ldr	r1, [r7, #0]
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	4798      	blx	r3
 800b8fe:	4603      	mov	r3, r0
 800b900:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b902:	e156      	b.n	800bbb2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	785b      	ldrb	r3, [r3, #1]
 800b908:	2b03      	cmp	r3, #3
 800b90a:	d008      	beq.n	800b91e <USBD_StdEPReq+0x9a>
 800b90c:	2b03      	cmp	r3, #3
 800b90e:	f300 8145 	bgt.w	800bb9c <USBD_StdEPReq+0x318>
 800b912:	2b00      	cmp	r3, #0
 800b914:	f000 809b 	beq.w	800ba4e <USBD_StdEPReq+0x1ca>
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d03c      	beq.n	800b996 <USBD_StdEPReq+0x112>
 800b91c:	e13e      	b.n	800bb9c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b924:	b2db      	uxtb	r3, r3
 800b926:	2b02      	cmp	r3, #2
 800b928:	d002      	beq.n	800b930 <USBD_StdEPReq+0xac>
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d016      	beq.n	800b95c <USBD_StdEPReq+0xd8>
 800b92e:	e02c      	b.n	800b98a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b930:	7bbb      	ldrb	r3, [r7, #14]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00d      	beq.n	800b952 <USBD_StdEPReq+0xce>
 800b936:	7bbb      	ldrb	r3, [r7, #14]
 800b938:	2b80      	cmp	r3, #128	; 0x80
 800b93a:	d00a      	beq.n	800b952 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b93c:	7bbb      	ldrb	r3, [r7, #14]
 800b93e:	4619      	mov	r1, r3
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f004 f883 	bl	800fa4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b946:	2180      	movs	r1, #128	; 0x80
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f004 f87f 	bl	800fa4c <USBD_LL_StallEP>
 800b94e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b950:	e020      	b.n	800b994 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b952:	6839      	ldr	r1, [r7, #0]
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 fc7a 	bl	800c24e <USBD_CtlError>
              break;
 800b95a:	e01b      	b.n	800b994 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	885b      	ldrh	r3, [r3, #2]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d10e      	bne.n	800b982 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b964:	7bbb      	ldrb	r3, [r7, #14]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00b      	beq.n	800b982 <USBD_StdEPReq+0xfe>
 800b96a:	7bbb      	ldrb	r3, [r7, #14]
 800b96c:	2b80      	cmp	r3, #128	; 0x80
 800b96e:	d008      	beq.n	800b982 <USBD_StdEPReq+0xfe>
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	88db      	ldrh	r3, [r3, #6]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d104      	bne.n	800b982 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b978:	7bbb      	ldrb	r3, [r7, #14]
 800b97a:	4619      	mov	r1, r3
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f004 f865 	bl	800fa4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fd2e 	bl	800c3e4 <USBD_CtlSendStatus>

              break;
 800b988:	e004      	b.n	800b994 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b98a:	6839      	ldr	r1, [r7, #0]
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 fc5e 	bl	800c24e <USBD_CtlError>
              break;
 800b992:	bf00      	nop
          }
          break;
 800b994:	e107      	b.n	800bba6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d002      	beq.n	800b9a8 <USBD_StdEPReq+0x124>
 800b9a2:	2b03      	cmp	r3, #3
 800b9a4:	d016      	beq.n	800b9d4 <USBD_StdEPReq+0x150>
 800b9a6:	e04b      	b.n	800ba40 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9a8:	7bbb      	ldrb	r3, [r7, #14]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00d      	beq.n	800b9ca <USBD_StdEPReq+0x146>
 800b9ae:	7bbb      	ldrb	r3, [r7, #14]
 800b9b0:	2b80      	cmp	r3, #128	; 0x80
 800b9b2:	d00a      	beq.n	800b9ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9b4:	7bbb      	ldrb	r3, [r7, #14]
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f004 f847 	bl	800fa4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9be:	2180      	movs	r1, #128	; 0x80
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f004 f843 	bl	800fa4c <USBD_LL_StallEP>
 800b9c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9c8:	e040      	b.n	800ba4c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b9ca:	6839      	ldr	r1, [r7, #0]
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 fc3e 	bl	800c24e <USBD_CtlError>
              break;
 800b9d2:	e03b      	b.n	800ba4c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	885b      	ldrh	r3, [r3, #2]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d136      	bne.n	800ba4a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d004      	beq.n	800b9f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b9e6:	7bbb      	ldrb	r3, [r7, #14]
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f004 f84d 	bl	800fa8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 fcf7 	bl	800c3e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b9f6:	7bbb      	ldrb	r3, [r7, #14]
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f7ff fde2 	bl	800b5c4 <USBD_CoreFindEP>
 800ba00:	4603      	mov	r3, r0
 800ba02:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba04:	7b7b      	ldrb	r3, [r7, #13]
 800ba06:	2bff      	cmp	r3, #255	; 0xff
 800ba08:	d01f      	beq.n	800ba4a <USBD_StdEPReq+0x1c6>
 800ba0a:	7b7b      	ldrb	r3, [r7, #13]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d11c      	bne.n	800ba4a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ba10:	7b7a      	ldrb	r2, [r7, #13]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ba18:	7b7a      	ldrb	r2, [r7, #13]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	32ae      	adds	r2, #174	; 0xae
 800ba1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d010      	beq.n	800ba4a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ba28:	7b7a      	ldrb	r2, [r7, #13]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	32ae      	adds	r2, #174	; 0xae
 800ba2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	6839      	ldr	r1, [r7, #0]
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	4798      	blx	r3
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ba3e:	e004      	b.n	800ba4a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 fc03 	bl	800c24e <USBD_CtlError>
              break;
 800ba48:	e000      	b.n	800ba4c <USBD_StdEPReq+0x1c8>
              break;
 800ba4a:	bf00      	nop
          }
          break;
 800ba4c:	e0ab      	b.n	800bba6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	2b02      	cmp	r3, #2
 800ba58:	d002      	beq.n	800ba60 <USBD_StdEPReq+0x1dc>
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d032      	beq.n	800bac4 <USBD_StdEPReq+0x240>
 800ba5e:	e097      	b.n	800bb90 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba60:	7bbb      	ldrb	r3, [r7, #14]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d007      	beq.n	800ba76 <USBD_StdEPReq+0x1f2>
 800ba66:	7bbb      	ldrb	r3, [r7, #14]
 800ba68:	2b80      	cmp	r3, #128	; 0x80
 800ba6a:	d004      	beq.n	800ba76 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ba6c:	6839      	ldr	r1, [r7, #0]
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 fbed 	bl	800c24e <USBD_CtlError>
                break;
 800ba74:	e091      	b.n	800bb9a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	da0b      	bge.n	800ba96 <USBD_StdEPReq+0x212>
 800ba7e:	7bbb      	ldrb	r3, [r7, #14]
 800ba80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba84:	4613      	mov	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4413      	add	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	3310      	adds	r3, #16
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	4413      	add	r3, r2
 800ba92:	3304      	adds	r3, #4
 800ba94:	e00b      	b.n	800baae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba96:	7bbb      	ldrb	r3, [r7, #14]
 800ba98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4413      	add	r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	4413      	add	r3, r2
 800baac:	3304      	adds	r3, #4
 800baae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	2200      	movs	r2, #0
 800bab4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	2202      	movs	r2, #2
 800baba:	4619      	mov	r1, r3
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 fc37 	bl	800c330 <USBD_CtlSendData>
              break;
 800bac2:	e06a      	b.n	800bb9a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	da11      	bge.n	800baf0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bacc:	7bbb      	ldrb	r3, [r7, #14]
 800bace:	f003 020f 	and.w	r2, r3, #15
 800bad2:	6879      	ldr	r1, [r7, #4]
 800bad4:	4613      	mov	r3, r2
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	4413      	add	r3, r2
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	440b      	add	r3, r1
 800bade:	3324      	adds	r3, #36	; 0x24
 800bae0:	881b      	ldrh	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d117      	bne.n	800bb16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bae6:	6839      	ldr	r1, [r7, #0]
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 fbb0 	bl	800c24e <USBD_CtlError>
                  break;
 800baee:	e054      	b.n	800bb9a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800baf0:	7bbb      	ldrb	r3, [r7, #14]
 800baf2:	f003 020f 	and.w	r2, r3, #15
 800baf6:	6879      	ldr	r1, [r7, #4]
 800baf8:	4613      	mov	r3, r2
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	4413      	add	r3, r2
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	440b      	add	r3, r1
 800bb02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bb06:	881b      	ldrh	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d104      	bne.n	800bb16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bb0c:	6839      	ldr	r1, [r7, #0]
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 fb9d 	bl	800c24e <USBD_CtlError>
                  break;
 800bb14:	e041      	b.n	800bb9a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	da0b      	bge.n	800bb36 <USBD_StdEPReq+0x2b2>
 800bb1e:	7bbb      	ldrb	r3, [r7, #14]
 800bb20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb24:	4613      	mov	r3, r2
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	4413      	add	r3, r2
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	3310      	adds	r3, #16
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	4413      	add	r3, r2
 800bb32:	3304      	adds	r3, #4
 800bb34:	e00b      	b.n	800bb4e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb36:	7bbb      	ldrb	r3, [r7, #14]
 800bb38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4413      	add	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	3304      	adds	r3, #4
 800bb4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bb50:	7bbb      	ldrb	r3, [r7, #14]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d002      	beq.n	800bb5c <USBD_StdEPReq+0x2d8>
 800bb56:	7bbb      	ldrb	r3, [r7, #14]
 800bb58:	2b80      	cmp	r3, #128	; 0x80
 800bb5a:	d103      	bne.n	800bb64 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	601a      	str	r2, [r3, #0]
 800bb62:	e00e      	b.n	800bb82 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bb64:	7bbb      	ldrb	r3, [r7, #14]
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f003 ffad 	bl	800fac8 <USBD_LL_IsStallEP>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d003      	beq.n	800bb7c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	2201      	movs	r2, #1
 800bb78:	601a      	str	r2, [r3, #0]
 800bb7a:	e002      	b.n	800bb82 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	2202      	movs	r2, #2
 800bb86:	4619      	mov	r1, r3
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 fbd1 	bl	800c330 <USBD_CtlSendData>
              break;
 800bb8e:	e004      	b.n	800bb9a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bb90:	6839      	ldr	r1, [r7, #0]
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 fb5b 	bl	800c24e <USBD_CtlError>
              break;
 800bb98:	bf00      	nop
          }
          break;
 800bb9a:	e004      	b.n	800bba6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bb9c:	6839      	ldr	r1, [r7, #0]
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fb55 	bl	800c24e <USBD_CtlError>
          break;
 800bba4:	bf00      	nop
      }
      break;
 800bba6:	e005      	b.n	800bbb4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bba8:	6839      	ldr	r1, [r7, #0]
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 fb4f 	bl	800c24e <USBD_CtlError>
      break;
 800bbb0:	e000      	b.n	800bbb4 <USBD_StdEPReq+0x330>
      break;
 800bbb2:	bf00      	nop
  }

  return ret;
 800bbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
	...

0800bbc0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	885b      	ldrh	r3, [r3, #2]
 800bbda:	0a1b      	lsrs	r3, r3, #8
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	2b06      	cmp	r3, #6
 800bbe2:	f200 8128 	bhi.w	800be36 <USBD_GetDescriptor+0x276>
 800bbe6:	a201      	add	r2, pc, #4	; (adr r2, 800bbec <USBD_GetDescriptor+0x2c>)
 800bbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbec:	0800bc09 	.word	0x0800bc09
 800bbf0:	0800bc21 	.word	0x0800bc21
 800bbf4:	0800bc61 	.word	0x0800bc61
 800bbf8:	0800be37 	.word	0x0800be37
 800bbfc:	0800be37 	.word	0x0800be37
 800bc00:	0800bdd7 	.word	0x0800bdd7
 800bc04:	0800be03 	.word	0x0800be03
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	7c12      	ldrb	r2, [r2, #16]
 800bc14:	f107 0108 	add.w	r1, r7, #8
 800bc18:	4610      	mov	r0, r2
 800bc1a:	4798      	blx	r3
 800bc1c:	60f8      	str	r0, [r7, #12]
      break;
 800bc1e:	e112      	b.n	800be46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	7c1b      	ldrb	r3, [r3, #16]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10d      	bne.n	800bc44 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc30:	f107 0208 	add.w	r2, r7, #8
 800bc34:	4610      	mov	r0, r2
 800bc36:	4798      	blx	r3
 800bc38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	2202      	movs	r2, #2
 800bc40:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bc42:	e100      	b.n	800be46 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4c:	f107 0208 	add.w	r2, r7, #8
 800bc50:	4610      	mov	r0, r2
 800bc52:	4798      	blx	r3
 800bc54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	2202      	movs	r2, #2
 800bc5c:	701a      	strb	r2, [r3, #0]
      break;
 800bc5e:	e0f2      	b.n	800be46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	885b      	ldrh	r3, [r3, #2]
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	2b05      	cmp	r3, #5
 800bc68:	f200 80ac 	bhi.w	800bdc4 <USBD_GetDescriptor+0x204>
 800bc6c:	a201      	add	r2, pc, #4	; (adr r2, 800bc74 <USBD_GetDescriptor+0xb4>)
 800bc6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc72:	bf00      	nop
 800bc74:	0800bc8d 	.word	0x0800bc8d
 800bc78:	0800bcc1 	.word	0x0800bcc1
 800bc7c:	0800bcf5 	.word	0x0800bcf5
 800bc80:	0800bd29 	.word	0x0800bd29
 800bc84:	0800bd5d 	.word	0x0800bd5d
 800bc88:	0800bd91 	.word	0x0800bd91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00b      	beq.n	800bcb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	7c12      	ldrb	r2, [r2, #16]
 800bca4:	f107 0108 	add.w	r1, r7, #8
 800bca8:	4610      	mov	r0, r2
 800bcaa:	4798      	blx	r3
 800bcac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcae:	e091      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcb0:	6839      	ldr	r1, [r7, #0]
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 facb 	bl	800c24e <USBD_CtlError>
            err++;
 800bcb8:	7afb      	ldrb	r3, [r7, #11]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	72fb      	strb	r3, [r7, #11]
          break;
 800bcbe:	e089      	b.n	800bdd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00b      	beq.n	800bce4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	7c12      	ldrb	r2, [r2, #16]
 800bcd8:	f107 0108 	add.w	r1, r7, #8
 800bcdc:	4610      	mov	r0, r2
 800bcde:	4798      	blx	r3
 800bce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bce2:	e077      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bce4:	6839      	ldr	r1, [r7, #0]
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 fab1 	bl	800c24e <USBD_CtlError>
            err++;
 800bcec:	7afb      	ldrb	r3, [r7, #11]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	72fb      	strb	r3, [r7, #11]
          break;
 800bcf2:	e06f      	b.n	800bdd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00b      	beq.n	800bd18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	7c12      	ldrb	r2, [r2, #16]
 800bd0c:	f107 0108 	add.w	r1, r7, #8
 800bd10:	4610      	mov	r0, r2
 800bd12:	4798      	blx	r3
 800bd14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd16:	e05d      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd18:	6839      	ldr	r1, [r7, #0]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 fa97 	bl	800c24e <USBD_CtlError>
            err++;
 800bd20:	7afb      	ldrb	r3, [r7, #11]
 800bd22:	3301      	adds	r3, #1
 800bd24:	72fb      	strb	r3, [r7, #11]
          break;
 800bd26:	e055      	b.n	800bdd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd2e:	691b      	ldr	r3, [r3, #16]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00b      	beq.n	800bd4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd3a:	691b      	ldr	r3, [r3, #16]
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	7c12      	ldrb	r2, [r2, #16]
 800bd40:	f107 0108 	add.w	r1, r7, #8
 800bd44:	4610      	mov	r0, r2
 800bd46:	4798      	blx	r3
 800bd48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd4a:	e043      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd4c:	6839      	ldr	r1, [r7, #0]
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 fa7d 	bl	800c24e <USBD_CtlError>
            err++;
 800bd54:	7afb      	ldrb	r3, [r7, #11]
 800bd56:	3301      	adds	r3, #1
 800bd58:	72fb      	strb	r3, [r7, #11]
          break;
 800bd5a:	e03b      	b.n	800bdd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd62:	695b      	ldr	r3, [r3, #20]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00b      	beq.n	800bd80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd6e:	695b      	ldr	r3, [r3, #20]
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	7c12      	ldrb	r2, [r2, #16]
 800bd74:	f107 0108 	add.w	r1, r7, #8
 800bd78:	4610      	mov	r0, r2
 800bd7a:	4798      	blx	r3
 800bd7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd7e:	e029      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd80:	6839      	ldr	r1, [r7, #0]
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 fa63 	bl	800c24e <USBD_CtlError>
            err++;
 800bd88:	7afb      	ldrb	r3, [r7, #11]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd8e:	e021      	b.n	800bdd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd96:	699b      	ldr	r3, [r3, #24]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00b      	beq.n	800bdb4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bda2:	699b      	ldr	r3, [r3, #24]
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	7c12      	ldrb	r2, [r2, #16]
 800bda8:	f107 0108 	add.w	r1, r7, #8
 800bdac:	4610      	mov	r0, r2
 800bdae:	4798      	blx	r3
 800bdb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdb2:	e00f      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdb4:	6839      	ldr	r1, [r7, #0]
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 fa49 	bl	800c24e <USBD_CtlError>
            err++;
 800bdbc:	7afb      	ldrb	r3, [r7, #11]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	72fb      	strb	r3, [r7, #11]
          break;
 800bdc2:	e007      	b.n	800bdd4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bdc4:	6839      	ldr	r1, [r7, #0]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fa41 	bl	800c24e <USBD_CtlError>
          err++;
 800bdcc:	7afb      	ldrb	r3, [r7, #11]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bdd2:	bf00      	nop
      }
      break;
 800bdd4:	e037      	b.n	800be46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	7c1b      	ldrb	r3, [r3, #16]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d109      	bne.n	800bdf2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bde4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bde6:	f107 0208 	add.w	r2, r7, #8
 800bdea:	4610      	mov	r0, r2
 800bdec:	4798      	blx	r3
 800bdee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdf0:	e029      	b.n	800be46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bdf2:	6839      	ldr	r1, [r7, #0]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 fa2a 	bl	800c24e <USBD_CtlError>
        err++;
 800bdfa:	7afb      	ldrb	r3, [r7, #11]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	72fb      	strb	r3, [r7, #11]
      break;
 800be00:	e021      	b.n	800be46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	7c1b      	ldrb	r3, [r3, #16]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d10d      	bne.n	800be26 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be12:	f107 0208 	add.w	r2, r7, #8
 800be16:	4610      	mov	r0, r2
 800be18:	4798      	blx	r3
 800be1a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	3301      	adds	r3, #1
 800be20:	2207      	movs	r2, #7
 800be22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be24:	e00f      	b.n	800be46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fa10 	bl	800c24e <USBD_CtlError>
        err++;
 800be2e:	7afb      	ldrb	r3, [r7, #11]
 800be30:	3301      	adds	r3, #1
 800be32:	72fb      	strb	r3, [r7, #11]
      break;
 800be34:	e007      	b.n	800be46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800be36:	6839      	ldr	r1, [r7, #0]
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 fa08 	bl	800c24e <USBD_CtlError>
      err++;
 800be3e:	7afb      	ldrb	r3, [r7, #11]
 800be40:	3301      	adds	r3, #1
 800be42:	72fb      	strb	r3, [r7, #11]
      break;
 800be44:	bf00      	nop
  }

  if (err != 0U)
 800be46:	7afb      	ldrb	r3, [r7, #11]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d11e      	bne.n	800be8a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	88db      	ldrh	r3, [r3, #6]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d016      	beq.n	800be82 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800be54:	893b      	ldrh	r3, [r7, #8]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00e      	beq.n	800be78 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	88da      	ldrh	r2, [r3, #6]
 800be5e:	893b      	ldrh	r3, [r7, #8]
 800be60:	4293      	cmp	r3, r2
 800be62:	bf28      	it	cs
 800be64:	4613      	movcs	r3, r2
 800be66:	b29b      	uxth	r3, r3
 800be68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800be6a:	893b      	ldrh	r3, [r7, #8]
 800be6c:	461a      	mov	r2, r3
 800be6e:	68f9      	ldr	r1, [r7, #12]
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 fa5d 	bl	800c330 <USBD_CtlSendData>
 800be76:	e009      	b.n	800be8c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800be78:	6839      	ldr	r1, [r7, #0]
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 f9e7 	bl	800c24e <USBD_CtlError>
 800be80:	e004      	b.n	800be8c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 faae 	bl	800c3e4 <USBD_CtlSendStatus>
 800be88:	e000      	b.n	800be8c <USBD_GetDescriptor+0x2cc>
    return;
 800be8a:	bf00      	nop
  }
}
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop

0800be94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	889b      	ldrh	r3, [r3, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d131      	bne.n	800bf0a <USBD_SetAddress+0x76>
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	88db      	ldrh	r3, [r3, #6]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d12d      	bne.n	800bf0a <USBD_SetAddress+0x76>
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	885b      	ldrh	r3, [r3, #2]
 800beb2:	2b7f      	cmp	r3, #127	; 0x7f
 800beb4:	d829      	bhi.n	800bf0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	885b      	ldrh	r3, [r3, #2]
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bec0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	2b03      	cmp	r3, #3
 800becc:	d104      	bne.n	800bed8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bece:	6839      	ldr	r1, [r7, #0]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 f9bc 	bl	800c24e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bed6:	e01d      	b.n	800bf14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	7bfa      	ldrb	r2, [r7, #15]
 800bedc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bee0:	7bfb      	ldrb	r3, [r7, #15]
 800bee2:	4619      	mov	r1, r3
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f003 fe1b 	bl	800fb20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 fa7a 	bl	800c3e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bef0:	7bfb      	ldrb	r3, [r7, #15]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d004      	beq.n	800bf00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2202      	movs	r2, #2
 800befa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800befe:	e009      	b.n	800bf14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf08:	e004      	b.n	800bf14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf0a:	6839      	ldr	r1, [r7, #0]
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 f99e 	bl	800c24e <USBD_CtlError>
  }
}
 800bf12:	bf00      	nop
 800bf14:	bf00      	nop
 800bf16:	3710      	adds	r7, #16
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf26:	2300      	movs	r3, #0
 800bf28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	885b      	ldrh	r3, [r3, #2]
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	4b4e      	ldr	r3, [pc, #312]	; (800c06c <USBD_SetConfig+0x150>)
 800bf32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf34:	4b4d      	ldr	r3, [pc, #308]	; (800c06c <USBD_SetConfig+0x150>)
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d905      	bls.n	800bf48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 f985 	bl	800c24e <USBD_CtlError>
    return USBD_FAIL;
 800bf44:	2303      	movs	r3, #3
 800bf46:	e08c      	b.n	800c062 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	2b02      	cmp	r3, #2
 800bf52:	d002      	beq.n	800bf5a <USBD_SetConfig+0x3e>
 800bf54:	2b03      	cmp	r3, #3
 800bf56:	d029      	beq.n	800bfac <USBD_SetConfig+0x90>
 800bf58:	e075      	b.n	800c046 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bf5a:	4b44      	ldr	r3, [pc, #272]	; (800c06c <USBD_SetConfig+0x150>)
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d020      	beq.n	800bfa4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bf62:	4b42      	ldr	r3, [pc, #264]	; (800c06c <USBD_SetConfig+0x150>)
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	461a      	mov	r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf6c:	4b3f      	ldr	r3, [pc, #252]	; (800c06c <USBD_SetConfig+0x150>)
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	4619      	mov	r1, r3
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f7fe ffe7 	bl	800af46 <USBD_SetClassConfig>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bf7c:	7bfb      	ldrb	r3, [r7, #15]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d008      	beq.n	800bf94 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bf82:	6839      	ldr	r1, [r7, #0]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 f962 	bl	800c24e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2202      	movs	r2, #2
 800bf8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf92:	e065      	b.n	800c060 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 fa25 	bl	800c3e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2203      	movs	r2, #3
 800bf9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bfa2:	e05d      	b.n	800c060 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fa1d 	bl	800c3e4 <USBD_CtlSendStatus>
      break;
 800bfaa:	e059      	b.n	800c060 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bfac:	4b2f      	ldr	r3, [pc, #188]	; (800c06c <USBD_SetConfig+0x150>)
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d112      	bne.n	800bfda <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2202      	movs	r2, #2
 800bfb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bfbc:	4b2b      	ldr	r3, [pc, #172]	; (800c06c <USBD_SetConfig+0x150>)
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bfc6:	4b29      	ldr	r3, [pc, #164]	; (800c06c <USBD_SetConfig+0x150>)
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	4619      	mov	r1, r3
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f7fe ffd6 	bl	800af7e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 fa06 	bl	800c3e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bfd8:	e042      	b.n	800c060 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bfda:	4b24      	ldr	r3, [pc, #144]	; (800c06c <USBD_SetConfig+0x150>)
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	461a      	mov	r2, r3
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d02a      	beq.n	800c03e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	4619      	mov	r1, r3
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f7fe ffc4 	bl	800af7e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bff6:	4b1d      	ldr	r3, [pc, #116]	; (800c06c <USBD_SetConfig+0x150>)
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	461a      	mov	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c000:	4b1a      	ldr	r3, [pc, #104]	; (800c06c <USBD_SetConfig+0x150>)
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	4619      	mov	r1, r3
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f7fe ff9d 	bl	800af46 <USBD_SetClassConfig>
 800c00c:	4603      	mov	r3, r0
 800c00e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c010:	7bfb      	ldrb	r3, [r7, #15]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00f      	beq.n	800c036 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f918 	bl	800c24e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	b2db      	uxtb	r3, r3
 800c024:	4619      	mov	r1, r3
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f7fe ffa9 	bl	800af7e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2202      	movs	r2, #2
 800c030:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c034:	e014      	b.n	800c060 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 f9d4 	bl	800c3e4 <USBD_CtlSendStatus>
      break;
 800c03c:	e010      	b.n	800c060 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 f9d0 	bl	800c3e4 <USBD_CtlSendStatus>
      break;
 800c044:	e00c      	b.n	800c060 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c046:	6839      	ldr	r1, [r7, #0]
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 f900 	bl	800c24e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c04e:	4b07      	ldr	r3, [pc, #28]	; (800c06c <USBD_SetConfig+0x150>)
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	4619      	mov	r1, r3
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f7fe ff92 	bl	800af7e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c05a:	2303      	movs	r3, #3
 800c05c:	73fb      	strb	r3, [r7, #15]
      break;
 800c05e:	bf00      	nop
  }

  return ret;
 800c060:	7bfb      	ldrb	r3, [r7, #15]
}
 800c062:	4618      	mov	r0, r3
 800c064:	3710      	adds	r7, #16
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	20000934 	.word	0x20000934

0800c070 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	88db      	ldrh	r3, [r3, #6]
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d004      	beq.n	800c08c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c082:	6839      	ldr	r1, [r7, #0]
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 f8e2 	bl	800c24e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c08a:	e023      	b.n	800c0d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c092:	b2db      	uxtb	r3, r3
 800c094:	2b02      	cmp	r3, #2
 800c096:	dc02      	bgt.n	800c09e <USBD_GetConfig+0x2e>
 800c098:	2b00      	cmp	r3, #0
 800c09a:	dc03      	bgt.n	800c0a4 <USBD_GetConfig+0x34>
 800c09c:	e015      	b.n	800c0ca <USBD_GetConfig+0x5a>
 800c09e:	2b03      	cmp	r3, #3
 800c0a0:	d00b      	beq.n	800c0ba <USBD_GetConfig+0x4a>
 800c0a2:	e012      	b.n	800c0ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	3308      	adds	r3, #8
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 f93c 	bl	800c330 <USBD_CtlSendData>
        break;
 800c0b8:	e00c      	b.n	800c0d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	3304      	adds	r3, #4
 800c0be:	2201      	movs	r2, #1
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f000 f934 	bl	800c330 <USBD_CtlSendData>
        break;
 800c0c8:	e004      	b.n	800c0d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f8be 	bl	800c24e <USBD_CtlError>
        break;
 800c0d2:	bf00      	nop
}
 800c0d4:	bf00      	nop
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	3b01      	subs	r3, #1
 800c0f0:	2b02      	cmp	r3, #2
 800c0f2:	d81e      	bhi.n	800c132 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	88db      	ldrh	r3, [r3, #6]
 800c0f8:	2b02      	cmp	r3, #2
 800c0fa:	d004      	beq.n	800c106 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c0fc:	6839      	ldr	r1, [r7, #0]
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 f8a5 	bl	800c24e <USBD_CtlError>
        break;
 800c104:	e01a      	b.n	800c13c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2201      	movs	r2, #1
 800c10a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c112:	2b00      	cmp	r3, #0
 800c114:	d005      	beq.n	800c122 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	68db      	ldr	r3, [r3, #12]
 800c11a:	f043 0202 	orr.w	r2, r3, #2
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	330c      	adds	r3, #12
 800c126:	2202      	movs	r2, #2
 800c128:	4619      	mov	r1, r3
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 f900 	bl	800c330 <USBD_CtlSendData>
      break;
 800c130:	e004      	b.n	800c13c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c132:	6839      	ldr	r1, [r7, #0]
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 f88a 	bl	800c24e <USBD_CtlError>
      break;
 800c13a:	bf00      	nop
  }
}
 800c13c:	bf00      	nop
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	885b      	ldrh	r3, [r3, #2]
 800c152:	2b01      	cmp	r3, #1
 800c154:	d107      	bne.n	800c166 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2201      	movs	r2, #1
 800c15a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 f940 	bl	800c3e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c164:	e013      	b.n	800c18e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	885b      	ldrh	r3, [r3, #2]
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d10b      	bne.n	800c186 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	889b      	ldrh	r3, [r3, #4]
 800c172:	0a1b      	lsrs	r3, r3, #8
 800c174:	b29b      	uxth	r3, r3
 800c176:	b2da      	uxtb	r2, r3
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f930 	bl	800c3e4 <USBD_CtlSendStatus>
}
 800c184:	e003      	b.n	800c18e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 f860 	bl	800c24e <USBD_CtlError>
}
 800c18e:	bf00      	nop
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b082      	sub	sp, #8
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	3b01      	subs	r3, #1
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	d80b      	bhi.n	800c1c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	885b      	ldrh	r3, [r3, #2]
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d10c      	bne.n	800c1d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f910 	bl	800c3e4 <USBD_CtlSendStatus>
      }
      break;
 800c1c4:	e004      	b.n	800c1d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c1c6:	6839      	ldr	r1, [r7, #0]
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 f840 	bl	800c24e <USBD_CtlError>
      break;
 800c1ce:	e000      	b.n	800c1d2 <USBD_ClrFeature+0x3c>
      break;
 800c1d0:	bf00      	nop
  }
}
 800c1d2:	bf00      	nop
 800c1d4:	3708      	adds	r7, #8
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b084      	sub	sp, #16
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	781a      	ldrb	r2, [r3, #0]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	781a      	ldrb	r2, [r3, #0]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	3301      	adds	r3, #1
 800c202:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f7ff fa41 	bl	800b68c <SWAPBYTE>
 800c20a:	4603      	mov	r3, r0
 800c20c:	461a      	mov	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	3301      	adds	r3, #1
 800c216:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	3301      	adds	r3, #1
 800c21c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c21e:	68f8      	ldr	r0, [r7, #12]
 800c220:	f7ff fa34 	bl	800b68c <SWAPBYTE>
 800c224:	4603      	mov	r3, r0
 800c226:	461a      	mov	r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	3301      	adds	r3, #1
 800c230:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	3301      	adds	r3, #1
 800c236:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f7ff fa27 	bl	800b68c <SWAPBYTE>
 800c23e:	4603      	mov	r3, r0
 800c240:	461a      	mov	r2, r3
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	80da      	strh	r2, [r3, #6]
}
 800c246:	bf00      	nop
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b082      	sub	sp, #8
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
 800c256:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c258:	2180      	movs	r1, #128	; 0x80
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f003 fbf6 	bl	800fa4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c260:	2100      	movs	r1, #0
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f003 fbf2 	bl	800fa4c <USBD_LL_StallEP>
}
 800c268:	bf00      	nop
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c27c:	2300      	movs	r3, #0
 800c27e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d036      	beq.n	800c2f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c28a:	6938      	ldr	r0, [r7, #16]
 800c28c:	f000 f836 	bl	800c2fc <USBD_GetLen>
 800c290:	4603      	mov	r3, r0
 800c292:	3301      	adds	r3, #1
 800c294:	b29b      	uxth	r3, r3
 800c296:	005b      	lsls	r3, r3, #1
 800c298:	b29a      	uxth	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c29e:	7dfb      	ldrb	r3, [r7, #23]
 800c2a0:	68ba      	ldr	r2, [r7, #8]
 800c2a2:	4413      	add	r3, r2
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	7812      	ldrb	r2, [r2, #0]
 800c2a8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c2aa:	7dfb      	ldrb	r3, [r7, #23]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c2b0:	7dfb      	ldrb	r3, [r7, #23]
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	2203      	movs	r2, #3
 800c2b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c2ba:	7dfb      	ldrb	r3, [r7, #23]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c2c0:	e013      	b.n	800c2ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c2c2:	7dfb      	ldrb	r3, [r7, #23]
 800c2c4:	68ba      	ldr	r2, [r7, #8]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	693a      	ldr	r2, [r7, #16]
 800c2ca:	7812      	ldrb	r2, [r2, #0]
 800c2cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	613b      	str	r3, [r7, #16]
    idx++;
 800c2d4:	7dfb      	ldrb	r3, [r7, #23]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c2da:	7dfb      	ldrb	r3, [r7, #23]
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	4413      	add	r3, r2
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	701a      	strb	r2, [r3, #0]
    idx++;
 800c2e4:	7dfb      	ldrb	r3, [r7, #23]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1e7      	bne.n	800c2c2 <USBD_GetString+0x52>
 800c2f2:	e000      	b.n	800c2f6 <USBD_GetString+0x86>
    return;
 800c2f4:	bf00      	nop
  }
}
 800c2f6:	3718      	adds	r7, #24
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c304:	2300      	movs	r3, #0
 800c306:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c30c:	e005      	b.n	800c31a <USBD_GetLen+0x1e>
  {
    len++;
 800c30e:	7bfb      	ldrb	r3, [r7, #15]
 800c310:	3301      	adds	r3, #1
 800c312:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	3301      	adds	r3, #1
 800c318:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1f5      	bne.n	800c30e <USBD_GetLen+0x12>
  }

  return len;
 800c322:	7bfb      	ldrb	r3, [r7, #15]
}
 800c324:	4618      	mov	r0, r3
 800c326:	3714      	adds	r7, #20
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2202      	movs	r2, #2
 800c340:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	68ba      	ldr	r2, [r7, #8]
 800c354:	2100      	movs	r1, #0
 800c356:	68f8      	ldr	r0, [r7, #12]
 800c358:	f003 fc01 	bl	800fb5e <USBD_LL_Transmit>

  return USBD_OK;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b084      	sub	sp, #16
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	60f8      	str	r0, [r7, #12]
 800c36e:	60b9      	str	r1, [r7, #8]
 800c370:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	68ba      	ldr	r2, [r7, #8]
 800c376:	2100      	movs	r1, #0
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f003 fbf0 	bl	800fb5e <USBD_LL_Transmit>

  return USBD_OK;
 800c37e:	2300      	movs	r3, #0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2203      	movs	r2, #3
 800c398:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	68ba      	ldr	r2, [r7, #8]
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	f003 fbf4 	bl	800fba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3b8:	2300      	movs	r3, #0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b084      	sub	sp, #16
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	60f8      	str	r0, [r7, #12]
 800c3ca:	60b9      	str	r1, [r7, #8]
 800c3cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f003 fbe3 	bl	800fba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3da:	2300      	movs	r3, #0
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2204      	movs	r2, #4
 800c3f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f003 fbaf 	bl	800fb5e <USBD_LL_Transmit>

  return USBD_OK;
 800c400:	2300      	movs	r3, #0
}
 800c402:	4618      	mov	r0, r3
 800c404:	3708      	adds	r7, #8
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b082      	sub	sp, #8
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2205      	movs	r2, #5
 800c416:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c41a:	2300      	movs	r3, #0
 800c41c:	2200      	movs	r2, #0
 800c41e:	2100      	movs	r1, #0
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f003 fbbd 	bl	800fba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <__NVIC_SetPriority>:
{
 800c430:	b480      	push	{r7}
 800c432:	b083      	sub	sp, #12
 800c434:	af00      	add	r7, sp, #0
 800c436:	4603      	mov	r3, r0
 800c438:	6039      	str	r1, [r7, #0]
 800c43a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c43c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c440:	2b00      	cmp	r3, #0
 800c442:	db0a      	blt.n	800c45a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	b2da      	uxtb	r2, r3
 800c448:	490c      	ldr	r1, [pc, #48]	; (800c47c <__NVIC_SetPriority+0x4c>)
 800c44a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c44e:	0112      	lsls	r2, r2, #4
 800c450:	b2d2      	uxtb	r2, r2
 800c452:	440b      	add	r3, r1
 800c454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c458:	e00a      	b.n	800c470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	b2da      	uxtb	r2, r3
 800c45e:	4908      	ldr	r1, [pc, #32]	; (800c480 <__NVIC_SetPriority+0x50>)
 800c460:	79fb      	ldrb	r3, [r7, #7]
 800c462:	f003 030f 	and.w	r3, r3, #15
 800c466:	3b04      	subs	r3, #4
 800c468:	0112      	lsls	r2, r2, #4
 800c46a:	b2d2      	uxtb	r2, r2
 800c46c:	440b      	add	r3, r1
 800c46e:	761a      	strb	r2, [r3, #24]
}
 800c470:	bf00      	nop
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr
 800c47c:	e000e100 	.word	0xe000e100
 800c480:	e000ed00 	.word	0xe000ed00

0800c484 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c484:	b580      	push	{r7, lr}
 800c486:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c488:	4b05      	ldr	r3, [pc, #20]	; (800c4a0 <SysTick_Handler+0x1c>)
 800c48a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c48c:	f001 feb2 	bl	800e1f4 <xTaskGetSchedulerState>
 800c490:	4603      	mov	r3, r0
 800c492:	2b01      	cmp	r3, #1
 800c494:	d001      	beq.n	800c49a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c496:	f002 fc97 	bl	800edc8 <xPortSysTickHandler>
  }
}
 800c49a:	bf00      	nop
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	e000e010 	.word	0xe000e010

0800c4a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c4a8:	2100      	movs	r1, #0
 800c4aa:	f06f 0004 	mvn.w	r0, #4
 800c4ae:	f7ff ffbf 	bl	800c430 <__NVIC_SetPriority>
#endif
}
 800c4b2:	bf00      	nop
 800c4b4:	bd80      	pop	{r7, pc}
	...

0800c4b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c4b8:	b480      	push	{r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4be:	f3ef 8305 	mrs	r3, IPSR
 800c4c2:	603b      	str	r3, [r7, #0]
  return(result);
 800c4c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d003      	beq.n	800c4d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c4ca:	f06f 0305 	mvn.w	r3, #5
 800c4ce:	607b      	str	r3, [r7, #4]
 800c4d0:	e00c      	b.n	800c4ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c4d2:	4b0a      	ldr	r3, [pc, #40]	; (800c4fc <osKernelInitialize+0x44>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d105      	bne.n	800c4e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c4da:	4b08      	ldr	r3, [pc, #32]	; (800c4fc <osKernelInitialize+0x44>)
 800c4dc:	2201      	movs	r2, #1
 800c4de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	607b      	str	r3, [r7, #4]
 800c4e4:	e002      	b.n	800c4ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c4ec:	687b      	ldr	r3, [r7, #4]
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	370c      	adds	r7, #12
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop
 800c4fc:	20000938 	.word	0x20000938

0800c500 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c506:	f3ef 8305 	mrs	r3, IPSR
 800c50a:	603b      	str	r3, [r7, #0]
  return(result);
 800c50c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d003      	beq.n	800c51a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c512:	f06f 0305 	mvn.w	r3, #5
 800c516:	607b      	str	r3, [r7, #4]
 800c518:	e010      	b.n	800c53c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c51a:	4b0b      	ldr	r3, [pc, #44]	; (800c548 <osKernelStart+0x48>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d109      	bne.n	800c536 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c522:	f7ff ffbf 	bl	800c4a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c526:	4b08      	ldr	r3, [pc, #32]	; (800c548 <osKernelStart+0x48>)
 800c528:	2202      	movs	r2, #2
 800c52a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c52c:	f001 fa1a 	bl	800d964 <vTaskStartScheduler>
      stat = osOK;
 800c530:	2300      	movs	r3, #0
 800c532:	607b      	str	r3, [r7, #4]
 800c534:	e002      	b.n	800c53c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c536:	f04f 33ff 	mov.w	r3, #4294967295
 800c53a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c53c:	687b      	ldr	r3, [r7, #4]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	20000938 	.word	0x20000938

0800c54c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b08e      	sub	sp, #56	; 0x38
 800c550:	af04      	add	r7, sp, #16
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c558:	2300      	movs	r3, #0
 800c55a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c55c:	f3ef 8305 	mrs	r3, IPSR
 800c560:	617b      	str	r3, [r7, #20]
  return(result);
 800c562:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c564:	2b00      	cmp	r3, #0
 800c566:	d17f      	bne.n	800c668 <osThreadNew+0x11c>
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d07c      	beq.n	800c668 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800c56e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c572:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c574:	2318      	movs	r3, #24
 800c576:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c578:	2300      	movs	r3, #0
 800c57a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c57c:	f04f 33ff 	mov.w	r3, #4294967295
 800c580:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d045      	beq.n	800c614 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d002      	beq.n	800c596 <osThreadNew+0x4a>
        name = attr->name;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	699b      	ldr	r3, [r3, #24]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d002      	beq.n	800c5a4 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	699b      	ldr	r3, [r3, #24]
 800c5a2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c5a4:	69fb      	ldr	r3, [r7, #28]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d008      	beq.n	800c5bc <osThreadNew+0x70>
 800c5aa:	69fb      	ldr	r3, [r7, #28]
 800c5ac:	2b38      	cmp	r3, #56	; 0x38
 800c5ae:	d805      	bhi.n	800c5bc <osThreadNew+0x70>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	f003 0301 	and.w	r3, r3, #1
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d001      	beq.n	800c5c0 <osThreadNew+0x74>
        return (NULL);
 800c5bc:	2300      	movs	r3, #0
 800c5be:	e054      	b.n	800c66a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	695b      	ldr	r3, [r3, #20]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d003      	beq.n	800c5d0 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	695b      	ldr	r3, [r3, #20]
 800c5cc:	089b      	lsrs	r3, r3, #2
 800c5ce:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d00e      	beq.n	800c5f6 <osThreadNew+0xaa>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	2b6b      	cmp	r3, #107	; 0x6b
 800c5de:	d90a      	bls.n	800c5f6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d006      	beq.n	800c5f6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	695b      	ldr	r3, [r3, #20]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d002      	beq.n	800c5f6 <osThreadNew+0xaa>
        mem = 1;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	61bb      	str	r3, [r7, #24]
 800c5f4:	e010      	b.n	800c618 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d10c      	bne.n	800c618 <osThreadNew+0xcc>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d108      	bne.n	800c618 <osThreadNew+0xcc>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	691b      	ldr	r3, [r3, #16]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d104      	bne.n	800c618 <osThreadNew+0xcc>
          mem = 0;
 800c60e:	2300      	movs	r3, #0
 800c610:	61bb      	str	r3, [r7, #24]
 800c612:	e001      	b.n	800c618 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800c614:	2300      	movs	r3, #0
 800c616:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d110      	bne.n	800c640 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c626:	9202      	str	r2, [sp, #8]
 800c628:	9301      	str	r3, [sp, #4]
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	9300      	str	r3, [sp, #0]
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	6a3a      	ldr	r2, [r7, #32]
 800c632:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f000 feb9 	bl	800d3ac <xTaskCreateStatic>
 800c63a:	4603      	mov	r3, r0
 800c63c:	613b      	str	r3, [r7, #16]
 800c63e:	e013      	b.n	800c668 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d110      	bne.n	800c668 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c646:	6a3b      	ldr	r3, [r7, #32]
 800c648:	b29a      	uxth	r2, r3
 800c64a:	f107 0310 	add.w	r3, r7, #16
 800c64e:	9301      	str	r3, [sp, #4]
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c658:	68f8      	ldr	r0, [r7, #12]
 800c65a:	f000 ff04 	bl	800d466 <xTaskCreate>
 800c65e:	4603      	mov	r3, r0
 800c660:	2b01      	cmp	r3, #1
 800c662:	d001      	beq.n	800c668 <osThreadNew+0x11c>
            hTask = NULL;
 800c664:	2300      	movs	r3, #0
 800c666:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c668:	693b      	ldr	r3, [r7, #16]
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3728      	adds	r7, #40	; 0x28
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c672:	b580      	push	{r7, lr}
 800c674:	b084      	sub	sp, #16
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c67a:	f3ef 8305 	mrs	r3, IPSR
 800c67e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c680:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c682:	2b00      	cmp	r3, #0
 800c684:	d003      	beq.n	800c68e <osDelay+0x1c>
    stat = osErrorISR;
 800c686:	f06f 0305 	mvn.w	r3, #5
 800c68a:	60fb      	str	r3, [r7, #12]
 800c68c:	e007      	b.n	800c69e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c68e:	2300      	movs	r3, #0
 800c690:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d002      	beq.n	800c69e <osDelay+0x2c>
      vTaskDelay(ticks);
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f001 f829 	bl	800d6f0 <vTaskDelay>
    }
  }

  return (stat);
 800c69e:	68fb      	ldr	r3, [r7, #12]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3710      	adds	r7, #16
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b08a      	sub	sp, #40	; 0x28
 800c6ac:	af02      	add	r7, sp, #8
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6b8:	f3ef 8305 	mrs	r3, IPSR
 800c6bc:	613b      	str	r3, [r7, #16]
  return(result);
 800c6be:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d15f      	bne.n	800c784 <osMessageQueueNew+0xdc>
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d05c      	beq.n	800c784 <osMessageQueueNew+0xdc>
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d059      	beq.n	800c784 <osMessageQueueNew+0xdc>
    mem = -1;
 800c6d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c6d4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d029      	beq.n	800c730 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d012      	beq.n	800c70a <osMessageQueueNew+0x62>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	2b4f      	cmp	r3, #79	; 0x4f
 800c6ea:	d90e      	bls.n	800c70a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00a      	beq.n	800c70a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	695a      	ldr	r2, [r3, #20]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	68b9      	ldr	r1, [r7, #8]
 800c6fc:	fb01 f303 	mul.w	r3, r1, r3
 800c700:	429a      	cmp	r2, r3
 800c702:	d302      	bcc.n	800c70a <osMessageQueueNew+0x62>
        mem = 1;
 800c704:	2301      	movs	r3, #1
 800c706:	61bb      	str	r3, [r7, #24]
 800c708:	e014      	b.n	800c734 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d110      	bne.n	800c734 <osMessageQueueNew+0x8c>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d10c      	bne.n	800c734 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d108      	bne.n	800c734 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	695b      	ldr	r3, [r3, #20]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d104      	bne.n	800c734 <osMessageQueueNew+0x8c>
          mem = 0;
 800c72a:	2300      	movs	r3, #0
 800c72c:	61bb      	str	r3, [r7, #24]
 800c72e:	e001      	b.n	800c734 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c730:	2300      	movs	r3, #0
 800c732:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c734:	69bb      	ldr	r3, [r7, #24]
 800c736:	2b01      	cmp	r3, #1
 800c738:	d10b      	bne.n	800c752 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	691a      	ldr	r2, [r3, #16]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	2100      	movs	r1, #0
 800c744:	9100      	str	r1, [sp, #0]
 800c746:	68b9      	ldr	r1, [r7, #8]
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	f000 f971 	bl	800ca30 <xQueueGenericCreateStatic>
 800c74e:	61f8      	str	r0, [r7, #28]
 800c750:	e008      	b.n	800c764 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c752:	69bb      	ldr	r3, [r7, #24]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d105      	bne.n	800c764 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c758:	2200      	movs	r2, #0
 800c75a:	68b9      	ldr	r1, [r7, #8]
 800c75c:	68f8      	ldr	r0, [r7, #12]
 800c75e:	f000 f9df 	bl	800cb20 <xQueueGenericCreate>
 800c762:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00c      	beq.n	800c784 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d003      	beq.n	800c778 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	617b      	str	r3, [r7, #20]
 800c776:	e001      	b.n	800c77c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c778:	2300      	movs	r3, #0
 800c77a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c77c:	6979      	ldr	r1, [r7, #20]
 800c77e:	69f8      	ldr	r0, [r7, #28]
 800c780:	f000 fdb6 	bl	800d2f0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c784:	69fb      	ldr	r3, [r7, #28]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3720      	adds	r7, #32
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
	...

0800c790 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	4a07      	ldr	r2, [pc, #28]	; (800c7bc <vApplicationGetIdleTaskMemory+0x2c>)
 800c7a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	4a06      	ldr	r2, [pc, #24]	; (800c7c0 <vApplicationGetIdleTaskMemory+0x30>)
 800c7a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c7ae:	601a      	str	r2, [r3, #0]
}
 800c7b0:	bf00      	nop
 800c7b2:	3714      	adds	r7, #20
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr
 800c7bc:	2000093c 	.word	0x2000093c
 800c7c0:	200009a8 	.word	0x200009a8

0800c7c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c7c4:	b480      	push	{r7}
 800c7c6:	b085      	sub	sp, #20
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	4a07      	ldr	r2, [pc, #28]	; (800c7f0 <vApplicationGetTimerTaskMemory+0x2c>)
 800c7d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	4a06      	ldr	r2, [pc, #24]	; (800c7f4 <vApplicationGetTimerTaskMemory+0x30>)
 800c7da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7e2:	601a      	str	r2, [r3, #0]
}
 800c7e4:	bf00      	nop
 800c7e6:	3714      	adds	r7, #20
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr
 800c7f0:	20000da8 	.word	0x20000da8
 800c7f4:	20000e14 	.word	0x20000e14

0800c7f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f103 0208 	add.w	r2, r3, #8
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f04f 32ff 	mov.w	r2, #4294967295
 800c810:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f103 0208 	add.w	r2, r3, #8
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f103 0208 	add.w	r2, r3, #8
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c82c:	bf00      	nop
 800c82e:	370c      	adds	r7, #12
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2200      	movs	r2, #0
 800c844:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c846:	bf00      	nop
 800c848:	370c      	adds	r7, #12
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr

0800c852 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c852:	b480      	push	{r7}
 800c854:	b085      	sub	sp, #20
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
 800c85a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	68fa      	ldr	r2, [r7, #12]
 800c866:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	689a      	ldr	r2, [r3, #8]
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	683a      	ldr	r2, [r7, #0]
 800c876:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	683a      	ldr	r2, [r7, #0]
 800c87c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	1c5a      	adds	r2, r3, #1
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	601a      	str	r2, [r3, #0]
}
 800c88e:	bf00      	nop
 800c890:	3714      	adds	r7, #20
 800c892:	46bd      	mov	sp, r7
 800c894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c898:	4770      	bx	lr

0800c89a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c89a:	b480      	push	{r7}
 800c89c:	b085      	sub	sp, #20
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	6078      	str	r0, [r7, #4]
 800c8a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8b0:	d103      	bne.n	800c8ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	691b      	ldr	r3, [r3, #16]
 800c8b6:	60fb      	str	r3, [r7, #12]
 800c8b8:	e00c      	b.n	800c8d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	3308      	adds	r3, #8
 800c8be:	60fb      	str	r3, [r7, #12]
 800c8c0:	e002      	b.n	800c8c8 <vListInsert+0x2e>
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	60fb      	str	r3, [r7, #12]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	68ba      	ldr	r2, [r7, #8]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d2f6      	bcs.n	800c8c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	685a      	ldr	r2, [r3, #4]
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	683a      	ldr	r2, [r7, #0]
 800c8e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	68fa      	ldr	r2, [r7, #12]
 800c8e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	683a      	ldr	r2, [r7, #0]
 800c8ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	1c5a      	adds	r2, r3, #1
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	601a      	str	r2, [r3, #0]
}
 800c900:	bf00      	nop
 800c902:	3714      	adds	r7, #20
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr

0800c90c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c90c:	b480      	push	{r7}
 800c90e:	b085      	sub	sp, #20
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	691b      	ldr	r3, [r3, #16]
 800c918:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	6892      	ldr	r2, [r2, #8]
 800c922:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	6852      	ldr	r2, [r2, #4]
 800c92c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	429a      	cmp	r2, r3
 800c936:	d103      	bne.n	800c940 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	689a      	ldr	r2, [r3, #8]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2200      	movs	r2, #0
 800c944:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	1e5a      	subs	r2, r3, #1
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
}
 800c954:	4618      	mov	r0, r3
 800c956:	3714      	adds	r7, #20
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d10a      	bne.n	800c98a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c978:	f383 8811 	msr	BASEPRI, r3
 800c97c:	f3bf 8f6f 	isb	sy
 800c980:	f3bf 8f4f 	dsb	sy
 800c984:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c986:	bf00      	nop
 800c988:	e7fe      	b.n	800c988 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c98a:	f002 f98b 	bl	800eca4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c996:	68f9      	ldr	r1, [r7, #12]
 800c998:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c99a:	fb01 f303 	mul.w	r3, r1, r3
 800c99e:	441a      	add	r2, r3
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ba:	3b01      	subs	r3, #1
 800c9bc:	68f9      	ldr	r1, [r7, #12]
 800c9be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c9c0:	fb01 f303 	mul.w	r3, r1, r3
 800c9c4:	441a      	add	r2, r3
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	22ff      	movs	r2, #255	; 0xff
 800c9ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	22ff      	movs	r2, #255	; 0xff
 800c9d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d114      	bne.n	800ca0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	691b      	ldr	r3, [r3, #16]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d01a      	beq.n	800ca1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	3310      	adds	r3, #16
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f001 fa43 	bl	800de78 <xTaskRemoveFromEventList>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d012      	beq.n	800ca1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c9f8:	4b0c      	ldr	r3, [pc, #48]	; (800ca2c <xQueueGenericReset+0xcc>)
 800c9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9fe:	601a      	str	r2, [r3, #0]
 800ca00:	f3bf 8f4f 	dsb	sy
 800ca04:	f3bf 8f6f 	isb	sy
 800ca08:	e009      	b.n	800ca1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	3310      	adds	r3, #16
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7ff fef2 	bl	800c7f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	3324      	adds	r3, #36	; 0x24
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7ff feed 	bl	800c7f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ca1e:	f002 f971 	bl	800ed04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ca22:	2301      	movs	r3, #1
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3710      	adds	r7, #16
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	e000ed04 	.word	0xe000ed04

0800ca30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b08e      	sub	sp, #56	; 0x38
 800ca34:	af02      	add	r7, sp, #8
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	607a      	str	r2, [r7, #4]
 800ca3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d10a      	bne.n	800ca5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ca44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca48:	f383 8811 	msr	BASEPRI, r3
 800ca4c:	f3bf 8f6f 	isb	sy
 800ca50:	f3bf 8f4f 	dsb	sy
 800ca54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ca56:	bf00      	nop
 800ca58:	e7fe      	b.n	800ca58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d10a      	bne.n	800ca76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ca60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca64:	f383 8811 	msr	BASEPRI, r3
 800ca68:	f3bf 8f6f 	isb	sy
 800ca6c:	f3bf 8f4f 	dsb	sy
 800ca70:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca72:	bf00      	nop
 800ca74:	e7fe      	b.n	800ca74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d002      	beq.n	800ca82 <xQueueGenericCreateStatic+0x52>
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d001      	beq.n	800ca86 <xQueueGenericCreateStatic+0x56>
 800ca82:	2301      	movs	r3, #1
 800ca84:	e000      	b.n	800ca88 <xQueueGenericCreateStatic+0x58>
 800ca86:	2300      	movs	r3, #0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d10a      	bne.n	800caa2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ca8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca90:	f383 8811 	msr	BASEPRI, r3
 800ca94:	f3bf 8f6f 	isb	sy
 800ca98:	f3bf 8f4f 	dsb	sy
 800ca9c:	623b      	str	r3, [r7, #32]
}
 800ca9e:	bf00      	nop
 800caa0:	e7fe      	b.n	800caa0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d102      	bne.n	800caae <xQueueGenericCreateStatic+0x7e>
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d101      	bne.n	800cab2 <xQueueGenericCreateStatic+0x82>
 800caae:	2301      	movs	r3, #1
 800cab0:	e000      	b.n	800cab4 <xQueueGenericCreateStatic+0x84>
 800cab2:	2300      	movs	r3, #0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d10a      	bne.n	800cace <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cabc:	f383 8811 	msr	BASEPRI, r3
 800cac0:	f3bf 8f6f 	isb	sy
 800cac4:	f3bf 8f4f 	dsb	sy
 800cac8:	61fb      	str	r3, [r7, #28]
}
 800caca:	bf00      	nop
 800cacc:	e7fe      	b.n	800cacc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cace:	2350      	movs	r3, #80	; 0x50
 800cad0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	2b50      	cmp	r3, #80	; 0x50
 800cad6:	d00a      	beq.n	800caee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cadc:	f383 8811 	msr	BASEPRI, r3
 800cae0:	f3bf 8f6f 	isb	sy
 800cae4:	f3bf 8f4f 	dsb	sy
 800cae8:	61bb      	str	r3, [r7, #24]
}
 800caea:	bf00      	nop
 800caec:	e7fe      	b.n	800caec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800caee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800caf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00d      	beq.n	800cb16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafc:	2201      	movs	r2, #1
 800cafe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cb02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb08:	9300      	str	r3, [sp, #0]
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	68b9      	ldr	r1, [r7, #8]
 800cb10:	68f8      	ldr	r0, [r7, #12]
 800cb12:	f000 f83f 	bl	800cb94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3730      	adds	r7, #48	; 0x30
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b08a      	sub	sp, #40	; 0x28
 800cb24:	af02      	add	r7, sp, #8
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	4613      	mov	r3, r2
 800cb2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d10a      	bne.n	800cb4a <xQueueGenericCreate+0x2a>
	__asm volatile
 800cb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb38:	f383 8811 	msr	BASEPRI, r3
 800cb3c:	f3bf 8f6f 	isb	sy
 800cb40:	f3bf 8f4f 	dsb	sy
 800cb44:	613b      	str	r3, [r7, #16]
}
 800cb46:	bf00      	nop
 800cb48:	e7fe      	b.n	800cb48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	68ba      	ldr	r2, [r7, #8]
 800cb4e:	fb02 f303 	mul.w	r3, r2, r3
 800cb52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	3350      	adds	r3, #80	; 0x50
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f002 f9c5 	bl	800eee8 <pvPortMalloc>
 800cb5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cb60:	69bb      	ldr	r3, [r7, #24]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d011      	beq.n	800cb8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	3350      	adds	r3, #80	; 0x50
 800cb6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cb70:	69bb      	ldr	r3, [r7, #24]
 800cb72:	2200      	movs	r2, #0
 800cb74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cb78:	79fa      	ldrb	r2, [r7, #7]
 800cb7a:	69bb      	ldr	r3, [r7, #24]
 800cb7c:	9300      	str	r3, [sp, #0]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	697a      	ldr	r2, [r7, #20]
 800cb82:	68b9      	ldr	r1, [r7, #8]
 800cb84:	68f8      	ldr	r0, [r7, #12]
 800cb86:	f000 f805 	bl	800cb94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb8a:	69bb      	ldr	r3, [r7, #24]
	}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3720      	adds	r7, #32
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	607a      	str	r2, [r7, #4]
 800cba0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d103      	bne.n	800cbb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	69ba      	ldr	r2, [r7, #24]
 800cbac:	601a      	str	r2, [r3, #0]
 800cbae:	e002      	b.n	800cbb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cbb0:	69bb      	ldr	r3, [r7, #24]
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cbb6:	69bb      	ldr	r3, [r7, #24]
 800cbb8:	68fa      	ldr	r2, [r7, #12]
 800cbba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cbbc:	69bb      	ldr	r3, [r7, #24]
 800cbbe:	68ba      	ldr	r2, [r7, #8]
 800cbc0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cbc2:	2101      	movs	r1, #1
 800cbc4:	69b8      	ldr	r0, [r7, #24]
 800cbc6:	f7ff fecb 	bl	800c960 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	78fa      	ldrb	r2, [r7, #3]
 800cbce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cbd2:	bf00      	nop
 800cbd4:	3710      	adds	r7, #16
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
	...

0800cbdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b08e      	sub	sp, #56	; 0x38
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	60f8      	str	r0, [r7, #12]
 800cbe4:	60b9      	str	r1, [r7, #8]
 800cbe6:	607a      	str	r2, [r7, #4]
 800cbe8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cbea:	2300      	movs	r3, #0
 800cbec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d10a      	bne.n	800cc0e <xQueueGenericSend+0x32>
	__asm volatile
 800cbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfc:	f383 8811 	msr	BASEPRI, r3
 800cc00:	f3bf 8f6f 	isb	sy
 800cc04:	f3bf 8f4f 	dsb	sy
 800cc08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc0a:	bf00      	nop
 800cc0c:	e7fe      	b.n	800cc0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d103      	bne.n	800cc1c <xQueueGenericSend+0x40>
 800cc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d101      	bne.n	800cc20 <xQueueGenericSend+0x44>
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	e000      	b.n	800cc22 <xQueueGenericSend+0x46>
 800cc20:	2300      	movs	r3, #0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d10a      	bne.n	800cc3c <xQueueGenericSend+0x60>
	__asm volatile
 800cc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2a:	f383 8811 	msr	BASEPRI, r3
 800cc2e:	f3bf 8f6f 	isb	sy
 800cc32:	f3bf 8f4f 	dsb	sy
 800cc36:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc38:	bf00      	nop
 800cc3a:	e7fe      	b.n	800cc3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	2b02      	cmp	r3, #2
 800cc40:	d103      	bne.n	800cc4a <xQueueGenericSend+0x6e>
 800cc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d101      	bne.n	800cc4e <xQueueGenericSend+0x72>
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e000      	b.n	800cc50 <xQueueGenericSend+0x74>
 800cc4e:	2300      	movs	r3, #0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d10a      	bne.n	800cc6a <xQueueGenericSend+0x8e>
	__asm volatile
 800cc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc58:	f383 8811 	msr	BASEPRI, r3
 800cc5c:	f3bf 8f6f 	isb	sy
 800cc60:	f3bf 8f4f 	dsb	sy
 800cc64:	623b      	str	r3, [r7, #32]
}
 800cc66:	bf00      	nop
 800cc68:	e7fe      	b.n	800cc68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc6a:	f001 fac3 	bl	800e1f4 <xTaskGetSchedulerState>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d102      	bne.n	800cc7a <xQueueGenericSend+0x9e>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d101      	bne.n	800cc7e <xQueueGenericSend+0xa2>
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	e000      	b.n	800cc80 <xQueueGenericSend+0xa4>
 800cc7e:	2300      	movs	r3, #0
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d10a      	bne.n	800cc9a <xQueueGenericSend+0xbe>
	__asm volatile
 800cc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc88:	f383 8811 	msr	BASEPRI, r3
 800cc8c:	f3bf 8f6f 	isb	sy
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	61fb      	str	r3, [r7, #28]
}
 800cc96:	bf00      	nop
 800cc98:	e7fe      	b.n	800cc98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc9a:	f002 f803 	bl	800eca4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d302      	bcc.n	800ccb0 <xQueueGenericSend+0xd4>
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	2b02      	cmp	r3, #2
 800ccae:	d129      	bne.n	800cd04 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ccb0:	683a      	ldr	r2, [r7, #0]
 800ccb2:	68b9      	ldr	r1, [r7, #8]
 800ccb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccb6:	f000 fa0b 	bl	800d0d0 <prvCopyDataToQueue>
 800ccba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d010      	beq.n	800cce6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc6:	3324      	adds	r3, #36	; 0x24
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f001 f8d5 	bl	800de78 <xTaskRemoveFromEventList>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d013      	beq.n	800ccfc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ccd4:	4b3f      	ldr	r3, [pc, #252]	; (800cdd4 <xQueueGenericSend+0x1f8>)
 800ccd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccda:	601a      	str	r2, [r3, #0]
 800ccdc:	f3bf 8f4f 	dsb	sy
 800cce0:	f3bf 8f6f 	isb	sy
 800cce4:	e00a      	b.n	800ccfc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d007      	beq.n	800ccfc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ccec:	4b39      	ldr	r3, [pc, #228]	; (800cdd4 <xQueueGenericSend+0x1f8>)
 800ccee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccf2:	601a      	str	r2, [r3, #0]
 800ccf4:	f3bf 8f4f 	dsb	sy
 800ccf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ccfc:	f002 f802 	bl	800ed04 <vPortExitCritical>
				return pdPASS;
 800cd00:	2301      	movs	r3, #1
 800cd02:	e063      	b.n	800cdcc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d103      	bne.n	800cd12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd0a:	f001 fffb 	bl	800ed04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	e05c      	b.n	800cdcc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d106      	bne.n	800cd26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd18:	f107 0314 	add.w	r3, r7, #20
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f001 f90f 	bl	800df40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd22:	2301      	movs	r3, #1
 800cd24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd26:	f001 ffed 	bl	800ed04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd2a:	f000 fe81 	bl	800da30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd2e:	f001 ffb9 	bl	800eca4 <vPortEnterCritical>
 800cd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd38:	b25b      	sxtb	r3, r3
 800cd3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd3e:	d103      	bne.n	800cd48 <xQueueGenericSend+0x16c>
 800cd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd42:	2200      	movs	r2, #0
 800cd44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd4e:	b25b      	sxtb	r3, r3
 800cd50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd54:	d103      	bne.n	800cd5e <xQueueGenericSend+0x182>
 800cd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd5e:	f001 ffd1 	bl	800ed04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd62:	1d3a      	adds	r2, r7, #4
 800cd64:	f107 0314 	add.w	r3, r7, #20
 800cd68:	4611      	mov	r1, r2
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f001 f8fe 	bl	800df6c <xTaskCheckForTimeOut>
 800cd70:	4603      	mov	r3, r0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d124      	bne.n	800cdc0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cd76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd78:	f000 faa2 	bl	800d2c0 <prvIsQueueFull>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d018      	beq.n	800cdb4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd84:	3310      	adds	r3, #16
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	4611      	mov	r1, r2
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f001 f824 	bl	800ddd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cd90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd92:	f000 fa2d 	bl	800d1f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cd96:	f000 fe59 	bl	800da4c <xTaskResumeAll>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	f47f af7c 	bne.w	800cc9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cda2:	4b0c      	ldr	r3, [pc, #48]	; (800cdd4 <xQueueGenericSend+0x1f8>)
 800cda4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cda8:	601a      	str	r2, [r3, #0]
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	f3bf 8f6f 	isb	sy
 800cdb2:	e772      	b.n	800cc9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cdb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdb6:	f000 fa1b 	bl	800d1f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cdba:	f000 fe47 	bl	800da4c <xTaskResumeAll>
 800cdbe:	e76c      	b.n	800cc9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cdc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdc2:	f000 fa15 	bl	800d1f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cdc6:	f000 fe41 	bl	800da4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cdca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3738      	adds	r7, #56	; 0x38
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	e000ed04 	.word	0xe000ed04

0800cdd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b090      	sub	sp, #64	; 0x40
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	607a      	str	r2, [r7, #4]
 800cde4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d10a      	bne.n	800ce06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf4:	f383 8811 	msr	BASEPRI, r3
 800cdf8:	f3bf 8f6f 	isb	sy
 800cdfc:	f3bf 8f4f 	dsb	sy
 800ce00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce02:	bf00      	nop
 800ce04:	e7fe      	b.n	800ce04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d103      	bne.n	800ce14 <xQueueGenericSendFromISR+0x3c>
 800ce0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d101      	bne.n	800ce18 <xQueueGenericSendFromISR+0x40>
 800ce14:	2301      	movs	r3, #1
 800ce16:	e000      	b.n	800ce1a <xQueueGenericSendFromISR+0x42>
 800ce18:	2300      	movs	r3, #0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d10a      	bne.n	800ce34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ce1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce22:	f383 8811 	msr	BASEPRI, r3
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	f3bf 8f4f 	dsb	sy
 800ce2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce30:	bf00      	nop
 800ce32:	e7fe      	b.n	800ce32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	2b02      	cmp	r3, #2
 800ce38:	d103      	bne.n	800ce42 <xQueueGenericSendFromISR+0x6a>
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d101      	bne.n	800ce46 <xQueueGenericSendFromISR+0x6e>
 800ce42:	2301      	movs	r3, #1
 800ce44:	e000      	b.n	800ce48 <xQueueGenericSendFromISR+0x70>
 800ce46:	2300      	movs	r3, #0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d10a      	bne.n	800ce62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ce4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce50:	f383 8811 	msr	BASEPRI, r3
 800ce54:	f3bf 8f6f 	isb	sy
 800ce58:	f3bf 8f4f 	dsb	sy
 800ce5c:	623b      	str	r3, [r7, #32]
}
 800ce5e:	bf00      	nop
 800ce60:	e7fe      	b.n	800ce60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce62:	f002 f801 	bl	800ee68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ce66:	f3ef 8211 	mrs	r2, BASEPRI
 800ce6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6e:	f383 8811 	msr	BASEPRI, r3
 800ce72:	f3bf 8f6f 	isb	sy
 800ce76:	f3bf 8f4f 	dsb	sy
 800ce7a:	61fa      	str	r2, [r7, #28]
 800ce7c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ce7e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce80:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d302      	bcc.n	800ce94 <xQueueGenericSendFromISR+0xbc>
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	2b02      	cmp	r3, #2
 800ce92:	d12f      	bne.n	800cef4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cea4:	683a      	ldr	r2, [r7, #0]
 800cea6:	68b9      	ldr	r1, [r7, #8]
 800cea8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ceaa:	f000 f911 	bl	800d0d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ceae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ceb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb6:	d112      	bne.n	800cede <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ceb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d016      	beq.n	800ceee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec2:	3324      	adds	r3, #36	; 0x24
 800cec4:	4618      	mov	r0, r3
 800cec6:	f000 ffd7 	bl	800de78 <xTaskRemoveFromEventList>
 800ceca:	4603      	mov	r3, r0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d00e      	beq.n	800ceee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d00b      	beq.n	800ceee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2201      	movs	r2, #1
 800ceda:	601a      	str	r2, [r3, #0]
 800cedc:	e007      	b.n	800ceee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cede:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cee2:	3301      	adds	r3, #1
 800cee4:	b2db      	uxtb	r3, r3
 800cee6:	b25a      	sxtb	r2, r3
 800cee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ceee:	2301      	movs	r3, #1
 800cef0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cef2:	e001      	b.n	800cef8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cef4:	2300      	movs	r3, #0
 800cef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cefa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cf02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3740      	adds	r7, #64	; 0x40
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
	...

0800cf10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b08c      	sub	sp, #48	; 0x30
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cf24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d10a      	bne.n	800cf40 <xQueueReceive+0x30>
	__asm volatile
 800cf2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2e:	f383 8811 	msr	BASEPRI, r3
 800cf32:	f3bf 8f6f 	isb	sy
 800cf36:	f3bf 8f4f 	dsb	sy
 800cf3a:	623b      	str	r3, [r7, #32]
}
 800cf3c:	bf00      	nop
 800cf3e:	e7fe      	b.n	800cf3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d103      	bne.n	800cf4e <xQueueReceive+0x3e>
 800cf46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d101      	bne.n	800cf52 <xQueueReceive+0x42>
 800cf4e:	2301      	movs	r3, #1
 800cf50:	e000      	b.n	800cf54 <xQueueReceive+0x44>
 800cf52:	2300      	movs	r3, #0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d10a      	bne.n	800cf6e <xQueueReceive+0x5e>
	__asm volatile
 800cf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5c:	f383 8811 	msr	BASEPRI, r3
 800cf60:	f3bf 8f6f 	isb	sy
 800cf64:	f3bf 8f4f 	dsb	sy
 800cf68:	61fb      	str	r3, [r7, #28]
}
 800cf6a:	bf00      	nop
 800cf6c:	e7fe      	b.n	800cf6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf6e:	f001 f941 	bl	800e1f4 <xTaskGetSchedulerState>
 800cf72:	4603      	mov	r3, r0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d102      	bne.n	800cf7e <xQueueReceive+0x6e>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d101      	bne.n	800cf82 <xQueueReceive+0x72>
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e000      	b.n	800cf84 <xQueueReceive+0x74>
 800cf82:	2300      	movs	r3, #0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d10a      	bne.n	800cf9e <xQueueReceive+0x8e>
	__asm volatile
 800cf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8c:	f383 8811 	msr	BASEPRI, r3
 800cf90:	f3bf 8f6f 	isb	sy
 800cf94:	f3bf 8f4f 	dsb	sy
 800cf98:	61bb      	str	r3, [r7, #24]
}
 800cf9a:	bf00      	nop
 800cf9c:	e7fe      	b.n	800cf9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf9e:	f001 fe81 	bl	800eca4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d01f      	beq.n	800cfee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cfae:	68b9      	ldr	r1, [r7, #8]
 800cfb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfb2:	f000 f8f7 	bl	800d1a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb8:	1e5a      	subs	r2, r3, #1
 800cfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00f      	beq.n	800cfe6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc8:	3310      	adds	r3, #16
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f000 ff54 	bl	800de78 <xTaskRemoveFromEventList>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d007      	beq.n	800cfe6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cfd6:	4b3d      	ldr	r3, [pc, #244]	; (800d0cc <xQueueReceive+0x1bc>)
 800cfd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfdc:	601a      	str	r2, [r3, #0]
 800cfde:	f3bf 8f4f 	dsb	sy
 800cfe2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cfe6:	f001 fe8d 	bl	800ed04 <vPortExitCritical>
				return pdPASS;
 800cfea:	2301      	movs	r3, #1
 800cfec:	e069      	b.n	800d0c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d103      	bne.n	800cffc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cff4:	f001 fe86 	bl	800ed04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cff8:	2300      	movs	r3, #0
 800cffa:	e062      	b.n	800d0c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d106      	bne.n	800d010 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d002:	f107 0310 	add.w	r3, r7, #16
 800d006:	4618      	mov	r0, r3
 800d008:	f000 ff9a 	bl	800df40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d00c:	2301      	movs	r3, #1
 800d00e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d010:	f001 fe78 	bl	800ed04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d014:	f000 fd0c 	bl	800da30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d018:	f001 fe44 	bl	800eca4 <vPortEnterCritical>
 800d01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d022:	b25b      	sxtb	r3, r3
 800d024:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d028:	d103      	bne.n	800d032 <xQueueReceive+0x122>
 800d02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02c:	2200      	movs	r2, #0
 800d02e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d038:	b25b      	sxtb	r3, r3
 800d03a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d03e:	d103      	bne.n	800d048 <xQueueReceive+0x138>
 800d040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d042:	2200      	movs	r2, #0
 800d044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d048:	f001 fe5c 	bl	800ed04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d04c:	1d3a      	adds	r2, r7, #4
 800d04e:	f107 0310 	add.w	r3, r7, #16
 800d052:	4611      	mov	r1, r2
 800d054:	4618      	mov	r0, r3
 800d056:	f000 ff89 	bl	800df6c <xTaskCheckForTimeOut>
 800d05a:	4603      	mov	r3, r0
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d123      	bne.n	800d0a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d062:	f000 f917 	bl	800d294 <prvIsQueueEmpty>
 800d066:	4603      	mov	r3, r0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d017      	beq.n	800d09c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06e:	3324      	adds	r3, #36	; 0x24
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	4611      	mov	r1, r2
 800d074:	4618      	mov	r0, r3
 800d076:	f000 feaf 	bl	800ddd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d07a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d07c:	f000 f8b8 	bl	800d1f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d080:	f000 fce4 	bl	800da4c <xTaskResumeAll>
 800d084:	4603      	mov	r3, r0
 800d086:	2b00      	cmp	r3, #0
 800d088:	d189      	bne.n	800cf9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d08a:	4b10      	ldr	r3, [pc, #64]	; (800d0cc <xQueueReceive+0x1bc>)
 800d08c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d090:	601a      	str	r2, [r3, #0]
 800d092:	f3bf 8f4f 	dsb	sy
 800d096:	f3bf 8f6f 	isb	sy
 800d09a:	e780      	b.n	800cf9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d09c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d09e:	f000 f8a7 	bl	800d1f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d0a2:	f000 fcd3 	bl	800da4c <xTaskResumeAll>
 800d0a6:	e77a      	b.n	800cf9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d0a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0aa:	f000 f8a1 	bl	800d1f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d0ae:	f000 fccd 	bl	800da4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0b4:	f000 f8ee 	bl	800d294 <prvIsQueueEmpty>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	f43f af6f 	beq.w	800cf9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d0c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3730      	adds	r7, #48	; 0x30
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	e000ed04 	.word	0xe000ed04

0800d0d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b086      	sub	sp, #24
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	60f8      	str	r0, [r7, #12]
 800d0d8:	60b9      	str	r1, [r7, #8]
 800d0da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d10d      	bne.n	800d10a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d14d      	bne.n	800d192 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f001 f898 	bl	800e230 <xTaskPriorityDisinherit>
 800d100:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2200      	movs	r2, #0
 800d106:	609a      	str	r2, [r3, #8]
 800d108:	e043      	b.n	800d192 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d119      	bne.n	800d144 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	6858      	ldr	r0, [r3, #4]
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d118:	461a      	mov	r2, r3
 800d11a:	68b9      	ldr	r1, [r7, #8]
 800d11c:	f002 fdf2 	bl	800fd04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	685a      	ldr	r2, [r3, #4]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d128:	441a      	add	r2, r3
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	685a      	ldr	r2, [r3, #4]
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	429a      	cmp	r2, r3
 800d138:	d32b      	bcc.n	800d192 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	605a      	str	r2, [r3, #4]
 800d142:	e026      	b.n	800d192 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	68d8      	ldr	r0, [r3, #12]
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d14c:	461a      	mov	r2, r3
 800d14e:	68b9      	ldr	r1, [r7, #8]
 800d150:	f002 fdd8 	bl	800fd04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	68da      	ldr	r2, [r3, #12]
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d15c:	425b      	negs	r3, r3
 800d15e:	441a      	add	r2, r3
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	68da      	ldr	r2, [r3, #12]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d207      	bcs.n	800d180 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	689a      	ldr	r2, [r3, #8]
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d178:	425b      	negs	r3, r3
 800d17a:	441a      	add	r2, r3
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2b02      	cmp	r3, #2
 800d184:	d105      	bne.n	800d192 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d002      	beq.n	800d192 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	3b01      	subs	r3, #1
 800d190:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	1c5a      	adds	r2, r3, #1
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d19a:	697b      	ldr	r3, [r7, #20]
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3718      	adds	r7, #24
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d018      	beq.n	800d1e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	68da      	ldr	r2, [r3, #12]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1be:	441a      	add	r2, r3
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	68da      	ldr	r2, [r3, #12]
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	689b      	ldr	r3, [r3, #8]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d303      	bcc.n	800d1d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	68d9      	ldr	r1, [r3, #12]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	6838      	ldr	r0, [r7, #0]
 800d1e4:	f002 fd8e 	bl	800fd04 <memcpy>
	}
}
 800d1e8:	bf00      	nop
 800d1ea:	3708      	adds	r7, #8
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d1f8:	f001 fd54 	bl	800eca4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d202:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d204:	e011      	b.n	800d22a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d012      	beq.n	800d234 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	3324      	adds	r3, #36	; 0x24
 800d212:	4618      	mov	r0, r3
 800d214:	f000 fe30 	bl	800de78 <xTaskRemoveFromEventList>
 800d218:	4603      	mov	r3, r0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d001      	beq.n	800d222 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d21e:	f000 ff07 	bl	800e030 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d222:	7bfb      	ldrb	r3, [r7, #15]
 800d224:	3b01      	subs	r3, #1
 800d226:	b2db      	uxtb	r3, r3
 800d228:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d22a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	dce9      	bgt.n	800d206 <prvUnlockQueue+0x16>
 800d232:	e000      	b.n	800d236 <prvUnlockQueue+0x46>
					break;
 800d234:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	22ff      	movs	r2, #255	; 0xff
 800d23a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d23e:	f001 fd61 	bl	800ed04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d242:	f001 fd2f 	bl	800eca4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d24c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d24e:	e011      	b.n	800d274 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	691b      	ldr	r3, [r3, #16]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d012      	beq.n	800d27e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	3310      	adds	r3, #16
 800d25c:	4618      	mov	r0, r3
 800d25e:	f000 fe0b 	bl	800de78 <xTaskRemoveFromEventList>
 800d262:	4603      	mov	r3, r0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d001      	beq.n	800d26c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d268:	f000 fee2 	bl	800e030 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d26c:	7bbb      	ldrb	r3, [r7, #14]
 800d26e:	3b01      	subs	r3, #1
 800d270:	b2db      	uxtb	r3, r3
 800d272:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	dce9      	bgt.n	800d250 <prvUnlockQueue+0x60>
 800d27c:	e000      	b.n	800d280 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d27e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	22ff      	movs	r2, #255	; 0xff
 800d284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d288:	f001 fd3c 	bl	800ed04 <vPortExitCritical>
}
 800d28c:	bf00      	nop
 800d28e:	3710      	adds	r7, #16
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d29c:	f001 fd02 	bl	800eca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d102      	bne.n	800d2ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	60fb      	str	r3, [r7, #12]
 800d2ac:	e001      	b.n	800d2b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d2b2:	f001 fd27 	bl	800ed04 <vPortExitCritical>

	return xReturn;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3710      	adds	r7, #16
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d2c8:	f001 fcec 	bl	800eca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d102      	bne.n	800d2de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	60fb      	str	r3, [r7, #12]
 800d2dc:	e001      	b.n	800d2e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d2e2:	f001 fd0f 	bl	800ed04 <vPortExitCritical>

	return xReturn;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3710      	adds	r7, #16
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	60fb      	str	r3, [r7, #12]
 800d2fe:	e014      	b.n	800d32a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d300:	4a0f      	ldr	r2, [pc, #60]	; (800d340 <vQueueAddToRegistry+0x50>)
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d10b      	bne.n	800d324 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d30c:	490c      	ldr	r1, [pc, #48]	; (800d340 <vQueueAddToRegistry+0x50>)
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	683a      	ldr	r2, [r7, #0]
 800d312:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d316:	4a0a      	ldr	r2, [pc, #40]	; (800d340 <vQueueAddToRegistry+0x50>)
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	00db      	lsls	r3, r3, #3
 800d31c:	4413      	add	r3, r2
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d322:	e006      	b.n	800d332 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	3301      	adds	r3, #1
 800d328:	60fb      	str	r3, [r7, #12]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2b07      	cmp	r3, #7
 800d32e:	d9e7      	bls.n	800d300 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d330:	bf00      	nop
 800d332:	bf00      	nop
 800d334:	3714      	adds	r7, #20
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop
 800d340:	20001614 	.word	0x20001614

0800d344 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d344:	b580      	push	{r7, lr}
 800d346:	b086      	sub	sp, #24
 800d348:	af00      	add	r7, sp, #0
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d354:	f001 fca6 	bl	800eca4 <vPortEnterCritical>
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d35e:	b25b      	sxtb	r3, r3
 800d360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d364:	d103      	bne.n	800d36e <vQueueWaitForMessageRestricted+0x2a>
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	2200      	movs	r2, #0
 800d36a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d374:	b25b      	sxtb	r3, r3
 800d376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d37a:	d103      	bne.n	800d384 <vQueueWaitForMessageRestricted+0x40>
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	2200      	movs	r2, #0
 800d380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d384:	f001 fcbe 	bl	800ed04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d106      	bne.n	800d39e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	3324      	adds	r3, #36	; 0x24
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	68b9      	ldr	r1, [r7, #8]
 800d398:	4618      	mov	r0, r3
 800d39a:	f000 fd41 	bl	800de20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d39e:	6978      	ldr	r0, [r7, #20]
 800d3a0:	f7ff ff26 	bl	800d1f0 <prvUnlockQueue>
	}
 800d3a4:	bf00      	nop
 800d3a6:	3718      	adds	r7, #24
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b08e      	sub	sp, #56	; 0x38
 800d3b0:	af04      	add	r7, sp, #16
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	607a      	str	r2, [r7, #4]
 800d3b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d10a      	bne.n	800d3d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c4:	f383 8811 	msr	BASEPRI, r3
 800d3c8:	f3bf 8f6f 	isb	sy
 800d3cc:	f3bf 8f4f 	dsb	sy
 800d3d0:	623b      	str	r3, [r7, #32]
}
 800d3d2:	bf00      	nop
 800d3d4:	e7fe      	b.n	800d3d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d10a      	bne.n	800d3f2 <xTaskCreateStatic+0x46>
	__asm volatile
 800d3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e0:	f383 8811 	msr	BASEPRI, r3
 800d3e4:	f3bf 8f6f 	isb	sy
 800d3e8:	f3bf 8f4f 	dsb	sy
 800d3ec:	61fb      	str	r3, [r7, #28]
}
 800d3ee:	bf00      	nop
 800d3f0:	e7fe      	b.n	800d3f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d3f2:	236c      	movs	r3, #108	; 0x6c
 800d3f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	2b6c      	cmp	r3, #108	; 0x6c
 800d3fa:	d00a      	beq.n	800d412 <xTaskCreateStatic+0x66>
	__asm volatile
 800d3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d400:	f383 8811 	msr	BASEPRI, r3
 800d404:	f3bf 8f6f 	isb	sy
 800d408:	f3bf 8f4f 	dsb	sy
 800d40c:	61bb      	str	r3, [r7, #24]
}
 800d40e:	bf00      	nop
 800d410:	e7fe      	b.n	800d410 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d412:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d416:	2b00      	cmp	r3, #0
 800d418:	d01e      	beq.n	800d458 <xTaskCreateStatic+0xac>
 800d41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d01b      	beq.n	800d458 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d422:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d428:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42c:	2202      	movs	r2, #2
 800d42e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d432:	2300      	movs	r3, #0
 800d434:	9303      	str	r3, [sp, #12]
 800d436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d438:	9302      	str	r3, [sp, #8]
 800d43a:	f107 0314 	add.w	r3, r7, #20
 800d43e:	9301      	str	r3, [sp, #4]
 800d440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d442:	9300      	str	r3, [sp, #0]
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	68b9      	ldr	r1, [r7, #8]
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	f000 f850 	bl	800d4f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d450:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d452:	f000 f8dd 	bl	800d610 <prvAddNewTaskToReadyList>
 800d456:	e001      	b.n	800d45c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d458:	2300      	movs	r3, #0
 800d45a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d45c:	697b      	ldr	r3, [r7, #20]
	}
 800d45e:	4618      	mov	r0, r3
 800d460:	3728      	adds	r7, #40	; 0x28
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}

0800d466 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d466:	b580      	push	{r7, lr}
 800d468:	b08c      	sub	sp, #48	; 0x30
 800d46a:	af04      	add	r7, sp, #16
 800d46c:	60f8      	str	r0, [r7, #12]
 800d46e:	60b9      	str	r1, [r7, #8]
 800d470:	603b      	str	r3, [r7, #0]
 800d472:	4613      	mov	r3, r2
 800d474:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d476:	88fb      	ldrh	r3, [r7, #6]
 800d478:	009b      	lsls	r3, r3, #2
 800d47a:	4618      	mov	r0, r3
 800d47c:	f001 fd34 	bl	800eee8 <pvPortMalloc>
 800d480:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d00e      	beq.n	800d4a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d488:	206c      	movs	r0, #108	; 0x6c
 800d48a:	f001 fd2d 	bl	800eee8 <pvPortMalloc>
 800d48e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d003      	beq.n	800d49e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d496:	69fb      	ldr	r3, [r7, #28]
 800d498:	697a      	ldr	r2, [r7, #20]
 800d49a:	631a      	str	r2, [r3, #48]	; 0x30
 800d49c:	e005      	b.n	800d4aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d49e:	6978      	ldr	r0, [r7, #20]
 800d4a0:	f001 fdee 	bl	800f080 <vPortFree>
 800d4a4:	e001      	b.n	800d4aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d4aa:	69fb      	ldr	r3, [r7, #28]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d017      	beq.n	800d4e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d4b8:	88fa      	ldrh	r2, [r7, #6]
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	9303      	str	r3, [sp, #12]
 800d4be:	69fb      	ldr	r3, [r7, #28]
 800d4c0:	9302      	str	r3, [sp, #8]
 800d4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c4:	9301      	str	r3, [sp, #4]
 800d4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c8:	9300      	str	r3, [sp, #0]
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	68b9      	ldr	r1, [r7, #8]
 800d4ce:	68f8      	ldr	r0, [r7, #12]
 800d4d0:	f000 f80e 	bl	800d4f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d4d4:	69f8      	ldr	r0, [r7, #28]
 800d4d6:	f000 f89b 	bl	800d610 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d4da:	2301      	movs	r3, #1
 800d4dc:	61bb      	str	r3, [r7, #24]
 800d4de:	e002      	b.n	800d4e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d4e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d4e6:	69bb      	ldr	r3, [r7, #24]
	}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3720      	adds	r7, #32
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b088      	sub	sp, #32
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	607a      	str	r2, [r7, #4]
 800d4fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d500:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	461a      	mov	r2, r3
 800d508:	21a5      	movs	r1, #165	; 0xa5
 800d50a:	f002 fc09 	bl	800fd20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d518:	3b01      	subs	r3, #1
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	4413      	add	r3, r2
 800d51e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d520:	69bb      	ldr	r3, [r7, #24]
 800d522:	f023 0307 	bic.w	r3, r3, #7
 800d526:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d528:	69bb      	ldr	r3, [r7, #24]
 800d52a:	f003 0307 	and.w	r3, r3, #7
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d00a      	beq.n	800d548 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d536:	f383 8811 	msr	BASEPRI, r3
 800d53a:	f3bf 8f6f 	isb	sy
 800d53e:	f3bf 8f4f 	dsb	sy
 800d542:	617b      	str	r3, [r7, #20]
}
 800d544:	bf00      	nop
 800d546:	e7fe      	b.n	800d546 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d01f      	beq.n	800d58e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d54e:	2300      	movs	r3, #0
 800d550:	61fb      	str	r3, [r7, #28]
 800d552:	e012      	b.n	800d57a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d554:	68ba      	ldr	r2, [r7, #8]
 800d556:	69fb      	ldr	r3, [r7, #28]
 800d558:	4413      	add	r3, r2
 800d55a:	7819      	ldrb	r1, [r3, #0]
 800d55c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d55e:	69fb      	ldr	r3, [r7, #28]
 800d560:	4413      	add	r3, r2
 800d562:	3334      	adds	r3, #52	; 0x34
 800d564:	460a      	mov	r2, r1
 800d566:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d568:	68ba      	ldr	r2, [r7, #8]
 800d56a:	69fb      	ldr	r3, [r7, #28]
 800d56c:	4413      	add	r3, r2
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d006      	beq.n	800d582 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d574:	69fb      	ldr	r3, [r7, #28]
 800d576:	3301      	adds	r3, #1
 800d578:	61fb      	str	r3, [r7, #28]
 800d57a:	69fb      	ldr	r3, [r7, #28]
 800d57c:	2b1d      	cmp	r3, #29
 800d57e:	d9e9      	bls.n	800d554 <prvInitialiseNewTask+0x64>
 800d580:	e000      	b.n	800d584 <prvInitialiseNewTask+0x94>
			{
				break;
 800d582:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d586:	2200      	movs	r2, #0
 800d588:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800d58c:	e003      	b.n	800d596 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d590:	2200      	movs	r2, #0
 800d592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d598:	2b37      	cmp	r3, #55	; 0x37
 800d59a:	d901      	bls.n	800d5a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d59c:	2337      	movs	r3, #55	; 0x37
 800d59e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5aa:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800d5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b4:	3304      	adds	r3, #4
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7ff f93e 	bl	800c838 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5be:	3318      	adds	r3, #24
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f7ff f939 	bl	800c838 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5de:	2200      	movs	r2, #0
 800d5e0:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d5ea:	683a      	ldr	r2, [r7, #0]
 800d5ec:	68f9      	ldr	r1, [r7, #12]
 800d5ee:	69b8      	ldr	r0, [r7, #24]
 800d5f0:	f001 fa2e 	bl	800ea50 <pxPortInitialiseStack>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d002      	beq.n	800d606 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d606:	bf00      	nop
 800d608:	3720      	adds	r7, #32
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
	...

0800d610 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d618:	f001 fb44 	bl	800eca4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d61c:	4b2d      	ldr	r3, [pc, #180]	; (800d6d4 <prvAddNewTaskToReadyList+0xc4>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	3301      	adds	r3, #1
 800d622:	4a2c      	ldr	r2, [pc, #176]	; (800d6d4 <prvAddNewTaskToReadyList+0xc4>)
 800d624:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d626:	4b2c      	ldr	r3, [pc, #176]	; (800d6d8 <prvAddNewTaskToReadyList+0xc8>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d109      	bne.n	800d642 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d62e:	4a2a      	ldr	r2, [pc, #168]	; (800d6d8 <prvAddNewTaskToReadyList+0xc8>)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d634:	4b27      	ldr	r3, [pc, #156]	; (800d6d4 <prvAddNewTaskToReadyList+0xc4>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	2b01      	cmp	r3, #1
 800d63a:	d110      	bne.n	800d65e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d63c:	f000 fd1c 	bl	800e078 <prvInitialiseTaskLists>
 800d640:	e00d      	b.n	800d65e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d642:	4b26      	ldr	r3, [pc, #152]	; (800d6dc <prvAddNewTaskToReadyList+0xcc>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d109      	bne.n	800d65e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d64a:	4b23      	ldr	r3, [pc, #140]	; (800d6d8 <prvAddNewTaskToReadyList+0xc8>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d654:	429a      	cmp	r2, r3
 800d656:	d802      	bhi.n	800d65e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d658:	4a1f      	ldr	r2, [pc, #124]	; (800d6d8 <prvAddNewTaskToReadyList+0xc8>)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d65e:	4b20      	ldr	r3, [pc, #128]	; (800d6e0 <prvAddNewTaskToReadyList+0xd0>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	3301      	adds	r3, #1
 800d664:	4a1e      	ldr	r2, [pc, #120]	; (800d6e0 <prvAddNewTaskToReadyList+0xd0>)
 800d666:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d668:	4b1d      	ldr	r3, [pc, #116]	; (800d6e0 <prvAddNewTaskToReadyList+0xd0>)
 800d66a:	681a      	ldr	r2, [r3, #0]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d674:	4b1b      	ldr	r3, [pc, #108]	; (800d6e4 <prvAddNewTaskToReadyList+0xd4>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	429a      	cmp	r2, r3
 800d67a:	d903      	bls.n	800d684 <prvAddNewTaskToReadyList+0x74>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d680:	4a18      	ldr	r2, [pc, #96]	; (800d6e4 <prvAddNewTaskToReadyList+0xd4>)
 800d682:	6013      	str	r3, [r2, #0]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d688:	4613      	mov	r3, r2
 800d68a:	009b      	lsls	r3, r3, #2
 800d68c:	4413      	add	r3, r2
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	4a15      	ldr	r2, [pc, #84]	; (800d6e8 <prvAddNewTaskToReadyList+0xd8>)
 800d692:	441a      	add	r2, r3
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	3304      	adds	r3, #4
 800d698:	4619      	mov	r1, r3
 800d69a:	4610      	mov	r0, r2
 800d69c:	f7ff f8d9 	bl	800c852 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d6a0:	f001 fb30 	bl	800ed04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d6a4:	4b0d      	ldr	r3, [pc, #52]	; (800d6dc <prvAddNewTaskToReadyList+0xcc>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d00e      	beq.n	800d6ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d6ac:	4b0a      	ldr	r3, [pc, #40]	; (800d6d8 <prvAddNewTaskToReadyList+0xc8>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d207      	bcs.n	800d6ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d6ba:	4b0c      	ldr	r3, [pc, #48]	; (800d6ec <prvAddNewTaskToReadyList+0xdc>)
 800d6bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6c0:	601a      	str	r2, [r3, #0]
 800d6c2:	f3bf 8f4f 	dsb	sy
 800d6c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d6ca:	bf00      	nop
 800d6cc:	3708      	adds	r7, #8
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	bf00      	nop
 800d6d4:	20001b28 	.word	0x20001b28
 800d6d8:	20001654 	.word	0x20001654
 800d6dc:	20001b34 	.word	0x20001b34
 800d6e0:	20001b44 	.word	0x20001b44
 800d6e4:	20001b30 	.word	0x20001b30
 800d6e8:	20001658 	.word	0x20001658
 800d6ec:	e000ed04 	.word	0xe000ed04

0800d6f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d017      	beq.n	800d732 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d702:	4b13      	ldr	r3, [pc, #76]	; (800d750 <vTaskDelay+0x60>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00a      	beq.n	800d720 <vTaskDelay+0x30>
	__asm volatile
 800d70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70e:	f383 8811 	msr	BASEPRI, r3
 800d712:	f3bf 8f6f 	isb	sy
 800d716:	f3bf 8f4f 	dsb	sy
 800d71a:	60bb      	str	r3, [r7, #8]
}
 800d71c:	bf00      	nop
 800d71e:	e7fe      	b.n	800d71e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d720:	f000 f986 	bl	800da30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d724:	2100      	movs	r1, #0
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 fdf0 	bl	800e30c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d72c:	f000 f98e 	bl	800da4c <xTaskResumeAll>
 800d730:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d107      	bne.n	800d748 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d738:	4b06      	ldr	r3, [pc, #24]	; (800d754 <vTaskDelay+0x64>)
 800d73a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d73e:	601a      	str	r2, [r3, #0]
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d748:	bf00      	nop
 800d74a:	3710      	adds	r7, #16
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	20001b50 	.word	0x20001b50
 800d754:	e000ed04 	.word	0xe000ed04

0800d758 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d760:	f001 faa0 	bl	800eca4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d102      	bne.n	800d770 <vTaskSuspend+0x18>
 800d76a:	4b30      	ldr	r3, [pc, #192]	; (800d82c <vTaskSuspend+0xd4>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	e000      	b.n	800d772 <vTaskSuspend+0x1a>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	3304      	adds	r3, #4
 800d778:	4618      	mov	r0, r3
 800d77a:	f7ff f8c7 	bl	800c90c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d782:	2b00      	cmp	r3, #0
 800d784:	d004      	beq.n	800d790 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	3318      	adds	r3, #24
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7ff f8be 	bl	800c90c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	3304      	adds	r3, #4
 800d794:	4619      	mov	r1, r3
 800d796:	4826      	ldr	r0, [pc, #152]	; (800d830 <vTaskSuspend+0xd8>)
 800d798:	f7ff f85b 	bl	800c852 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d103      	bne.n	800d7b0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800d7b0:	f001 faa8 	bl	800ed04 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800d7b4:	4b1f      	ldr	r3, [pc, #124]	; (800d834 <vTaskSuspend+0xdc>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d005      	beq.n	800d7c8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800d7bc:	f001 fa72 	bl	800eca4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800d7c0:	f000 fcf8 	bl	800e1b4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800d7c4:	f001 fa9e 	bl	800ed04 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800d7c8:	4b18      	ldr	r3, [pc, #96]	; (800d82c <vTaskSuspend+0xd4>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	68fa      	ldr	r2, [r7, #12]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d127      	bne.n	800d822 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800d7d2:	4b18      	ldr	r3, [pc, #96]	; (800d834 <vTaskSuspend+0xdc>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d017      	beq.n	800d80a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800d7da:	4b17      	ldr	r3, [pc, #92]	; (800d838 <vTaskSuspend+0xe0>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d00a      	beq.n	800d7f8 <vTaskSuspend+0xa0>
	__asm volatile
 800d7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e6:	f383 8811 	msr	BASEPRI, r3
 800d7ea:	f3bf 8f6f 	isb	sy
 800d7ee:	f3bf 8f4f 	dsb	sy
 800d7f2:	60bb      	str	r3, [r7, #8]
}
 800d7f4:	bf00      	nop
 800d7f6:	e7fe      	b.n	800d7f6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800d7f8:	4b10      	ldr	r3, [pc, #64]	; (800d83c <vTaskSuspend+0xe4>)
 800d7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7fe:	601a      	str	r2, [r3, #0]
 800d800:	f3bf 8f4f 	dsb	sy
 800d804:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d808:	e00b      	b.n	800d822 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800d80a:	4b09      	ldr	r3, [pc, #36]	; (800d830 <vTaskSuspend+0xd8>)
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	4b0c      	ldr	r3, [pc, #48]	; (800d840 <vTaskSuspend+0xe8>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	429a      	cmp	r2, r3
 800d814:	d103      	bne.n	800d81e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800d816:	4b05      	ldr	r3, [pc, #20]	; (800d82c <vTaskSuspend+0xd4>)
 800d818:	2200      	movs	r2, #0
 800d81a:	601a      	str	r2, [r3, #0]
	}
 800d81c:	e001      	b.n	800d822 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800d81e:	f000 fa7d 	bl	800dd1c <vTaskSwitchContext>
	}
 800d822:	bf00      	nop
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	20001654 	.word	0x20001654
 800d830:	20001b14 	.word	0x20001b14
 800d834:	20001b34 	.word	0x20001b34
 800d838:	20001b50 	.word	0x20001b50
 800d83c:	e000ed04 	.word	0xe000ed04
 800d840:	20001b28 	.word	0x20001b28

0800d844 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800d844:	b480      	push	{r7}
 800d846:	b087      	sub	sp, #28
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800d84c:	2300      	movs	r3, #0
 800d84e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d10a      	bne.n	800d870 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800d85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85e:	f383 8811 	msr	BASEPRI, r3
 800d862:	f3bf 8f6f 	isb	sy
 800d866:	f3bf 8f4f 	dsb	sy
 800d86a:	60fb      	str	r3, [r7, #12]
}
 800d86c:	bf00      	nop
 800d86e:	e7fe      	b.n	800d86e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	695b      	ldr	r3, [r3, #20]
 800d874:	4a0a      	ldr	r2, [pc, #40]	; (800d8a0 <prvTaskIsTaskSuspended+0x5c>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d10a      	bne.n	800d890 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d87e:	4a09      	ldr	r2, [pc, #36]	; (800d8a4 <prvTaskIsTaskSuspended+0x60>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d005      	beq.n	800d890 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d101      	bne.n	800d890 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800d88c:	2301      	movs	r3, #1
 800d88e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d890:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800d892:	4618      	mov	r0, r3
 800d894:	371c      	adds	r7, #28
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop
 800d8a0:	20001b14 	.word	0x20001b14
 800d8a4:	20001ae8 	.word	0x20001ae8

0800d8a8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d10a      	bne.n	800d8d0 <vTaskResume+0x28>
	__asm volatile
 800d8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8be:	f383 8811 	msr	BASEPRI, r3
 800d8c2:	f3bf 8f6f 	isb	sy
 800d8c6:	f3bf 8f4f 	dsb	sy
 800d8ca:	60bb      	str	r3, [r7, #8]
}
 800d8cc:	bf00      	nop
 800d8ce:	e7fe      	b.n	800d8ce <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800d8d0:	4b20      	ldr	r3, [pc, #128]	; (800d954 <vTaskResume+0xac>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	68fa      	ldr	r2, [r7, #12]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d038      	beq.n	800d94c <vTaskResume+0xa4>
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d035      	beq.n	800d94c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800d8e0:	f001 f9e0 	bl	800eca4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800d8e4:	68f8      	ldr	r0, [r7, #12]
 800d8e6:	f7ff ffad 	bl	800d844 <prvTaskIsTaskSuspended>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d02b      	beq.n	800d948 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	3304      	adds	r3, #4
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7ff f809 	bl	800c90c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8fe:	4b16      	ldr	r3, [pc, #88]	; (800d958 <vTaskResume+0xb0>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	429a      	cmp	r2, r3
 800d904:	d903      	bls.n	800d90e <vTaskResume+0x66>
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d90a:	4a13      	ldr	r2, [pc, #76]	; (800d958 <vTaskResume+0xb0>)
 800d90c:	6013      	str	r3, [r2, #0]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d912:	4613      	mov	r3, r2
 800d914:	009b      	lsls	r3, r3, #2
 800d916:	4413      	add	r3, r2
 800d918:	009b      	lsls	r3, r3, #2
 800d91a:	4a10      	ldr	r2, [pc, #64]	; (800d95c <vTaskResume+0xb4>)
 800d91c:	441a      	add	r2, r3
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	3304      	adds	r3, #4
 800d922:	4619      	mov	r1, r3
 800d924:	4610      	mov	r0, r2
 800d926:	f7fe ff94 	bl	800c852 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d92e:	4b09      	ldr	r3, [pc, #36]	; (800d954 <vTaskResume+0xac>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d934:	429a      	cmp	r2, r3
 800d936:	d307      	bcc.n	800d948 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800d938:	4b09      	ldr	r3, [pc, #36]	; (800d960 <vTaskResume+0xb8>)
 800d93a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d93e:	601a      	str	r2, [r3, #0]
 800d940:	f3bf 8f4f 	dsb	sy
 800d944:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800d948:	f001 f9dc 	bl	800ed04 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d94c:	bf00      	nop
 800d94e:	3710      	adds	r7, #16
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}
 800d954:	20001654 	.word	0x20001654
 800d958:	20001b30 	.word	0x20001b30
 800d95c:	20001658 	.word	0x20001658
 800d960:	e000ed04 	.word	0xe000ed04

0800d964 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b08a      	sub	sp, #40	; 0x28
 800d968:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d96a:	2300      	movs	r3, #0
 800d96c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d96e:	2300      	movs	r3, #0
 800d970:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d972:	463a      	mov	r2, r7
 800d974:	1d39      	adds	r1, r7, #4
 800d976:	f107 0308 	add.w	r3, r7, #8
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7fe ff08 	bl	800c790 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d980:	6839      	ldr	r1, [r7, #0]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	68ba      	ldr	r2, [r7, #8]
 800d986:	9202      	str	r2, [sp, #8]
 800d988:	9301      	str	r3, [sp, #4]
 800d98a:	2300      	movs	r3, #0
 800d98c:	9300      	str	r3, [sp, #0]
 800d98e:	2300      	movs	r3, #0
 800d990:	460a      	mov	r2, r1
 800d992:	4921      	ldr	r1, [pc, #132]	; (800da18 <vTaskStartScheduler+0xb4>)
 800d994:	4821      	ldr	r0, [pc, #132]	; (800da1c <vTaskStartScheduler+0xb8>)
 800d996:	f7ff fd09 	bl	800d3ac <xTaskCreateStatic>
 800d99a:	4603      	mov	r3, r0
 800d99c:	4a20      	ldr	r2, [pc, #128]	; (800da20 <vTaskStartScheduler+0xbc>)
 800d99e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d9a0:	4b1f      	ldr	r3, [pc, #124]	; (800da20 <vTaskStartScheduler+0xbc>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d002      	beq.n	800d9ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	617b      	str	r3, [r7, #20]
 800d9ac:	e001      	b.n	800d9b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d102      	bne.n	800d9be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d9b8:	f000 fcfc 	bl	800e3b4 <xTimerCreateTimerTask>
 800d9bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d116      	bne.n	800d9f2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c8:	f383 8811 	msr	BASEPRI, r3
 800d9cc:	f3bf 8f6f 	isb	sy
 800d9d0:	f3bf 8f4f 	dsb	sy
 800d9d4:	613b      	str	r3, [r7, #16]
}
 800d9d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d9d8:	4b12      	ldr	r3, [pc, #72]	; (800da24 <vTaskStartScheduler+0xc0>)
 800d9da:	f04f 32ff 	mov.w	r2, #4294967295
 800d9de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d9e0:	4b11      	ldr	r3, [pc, #68]	; (800da28 <vTaskStartScheduler+0xc4>)
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d9e6:	4b11      	ldr	r3, [pc, #68]	; (800da2c <vTaskStartScheduler+0xc8>)
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d9ec:	f001 f8b8 	bl	800eb60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d9f0:	e00e      	b.n	800da10 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9f8:	d10a      	bne.n	800da10 <vTaskStartScheduler+0xac>
	__asm volatile
 800d9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9fe:	f383 8811 	msr	BASEPRI, r3
 800da02:	f3bf 8f6f 	isb	sy
 800da06:	f3bf 8f4f 	dsb	sy
 800da0a:	60fb      	str	r3, [r7, #12]
}
 800da0c:	bf00      	nop
 800da0e:	e7fe      	b.n	800da0e <vTaskStartScheduler+0xaa>
}
 800da10:	bf00      	nop
 800da12:	3718      	adds	r7, #24
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	08010a4c 	.word	0x08010a4c
 800da1c:	0800e049 	.word	0x0800e049
 800da20:	20001b4c 	.word	0x20001b4c
 800da24:	20001b48 	.word	0x20001b48
 800da28:	20001b34 	.word	0x20001b34
 800da2c:	20001b2c 	.word	0x20001b2c

0800da30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800da30:	b480      	push	{r7}
 800da32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800da34:	4b04      	ldr	r3, [pc, #16]	; (800da48 <vTaskSuspendAll+0x18>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	3301      	adds	r3, #1
 800da3a:	4a03      	ldr	r2, [pc, #12]	; (800da48 <vTaskSuspendAll+0x18>)
 800da3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800da3e:	bf00      	nop
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr
 800da48:	20001b50 	.word	0x20001b50

0800da4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800da52:	2300      	movs	r3, #0
 800da54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800da56:	2300      	movs	r3, #0
 800da58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800da5a:	4b42      	ldr	r3, [pc, #264]	; (800db64 <xTaskResumeAll+0x118>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d10a      	bne.n	800da78 <xTaskResumeAll+0x2c>
	__asm volatile
 800da62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da66:	f383 8811 	msr	BASEPRI, r3
 800da6a:	f3bf 8f6f 	isb	sy
 800da6e:	f3bf 8f4f 	dsb	sy
 800da72:	603b      	str	r3, [r7, #0]
}
 800da74:	bf00      	nop
 800da76:	e7fe      	b.n	800da76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800da78:	f001 f914 	bl	800eca4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800da7c:	4b39      	ldr	r3, [pc, #228]	; (800db64 <xTaskResumeAll+0x118>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	3b01      	subs	r3, #1
 800da82:	4a38      	ldr	r2, [pc, #224]	; (800db64 <xTaskResumeAll+0x118>)
 800da84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da86:	4b37      	ldr	r3, [pc, #220]	; (800db64 <xTaskResumeAll+0x118>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d162      	bne.n	800db54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800da8e:	4b36      	ldr	r3, [pc, #216]	; (800db68 <xTaskResumeAll+0x11c>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d05e      	beq.n	800db54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da96:	e02f      	b.n	800daf8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da98:	4b34      	ldr	r3, [pc, #208]	; (800db6c <xTaskResumeAll+0x120>)
 800da9a:	68db      	ldr	r3, [r3, #12]
 800da9c:	68db      	ldr	r3, [r3, #12]
 800da9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	3318      	adds	r3, #24
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7fe ff31 	bl	800c90c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	3304      	adds	r3, #4
 800daae:	4618      	mov	r0, r3
 800dab0:	f7fe ff2c 	bl	800c90c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dab8:	4b2d      	ldr	r3, [pc, #180]	; (800db70 <xTaskResumeAll+0x124>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d903      	bls.n	800dac8 <xTaskResumeAll+0x7c>
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac4:	4a2a      	ldr	r2, [pc, #168]	; (800db70 <xTaskResumeAll+0x124>)
 800dac6:	6013      	str	r3, [r2, #0]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dacc:	4613      	mov	r3, r2
 800dace:	009b      	lsls	r3, r3, #2
 800dad0:	4413      	add	r3, r2
 800dad2:	009b      	lsls	r3, r3, #2
 800dad4:	4a27      	ldr	r2, [pc, #156]	; (800db74 <xTaskResumeAll+0x128>)
 800dad6:	441a      	add	r2, r3
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	3304      	adds	r3, #4
 800dadc:	4619      	mov	r1, r3
 800dade:	4610      	mov	r0, r2
 800dae0:	f7fe feb7 	bl	800c852 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dae8:	4b23      	ldr	r3, [pc, #140]	; (800db78 <xTaskResumeAll+0x12c>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daee:	429a      	cmp	r2, r3
 800daf0:	d302      	bcc.n	800daf8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800daf2:	4b22      	ldr	r3, [pc, #136]	; (800db7c <xTaskResumeAll+0x130>)
 800daf4:	2201      	movs	r2, #1
 800daf6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800daf8:	4b1c      	ldr	r3, [pc, #112]	; (800db6c <xTaskResumeAll+0x120>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d1cb      	bne.n	800da98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d001      	beq.n	800db0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800db06:	f000 fb55 	bl	800e1b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800db0a:	4b1d      	ldr	r3, [pc, #116]	; (800db80 <xTaskResumeAll+0x134>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d010      	beq.n	800db38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800db16:	f000 f847 	bl	800dba8 <xTaskIncrementTick>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d002      	beq.n	800db26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800db20:	4b16      	ldr	r3, [pc, #88]	; (800db7c <xTaskResumeAll+0x130>)
 800db22:	2201      	movs	r2, #1
 800db24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	3b01      	subs	r3, #1
 800db2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d1f1      	bne.n	800db16 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800db32:	4b13      	ldr	r3, [pc, #76]	; (800db80 <xTaskResumeAll+0x134>)
 800db34:	2200      	movs	r2, #0
 800db36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800db38:	4b10      	ldr	r3, [pc, #64]	; (800db7c <xTaskResumeAll+0x130>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d009      	beq.n	800db54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800db40:	2301      	movs	r3, #1
 800db42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800db44:	4b0f      	ldr	r3, [pc, #60]	; (800db84 <xTaskResumeAll+0x138>)
 800db46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db4a:	601a      	str	r2, [r3, #0]
 800db4c:	f3bf 8f4f 	dsb	sy
 800db50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db54:	f001 f8d6 	bl	800ed04 <vPortExitCritical>

	return xAlreadyYielded;
 800db58:	68bb      	ldr	r3, [r7, #8]
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3710      	adds	r7, #16
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	20001b50 	.word	0x20001b50
 800db68:	20001b28 	.word	0x20001b28
 800db6c:	20001ae8 	.word	0x20001ae8
 800db70:	20001b30 	.word	0x20001b30
 800db74:	20001658 	.word	0x20001658
 800db78:	20001654 	.word	0x20001654
 800db7c:	20001b3c 	.word	0x20001b3c
 800db80:	20001b38 	.word	0x20001b38
 800db84:	e000ed04 	.word	0xe000ed04

0800db88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800db88:	b480      	push	{r7}
 800db8a:	b083      	sub	sp, #12
 800db8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800db8e:	4b05      	ldr	r3, [pc, #20]	; (800dba4 <xTaskGetTickCount+0x1c>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800db94:	687b      	ldr	r3, [r7, #4]
}
 800db96:	4618      	mov	r0, r3
 800db98:	370c      	adds	r7, #12
 800db9a:	46bd      	mov	sp, r7
 800db9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba0:	4770      	bx	lr
 800dba2:	bf00      	nop
 800dba4:	20001b2c 	.word	0x20001b2c

0800dba8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b086      	sub	sp, #24
 800dbac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbb2:	4b4f      	ldr	r3, [pc, #316]	; (800dcf0 <xTaskIncrementTick+0x148>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	f040 808f 	bne.w	800dcda <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dbbc:	4b4d      	ldr	r3, [pc, #308]	; (800dcf4 <xTaskIncrementTick+0x14c>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dbc4:	4a4b      	ldr	r2, [pc, #300]	; (800dcf4 <xTaskIncrementTick+0x14c>)
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d120      	bne.n	800dc12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dbd0:	4b49      	ldr	r3, [pc, #292]	; (800dcf8 <xTaskIncrementTick+0x150>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d00a      	beq.n	800dbf0 <xTaskIncrementTick+0x48>
	__asm volatile
 800dbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbde:	f383 8811 	msr	BASEPRI, r3
 800dbe2:	f3bf 8f6f 	isb	sy
 800dbe6:	f3bf 8f4f 	dsb	sy
 800dbea:	603b      	str	r3, [r7, #0]
}
 800dbec:	bf00      	nop
 800dbee:	e7fe      	b.n	800dbee <xTaskIncrementTick+0x46>
 800dbf0:	4b41      	ldr	r3, [pc, #260]	; (800dcf8 <xTaskIncrementTick+0x150>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	60fb      	str	r3, [r7, #12]
 800dbf6:	4b41      	ldr	r3, [pc, #260]	; (800dcfc <xTaskIncrementTick+0x154>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	4a3f      	ldr	r2, [pc, #252]	; (800dcf8 <xTaskIncrementTick+0x150>)
 800dbfc:	6013      	str	r3, [r2, #0]
 800dbfe:	4a3f      	ldr	r2, [pc, #252]	; (800dcfc <xTaskIncrementTick+0x154>)
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	6013      	str	r3, [r2, #0]
 800dc04:	4b3e      	ldr	r3, [pc, #248]	; (800dd00 <xTaskIncrementTick+0x158>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	3301      	adds	r3, #1
 800dc0a:	4a3d      	ldr	r2, [pc, #244]	; (800dd00 <xTaskIncrementTick+0x158>)
 800dc0c:	6013      	str	r3, [r2, #0]
 800dc0e:	f000 fad1 	bl	800e1b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dc12:	4b3c      	ldr	r3, [pc, #240]	; (800dd04 <xTaskIncrementTick+0x15c>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	693a      	ldr	r2, [r7, #16]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d349      	bcc.n	800dcb0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc1c:	4b36      	ldr	r3, [pc, #216]	; (800dcf8 <xTaskIncrementTick+0x150>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d104      	bne.n	800dc30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc26:	4b37      	ldr	r3, [pc, #220]	; (800dd04 <xTaskIncrementTick+0x15c>)
 800dc28:	f04f 32ff 	mov.w	r2, #4294967295
 800dc2c:	601a      	str	r2, [r3, #0]
					break;
 800dc2e:	e03f      	b.n	800dcb0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc30:	4b31      	ldr	r3, [pc, #196]	; (800dcf8 <xTaskIncrementTick+0x150>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	68db      	ldr	r3, [r3, #12]
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dc40:	693a      	ldr	r2, [r7, #16]
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d203      	bcs.n	800dc50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dc48:	4a2e      	ldr	r2, [pc, #184]	; (800dd04 <xTaskIncrementTick+0x15c>)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dc4e:	e02f      	b.n	800dcb0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	3304      	adds	r3, #4
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7fe fe59 	bl	800c90c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d004      	beq.n	800dc6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	3318      	adds	r3, #24
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7fe fe50 	bl	800c90c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc70:	4b25      	ldr	r3, [pc, #148]	; (800dd08 <xTaskIncrementTick+0x160>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d903      	bls.n	800dc80 <xTaskIncrementTick+0xd8>
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc7c:	4a22      	ldr	r2, [pc, #136]	; (800dd08 <xTaskIncrementTick+0x160>)
 800dc7e:	6013      	str	r3, [r2, #0]
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc84:	4613      	mov	r3, r2
 800dc86:	009b      	lsls	r3, r3, #2
 800dc88:	4413      	add	r3, r2
 800dc8a:	009b      	lsls	r3, r3, #2
 800dc8c:	4a1f      	ldr	r2, [pc, #124]	; (800dd0c <xTaskIncrementTick+0x164>)
 800dc8e:	441a      	add	r2, r3
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	3304      	adds	r3, #4
 800dc94:	4619      	mov	r1, r3
 800dc96:	4610      	mov	r0, r2
 800dc98:	f7fe fddb 	bl	800c852 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dca0:	4b1b      	ldr	r3, [pc, #108]	; (800dd10 <xTaskIncrementTick+0x168>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d3b8      	bcc.n	800dc1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dcaa:	2301      	movs	r3, #1
 800dcac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dcae:	e7b5      	b.n	800dc1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dcb0:	4b17      	ldr	r3, [pc, #92]	; (800dd10 <xTaskIncrementTick+0x168>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcb6:	4915      	ldr	r1, [pc, #84]	; (800dd0c <xTaskIncrementTick+0x164>)
 800dcb8:	4613      	mov	r3, r2
 800dcba:	009b      	lsls	r3, r3, #2
 800dcbc:	4413      	add	r3, r2
 800dcbe:	009b      	lsls	r3, r3, #2
 800dcc0:	440b      	add	r3, r1
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d901      	bls.n	800dccc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dcc8:	2301      	movs	r3, #1
 800dcca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dccc:	4b11      	ldr	r3, [pc, #68]	; (800dd14 <xTaskIncrementTick+0x16c>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d007      	beq.n	800dce4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	617b      	str	r3, [r7, #20]
 800dcd8:	e004      	b.n	800dce4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dcda:	4b0f      	ldr	r3, [pc, #60]	; (800dd18 <xTaskIncrementTick+0x170>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	3301      	adds	r3, #1
 800dce0:	4a0d      	ldr	r2, [pc, #52]	; (800dd18 <xTaskIncrementTick+0x170>)
 800dce2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dce4:	697b      	ldr	r3, [r7, #20]
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3718      	adds	r7, #24
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	20001b50 	.word	0x20001b50
 800dcf4:	20001b2c 	.word	0x20001b2c
 800dcf8:	20001ae0 	.word	0x20001ae0
 800dcfc:	20001ae4 	.word	0x20001ae4
 800dd00:	20001b40 	.word	0x20001b40
 800dd04:	20001b48 	.word	0x20001b48
 800dd08:	20001b30 	.word	0x20001b30
 800dd0c:	20001658 	.word	0x20001658
 800dd10:	20001654 	.word	0x20001654
 800dd14:	20001b3c 	.word	0x20001b3c
 800dd18:	20001b38 	.word	0x20001b38

0800dd1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b085      	sub	sp, #20
 800dd20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dd22:	4b28      	ldr	r3, [pc, #160]	; (800ddc4 <vTaskSwitchContext+0xa8>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d003      	beq.n	800dd32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dd2a:	4b27      	ldr	r3, [pc, #156]	; (800ddc8 <vTaskSwitchContext+0xac>)
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dd30:	e041      	b.n	800ddb6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800dd32:	4b25      	ldr	r3, [pc, #148]	; (800ddc8 <vTaskSwitchContext+0xac>)
 800dd34:	2200      	movs	r2, #0
 800dd36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd38:	4b24      	ldr	r3, [pc, #144]	; (800ddcc <vTaskSwitchContext+0xb0>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	60fb      	str	r3, [r7, #12]
 800dd3e:	e010      	b.n	800dd62 <vTaskSwitchContext+0x46>
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d10a      	bne.n	800dd5c <vTaskSwitchContext+0x40>
	__asm volatile
 800dd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4a:	f383 8811 	msr	BASEPRI, r3
 800dd4e:	f3bf 8f6f 	isb	sy
 800dd52:	f3bf 8f4f 	dsb	sy
 800dd56:	607b      	str	r3, [r7, #4]
}
 800dd58:	bf00      	nop
 800dd5a:	e7fe      	b.n	800dd5a <vTaskSwitchContext+0x3e>
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	3b01      	subs	r3, #1
 800dd60:	60fb      	str	r3, [r7, #12]
 800dd62:	491b      	ldr	r1, [pc, #108]	; (800ddd0 <vTaskSwitchContext+0xb4>)
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	4613      	mov	r3, r2
 800dd68:	009b      	lsls	r3, r3, #2
 800dd6a:	4413      	add	r3, r2
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	440b      	add	r3, r1
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d0e4      	beq.n	800dd40 <vTaskSwitchContext+0x24>
 800dd76:	68fa      	ldr	r2, [r7, #12]
 800dd78:	4613      	mov	r3, r2
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	4413      	add	r3, r2
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	4a13      	ldr	r2, [pc, #76]	; (800ddd0 <vTaskSwitchContext+0xb4>)
 800dd82:	4413      	add	r3, r2
 800dd84:	60bb      	str	r3, [r7, #8]
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	685a      	ldr	r2, [r3, #4]
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	605a      	str	r2, [r3, #4]
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	685a      	ldr	r2, [r3, #4]
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	3308      	adds	r3, #8
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d104      	bne.n	800dda6 <vTaskSwitchContext+0x8a>
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	685b      	ldr	r3, [r3, #4]
 800dda0:	685a      	ldr	r2, [r3, #4]
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	605a      	str	r2, [r3, #4]
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	4a09      	ldr	r2, [pc, #36]	; (800ddd4 <vTaskSwitchContext+0xb8>)
 800ddae:	6013      	str	r3, [r2, #0]
 800ddb0:	4a06      	ldr	r2, [pc, #24]	; (800ddcc <vTaskSwitchContext+0xb0>)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	6013      	str	r3, [r2, #0]
}
 800ddb6:	bf00      	nop
 800ddb8:	3714      	adds	r7, #20
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr
 800ddc2:	bf00      	nop
 800ddc4:	20001b50 	.word	0x20001b50
 800ddc8:	20001b3c 	.word	0x20001b3c
 800ddcc:	20001b30 	.word	0x20001b30
 800ddd0:	20001658 	.word	0x20001658
 800ddd4:	20001654 	.word	0x20001654

0800ddd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d10a      	bne.n	800ddfe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddec:	f383 8811 	msr	BASEPRI, r3
 800ddf0:	f3bf 8f6f 	isb	sy
 800ddf4:	f3bf 8f4f 	dsb	sy
 800ddf8:	60fb      	str	r3, [r7, #12]
}
 800ddfa:	bf00      	nop
 800ddfc:	e7fe      	b.n	800ddfc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ddfe:	4b07      	ldr	r3, [pc, #28]	; (800de1c <vTaskPlaceOnEventList+0x44>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	3318      	adds	r3, #24
 800de04:	4619      	mov	r1, r3
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f7fe fd47 	bl	800c89a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800de0c:	2101      	movs	r1, #1
 800de0e:	6838      	ldr	r0, [r7, #0]
 800de10:	f000 fa7c 	bl	800e30c <prvAddCurrentTaskToDelayedList>
}
 800de14:	bf00      	nop
 800de16:	3710      	adds	r7, #16
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	20001654 	.word	0x20001654

0800de20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800de20:	b580      	push	{r7, lr}
 800de22:	b086      	sub	sp, #24
 800de24:	af00      	add	r7, sp, #0
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d10a      	bne.n	800de48 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800de32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de36:	f383 8811 	msr	BASEPRI, r3
 800de3a:	f3bf 8f6f 	isb	sy
 800de3e:	f3bf 8f4f 	dsb	sy
 800de42:	617b      	str	r3, [r7, #20]
}
 800de44:	bf00      	nop
 800de46:	e7fe      	b.n	800de46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de48:	4b0a      	ldr	r3, [pc, #40]	; (800de74 <vTaskPlaceOnEventListRestricted+0x54>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	3318      	adds	r3, #24
 800de4e:	4619      	mov	r1, r3
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f7fe fcfe 	bl	800c852 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d002      	beq.n	800de62 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800de5c:	f04f 33ff 	mov.w	r3, #4294967295
 800de60:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800de62:	6879      	ldr	r1, [r7, #4]
 800de64:	68b8      	ldr	r0, [r7, #8]
 800de66:	f000 fa51 	bl	800e30c <prvAddCurrentTaskToDelayedList>
	}
 800de6a:	bf00      	nop
 800de6c:	3718      	adds	r7, #24
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	20001654 	.word	0x20001654

0800de78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b086      	sub	sp, #24
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	68db      	ldr	r3, [r3, #12]
 800de86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d10a      	bne.n	800dea4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800de8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de92:	f383 8811 	msr	BASEPRI, r3
 800de96:	f3bf 8f6f 	isb	sy
 800de9a:	f3bf 8f4f 	dsb	sy
 800de9e:	60fb      	str	r3, [r7, #12]
}
 800dea0:	bf00      	nop
 800dea2:	e7fe      	b.n	800dea2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	3318      	adds	r3, #24
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7fe fd2f 	bl	800c90c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800deae:	4b1e      	ldr	r3, [pc, #120]	; (800df28 <xTaskRemoveFromEventList+0xb0>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d11d      	bne.n	800def2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	3304      	adds	r3, #4
 800deba:	4618      	mov	r0, r3
 800debc:	f7fe fd26 	bl	800c90c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dec4:	4b19      	ldr	r3, [pc, #100]	; (800df2c <xTaskRemoveFromEventList+0xb4>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d903      	bls.n	800ded4 <xTaskRemoveFromEventList+0x5c>
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ded0:	4a16      	ldr	r2, [pc, #88]	; (800df2c <xTaskRemoveFromEventList+0xb4>)
 800ded2:	6013      	str	r3, [r2, #0]
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ded8:	4613      	mov	r3, r2
 800deda:	009b      	lsls	r3, r3, #2
 800dedc:	4413      	add	r3, r2
 800dede:	009b      	lsls	r3, r3, #2
 800dee0:	4a13      	ldr	r2, [pc, #76]	; (800df30 <xTaskRemoveFromEventList+0xb8>)
 800dee2:	441a      	add	r2, r3
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	3304      	adds	r3, #4
 800dee8:	4619      	mov	r1, r3
 800deea:	4610      	mov	r0, r2
 800deec:	f7fe fcb1 	bl	800c852 <vListInsertEnd>
 800def0:	e005      	b.n	800defe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	3318      	adds	r3, #24
 800def6:	4619      	mov	r1, r3
 800def8:	480e      	ldr	r0, [pc, #56]	; (800df34 <xTaskRemoveFromEventList+0xbc>)
 800defa:	f7fe fcaa 	bl	800c852 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df02:	4b0d      	ldr	r3, [pc, #52]	; (800df38 <xTaskRemoveFromEventList+0xc0>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df08:	429a      	cmp	r2, r3
 800df0a:	d905      	bls.n	800df18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800df0c:	2301      	movs	r3, #1
 800df0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800df10:	4b0a      	ldr	r3, [pc, #40]	; (800df3c <xTaskRemoveFromEventList+0xc4>)
 800df12:	2201      	movs	r2, #1
 800df14:	601a      	str	r2, [r3, #0]
 800df16:	e001      	b.n	800df1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800df18:	2300      	movs	r3, #0
 800df1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800df1c:	697b      	ldr	r3, [r7, #20]
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3718      	adds	r7, #24
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
 800df26:	bf00      	nop
 800df28:	20001b50 	.word	0x20001b50
 800df2c:	20001b30 	.word	0x20001b30
 800df30:	20001658 	.word	0x20001658
 800df34:	20001ae8 	.word	0x20001ae8
 800df38:	20001654 	.word	0x20001654
 800df3c:	20001b3c 	.word	0x20001b3c

0800df40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800df40:	b480      	push	{r7}
 800df42:	b083      	sub	sp, #12
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800df48:	4b06      	ldr	r3, [pc, #24]	; (800df64 <vTaskInternalSetTimeOutState+0x24>)
 800df4a:	681a      	ldr	r2, [r3, #0]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800df50:	4b05      	ldr	r3, [pc, #20]	; (800df68 <vTaskInternalSetTimeOutState+0x28>)
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	605a      	str	r2, [r3, #4]
}
 800df58:	bf00      	nop
 800df5a:	370c      	adds	r7, #12
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr
 800df64:	20001b40 	.word	0x20001b40
 800df68:	20001b2c 	.word	0x20001b2c

0800df6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b088      	sub	sp, #32
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d10a      	bne.n	800df92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800df7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df80:	f383 8811 	msr	BASEPRI, r3
 800df84:	f3bf 8f6f 	isb	sy
 800df88:	f3bf 8f4f 	dsb	sy
 800df8c:	613b      	str	r3, [r7, #16]
}
 800df8e:	bf00      	nop
 800df90:	e7fe      	b.n	800df90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d10a      	bne.n	800dfae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800df98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df9c:	f383 8811 	msr	BASEPRI, r3
 800dfa0:	f3bf 8f6f 	isb	sy
 800dfa4:	f3bf 8f4f 	dsb	sy
 800dfa8:	60fb      	str	r3, [r7, #12]
}
 800dfaa:	bf00      	nop
 800dfac:	e7fe      	b.n	800dfac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dfae:	f000 fe79 	bl	800eca4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dfb2:	4b1d      	ldr	r3, [pc, #116]	; (800e028 <xTaskCheckForTimeOut+0xbc>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	69ba      	ldr	r2, [r7, #24]
 800dfbe:	1ad3      	subs	r3, r2, r3
 800dfc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfca:	d102      	bne.n	800dfd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	61fb      	str	r3, [r7, #28]
 800dfd0:	e023      	b.n	800e01a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681a      	ldr	r2, [r3, #0]
 800dfd6:	4b15      	ldr	r3, [pc, #84]	; (800e02c <xTaskCheckForTimeOut+0xc0>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d007      	beq.n	800dfee <xTaskCheckForTimeOut+0x82>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	69ba      	ldr	r2, [r7, #24]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d302      	bcc.n	800dfee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	61fb      	str	r3, [r7, #28]
 800dfec:	e015      	b.n	800e01a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	697a      	ldr	r2, [r7, #20]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d20b      	bcs.n	800e010 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	1ad2      	subs	r2, r2, r3
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7ff ff9b 	bl	800df40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e00a:	2300      	movs	r3, #0
 800e00c:	61fb      	str	r3, [r7, #28]
 800e00e:	e004      	b.n	800e01a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	2200      	movs	r2, #0
 800e014:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e016:	2301      	movs	r3, #1
 800e018:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e01a:	f000 fe73 	bl	800ed04 <vPortExitCritical>

	return xReturn;
 800e01e:	69fb      	ldr	r3, [r7, #28]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3720      	adds	r7, #32
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	20001b2c 	.word	0x20001b2c
 800e02c:	20001b40 	.word	0x20001b40

0800e030 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e030:	b480      	push	{r7}
 800e032:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e034:	4b03      	ldr	r3, [pc, #12]	; (800e044 <vTaskMissedYield+0x14>)
 800e036:	2201      	movs	r2, #1
 800e038:	601a      	str	r2, [r3, #0]
}
 800e03a:	bf00      	nop
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr
 800e044:	20001b3c 	.word	0x20001b3c

0800e048 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e050:	f000 f852 	bl	800e0f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e054:	4b06      	ldr	r3, [pc, #24]	; (800e070 <prvIdleTask+0x28>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d9f9      	bls.n	800e050 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e05c:	4b05      	ldr	r3, [pc, #20]	; (800e074 <prvIdleTask+0x2c>)
 800e05e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e062:	601a      	str	r2, [r3, #0]
 800e064:	f3bf 8f4f 	dsb	sy
 800e068:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e06c:	e7f0      	b.n	800e050 <prvIdleTask+0x8>
 800e06e:	bf00      	nop
 800e070:	20001658 	.word	0x20001658
 800e074:	e000ed04 	.word	0xe000ed04

0800e078 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e07e:	2300      	movs	r3, #0
 800e080:	607b      	str	r3, [r7, #4]
 800e082:	e00c      	b.n	800e09e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e084:	687a      	ldr	r2, [r7, #4]
 800e086:	4613      	mov	r3, r2
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	4413      	add	r3, r2
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	4a12      	ldr	r2, [pc, #72]	; (800e0d8 <prvInitialiseTaskLists+0x60>)
 800e090:	4413      	add	r3, r2
 800e092:	4618      	mov	r0, r3
 800e094:	f7fe fbb0 	bl	800c7f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	3301      	adds	r3, #1
 800e09c:	607b      	str	r3, [r7, #4]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2b37      	cmp	r3, #55	; 0x37
 800e0a2:	d9ef      	bls.n	800e084 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e0a4:	480d      	ldr	r0, [pc, #52]	; (800e0dc <prvInitialiseTaskLists+0x64>)
 800e0a6:	f7fe fba7 	bl	800c7f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e0aa:	480d      	ldr	r0, [pc, #52]	; (800e0e0 <prvInitialiseTaskLists+0x68>)
 800e0ac:	f7fe fba4 	bl	800c7f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e0b0:	480c      	ldr	r0, [pc, #48]	; (800e0e4 <prvInitialiseTaskLists+0x6c>)
 800e0b2:	f7fe fba1 	bl	800c7f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e0b6:	480c      	ldr	r0, [pc, #48]	; (800e0e8 <prvInitialiseTaskLists+0x70>)
 800e0b8:	f7fe fb9e 	bl	800c7f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e0bc:	480b      	ldr	r0, [pc, #44]	; (800e0ec <prvInitialiseTaskLists+0x74>)
 800e0be:	f7fe fb9b 	bl	800c7f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e0c2:	4b0b      	ldr	r3, [pc, #44]	; (800e0f0 <prvInitialiseTaskLists+0x78>)
 800e0c4:	4a05      	ldr	r2, [pc, #20]	; (800e0dc <prvInitialiseTaskLists+0x64>)
 800e0c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e0c8:	4b0a      	ldr	r3, [pc, #40]	; (800e0f4 <prvInitialiseTaskLists+0x7c>)
 800e0ca:	4a05      	ldr	r2, [pc, #20]	; (800e0e0 <prvInitialiseTaskLists+0x68>)
 800e0cc:	601a      	str	r2, [r3, #0]
}
 800e0ce:	bf00      	nop
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	20001658 	.word	0x20001658
 800e0dc:	20001ab8 	.word	0x20001ab8
 800e0e0:	20001acc 	.word	0x20001acc
 800e0e4:	20001ae8 	.word	0x20001ae8
 800e0e8:	20001afc 	.word	0x20001afc
 800e0ec:	20001b14 	.word	0x20001b14
 800e0f0:	20001ae0 	.word	0x20001ae0
 800e0f4:	20001ae4 	.word	0x20001ae4

0800e0f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0fe:	e019      	b.n	800e134 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e100:	f000 fdd0 	bl	800eca4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e104:	4b10      	ldr	r3, [pc, #64]	; (800e148 <prvCheckTasksWaitingTermination+0x50>)
 800e106:	68db      	ldr	r3, [r3, #12]
 800e108:	68db      	ldr	r3, [r3, #12]
 800e10a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	3304      	adds	r3, #4
 800e110:	4618      	mov	r0, r3
 800e112:	f7fe fbfb 	bl	800c90c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e116:	4b0d      	ldr	r3, [pc, #52]	; (800e14c <prvCheckTasksWaitingTermination+0x54>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	3b01      	subs	r3, #1
 800e11c:	4a0b      	ldr	r2, [pc, #44]	; (800e14c <prvCheckTasksWaitingTermination+0x54>)
 800e11e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e120:	4b0b      	ldr	r3, [pc, #44]	; (800e150 <prvCheckTasksWaitingTermination+0x58>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	3b01      	subs	r3, #1
 800e126:	4a0a      	ldr	r2, [pc, #40]	; (800e150 <prvCheckTasksWaitingTermination+0x58>)
 800e128:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e12a:	f000 fdeb 	bl	800ed04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 f810 	bl	800e154 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e134:	4b06      	ldr	r3, [pc, #24]	; (800e150 <prvCheckTasksWaitingTermination+0x58>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d1e1      	bne.n	800e100 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e13c:	bf00      	nop
 800e13e:	bf00      	nop
 800e140:	3708      	adds	r7, #8
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	20001afc 	.word	0x20001afc
 800e14c:	20001b28 	.word	0x20001b28
 800e150:	20001b10 	.word	0x20001b10

0800e154 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800e162:	2b00      	cmp	r3, #0
 800e164:	d108      	bne.n	800e178 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e16a:	4618      	mov	r0, r3
 800e16c:	f000 ff88 	bl	800f080 <vPortFree>
				vPortFree( pxTCB );
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f000 ff85 	bl	800f080 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e176:	e018      	b.n	800e1aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d103      	bne.n	800e18a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f000 ff7c 	bl	800f080 <vPortFree>
	}
 800e188:	e00f      	b.n	800e1aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800e190:	2b02      	cmp	r3, #2
 800e192:	d00a      	beq.n	800e1aa <prvDeleteTCB+0x56>
	__asm volatile
 800e194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e198:	f383 8811 	msr	BASEPRI, r3
 800e19c:	f3bf 8f6f 	isb	sy
 800e1a0:	f3bf 8f4f 	dsb	sy
 800e1a4:	60fb      	str	r3, [r7, #12]
}
 800e1a6:	bf00      	nop
 800e1a8:	e7fe      	b.n	800e1a8 <prvDeleteTCB+0x54>
	}
 800e1aa:	bf00      	nop
 800e1ac:	3710      	adds	r7, #16
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
	...

0800e1b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b083      	sub	sp, #12
 800e1b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1ba:	4b0c      	ldr	r3, [pc, #48]	; (800e1ec <prvResetNextTaskUnblockTime+0x38>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d104      	bne.n	800e1ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e1c4:	4b0a      	ldr	r3, [pc, #40]	; (800e1f0 <prvResetNextTaskUnblockTime+0x3c>)
 800e1c6:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e1cc:	e008      	b.n	800e1e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1ce:	4b07      	ldr	r3, [pc, #28]	; (800e1ec <prvResetNextTaskUnblockTime+0x38>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	4a04      	ldr	r2, [pc, #16]	; (800e1f0 <prvResetNextTaskUnblockTime+0x3c>)
 800e1de:	6013      	str	r3, [r2, #0]
}
 800e1e0:	bf00      	nop
 800e1e2:	370c      	adds	r7, #12
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr
 800e1ec:	20001ae0 	.word	0x20001ae0
 800e1f0:	20001b48 	.word	0x20001b48

0800e1f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b083      	sub	sp, #12
 800e1f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e1fa:	4b0b      	ldr	r3, [pc, #44]	; (800e228 <xTaskGetSchedulerState+0x34>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d102      	bne.n	800e208 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e202:	2301      	movs	r3, #1
 800e204:	607b      	str	r3, [r7, #4]
 800e206:	e008      	b.n	800e21a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e208:	4b08      	ldr	r3, [pc, #32]	; (800e22c <xTaskGetSchedulerState+0x38>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d102      	bne.n	800e216 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e210:	2302      	movs	r3, #2
 800e212:	607b      	str	r3, [r7, #4]
 800e214:	e001      	b.n	800e21a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e216:	2300      	movs	r3, #0
 800e218:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e21a:	687b      	ldr	r3, [r7, #4]
	}
 800e21c:	4618      	mov	r0, r3
 800e21e:	370c      	adds	r7, #12
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr
 800e228:	20001b34 	.word	0x20001b34
 800e22c:	20001b50 	.word	0x20001b50

0800e230 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e230:	b580      	push	{r7, lr}
 800e232:	b086      	sub	sp, #24
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e23c:	2300      	movs	r3, #0
 800e23e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d056      	beq.n	800e2f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e246:	4b2e      	ldr	r3, [pc, #184]	; (800e300 <xTaskPriorityDisinherit+0xd0>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	693a      	ldr	r2, [r7, #16]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d00a      	beq.n	800e266 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e254:	f383 8811 	msr	BASEPRI, r3
 800e258:	f3bf 8f6f 	isb	sy
 800e25c:	f3bf 8f4f 	dsb	sy
 800e260:	60fb      	str	r3, [r7, #12]
}
 800e262:	bf00      	nop
 800e264:	e7fe      	b.n	800e264 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d10a      	bne.n	800e284 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e272:	f383 8811 	msr	BASEPRI, r3
 800e276:	f3bf 8f6f 	isb	sy
 800e27a:	f3bf 8f4f 	dsb	sy
 800e27e:	60bb      	str	r3, [r7, #8]
}
 800e280:	bf00      	nop
 800e282:	e7fe      	b.n	800e282 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e288:	1e5a      	subs	r2, r3, #1
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e296:	429a      	cmp	r2, r3
 800e298:	d02c      	beq.n	800e2f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d128      	bne.n	800e2f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	3304      	adds	r3, #4
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7fe fb30 	bl	800c90c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2c4:	4b0f      	ldr	r3, [pc, #60]	; (800e304 <xTaskPriorityDisinherit+0xd4>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d903      	bls.n	800e2d4 <xTaskPriorityDisinherit+0xa4>
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d0:	4a0c      	ldr	r2, [pc, #48]	; (800e304 <xTaskPriorityDisinherit+0xd4>)
 800e2d2:	6013      	str	r3, [r2, #0]
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2d8:	4613      	mov	r3, r2
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	4413      	add	r3, r2
 800e2de:	009b      	lsls	r3, r3, #2
 800e2e0:	4a09      	ldr	r2, [pc, #36]	; (800e308 <xTaskPriorityDisinherit+0xd8>)
 800e2e2:	441a      	add	r2, r3
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	3304      	adds	r3, #4
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	4610      	mov	r0, r2
 800e2ec:	f7fe fab1 	bl	800c852 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e2f4:	697b      	ldr	r3, [r7, #20]
	}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3718      	adds	r7, #24
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop
 800e300:	20001654 	.word	0x20001654
 800e304:	20001b30 	.word	0x20001b30
 800e308:	20001658 	.word	0x20001658

0800e30c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e316:	4b21      	ldr	r3, [pc, #132]	; (800e39c <prvAddCurrentTaskToDelayedList+0x90>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e31c:	4b20      	ldr	r3, [pc, #128]	; (800e3a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	3304      	adds	r3, #4
 800e322:	4618      	mov	r0, r3
 800e324:	f7fe faf2 	bl	800c90c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e32e:	d10a      	bne.n	800e346 <prvAddCurrentTaskToDelayedList+0x3a>
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d007      	beq.n	800e346 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e336:	4b1a      	ldr	r3, [pc, #104]	; (800e3a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	3304      	adds	r3, #4
 800e33c:	4619      	mov	r1, r3
 800e33e:	4819      	ldr	r0, [pc, #100]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0x98>)
 800e340:	f7fe fa87 	bl	800c852 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e344:	e026      	b.n	800e394 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e346:	68fa      	ldr	r2, [r7, #12]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	4413      	add	r3, r2
 800e34c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e34e:	4b14      	ldr	r3, [pc, #80]	; (800e3a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	68ba      	ldr	r2, [r7, #8]
 800e354:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e356:	68ba      	ldr	r2, [r7, #8]
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d209      	bcs.n	800e372 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e35e:	4b12      	ldr	r3, [pc, #72]	; (800e3a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	4b0f      	ldr	r3, [pc, #60]	; (800e3a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	3304      	adds	r3, #4
 800e368:	4619      	mov	r1, r3
 800e36a:	4610      	mov	r0, r2
 800e36c:	f7fe fa95 	bl	800c89a <vListInsert>
}
 800e370:	e010      	b.n	800e394 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e372:	4b0e      	ldr	r3, [pc, #56]	; (800e3ac <prvAddCurrentTaskToDelayedList+0xa0>)
 800e374:	681a      	ldr	r2, [r3, #0]
 800e376:	4b0a      	ldr	r3, [pc, #40]	; (800e3a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	3304      	adds	r3, #4
 800e37c:	4619      	mov	r1, r3
 800e37e:	4610      	mov	r0, r2
 800e380:	f7fe fa8b 	bl	800c89a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e384:	4b0a      	ldr	r3, [pc, #40]	; (800e3b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	68ba      	ldr	r2, [r7, #8]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d202      	bcs.n	800e394 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e38e:	4a08      	ldr	r2, [pc, #32]	; (800e3b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	6013      	str	r3, [r2, #0]
}
 800e394:	bf00      	nop
 800e396:	3710      	adds	r7, #16
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	20001b2c 	.word	0x20001b2c
 800e3a0:	20001654 	.word	0x20001654
 800e3a4:	20001b14 	.word	0x20001b14
 800e3a8:	20001ae4 	.word	0x20001ae4
 800e3ac:	20001ae0 	.word	0x20001ae0
 800e3b0:	20001b48 	.word	0x20001b48

0800e3b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b08a      	sub	sp, #40	; 0x28
 800e3b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e3be:	f000 fb07 	bl	800e9d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e3c2:	4b1c      	ldr	r3, [pc, #112]	; (800e434 <xTimerCreateTimerTask+0x80>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d021      	beq.n	800e40e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e3d2:	1d3a      	adds	r2, r7, #4
 800e3d4:	f107 0108 	add.w	r1, r7, #8
 800e3d8:	f107 030c 	add.w	r3, r7, #12
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7fe f9f1 	bl	800c7c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e3e2:	6879      	ldr	r1, [r7, #4]
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	68fa      	ldr	r2, [r7, #12]
 800e3e8:	9202      	str	r2, [sp, #8]
 800e3ea:	9301      	str	r3, [sp, #4]
 800e3ec:	2302      	movs	r3, #2
 800e3ee:	9300      	str	r3, [sp, #0]
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	460a      	mov	r2, r1
 800e3f4:	4910      	ldr	r1, [pc, #64]	; (800e438 <xTimerCreateTimerTask+0x84>)
 800e3f6:	4811      	ldr	r0, [pc, #68]	; (800e43c <xTimerCreateTimerTask+0x88>)
 800e3f8:	f7fe ffd8 	bl	800d3ac <xTaskCreateStatic>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	4a10      	ldr	r2, [pc, #64]	; (800e440 <xTimerCreateTimerTask+0x8c>)
 800e400:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e402:	4b0f      	ldr	r3, [pc, #60]	; (800e440 <xTimerCreateTimerTask+0x8c>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d001      	beq.n	800e40e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e40a:	2301      	movs	r3, #1
 800e40c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d10a      	bne.n	800e42a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e418:	f383 8811 	msr	BASEPRI, r3
 800e41c:	f3bf 8f6f 	isb	sy
 800e420:	f3bf 8f4f 	dsb	sy
 800e424:	613b      	str	r3, [r7, #16]
}
 800e426:	bf00      	nop
 800e428:	e7fe      	b.n	800e428 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e42a:	697b      	ldr	r3, [r7, #20]
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3718      	adds	r7, #24
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}
 800e434:	20001b84 	.word	0x20001b84
 800e438:	08010a54 	.word	0x08010a54
 800e43c:	0800e579 	.word	0x0800e579
 800e440:	20001b88 	.word	0x20001b88

0800e444 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b08a      	sub	sp, #40	; 0x28
 800e448:	af00      	add	r7, sp, #0
 800e44a:	60f8      	str	r0, [r7, #12]
 800e44c:	60b9      	str	r1, [r7, #8]
 800e44e:	607a      	str	r2, [r7, #4]
 800e450:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e452:	2300      	movs	r3, #0
 800e454:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d10a      	bne.n	800e472 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e460:	f383 8811 	msr	BASEPRI, r3
 800e464:	f3bf 8f6f 	isb	sy
 800e468:	f3bf 8f4f 	dsb	sy
 800e46c:	623b      	str	r3, [r7, #32]
}
 800e46e:	bf00      	nop
 800e470:	e7fe      	b.n	800e470 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e472:	4b1a      	ldr	r3, [pc, #104]	; (800e4dc <xTimerGenericCommand+0x98>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d02a      	beq.n	800e4d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	2b05      	cmp	r3, #5
 800e48a:	dc18      	bgt.n	800e4be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e48c:	f7ff feb2 	bl	800e1f4 <xTaskGetSchedulerState>
 800e490:	4603      	mov	r3, r0
 800e492:	2b02      	cmp	r3, #2
 800e494:	d109      	bne.n	800e4aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e496:	4b11      	ldr	r3, [pc, #68]	; (800e4dc <xTimerGenericCommand+0x98>)
 800e498:	6818      	ldr	r0, [r3, #0]
 800e49a:	f107 0110 	add.w	r1, r7, #16
 800e49e:	2300      	movs	r3, #0
 800e4a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4a2:	f7fe fb9b 	bl	800cbdc <xQueueGenericSend>
 800e4a6:	6278      	str	r0, [r7, #36]	; 0x24
 800e4a8:	e012      	b.n	800e4d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e4aa:	4b0c      	ldr	r3, [pc, #48]	; (800e4dc <xTimerGenericCommand+0x98>)
 800e4ac:	6818      	ldr	r0, [r3, #0]
 800e4ae:	f107 0110 	add.w	r1, r7, #16
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	f7fe fb91 	bl	800cbdc <xQueueGenericSend>
 800e4ba:	6278      	str	r0, [r7, #36]	; 0x24
 800e4bc:	e008      	b.n	800e4d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e4be:	4b07      	ldr	r3, [pc, #28]	; (800e4dc <xTimerGenericCommand+0x98>)
 800e4c0:	6818      	ldr	r0, [r3, #0]
 800e4c2:	f107 0110 	add.w	r1, r7, #16
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	683a      	ldr	r2, [r7, #0]
 800e4ca:	f7fe fc85 	bl	800cdd8 <xQueueGenericSendFromISR>
 800e4ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3728      	adds	r7, #40	; 0x28
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
 800e4da:	bf00      	nop
 800e4dc:	20001b84 	.word	0x20001b84

0800e4e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b088      	sub	sp, #32
 800e4e4:	af02      	add	r7, sp, #8
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4ea:	4b22      	ldr	r3, [pc, #136]	; (800e574 <prvProcessExpiredTimer+0x94>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	68db      	ldr	r3, [r3, #12]
 800e4f0:	68db      	ldr	r3, [r3, #12]
 800e4f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	3304      	adds	r3, #4
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7fe fa07 	bl	800c90c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e504:	f003 0304 	and.w	r3, r3, #4
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d022      	beq.n	800e552 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	699a      	ldr	r2, [r3, #24]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	18d1      	adds	r1, r2, r3
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	683a      	ldr	r2, [r7, #0]
 800e518:	6978      	ldr	r0, [r7, #20]
 800e51a:	f000 f8d1 	bl	800e6c0 <prvInsertTimerInActiveList>
 800e51e:	4603      	mov	r3, r0
 800e520:	2b00      	cmp	r3, #0
 800e522:	d01f      	beq.n	800e564 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e524:	2300      	movs	r3, #0
 800e526:	9300      	str	r3, [sp, #0]
 800e528:	2300      	movs	r3, #0
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	2100      	movs	r1, #0
 800e52e:	6978      	ldr	r0, [r7, #20]
 800e530:	f7ff ff88 	bl	800e444 <xTimerGenericCommand>
 800e534:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d113      	bne.n	800e564 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e540:	f383 8811 	msr	BASEPRI, r3
 800e544:	f3bf 8f6f 	isb	sy
 800e548:	f3bf 8f4f 	dsb	sy
 800e54c:	60fb      	str	r3, [r7, #12]
}
 800e54e:	bf00      	nop
 800e550:	e7fe      	b.n	800e550 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e558:	f023 0301 	bic.w	r3, r3, #1
 800e55c:	b2da      	uxtb	r2, r3
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	6a1b      	ldr	r3, [r3, #32]
 800e568:	6978      	ldr	r0, [r7, #20]
 800e56a:	4798      	blx	r3
}
 800e56c:	bf00      	nop
 800e56e:	3718      	adds	r7, #24
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}
 800e574:	20001b7c 	.word	0x20001b7c

0800e578 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e580:	f107 0308 	add.w	r3, r7, #8
 800e584:	4618      	mov	r0, r3
 800e586:	f000 f857 	bl	800e638 <prvGetNextExpireTime>
 800e58a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	4619      	mov	r1, r3
 800e590:	68f8      	ldr	r0, [r7, #12]
 800e592:	f000 f803 	bl	800e59c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e596:	f000 f8d5 	bl	800e744 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e59a:	e7f1      	b.n	800e580 <prvTimerTask+0x8>

0800e59c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b084      	sub	sp, #16
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
 800e5a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e5a6:	f7ff fa43 	bl	800da30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e5aa:	f107 0308 	add.w	r3, r7, #8
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f000 f866 	bl	800e680 <prvSampleTimeNow>
 800e5b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d130      	bne.n	800e61e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d10a      	bne.n	800e5d8 <prvProcessTimerOrBlockTask+0x3c>
 800e5c2:	687a      	ldr	r2, [r7, #4]
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d806      	bhi.n	800e5d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e5ca:	f7ff fa3f 	bl	800da4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e5ce:	68f9      	ldr	r1, [r7, #12]
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f7ff ff85 	bl	800e4e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e5d6:	e024      	b.n	800e622 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d008      	beq.n	800e5f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e5de:	4b13      	ldr	r3, [pc, #76]	; (800e62c <prvProcessTimerOrBlockTask+0x90>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d101      	bne.n	800e5ec <prvProcessTimerOrBlockTask+0x50>
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	e000      	b.n	800e5ee <prvProcessTimerOrBlockTask+0x52>
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e5f0:	4b0f      	ldr	r3, [pc, #60]	; (800e630 <prvProcessTimerOrBlockTask+0x94>)
 800e5f2:	6818      	ldr	r0, [r3, #0]
 800e5f4:	687a      	ldr	r2, [r7, #4]
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	1ad3      	subs	r3, r2, r3
 800e5fa:	683a      	ldr	r2, [r7, #0]
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	f7fe fea1 	bl	800d344 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e602:	f7ff fa23 	bl	800da4c <xTaskResumeAll>
 800e606:	4603      	mov	r3, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d10a      	bne.n	800e622 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e60c:	4b09      	ldr	r3, [pc, #36]	; (800e634 <prvProcessTimerOrBlockTask+0x98>)
 800e60e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e612:	601a      	str	r2, [r3, #0]
 800e614:	f3bf 8f4f 	dsb	sy
 800e618:	f3bf 8f6f 	isb	sy
}
 800e61c:	e001      	b.n	800e622 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e61e:	f7ff fa15 	bl	800da4c <xTaskResumeAll>
}
 800e622:	bf00      	nop
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	20001b80 	.word	0x20001b80
 800e630:	20001b84 	.word	0x20001b84
 800e634:	e000ed04 	.word	0xe000ed04

0800e638 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e638:	b480      	push	{r7}
 800e63a:	b085      	sub	sp, #20
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e640:	4b0e      	ldr	r3, [pc, #56]	; (800e67c <prvGetNextExpireTime+0x44>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d101      	bne.n	800e64e <prvGetNextExpireTime+0x16>
 800e64a:	2201      	movs	r2, #1
 800e64c:	e000      	b.n	800e650 <prvGetNextExpireTime+0x18>
 800e64e:	2200      	movs	r2, #0
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d105      	bne.n	800e668 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e65c:	4b07      	ldr	r3, [pc, #28]	; (800e67c <prvGetNextExpireTime+0x44>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	68db      	ldr	r3, [r3, #12]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	60fb      	str	r3, [r7, #12]
 800e666:	e001      	b.n	800e66c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e668:	2300      	movs	r3, #0
 800e66a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e66c:	68fb      	ldr	r3, [r7, #12]
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3714      	adds	r7, #20
 800e672:	46bd      	mov	sp, r7
 800e674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e678:	4770      	bx	lr
 800e67a:	bf00      	nop
 800e67c:	20001b7c 	.word	0x20001b7c

0800e680 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b084      	sub	sp, #16
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e688:	f7ff fa7e 	bl	800db88 <xTaskGetTickCount>
 800e68c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e68e:	4b0b      	ldr	r3, [pc, #44]	; (800e6bc <prvSampleTimeNow+0x3c>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	68fa      	ldr	r2, [r7, #12]
 800e694:	429a      	cmp	r2, r3
 800e696:	d205      	bcs.n	800e6a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e698:	f000 f936 	bl	800e908 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2201      	movs	r2, #1
 800e6a0:	601a      	str	r2, [r3, #0]
 800e6a2:	e002      	b.n	800e6aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e6aa:	4a04      	ldr	r2, [pc, #16]	; (800e6bc <prvSampleTimeNow+0x3c>)
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3710      	adds	r7, #16
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	20001b8c 	.word	0x20001b8c

0800e6c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b086      	sub	sp, #24
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	60b9      	str	r1, [r7, #8]
 800e6ca:	607a      	str	r2, [r7, #4]
 800e6cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	68ba      	ldr	r2, [r7, #8]
 800e6d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	68fa      	ldr	r2, [r7, #12]
 800e6dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e6de:	68ba      	ldr	r2, [r7, #8]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d812      	bhi.n	800e70c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6e6:	687a      	ldr	r2, [r7, #4]
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	1ad2      	subs	r2, r2, r3
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	699b      	ldr	r3, [r3, #24]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d302      	bcc.n	800e6fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	617b      	str	r3, [r7, #20]
 800e6f8:	e01b      	b.n	800e732 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e6fa:	4b10      	ldr	r3, [pc, #64]	; (800e73c <prvInsertTimerInActiveList+0x7c>)
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	3304      	adds	r3, #4
 800e702:	4619      	mov	r1, r3
 800e704:	4610      	mov	r0, r2
 800e706:	f7fe f8c8 	bl	800c89a <vListInsert>
 800e70a:	e012      	b.n	800e732 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e70c:	687a      	ldr	r2, [r7, #4]
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	429a      	cmp	r2, r3
 800e712:	d206      	bcs.n	800e722 <prvInsertTimerInActiveList+0x62>
 800e714:	68ba      	ldr	r2, [r7, #8]
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	429a      	cmp	r2, r3
 800e71a:	d302      	bcc.n	800e722 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e71c:	2301      	movs	r3, #1
 800e71e:	617b      	str	r3, [r7, #20]
 800e720:	e007      	b.n	800e732 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e722:	4b07      	ldr	r3, [pc, #28]	; (800e740 <prvInsertTimerInActiveList+0x80>)
 800e724:	681a      	ldr	r2, [r3, #0]
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	3304      	adds	r3, #4
 800e72a:	4619      	mov	r1, r3
 800e72c:	4610      	mov	r0, r2
 800e72e:	f7fe f8b4 	bl	800c89a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e732:	697b      	ldr	r3, [r7, #20]
}
 800e734:	4618      	mov	r0, r3
 800e736:	3718      	adds	r7, #24
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	20001b80 	.word	0x20001b80
 800e740:	20001b7c 	.word	0x20001b7c

0800e744 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b08e      	sub	sp, #56	; 0x38
 800e748:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e74a:	e0ca      	b.n	800e8e2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	da18      	bge.n	800e784 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e752:	1d3b      	adds	r3, r7, #4
 800e754:	3304      	adds	r3, #4
 800e756:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d10a      	bne.n	800e774 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e762:	f383 8811 	msr	BASEPRI, r3
 800e766:	f3bf 8f6f 	isb	sy
 800e76a:	f3bf 8f4f 	dsb	sy
 800e76e:	61fb      	str	r3, [r7, #28]
}
 800e770:	bf00      	nop
 800e772:	e7fe      	b.n	800e772 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e77a:	6850      	ldr	r0, [r2, #4]
 800e77c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e77e:	6892      	ldr	r2, [r2, #8]
 800e780:	4611      	mov	r1, r2
 800e782:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2b00      	cmp	r3, #0
 800e788:	f2c0 80aa 	blt.w	800e8e0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e792:	695b      	ldr	r3, [r3, #20]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d004      	beq.n	800e7a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79a:	3304      	adds	r3, #4
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7fe f8b5 	bl	800c90c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e7a2:	463b      	mov	r3, r7
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7ff ff6b 	bl	800e680 <prvSampleTimeNow>
 800e7aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2b09      	cmp	r3, #9
 800e7b0:	f200 8097 	bhi.w	800e8e2 <prvProcessReceivedCommands+0x19e>
 800e7b4:	a201      	add	r2, pc, #4	; (adr r2, 800e7bc <prvProcessReceivedCommands+0x78>)
 800e7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ba:	bf00      	nop
 800e7bc:	0800e7e5 	.word	0x0800e7e5
 800e7c0:	0800e7e5 	.word	0x0800e7e5
 800e7c4:	0800e7e5 	.word	0x0800e7e5
 800e7c8:	0800e859 	.word	0x0800e859
 800e7cc:	0800e86d 	.word	0x0800e86d
 800e7d0:	0800e8b7 	.word	0x0800e8b7
 800e7d4:	0800e7e5 	.word	0x0800e7e5
 800e7d8:	0800e7e5 	.word	0x0800e7e5
 800e7dc:	0800e859 	.word	0x0800e859
 800e7e0:	0800e86d 	.word	0x0800e86d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7ea:	f043 0301 	orr.w	r3, r3, #1
 800e7ee:	b2da      	uxtb	r2, r3
 800e7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e7f6:	68ba      	ldr	r2, [r7, #8]
 800e7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fa:	699b      	ldr	r3, [r3, #24]
 800e7fc:	18d1      	adds	r1, r2, r3
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e804:	f7ff ff5c 	bl	800e6c0 <prvInsertTimerInActiveList>
 800e808:	4603      	mov	r3, r0
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d069      	beq.n	800e8e2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e810:	6a1b      	ldr	r3, [r3, #32]
 800e812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e814:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e818:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e81c:	f003 0304 	and.w	r3, r3, #4
 800e820:	2b00      	cmp	r3, #0
 800e822:	d05e      	beq.n	800e8e2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e824:	68ba      	ldr	r2, [r7, #8]
 800e826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e828:	699b      	ldr	r3, [r3, #24]
 800e82a:	441a      	add	r2, r3
 800e82c:	2300      	movs	r3, #0
 800e82e:	9300      	str	r3, [sp, #0]
 800e830:	2300      	movs	r3, #0
 800e832:	2100      	movs	r1, #0
 800e834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e836:	f7ff fe05 	bl	800e444 <xTimerGenericCommand>
 800e83a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e83c:	6a3b      	ldr	r3, [r7, #32]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d14f      	bne.n	800e8e2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e846:	f383 8811 	msr	BASEPRI, r3
 800e84a:	f3bf 8f6f 	isb	sy
 800e84e:	f3bf 8f4f 	dsb	sy
 800e852:	61bb      	str	r3, [r7, #24]
}
 800e854:	bf00      	nop
 800e856:	e7fe      	b.n	800e856 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e85e:	f023 0301 	bic.w	r3, r3, #1
 800e862:	b2da      	uxtb	r2, r3
 800e864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e86a:	e03a      	b.n	800e8e2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e872:	f043 0301 	orr.w	r3, r3, #1
 800e876:	b2da      	uxtb	r2, r3
 800e878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e87e:	68ba      	ldr	r2, [r7, #8]
 800e880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e882:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e886:	699b      	ldr	r3, [r3, #24]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d10a      	bne.n	800e8a2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e890:	f383 8811 	msr	BASEPRI, r3
 800e894:	f3bf 8f6f 	isb	sy
 800e898:	f3bf 8f4f 	dsb	sy
 800e89c:	617b      	str	r3, [r7, #20]
}
 800e89e:	bf00      	nop
 800e8a0:	e7fe      	b.n	800e8a0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a4:	699a      	ldr	r2, [r3, #24]
 800e8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a8:	18d1      	adds	r1, r2, r3
 800e8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8b0:	f7ff ff06 	bl	800e6c0 <prvInsertTimerInActiveList>
					break;
 800e8b4:	e015      	b.n	800e8e2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8bc:	f003 0302 	and.w	r3, r3, #2
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d103      	bne.n	800e8cc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e8c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8c6:	f000 fbdb 	bl	800f080 <vPortFree>
 800e8ca:	e00a      	b.n	800e8e2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8d2:	f023 0301 	bic.w	r3, r3, #1
 800e8d6:	b2da      	uxtb	r2, r3
 800e8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e8de:	e000      	b.n	800e8e2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e8e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e8e2:	4b08      	ldr	r3, [pc, #32]	; (800e904 <prvProcessReceivedCommands+0x1c0>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	1d39      	adds	r1, r7, #4
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fe fb10 	bl	800cf10 <xQueueReceive>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	f47f af2a 	bne.w	800e74c <prvProcessReceivedCommands+0x8>
	}
}
 800e8f8:	bf00      	nop
 800e8fa:	bf00      	nop
 800e8fc:	3730      	adds	r7, #48	; 0x30
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	bf00      	nop
 800e904:	20001b84 	.word	0x20001b84

0800e908 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b088      	sub	sp, #32
 800e90c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e90e:	e048      	b.n	800e9a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e910:	4b2d      	ldr	r3, [pc, #180]	; (800e9c8 <prvSwitchTimerLists+0xc0>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	68db      	ldr	r3, [r3, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e91a:	4b2b      	ldr	r3, [pc, #172]	; (800e9c8 <prvSwitchTimerLists+0xc0>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	68db      	ldr	r3, [r3, #12]
 800e920:	68db      	ldr	r3, [r3, #12]
 800e922:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	3304      	adds	r3, #4
 800e928:	4618      	mov	r0, r3
 800e92a:	f7fd ffef 	bl	800c90c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	6a1b      	ldr	r3, [r3, #32]
 800e932:	68f8      	ldr	r0, [r7, #12]
 800e934:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e93c:	f003 0304 	and.w	r3, r3, #4
 800e940:	2b00      	cmp	r3, #0
 800e942:	d02e      	beq.n	800e9a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	699b      	ldr	r3, [r3, #24]
 800e948:	693a      	ldr	r2, [r7, #16]
 800e94a:	4413      	add	r3, r2
 800e94c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e94e:	68ba      	ldr	r2, [r7, #8]
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	429a      	cmp	r2, r3
 800e954:	d90e      	bls.n	800e974 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	68ba      	ldr	r2, [r7, #8]
 800e95a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	68fa      	ldr	r2, [r7, #12]
 800e960:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e962:	4b19      	ldr	r3, [pc, #100]	; (800e9c8 <prvSwitchTimerLists+0xc0>)
 800e964:	681a      	ldr	r2, [r3, #0]
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	3304      	adds	r3, #4
 800e96a:	4619      	mov	r1, r3
 800e96c:	4610      	mov	r0, r2
 800e96e:	f7fd ff94 	bl	800c89a <vListInsert>
 800e972:	e016      	b.n	800e9a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e974:	2300      	movs	r3, #0
 800e976:	9300      	str	r3, [sp, #0]
 800e978:	2300      	movs	r3, #0
 800e97a:	693a      	ldr	r2, [r7, #16]
 800e97c:	2100      	movs	r1, #0
 800e97e:	68f8      	ldr	r0, [r7, #12]
 800e980:	f7ff fd60 	bl	800e444 <xTimerGenericCommand>
 800e984:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d10a      	bne.n	800e9a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e990:	f383 8811 	msr	BASEPRI, r3
 800e994:	f3bf 8f6f 	isb	sy
 800e998:	f3bf 8f4f 	dsb	sy
 800e99c:	603b      	str	r3, [r7, #0]
}
 800e99e:	bf00      	nop
 800e9a0:	e7fe      	b.n	800e9a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e9a2:	4b09      	ldr	r3, [pc, #36]	; (800e9c8 <prvSwitchTimerLists+0xc0>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d1b1      	bne.n	800e910 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e9ac:	4b06      	ldr	r3, [pc, #24]	; (800e9c8 <prvSwitchTimerLists+0xc0>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e9b2:	4b06      	ldr	r3, [pc, #24]	; (800e9cc <prvSwitchTimerLists+0xc4>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	4a04      	ldr	r2, [pc, #16]	; (800e9c8 <prvSwitchTimerLists+0xc0>)
 800e9b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e9ba:	4a04      	ldr	r2, [pc, #16]	; (800e9cc <prvSwitchTimerLists+0xc4>)
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	6013      	str	r3, [r2, #0]
}
 800e9c0:	bf00      	nop
 800e9c2:	3718      	adds	r7, #24
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	20001b7c 	.word	0x20001b7c
 800e9cc:	20001b80 	.word	0x20001b80

0800e9d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b082      	sub	sp, #8
 800e9d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e9d6:	f000 f965 	bl	800eca4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e9da:	4b15      	ldr	r3, [pc, #84]	; (800ea30 <prvCheckForValidListAndQueue+0x60>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d120      	bne.n	800ea24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e9e2:	4814      	ldr	r0, [pc, #80]	; (800ea34 <prvCheckForValidListAndQueue+0x64>)
 800e9e4:	f7fd ff08 	bl	800c7f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e9e8:	4813      	ldr	r0, [pc, #76]	; (800ea38 <prvCheckForValidListAndQueue+0x68>)
 800e9ea:	f7fd ff05 	bl	800c7f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e9ee:	4b13      	ldr	r3, [pc, #76]	; (800ea3c <prvCheckForValidListAndQueue+0x6c>)
 800e9f0:	4a10      	ldr	r2, [pc, #64]	; (800ea34 <prvCheckForValidListAndQueue+0x64>)
 800e9f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e9f4:	4b12      	ldr	r3, [pc, #72]	; (800ea40 <prvCheckForValidListAndQueue+0x70>)
 800e9f6:	4a10      	ldr	r2, [pc, #64]	; (800ea38 <prvCheckForValidListAndQueue+0x68>)
 800e9f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	9300      	str	r3, [sp, #0]
 800e9fe:	4b11      	ldr	r3, [pc, #68]	; (800ea44 <prvCheckForValidListAndQueue+0x74>)
 800ea00:	4a11      	ldr	r2, [pc, #68]	; (800ea48 <prvCheckForValidListAndQueue+0x78>)
 800ea02:	2110      	movs	r1, #16
 800ea04:	200a      	movs	r0, #10
 800ea06:	f7fe f813 	bl	800ca30 <xQueueGenericCreateStatic>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	4a08      	ldr	r2, [pc, #32]	; (800ea30 <prvCheckForValidListAndQueue+0x60>)
 800ea0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ea10:	4b07      	ldr	r3, [pc, #28]	; (800ea30 <prvCheckForValidListAndQueue+0x60>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d005      	beq.n	800ea24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ea18:	4b05      	ldr	r3, [pc, #20]	; (800ea30 <prvCheckForValidListAndQueue+0x60>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	490b      	ldr	r1, [pc, #44]	; (800ea4c <prvCheckForValidListAndQueue+0x7c>)
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7fe fc66 	bl	800d2f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea24:	f000 f96e 	bl	800ed04 <vPortExitCritical>
}
 800ea28:	bf00      	nop
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	20001b84 	.word	0x20001b84
 800ea34:	20001b54 	.word	0x20001b54
 800ea38:	20001b68 	.word	0x20001b68
 800ea3c:	20001b7c 	.word	0x20001b7c
 800ea40:	20001b80 	.word	0x20001b80
 800ea44:	20001c30 	.word	0x20001c30
 800ea48:	20001b90 	.word	0x20001b90
 800ea4c:	08010a5c 	.word	0x08010a5c

0800ea50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ea50:	b480      	push	{r7}
 800ea52:	b085      	sub	sp, #20
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	60f8      	str	r0, [r7, #12]
 800ea58:	60b9      	str	r1, [r7, #8]
 800ea5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	3b04      	subs	r3, #4
 800ea60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ea68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	3b04      	subs	r3, #4
 800ea6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	f023 0201 	bic.w	r2, r3, #1
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	3b04      	subs	r3, #4
 800ea7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ea80:	4a0c      	ldr	r2, [pc, #48]	; (800eab4 <pxPortInitialiseStack+0x64>)
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	3b14      	subs	r3, #20
 800ea8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ea8c:	687a      	ldr	r2, [r7, #4]
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	3b04      	subs	r3, #4
 800ea96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	f06f 0202 	mvn.w	r2, #2
 800ea9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	3b20      	subs	r3, #32
 800eaa4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3714      	adds	r7, #20
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr
 800eab4:	0800eab9 	.word	0x0800eab9

0800eab8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eab8:	b480      	push	{r7}
 800eaba:	b085      	sub	sp, #20
 800eabc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eabe:	2300      	movs	r3, #0
 800eac0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eac2:	4b12      	ldr	r3, [pc, #72]	; (800eb0c <prvTaskExitError+0x54>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaca:	d00a      	beq.n	800eae2 <prvTaskExitError+0x2a>
	__asm volatile
 800eacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead0:	f383 8811 	msr	BASEPRI, r3
 800ead4:	f3bf 8f6f 	isb	sy
 800ead8:	f3bf 8f4f 	dsb	sy
 800eadc:	60fb      	str	r3, [r7, #12]
}
 800eade:	bf00      	nop
 800eae0:	e7fe      	b.n	800eae0 <prvTaskExitError+0x28>
	__asm volatile
 800eae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae6:	f383 8811 	msr	BASEPRI, r3
 800eaea:	f3bf 8f6f 	isb	sy
 800eaee:	f3bf 8f4f 	dsb	sy
 800eaf2:	60bb      	str	r3, [r7, #8]
}
 800eaf4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eaf6:	bf00      	nop
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d0fc      	beq.n	800eaf8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eafe:	bf00      	nop
 800eb00:	bf00      	nop
 800eb02:	3714      	adds	r7, #20
 800eb04:	46bd      	mov	sp, r7
 800eb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0a:	4770      	bx	lr
 800eb0c:	20000634 	.word	0x20000634

0800eb10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eb10:	4b07      	ldr	r3, [pc, #28]	; (800eb30 <pxCurrentTCBConst2>)
 800eb12:	6819      	ldr	r1, [r3, #0]
 800eb14:	6808      	ldr	r0, [r1, #0]
 800eb16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb1a:	f380 8809 	msr	PSP, r0
 800eb1e:	f3bf 8f6f 	isb	sy
 800eb22:	f04f 0000 	mov.w	r0, #0
 800eb26:	f380 8811 	msr	BASEPRI, r0
 800eb2a:	4770      	bx	lr
 800eb2c:	f3af 8000 	nop.w

0800eb30 <pxCurrentTCBConst2>:
 800eb30:	20001654 	.word	0x20001654
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eb34:	bf00      	nop
 800eb36:	bf00      	nop

0800eb38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eb38:	4808      	ldr	r0, [pc, #32]	; (800eb5c <prvPortStartFirstTask+0x24>)
 800eb3a:	6800      	ldr	r0, [r0, #0]
 800eb3c:	6800      	ldr	r0, [r0, #0]
 800eb3e:	f380 8808 	msr	MSP, r0
 800eb42:	f04f 0000 	mov.w	r0, #0
 800eb46:	f380 8814 	msr	CONTROL, r0
 800eb4a:	b662      	cpsie	i
 800eb4c:	b661      	cpsie	f
 800eb4e:	f3bf 8f4f 	dsb	sy
 800eb52:	f3bf 8f6f 	isb	sy
 800eb56:	df00      	svc	0
 800eb58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eb5a:	bf00      	nop
 800eb5c:	e000ed08 	.word	0xe000ed08

0800eb60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b086      	sub	sp, #24
 800eb64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800eb66:	4b46      	ldr	r3, [pc, #280]	; (800ec80 <xPortStartScheduler+0x120>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	4a46      	ldr	r2, [pc, #280]	; (800ec84 <xPortStartScheduler+0x124>)
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d10a      	bne.n	800eb86 <xPortStartScheduler+0x26>
	__asm volatile
 800eb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb74:	f383 8811 	msr	BASEPRI, r3
 800eb78:	f3bf 8f6f 	isb	sy
 800eb7c:	f3bf 8f4f 	dsb	sy
 800eb80:	613b      	str	r3, [r7, #16]
}
 800eb82:	bf00      	nop
 800eb84:	e7fe      	b.n	800eb84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eb86:	4b3e      	ldr	r3, [pc, #248]	; (800ec80 <xPortStartScheduler+0x120>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	4a3f      	ldr	r2, [pc, #252]	; (800ec88 <xPortStartScheduler+0x128>)
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	d10a      	bne.n	800eba6 <xPortStartScheduler+0x46>
	__asm volatile
 800eb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb94:	f383 8811 	msr	BASEPRI, r3
 800eb98:	f3bf 8f6f 	isb	sy
 800eb9c:	f3bf 8f4f 	dsb	sy
 800eba0:	60fb      	str	r3, [r7, #12]
}
 800eba2:	bf00      	nop
 800eba4:	e7fe      	b.n	800eba4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eba6:	4b39      	ldr	r3, [pc, #228]	; (800ec8c <xPortStartScheduler+0x12c>)
 800eba8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	781b      	ldrb	r3, [r3, #0]
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	22ff      	movs	r2, #255	; 0xff
 800ebb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	b2db      	uxtb	r3, r3
 800ebbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ebc0:	78fb      	ldrb	r3, [r7, #3]
 800ebc2:	b2db      	uxtb	r3, r3
 800ebc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ebc8:	b2da      	uxtb	r2, r3
 800ebca:	4b31      	ldr	r3, [pc, #196]	; (800ec90 <xPortStartScheduler+0x130>)
 800ebcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ebce:	4b31      	ldr	r3, [pc, #196]	; (800ec94 <xPortStartScheduler+0x134>)
 800ebd0:	2207      	movs	r2, #7
 800ebd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ebd4:	e009      	b.n	800ebea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ebd6:	4b2f      	ldr	r3, [pc, #188]	; (800ec94 <xPortStartScheduler+0x134>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	3b01      	subs	r3, #1
 800ebdc:	4a2d      	ldr	r2, [pc, #180]	; (800ec94 <xPortStartScheduler+0x134>)
 800ebde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ebe0:	78fb      	ldrb	r3, [r7, #3]
 800ebe2:	b2db      	uxtb	r3, r3
 800ebe4:	005b      	lsls	r3, r3, #1
 800ebe6:	b2db      	uxtb	r3, r3
 800ebe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ebea:	78fb      	ldrb	r3, [r7, #3]
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebf2:	2b80      	cmp	r3, #128	; 0x80
 800ebf4:	d0ef      	beq.n	800ebd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ebf6:	4b27      	ldr	r3, [pc, #156]	; (800ec94 <xPortStartScheduler+0x134>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	f1c3 0307 	rsb	r3, r3, #7
 800ebfe:	2b04      	cmp	r3, #4
 800ec00:	d00a      	beq.n	800ec18 <xPortStartScheduler+0xb8>
	__asm volatile
 800ec02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec06:	f383 8811 	msr	BASEPRI, r3
 800ec0a:	f3bf 8f6f 	isb	sy
 800ec0e:	f3bf 8f4f 	dsb	sy
 800ec12:	60bb      	str	r3, [r7, #8]
}
 800ec14:	bf00      	nop
 800ec16:	e7fe      	b.n	800ec16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ec18:	4b1e      	ldr	r3, [pc, #120]	; (800ec94 <xPortStartScheduler+0x134>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	021b      	lsls	r3, r3, #8
 800ec1e:	4a1d      	ldr	r2, [pc, #116]	; (800ec94 <xPortStartScheduler+0x134>)
 800ec20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ec22:	4b1c      	ldr	r3, [pc, #112]	; (800ec94 <xPortStartScheduler+0x134>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ec2a:	4a1a      	ldr	r2, [pc, #104]	; (800ec94 <xPortStartScheduler+0x134>)
 800ec2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	b2da      	uxtb	r2, r3
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ec36:	4b18      	ldr	r3, [pc, #96]	; (800ec98 <xPortStartScheduler+0x138>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	4a17      	ldr	r2, [pc, #92]	; (800ec98 <xPortStartScheduler+0x138>)
 800ec3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ec40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ec42:	4b15      	ldr	r3, [pc, #84]	; (800ec98 <xPortStartScheduler+0x138>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	4a14      	ldr	r2, [pc, #80]	; (800ec98 <xPortStartScheduler+0x138>)
 800ec48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ec4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ec4e:	f000 f8dd 	bl	800ee0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ec52:	4b12      	ldr	r3, [pc, #72]	; (800ec9c <xPortStartScheduler+0x13c>)
 800ec54:	2200      	movs	r2, #0
 800ec56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ec58:	f000 f8fc 	bl	800ee54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ec5c:	4b10      	ldr	r3, [pc, #64]	; (800eca0 <xPortStartScheduler+0x140>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	4a0f      	ldr	r2, [pc, #60]	; (800eca0 <xPortStartScheduler+0x140>)
 800ec62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ec66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ec68:	f7ff ff66 	bl	800eb38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ec6c:	f7ff f856 	bl	800dd1c <vTaskSwitchContext>
	prvTaskExitError();
 800ec70:	f7ff ff22 	bl	800eab8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ec74:	2300      	movs	r3, #0
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3718      	adds	r7, #24
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
 800ec7e:	bf00      	nop
 800ec80:	e000ed00 	.word	0xe000ed00
 800ec84:	410fc271 	.word	0x410fc271
 800ec88:	410fc270 	.word	0x410fc270
 800ec8c:	e000e400 	.word	0xe000e400
 800ec90:	20001c80 	.word	0x20001c80
 800ec94:	20001c84 	.word	0x20001c84
 800ec98:	e000ed20 	.word	0xe000ed20
 800ec9c:	20000634 	.word	0x20000634
 800eca0:	e000ef34 	.word	0xe000ef34

0800eca4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
	__asm volatile
 800ecaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecae:	f383 8811 	msr	BASEPRI, r3
 800ecb2:	f3bf 8f6f 	isb	sy
 800ecb6:	f3bf 8f4f 	dsb	sy
 800ecba:	607b      	str	r3, [r7, #4]
}
 800ecbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ecbe:	4b0f      	ldr	r3, [pc, #60]	; (800ecfc <vPortEnterCritical+0x58>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	4a0d      	ldr	r2, [pc, #52]	; (800ecfc <vPortEnterCritical+0x58>)
 800ecc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ecc8:	4b0c      	ldr	r3, [pc, #48]	; (800ecfc <vPortEnterCritical+0x58>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	2b01      	cmp	r3, #1
 800ecce:	d10f      	bne.n	800ecf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ecd0:	4b0b      	ldr	r3, [pc, #44]	; (800ed00 <vPortEnterCritical+0x5c>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d00a      	beq.n	800ecf0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ecda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecde:	f383 8811 	msr	BASEPRI, r3
 800ece2:	f3bf 8f6f 	isb	sy
 800ece6:	f3bf 8f4f 	dsb	sy
 800ecea:	603b      	str	r3, [r7, #0]
}
 800ecec:	bf00      	nop
 800ecee:	e7fe      	b.n	800ecee <vPortEnterCritical+0x4a>
	}
}
 800ecf0:	bf00      	nop
 800ecf2:	370c      	adds	r7, #12
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr
 800ecfc:	20000634 	.word	0x20000634
 800ed00:	e000ed04 	.word	0xe000ed04

0800ed04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ed04:	b480      	push	{r7}
 800ed06:	b083      	sub	sp, #12
 800ed08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ed0a:	4b12      	ldr	r3, [pc, #72]	; (800ed54 <vPortExitCritical+0x50>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d10a      	bne.n	800ed28 <vPortExitCritical+0x24>
	__asm volatile
 800ed12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed16:	f383 8811 	msr	BASEPRI, r3
 800ed1a:	f3bf 8f6f 	isb	sy
 800ed1e:	f3bf 8f4f 	dsb	sy
 800ed22:	607b      	str	r3, [r7, #4]
}
 800ed24:	bf00      	nop
 800ed26:	e7fe      	b.n	800ed26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ed28:	4b0a      	ldr	r3, [pc, #40]	; (800ed54 <vPortExitCritical+0x50>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	3b01      	subs	r3, #1
 800ed2e:	4a09      	ldr	r2, [pc, #36]	; (800ed54 <vPortExitCritical+0x50>)
 800ed30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ed32:	4b08      	ldr	r3, [pc, #32]	; (800ed54 <vPortExitCritical+0x50>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d105      	bne.n	800ed46 <vPortExitCritical+0x42>
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	f383 8811 	msr	BASEPRI, r3
}
 800ed44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ed46:	bf00      	nop
 800ed48:	370c      	adds	r7, #12
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed50:	4770      	bx	lr
 800ed52:	bf00      	nop
 800ed54:	20000634 	.word	0x20000634
	...

0800ed60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ed60:	f3ef 8009 	mrs	r0, PSP
 800ed64:	f3bf 8f6f 	isb	sy
 800ed68:	4b15      	ldr	r3, [pc, #84]	; (800edc0 <pxCurrentTCBConst>)
 800ed6a:	681a      	ldr	r2, [r3, #0]
 800ed6c:	f01e 0f10 	tst.w	lr, #16
 800ed70:	bf08      	it	eq
 800ed72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ed76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed7a:	6010      	str	r0, [r2, #0]
 800ed7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ed80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ed84:	f380 8811 	msr	BASEPRI, r0
 800ed88:	f3bf 8f4f 	dsb	sy
 800ed8c:	f3bf 8f6f 	isb	sy
 800ed90:	f7fe ffc4 	bl	800dd1c <vTaskSwitchContext>
 800ed94:	f04f 0000 	mov.w	r0, #0
 800ed98:	f380 8811 	msr	BASEPRI, r0
 800ed9c:	bc09      	pop	{r0, r3}
 800ed9e:	6819      	ldr	r1, [r3, #0]
 800eda0:	6808      	ldr	r0, [r1, #0]
 800eda2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eda6:	f01e 0f10 	tst.w	lr, #16
 800edaa:	bf08      	it	eq
 800edac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800edb0:	f380 8809 	msr	PSP, r0
 800edb4:	f3bf 8f6f 	isb	sy
 800edb8:	4770      	bx	lr
 800edba:	bf00      	nop
 800edbc:	f3af 8000 	nop.w

0800edc0 <pxCurrentTCBConst>:
 800edc0:	20001654 	.word	0x20001654
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800edc4:	bf00      	nop
 800edc6:	bf00      	nop

0800edc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b082      	sub	sp, #8
 800edcc:	af00      	add	r7, sp, #0
	__asm volatile
 800edce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd2:	f383 8811 	msr	BASEPRI, r3
 800edd6:	f3bf 8f6f 	isb	sy
 800edda:	f3bf 8f4f 	dsb	sy
 800edde:	607b      	str	r3, [r7, #4]
}
 800ede0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ede2:	f7fe fee1 	bl	800dba8 <xTaskIncrementTick>
 800ede6:	4603      	mov	r3, r0
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d003      	beq.n	800edf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800edec:	4b06      	ldr	r3, [pc, #24]	; (800ee08 <xPortSysTickHandler+0x40>)
 800edee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edf2:	601a      	str	r2, [r3, #0]
 800edf4:	2300      	movs	r3, #0
 800edf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	f383 8811 	msr	BASEPRI, r3
}
 800edfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ee00:	bf00      	nop
 800ee02:	3708      	adds	r7, #8
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}
 800ee08:	e000ed04 	.word	0xe000ed04

0800ee0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ee10:	4b0b      	ldr	r3, [pc, #44]	; (800ee40 <vPortSetupTimerInterrupt+0x34>)
 800ee12:	2200      	movs	r2, #0
 800ee14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ee16:	4b0b      	ldr	r3, [pc, #44]	; (800ee44 <vPortSetupTimerInterrupt+0x38>)
 800ee18:	2200      	movs	r2, #0
 800ee1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ee1c:	4b0a      	ldr	r3, [pc, #40]	; (800ee48 <vPortSetupTimerInterrupt+0x3c>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	4a0a      	ldr	r2, [pc, #40]	; (800ee4c <vPortSetupTimerInterrupt+0x40>)
 800ee22:	fba2 2303 	umull	r2, r3, r2, r3
 800ee26:	099b      	lsrs	r3, r3, #6
 800ee28:	4a09      	ldr	r2, [pc, #36]	; (800ee50 <vPortSetupTimerInterrupt+0x44>)
 800ee2a:	3b01      	subs	r3, #1
 800ee2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ee2e:	4b04      	ldr	r3, [pc, #16]	; (800ee40 <vPortSetupTimerInterrupt+0x34>)
 800ee30:	2207      	movs	r2, #7
 800ee32:	601a      	str	r2, [r3, #0]
}
 800ee34:	bf00      	nop
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr
 800ee3e:	bf00      	nop
 800ee40:	e000e010 	.word	0xe000e010
 800ee44:	e000e018 	.word	0xe000e018
 800ee48:	2000059c 	.word	0x2000059c
 800ee4c:	10624dd3 	.word	0x10624dd3
 800ee50:	e000e014 	.word	0xe000e014

0800ee54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ee54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ee64 <vPortEnableVFP+0x10>
 800ee58:	6801      	ldr	r1, [r0, #0]
 800ee5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ee5e:	6001      	str	r1, [r0, #0]
 800ee60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ee62:	bf00      	nop
 800ee64:	e000ed88 	.word	0xe000ed88

0800ee68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ee68:	b480      	push	{r7}
 800ee6a:	b085      	sub	sp, #20
 800ee6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ee6e:	f3ef 8305 	mrs	r3, IPSR
 800ee72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2b0f      	cmp	r3, #15
 800ee78:	d914      	bls.n	800eea4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ee7a:	4a17      	ldr	r2, [pc, #92]	; (800eed8 <vPortValidateInterruptPriority+0x70>)
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	4413      	add	r3, r2
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ee84:	4b15      	ldr	r3, [pc, #84]	; (800eedc <vPortValidateInterruptPriority+0x74>)
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	7afa      	ldrb	r2, [r7, #11]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d20a      	bcs.n	800eea4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ee8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee92:	f383 8811 	msr	BASEPRI, r3
 800ee96:	f3bf 8f6f 	isb	sy
 800ee9a:	f3bf 8f4f 	dsb	sy
 800ee9e:	607b      	str	r3, [r7, #4]
}
 800eea0:	bf00      	nop
 800eea2:	e7fe      	b.n	800eea2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eea4:	4b0e      	ldr	r3, [pc, #56]	; (800eee0 <vPortValidateInterruptPriority+0x78>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eeac:	4b0d      	ldr	r3, [pc, #52]	; (800eee4 <vPortValidateInterruptPriority+0x7c>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d90a      	bls.n	800eeca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800eeb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb8:	f383 8811 	msr	BASEPRI, r3
 800eebc:	f3bf 8f6f 	isb	sy
 800eec0:	f3bf 8f4f 	dsb	sy
 800eec4:	603b      	str	r3, [r7, #0]
}
 800eec6:	bf00      	nop
 800eec8:	e7fe      	b.n	800eec8 <vPortValidateInterruptPriority+0x60>
	}
 800eeca:	bf00      	nop
 800eecc:	3714      	adds	r7, #20
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr
 800eed6:	bf00      	nop
 800eed8:	e000e3f0 	.word	0xe000e3f0
 800eedc:	20001c80 	.word	0x20001c80
 800eee0:	e000ed0c 	.word	0xe000ed0c
 800eee4:	20001c84 	.word	0x20001c84

0800eee8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b08a      	sub	sp, #40	; 0x28
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eef0:	2300      	movs	r3, #0
 800eef2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eef4:	f7fe fd9c 	bl	800da30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eef8:	4b5b      	ldr	r3, [pc, #364]	; (800f068 <pvPortMalloc+0x180>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d101      	bne.n	800ef04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ef00:	f000 f920 	bl	800f144 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ef04:	4b59      	ldr	r3, [pc, #356]	; (800f06c <pvPortMalloc+0x184>)
 800ef06:	681a      	ldr	r2, [r3, #0]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	4013      	ands	r3, r2
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	f040 8093 	bne.w	800f038 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d01d      	beq.n	800ef54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ef18:	2208      	movs	r2, #8
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f003 0307 	and.w	r3, r3, #7
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d014      	beq.n	800ef54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f023 0307 	bic.w	r3, r3, #7
 800ef30:	3308      	adds	r3, #8
 800ef32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f003 0307 	and.w	r3, r3, #7
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d00a      	beq.n	800ef54 <pvPortMalloc+0x6c>
	__asm volatile
 800ef3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef42:	f383 8811 	msr	BASEPRI, r3
 800ef46:	f3bf 8f6f 	isb	sy
 800ef4a:	f3bf 8f4f 	dsb	sy
 800ef4e:	617b      	str	r3, [r7, #20]
}
 800ef50:	bf00      	nop
 800ef52:	e7fe      	b.n	800ef52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d06e      	beq.n	800f038 <pvPortMalloc+0x150>
 800ef5a:	4b45      	ldr	r3, [pc, #276]	; (800f070 <pvPortMalloc+0x188>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d869      	bhi.n	800f038 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ef64:	4b43      	ldr	r3, [pc, #268]	; (800f074 <pvPortMalloc+0x18c>)
 800ef66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ef68:	4b42      	ldr	r3, [pc, #264]	; (800f074 <pvPortMalloc+0x18c>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef6e:	e004      	b.n	800ef7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ef70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ef74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d903      	bls.n	800ef8c <pvPortMalloc+0xa4>
 800ef84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d1f1      	bne.n	800ef70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ef8c:	4b36      	ldr	r3, [pc, #216]	; (800f068 <pvPortMalloc+0x180>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d050      	beq.n	800f038 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ef96:	6a3b      	ldr	r3, [r7, #32]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	2208      	movs	r2, #8
 800ef9c:	4413      	add	r3, r2
 800ef9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800efa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa2:	681a      	ldr	r2, [r3, #0]
 800efa4:	6a3b      	ldr	r3, [r7, #32]
 800efa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800efa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efaa:	685a      	ldr	r2, [r3, #4]
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	1ad2      	subs	r2, r2, r3
 800efb0:	2308      	movs	r3, #8
 800efb2:	005b      	lsls	r3, r3, #1
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d91f      	bls.n	800eff8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800efb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	4413      	add	r3, r2
 800efbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800efc0:	69bb      	ldr	r3, [r7, #24]
 800efc2:	f003 0307 	and.w	r3, r3, #7
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d00a      	beq.n	800efe0 <pvPortMalloc+0xf8>
	__asm volatile
 800efca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efce:	f383 8811 	msr	BASEPRI, r3
 800efd2:	f3bf 8f6f 	isb	sy
 800efd6:	f3bf 8f4f 	dsb	sy
 800efda:	613b      	str	r3, [r7, #16]
}
 800efdc:	bf00      	nop
 800efde:	e7fe      	b.n	800efde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800efe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe2:	685a      	ldr	r2, [r3, #4]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	1ad2      	subs	r2, r2, r3
 800efe8:	69bb      	ldr	r3, [r7, #24]
 800efea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800efec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eff2:	69b8      	ldr	r0, [r7, #24]
 800eff4:	f000 f908 	bl	800f208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eff8:	4b1d      	ldr	r3, [pc, #116]	; (800f070 <pvPortMalloc+0x188>)
 800effa:	681a      	ldr	r2, [r3, #0]
 800effc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	1ad3      	subs	r3, r2, r3
 800f002:	4a1b      	ldr	r2, [pc, #108]	; (800f070 <pvPortMalloc+0x188>)
 800f004:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f006:	4b1a      	ldr	r3, [pc, #104]	; (800f070 <pvPortMalloc+0x188>)
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	4b1b      	ldr	r3, [pc, #108]	; (800f078 <pvPortMalloc+0x190>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d203      	bcs.n	800f01a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f012:	4b17      	ldr	r3, [pc, #92]	; (800f070 <pvPortMalloc+0x188>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	4a18      	ldr	r2, [pc, #96]	; (800f078 <pvPortMalloc+0x190>)
 800f018:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01c:	685a      	ldr	r2, [r3, #4]
 800f01e:	4b13      	ldr	r3, [pc, #76]	; (800f06c <pvPortMalloc+0x184>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	431a      	orrs	r2, r3
 800f024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f026:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02a:	2200      	movs	r2, #0
 800f02c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f02e:	4b13      	ldr	r3, [pc, #76]	; (800f07c <pvPortMalloc+0x194>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	3301      	adds	r3, #1
 800f034:	4a11      	ldr	r2, [pc, #68]	; (800f07c <pvPortMalloc+0x194>)
 800f036:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f038:	f7fe fd08 	bl	800da4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f03c:	69fb      	ldr	r3, [r7, #28]
 800f03e:	f003 0307 	and.w	r3, r3, #7
 800f042:	2b00      	cmp	r3, #0
 800f044:	d00a      	beq.n	800f05c <pvPortMalloc+0x174>
	__asm volatile
 800f046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f04a:	f383 8811 	msr	BASEPRI, r3
 800f04e:	f3bf 8f6f 	isb	sy
 800f052:	f3bf 8f4f 	dsb	sy
 800f056:	60fb      	str	r3, [r7, #12]
}
 800f058:	bf00      	nop
 800f05a:	e7fe      	b.n	800f05a <pvPortMalloc+0x172>
	return pvReturn;
 800f05c:	69fb      	ldr	r3, [r7, #28]
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3728      	adds	r7, #40	; 0x28
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	20006ab0 	.word	0x20006ab0
 800f06c:	20006ac4 	.word	0x20006ac4
 800f070:	20006ab4 	.word	0x20006ab4
 800f074:	20006aa8 	.word	0x20006aa8
 800f078:	20006ab8 	.word	0x20006ab8
 800f07c:	20006abc 	.word	0x20006abc

0800f080 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b086      	sub	sp, #24
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d04d      	beq.n	800f12e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f092:	2308      	movs	r3, #8
 800f094:	425b      	negs	r3, r3
 800f096:	697a      	ldr	r2, [r7, #20]
 800f098:	4413      	add	r3, r2
 800f09a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	685a      	ldr	r2, [r3, #4]
 800f0a4:	4b24      	ldr	r3, [pc, #144]	; (800f138 <vPortFree+0xb8>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	4013      	ands	r3, r2
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d10a      	bne.n	800f0c4 <vPortFree+0x44>
	__asm volatile
 800f0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0b2:	f383 8811 	msr	BASEPRI, r3
 800f0b6:	f3bf 8f6f 	isb	sy
 800f0ba:	f3bf 8f4f 	dsb	sy
 800f0be:	60fb      	str	r3, [r7, #12]
}
 800f0c0:	bf00      	nop
 800f0c2:	e7fe      	b.n	800f0c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d00a      	beq.n	800f0e2 <vPortFree+0x62>
	__asm volatile
 800f0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d0:	f383 8811 	msr	BASEPRI, r3
 800f0d4:	f3bf 8f6f 	isb	sy
 800f0d8:	f3bf 8f4f 	dsb	sy
 800f0dc:	60bb      	str	r3, [r7, #8]
}
 800f0de:	bf00      	nop
 800f0e0:	e7fe      	b.n	800f0e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	685a      	ldr	r2, [r3, #4]
 800f0e6:	4b14      	ldr	r3, [pc, #80]	; (800f138 <vPortFree+0xb8>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	4013      	ands	r3, r2
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d01e      	beq.n	800f12e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d11a      	bne.n	800f12e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	685a      	ldr	r2, [r3, #4]
 800f0fc:	4b0e      	ldr	r3, [pc, #56]	; (800f138 <vPortFree+0xb8>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	43db      	mvns	r3, r3
 800f102:	401a      	ands	r2, r3
 800f104:	693b      	ldr	r3, [r7, #16]
 800f106:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f108:	f7fe fc92 	bl	800da30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	685a      	ldr	r2, [r3, #4]
 800f110:	4b0a      	ldr	r3, [pc, #40]	; (800f13c <vPortFree+0xbc>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	4413      	add	r3, r2
 800f116:	4a09      	ldr	r2, [pc, #36]	; (800f13c <vPortFree+0xbc>)
 800f118:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f11a:	6938      	ldr	r0, [r7, #16]
 800f11c:	f000 f874 	bl	800f208 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f120:	4b07      	ldr	r3, [pc, #28]	; (800f140 <vPortFree+0xc0>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	3301      	adds	r3, #1
 800f126:	4a06      	ldr	r2, [pc, #24]	; (800f140 <vPortFree+0xc0>)
 800f128:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f12a:	f7fe fc8f 	bl	800da4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f12e:	bf00      	nop
 800f130:	3718      	adds	r7, #24
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	20006ac4 	.word	0x20006ac4
 800f13c:	20006ab4 	.word	0x20006ab4
 800f140:	20006ac0 	.word	0x20006ac0

0800f144 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f144:	b480      	push	{r7}
 800f146:	b085      	sub	sp, #20
 800f148:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f14a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800f14e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f150:	4b27      	ldr	r3, [pc, #156]	; (800f1f0 <prvHeapInit+0xac>)
 800f152:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	f003 0307 	and.w	r3, r3, #7
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d00c      	beq.n	800f178 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	3307      	adds	r3, #7
 800f162:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f023 0307 	bic.w	r3, r3, #7
 800f16a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f16c:	68ba      	ldr	r2, [r7, #8]
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	1ad3      	subs	r3, r2, r3
 800f172:	4a1f      	ldr	r2, [pc, #124]	; (800f1f0 <prvHeapInit+0xac>)
 800f174:	4413      	add	r3, r2
 800f176:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f17c:	4a1d      	ldr	r2, [pc, #116]	; (800f1f4 <prvHeapInit+0xb0>)
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f182:	4b1c      	ldr	r3, [pc, #112]	; (800f1f4 <prvHeapInit+0xb0>)
 800f184:	2200      	movs	r2, #0
 800f186:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	68ba      	ldr	r2, [r7, #8]
 800f18c:	4413      	add	r3, r2
 800f18e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f190:	2208      	movs	r2, #8
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	1a9b      	subs	r3, r3, r2
 800f196:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f023 0307 	bic.w	r3, r3, #7
 800f19e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	4a15      	ldr	r2, [pc, #84]	; (800f1f8 <prvHeapInit+0xb4>)
 800f1a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f1a6:	4b14      	ldr	r3, [pc, #80]	; (800f1f8 <prvHeapInit+0xb4>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f1ae:	4b12      	ldr	r3, [pc, #72]	; (800f1f8 <prvHeapInit+0xb4>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	68fa      	ldr	r2, [r7, #12]
 800f1be:	1ad2      	subs	r2, r2, r3
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f1c4:	4b0c      	ldr	r3, [pc, #48]	; (800f1f8 <prvHeapInit+0xb4>)
 800f1c6:	681a      	ldr	r2, [r3, #0]
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	4a0a      	ldr	r2, [pc, #40]	; (800f1fc <prvHeapInit+0xb8>)
 800f1d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	4a09      	ldr	r2, [pc, #36]	; (800f200 <prvHeapInit+0xbc>)
 800f1da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f1dc:	4b09      	ldr	r3, [pc, #36]	; (800f204 <prvHeapInit+0xc0>)
 800f1de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f1e2:	601a      	str	r2, [r3, #0]
}
 800f1e4:	bf00      	nop
 800f1e6:	3714      	adds	r7, #20
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr
 800f1f0:	20001c88 	.word	0x20001c88
 800f1f4:	20006aa8 	.word	0x20006aa8
 800f1f8:	20006ab0 	.word	0x20006ab0
 800f1fc:	20006ab8 	.word	0x20006ab8
 800f200:	20006ab4 	.word	0x20006ab4
 800f204:	20006ac4 	.word	0x20006ac4

0800f208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f208:	b480      	push	{r7}
 800f20a:	b085      	sub	sp, #20
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f210:	4b28      	ldr	r3, [pc, #160]	; (800f2b4 <prvInsertBlockIntoFreeList+0xac>)
 800f212:	60fb      	str	r3, [r7, #12]
 800f214:	e002      	b.n	800f21c <prvInsertBlockIntoFreeList+0x14>
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	60fb      	str	r3, [r7, #12]
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	687a      	ldr	r2, [r7, #4]
 800f222:	429a      	cmp	r2, r3
 800f224:	d8f7      	bhi.n	800f216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	68ba      	ldr	r2, [r7, #8]
 800f230:	4413      	add	r3, r2
 800f232:	687a      	ldr	r2, [r7, #4]
 800f234:	429a      	cmp	r2, r3
 800f236:	d108      	bne.n	800f24a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	685a      	ldr	r2, [r3, #4]
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	441a      	add	r2, r3
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	685b      	ldr	r3, [r3, #4]
 800f252:	68ba      	ldr	r2, [r7, #8]
 800f254:	441a      	add	r2, r3
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d118      	bne.n	800f290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	4b15      	ldr	r3, [pc, #84]	; (800f2b8 <prvInsertBlockIntoFreeList+0xb0>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	429a      	cmp	r2, r3
 800f268:	d00d      	beq.n	800f286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	685a      	ldr	r2, [r3, #4]
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	685b      	ldr	r3, [r3, #4]
 800f274:	441a      	add	r2, r3
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	681a      	ldr	r2, [r3, #0]
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	601a      	str	r2, [r3, #0]
 800f284:	e008      	b.n	800f298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f286:	4b0c      	ldr	r3, [pc, #48]	; (800f2b8 <prvInsertBlockIntoFreeList+0xb0>)
 800f288:	681a      	ldr	r2, [r3, #0]
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	601a      	str	r2, [r3, #0]
 800f28e:	e003      	b.n	800f298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	681a      	ldr	r2, [r3, #0]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f298:	68fa      	ldr	r2, [r7, #12]
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d002      	beq.n	800f2a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	687a      	ldr	r2, [r7, #4]
 800f2a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f2a6:	bf00      	nop
 800f2a8:	3714      	adds	r7, #20
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b0:	4770      	bx	lr
 800f2b2:	bf00      	nop
 800f2b4:	20006aa8 	.word	0x20006aa8
 800f2b8:	20006ab0 	.word	0x20006ab0

0800f2bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	4912      	ldr	r1, [pc, #72]	; (800f30c <MX_USB_DEVICE_Init+0x50>)
 800f2c4:	4812      	ldr	r0, [pc, #72]	; (800f310 <MX_USB_DEVICE_Init+0x54>)
 800f2c6:	f7fb fdc1 	bl	800ae4c <USBD_Init>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d001      	beq.n	800f2d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f2d0:	f7f4 f84c 	bl	800336c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f2d4:	490f      	ldr	r1, [pc, #60]	; (800f314 <MX_USB_DEVICE_Init+0x58>)
 800f2d6:	480e      	ldr	r0, [pc, #56]	; (800f310 <MX_USB_DEVICE_Init+0x54>)
 800f2d8:	f7fb fde8 	bl	800aeac <USBD_RegisterClass>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d001      	beq.n	800f2e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f2e2:	f7f4 f843 	bl	800336c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f2e6:	490c      	ldr	r1, [pc, #48]	; (800f318 <MX_USB_DEVICE_Init+0x5c>)
 800f2e8:	4809      	ldr	r0, [pc, #36]	; (800f310 <MX_USB_DEVICE_Init+0x54>)
 800f2ea:	f7fb fd1f 	bl	800ad2c <USBD_CDC_RegisterInterface>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d001      	beq.n	800f2f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f2f4:	f7f4 f83a 	bl	800336c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f2f8:	4805      	ldr	r0, [pc, #20]	; (800f310 <MX_USB_DEVICE_Init+0x54>)
 800f2fa:	f7fb fe0d 	bl	800af18 <USBD_Start>
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b00      	cmp	r3, #0
 800f302:	d001      	beq.n	800f308 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f304:	f7f4 f832 	bl	800336c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f308:	bf00      	nop
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	2000064c 	.word	0x2000064c
 800f310:	20006ac8 	.word	0x20006ac8
 800f314:	200005b4 	.word	0x200005b4
 800f318:	20000638 	.word	0x20000638

0800f31c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f320:	2200      	movs	r2, #0
 800f322:	4905      	ldr	r1, [pc, #20]	; (800f338 <CDC_Init_FS+0x1c>)
 800f324:	4805      	ldr	r0, [pc, #20]	; (800f33c <CDC_Init_FS+0x20>)
 800f326:	f7fb fd1b 	bl	800ad60 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f32a:	4905      	ldr	r1, [pc, #20]	; (800f340 <CDC_Init_FS+0x24>)
 800f32c:	4803      	ldr	r0, [pc, #12]	; (800f33c <CDC_Init_FS+0x20>)
 800f32e:	f7fb fd39 	bl	800ada4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f332:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f334:	4618      	mov	r0, r3
 800f336:	bd80      	pop	{r7, pc}
 800f338:	200071a4 	.word	0x200071a4
 800f33c:	20006ac8 	.word	0x20006ac8
 800f340:	20006da4 	.word	0x20006da4

0800f344 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f344:	b480      	push	{r7}
 800f346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f348:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr

0800f354 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f354:	b480      	push	{r7}
 800f356:	b083      	sub	sp, #12
 800f358:	af00      	add	r7, sp, #0
 800f35a:	4603      	mov	r3, r0
 800f35c:	6039      	str	r1, [r7, #0]
 800f35e:	71fb      	strb	r3, [r7, #7]
 800f360:	4613      	mov	r3, r2
 800f362:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f364:	79fb      	ldrb	r3, [r7, #7]
 800f366:	2b23      	cmp	r3, #35	; 0x23
 800f368:	d84a      	bhi.n	800f400 <CDC_Control_FS+0xac>
 800f36a:	a201      	add	r2, pc, #4	; (adr r2, 800f370 <CDC_Control_FS+0x1c>)
 800f36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f370:	0800f401 	.word	0x0800f401
 800f374:	0800f401 	.word	0x0800f401
 800f378:	0800f401 	.word	0x0800f401
 800f37c:	0800f401 	.word	0x0800f401
 800f380:	0800f401 	.word	0x0800f401
 800f384:	0800f401 	.word	0x0800f401
 800f388:	0800f401 	.word	0x0800f401
 800f38c:	0800f401 	.word	0x0800f401
 800f390:	0800f401 	.word	0x0800f401
 800f394:	0800f401 	.word	0x0800f401
 800f398:	0800f401 	.word	0x0800f401
 800f39c:	0800f401 	.word	0x0800f401
 800f3a0:	0800f401 	.word	0x0800f401
 800f3a4:	0800f401 	.word	0x0800f401
 800f3a8:	0800f401 	.word	0x0800f401
 800f3ac:	0800f401 	.word	0x0800f401
 800f3b0:	0800f401 	.word	0x0800f401
 800f3b4:	0800f401 	.word	0x0800f401
 800f3b8:	0800f401 	.word	0x0800f401
 800f3bc:	0800f401 	.word	0x0800f401
 800f3c0:	0800f401 	.word	0x0800f401
 800f3c4:	0800f401 	.word	0x0800f401
 800f3c8:	0800f401 	.word	0x0800f401
 800f3cc:	0800f401 	.word	0x0800f401
 800f3d0:	0800f401 	.word	0x0800f401
 800f3d4:	0800f401 	.word	0x0800f401
 800f3d8:	0800f401 	.word	0x0800f401
 800f3dc:	0800f401 	.word	0x0800f401
 800f3e0:	0800f401 	.word	0x0800f401
 800f3e4:	0800f401 	.word	0x0800f401
 800f3e8:	0800f401 	.word	0x0800f401
 800f3ec:	0800f401 	.word	0x0800f401
 800f3f0:	0800f401 	.word	0x0800f401
 800f3f4:	0800f401 	.word	0x0800f401
 800f3f8:	0800f401 	.word	0x0800f401
 800f3fc:	0800f401 	.word	0x0800f401
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f400:	bf00      	nop
  }

  return (USBD_OK);
 800f402:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f404:	4618      	mov	r0, r3
 800f406:	370c      	adds	r7, #12
 800f408:	46bd      	mov	sp, r7
 800f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40e:	4770      	bx	lr

0800f410 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b082      	sub	sp, #8
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f41a:	6879      	ldr	r1, [r7, #4]
 800f41c:	4805      	ldr	r0, [pc, #20]	; (800f434 <CDC_Receive_FS+0x24>)
 800f41e:	f7fb fcc1 	bl	800ada4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f422:	4804      	ldr	r0, [pc, #16]	; (800f434 <CDC_Receive_FS+0x24>)
 800f424:	f7fb fcdc 	bl	800ade0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f428:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3708      	adds	r7, #8
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
 800f432:	bf00      	nop
 800f434:	20006ac8 	.word	0x20006ac8

0800f438 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f438:	b480      	push	{r7}
 800f43a:	b087      	sub	sp, #28
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	60f8      	str	r0, [r7, #12]
 800f440:	60b9      	str	r1, [r7, #8]
 800f442:	4613      	mov	r3, r2
 800f444:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f446:	2300      	movs	r3, #0
 800f448:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f44a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f44e:	4618      	mov	r0, r3
 800f450:	371c      	adds	r7, #28
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr
	...

0800f45c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f45c:	b480      	push	{r7}
 800f45e:	b083      	sub	sp, #12
 800f460:	af00      	add	r7, sp, #0
 800f462:	4603      	mov	r3, r0
 800f464:	6039      	str	r1, [r7, #0]
 800f466:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	2212      	movs	r2, #18
 800f46c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f46e:	4b03      	ldr	r3, [pc, #12]	; (800f47c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f470:	4618      	mov	r0, r3
 800f472:	370c      	adds	r7, #12
 800f474:	46bd      	mov	sp, r7
 800f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47a:	4770      	bx	lr
 800f47c:	20000668 	.word	0x20000668

0800f480 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f480:	b480      	push	{r7}
 800f482:	b083      	sub	sp, #12
 800f484:	af00      	add	r7, sp, #0
 800f486:	4603      	mov	r3, r0
 800f488:	6039      	str	r1, [r7, #0]
 800f48a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	2204      	movs	r2, #4
 800f490:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f492:	4b03      	ldr	r3, [pc, #12]	; (800f4a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f494:	4618      	mov	r0, r3
 800f496:	370c      	adds	r7, #12
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr
 800f4a0:	2000067c 	.word	0x2000067c

0800f4a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	6039      	str	r1, [r7, #0]
 800f4ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f4b0:	79fb      	ldrb	r3, [r7, #7]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d105      	bne.n	800f4c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f4b6:	683a      	ldr	r2, [r7, #0]
 800f4b8:	4907      	ldr	r1, [pc, #28]	; (800f4d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f4ba:	4808      	ldr	r0, [pc, #32]	; (800f4dc <USBD_FS_ProductStrDescriptor+0x38>)
 800f4bc:	f7fc fed8 	bl	800c270 <USBD_GetString>
 800f4c0:	e004      	b.n	800f4cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f4c2:	683a      	ldr	r2, [r7, #0]
 800f4c4:	4904      	ldr	r1, [pc, #16]	; (800f4d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f4c6:	4805      	ldr	r0, [pc, #20]	; (800f4dc <USBD_FS_ProductStrDescriptor+0x38>)
 800f4c8:	f7fc fed2 	bl	800c270 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f4cc:	4b02      	ldr	r3, [pc, #8]	; (800f4d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3708      	adds	r7, #8
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}
 800f4d6:	bf00      	nop
 800f4d8:	200075a4 	.word	0x200075a4
 800f4dc:	08010a64 	.word	0x08010a64

0800f4e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b082      	sub	sp, #8
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	6039      	str	r1, [r7, #0]
 800f4ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f4ec:	683a      	ldr	r2, [r7, #0]
 800f4ee:	4904      	ldr	r1, [pc, #16]	; (800f500 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f4f0:	4804      	ldr	r0, [pc, #16]	; (800f504 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f4f2:	f7fc febd 	bl	800c270 <USBD_GetString>
  return USBD_StrDesc;
 800f4f6:	4b02      	ldr	r3, [pc, #8]	; (800f500 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3708      	adds	r7, #8
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	200075a4 	.word	0x200075a4
 800f504:	08010a7c 	.word	0x08010a7c

0800f508 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b082      	sub	sp, #8
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	4603      	mov	r3, r0
 800f510:	6039      	str	r1, [r7, #0]
 800f512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	221a      	movs	r2, #26
 800f518:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f51a:	f000 f843 	bl	800f5a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f51e:	4b02      	ldr	r3, [pc, #8]	; (800f528 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f520:	4618      	mov	r0, r3
 800f522:	3708      	adds	r7, #8
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	20000680 	.word	0x20000680

0800f52c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
 800f532:	4603      	mov	r3, r0
 800f534:	6039      	str	r1, [r7, #0]
 800f536:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f538:	79fb      	ldrb	r3, [r7, #7]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d105      	bne.n	800f54a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f53e:	683a      	ldr	r2, [r7, #0]
 800f540:	4907      	ldr	r1, [pc, #28]	; (800f560 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f542:	4808      	ldr	r0, [pc, #32]	; (800f564 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f544:	f7fc fe94 	bl	800c270 <USBD_GetString>
 800f548:	e004      	b.n	800f554 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f54a:	683a      	ldr	r2, [r7, #0]
 800f54c:	4904      	ldr	r1, [pc, #16]	; (800f560 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f54e:	4805      	ldr	r0, [pc, #20]	; (800f564 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f550:	f7fc fe8e 	bl	800c270 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f554:	4b02      	ldr	r3, [pc, #8]	; (800f560 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f556:	4618      	mov	r0, r3
 800f558:	3708      	adds	r7, #8
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	200075a4 	.word	0x200075a4
 800f564:	08010a90 	.word	0x08010a90

0800f568 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	4603      	mov	r3, r0
 800f570:	6039      	str	r1, [r7, #0]
 800f572:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f574:	79fb      	ldrb	r3, [r7, #7]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d105      	bne.n	800f586 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f57a:	683a      	ldr	r2, [r7, #0]
 800f57c:	4907      	ldr	r1, [pc, #28]	; (800f59c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f57e:	4808      	ldr	r0, [pc, #32]	; (800f5a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f580:	f7fc fe76 	bl	800c270 <USBD_GetString>
 800f584:	e004      	b.n	800f590 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f586:	683a      	ldr	r2, [r7, #0]
 800f588:	4904      	ldr	r1, [pc, #16]	; (800f59c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f58a:	4805      	ldr	r0, [pc, #20]	; (800f5a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f58c:	f7fc fe70 	bl	800c270 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f590:	4b02      	ldr	r3, [pc, #8]	; (800f59c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f592:	4618      	mov	r0, r3
 800f594:	3708      	adds	r7, #8
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}
 800f59a:	bf00      	nop
 800f59c:	200075a4 	.word	0x200075a4
 800f5a0:	08010a9c 	.word	0x08010a9c

0800f5a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b084      	sub	sp, #16
 800f5a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f5aa:	4b0f      	ldr	r3, [pc, #60]	; (800f5e8 <Get_SerialNum+0x44>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f5b0:	4b0e      	ldr	r3, [pc, #56]	; (800f5ec <Get_SerialNum+0x48>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f5b6:	4b0e      	ldr	r3, [pc, #56]	; (800f5f0 <Get_SerialNum+0x4c>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f5bc:	68fa      	ldr	r2, [r7, #12]
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d009      	beq.n	800f5de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f5ca:	2208      	movs	r2, #8
 800f5cc:	4909      	ldr	r1, [pc, #36]	; (800f5f4 <Get_SerialNum+0x50>)
 800f5ce:	68f8      	ldr	r0, [r7, #12]
 800f5d0:	f000 f814 	bl	800f5fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f5d4:	2204      	movs	r2, #4
 800f5d6:	4908      	ldr	r1, [pc, #32]	; (800f5f8 <Get_SerialNum+0x54>)
 800f5d8:	68b8      	ldr	r0, [r7, #8]
 800f5da:	f000 f80f 	bl	800f5fc <IntToUnicode>
  }
}
 800f5de:	bf00      	nop
 800f5e0:	3710      	adds	r7, #16
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	1fff7a10 	.word	0x1fff7a10
 800f5ec:	1fff7a14 	.word	0x1fff7a14
 800f5f0:	1fff7a18 	.word	0x1fff7a18
 800f5f4:	20000682 	.word	0x20000682
 800f5f8:	20000692 	.word	0x20000692

0800f5fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b087      	sub	sp, #28
 800f600:	af00      	add	r7, sp, #0
 800f602:	60f8      	str	r0, [r7, #12]
 800f604:	60b9      	str	r1, [r7, #8]
 800f606:	4613      	mov	r3, r2
 800f608:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f60a:	2300      	movs	r3, #0
 800f60c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f60e:	2300      	movs	r3, #0
 800f610:	75fb      	strb	r3, [r7, #23]
 800f612:	e027      	b.n	800f664 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	0f1b      	lsrs	r3, r3, #28
 800f618:	2b09      	cmp	r3, #9
 800f61a:	d80b      	bhi.n	800f634 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	0f1b      	lsrs	r3, r3, #28
 800f620:	b2da      	uxtb	r2, r3
 800f622:	7dfb      	ldrb	r3, [r7, #23]
 800f624:	005b      	lsls	r3, r3, #1
 800f626:	4619      	mov	r1, r3
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	440b      	add	r3, r1
 800f62c:	3230      	adds	r2, #48	; 0x30
 800f62e:	b2d2      	uxtb	r2, r2
 800f630:	701a      	strb	r2, [r3, #0]
 800f632:	e00a      	b.n	800f64a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	0f1b      	lsrs	r3, r3, #28
 800f638:	b2da      	uxtb	r2, r3
 800f63a:	7dfb      	ldrb	r3, [r7, #23]
 800f63c:	005b      	lsls	r3, r3, #1
 800f63e:	4619      	mov	r1, r3
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	440b      	add	r3, r1
 800f644:	3237      	adds	r2, #55	; 0x37
 800f646:	b2d2      	uxtb	r2, r2
 800f648:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	011b      	lsls	r3, r3, #4
 800f64e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f650:	7dfb      	ldrb	r3, [r7, #23]
 800f652:	005b      	lsls	r3, r3, #1
 800f654:	3301      	adds	r3, #1
 800f656:	68ba      	ldr	r2, [r7, #8]
 800f658:	4413      	add	r3, r2
 800f65a:	2200      	movs	r2, #0
 800f65c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f65e:	7dfb      	ldrb	r3, [r7, #23]
 800f660:	3301      	adds	r3, #1
 800f662:	75fb      	strb	r3, [r7, #23]
 800f664:	7dfa      	ldrb	r2, [r7, #23]
 800f666:	79fb      	ldrb	r3, [r7, #7]
 800f668:	429a      	cmp	r2, r3
 800f66a:	d3d3      	bcc.n	800f614 <IntToUnicode+0x18>
  }
}
 800f66c:	bf00      	nop
 800f66e:	bf00      	nop
 800f670:	371c      	adds	r7, #28
 800f672:	46bd      	mov	sp, r7
 800f674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f678:	4770      	bx	lr
	...

0800f67c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b08a      	sub	sp, #40	; 0x28
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f684:	f107 0314 	add.w	r3, r7, #20
 800f688:	2200      	movs	r2, #0
 800f68a:	601a      	str	r2, [r3, #0]
 800f68c:	605a      	str	r2, [r3, #4]
 800f68e:	609a      	str	r2, [r3, #8]
 800f690:	60da      	str	r2, [r3, #12]
 800f692:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f69c:	d13a      	bne.n	800f714 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f69e:	2300      	movs	r3, #0
 800f6a0:	613b      	str	r3, [r7, #16]
 800f6a2:	4b1e      	ldr	r3, [pc, #120]	; (800f71c <HAL_PCD_MspInit+0xa0>)
 800f6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6a6:	4a1d      	ldr	r2, [pc, #116]	; (800f71c <HAL_PCD_MspInit+0xa0>)
 800f6a8:	f043 0301 	orr.w	r3, r3, #1
 800f6ac:	6313      	str	r3, [r2, #48]	; 0x30
 800f6ae:	4b1b      	ldr	r3, [pc, #108]	; (800f71c <HAL_PCD_MspInit+0xa0>)
 800f6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6b2:	f003 0301 	and.w	r3, r3, #1
 800f6b6:	613b      	str	r3, [r7, #16]
 800f6b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f6ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f6be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6c0:	2302      	movs	r3, #2
 800f6c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f6c8:	2303      	movs	r3, #3
 800f6ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f6cc:	230a      	movs	r3, #10
 800f6ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f6d0:	f107 0314 	add.w	r3, r7, #20
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	4812      	ldr	r0, [pc, #72]	; (800f720 <HAL_PCD_MspInit+0xa4>)
 800f6d8:	f7f4 fd40 	bl	800415c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f6dc:	4b0f      	ldr	r3, [pc, #60]	; (800f71c <HAL_PCD_MspInit+0xa0>)
 800f6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6e0:	4a0e      	ldr	r2, [pc, #56]	; (800f71c <HAL_PCD_MspInit+0xa0>)
 800f6e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6e6:	6353      	str	r3, [r2, #52]	; 0x34
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	60fb      	str	r3, [r7, #12]
 800f6ec:	4b0b      	ldr	r3, [pc, #44]	; (800f71c <HAL_PCD_MspInit+0xa0>)
 800f6ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6f0:	4a0a      	ldr	r2, [pc, #40]	; (800f71c <HAL_PCD_MspInit+0xa0>)
 800f6f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f6f6:	6453      	str	r3, [r2, #68]	; 0x44
 800f6f8:	4b08      	ldr	r3, [pc, #32]	; (800f71c <HAL_PCD_MspInit+0xa0>)
 800f6fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f700:	60fb      	str	r3, [r7, #12]
 800f702:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f704:	2200      	movs	r2, #0
 800f706:	2105      	movs	r1, #5
 800f708:	2043      	movs	r0, #67	; 0x43
 800f70a:	f7f4 fcfd 	bl	8004108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f70e:	2043      	movs	r0, #67	; 0x43
 800f710:	f7f4 fd16 	bl	8004140 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f714:	bf00      	nop
 800f716:	3728      	adds	r7, #40	; 0x28
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}
 800f71c:	40023800 	.word	0x40023800
 800f720:	40020000 	.word	0x40020000

0800f724 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f738:	4619      	mov	r1, r3
 800f73a:	4610      	mov	r0, r2
 800f73c:	f7fb fc39 	bl	800afb2 <USBD_LL_SetupStage>
}
 800f740:	bf00      	nop
 800f742:	3708      	adds	r7, #8
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	460b      	mov	r3, r1
 800f752:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f75a:	78fa      	ldrb	r2, [r7, #3]
 800f75c:	6879      	ldr	r1, [r7, #4]
 800f75e:	4613      	mov	r3, r2
 800f760:	00db      	lsls	r3, r3, #3
 800f762:	4413      	add	r3, r2
 800f764:	009b      	lsls	r3, r3, #2
 800f766:	440b      	add	r3, r1
 800f768:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f76c:	681a      	ldr	r2, [r3, #0]
 800f76e:	78fb      	ldrb	r3, [r7, #3]
 800f770:	4619      	mov	r1, r3
 800f772:	f7fb fc73 	bl	800b05c <USBD_LL_DataOutStage>
}
 800f776:	bf00      	nop
 800f778:	3708      	adds	r7, #8
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}

0800f77e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f77e:	b580      	push	{r7, lr}
 800f780:	b082      	sub	sp, #8
 800f782:	af00      	add	r7, sp, #0
 800f784:	6078      	str	r0, [r7, #4]
 800f786:	460b      	mov	r3, r1
 800f788:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f790:	78fa      	ldrb	r2, [r7, #3]
 800f792:	6879      	ldr	r1, [r7, #4]
 800f794:	4613      	mov	r3, r2
 800f796:	00db      	lsls	r3, r3, #3
 800f798:	4413      	add	r3, r2
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	440b      	add	r3, r1
 800f79e:	334c      	adds	r3, #76	; 0x4c
 800f7a0:	681a      	ldr	r2, [r3, #0]
 800f7a2:	78fb      	ldrb	r3, [r7, #3]
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	f7fb fd0c 	bl	800b1c2 <USBD_LL_DataInStage>
}
 800f7aa:	bf00      	nop
 800f7ac:	3708      	adds	r7, #8
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}

0800f7b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7b2:	b580      	push	{r7, lr}
 800f7b4:	b082      	sub	sp, #8
 800f7b6:	af00      	add	r7, sp, #0
 800f7b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f7fb fe40 	bl	800b446 <USBD_LL_SOF>
}
 800f7c6:	bf00      	nop
 800f7c8:	3708      	adds	r7, #8
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}

0800f7ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7ce:	b580      	push	{r7, lr}
 800f7d0:	b084      	sub	sp, #16
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f7d6:	2301      	movs	r3, #1
 800f7d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	68db      	ldr	r3, [r3, #12]
 800f7de:	2b02      	cmp	r3, #2
 800f7e0:	d001      	beq.n	800f7e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f7e2:	f7f3 fdc3 	bl	800336c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7ec:	7bfa      	ldrb	r2, [r7, #15]
 800f7ee:	4611      	mov	r1, r2
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7fb fdea 	bl	800b3ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7fb fd92 	bl	800b326 <USBD_LL_Reset>
}
 800f802:	bf00      	nop
 800f804:	3710      	adds	r7, #16
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
	...

0800f80c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f81a:	4618      	mov	r0, r3
 800f81c:	f7fb fde5 	bl	800b3ea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	687a      	ldr	r2, [r7, #4]
 800f82c:	6812      	ldr	r2, [r2, #0]
 800f82e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f832:	f043 0301 	orr.w	r3, r3, #1
 800f836:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6a1b      	ldr	r3, [r3, #32]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d005      	beq.n	800f84c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f840:	4b04      	ldr	r3, [pc, #16]	; (800f854 <HAL_PCD_SuspendCallback+0x48>)
 800f842:	691b      	ldr	r3, [r3, #16]
 800f844:	4a03      	ldr	r2, [pc, #12]	; (800f854 <HAL_PCD_SuspendCallback+0x48>)
 800f846:	f043 0306 	orr.w	r3, r3, #6
 800f84a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f84c:	bf00      	nop
 800f84e:	3708      	adds	r7, #8
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}
 800f854:	e000ed00 	.word	0xe000ed00

0800f858 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b082      	sub	sp, #8
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f866:	4618      	mov	r0, r3
 800f868:	f7fb fdd5 	bl	800b416 <USBD_LL_Resume>
}
 800f86c:	bf00      	nop
 800f86e:	3708      	adds	r7, #8
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}

0800f874 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	460b      	mov	r3, r1
 800f87e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f886:	78fa      	ldrb	r2, [r7, #3]
 800f888:	4611      	mov	r1, r2
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fb fe2d 	bl	800b4ea <USBD_LL_IsoOUTIncomplete>
}
 800f890:	bf00      	nop
 800f892:	3708      	adds	r7, #8
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}

0800f898 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	460b      	mov	r3, r1
 800f8a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8aa:	78fa      	ldrb	r2, [r7, #3]
 800f8ac:	4611      	mov	r1, r2
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7fb fde9 	bl	800b486 <USBD_LL_IsoINIncomplete>
}
 800f8b4:	bf00      	nop
 800f8b6:	3708      	adds	r7, #8
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}

0800f8bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b082      	sub	sp, #8
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7fb fe3f 	bl	800b54e <USBD_LL_DevConnected>
}
 800f8d0:	bf00      	nop
 800f8d2:	3708      	adds	r7, #8
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7fb fe3c 	bl	800b564 <USBD_LL_DevDisconnected>
}
 800f8ec:	bf00      	nop
 800f8ee:	3708      	adds	r7, #8
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d13c      	bne.n	800f97e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f904:	4a20      	ldr	r2, [pc, #128]	; (800f988 <USBD_LL_Init+0x94>)
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	4a1e      	ldr	r2, [pc, #120]	; (800f988 <USBD_LL_Init+0x94>)
 800f910:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f914:	4b1c      	ldr	r3, [pc, #112]	; (800f988 <USBD_LL_Init+0x94>)
 800f916:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f91a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f91c:	4b1a      	ldr	r3, [pc, #104]	; (800f988 <USBD_LL_Init+0x94>)
 800f91e:	2204      	movs	r2, #4
 800f920:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f922:	4b19      	ldr	r3, [pc, #100]	; (800f988 <USBD_LL_Init+0x94>)
 800f924:	2202      	movs	r2, #2
 800f926:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f928:	4b17      	ldr	r3, [pc, #92]	; (800f988 <USBD_LL_Init+0x94>)
 800f92a:	2200      	movs	r2, #0
 800f92c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f92e:	4b16      	ldr	r3, [pc, #88]	; (800f988 <USBD_LL_Init+0x94>)
 800f930:	2202      	movs	r2, #2
 800f932:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f934:	4b14      	ldr	r3, [pc, #80]	; (800f988 <USBD_LL_Init+0x94>)
 800f936:	2200      	movs	r2, #0
 800f938:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f93a:	4b13      	ldr	r3, [pc, #76]	; (800f988 <USBD_LL_Init+0x94>)
 800f93c:	2200      	movs	r2, #0
 800f93e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f940:	4b11      	ldr	r3, [pc, #68]	; (800f988 <USBD_LL_Init+0x94>)
 800f942:	2200      	movs	r2, #0
 800f944:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f946:	4b10      	ldr	r3, [pc, #64]	; (800f988 <USBD_LL_Init+0x94>)
 800f948:	2200      	movs	r2, #0
 800f94a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f94c:	4b0e      	ldr	r3, [pc, #56]	; (800f988 <USBD_LL_Init+0x94>)
 800f94e:	2200      	movs	r2, #0
 800f950:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f952:	480d      	ldr	r0, [pc, #52]	; (800f988 <USBD_LL_Init+0x94>)
 800f954:	f7f5 fd8f 	bl	8005476 <HAL_PCD_Init>
 800f958:	4603      	mov	r3, r0
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d001      	beq.n	800f962 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f95e:	f7f3 fd05 	bl	800336c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f962:	2180      	movs	r1, #128	; 0x80
 800f964:	4808      	ldr	r0, [pc, #32]	; (800f988 <USBD_LL_Init+0x94>)
 800f966:	f7f6 ffe6 	bl	8006936 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f96a:	2240      	movs	r2, #64	; 0x40
 800f96c:	2100      	movs	r1, #0
 800f96e:	4806      	ldr	r0, [pc, #24]	; (800f988 <USBD_LL_Init+0x94>)
 800f970:	f7f6 ff9a 	bl	80068a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f974:	2280      	movs	r2, #128	; 0x80
 800f976:	2101      	movs	r1, #1
 800f978:	4803      	ldr	r0, [pc, #12]	; (800f988 <USBD_LL_Init+0x94>)
 800f97a:	f7f6 ff95 	bl	80068a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f97e:	2300      	movs	r3, #0
}
 800f980:	4618      	mov	r0, r3
 800f982:	3708      	adds	r7, #8
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}
 800f988:	200077a4 	.word	0x200077a4

0800f98c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b084      	sub	sp, #16
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f994:	2300      	movs	r3, #0
 800f996:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f998:	2300      	movs	r3, #0
 800f99a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f7f5 fe84 	bl	80056b0 <HAL_PCD_Start>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9ac:	7bfb      	ldrb	r3, [r7, #15]
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f000 f942 	bl	800fc38 <USBD_Get_USB_Status>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3710      	adds	r7, #16
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}

0800f9c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f9c2:	b580      	push	{r7, lr}
 800f9c4:	b084      	sub	sp, #16
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
 800f9ca:	4608      	mov	r0, r1
 800f9cc:	4611      	mov	r1, r2
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	70fb      	strb	r3, [r7, #3]
 800f9d4:	460b      	mov	r3, r1
 800f9d6:	70bb      	strb	r3, [r7, #2]
 800f9d8:	4613      	mov	r3, r2
 800f9da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f9ea:	78bb      	ldrb	r3, [r7, #2]
 800f9ec:	883a      	ldrh	r2, [r7, #0]
 800f9ee:	78f9      	ldrb	r1, [r7, #3]
 800f9f0:	f7f6 fb55 	bl	800609e <HAL_PCD_EP_Open>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9f8:	7bfb      	ldrb	r3, [r7, #15]
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f000 f91c 	bl	800fc38 <USBD_Get_USB_Status>
 800fa00:	4603      	mov	r3, r0
 800fa02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa04:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	3710      	adds	r7, #16
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}

0800fa0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa0e:	b580      	push	{r7, lr}
 800fa10:	b084      	sub	sp, #16
 800fa12:	af00      	add	r7, sp, #0
 800fa14:	6078      	str	r0, [r7, #4]
 800fa16:	460b      	mov	r3, r1
 800fa18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa28:	78fa      	ldrb	r2, [r7, #3]
 800fa2a:	4611      	mov	r1, r2
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7f6 fb9e 	bl	800616e <HAL_PCD_EP_Close>
 800fa32:	4603      	mov	r3, r0
 800fa34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa36:	7bfb      	ldrb	r3, [r7, #15]
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f000 f8fd 	bl	800fc38 <USBD_Get_USB_Status>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa42:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	3710      	adds	r7, #16
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}

0800fa4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b084      	sub	sp, #16
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	460b      	mov	r3, r1
 800fa56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa66:	78fa      	ldrb	r2, [r7, #3]
 800fa68:	4611      	mov	r1, r2
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7f6 fc76 	bl	800635c <HAL_PCD_EP_SetStall>
 800fa70:	4603      	mov	r3, r0
 800fa72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa74:	7bfb      	ldrb	r3, [r7, #15]
 800fa76:	4618      	mov	r0, r3
 800fa78:	f000 f8de 	bl	800fc38 <USBD_Get_USB_Status>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa80:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3710      	adds	r7, #16
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}

0800fa8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa8a:	b580      	push	{r7, lr}
 800fa8c:	b084      	sub	sp, #16
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
 800fa92:	460b      	mov	r3, r1
 800fa94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa96:	2300      	movs	r3, #0
 800fa98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800faa4:	78fa      	ldrb	r2, [r7, #3]
 800faa6:	4611      	mov	r1, r2
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7f6 fcbb 	bl	8006424 <HAL_PCD_EP_ClrStall>
 800faae:	4603      	mov	r3, r0
 800fab0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fab2:	7bfb      	ldrb	r3, [r7, #15]
 800fab4:	4618      	mov	r0, r3
 800fab6:	f000 f8bf 	bl	800fc38 <USBD_Get_USB_Status>
 800faba:	4603      	mov	r3, r0
 800fabc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fabe:	7bbb      	ldrb	r3, [r7, #14]
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	3710      	adds	r7, #16
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fac8:	b480      	push	{r7}
 800faca:	b085      	sub	sp, #20
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
 800fad0:	460b      	mov	r3, r1
 800fad2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fada:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fadc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	da0b      	bge.n	800fafc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fae4:	78fb      	ldrb	r3, [r7, #3]
 800fae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800faea:	68f9      	ldr	r1, [r7, #12]
 800faec:	4613      	mov	r3, r2
 800faee:	00db      	lsls	r3, r3, #3
 800faf0:	4413      	add	r3, r2
 800faf2:	009b      	lsls	r3, r3, #2
 800faf4:	440b      	add	r3, r1
 800faf6:	333e      	adds	r3, #62	; 0x3e
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	e00b      	b.n	800fb14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fafc:	78fb      	ldrb	r3, [r7, #3]
 800fafe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb02:	68f9      	ldr	r1, [r7, #12]
 800fb04:	4613      	mov	r3, r2
 800fb06:	00db      	lsls	r3, r3, #3
 800fb08:	4413      	add	r3, r2
 800fb0a:	009b      	lsls	r3, r3, #2
 800fb0c:	440b      	add	r3, r1
 800fb0e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fb12:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3714      	adds	r7, #20
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr

0800fb20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b084      	sub	sp, #16
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
 800fb28:	460b      	mov	r3, r1
 800fb2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb30:	2300      	movs	r3, #0
 800fb32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb3a:	78fa      	ldrb	r2, [r7, #3]
 800fb3c:	4611      	mov	r1, r2
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7f6 fa88 	bl	8006054 <HAL_PCD_SetAddress>
 800fb44:	4603      	mov	r3, r0
 800fb46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb48:	7bfb      	ldrb	r3, [r7, #15]
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f000 f874 	bl	800fc38 <USBD_Get_USB_Status>
 800fb50:	4603      	mov	r3, r0
 800fb52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb54:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb56:	4618      	mov	r0, r3
 800fb58:	3710      	adds	r7, #16
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}

0800fb5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fb5e:	b580      	push	{r7, lr}
 800fb60:	b086      	sub	sp, #24
 800fb62:	af00      	add	r7, sp, #0
 800fb64:	60f8      	str	r0, [r7, #12]
 800fb66:	607a      	str	r2, [r7, #4]
 800fb68:	603b      	str	r3, [r7, #0]
 800fb6a:	460b      	mov	r3, r1
 800fb6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb72:	2300      	movs	r3, #0
 800fb74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fb7c:	7af9      	ldrb	r1, [r7, #11]
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	687a      	ldr	r2, [r7, #4]
 800fb82:	f7f6 fba1 	bl	80062c8 <HAL_PCD_EP_Transmit>
 800fb86:	4603      	mov	r3, r0
 800fb88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb8a:	7dfb      	ldrb	r3, [r7, #23]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f000 f853 	bl	800fc38 <USBD_Get_USB_Status>
 800fb92:	4603      	mov	r3, r0
 800fb94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fb96:	7dbb      	ldrb	r3, [r7, #22]
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3718      	adds	r7, #24
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b086      	sub	sp, #24
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	607a      	str	r2, [r7, #4]
 800fbaa:	603b      	str	r3, [r7, #0]
 800fbac:	460b      	mov	r3, r1
 800fbae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fbbe:	7af9      	ldrb	r1, [r7, #11]
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	687a      	ldr	r2, [r7, #4]
 800fbc4:	f7f6 fb1d 	bl	8006202 <HAL_PCD_EP_Receive>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbcc:	7dfb      	ldrb	r3, [r7, #23]
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f000 f832 	bl	800fc38 <USBD_Get_USB_Status>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fbd8:	7dbb      	ldrb	r3, [r7, #22]
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3718      	adds	r7, #24
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}

0800fbe2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbe2:	b580      	push	{r7, lr}
 800fbe4:	b082      	sub	sp, #8
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	6078      	str	r0, [r7, #4]
 800fbea:	460b      	mov	r3, r1
 800fbec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fbf4:	78fa      	ldrb	r2, [r7, #3]
 800fbf6:	4611      	mov	r1, r2
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f7f6 fb4d 	bl	8006298 <HAL_PCD_EP_GetRxCount>
 800fbfe:	4603      	mov	r3, r0
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3708      	adds	r7, #8
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}

0800fc08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fc08:	b480      	push	{r7}
 800fc0a:	b083      	sub	sp, #12
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fc10:	4b03      	ldr	r3, [pc, #12]	; (800fc20 <USBD_static_malloc+0x18>)
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	370c      	adds	r7, #12
 800fc16:	46bd      	mov	sp, r7
 800fc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1c:	4770      	bx	lr
 800fc1e:	bf00      	nop
 800fc20:	20007cb0 	.word	0x20007cb0

0800fc24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]

}
 800fc2c:	bf00      	nop
 800fc2e:	370c      	adds	r7, #12
 800fc30:	46bd      	mov	sp, r7
 800fc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc36:	4770      	bx	lr

0800fc38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b085      	sub	sp, #20
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	4603      	mov	r3, r0
 800fc40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc42:	2300      	movs	r3, #0
 800fc44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fc46:	79fb      	ldrb	r3, [r7, #7]
 800fc48:	2b03      	cmp	r3, #3
 800fc4a:	d817      	bhi.n	800fc7c <USBD_Get_USB_Status+0x44>
 800fc4c:	a201      	add	r2, pc, #4	; (adr r2, 800fc54 <USBD_Get_USB_Status+0x1c>)
 800fc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc52:	bf00      	nop
 800fc54:	0800fc65 	.word	0x0800fc65
 800fc58:	0800fc6b 	.word	0x0800fc6b
 800fc5c:	0800fc71 	.word	0x0800fc71
 800fc60:	0800fc77 	.word	0x0800fc77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fc64:	2300      	movs	r3, #0
 800fc66:	73fb      	strb	r3, [r7, #15]
    break;
 800fc68:	e00b      	b.n	800fc82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fc6a:	2303      	movs	r3, #3
 800fc6c:	73fb      	strb	r3, [r7, #15]
    break;
 800fc6e:	e008      	b.n	800fc82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fc70:	2301      	movs	r3, #1
 800fc72:	73fb      	strb	r3, [r7, #15]
    break;
 800fc74:	e005      	b.n	800fc82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fc76:	2303      	movs	r3, #3
 800fc78:	73fb      	strb	r3, [r7, #15]
    break;
 800fc7a:	e002      	b.n	800fc82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fc7c:	2303      	movs	r3, #3
 800fc7e:	73fb      	strb	r3, [r7, #15]
    break;
 800fc80:	bf00      	nop
  }
  return usb_status;
 800fc82:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3714      	adds	r7, #20
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8e:	4770      	bx	lr

0800fc90 <__errno>:
 800fc90:	4b01      	ldr	r3, [pc, #4]	; (800fc98 <__errno+0x8>)
 800fc92:	6818      	ldr	r0, [r3, #0]
 800fc94:	4770      	bx	lr
 800fc96:	bf00      	nop
 800fc98:	2000069c 	.word	0x2000069c

0800fc9c <__libc_init_array>:
 800fc9c:	b570      	push	{r4, r5, r6, lr}
 800fc9e:	4d0d      	ldr	r5, [pc, #52]	; (800fcd4 <__libc_init_array+0x38>)
 800fca0:	4c0d      	ldr	r4, [pc, #52]	; (800fcd8 <__libc_init_array+0x3c>)
 800fca2:	1b64      	subs	r4, r4, r5
 800fca4:	10a4      	asrs	r4, r4, #2
 800fca6:	2600      	movs	r6, #0
 800fca8:	42a6      	cmp	r6, r4
 800fcaa:	d109      	bne.n	800fcc0 <__libc_init_array+0x24>
 800fcac:	4d0b      	ldr	r5, [pc, #44]	; (800fcdc <__libc_init_array+0x40>)
 800fcae:	4c0c      	ldr	r4, [pc, #48]	; (800fce0 <__libc_init_array+0x44>)
 800fcb0:	f000 fcc0 	bl	8010634 <_init>
 800fcb4:	1b64      	subs	r4, r4, r5
 800fcb6:	10a4      	asrs	r4, r4, #2
 800fcb8:	2600      	movs	r6, #0
 800fcba:	42a6      	cmp	r6, r4
 800fcbc:	d105      	bne.n	800fcca <__libc_init_array+0x2e>
 800fcbe:	bd70      	pop	{r4, r5, r6, pc}
 800fcc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcc4:	4798      	blx	r3
 800fcc6:	3601      	adds	r6, #1
 800fcc8:	e7ee      	b.n	800fca8 <__libc_init_array+0xc>
 800fcca:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcce:	4798      	blx	r3
 800fcd0:	3601      	adds	r6, #1
 800fcd2:	e7f2      	b.n	800fcba <__libc_init_array+0x1e>
 800fcd4:	0801102c 	.word	0x0801102c
 800fcd8:	0801102c 	.word	0x0801102c
 800fcdc:	0801102c 	.word	0x0801102c
 800fce0:	08011030 	.word	0x08011030

0800fce4 <malloc>:
 800fce4:	4b02      	ldr	r3, [pc, #8]	; (800fcf0 <malloc+0xc>)
 800fce6:	4601      	mov	r1, r0
 800fce8:	6818      	ldr	r0, [r3, #0]
 800fcea:	f000 b88d 	b.w	800fe08 <_malloc_r>
 800fcee:	bf00      	nop
 800fcf0:	2000069c 	.word	0x2000069c

0800fcf4 <free>:
 800fcf4:	4b02      	ldr	r3, [pc, #8]	; (800fd00 <free+0xc>)
 800fcf6:	4601      	mov	r1, r0
 800fcf8:	6818      	ldr	r0, [r3, #0]
 800fcfa:	f000 b819 	b.w	800fd30 <_free_r>
 800fcfe:	bf00      	nop
 800fd00:	2000069c 	.word	0x2000069c

0800fd04 <memcpy>:
 800fd04:	440a      	add	r2, r1
 800fd06:	4291      	cmp	r1, r2
 800fd08:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd0c:	d100      	bne.n	800fd10 <memcpy+0xc>
 800fd0e:	4770      	bx	lr
 800fd10:	b510      	push	{r4, lr}
 800fd12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd1a:	4291      	cmp	r1, r2
 800fd1c:	d1f9      	bne.n	800fd12 <memcpy+0xe>
 800fd1e:	bd10      	pop	{r4, pc}

0800fd20 <memset>:
 800fd20:	4402      	add	r2, r0
 800fd22:	4603      	mov	r3, r0
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d100      	bne.n	800fd2a <memset+0xa>
 800fd28:	4770      	bx	lr
 800fd2a:	f803 1b01 	strb.w	r1, [r3], #1
 800fd2e:	e7f9      	b.n	800fd24 <memset+0x4>

0800fd30 <_free_r>:
 800fd30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd32:	2900      	cmp	r1, #0
 800fd34:	d044      	beq.n	800fdc0 <_free_r+0x90>
 800fd36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd3a:	9001      	str	r0, [sp, #4]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	f1a1 0404 	sub.w	r4, r1, #4
 800fd42:	bfb8      	it	lt
 800fd44:	18e4      	addlt	r4, r4, r3
 800fd46:	f000 f927 	bl	800ff98 <__malloc_lock>
 800fd4a:	4a1e      	ldr	r2, [pc, #120]	; (800fdc4 <_free_r+0x94>)
 800fd4c:	9801      	ldr	r0, [sp, #4]
 800fd4e:	6813      	ldr	r3, [r2, #0]
 800fd50:	b933      	cbnz	r3, 800fd60 <_free_r+0x30>
 800fd52:	6063      	str	r3, [r4, #4]
 800fd54:	6014      	str	r4, [r2, #0]
 800fd56:	b003      	add	sp, #12
 800fd58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd5c:	f000 b922 	b.w	800ffa4 <__malloc_unlock>
 800fd60:	42a3      	cmp	r3, r4
 800fd62:	d908      	bls.n	800fd76 <_free_r+0x46>
 800fd64:	6825      	ldr	r5, [r4, #0]
 800fd66:	1961      	adds	r1, r4, r5
 800fd68:	428b      	cmp	r3, r1
 800fd6a:	bf01      	itttt	eq
 800fd6c:	6819      	ldreq	r1, [r3, #0]
 800fd6e:	685b      	ldreq	r3, [r3, #4]
 800fd70:	1949      	addeq	r1, r1, r5
 800fd72:	6021      	streq	r1, [r4, #0]
 800fd74:	e7ed      	b.n	800fd52 <_free_r+0x22>
 800fd76:	461a      	mov	r2, r3
 800fd78:	685b      	ldr	r3, [r3, #4]
 800fd7a:	b10b      	cbz	r3, 800fd80 <_free_r+0x50>
 800fd7c:	42a3      	cmp	r3, r4
 800fd7e:	d9fa      	bls.n	800fd76 <_free_r+0x46>
 800fd80:	6811      	ldr	r1, [r2, #0]
 800fd82:	1855      	adds	r5, r2, r1
 800fd84:	42a5      	cmp	r5, r4
 800fd86:	d10b      	bne.n	800fda0 <_free_r+0x70>
 800fd88:	6824      	ldr	r4, [r4, #0]
 800fd8a:	4421      	add	r1, r4
 800fd8c:	1854      	adds	r4, r2, r1
 800fd8e:	42a3      	cmp	r3, r4
 800fd90:	6011      	str	r1, [r2, #0]
 800fd92:	d1e0      	bne.n	800fd56 <_free_r+0x26>
 800fd94:	681c      	ldr	r4, [r3, #0]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	6053      	str	r3, [r2, #4]
 800fd9a:	4421      	add	r1, r4
 800fd9c:	6011      	str	r1, [r2, #0]
 800fd9e:	e7da      	b.n	800fd56 <_free_r+0x26>
 800fda0:	d902      	bls.n	800fda8 <_free_r+0x78>
 800fda2:	230c      	movs	r3, #12
 800fda4:	6003      	str	r3, [r0, #0]
 800fda6:	e7d6      	b.n	800fd56 <_free_r+0x26>
 800fda8:	6825      	ldr	r5, [r4, #0]
 800fdaa:	1961      	adds	r1, r4, r5
 800fdac:	428b      	cmp	r3, r1
 800fdae:	bf04      	itt	eq
 800fdb0:	6819      	ldreq	r1, [r3, #0]
 800fdb2:	685b      	ldreq	r3, [r3, #4]
 800fdb4:	6063      	str	r3, [r4, #4]
 800fdb6:	bf04      	itt	eq
 800fdb8:	1949      	addeq	r1, r1, r5
 800fdba:	6021      	streq	r1, [r4, #0]
 800fdbc:	6054      	str	r4, [r2, #4]
 800fdbe:	e7ca      	b.n	800fd56 <_free_r+0x26>
 800fdc0:	b003      	add	sp, #12
 800fdc2:	bd30      	pop	{r4, r5, pc}
 800fdc4:	20007ed0 	.word	0x20007ed0

0800fdc8 <sbrk_aligned>:
 800fdc8:	b570      	push	{r4, r5, r6, lr}
 800fdca:	4e0e      	ldr	r6, [pc, #56]	; (800fe04 <sbrk_aligned+0x3c>)
 800fdcc:	460c      	mov	r4, r1
 800fdce:	6831      	ldr	r1, [r6, #0]
 800fdd0:	4605      	mov	r5, r0
 800fdd2:	b911      	cbnz	r1, 800fdda <sbrk_aligned+0x12>
 800fdd4:	f000 f894 	bl	800ff00 <_sbrk_r>
 800fdd8:	6030      	str	r0, [r6, #0]
 800fdda:	4621      	mov	r1, r4
 800fddc:	4628      	mov	r0, r5
 800fdde:	f000 f88f 	bl	800ff00 <_sbrk_r>
 800fde2:	1c43      	adds	r3, r0, #1
 800fde4:	d00a      	beq.n	800fdfc <sbrk_aligned+0x34>
 800fde6:	1cc4      	adds	r4, r0, #3
 800fde8:	f024 0403 	bic.w	r4, r4, #3
 800fdec:	42a0      	cmp	r0, r4
 800fdee:	d007      	beq.n	800fe00 <sbrk_aligned+0x38>
 800fdf0:	1a21      	subs	r1, r4, r0
 800fdf2:	4628      	mov	r0, r5
 800fdf4:	f000 f884 	bl	800ff00 <_sbrk_r>
 800fdf8:	3001      	adds	r0, #1
 800fdfa:	d101      	bne.n	800fe00 <sbrk_aligned+0x38>
 800fdfc:	f04f 34ff 	mov.w	r4, #4294967295
 800fe00:	4620      	mov	r0, r4
 800fe02:	bd70      	pop	{r4, r5, r6, pc}
 800fe04:	20007ed4 	.word	0x20007ed4

0800fe08 <_malloc_r>:
 800fe08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe0c:	1ccd      	adds	r5, r1, #3
 800fe0e:	f025 0503 	bic.w	r5, r5, #3
 800fe12:	3508      	adds	r5, #8
 800fe14:	2d0c      	cmp	r5, #12
 800fe16:	bf38      	it	cc
 800fe18:	250c      	movcc	r5, #12
 800fe1a:	2d00      	cmp	r5, #0
 800fe1c:	4607      	mov	r7, r0
 800fe1e:	db01      	blt.n	800fe24 <_malloc_r+0x1c>
 800fe20:	42a9      	cmp	r1, r5
 800fe22:	d905      	bls.n	800fe30 <_malloc_r+0x28>
 800fe24:	230c      	movs	r3, #12
 800fe26:	603b      	str	r3, [r7, #0]
 800fe28:	2600      	movs	r6, #0
 800fe2a:	4630      	mov	r0, r6
 800fe2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe30:	4e2e      	ldr	r6, [pc, #184]	; (800feec <_malloc_r+0xe4>)
 800fe32:	f000 f8b1 	bl	800ff98 <__malloc_lock>
 800fe36:	6833      	ldr	r3, [r6, #0]
 800fe38:	461c      	mov	r4, r3
 800fe3a:	bb34      	cbnz	r4, 800fe8a <_malloc_r+0x82>
 800fe3c:	4629      	mov	r1, r5
 800fe3e:	4638      	mov	r0, r7
 800fe40:	f7ff ffc2 	bl	800fdc8 <sbrk_aligned>
 800fe44:	1c43      	adds	r3, r0, #1
 800fe46:	4604      	mov	r4, r0
 800fe48:	d14d      	bne.n	800fee6 <_malloc_r+0xde>
 800fe4a:	6834      	ldr	r4, [r6, #0]
 800fe4c:	4626      	mov	r6, r4
 800fe4e:	2e00      	cmp	r6, #0
 800fe50:	d140      	bne.n	800fed4 <_malloc_r+0xcc>
 800fe52:	6823      	ldr	r3, [r4, #0]
 800fe54:	4631      	mov	r1, r6
 800fe56:	4638      	mov	r0, r7
 800fe58:	eb04 0803 	add.w	r8, r4, r3
 800fe5c:	f000 f850 	bl	800ff00 <_sbrk_r>
 800fe60:	4580      	cmp	r8, r0
 800fe62:	d13a      	bne.n	800feda <_malloc_r+0xd2>
 800fe64:	6821      	ldr	r1, [r4, #0]
 800fe66:	3503      	adds	r5, #3
 800fe68:	1a6d      	subs	r5, r5, r1
 800fe6a:	f025 0503 	bic.w	r5, r5, #3
 800fe6e:	3508      	adds	r5, #8
 800fe70:	2d0c      	cmp	r5, #12
 800fe72:	bf38      	it	cc
 800fe74:	250c      	movcc	r5, #12
 800fe76:	4629      	mov	r1, r5
 800fe78:	4638      	mov	r0, r7
 800fe7a:	f7ff ffa5 	bl	800fdc8 <sbrk_aligned>
 800fe7e:	3001      	adds	r0, #1
 800fe80:	d02b      	beq.n	800feda <_malloc_r+0xd2>
 800fe82:	6823      	ldr	r3, [r4, #0]
 800fe84:	442b      	add	r3, r5
 800fe86:	6023      	str	r3, [r4, #0]
 800fe88:	e00e      	b.n	800fea8 <_malloc_r+0xa0>
 800fe8a:	6822      	ldr	r2, [r4, #0]
 800fe8c:	1b52      	subs	r2, r2, r5
 800fe8e:	d41e      	bmi.n	800fece <_malloc_r+0xc6>
 800fe90:	2a0b      	cmp	r2, #11
 800fe92:	d916      	bls.n	800fec2 <_malloc_r+0xba>
 800fe94:	1961      	adds	r1, r4, r5
 800fe96:	42a3      	cmp	r3, r4
 800fe98:	6025      	str	r5, [r4, #0]
 800fe9a:	bf18      	it	ne
 800fe9c:	6059      	strne	r1, [r3, #4]
 800fe9e:	6863      	ldr	r3, [r4, #4]
 800fea0:	bf08      	it	eq
 800fea2:	6031      	streq	r1, [r6, #0]
 800fea4:	5162      	str	r2, [r4, r5]
 800fea6:	604b      	str	r3, [r1, #4]
 800fea8:	4638      	mov	r0, r7
 800feaa:	f104 060b 	add.w	r6, r4, #11
 800feae:	f000 f879 	bl	800ffa4 <__malloc_unlock>
 800feb2:	f026 0607 	bic.w	r6, r6, #7
 800feb6:	1d23      	adds	r3, r4, #4
 800feb8:	1af2      	subs	r2, r6, r3
 800feba:	d0b6      	beq.n	800fe2a <_malloc_r+0x22>
 800febc:	1b9b      	subs	r3, r3, r6
 800febe:	50a3      	str	r3, [r4, r2]
 800fec0:	e7b3      	b.n	800fe2a <_malloc_r+0x22>
 800fec2:	6862      	ldr	r2, [r4, #4]
 800fec4:	42a3      	cmp	r3, r4
 800fec6:	bf0c      	ite	eq
 800fec8:	6032      	streq	r2, [r6, #0]
 800feca:	605a      	strne	r2, [r3, #4]
 800fecc:	e7ec      	b.n	800fea8 <_malloc_r+0xa0>
 800fece:	4623      	mov	r3, r4
 800fed0:	6864      	ldr	r4, [r4, #4]
 800fed2:	e7b2      	b.n	800fe3a <_malloc_r+0x32>
 800fed4:	4634      	mov	r4, r6
 800fed6:	6876      	ldr	r6, [r6, #4]
 800fed8:	e7b9      	b.n	800fe4e <_malloc_r+0x46>
 800feda:	230c      	movs	r3, #12
 800fedc:	603b      	str	r3, [r7, #0]
 800fede:	4638      	mov	r0, r7
 800fee0:	f000 f860 	bl	800ffa4 <__malloc_unlock>
 800fee4:	e7a1      	b.n	800fe2a <_malloc_r+0x22>
 800fee6:	6025      	str	r5, [r4, #0]
 800fee8:	e7de      	b.n	800fea8 <_malloc_r+0xa0>
 800feea:	bf00      	nop
 800feec:	20007ed0 	.word	0x20007ed0

0800fef0 <realloc>:
 800fef0:	4b02      	ldr	r3, [pc, #8]	; (800fefc <realloc+0xc>)
 800fef2:	460a      	mov	r2, r1
 800fef4:	4601      	mov	r1, r0
 800fef6:	6818      	ldr	r0, [r3, #0]
 800fef8:	f000 b85a 	b.w	800ffb0 <_realloc_r>
 800fefc:	2000069c 	.word	0x2000069c

0800ff00 <_sbrk_r>:
 800ff00:	b538      	push	{r3, r4, r5, lr}
 800ff02:	4d06      	ldr	r5, [pc, #24]	; (800ff1c <_sbrk_r+0x1c>)
 800ff04:	2300      	movs	r3, #0
 800ff06:	4604      	mov	r4, r0
 800ff08:	4608      	mov	r0, r1
 800ff0a:	602b      	str	r3, [r5, #0]
 800ff0c:	f7f3 ff6c 	bl	8003de8 <_sbrk>
 800ff10:	1c43      	adds	r3, r0, #1
 800ff12:	d102      	bne.n	800ff1a <_sbrk_r+0x1a>
 800ff14:	682b      	ldr	r3, [r5, #0]
 800ff16:	b103      	cbz	r3, 800ff1a <_sbrk_r+0x1a>
 800ff18:	6023      	str	r3, [r4, #0]
 800ff1a:	bd38      	pop	{r3, r4, r5, pc}
 800ff1c:	20007ed8 	.word	0x20007ed8

0800ff20 <siprintf>:
 800ff20:	b40e      	push	{r1, r2, r3}
 800ff22:	b500      	push	{lr}
 800ff24:	b09c      	sub	sp, #112	; 0x70
 800ff26:	ab1d      	add	r3, sp, #116	; 0x74
 800ff28:	9002      	str	r0, [sp, #8]
 800ff2a:	9006      	str	r0, [sp, #24]
 800ff2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ff30:	4809      	ldr	r0, [pc, #36]	; (800ff58 <siprintf+0x38>)
 800ff32:	9107      	str	r1, [sp, #28]
 800ff34:	9104      	str	r1, [sp, #16]
 800ff36:	4909      	ldr	r1, [pc, #36]	; (800ff5c <siprintf+0x3c>)
 800ff38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff3c:	9105      	str	r1, [sp, #20]
 800ff3e:	6800      	ldr	r0, [r0, #0]
 800ff40:	9301      	str	r3, [sp, #4]
 800ff42:	a902      	add	r1, sp, #8
 800ff44:	f000 f8be 	bl	80100c4 <_svfiprintf_r>
 800ff48:	9b02      	ldr	r3, [sp, #8]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	701a      	strb	r2, [r3, #0]
 800ff4e:	b01c      	add	sp, #112	; 0x70
 800ff50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff54:	b003      	add	sp, #12
 800ff56:	4770      	bx	lr
 800ff58:	2000069c 	.word	0x2000069c
 800ff5c:	ffff0208 	.word	0xffff0208

0800ff60 <strcpy>:
 800ff60:	4603      	mov	r3, r0
 800ff62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff66:	f803 2b01 	strb.w	r2, [r3], #1
 800ff6a:	2a00      	cmp	r2, #0
 800ff6c:	d1f9      	bne.n	800ff62 <strcpy+0x2>
 800ff6e:	4770      	bx	lr

0800ff70 <strncpy>:
 800ff70:	b510      	push	{r4, lr}
 800ff72:	3901      	subs	r1, #1
 800ff74:	4603      	mov	r3, r0
 800ff76:	b132      	cbz	r2, 800ff86 <strncpy+0x16>
 800ff78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ff7c:	f803 4b01 	strb.w	r4, [r3], #1
 800ff80:	3a01      	subs	r2, #1
 800ff82:	2c00      	cmp	r4, #0
 800ff84:	d1f7      	bne.n	800ff76 <strncpy+0x6>
 800ff86:	441a      	add	r2, r3
 800ff88:	2100      	movs	r1, #0
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	d100      	bne.n	800ff90 <strncpy+0x20>
 800ff8e:	bd10      	pop	{r4, pc}
 800ff90:	f803 1b01 	strb.w	r1, [r3], #1
 800ff94:	e7f9      	b.n	800ff8a <strncpy+0x1a>
	...

0800ff98 <__malloc_lock>:
 800ff98:	4801      	ldr	r0, [pc, #4]	; (800ffa0 <__malloc_lock+0x8>)
 800ff9a:	f000 bb27 	b.w	80105ec <__retarget_lock_acquire_recursive>
 800ff9e:	bf00      	nop
 800ffa0:	20007edc 	.word	0x20007edc

0800ffa4 <__malloc_unlock>:
 800ffa4:	4801      	ldr	r0, [pc, #4]	; (800ffac <__malloc_unlock+0x8>)
 800ffa6:	f000 bb22 	b.w	80105ee <__retarget_lock_release_recursive>
 800ffaa:	bf00      	nop
 800ffac:	20007edc 	.word	0x20007edc

0800ffb0 <_realloc_r>:
 800ffb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffb4:	4680      	mov	r8, r0
 800ffb6:	4614      	mov	r4, r2
 800ffb8:	460e      	mov	r6, r1
 800ffba:	b921      	cbnz	r1, 800ffc6 <_realloc_r+0x16>
 800ffbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffc0:	4611      	mov	r1, r2
 800ffc2:	f7ff bf21 	b.w	800fe08 <_malloc_r>
 800ffc6:	b92a      	cbnz	r2, 800ffd4 <_realloc_r+0x24>
 800ffc8:	f7ff feb2 	bl	800fd30 <_free_r>
 800ffcc:	4625      	mov	r5, r4
 800ffce:	4628      	mov	r0, r5
 800ffd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffd4:	f000 fb26 	bl	8010624 <_malloc_usable_size_r>
 800ffd8:	4284      	cmp	r4, r0
 800ffda:	4607      	mov	r7, r0
 800ffdc:	d802      	bhi.n	800ffe4 <_realloc_r+0x34>
 800ffde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ffe2:	d812      	bhi.n	801000a <_realloc_r+0x5a>
 800ffe4:	4621      	mov	r1, r4
 800ffe6:	4640      	mov	r0, r8
 800ffe8:	f7ff ff0e 	bl	800fe08 <_malloc_r>
 800ffec:	4605      	mov	r5, r0
 800ffee:	2800      	cmp	r0, #0
 800fff0:	d0ed      	beq.n	800ffce <_realloc_r+0x1e>
 800fff2:	42bc      	cmp	r4, r7
 800fff4:	4622      	mov	r2, r4
 800fff6:	4631      	mov	r1, r6
 800fff8:	bf28      	it	cs
 800fffa:	463a      	movcs	r2, r7
 800fffc:	f7ff fe82 	bl	800fd04 <memcpy>
 8010000:	4631      	mov	r1, r6
 8010002:	4640      	mov	r0, r8
 8010004:	f7ff fe94 	bl	800fd30 <_free_r>
 8010008:	e7e1      	b.n	800ffce <_realloc_r+0x1e>
 801000a:	4635      	mov	r5, r6
 801000c:	e7df      	b.n	800ffce <_realloc_r+0x1e>

0801000e <__ssputs_r>:
 801000e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010012:	688e      	ldr	r6, [r1, #8]
 8010014:	429e      	cmp	r6, r3
 8010016:	4682      	mov	sl, r0
 8010018:	460c      	mov	r4, r1
 801001a:	4690      	mov	r8, r2
 801001c:	461f      	mov	r7, r3
 801001e:	d838      	bhi.n	8010092 <__ssputs_r+0x84>
 8010020:	898a      	ldrh	r2, [r1, #12]
 8010022:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010026:	d032      	beq.n	801008e <__ssputs_r+0x80>
 8010028:	6825      	ldr	r5, [r4, #0]
 801002a:	6909      	ldr	r1, [r1, #16]
 801002c:	eba5 0901 	sub.w	r9, r5, r1
 8010030:	6965      	ldr	r5, [r4, #20]
 8010032:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010036:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801003a:	3301      	adds	r3, #1
 801003c:	444b      	add	r3, r9
 801003e:	106d      	asrs	r5, r5, #1
 8010040:	429d      	cmp	r5, r3
 8010042:	bf38      	it	cc
 8010044:	461d      	movcc	r5, r3
 8010046:	0553      	lsls	r3, r2, #21
 8010048:	d531      	bpl.n	80100ae <__ssputs_r+0xa0>
 801004a:	4629      	mov	r1, r5
 801004c:	f7ff fedc 	bl	800fe08 <_malloc_r>
 8010050:	4606      	mov	r6, r0
 8010052:	b950      	cbnz	r0, 801006a <__ssputs_r+0x5c>
 8010054:	230c      	movs	r3, #12
 8010056:	f8ca 3000 	str.w	r3, [sl]
 801005a:	89a3      	ldrh	r3, [r4, #12]
 801005c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010060:	81a3      	strh	r3, [r4, #12]
 8010062:	f04f 30ff 	mov.w	r0, #4294967295
 8010066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801006a:	6921      	ldr	r1, [r4, #16]
 801006c:	464a      	mov	r2, r9
 801006e:	f7ff fe49 	bl	800fd04 <memcpy>
 8010072:	89a3      	ldrh	r3, [r4, #12]
 8010074:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801007c:	81a3      	strh	r3, [r4, #12]
 801007e:	6126      	str	r6, [r4, #16]
 8010080:	6165      	str	r5, [r4, #20]
 8010082:	444e      	add	r6, r9
 8010084:	eba5 0509 	sub.w	r5, r5, r9
 8010088:	6026      	str	r6, [r4, #0]
 801008a:	60a5      	str	r5, [r4, #8]
 801008c:	463e      	mov	r6, r7
 801008e:	42be      	cmp	r6, r7
 8010090:	d900      	bls.n	8010094 <__ssputs_r+0x86>
 8010092:	463e      	mov	r6, r7
 8010094:	6820      	ldr	r0, [r4, #0]
 8010096:	4632      	mov	r2, r6
 8010098:	4641      	mov	r1, r8
 801009a:	f000 faa9 	bl	80105f0 <memmove>
 801009e:	68a3      	ldr	r3, [r4, #8]
 80100a0:	1b9b      	subs	r3, r3, r6
 80100a2:	60a3      	str	r3, [r4, #8]
 80100a4:	6823      	ldr	r3, [r4, #0]
 80100a6:	4433      	add	r3, r6
 80100a8:	6023      	str	r3, [r4, #0]
 80100aa:	2000      	movs	r0, #0
 80100ac:	e7db      	b.n	8010066 <__ssputs_r+0x58>
 80100ae:	462a      	mov	r2, r5
 80100b0:	f7ff ff7e 	bl	800ffb0 <_realloc_r>
 80100b4:	4606      	mov	r6, r0
 80100b6:	2800      	cmp	r0, #0
 80100b8:	d1e1      	bne.n	801007e <__ssputs_r+0x70>
 80100ba:	6921      	ldr	r1, [r4, #16]
 80100bc:	4650      	mov	r0, sl
 80100be:	f7ff fe37 	bl	800fd30 <_free_r>
 80100c2:	e7c7      	b.n	8010054 <__ssputs_r+0x46>

080100c4 <_svfiprintf_r>:
 80100c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100c8:	4698      	mov	r8, r3
 80100ca:	898b      	ldrh	r3, [r1, #12]
 80100cc:	061b      	lsls	r3, r3, #24
 80100ce:	b09d      	sub	sp, #116	; 0x74
 80100d0:	4607      	mov	r7, r0
 80100d2:	460d      	mov	r5, r1
 80100d4:	4614      	mov	r4, r2
 80100d6:	d50e      	bpl.n	80100f6 <_svfiprintf_r+0x32>
 80100d8:	690b      	ldr	r3, [r1, #16]
 80100da:	b963      	cbnz	r3, 80100f6 <_svfiprintf_r+0x32>
 80100dc:	2140      	movs	r1, #64	; 0x40
 80100de:	f7ff fe93 	bl	800fe08 <_malloc_r>
 80100e2:	6028      	str	r0, [r5, #0]
 80100e4:	6128      	str	r0, [r5, #16]
 80100e6:	b920      	cbnz	r0, 80100f2 <_svfiprintf_r+0x2e>
 80100e8:	230c      	movs	r3, #12
 80100ea:	603b      	str	r3, [r7, #0]
 80100ec:	f04f 30ff 	mov.w	r0, #4294967295
 80100f0:	e0d1      	b.n	8010296 <_svfiprintf_r+0x1d2>
 80100f2:	2340      	movs	r3, #64	; 0x40
 80100f4:	616b      	str	r3, [r5, #20]
 80100f6:	2300      	movs	r3, #0
 80100f8:	9309      	str	r3, [sp, #36]	; 0x24
 80100fa:	2320      	movs	r3, #32
 80100fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010100:	f8cd 800c 	str.w	r8, [sp, #12]
 8010104:	2330      	movs	r3, #48	; 0x30
 8010106:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80102b0 <_svfiprintf_r+0x1ec>
 801010a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801010e:	f04f 0901 	mov.w	r9, #1
 8010112:	4623      	mov	r3, r4
 8010114:	469a      	mov	sl, r3
 8010116:	f813 2b01 	ldrb.w	r2, [r3], #1
 801011a:	b10a      	cbz	r2, 8010120 <_svfiprintf_r+0x5c>
 801011c:	2a25      	cmp	r2, #37	; 0x25
 801011e:	d1f9      	bne.n	8010114 <_svfiprintf_r+0x50>
 8010120:	ebba 0b04 	subs.w	fp, sl, r4
 8010124:	d00b      	beq.n	801013e <_svfiprintf_r+0x7a>
 8010126:	465b      	mov	r3, fp
 8010128:	4622      	mov	r2, r4
 801012a:	4629      	mov	r1, r5
 801012c:	4638      	mov	r0, r7
 801012e:	f7ff ff6e 	bl	801000e <__ssputs_r>
 8010132:	3001      	adds	r0, #1
 8010134:	f000 80aa 	beq.w	801028c <_svfiprintf_r+0x1c8>
 8010138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801013a:	445a      	add	r2, fp
 801013c:	9209      	str	r2, [sp, #36]	; 0x24
 801013e:	f89a 3000 	ldrb.w	r3, [sl]
 8010142:	2b00      	cmp	r3, #0
 8010144:	f000 80a2 	beq.w	801028c <_svfiprintf_r+0x1c8>
 8010148:	2300      	movs	r3, #0
 801014a:	f04f 32ff 	mov.w	r2, #4294967295
 801014e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010152:	f10a 0a01 	add.w	sl, sl, #1
 8010156:	9304      	str	r3, [sp, #16]
 8010158:	9307      	str	r3, [sp, #28]
 801015a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801015e:	931a      	str	r3, [sp, #104]	; 0x68
 8010160:	4654      	mov	r4, sl
 8010162:	2205      	movs	r2, #5
 8010164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010168:	4851      	ldr	r0, [pc, #324]	; (80102b0 <_svfiprintf_r+0x1ec>)
 801016a:	f7f0 f841 	bl	80001f0 <memchr>
 801016e:	9a04      	ldr	r2, [sp, #16]
 8010170:	b9d8      	cbnz	r0, 80101aa <_svfiprintf_r+0xe6>
 8010172:	06d0      	lsls	r0, r2, #27
 8010174:	bf44      	itt	mi
 8010176:	2320      	movmi	r3, #32
 8010178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801017c:	0711      	lsls	r1, r2, #28
 801017e:	bf44      	itt	mi
 8010180:	232b      	movmi	r3, #43	; 0x2b
 8010182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010186:	f89a 3000 	ldrb.w	r3, [sl]
 801018a:	2b2a      	cmp	r3, #42	; 0x2a
 801018c:	d015      	beq.n	80101ba <_svfiprintf_r+0xf6>
 801018e:	9a07      	ldr	r2, [sp, #28]
 8010190:	4654      	mov	r4, sl
 8010192:	2000      	movs	r0, #0
 8010194:	f04f 0c0a 	mov.w	ip, #10
 8010198:	4621      	mov	r1, r4
 801019a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801019e:	3b30      	subs	r3, #48	; 0x30
 80101a0:	2b09      	cmp	r3, #9
 80101a2:	d94e      	bls.n	8010242 <_svfiprintf_r+0x17e>
 80101a4:	b1b0      	cbz	r0, 80101d4 <_svfiprintf_r+0x110>
 80101a6:	9207      	str	r2, [sp, #28]
 80101a8:	e014      	b.n	80101d4 <_svfiprintf_r+0x110>
 80101aa:	eba0 0308 	sub.w	r3, r0, r8
 80101ae:	fa09 f303 	lsl.w	r3, r9, r3
 80101b2:	4313      	orrs	r3, r2
 80101b4:	9304      	str	r3, [sp, #16]
 80101b6:	46a2      	mov	sl, r4
 80101b8:	e7d2      	b.n	8010160 <_svfiprintf_r+0x9c>
 80101ba:	9b03      	ldr	r3, [sp, #12]
 80101bc:	1d19      	adds	r1, r3, #4
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	9103      	str	r1, [sp, #12]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	bfbb      	ittet	lt
 80101c6:	425b      	neglt	r3, r3
 80101c8:	f042 0202 	orrlt.w	r2, r2, #2
 80101cc:	9307      	strge	r3, [sp, #28]
 80101ce:	9307      	strlt	r3, [sp, #28]
 80101d0:	bfb8      	it	lt
 80101d2:	9204      	strlt	r2, [sp, #16]
 80101d4:	7823      	ldrb	r3, [r4, #0]
 80101d6:	2b2e      	cmp	r3, #46	; 0x2e
 80101d8:	d10c      	bne.n	80101f4 <_svfiprintf_r+0x130>
 80101da:	7863      	ldrb	r3, [r4, #1]
 80101dc:	2b2a      	cmp	r3, #42	; 0x2a
 80101de:	d135      	bne.n	801024c <_svfiprintf_r+0x188>
 80101e0:	9b03      	ldr	r3, [sp, #12]
 80101e2:	1d1a      	adds	r2, r3, #4
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	9203      	str	r2, [sp, #12]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	bfb8      	it	lt
 80101ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80101f0:	3402      	adds	r4, #2
 80101f2:	9305      	str	r3, [sp, #20]
 80101f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80102c0 <_svfiprintf_r+0x1fc>
 80101f8:	7821      	ldrb	r1, [r4, #0]
 80101fa:	2203      	movs	r2, #3
 80101fc:	4650      	mov	r0, sl
 80101fe:	f7ef fff7 	bl	80001f0 <memchr>
 8010202:	b140      	cbz	r0, 8010216 <_svfiprintf_r+0x152>
 8010204:	2340      	movs	r3, #64	; 0x40
 8010206:	eba0 000a 	sub.w	r0, r0, sl
 801020a:	fa03 f000 	lsl.w	r0, r3, r0
 801020e:	9b04      	ldr	r3, [sp, #16]
 8010210:	4303      	orrs	r3, r0
 8010212:	3401      	adds	r4, #1
 8010214:	9304      	str	r3, [sp, #16]
 8010216:	f814 1b01 	ldrb.w	r1, [r4], #1
 801021a:	4826      	ldr	r0, [pc, #152]	; (80102b4 <_svfiprintf_r+0x1f0>)
 801021c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010220:	2206      	movs	r2, #6
 8010222:	f7ef ffe5 	bl	80001f0 <memchr>
 8010226:	2800      	cmp	r0, #0
 8010228:	d038      	beq.n	801029c <_svfiprintf_r+0x1d8>
 801022a:	4b23      	ldr	r3, [pc, #140]	; (80102b8 <_svfiprintf_r+0x1f4>)
 801022c:	bb1b      	cbnz	r3, 8010276 <_svfiprintf_r+0x1b2>
 801022e:	9b03      	ldr	r3, [sp, #12]
 8010230:	3307      	adds	r3, #7
 8010232:	f023 0307 	bic.w	r3, r3, #7
 8010236:	3308      	adds	r3, #8
 8010238:	9303      	str	r3, [sp, #12]
 801023a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801023c:	4433      	add	r3, r6
 801023e:	9309      	str	r3, [sp, #36]	; 0x24
 8010240:	e767      	b.n	8010112 <_svfiprintf_r+0x4e>
 8010242:	fb0c 3202 	mla	r2, ip, r2, r3
 8010246:	460c      	mov	r4, r1
 8010248:	2001      	movs	r0, #1
 801024a:	e7a5      	b.n	8010198 <_svfiprintf_r+0xd4>
 801024c:	2300      	movs	r3, #0
 801024e:	3401      	adds	r4, #1
 8010250:	9305      	str	r3, [sp, #20]
 8010252:	4619      	mov	r1, r3
 8010254:	f04f 0c0a 	mov.w	ip, #10
 8010258:	4620      	mov	r0, r4
 801025a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801025e:	3a30      	subs	r2, #48	; 0x30
 8010260:	2a09      	cmp	r2, #9
 8010262:	d903      	bls.n	801026c <_svfiprintf_r+0x1a8>
 8010264:	2b00      	cmp	r3, #0
 8010266:	d0c5      	beq.n	80101f4 <_svfiprintf_r+0x130>
 8010268:	9105      	str	r1, [sp, #20]
 801026a:	e7c3      	b.n	80101f4 <_svfiprintf_r+0x130>
 801026c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010270:	4604      	mov	r4, r0
 8010272:	2301      	movs	r3, #1
 8010274:	e7f0      	b.n	8010258 <_svfiprintf_r+0x194>
 8010276:	ab03      	add	r3, sp, #12
 8010278:	9300      	str	r3, [sp, #0]
 801027a:	462a      	mov	r2, r5
 801027c:	4b0f      	ldr	r3, [pc, #60]	; (80102bc <_svfiprintf_r+0x1f8>)
 801027e:	a904      	add	r1, sp, #16
 8010280:	4638      	mov	r0, r7
 8010282:	f3af 8000 	nop.w
 8010286:	1c42      	adds	r2, r0, #1
 8010288:	4606      	mov	r6, r0
 801028a:	d1d6      	bne.n	801023a <_svfiprintf_r+0x176>
 801028c:	89ab      	ldrh	r3, [r5, #12]
 801028e:	065b      	lsls	r3, r3, #25
 8010290:	f53f af2c 	bmi.w	80100ec <_svfiprintf_r+0x28>
 8010294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010296:	b01d      	add	sp, #116	; 0x74
 8010298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801029c:	ab03      	add	r3, sp, #12
 801029e:	9300      	str	r3, [sp, #0]
 80102a0:	462a      	mov	r2, r5
 80102a2:	4b06      	ldr	r3, [pc, #24]	; (80102bc <_svfiprintf_r+0x1f8>)
 80102a4:	a904      	add	r1, sp, #16
 80102a6:	4638      	mov	r0, r7
 80102a8:	f000 f87a 	bl	80103a0 <_printf_i>
 80102ac:	e7eb      	b.n	8010286 <_svfiprintf_r+0x1c2>
 80102ae:	bf00      	nop
 80102b0:	08010ff0 	.word	0x08010ff0
 80102b4:	08010ffa 	.word	0x08010ffa
 80102b8:	00000000 	.word	0x00000000
 80102bc:	0801000f 	.word	0x0801000f
 80102c0:	08010ff6 	.word	0x08010ff6

080102c4 <_printf_common>:
 80102c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102c8:	4616      	mov	r6, r2
 80102ca:	4699      	mov	r9, r3
 80102cc:	688a      	ldr	r2, [r1, #8]
 80102ce:	690b      	ldr	r3, [r1, #16]
 80102d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80102d4:	4293      	cmp	r3, r2
 80102d6:	bfb8      	it	lt
 80102d8:	4613      	movlt	r3, r2
 80102da:	6033      	str	r3, [r6, #0]
 80102dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80102e0:	4607      	mov	r7, r0
 80102e2:	460c      	mov	r4, r1
 80102e4:	b10a      	cbz	r2, 80102ea <_printf_common+0x26>
 80102e6:	3301      	adds	r3, #1
 80102e8:	6033      	str	r3, [r6, #0]
 80102ea:	6823      	ldr	r3, [r4, #0]
 80102ec:	0699      	lsls	r1, r3, #26
 80102ee:	bf42      	ittt	mi
 80102f0:	6833      	ldrmi	r3, [r6, #0]
 80102f2:	3302      	addmi	r3, #2
 80102f4:	6033      	strmi	r3, [r6, #0]
 80102f6:	6825      	ldr	r5, [r4, #0]
 80102f8:	f015 0506 	ands.w	r5, r5, #6
 80102fc:	d106      	bne.n	801030c <_printf_common+0x48>
 80102fe:	f104 0a19 	add.w	sl, r4, #25
 8010302:	68e3      	ldr	r3, [r4, #12]
 8010304:	6832      	ldr	r2, [r6, #0]
 8010306:	1a9b      	subs	r3, r3, r2
 8010308:	42ab      	cmp	r3, r5
 801030a:	dc26      	bgt.n	801035a <_printf_common+0x96>
 801030c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010310:	1e13      	subs	r3, r2, #0
 8010312:	6822      	ldr	r2, [r4, #0]
 8010314:	bf18      	it	ne
 8010316:	2301      	movne	r3, #1
 8010318:	0692      	lsls	r2, r2, #26
 801031a:	d42b      	bmi.n	8010374 <_printf_common+0xb0>
 801031c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010320:	4649      	mov	r1, r9
 8010322:	4638      	mov	r0, r7
 8010324:	47c0      	blx	r8
 8010326:	3001      	adds	r0, #1
 8010328:	d01e      	beq.n	8010368 <_printf_common+0xa4>
 801032a:	6823      	ldr	r3, [r4, #0]
 801032c:	68e5      	ldr	r5, [r4, #12]
 801032e:	6832      	ldr	r2, [r6, #0]
 8010330:	f003 0306 	and.w	r3, r3, #6
 8010334:	2b04      	cmp	r3, #4
 8010336:	bf08      	it	eq
 8010338:	1aad      	subeq	r5, r5, r2
 801033a:	68a3      	ldr	r3, [r4, #8]
 801033c:	6922      	ldr	r2, [r4, #16]
 801033e:	bf0c      	ite	eq
 8010340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010344:	2500      	movne	r5, #0
 8010346:	4293      	cmp	r3, r2
 8010348:	bfc4      	itt	gt
 801034a:	1a9b      	subgt	r3, r3, r2
 801034c:	18ed      	addgt	r5, r5, r3
 801034e:	2600      	movs	r6, #0
 8010350:	341a      	adds	r4, #26
 8010352:	42b5      	cmp	r5, r6
 8010354:	d11a      	bne.n	801038c <_printf_common+0xc8>
 8010356:	2000      	movs	r0, #0
 8010358:	e008      	b.n	801036c <_printf_common+0xa8>
 801035a:	2301      	movs	r3, #1
 801035c:	4652      	mov	r2, sl
 801035e:	4649      	mov	r1, r9
 8010360:	4638      	mov	r0, r7
 8010362:	47c0      	blx	r8
 8010364:	3001      	adds	r0, #1
 8010366:	d103      	bne.n	8010370 <_printf_common+0xac>
 8010368:	f04f 30ff 	mov.w	r0, #4294967295
 801036c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010370:	3501      	adds	r5, #1
 8010372:	e7c6      	b.n	8010302 <_printf_common+0x3e>
 8010374:	18e1      	adds	r1, r4, r3
 8010376:	1c5a      	adds	r2, r3, #1
 8010378:	2030      	movs	r0, #48	; 0x30
 801037a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801037e:	4422      	add	r2, r4
 8010380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010384:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010388:	3302      	adds	r3, #2
 801038a:	e7c7      	b.n	801031c <_printf_common+0x58>
 801038c:	2301      	movs	r3, #1
 801038e:	4622      	mov	r2, r4
 8010390:	4649      	mov	r1, r9
 8010392:	4638      	mov	r0, r7
 8010394:	47c0      	blx	r8
 8010396:	3001      	adds	r0, #1
 8010398:	d0e6      	beq.n	8010368 <_printf_common+0xa4>
 801039a:	3601      	adds	r6, #1
 801039c:	e7d9      	b.n	8010352 <_printf_common+0x8e>
	...

080103a0 <_printf_i>:
 80103a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80103a4:	7e0f      	ldrb	r7, [r1, #24]
 80103a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80103a8:	2f78      	cmp	r7, #120	; 0x78
 80103aa:	4691      	mov	r9, r2
 80103ac:	4680      	mov	r8, r0
 80103ae:	460c      	mov	r4, r1
 80103b0:	469a      	mov	sl, r3
 80103b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80103b6:	d807      	bhi.n	80103c8 <_printf_i+0x28>
 80103b8:	2f62      	cmp	r7, #98	; 0x62
 80103ba:	d80a      	bhi.n	80103d2 <_printf_i+0x32>
 80103bc:	2f00      	cmp	r7, #0
 80103be:	f000 80d8 	beq.w	8010572 <_printf_i+0x1d2>
 80103c2:	2f58      	cmp	r7, #88	; 0x58
 80103c4:	f000 80a3 	beq.w	801050e <_printf_i+0x16e>
 80103c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80103d0:	e03a      	b.n	8010448 <_printf_i+0xa8>
 80103d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80103d6:	2b15      	cmp	r3, #21
 80103d8:	d8f6      	bhi.n	80103c8 <_printf_i+0x28>
 80103da:	a101      	add	r1, pc, #4	; (adr r1, 80103e0 <_printf_i+0x40>)
 80103dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80103e0:	08010439 	.word	0x08010439
 80103e4:	0801044d 	.word	0x0801044d
 80103e8:	080103c9 	.word	0x080103c9
 80103ec:	080103c9 	.word	0x080103c9
 80103f0:	080103c9 	.word	0x080103c9
 80103f4:	080103c9 	.word	0x080103c9
 80103f8:	0801044d 	.word	0x0801044d
 80103fc:	080103c9 	.word	0x080103c9
 8010400:	080103c9 	.word	0x080103c9
 8010404:	080103c9 	.word	0x080103c9
 8010408:	080103c9 	.word	0x080103c9
 801040c:	08010559 	.word	0x08010559
 8010410:	0801047d 	.word	0x0801047d
 8010414:	0801053b 	.word	0x0801053b
 8010418:	080103c9 	.word	0x080103c9
 801041c:	080103c9 	.word	0x080103c9
 8010420:	0801057b 	.word	0x0801057b
 8010424:	080103c9 	.word	0x080103c9
 8010428:	0801047d 	.word	0x0801047d
 801042c:	080103c9 	.word	0x080103c9
 8010430:	080103c9 	.word	0x080103c9
 8010434:	08010543 	.word	0x08010543
 8010438:	682b      	ldr	r3, [r5, #0]
 801043a:	1d1a      	adds	r2, r3, #4
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	602a      	str	r2, [r5, #0]
 8010440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010448:	2301      	movs	r3, #1
 801044a:	e0a3      	b.n	8010594 <_printf_i+0x1f4>
 801044c:	6820      	ldr	r0, [r4, #0]
 801044e:	6829      	ldr	r1, [r5, #0]
 8010450:	0606      	lsls	r6, r0, #24
 8010452:	f101 0304 	add.w	r3, r1, #4
 8010456:	d50a      	bpl.n	801046e <_printf_i+0xce>
 8010458:	680e      	ldr	r6, [r1, #0]
 801045a:	602b      	str	r3, [r5, #0]
 801045c:	2e00      	cmp	r6, #0
 801045e:	da03      	bge.n	8010468 <_printf_i+0xc8>
 8010460:	232d      	movs	r3, #45	; 0x2d
 8010462:	4276      	negs	r6, r6
 8010464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010468:	485e      	ldr	r0, [pc, #376]	; (80105e4 <_printf_i+0x244>)
 801046a:	230a      	movs	r3, #10
 801046c:	e019      	b.n	80104a2 <_printf_i+0x102>
 801046e:	680e      	ldr	r6, [r1, #0]
 8010470:	602b      	str	r3, [r5, #0]
 8010472:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010476:	bf18      	it	ne
 8010478:	b236      	sxthne	r6, r6
 801047a:	e7ef      	b.n	801045c <_printf_i+0xbc>
 801047c:	682b      	ldr	r3, [r5, #0]
 801047e:	6820      	ldr	r0, [r4, #0]
 8010480:	1d19      	adds	r1, r3, #4
 8010482:	6029      	str	r1, [r5, #0]
 8010484:	0601      	lsls	r1, r0, #24
 8010486:	d501      	bpl.n	801048c <_printf_i+0xec>
 8010488:	681e      	ldr	r6, [r3, #0]
 801048a:	e002      	b.n	8010492 <_printf_i+0xf2>
 801048c:	0646      	lsls	r6, r0, #25
 801048e:	d5fb      	bpl.n	8010488 <_printf_i+0xe8>
 8010490:	881e      	ldrh	r6, [r3, #0]
 8010492:	4854      	ldr	r0, [pc, #336]	; (80105e4 <_printf_i+0x244>)
 8010494:	2f6f      	cmp	r7, #111	; 0x6f
 8010496:	bf0c      	ite	eq
 8010498:	2308      	moveq	r3, #8
 801049a:	230a      	movne	r3, #10
 801049c:	2100      	movs	r1, #0
 801049e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80104a2:	6865      	ldr	r5, [r4, #4]
 80104a4:	60a5      	str	r5, [r4, #8]
 80104a6:	2d00      	cmp	r5, #0
 80104a8:	bfa2      	ittt	ge
 80104aa:	6821      	ldrge	r1, [r4, #0]
 80104ac:	f021 0104 	bicge.w	r1, r1, #4
 80104b0:	6021      	strge	r1, [r4, #0]
 80104b2:	b90e      	cbnz	r6, 80104b8 <_printf_i+0x118>
 80104b4:	2d00      	cmp	r5, #0
 80104b6:	d04d      	beq.n	8010554 <_printf_i+0x1b4>
 80104b8:	4615      	mov	r5, r2
 80104ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80104be:	fb03 6711 	mls	r7, r3, r1, r6
 80104c2:	5dc7      	ldrb	r7, [r0, r7]
 80104c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80104c8:	4637      	mov	r7, r6
 80104ca:	42bb      	cmp	r3, r7
 80104cc:	460e      	mov	r6, r1
 80104ce:	d9f4      	bls.n	80104ba <_printf_i+0x11a>
 80104d0:	2b08      	cmp	r3, #8
 80104d2:	d10b      	bne.n	80104ec <_printf_i+0x14c>
 80104d4:	6823      	ldr	r3, [r4, #0]
 80104d6:	07de      	lsls	r6, r3, #31
 80104d8:	d508      	bpl.n	80104ec <_printf_i+0x14c>
 80104da:	6923      	ldr	r3, [r4, #16]
 80104dc:	6861      	ldr	r1, [r4, #4]
 80104de:	4299      	cmp	r1, r3
 80104e0:	bfde      	ittt	le
 80104e2:	2330      	movle	r3, #48	; 0x30
 80104e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80104e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80104ec:	1b52      	subs	r2, r2, r5
 80104ee:	6122      	str	r2, [r4, #16]
 80104f0:	f8cd a000 	str.w	sl, [sp]
 80104f4:	464b      	mov	r3, r9
 80104f6:	aa03      	add	r2, sp, #12
 80104f8:	4621      	mov	r1, r4
 80104fa:	4640      	mov	r0, r8
 80104fc:	f7ff fee2 	bl	80102c4 <_printf_common>
 8010500:	3001      	adds	r0, #1
 8010502:	d14c      	bne.n	801059e <_printf_i+0x1fe>
 8010504:	f04f 30ff 	mov.w	r0, #4294967295
 8010508:	b004      	add	sp, #16
 801050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801050e:	4835      	ldr	r0, [pc, #212]	; (80105e4 <_printf_i+0x244>)
 8010510:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010514:	6829      	ldr	r1, [r5, #0]
 8010516:	6823      	ldr	r3, [r4, #0]
 8010518:	f851 6b04 	ldr.w	r6, [r1], #4
 801051c:	6029      	str	r1, [r5, #0]
 801051e:	061d      	lsls	r5, r3, #24
 8010520:	d514      	bpl.n	801054c <_printf_i+0x1ac>
 8010522:	07df      	lsls	r7, r3, #31
 8010524:	bf44      	itt	mi
 8010526:	f043 0320 	orrmi.w	r3, r3, #32
 801052a:	6023      	strmi	r3, [r4, #0]
 801052c:	b91e      	cbnz	r6, 8010536 <_printf_i+0x196>
 801052e:	6823      	ldr	r3, [r4, #0]
 8010530:	f023 0320 	bic.w	r3, r3, #32
 8010534:	6023      	str	r3, [r4, #0]
 8010536:	2310      	movs	r3, #16
 8010538:	e7b0      	b.n	801049c <_printf_i+0xfc>
 801053a:	6823      	ldr	r3, [r4, #0]
 801053c:	f043 0320 	orr.w	r3, r3, #32
 8010540:	6023      	str	r3, [r4, #0]
 8010542:	2378      	movs	r3, #120	; 0x78
 8010544:	4828      	ldr	r0, [pc, #160]	; (80105e8 <_printf_i+0x248>)
 8010546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801054a:	e7e3      	b.n	8010514 <_printf_i+0x174>
 801054c:	0659      	lsls	r1, r3, #25
 801054e:	bf48      	it	mi
 8010550:	b2b6      	uxthmi	r6, r6
 8010552:	e7e6      	b.n	8010522 <_printf_i+0x182>
 8010554:	4615      	mov	r5, r2
 8010556:	e7bb      	b.n	80104d0 <_printf_i+0x130>
 8010558:	682b      	ldr	r3, [r5, #0]
 801055a:	6826      	ldr	r6, [r4, #0]
 801055c:	6961      	ldr	r1, [r4, #20]
 801055e:	1d18      	adds	r0, r3, #4
 8010560:	6028      	str	r0, [r5, #0]
 8010562:	0635      	lsls	r5, r6, #24
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	d501      	bpl.n	801056c <_printf_i+0x1cc>
 8010568:	6019      	str	r1, [r3, #0]
 801056a:	e002      	b.n	8010572 <_printf_i+0x1d2>
 801056c:	0670      	lsls	r0, r6, #25
 801056e:	d5fb      	bpl.n	8010568 <_printf_i+0x1c8>
 8010570:	8019      	strh	r1, [r3, #0]
 8010572:	2300      	movs	r3, #0
 8010574:	6123      	str	r3, [r4, #16]
 8010576:	4615      	mov	r5, r2
 8010578:	e7ba      	b.n	80104f0 <_printf_i+0x150>
 801057a:	682b      	ldr	r3, [r5, #0]
 801057c:	1d1a      	adds	r2, r3, #4
 801057e:	602a      	str	r2, [r5, #0]
 8010580:	681d      	ldr	r5, [r3, #0]
 8010582:	6862      	ldr	r2, [r4, #4]
 8010584:	2100      	movs	r1, #0
 8010586:	4628      	mov	r0, r5
 8010588:	f7ef fe32 	bl	80001f0 <memchr>
 801058c:	b108      	cbz	r0, 8010592 <_printf_i+0x1f2>
 801058e:	1b40      	subs	r0, r0, r5
 8010590:	6060      	str	r0, [r4, #4]
 8010592:	6863      	ldr	r3, [r4, #4]
 8010594:	6123      	str	r3, [r4, #16]
 8010596:	2300      	movs	r3, #0
 8010598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801059c:	e7a8      	b.n	80104f0 <_printf_i+0x150>
 801059e:	6923      	ldr	r3, [r4, #16]
 80105a0:	462a      	mov	r2, r5
 80105a2:	4649      	mov	r1, r9
 80105a4:	4640      	mov	r0, r8
 80105a6:	47d0      	blx	sl
 80105a8:	3001      	adds	r0, #1
 80105aa:	d0ab      	beq.n	8010504 <_printf_i+0x164>
 80105ac:	6823      	ldr	r3, [r4, #0]
 80105ae:	079b      	lsls	r3, r3, #30
 80105b0:	d413      	bmi.n	80105da <_printf_i+0x23a>
 80105b2:	68e0      	ldr	r0, [r4, #12]
 80105b4:	9b03      	ldr	r3, [sp, #12]
 80105b6:	4298      	cmp	r0, r3
 80105b8:	bfb8      	it	lt
 80105ba:	4618      	movlt	r0, r3
 80105bc:	e7a4      	b.n	8010508 <_printf_i+0x168>
 80105be:	2301      	movs	r3, #1
 80105c0:	4632      	mov	r2, r6
 80105c2:	4649      	mov	r1, r9
 80105c4:	4640      	mov	r0, r8
 80105c6:	47d0      	blx	sl
 80105c8:	3001      	adds	r0, #1
 80105ca:	d09b      	beq.n	8010504 <_printf_i+0x164>
 80105cc:	3501      	adds	r5, #1
 80105ce:	68e3      	ldr	r3, [r4, #12]
 80105d0:	9903      	ldr	r1, [sp, #12]
 80105d2:	1a5b      	subs	r3, r3, r1
 80105d4:	42ab      	cmp	r3, r5
 80105d6:	dcf2      	bgt.n	80105be <_printf_i+0x21e>
 80105d8:	e7eb      	b.n	80105b2 <_printf_i+0x212>
 80105da:	2500      	movs	r5, #0
 80105dc:	f104 0619 	add.w	r6, r4, #25
 80105e0:	e7f5      	b.n	80105ce <_printf_i+0x22e>
 80105e2:	bf00      	nop
 80105e4:	08011001 	.word	0x08011001
 80105e8:	08011012 	.word	0x08011012

080105ec <__retarget_lock_acquire_recursive>:
 80105ec:	4770      	bx	lr

080105ee <__retarget_lock_release_recursive>:
 80105ee:	4770      	bx	lr

080105f0 <memmove>:
 80105f0:	4288      	cmp	r0, r1
 80105f2:	b510      	push	{r4, lr}
 80105f4:	eb01 0402 	add.w	r4, r1, r2
 80105f8:	d902      	bls.n	8010600 <memmove+0x10>
 80105fa:	4284      	cmp	r4, r0
 80105fc:	4623      	mov	r3, r4
 80105fe:	d807      	bhi.n	8010610 <memmove+0x20>
 8010600:	1e43      	subs	r3, r0, #1
 8010602:	42a1      	cmp	r1, r4
 8010604:	d008      	beq.n	8010618 <memmove+0x28>
 8010606:	f811 2b01 	ldrb.w	r2, [r1], #1
 801060a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801060e:	e7f8      	b.n	8010602 <memmove+0x12>
 8010610:	4402      	add	r2, r0
 8010612:	4601      	mov	r1, r0
 8010614:	428a      	cmp	r2, r1
 8010616:	d100      	bne.n	801061a <memmove+0x2a>
 8010618:	bd10      	pop	{r4, pc}
 801061a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801061e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010622:	e7f7      	b.n	8010614 <memmove+0x24>

08010624 <_malloc_usable_size_r>:
 8010624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010628:	1f18      	subs	r0, r3, #4
 801062a:	2b00      	cmp	r3, #0
 801062c:	bfbc      	itt	lt
 801062e:	580b      	ldrlt	r3, [r1, r0]
 8010630:	18c0      	addlt	r0, r0, r3
 8010632:	4770      	bx	lr

08010634 <_init>:
 8010634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010636:	bf00      	nop
 8010638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801063a:	bc08      	pop	{r3}
 801063c:	469e      	mov	lr, r3
 801063e:	4770      	bx	lr

08010640 <_fini>:
 8010640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010642:	bf00      	nop
 8010644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010646:	bc08      	pop	{r3}
 8010648:	469e      	mov	lr, r3
 801064a:	4770      	bx	lr
